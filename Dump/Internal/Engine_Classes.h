#pragma once 
#include <Engine_Structs.h>
 
 
 
//Class Engine.Actor Size 544
// Inherited 40 bytes 
class AActor : public UObject
{

 public: 
	struct FActorTickFunction PrimaryActorTick;  // Offset: 40 Size: 48
	char bNetTemporary : 1;  // Offset: 88 Size: 1
	char bNetStartup : 1;  // Offset: 88 Size: 1
	char bOnlyRelevantToOwner : 1;  // Offset: 88 Size: 1
	char bAlwaysRelevant : 1;  // Offset: 88 Size: 1
	char bReplicateMovement : 1;  // Offset: 88 Size: 1
	char bHidden : 1;  // Offset: 88 Size: 1
	char bTearOff : 1;  // Offset: 88 Size: 1
	char bForceNetAddressable : 1;  // Offset: 88 Size: 1
	char bExchangedRoles : 1;  // Offset: 89 Size: 1
	char bNetLoadOnClient : 1;  // Offset: 89 Size: 1
	char bNetUseOwnerRelevancy : 1;  // Offset: 89 Size: 1
	char bRelevantForNetworkReplays : 1;  // Offset: 89 Size: 1
	char bRelevantForLevelBounds : 1;  // Offset: 89 Size: 1
	char bReplayRewindable : 1;  // Offset: 89 Size: 1
	char bAllowTickBeforeBeginPlay : 1;  // Offset: 89 Size: 1
	char bAutoDestroyWhenFinished : 1;  // Offset: 89 Size: 1
	char bCanBeDamaged : 1;  // Offset: 90 Size: 1
	char bBlockInput : 1;  // Offset: 90 Size: 1
	char bCollideWhenPlacing : 1;  // Offset: 90 Size: 1
	char bFindCameraComponentWhenViewTarget : 1;  // Offset: 90 Size: 1
	char bGenerateOverlapEventsDuringLevelStreaming : 1;  // Offset: 90 Size: 1
	char bIgnoresOriginShifting : 1;  // Offset: 90 Size: 1
	char bEnableAutoLODGeneration : 1;  // Offset: 90 Size: 1
	char bIsEditorOnlyActor : 1;  // Offset: 90 Size: 1
	char bActorSeamlessTraveled : 1;  // Offset: 91 Size: 1
	char bReplicates : 1;  // Offset: 91 Size: 1
	char bCanBeInCluster : 1;  // Offset: 91 Size: 1
	char bAllowReceiveTickEventOnDedicatedServer : 1;  // Offset: 91 Size: 1
	char pad_91_1 : 4;  // Offset: 91 Size: 1
	char pad_92_1 : 3;  // Offset: 92 Size: 1
	char bActorEnableCollision : 1;  // Offset: 92 Size: 1
	char bActorIsBeingDestroyed : 1;  // Offset: 92 Size: 1
	char pad_92_2 : 3;  // Offset: 92 Size: 1
	enum class EActorUpdateOverlapsMethod UpdateOverlapsMethodDuringLevelStreaming;  // Offset: 93 Size: 1
	enum class EActorUpdateOverlapsMethod DefaultUpdateOverlapsMethodDuringLevelStreaming;  // Offset: 94 Size: 1
	enum class ENetRole RemoteRole;  // Offset: 95 Size: 1
	struct FRepMovement ReplicatedMovement;  // Offset: 96 Size: 52
	float InitialLifeSpan;  // Offset: 148 Size: 4
	float CustomTimeDilation;  // Offset: 152 Size: 4
	char pad_156[4];  // Offset: 156 Size: 4
	struct FRepAttachment AttachmentReplication;  // Offset: 160 Size: 64
	struct AActor* Owner;  // Offset: 224 Size: 8
	struct FName NetDriverName;  // Offset: 232 Size: 8
	enum class ENetRole Role;  // Offset: 240 Size: 1
	enum class ENetDormancy NetDormancy;  // Offset: 241 Size: 1
	enum class ESpawnActorCollisionHandlingMethod SpawnCollisionHandlingMethod;  // Offset: 242 Size: 1
	enum class EAutoReceiveInput AutoReceiveInput;  // Offset: 243 Size: 1
	int32_t InputPriority;  // Offset: 244 Size: 4
	struct UInputComponent* InputComponent;  // Offset: 248 Size: 8
	float NetCullDistanceSquared;  // Offset: 256 Size: 4
	int32_t NetTag;  // Offset: 260 Size: 4
	float NetUpdateFrequency;  // Offset: 264 Size: 4
	float MinNetUpdateFrequency;  // Offset: 268 Size: 4
	float NetPriority;  // Offset: 272 Size: 4
	char pad_276[4];  // Offset: 276 Size: 4
	struct APawn* Instigator;  // Offset: 280 Size: 8
	struct TArray<struct AActor*> Children;  // Offset: 288 Size: 16
	struct USceneComponent* RootComponent;  // Offset: 304 Size: 8
	struct TArray<struct AMatineeActor*> ControllingMatineeActors;  // Offset: 312 Size: 16
	char pad_328[8];  // Offset: 328 Size: 8
	struct TArray<struct FName> Layers;  // Offset: 336 Size: 16
	struct TWeakObjectPtr<UChildActorComponent> ParentComponent;  // Offset: 352 Size: 8
	char pad_360[8];  // Offset: 360 Size: 8
	struct TArray<struct FName> Tags;  // Offset: 368 Size: 16
	struct FMulticastSparseDelegate OnTakeAnyDamage;  // Offset: 384 Size: 1
	struct FMulticastSparseDelegate OnTakePointDamage;  // Offset: 385 Size: 1
	struct FMulticastSparseDelegate OnTakeRadialDamage;  // Offset: 386 Size: 1
	struct FMulticastSparseDelegate OnActorBeginOverlap;  // Offset: 387 Size: 1
	struct FMulticastSparseDelegate OnActorEndOverlap;  // Offset: 388 Size: 1
	struct FMulticastSparseDelegate OnBeginCursorOver;  // Offset: 389 Size: 1
	struct FMulticastSparseDelegate OnEndCursorOver;  // Offset: 390 Size: 1
	struct FMulticastSparseDelegate OnClicked;  // Offset: 391 Size: 1
	struct FMulticastSparseDelegate OnReleased;  // Offset: 392 Size: 1
	struct FMulticastSparseDelegate OnInputTouchBegin;  // Offset: 393 Size: 1
	struct FMulticastSparseDelegate OnInputTouchEnd;  // Offset: 394 Size: 1
	struct FMulticastSparseDelegate OnInputTouchEnter;  // Offset: 395 Size: 1
	struct FMulticastSparseDelegate OnInputTouchLeave;  // Offset: 396 Size: 1
	struct FMulticastSparseDelegate OnActorHit;  // Offset: 397 Size: 1
	struct FMulticastSparseDelegate OnDestroyed;  // Offset: 398 Size: 1
	struct FMulticastSparseDelegate OnEndPlay;  // Offset: 399 Size: 1
	char pad_400[96];  // Offset: 400 Size: 96
	struct TArray<struct UActorComponent*> InstanceComponents;  // Offset: 496 Size: 16
	struct TArray<struct UActorComponent*> BlueprintCreatedComponents;  // Offset: 512 Size: 16
	char pad_528[16];  // Offset: 528 Size: 16



 // Functions 
 public:
	bool WasRecentlyRendered(float Tolerance); // Function Engine.Actor.WasRecentlyRendered
	void UserConstructionScript(); // Function Engine.Actor.UserConstructionScript
	void TearOff(); // Function Engine.Actor.TearOff
	void SnapRootComponentTo(struct AActor* InParentActor, struct FName InSocketName); // Function Engine.Actor.SnapRootComponentTo
	void SetTickGroup(enum class ETickingGroup NewTickGroup); // Function Engine.Actor.SetTickGroup
	void SetTickableWhenPaused(bool bTickableWhenPaused); // Function Engine.Actor.SetTickableWhenPaused
	void SetReplicates(bool bInReplicates); // Function Engine.Actor.SetReplicates
	void SetReplicateMovement(bool bInReplicateMovement); // Function Engine.Actor.SetReplicateMovement
	void SetOwner(struct AActor* NewOwner); // Function Engine.Actor.SetOwner
	void SetNetDormancy(enum class ENetDormancy NewDormancy); // Function Engine.Actor.SetNetDormancy
	void SetLifeSpan(float InLifespan); // Function Engine.Actor.SetLifeSpan
	void SetAutoDestroyWhenFinished(bool bVal); // Function Engine.Actor.SetAutoDestroyWhenFinished
	void SetActorTickInterval(float TickInterval); // Function Engine.Actor.SetActorTickInterval
	void SetActorTickEnabled(bool bEnabled); // Function Engine.Actor.SetActorTickEnabled
	void SetActorScale3D(struct FVector NewScale3D); // Function Engine.Actor.SetActorScale3D
	void SetActorRelativeScale3D(struct FVector NewRelativeScale); // Function Engine.Actor.SetActorRelativeScale3D
	void SetActorHiddenInGame(bool bNewHidden); // Function Engine.Actor.SetActorHiddenInGame
	void SetActorEnableCollision(bool bNewActorEnableCollision); // Function Engine.Actor.SetActorEnableCollision
	void RemoveTickPrerequisiteComponent(struct UActorComponent* PrerequisiteComponent); // Function Engine.Actor.RemoveTickPrerequisiteComponent
	void RemoveTickPrerequisiteActor(struct AActor* PrerequisiteActor); // Function Engine.Actor.RemoveTickPrerequisiteActor
	void ReceiveTick(float DeltaSeconds); // Function Engine.Actor.ReceiveTick
	void ReceiveRadialDamage(float DamageReceived, struct UDamageType* DamageType, struct FVector Origin, struct FHitResult& HitInfo, struct AController* InstigatedBy, struct AActor* DamageCauser); // Function Engine.Actor.ReceiveRadialDamage
	void ReceivePointDamage(float Damage, struct UDamageType* DamageType, struct FVector HitLocation, struct FVector HitNormal, struct UPrimitiveComponent* HitComponent, struct FName BoneName, struct FVector ShotFromDirection, struct AController* InstigatedBy, struct AActor* DamageCauser, struct FHitResult& HitInfo); // Function Engine.Actor.ReceivePointDamage
	void ReceiveHit(struct UPrimitiveComponent* MyComp, struct AActor* Other, struct UPrimitiveComponent* OtherComp, bool bSelfMoved, struct FVector HitLocation, struct FVector HitNormal, struct FVector NormalImpulse, struct FHitResult& Hit); // Function Engine.Actor.ReceiveHit
	void ReceiveEndPlay(enum class EEndPlayReason EndPlayReason); // Function Engine.Actor.ReceiveEndPlay
	void ReceiveDestroyed(); // Function Engine.Actor.ReceiveDestroyed
	void ReceiveBeginPlay(); // Function Engine.Actor.ReceiveBeginPlay
	void ReceiveAnyDamage(float Damage, struct UDamageType* DamageType, struct AController* InstigatedBy, struct AActor* DamageCauser); // Function Engine.Actor.ReceiveAnyDamage
	void ReceiveActorOnReleased(struct FKey ButtonReleased); // Function Engine.Actor.ReceiveActorOnReleased
	void ReceiveActorOnInputTouchLeave(enum class ETouchIndex FingerIndex); // Function Engine.Actor.ReceiveActorOnInputTouchLeave
	void ReceiveActorOnInputTouchEnter(enum class ETouchIndex FingerIndex); // Function Engine.Actor.ReceiveActorOnInputTouchEnter
	void ReceiveActorOnInputTouchEnd(enum class ETouchIndex FingerIndex); // Function Engine.Actor.ReceiveActorOnInputTouchEnd
	void ReceiveActorOnInputTouchBegin(enum class ETouchIndex FingerIndex); // Function Engine.Actor.ReceiveActorOnInputTouchBegin
	void ReceiveActorOnClicked(struct FKey ButtonPressed); // Function Engine.Actor.ReceiveActorOnClicked
	void ReceiveActorEndOverlap(struct AActor* OtherActor); // Function Engine.Actor.ReceiveActorEndOverlap
	void ReceiveActorEndCursorOver(); // Function Engine.Actor.ReceiveActorEndCursorOver
	void ReceiveActorBeginOverlap(struct AActor* OtherActor); // Function Engine.Actor.ReceiveActorBeginOverlap
	void ReceiveActorBeginCursorOver(); // Function Engine.Actor.ReceiveActorBeginCursorOver
	void PrestreamTextures(float Seconds, bool bEnableStreaming, int32_t CinematicTextureGroups); // Function Engine.Actor.PrestreamTextures
	void OnRep_ReplicateMovement(); // Function Engine.Actor.OnRep_ReplicateMovement
	void OnRep_ReplicatedMovement(); // Function Engine.Actor.OnRep_ReplicatedMovement
	void OnRep_Owner(); // Function Engine.Actor.OnRep_Owner
	void OnRep_Instigator(); // Function Engine.Actor.OnRep_Instigator
	void OnRep_AttachmentReplication(); // Function Engine.Actor.OnRep_AttachmentReplication
	void MakeNoise(float Loudness, struct APawn* NoiseInstigator, struct FVector NoiseLocation, float MaxRange, struct FName Tag); // Function Engine.Actor.MakeNoise
	struct UMaterialInstanceDynamic* MakeMIDForMaterial(struct UMaterialInterface* Parent); // Function Engine.Actor.MakeMIDForMaterial
	bool K2_TeleportTo(struct FVector DestLocation, struct FRotator DestRotation); // Function Engine.Actor.K2_TeleportTo
	bool K2_SetActorTransform(struct FTransform& NewTransform, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_SetActorTransform
	bool K2_SetActorRotation(struct FRotator NewRotation, bool bTeleportPhysics); // Function Engine.Actor.K2_SetActorRotation
	void K2_SetActorRelativeTransform(struct FTransform& NewRelativeTransform, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_SetActorRelativeTransform
	void K2_SetActorRelativeRotation(struct FRotator NewRelativeRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_SetActorRelativeRotation
	void K2_SetActorRelativeLocation(struct FVector NewRelativeLocation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_SetActorRelativeLocation
	bool K2_SetActorLocationAndRotation(struct FVector NewLocation, struct FRotator NewRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_SetActorLocationAndRotation
	bool K2_SetActorLocation(struct FVector NewLocation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_SetActorLocation
	void K2_OnReset(); // Function Engine.Actor.K2_OnReset
	void K2_OnEndViewTarget(struct APlayerController* PC); // Function Engine.Actor.K2_OnEndViewTarget
	void K2_OnBecomeViewTarget(struct APlayerController* PC); // Function Engine.Actor.K2_OnBecomeViewTarget
	struct USceneComponent* K2_GetRootComponent(); // Function Engine.Actor.K2_GetRootComponent
	struct TArray<struct UActorComponent*> K2_GetComponentsByClass(UActorComponent* ComponentClass); // Function Engine.Actor.K2_GetComponentsByClass
	struct FRotator K2_GetActorRotation(); // Function Engine.Actor.K2_GetActorRotation
	struct FVector K2_GetActorLocation(); // Function Engine.Actor.K2_GetActorLocation
	void K2_DetachFromActor(enum class EDetachmentRule LocationRule, enum class EDetachmentRule RotationRule, enum class EDetachmentRule ScaleRule); // Function Engine.Actor.K2_DetachFromActor
	void K2_DestroyComponent(struct UActorComponent* Component); // Function Engine.Actor.K2_DestroyComponent
	void K2_DestroyActor(); // Function Engine.Actor.K2_DestroyActor
	void K2_AttachToComponent(struct USceneComponent* Parent, struct FName SocketName, enum class EAttachmentRule LocationRule, enum class EAttachmentRule RotationRule, enum class EAttachmentRule ScaleRule, bool bWeldSimulatedBodies); // Function Engine.Actor.K2_AttachToComponent
	void K2_AttachToActor(struct AActor* ParentActor, struct FName SocketName, enum class EAttachmentRule LocationRule, enum class EAttachmentRule RotationRule, enum class EAttachmentRule ScaleRule, bool bWeldSimulatedBodies); // Function Engine.Actor.K2_AttachToActor
	void K2_AttachRootComponentToActor(struct AActor* InParentActor, struct FName InSocketName, enum class EAttachLocation AttachLocationType, bool bWeldSimulatedBodies); // Function Engine.Actor.K2_AttachRootComponentToActor
	void K2_AttachRootComponentTo(struct USceneComponent* InParent, struct FName InSocketName, enum class EAttachLocation AttachLocationType, bool bWeldSimulatedBodies); // Function Engine.Actor.K2_AttachRootComponentTo
	void K2_AddActorWorldTransformKeepScale(struct FTransform& DeltaTransform, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_AddActorWorldTransformKeepScale
	void K2_AddActorWorldTransform(struct FTransform& DeltaTransform, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_AddActorWorldTransform
	void K2_AddActorWorldRotation(struct FRotator DeltaRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_AddActorWorldRotation
	void K2_AddActorWorldOffset(struct FVector DeltaLocation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_AddActorWorldOffset
	void K2_AddActorLocalTransform(struct FTransform& NewTransform, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_AddActorLocalTransform
	void K2_AddActorLocalRotation(struct FRotator DeltaRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_AddActorLocalRotation
	void K2_AddActorLocalOffset(struct FVector DeltaLocation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_AddActorLocalOffset
	bool IsOverlappingActor(struct AActor* Other); // Function Engine.Actor.IsOverlappingActor
	bool IsChildActor(); // Function Engine.Actor.IsChildActor
	bool IsActorTickEnabled(); // Function Engine.Actor.IsActorTickEnabled
	bool IsActorBeingDestroyed(); // Function Engine.Actor.IsActorBeingDestroyed
	bool HasAuthority(); // Function Engine.Actor.HasAuthority
	float GetVerticalDistanceTo(struct AActor* OtherActor); // Function Engine.Actor.GetVerticalDistanceTo
	struct FVector GetVelocity(); // Function Engine.Actor.GetVelocity
	struct FTransform GetTransform(); // Function Engine.Actor.GetTransform
	bool GetTickableWhenPaused(); // Function Engine.Actor.GetTickableWhenPaused
	float GetSquaredHorizontalDistanceTo(struct AActor* OtherActor); // Function Engine.Actor.GetSquaredHorizontalDistanceTo
	float GetSquaredDistanceTo(struct AActor* OtherActor); // Function Engine.Actor.GetSquaredDistanceTo
	enum class ENetRole GetRemoteRole(); // Function Engine.Actor.GetRemoteRole
	struct UChildActorComponent* GetParentComponent(); // Function Engine.Actor.GetParentComponent
	struct AActor* GetParentActor(); // Function Engine.Actor.GetParentActor
	struct AActor* GetOwner(); // Function Engine.Actor.GetOwner
	void GetOverlappingComponents(struct TArray<struct UPrimitiveComponent*>& OverlappingComponents); // Function Engine.Actor.GetOverlappingComponents
	void GetOverlappingActors(struct TArray<struct AActor*>& OverlappingActors, AActor* ClassFilter); // Function Engine.Actor.GetOverlappingActors
	enum class ENetRole GetLocalRole(); // Function Engine.Actor.GetLocalRole
	float GetLifeSpan(); // Function Engine.Actor.GetLifeSpan
	struct AController* GetInstigatorController(); // Function Engine.Actor.GetInstigatorController
	struct APawn* GetInstigator(); // Function Engine.Actor.GetInstigator
	struct FVector GetInputVectorAxisValue(struct FKey InputAxisKey); // Function Engine.Actor.GetInputVectorAxisValue
	float GetInputAxisValue(struct FName InputAxisName); // Function Engine.Actor.GetInputAxisValue
	float GetInputAxisKeyValue(struct FKey InputAxisKey); // Function Engine.Actor.GetInputAxisKeyValue
	float GetHorizontalDotProductTo(struct AActor* OtherActor); // Function Engine.Actor.GetHorizontalDotProductTo
	float GetHorizontalDistanceTo(struct AActor* OtherActor); // Function Engine.Actor.GetHorizontalDistanceTo
	float GetGameTimeSinceCreation(); // Function Engine.Actor.GetGameTimeSinceCreation
	float GetDotProductTo(struct AActor* OtherActor); // Function Engine.Actor.GetDotProductTo
	float GetDistanceTo(struct AActor* OtherActor); // Function Engine.Actor.GetDistanceTo
	struct TArray<struct UActorComponent*> GetComponentsByTag(UActorComponent* ComponentClass, struct FName Tag); // Function Engine.Actor.GetComponentsByTag
	struct TArray<struct UActorComponent*> GetComponentsByInterface(UInterface* Interface); // Function Engine.Actor.GetComponentsByInterface
	struct UActorComponent* GetComponentByClass(UActorComponent* ComponentClass); // Function Engine.Actor.GetComponentByClass
	struct FName GetAttachParentSocketName(); // Function Engine.Actor.GetAttachParentSocketName
	struct AActor* GetAttachParentActor(); // Function Engine.Actor.GetAttachParentActor
	void GetAttachedActors(struct TArray<struct AActor*>& OutActors, bool bResetArray); // Function Engine.Actor.GetAttachedActors
	void GetAllChildActors(struct TArray<struct AActor*>& ChildActors, bool bIncludeDescendants); // Function Engine.Actor.GetAllChildActors
	struct FVector GetActorUpVector(); // Function Engine.Actor.GetActorUpVector
	float GetActorTimeDilation(); // Function Engine.Actor.GetActorTimeDilation
	float GetActorTickInterval(); // Function Engine.Actor.GetActorTickInterval
	struct FVector GetActorScale3D(); // Function Engine.Actor.GetActorScale3D
	struct FVector GetActorRightVector(); // Function Engine.Actor.GetActorRightVector
	struct FVector GetActorRelativeScale3D(); // Function Engine.Actor.GetActorRelativeScale3D
	struct FVector GetActorForwardVector(); // Function Engine.Actor.GetActorForwardVector
	void GetActorEyesViewPoint(struct FVector& OutLocation, struct FRotator& OutRotation); // Function Engine.Actor.GetActorEyesViewPoint
	bool GetActorEnableCollision(); // Function Engine.Actor.GetActorEnableCollision
	void GetActorBounds(bool bOnlyCollidingComponents, struct FVector& Origin, struct FVector& BoxExtent, bool bIncludeFromChildActors); // Function Engine.Actor.GetActorBounds
	void ForceNetUpdate(); // Function Engine.Actor.ForceNetUpdate
	void FlushNetDormancy(); // Function Engine.Actor.FlushNetDormancy
	void FinishAddComponent(struct UActorComponent* Component, bool bManualAttachment, struct FTransform& RelativeTransform); // Function Engine.Actor.FinishAddComponent
	void EnableInput(struct APlayerController* PlayerController); // Function Engine.Actor.EnableInput
	void DisableInput(struct APlayerController* PlayerController); // Function Engine.Actor.DisableInput
	void DetachRootComponentFromParent(bool bMaintainWorldPosition); // Function Engine.Actor.DetachRootComponentFromParent
	void AddTickPrerequisiteComponent(struct UActorComponent* PrerequisiteComponent); // Function Engine.Actor.AddTickPrerequisiteComponent
	void AddTickPrerequisiteActor(struct AActor* PrerequisiteActor); // Function Engine.Actor.AddTickPrerequisiteActor
	struct UActorComponent* AddComponentByClass(UActorComponent* Class, bool bManualAttachment, struct FTransform& RelativeTransform, bool bDeferredFinish); // Function Engine.Actor.AddComponentByClass
	struct UActorComponent* AddComponent(struct FName TemplateName, bool bManualAttachment, struct FTransform& RelativeTransform, struct UObject* ComponentTemplateContext, bool bDeferredFinish); // Function Engine.Actor.AddComponent
	bool ActorHasTag(struct FName Tag); // Function Engine.Actor.ActorHasTag
}; 
 
 


//Class Engine.LightmassPortalComponent Size 528
// Inherited 528 bytes 
class ULightmassPortalComponent : public USceneComponent
{

 public: 
	struct UBoxComponent* PreviewBox;  // Offset: 520 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.Player Size 72
// Inherited 40 bytes 
class UPlayer : public UObject
{

 public: 
	char pad_40[8];  // Offset: 40 Size: 8
	struct APlayerController* PlayerController;  // Offset: 48 Size: 8
	int32_t CurrentNetSpeed;  // Offset: 56 Size: 4
	int32_t ConfiguredInternetSpeed;  // Offset: 60 Size: 4
	int32_t ConfiguredLanSpeed;  // Offset: 64 Size: 4
	char pad_68[4];  // Offset: 68 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.CurveTable Size 160
// Inherited 40 bytes 
class UCurveTable : public UObject
{

 public: 
	char pad_40[120];  // Offset: 40 Size: 120



 // Functions 
 public:
}; 
 
 


//Class Engine.GameInstance Size 424
// Inherited 40 bytes 
class UGameInstance : public UObject
{

 public: 
	char pad_40[16];  // Offset: 40 Size: 16
	struct TArray<struct ULocalPlayer*> LocalPlayers;  // Offset: 56 Size: 16
	struct UOnlineSession* OnlineSession;  // Offset: 72 Size: 8
	struct TArray<struct UObject*> ReferencedObjects;  // Offset: 80 Size: 16
	char pad_96[24];  // Offset: 96 Size: 24
	struct FMulticastInlineDelegate OnPawnControllerChangedDelegates;  // Offset: 120 Size: 16
	char pad_136[288];  // Offset: 136 Size: 288



 // Functions 
 public:
	void ReceiveShutdown(); // Function Engine.GameInstance.ReceiveShutdown
	void ReceiveInit(); // Function Engine.GameInstance.ReceiveInit
	void HandleTravelError(enum class ETravelFailure FailureType); // Function Engine.GameInstance.HandleTravelError
	void HandleNetworkError(enum class ENetworkFailure FailureType, bool bIsServer); // Function Engine.GameInstance.HandleNetworkError
	void DebugRemovePlayer(int32_t ControllerId); // Function Engine.GameInstance.DebugRemovePlayer
	void DebugCreatePlayer(int32_t ControllerId); // Function Engine.GameInstance.DebugCreatePlayer
}; 
 
 


//Class Engine.ExponentialHeightFogComponent Size 688
// Inherited 528 bytes 
class UExponentialHeightFogComponent : public USceneComponent
{

 public: 
	float FogDensity;  // Offset: 520 Size: 4
	float FogHeightFalloff;  // Offset: 524 Size: 4
	struct FExponentialHeightFogData SecondFogData;  // Offset: 528 Size: 12
	struct FLinearColor FogInscatteringColor;  // Offset: 540 Size: 16
	struct UTextureCube* InscatteringColorCubemap;  // Offset: 560 Size: 8
	float InscatteringColorCubemapAngle;  // Offset: 568 Size: 4
	struct FLinearColor InscatteringTextureTint;  // Offset: 572 Size: 16
	float FullyDirectionalInscatteringColorDistance;  // Offset: 588 Size: 4
	float NonDirectionalInscatteringColorDistance;  // Offset: 592 Size: 4
	float DirectionalInscatteringExponent;  // Offset: 596 Size: 4
	float DirectionalInscatteringStartDistance;  // Offset: 600 Size: 4
	struct FLinearColor DirectionalInscatteringColor;  // Offset: 604 Size: 16
	float FogMaxOpacity;  // Offset: 620 Size: 4
	float StartDistance;  // Offset: 624 Size: 4
	float FogCutoffDistance;  // Offset: 628 Size: 4
	char pad_636_1 : 7;  // Offset: 636 Size: 1
	bool bEnableVolumetricFog : 1;  // Offset: 632 Size: 1
	float VolumetricFogScatteringDistribution;  // Offset: 636 Size: 4
	struct FColor VolumetricFogAlbedo;  // Offset: 640 Size: 4
	struct FLinearColor VolumetricFogEmissive;  // Offset: 644 Size: 16
	float VolumetricFogExtinctionScale;  // Offset: 660 Size: 4
	float VolumetricFogDistance;  // Offset: 664 Size: 4
	float VolumetricFogStaticLightingScatteringIntensity;  // Offset: 668 Size: 4
	char pad_673_1 : 7;  // Offset: 673 Size: 1
	bool bOverrideLightColorsWithFogInscatteringColors : 1;  // Offset: 672 Size: 1
	char pad_674[14];  // Offset: 674 Size: 14



 // Functions 
 public:
	void SetVolumetricFogScatteringDistribution(float NewValue); // Function Engine.ExponentialHeightFogComponent.SetVolumetricFogScatteringDistribution
	void SetVolumetricFogExtinctionScale(float NewValue); // Function Engine.ExponentialHeightFogComponent.SetVolumetricFogExtinctionScale
	void SetVolumetricFogEmissive(struct FLinearColor NewValue); // Function Engine.ExponentialHeightFogComponent.SetVolumetricFogEmissive
	void SetVolumetricFogDistance(float NewValue); // Function Engine.ExponentialHeightFogComponent.SetVolumetricFogDistance
	void SetVolumetricFogAlbedo(struct FColor NewValue); // Function Engine.ExponentialHeightFogComponent.SetVolumetricFogAlbedo
	void SetVolumetricFog(bool bNewValue); // Function Engine.ExponentialHeightFogComponent.SetVolumetricFog
	void SetStartDistance(float Value); // Function Engine.ExponentialHeightFogComponent.SetStartDistance
	void SetNonDirectionalInscatteringColorDistance(float Value); // Function Engine.ExponentialHeightFogComponent.SetNonDirectionalInscatteringColorDistance
	void SetInscatteringTextureTint(struct FLinearColor Value); // Function Engine.ExponentialHeightFogComponent.SetInscatteringTextureTint
	void SetInscatteringColorCubemapAngle(float Value); // Function Engine.ExponentialHeightFogComponent.SetInscatteringColorCubemapAngle
	void SetInscatteringColorCubemap(struct UTextureCube* Value); // Function Engine.ExponentialHeightFogComponent.SetInscatteringColorCubemap
	void SetFullyDirectionalInscatteringColorDistance(float Value); // Function Engine.ExponentialHeightFogComponent.SetFullyDirectionalInscatteringColorDistance
	void SetFogMaxOpacity(float Value); // Function Engine.ExponentialHeightFogComponent.SetFogMaxOpacity
	void SetFogInscatteringColor(struct FLinearColor Value); // Function Engine.ExponentialHeightFogComponent.SetFogInscatteringColor
	void SetFogHeightFalloff(float Value); // Function Engine.ExponentialHeightFogComponent.SetFogHeightFalloff
	void SetFogDensity(float Value); // Function Engine.ExponentialHeightFogComponent.SetFogDensity
	void SetFogCutoffDistance(float Value); // Function Engine.ExponentialHeightFogComponent.SetFogCutoffDistance
	void SetDirectionalInscatteringStartDistance(float Value); // Function Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringStartDistance
	void SetDirectionalInscatteringExponent(float Value); // Function Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringExponent
	void SetDirectionalInscatteringColor(struct FLinearColor Value); // Function Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringColor
}; 
 
 


//Class Engine.Subsystem Size 48
// Inherited 40 bytes 
class USubsystem : public UObject
{

 public: 
	char pad_40[8];  // Offset: 40 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.InterpTrackMoveAxis Size 168
// Inherited 144 bytes 
class UInterpTrackMoveAxis : public UInterpTrackFloatBase
{

 public: 
	enum class EInterpMoveAxis MoveAxis;  // Offset: 144 Size: 1
	char pad_145[7];  // Offset: 145 Size: 7
	struct FInterpLookupTrack LookupTrack;  // Offset: 152 Size: 16



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionTextureSample Size 96
// Inherited 72 bytes 
class UMaterialExpressionTextureSample : public UMaterialExpressionTextureBase
{

 public: 
	struct FExpressionInput Coordinates;  // Offset: 72 Size: 20
	char pad_92[4];  // Offset: 92 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleSizeScale Size 128
// Inherited 48 bytes 
class UParticleModuleSizeScale : public UParticleModuleSizeBase
{

 public: 
	struct FRawDistributionVector SizeScale;  // Offset: 48 Size: 72
	char EnableX : 1;  // Offset: 120 Size: 1
	char EnableY : 1;  // Offset: 120 Size: 1
	char EnableZ : 1;  // Offset: 120 Size: 1
	char pad_120_1 : 5;  // Offset: 120 Size: 1
	char pad_121[8];  // Offset: 121 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.AnimCurveCompressionCodec Size 40
// Inherited 40 bytes 
class UAnimCurveCompressionCodec : public UObject
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.GameInstanceSubsystem Size 48
// Inherited 48 bytes 
class UGameInstanceSubsystem : public USubsystem
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.SoundEffectSourcePresetChain Size 64
// Inherited 40 bytes 
class USoundEffectSourcePresetChain : public UObject
{

 public: 
	struct TArray<struct FSourceEffectChainEntry> Chain;  // Offset: 40 Size: 16
	char bPlayEffectChainTails : 1;  // Offset: 56 Size: 1
	char pad_56_1 : 7;  // Offset: 56 Size: 1
	char pad_57[8];  // Offset: 57 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.DirectionalLight Size 560
// Inherited 560 bytes 
class ADirectionalLight : public ALight
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionTextureSampleParameter2D Size 128
// Inherited 128 bytes 
class UMaterialExpressionTextureSampleParameter2D : public UMaterialExpressionTextureSampleParameter
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.InputSettings Size 320
// Inherited 40 bytes 
class UInputSettings : public UObject
{

 public: 
	struct TArray<struct FInputAxisConfigEntry> AxisConfig;  // Offset: 40 Size: 16
	char bAltEnterTogglesFullscreen : 1;  // Offset: 56 Size: 1
	char bF11TogglesFullscreen : 1;  // Offset: 56 Size: 1
	char bUseMouseForTouch : 1;  // Offset: 56 Size: 1
	char bEnableMouseSmoothing : 1;  // Offset: 56 Size: 1
	char bEnableFOVScaling : 1;  // Offset: 56 Size: 1
	char bCaptureMouseOnLaunch : 1;  // Offset: 56 Size: 1
	char bDefaultViewportMouseLock : 1;  // Offset: 56 Size: 1
	char bAlwaysShowTouchInterface : 1;  // Offset: 56 Size: 1
	char bShowConsoleOnFourFingerTap : 1;  // Offset: 57 Size: 1
	char bEnableGestureRecognizer : 1;  // Offset: 57 Size: 1
	char pad_57_1 : 6;  // Offset: 57 Size: 1
	char pad_58_1 : 7;  // Offset: 58 Size: 1
	bool bUseAutocorrect : 1;  // Offset: 58 Size: 1
	char pad_59[5];  // Offset: 59 Size: 5
	struct TArray<struct FString> ExcludedAutocorrectOS;  // Offset: 64 Size: 16
	struct TArray<struct FString> ExcludedAutocorrectCultures;  // Offset: 80 Size: 16
	struct TArray<struct FString> ExcludedAutocorrectDeviceModels;  // Offset: 96 Size: 16
	enum class EMouseCaptureMode DefaultViewportMouseCaptureMode;  // Offset: 112 Size: 1
	enum class EMouseLockMode DefaultViewportMouseLockMode;  // Offset: 113 Size: 1
	char pad_114[2];  // Offset: 114 Size: 2
	float FOVScale;  // Offset: 116 Size: 4
	float DoubleClickTime;  // Offset: 120 Size: 4
	char pad_124[4];  // Offset: 124 Size: 4
	struct TArray<struct FInputActionKeyMapping> ActionMappings;  // Offset: 128 Size: 16
	struct TArray<struct FInputAxisKeyMapping> AxisMappings;  // Offset: 144 Size: 16
	struct TArray<struct FInputActionSpeechMapping> SpeechMappings;  // Offset: 160 Size: 16
	struct TSoftClassPtr<UObject> DefaultPlayerInputClass;  // Offset: 176 Size: 40
	struct TSoftClassPtr<UObject> DefaultInputComponentClass;  // Offset: 216 Size: 40
	struct FSoftObjectPath DefaultTouchInterface;  // Offset: 256 Size: 24
	struct FKey ConsoleKey;  // Offset: 280 Size: 24
	struct TArray<struct FKey> ConsoleKeys;  // Offset: 304 Size: 16



 // Functions 
 public:
	void SaveKeyMappings(); // Function Engine.InputSettings.SaveKeyMappings
	void RemoveAxisMapping(struct FInputAxisKeyMapping& KeyMapping, bool bForceRebuildKeymaps); // Function Engine.InputSettings.RemoveAxisMapping
	void RemoveActionMapping(struct FInputActionKeyMapping& KeyMapping, bool bForceRebuildKeymaps); // Function Engine.InputSettings.RemoveActionMapping
	struct UInputSettings* GetInputSettings(); // Function Engine.InputSettings.GetInputSettings
	void GetAxisNames(struct TArray<struct FName>& AxisNames); // Function Engine.InputSettings.GetAxisNames
	void GetAxisMappingByName(struct FName InAxisName, struct TArray<struct FInputAxisKeyMapping>& OutMappings); // Function Engine.InputSettings.GetAxisMappingByName
	void GetActionNames(struct TArray<struct FName>& ActionNames); // Function Engine.InputSettings.GetActionNames
	void GetActionMappingByName(struct FName InActionName, struct TArray<struct FInputActionKeyMapping>& OutMappings); // Function Engine.InputSettings.GetActionMappingByName
	void ForceRebuildKeymaps(); // Function Engine.InputSettings.ForceRebuildKeymaps
	void AddAxisMapping(struct FInputAxisKeyMapping& KeyMapping, bool bForceRebuildKeymaps); // Function Engine.InputSettings.AddAxisMapping
	void AddActionMapping(struct FInputActionKeyMapping& KeyMapping, bool bForceRebuildKeymaps); // Function Engine.InputSettings.AddActionMapping
}; 
 
 


//Class Engine.NetDriver Size 1888
// Inherited 40 bytes 
class UNetDriver : public UObject
{

 public: 
	char pad_40[8];  // Offset: 40 Size: 8
	struct FString NetConnectionClassName;  // Offset: 48 Size: 16
	struct FString ReplicationDriverClassName;  // Offset: 64 Size: 16
	int32_t MaxDownloadSize;  // Offset: 80 Size: 4
	char bClampListenServerTickRate : 1;  // Offset: 84 Size: 1
	char pad_84_1 : 7;  // Offset: 84 Size: 1
	char pad_85[4];  // Offset: 85 Size: 4
	int32_t NetServerMaxTickRate;  // Offset: 88 Size: 4
	int32_t MaxNetTickRate;  // Offset: 92 Size: 4
	int32_t MaxInternetClientRate;  // Offset: 96 Size: 4
	int32_t MaxClientRate;  // Offset: 100 Size: 4
	float ServerTravelPause;  // Offset: 104 Size: 4
	float SpawnPrioritySeconds;  // Offset: 108 Size: 4
	float RelevantTimeout;  // Offset: 112 Size: 4
	float KeepAliveTime;  // Offset: 116 Size: 4
	float InitialConnectTimeout;  // Offset: 120 Size: 4
	float ConnectionTimeout;  // Offset: 124 Size: 4
	float TimeoutMultiplierForUnoptimizedBuilds;  // Offset: 128 Size: 4
	char pad_132_1 : 7;  // Offset: 132 Size: 1
	bool bNoTimeouts : 1;  // Offset: 132 Size: 1
	char pad_133_1 : 7;  // Offset: 133 Size: 1
	bool bNeverApplyNetworkEmulationSettings : 1;  // Offset: 133 Size: 1
	char pad_134[2];  // Offset: 134 Size: 2
	struct UNetConnection* ServerConnection;  // Offset: 136 Size: 8
	struct TArray<struct UNetConnection*> ClientConnections;  // Offset: 144 Size: 16
	char pad_160[96];  // Offset: 160 Size: 96
	int32_t RecentlyDisconnectedTrackingTime;  // Offset: 256 Size: 4
	char pad_260[60];  // Offset: 260 Size: 60
	struct UWorld* World;  // Offset: 320 Size: 8
	struct UPackage* WorldPackage;  // Offset: 328 Size: 8
	char pad_336[32];  // Offset: 336 Size: 32
	UObject* NetConnectionClass;  // Offset: 368 Size: 8
	UObject* ReplicationDriverClass;  // Offset: 376 Size: 8
	char pad_384[16];  // Offset: 384 Size: 16
	struct FName NetDriverName;  // Offset: 400 Size: 8
	struct TArray<struct FChannelDefinition> ChannelDefinitions;  // Offset: 408 Size: 16
	struct TMap<struct FName, struct FChannelDefinition> ChannelDefinitionMap;  // Offset: 424 Size: 80
	struct TArray<struct UChannel*> ActorChannelPool;  // Offset: 504 Size: 16
	char pad_520[8];  // Offset: 520 Size: 8
	float Time;  // Offset: 528 Size: 4
	char pad_532[1260];  // Offset: 532 Size: 1260
	struct UReplicationDriver* ReplicationDriver;  // Offset: 1792 Size: 8
	char pad_1800[88];  // Offset: 1800 Size: 88



 // Functions 
 public:
}; 
 
 


//Class Engine.ExponentialHeightFog Size 560
// Inherited 544 bytes 
class AExponentialHeightFog : public AInfo
{

 public: 
	struct UExponentialHeightFogComponent* Component;  // Offset: 544 Size: 8
	char bEnabled : 1;  // Offset: 552 Size: 1
	char pad_552_1 : 7;  // Offset: 552 Size: 1
	char pad_553[8];  // Offset: 553 Size: 8



 // Functions 
 public:
	void OnRep_bEnabled(); // Function Engine.ExponentialHeightFog.OnRep_bEnabled
}; 
 
 


//Class Engine.NetConnection Size 7080
// Inherited 72 bytes 
class UNetConnection : public UPlayer
{

 public: 
	struct TArray<struct UChildConnection*> Children;  // Offset: 72 Size: 16
	struct UNetDriver* Driver;  // Offset: 88 Size: 8
	UPackageMap* PackageMapClass;  // Offset: 96 Size: 8
	struct UPackageMap* PackageMap;  // Offset: 104 Size: 8
	struct TArray<struct UChannel*> OpenChannels;  // Offset: 112 Size: 16
	struct TArray<struct AActor*> SentTemporaries;  // Offset: 128 Size: 16
	struct AActor* ViewTarget;  // Offset: 144 Size: 8
	struct AActor* OwningActor;  // Offset: 152 Size: 8
	int32_t MaxPacket;  // Offset: 160 Size: 4
	char InternalAck : 1;  // Offset: 164 Size: 1
	char pad_164_1 : 7;  // Offset: 164 Size: 1
	char pad_165[188];  // Offset: 165 Size: 188
	struct FUniqueNetIdRepl playerId;  // Offset: 352 Size: 40
	char pad_392[72];  // Offset: 392 Size: 72
	double LastReceiveTime;  // Offset: 464 Size: 8
	char pad_472[4920];  // Offset: 472 Size: 4920
	struct TArray<struct UChannel*> ChannelsToTick;  // Offset: 5392 Size: 16
	char pad_5408[1672];  // Offset: 5408 Size: 1672



 // Functions 
 public:
}; 
 
 


//Class Engine.InterpTrackParticleReplay Size 128
// Inherited 112 bytes 
class UInterpTrackParticleReplay : public UInterpTrack
{

 public: 
	struct TArray<struct FParticleReplayTrackKey> TrackKeys;  // Offset: 112 Size: 16



 // Functions 
 public:
}; 
 
 


//Class Engine.PackageMapClient Size 1032
// Inherited 224 bytes 
class UPackageMapClient : public UPackageMap
{

 public: 
	char pad_224[808];  // Offset: 224 Size: 808



 // Functions 
 public:
}; 
 
 


//Class Engine.BookMark Size 80
// Inherited 40 bytes 
class UBookMark : public UBookmarkBase
{

 public: 
	struct FVector Location;  // Offset: 40 Size: 12
	struct FRotator Rotation;  // Offset: 52 Size: 12
	struct TArray<struct FString> HiddenLevels;  // Offset: 64 Size: 16



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleColorScaleOverLife Size 176
// Inherited 48 bytes 
class UParticleModuleColorScaleOverLife : public UParticleModuleColorBase
{

 public: 
	struct FRawDistributionVector ColorScaleOverLife;  // Offset: 48 Size: 72
	struct FRawDistributionFloat AlphaScaleOverLife;  // Offset: 120 Size: 48
	char bEmitterTime : 1;  // Offset: 168 Size: 1
	char pad_168_1 : 7;  // Offset: 168 Size: 1
	char pad_169[8];  // Offset: 169 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.BlueprintFunctionLibrary Size 40
// Inherited 40 bytes 
class UBlueprintFunctionLibrary : public UObject
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.BlueprintAsyncActionBase Size 48
// Inherited 40 bytes 
class UBlueprintAsyncActionBase : public UObject
{

 public: 
	char pad_40[8];  // Offset: 40 Size: 8



 // Functions 
 public:
	void Activate(); // Function Engine.BlueprintAsyncActionBase.Activate
}; 
 
 


//Class Engine.HapticFeedbackEffect_SoundWave Size 72
// Inherited 40 bytes 
class UHapticFeedbackEffect_SoundWave : public UHapticFeedbackEffect_Base
{

 public: 
	struct USoundWave* SoundWave;  // Offset: 40 Size: 8
	char pad_48[24];  // Offset: 48 Size: 24



 // Functions 
 public:
}; 
 
 


//Class Engine.DecalComponent Size 688
// Inherited 528 bytes 
class UDecalComponent : public USceneComponent
{

 public: 
	struct UMaterialInterface* DecalMaterial;  // Offset: 520 Size: 8
	struct UTexture* DecalShadowmapTexture;  // Offset: 528 Size: 8
	struct FVector4 ShadowmapUV;  // Offset: 544 Size: 16
	char bOverrideDecalStaticShadowRes : 1;  // Offset: 560 Size: 1
	char pad_560_1 : 7;  // Offset: 560 Size: 1
	char pad_561[4];  // Offset: 561 Size: 4
	int32_t OverriddenStaticShadowmapRes;  // Offset: 564 Size: 4
	int32_t SortOrder;  // Offset: 568 Size: 4
	char pad_572_1 : 7;  // Offset: 572 Size: 1
	bool bDrawOverDecal : 1;  // Offset: 572 Size: 1
	char pad_573[3];  // Offset: 573 Size: 3
	float FadeScreenSize;  // Offset: 576 Size: 4
	float FadeStartDelay;  // Offset: 580 Size: 4
	float FadeDuration;  // Offset: 584 Size: 4
	float FadeInDuration;  // Offset: 588 Size: 4
	float FadeInStartDelay;  // Offset: 592 Size: 4
	char bDestroyOwnerAfterFade : 1;  // Offset: 596 Size: 1
	char pad_596_1 : 7;  // Offset: 596 Size: 1
	char pad_597[4];  // Offset: 597 Size: 4
	struct FVector DecalSize;  // Offset: 600 Size: 12
	char pad_612_1 : 7;  // Offset: 612 Size: 1
	bool bUseMasterPrimitive : 1;  // Offset: 612 Size: 1
	char pad_613[3];  // Offset: 613 Size: 3
	struct UPrimitiveComponent* MasterPrimitive;  // Offset: 616 Size: 8
	char pad_624_1 : 7;  // Offset: 624 Size: 1
	bool bDawWithLightingOnMobile : 1;  // Offset: 624 Size: 1
	char pad_625[63];  // Offset: 625 Size: 63



 // Functions 
 public:
	void SetSortOrder(int32_t Value); // Function Engine.DecalComponent.SetSortOrder
	void SetFadeScreenSize(float NewFadeScreenSize); // Function Engine.DecalComponent.SetFadeScreenSize
	void SetFadeOut(float StartDelay, float Duration, bool DestroyOwnerAfterFade); // Function Engine.DecalComponent.SetFadeOut
	void SetFadeIn(float StartDelay, float Duaration); // Function Engine.DecalComponent.SetFadeIn
	void SetDrawWithLightingOnMobile(bool Value); // Function Engine.DecalComponent.SetDrawWithLightingOnMobile
	void SetDrawOverDecal(bool Value); // Function Engine.DecalComponent.SetDrawOverDecal
	void SetDecalShadowmapTexture(struct UTexture* NewDecalShadowmapTexture, struct FVector4& inShadowmapUV); // Function Engine.DecalComponent.SetDecalShadowmapTexture
	void SetDecalMaterial(struct UMaterialInterface* NewDecalMaterial); // Function Engine.DecalComponent.SetDecalMaterial
	float GetFadeStartDelay(); // Function Engine.DecalComponent.GetFadeStartDelay
	float GetFadeInStartDelay(); // Function Engine.DecalComponent.GetFadeInStartDelay
	float GetFadeInDuration(); // Function Engine.DecalComponent.GetFadeInDuration
	float GetFadeDuration(); // Function Engine.DecalComponent.GetFadeDuration
	struct UTexture* GetDecalShadowmapTexture(); // Function Engine.DecalComponent.GetDecalShadowmapTexture
	struct UMaterialInterface* GetDecalMaterial(); // Function Engine.DecalComponent.GetDecalMaterial
	struct UMaterialInstanceDynamic* CreateDynamicMaterialInstance(); // Function Engine.DecalComponent.CreateDynamicMaterialInstance
}; 
 
 


//Class Engine.BoneMaskFilter Size 56
// Inherited 40 bytes 
class UBoneMaskFilter : public UObject
{

 public: 
	struct TArray<struct FInputBlendPose> BlendPoses;  // Offset: 40 Size: 16



 // Functions 
 public:
}; 
 
 


//Class Engine.NavMovementComponent Size 304
// Inherited 240 bytes 
class UNavMovementComponent : public UMovementComponent
{

 public: 
	struct FNavAgentProperties NavAgentProps;  // Offset: 240 Size: 48
	float FixedPathBrakingDistance;  // Offset: 288 Size: 4
	char bUpdateNavAgentWithOwnersCollision : 1;  // Offset: 292 Size: 1
	char bUseAccelerationForPaths : 1;  // Offset: 292 Size: 1
	char bUseFixedBrakingDistanceForPaths : 1;  // Offset: 292 Size: 1
	char pad_292_1 : 5;  // Offset: 292 Size: 1
	struct FMovementProperties MovementState;  // Offset: 293 Size: 1
	char pad_294[2];  // Offset: 294 Size: 2
	struct UObject* PathFollowingComp;  // Offset: 296 Size: 8



 // Functions 
 public:
	void StopMovementKeepPathing(); // Function Engine.NavMovementComponent.StopMovementKeepPathing
	void StopActiveMovement(); // Function Engine.NavMovementComponent.StopActiveMovement
	bool IsSwimming(); // Function Engine.NavMovementComponent.IsSwimming
	bool IsMovingOnGround(); // Function Engine.NavMovementComponent.IsMovingOnGround
	bool IsFlying(); // Function Engine.NavMovementComponent.IsFlying
	bool IsFalling(); // Function Engine.NavMovementComponent.IsFalling
	bool IsCrouching(); // Function Engine.NavMovementComponent.IsCrouching
}; 
 
 


//Class Engine.MaterialExpressionVertexNormalWS Size 64
// Inherited 64 bytes 
class UMaterialExpressionVertexNormalWS : public UMaterialExpression
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.OnlineBlueprintCallProxyBase Size 48
// Inherited 48 bytes 
class UOnlineBlueprintCallProxyBase : public UBlueprintAsyncActionBase
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.KismetMaterialLibrary Size 40
// Inherited 40 bytes 
class UKismetMaterialLibrary : public UBlueprintFunctionLibrary
{

 public: 



 // Functions 
 public:
	void SetVectorParameterValue(struct UObject* WorldContextObject, struct UMaterialParameterCollection* Collection, struct FName ParameterName, struct FLinearColor& ParameterValue); // Function Engine.KismetMaterialLibrary.SetVectorParameterValue
	void SetScalarParameterValue(struct UObject* WorldContextObject, struct UMaterialParameterCollection* Collection, struct FName ParameterName, float ParameterValue); // Function Engine.KismetMaterialLibrary.SetScalarParameterValue
	struct FLinearColor GetVectorParameterValue(struct UObject* WorldContextObject, struct UMaterialParameterCollection* Collection, struct FName ParameterName); // Function Engine.KismetMaterialLibrary.GetVectorParameterValue
	float GetScalarParameterValue(struct UObject* WorldContextObject, struct UMaterialParameterCollection* Collection, struct FName ParameterName); // Function Engine.KismetMaterialLibrary.GetScalarParameterValue
	struct UMaterialInstanceDynamic* CreateDynamicMaterialInstance(struct UObject* WorldContextObject, struct UMaterialInterface* Parent, struct FName OptionalName, enum class EMIDCreationFlags CreationFlags); // Function Engine.KismetMaterialLibrary.CreateDynamicMaterialInstance
}; 
 
 


//Class Engine.DataAsset Size 48
// Inherited 40 bytes 
class UDataAsset : public UObject
{

 public: 
	UDataAsset* NativeClass;  // Offset: 40 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.OnlineEngineInterface Size 40
// Inherited 40 bytes 
class UOnlineEngineInterface : public UObject
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.OnlineSession Size 40
// Inherited 40 bytes 
class UOnlineSession : public UObject
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.ReverbEffect Size 96
// Inherited 40 bytes 
class UReverbEffect : public UObject
{

 public: 
	char pad_40_1 : 7;  // Offset: 40 Size: 1
	bool bBypassEarlyReflections : 1;  // Offset: 40 Size: 1
	char pad_41[3];  // Offset: 41 Size: 3
	float ReflectionsDelay;  // Offset: 44 Size: 4
	float GainHF;  // Offset: 48 Size: 4
	float ReflectionsGain;  // Offset: 52 Size: 4
	char pad_56_1 : 7;  // Offset: 56 Size: 1
	bool bBypassLateReflections : 1;  // Offset: 56 Size: 1
	char pad_57[3];  // Offset: 57 Size: 3
	float LateDelay;  // Offset: 60 Size: 4
	float DecayTime;  // Offset: 64 Size: 4
	float Density;  // Offset: 68 Size: 4
	float Diffusion;  // Offset: 72 Size: 4
	float AirAbsorptionGainHF;  // Offset: 76 Size: 4
	float DecayHFRatio;  // Offset: 80 Size: 4
	float LateGain;  // Offset: 84 Size: 4
	float Gain;  // Offset: 88 Size: 4
	float RoomRolloffFactor;  // Offset: 92 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.InterpTrackSound Size 168
// Inherited 144 bytes 
class UInterpTrackSound : public UInterpTrackVectorBase
{

 public: 
	struct TArray<struct FSoundTrackKey> Sounds;  // Offset: 144 Size: 16
	char bPlayOnReverse : 1;  // Offset: 160 Size: 1
	char bContinueSoundOnMatineeEnd : 1;  // Offset: 160 Size: 1
	char bSuppressSubtitles : 1;  // Offset: 160 Size: 1
	char bTreatAsDialogue : 1;  // Offset: 160 Size: 1
	char bAttach : 1;  // Offset: 160 Size: 1
	char pad_160_1 : 3;  // Offset: 160 Size: 1
	char pad_161[8];  // Offset: 161 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.BookMark2D Size 56
// Inherited 40 bytes 
class UBookMark2D : public UBookmarkBase
{

 public: 
	float Zoom2D;  // Offset: 40 Size: 4
	struct FIntPoint Location;  // Offset: 44 Size: 8
	char pad_52[4];  // Offset: 52 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionTextureSampleParameter Size 128
// Inherited 96 bytes 
class UMaterialExpressionTextureSampleParameter : public UMaterialExpressionTextureSample
{

 public: 
	struct FName ParameterName;  // Offset: 96 Size: 8
	struct FGuid ExpressionGUID;  // Offset: 104 Size: 16
	struct FName Group;  // Offset: 120 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleAttractorBase Size 48
// Inherited 48 bytes 
class UParticleModuleAttractorBase : public UParticleModule
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.StereoLayerShapeCubemap Size 40
// Inherited 40 bytes 
class UStereoLayerShapeCubemap : public UStereoLayerShape
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.InterpTrackVectorMaterialParam Size 168
// Inherited 144 bytes 
class UInterpTrackVectorMaterialParam : public UInterpTrackVectorBase
{

 public: 
	struct TArray<struct UMaterialInterface*> TargetMaterials;  // Offset: 144 Size: 16
	struct FName ParamName;  // Offset: 160 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.ActorComponent Size 176
// Inherited 40 bytes 
class UActorComponent : public UObject
{

 public: 
	char pad_40[8];  // Offset: 40 Size: 8
	struct FActorComponentTickFunction PrimaryComponentTick;  // Offset: 48 Size: 48
	struct TArray<struct FName> ComponentTags;  // Offset: 96 Size: 16
	struct TArray<struct UAssetUserData*> AssetUserData;  // Offset: 112 Size: 16
	char pad_128[4];  // Offset: 128 Size: 4
	int32_t UCSSerializationIndex;  // Offset: 132 Size: 4
	char pad_136_1 : 3;  // Offset: 136 Size: 1
	char bNetAddressable : 1;  // Offset: 136 Size: 1
	char bReplicates : 1;  // Offset: 136 Size: 1
	char pad_136_2 : 3;  // Offset: 136 Size: 1
	char pad_137_1 : 7;  // Offset: 137 Size: 1
	char bAutoActivate : 1;  // Offset: 137 Size: 1
	char bIsActive : 1;  // Offset: 138 Size: 1
	char bEditableWhenInherited : 1;  // Offset: 138 Size: 1
	char pad_138_1 : 1;  // Offset: 138 Size: 1
	char bCanEverAffectNavigation : 1;  // Offset: 138 Size: 1
	char pad_138_2 : 1;  // Offset: 138 Size: 1
	char bIsEditorOnly : 1;  // Offset: 138 Size: 1
	char pad_138_3 : 2;  // Offset: 138 Size: 1
	char pad_139[2];  // Offset: 139 Size: 2
	enum class EComponentCreationMethod CreationMethod;  // Offset: 140 Size: 1
	struct FMulticastSparseDelegate OnComponentActivated;  // Offset: 141 Size: 1
	struct FMulticastSparseDelegate OnComponentDeactivated;  // Offset: 142 Size: 1
	char pad_143[1];  // Offset: 143 Size: 1
	struct TArray<struct FSimpleMemberReference> UCSModifiedProperties;  // Offset: 144 Size: 16
	char pad_160[16];  // Offset: 160 Size: 16



 // Functions 
 public:
	void ToggleActive(); // Function Engine.ActorComponent.ToggleActive
	void SetTickGroup(enum class ETickingGroup NewTickGroup); // Function Engine.ActorComponent.SetTickGroup
	void SetTickableWhenPaused(bool bTickableWhenPaused); // Function Engine.ActorComponent.SetTickableWhenPaused
	void SetIsReplicated(bool ShouldReplicate); // Function Engine.ActorComponent.SetIsReplicated
	void SetComponentTickIntervalAndCooldown(float TickInterval); // Function Engine.ActorComponent.SetComponentTickIntervalAndCooldown
	void SetComponentTickInterval(float TickInterval); // Function Engine.ActorComponent.SetComponentTickInterval
	void SetComponentTickEnabled(bool bEnabled); // Function Engine.ActorComponent.SetComponentTickEnabled
	void SetAutoActivate(bool bNewAutoActivate); // Function Engine.ActorComponent.SetAutoActivate
	void SetActive(bool bNewActive, bool bReset); // Function Engine.ActorComponent.SetActive
	void RemoveTickPrerequisiteComponent(struct UActorComponent* PrerequisiteComponent); // Function Engine.ActorComponent.RemoveTickPrerequisiteComponent
	void RemoveTickPrerequisiteActor(struct AActor* PrerequisiteActor); // Function Engine.ActorComponent.RemoveTickPrerequisiteActor
	void ReceiveTick(float DeltaSeconds); // Function Engine.ActorComponent.ReceiveTick
	void ReceiveEndPlay(enum class EEndPlayReason EndPlayReason); // Function Engine.ActorComponent.ReceiveEndPlay
	void ReceiveBeginPlay(); // Function Engine.ActorComponent.ReceiveBeginPlay
	void OnRep_IsActive(); // Function Engine.ActorComponent.OnRep_IsActive
	void K2_DestroyComponent(struct UObject* Object); // Function Engine.ActorComponent.K2_DestroyComponent
	bool IsComponentTickEnabled(); // Function Engine.ActorComponent.IsComponentTickEnabled
	bool IsBeingDestroyed(); // Function Engine.ActorComponent.IsBeingDestroyed
	bool IsActive(); // Function Engine.ActorComponent.IsActive
	struct AActor* GetOwner(); // Function Engine.ActorComponent.GetOwner
	float GetComponentTickInterval(); // Function Engine.ActorComponent.GetComponentTickInterval
	void Deactivate(); // Function Engine.ActorComponent.Deactivate
	bool ComponentHasTag(struct FName Tag); // Function Engine.ActorComponent.ComponentHasTag
	void AddTickPrerequisiteComponent(struct UActorComponent* PrerequisiteComponent); // Function Engine.ActorComponent.AddTickPrerequisiteComponent
	void AddTickPrerequisiteActor(struct AActor* PrerequisiteActor); // Function Engine.ActorComponent.AddTickPrerequisiteActor
	void Activate(bool bReset); // Function Engine.ActorComponent.Activate
}; 
 
 


//Class Engine.AnimStateMachineTypes Size 40
// Inherited 40 bytes 
class UAnimStateMachineTypes : public UObject
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.FontImportOptions Size 216
// Inherited 40 bytes 
class UFontImportOptions : public UObject
{

 public: 
	struct FFontImportOptionsData Data;  // Offset: 40 Size: 176



 // Functions 
 public:
}; 
 
 


//Class Engine.AssetMappingTable Size 56
// Inherited 40 bytes 
class UAssetMappingTable : public UObject
{

 public: 
	struct TArray<struct FAssetMapping> MappedAssets;  // Offset: 40 Size: 16



 // Functions 
 public:
}; 
 
 


//Class Engine.ProjectileMovementComponent Size 464
// Inherited 240 bytes 
class UProjectileMovementComponent : public UMovementComponent
{

 public: 
	float InitialSpeed;  // Offset: 240 Size: 4
	float MaxSpeed;  // Offset: 244 Size: 4
	char bRotationFollowsVelocity : 1;  // Offset: 248 Size: 1
	char bRotationRemainsVertical : 1;  // Offset: 248 Size: 1
	char bShouldBounce : 1;  // Offset: 248 Size: 1
	char bInitialVelocityInLocalSpace : 1;  // Offset: 248 Size: 1
	char bForceSubStepping : 1;  // Offset: 248 Size: 1
	char bSimulationEnabled : 1;  // Offset: 248 Size: 1
	char bSweepCollision : 1;  // Offset: 248 Size: 1
	char bIsHomingProjectile : 1;  // Offset: 248 Size: 1
	char bBounceAngleAffectsFriction : 1;  // Offset: 249 Size: 1
	char bIsSliding : 1;  // Offset: 249 Size: 1
	char bInterpMovement : 1;  // Offset: 249 Size: 1
	char bInterpRotation : 1;  // Offset: 249 Size: 1
	char pad_249_1 : 4;  // Offset: 249 Size: 1
	char pad_250[3];  // Offset: 250 Size: 3
	float PreviousHitTime;  // Offset: 252 Size: 4
	struct FVector PreviousHitNormal;  // Offset: 256 Size: 12
	float ProjectileGravityScale;  // Offset: 268 Size: 4
	float Buoyancy;  // Offset: 272 Size: 4
	float Bounciness;  // Offset: 276 Size: 4
	float Friction;  // Offset: 280 Size: 4
	float BounceVelocityStopSimulatingThreshold;  // Offset: 284 Size: 4
	float MinFrictionFraction;  // Offset: 288 Size: 4
	char pad_292[4];  // Offset: 292 Size: 4
	struct FMulticastInlineDelegate OnProjectileBounce;  // Offset: 296 Size: 16
	struct FMulticastInlineDelegate OnProjectileStop;  // Offset: 312 Size: 16
	float HomingAccelerationMagnitude;  // Offset: 328 Size: 4
	struct TWeakObjectPtr<USceneComponent> HomingTargetComponent;  // Offset: 332 Size: 8
	float MaxSimulationTimeStep;  // Offset: 340 Size: 4
	int32_t MaxSimulationIterations;  // Offset: 344 Size: 4
	int32_t BounceAdditionalIterations;  // Offset: 348 Size: 4
	float InterpLocationTime;  // Offset: 352 Size: 4
	float InterpRotationTime;  // Offset: 356 Size: 4
	float InterpLocationMaxLagDistance;  // Offset: 360 Size: 4
	float InterpLocationSnapToTargetDistance;  // Offset: 364 Size: 4
	char pad_368[96];  // Offset: 368 Size: 96



 // Functions 
 public:
	void StopSimulating(struct FHitResult& HitResult); // Function Engine.ProjectileMovementComponent.StopSimulating
	void SetVelocityInLocalSpace(struct FVector NewVelocity); // Function Engine.ProjectileMovementComponent.SetVelocityInLocalSpace
	void SetInterpolatedComponent(struct USceneComponent* Component); // Function Engine.ProjectileMovementComponent.SetInterpolatedComponent
	void ResetInterpolation(); // Function Engine.ProjectileMovementComponent.ResetInterpolation
	void OnProjectileStopDelegate__DelegateSignature(struct FHitResult& ImpactResult); // DelegateFunction Engine.ProjectileMovementComponent.OnProjectileStopDelegate__DelegateSignature
	void OnProjectileBounceDelegate__DelegateSignature(struct FHitResult& ImpactResult, struct FVector& ImpactVelocity); // DelegateFunction Engine.ProjectileMovementComponent.OnProjectileBounceDelegate__DelegateSignature
	void MoveInterpolationTarget(struct FVector& NewLocation, struct FRotator& NewRotation); // Function Engine.ProjectileMovementComponent.MoveInterpolationTarget
	struct FVector LimitVelocity(struct FVector NewVelocity); // Function Engine.ProjectileMovementComponent.LimitVelocity
	bool IsVelocityUnderSimulationThreshold(); // Function Engine.ProjectileMovementComponent.IsVelocityUnderSimulationThreshold
	bool IsInterpolationComplete(); // Function Engine.ProjectileMovementComponent.IsInterpolationComplete
}; 
 
 


//Class Engine.AnimInstance Size 704
// Inherited 40 bytes 
class UAnimInstance : public UObject
{

 public: 
	struct USkeleton* CurrentSkeleton;  // Offset: 40 Size: 8
	enum class ERootMotionMode RootMotionMode;  // Offset: 48 Size: 1
	char bUseMultiThreadedAnimationUpdate : 1;  // Offset: 49 Size: 1
	char bUsingCopyPoseFromMesh : 1;  // Offset: 49 Size: 1
	char pad_49_1 : 2;  // Offset: 49 Size: 1
	char bReceiveNotifiesFromLinkedInstances : 1;  // Offset: 49 Size: 1
	char bPropagateNotifiesToLinkedInstances : 1;  // Offset: 49 Size: 1
	char bQueueMontageEvents : 1;  // Offset: 49 Size: 1
	char pad_49_2 : 1;  // Offset: 49 Size: 1
	char pad_50[7];  // Offset: 50 Size: 7
	struct FMulticastInlineDelegate OnMontageBlendingOut;  // Offset: 56 Size: 16
	struct FMulticastInlineDelegate OnMontageStarted;  // Offset: 72 Size: 16
	struct FMulticastInlineDelegate OnMontageEnded;  // Offset: 88 Size: 16
	struct FMulticastInlineDelegate OnAllMontageInstancesEnded;  // Offset: 104 Size: 16
	char pad_120[136];  // Offset: 120 Size: 136
	struct FAnimNotifyQueue NotifyQueue;  // Offset: 256 Size: 112
	struct TArray<struct FAnimNotifyEvent> ActiveAnimNotifyState;  // Offset: 368 Size: 16
	char pad_384[320];  // Offset: 384 Size: 320



 // Functions 
 public:
	void UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic); // Function Engine.AnimInstance.UnlockAIResources
	void UnlinkAnimClassLayers(UAnimInstance* InClass); // Function Engine.AnimInstance.UnlinkAnimClassLayers
	struct APawn* TryGetPawnOwner(); // Function Engine.AnimInstance.TryGetPawnOwner
	void StopSlotAnimation(float InBlendOutTime, struct FName SlotNodeName); // Function Engine.AnimInstance.StopSlotAnimation
	void SnapshotPose(struct FPoseSnapshot& Snapshot); // Function Engine.AnimInstance.SnapshotPose
	void SetRootMotionMode(enum class ERootMotionMode Value); // Function Engine.AnimInstance.SetRootMotionMode
	void SetReceiveNotifiesFromLinkedInstances(bool bSet); // Function Engine.AnimInstance.SetReceiveNotifiesFromLinkedInstances
	void SetPropagateNotifiesToLinkedInstances(bool bSet); // Function Engine.AnimInstance.SetPropagateNotifiesToLinkedInstances
	void SetMorphTarget(struct FName MorphTargetName, float Value); // Function Engine.AnimInstance.SetMorphTarget
	void SavePoseSnapshot(struct FName SnapshotName); // Function Engine.AnimInstance.SavePoseSnapshot
	void ResetDynamics(enum class ETeleportType InTeleportType); // Function Engine.AnimInstance.ResetDynamics
	struct UAnimMontage* PlaySlotAnimationAsDynamicMontage(struct UAnimSequenceBase* Asset, struct FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int32_t LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt); // Function Engine.AnimInstance.PlaySlotAnimationAsDynamicMontage
	float PlaySlotAnimation(struct UAnimSequenceBase* Asset, struct FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int32_t LoopCount); // Function Engine.AnimInstance.PlaySlotAnimation
	void Montage_StopGroupByName(float InBlendOutTime, struct FName GroupName); // Function Engine.AnimInstance.Montage_StopGroupByName
	void Montage_Stop(float InBlendOutTime, struct UAnimMontage* Montage); // Function Engine.AnimInstance.Montage_Stop
	void Montage_SetPosition(struct UAnimMontage* Montage, float NewPosition); // Function Engine.AnimInstance.Montage_SetPosition
	void Montage_SetPlayRate(struct UAnimMontage* Montage, float NewPlayRate); // Function Engine.AnimInstance.Montage_SetPlayRate
	void Montage_SetNextSection(struct FName SectionNameToChange, struct FName NextSection, struct UAnimMontage* Montage); // Function Engine.AnimInstance.Montage_SetNextSection
	void Montage_Resume(struct UAnimMontage* Montage); // Function Engine.AnimInstance.Montage_Resume
	float Montage_Play(struct UAnimMontage* MontageToPlay, float InPlayRate, enum class EMontagePlayReturnType ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages); // Function Engine.AnimInstance.Montage_Play
	void Montage_Pause(struct UAnimMontage* Montage); // Function Engine.AnimInstance.Montage_Pause
	void Montage_JumpToSectionsEnd(struct FName SectionName, struct UAnimMontage* Montage); // Function Engine.AnimInstance.Montage_JumpToSectionsEnd
	void Montage_JumpToSection(struct FName SectionName, struct UAnimMontage* Montage); // Function Engine.AnimInstance.Montage_JumpToSection
	bool Montage_IsPlaying(struct UAnimMontage* Montage); // Function Engine.AnimInstance.Montage_IsPlaying
	bool Montage_IsActive(struct UAnimMontage* Montage); // Function Engine.AnimInstance.Montage_IsActive
	float Montage_GetPosition(struct UAnimMontage* Montage); // Function Engine.AnimInstance.Montage_GetPosition
	float Montage_GetPlayRate(struct UAnimMontage* Montage); // Function Engine.AnimInstance.Montage_GetPlayRate
	bool Montage_GetIsStopped(struct UAnimMontage* Montage); // Function Engine.AnimInstance.Montage_GetIsStopped
	struct FName Montage_GetCurrentSection(struct UAnimMontage* Montage); // Function Engine.AnimInstance.Montage_GetCurrentSection
	float Montage_GetBlendTime(struct UAnimMontage* Montage); // Function Engine.AnimInstance.Montage_GetBlendTime
	void LockAIResources(bool bLockMovement, bool LockAILogic); // Function Engine.AnimInstance.LockAIResources
	void LinkAnimGraphByTag(struct FName InTag, UAnimInstance* InClass); // Function Engine.AnimInstance.LinkAnimGraphByTag
	void LinkAnimClassLayers(UAnimInstance* InClass); // Function Engine.AnimInstance.LinkAnimClassLayers
	bool IsSyncGroupBetweenMarkers(struct FName InSyncGroupName, struct FName PreviousMarker, struct FName NextMarker, bool bRespectMarkerOrder); // Function Engine.AnimInstance.IsSyncGroupBetweenMarkers
	bool IsPlayingSlotAnimation(struct UAnimSequenceBase* Asset, struct FName SlotNodeName); // Function Engine.AnimInstance.IsPlayingSlotAnimation
	bool IsAnyMontagePlaying(); // Function Engine.AnimInstance.IsAnyMontagePlaying
	bool HasMarkerBeenHitThisFrame(struct FName SyncGroup, struct FName MarkerName); // Function Engine.AnimInstance.HasMarkerBeenHitThisFrame
	bool GetTimeToClosestMarker(struct FName SyncGroup, struct FName MarkerName, float& OutMarkerTime); // Function Engine.AnimInstance.GetTimeToClosestMarker
	struct FMarkerSyncAnimPosition GetSyncGroupPosition(struct FName InSyncGroupName); // Function Engine.AnimInstance.GetSyncGroupPosition
	float GetRelevantAnimTimeRemainingFraction(int32_t MachineIndex, int32_t StateIndex); // Function Engine.AnimInstance.GetRelevantAnimTimeRemainingFraction
	float GetRelevantAnimTimeRemaining(int32_t MachineIndex, int32_t StateIndex); // Function Engine.AnimInstance.GetRelevantAnimTimeRemaining
	float GetRelevantAnimTimeFraction(int32_t MachineIndex, int32_t StateIndex); // Function Engine.AnimInstance.GetRelevantAnimTimeFraction
	float GetRelevantAnimTime(int32_t MachineIndex, int32_t StateIndex); // Function Engine.AnimInstance.GetRelevantAnimTime
	float GetRelevantAnimLength(int32_t MachineIndex, int32_t StateIndex); // Function Engine.AnimInstance.GetRelevantAnimLength
	bool GetReceiveNotifiesFromLinkedInstances(); // Function Engine.AnimInstance.GetReceiveNotifiesFromLinkedInstances
	bool GetPropagateNotifiesToLinkedInstances(); // Function Engine.AnimInstance.GetPropagateNotifiesToLinkedInstances
	struct USkeletalMeshComponent* GetOwningComponent(); // Function Engine.AnimInstance.GetOwningComponent
	struct AActor* GetOwningActor(); // Function Engine.AnimInstance.GetOwningActor
	void GetLinkedAnimLayerInstancesByGroup(struct FName InGroup, struct TArray<struct UAnimInstance*>& OutLinkedInstances); // Function Engine.AnimInstance.GetLinkedAnimLayerInstancesByGroup
	struct UAnimInstance* GetLinkedAnimLayerInstanceByGroupAndClass(struct FName InGroup, UAnimInstance* InClass); // Function Engine.AnimInstance.GetLinkedAnimLayerInstanceByGroupAndClass
	struct UAnimInstance* GetLinkedAnimLayerInstanceByGroup(struct FName InGroup); // Function Engine.AnimInstance.GetLinkedAnimLayerInstanceByGroup
	struct UAnimInstance* GetLinkedAnimLayerInstanceByClass(UAnimInstance* InClass); // Function Engine.AnimInstance.GetLinkedAnimLayerInstanceByClass
	void GetLinkedAnimGraphInstancesByTag(struct FName InTag, struct TArray<struct UAnimInstance*>& OutLinkedInstances); // Function Engine.AnimInstance.GetLinkedAnimGraphInstancesByTag
	struct UAnimInstance* GetLinkedAnimGraphInstanceByTag(struct FName InTag); // Function Engine.AnimInstance.GetLinkedAnimGraphInstanceByTag
	float GetInstanceTransitionTimeElapsedFraction(int32_t MachineIndex, int32_t TransitionIndex); // Function Engine.AnimInstance.GetInstanceTransitionTimeElapsedFraction
	float GetInstanceTransitionTimeElapsed(int32_t MachineIndex, int32_t TransitionIndex); // Function Engine.AnimInstance.GetInstanceTransitionTimeElapsed
	float GetInstanceTransitionCrossfadeDuration(int32_t MachineIndex, int32_t TransitionIndex); // Function Engine.AnimInstance.GetInstanceTransitionCrossfadeDuration
	float GetInstanceStateWeight(int32_t MachineIndex, int32_t StateIndex); // Function Engine.AnimInstance.GetInstanceStateWeight
	float GetInstanceMachineWeight(int32_t MachineIndex); // Function Engine.AnimInstance.GetInstanceMachineWeight
	float GetInstanceCurrentStateElapsedTime(int32_t MachineIndex); // Function Engine.AnimInstance.GetInstanceCurrentStateElapsedTime
	float GetInstanceAssetPlayerTimeFromEndFraction(int32_t AssetPlayerIndex); // Function Engine.AnimInstance.GetInstanceAssetPlayerTimeFromEndFraction
	float GetInstanceAssetPlayerTimeFromEnd(int32_t AssetPlayerIndex); // Function Engine.AnimInstance.GetInstanceAssetPlayerTimeFromEnd
	float GetInstanceAssetPlayerTimeFraction(int32_t AssetPlayerIndex); // Function Engine.AnimInstance.GetInstanceAssetPlayerTimeFraction
	float GetInstanceAssetPlayerTime(int32_t AssetPlayerIndex); // Function Engine.AnimInstance.GetInstanceAssetPlayerTime
	float GetInstanceAssetPlayerLength(int32_t AssetPlayerIndex); // Function Engine.AnimInstance.GetInstanceAssetPlayerLength
	float GetCurveValue(struct FName CurveName); // Function Engine.AnimInstance.GetCurveValue
	struct FName GetCurrentStateName(int32_t MachineIndex); // Function Engine.AnimInstance.GetCurrentStateName
	struct UAnimMontage* GetCurrentActiveMontage(); // Function Engine.AnimInstance.GetCurrentActiveMontage
	void GetAllCurveNames(struct TArray<struct FName>& OutNames); // Function Engine.AnimInstance.GetAllCurveNames
	void GetActiveCurveNames(enum class EAnimCurveType CurveType, struct TArray<struct FName>& OutNames); // Function Engine.AnimInstance.GetActiveCurveNames
	void ClearMorphTargets(); // Function Engine.AnimInstance.ClearMorphTargets
	float CalculateDirection(struct FVector& Velocity, struct FRotator& BaseRotation); // Function Engine.AnimInstance.CalculateDirection
	void BlueprintUpdateAnimation(float DeltaTimeX); // Function Engine.AnimInstance.BlueprintUpdateAnimation
	void BlueprintPostEvaluateAnimation(); // Function Engine.AnimInstance.BlueprintPostEvaluateAnimation
	void BlueprintLinkedAnimationLayersInitialized(); // Function Engine.AnimInstance.BlueprintLinkedAnimationLayersInitialized
	void BlueprintInitializeAnimation(); // Function Engine.AnimInstance.BlueprintInitializeAnimation
	void BlueprintBeginPlay(); // Function Engine.AnimInstance.BlueprintBeginPlay
}; 
 
 


//Class Engine.EngineCustomTimeStep Size 40
// Inherited 40 bytes 
class UEngineCustomTimeStep : public UObject
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.SceneComponent Size 528
// Inherited 176 bytes 
class USceneComponent : public UActorComponent
{

 public: 
	char pad_176[8];  // Offset: 176 Size: 8
	struct TWeakObjectPtr<APhysicsVolume> PhysicsVolume;  // Offset: 184 Size: 8
	struct USceneComponent* AttachParent;  // Offset: 192 Size: 8
	struct FName AttachSocketName;  // Offset: 200 Size: 8
	struct TArray<struct USceneComponent*> AttachChildren;  // Offset: 208 Size: 16
	struct TArray<struct USceneComponent*> ClientAttachedChildren;  // Offset: 224 Size: 16
	char pad_240[44];  // Offset: 240 Size: 44
	struct FVector RelativeLocation;  // Offset: 284 Size: 12
	struct FRotator RelativeRotation;  // Offset: 296 Size: 12
	struct FVector RelativeScale3D;  // Offset: 308 Size: 12
	struct FVector ComponentVelocity;  // Offset: 320 Size: 12
	char bComponentToWorldUpdated : 1;  // Offset: 332 Size: 1
	char pad_332_1 : 1;  // Offset: 332 Size: 1
	char bAbsoluteLocation : 1;  // Offset: 332 Size: 1
	char bAbsoluteRotation : 1;  // Offset: 332 Size: 1
	char bAbsoluteScale : 1;  // Offset: 332 Size: 1
	char bVisible : 1;  // Offset: 332 Size: 1
	char bShouldBeAttached : 1;  // Offset: 332 Size: 1
	char bShouldSnapLocationWhenAttached : 1;  // Offset: 332 Size: 1
	char bShouldSnapRotationWhenAttached : 1;  // Offset: 333 Size: 1
	char bShouldUpdatePhysicsVolume : 1;  // Offset: 333 Size: 1
	char bHiddenInGame : 1;  // Offset: 333 Size: 1
	char bIsExceptMobile : 1;  // Offset: 333 Size: 1
	char bBoundsChangeTriggersStreamingDataRebuild : 1;  // Offset: 333 Size: 1
	char bUseAttachParentBound : 1;  // Offset: 333 Size: 1
	char pad_333_1 : 2;  // Offset: 333 Size: 1
	char pad_334[2];  // Offset: 334 Size: 2
	enum class EComponentMobility Mobility;  // Offset: 335 Size: 1
	enum class EDetailMode DetailMode;  // Offset: 336 Size: 1
	char pad_337[3];  // Offset: 337 Size: 3
	int32_t MirrorDetailLevel;  // Offset: 340 Size: 4
	struct FMulticastSparseDelegate PhysicsVolumeChangedDelegate;  // Offset: 344 Size: 1
	char pad_345[183];  // Offset: 345 Size: 183



 // Functions 
 public:
	void ToggleVisibility(bool bPropagateToChildren); // Function Engine.SceneComponent.ToggleVisibility
	bool SnapTo(struct USceneComponent* InParent, struct FName InSocketName); // Function Engine.SceneComponent.SnapTo
	void SetWorldScale3D(struct FVector NewScale); // Function Engine.SceneComponent.SetWorldScale3D
	void SetVisibility(bool bNewVisibility, bool bPropagateToChildren); // Function Engine.SceneComponent.SetVisibility
	void SetShouldUpdatePhysicsVolume(bool bInShouldUpdatePhysicsVolume); // Function Engine.SceneComponent.SetShouldUpdatePhysicsVolume
	void SetRelativeScale3D(struct FVector NewScale3D); // Function Engine.SceneComponent.SetRelativeScale3D
	void SetMobility(enum class EComponentMobility NewMobility); // Function Engine.SceneComponent.SetMobility
	void SetHiddenInGame(bool NewHidden, bool bPropagateToChildren); // Function Engine.SceneComponent.SetHiddenInGame
	void SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale); // Function Engine.SceneComponent.SetAbsolute
	void ResetRelativeTransform(); // Function Engine.SceneComponent.ResetRelativeTransform
	void OnRep_Visibility(bool OldValue); // Function Engine.SceneComponent.OnRep_Visibility
	void OnRep_Transform(); // Function Engine.SceneComponent.OnRep_Transform
	void OnRep_AttachSocketName(); // Function Engine.SceneComponent.OnRep_AttachSocketName
	void OnRep_AttachParent(); // Function Engine.SceneComponent.OnRep_AttachParent
	void OnRep_AttachChildren(); // Function Engine.SceneComponent.OnRep_AttachChildren
	void K2_SetWorldTransform(struct FTransform& NewTransform, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_SetWorldTransform
	void K2_SetWorldRotation(struct FRotator NewRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_SetWorldRotation
	void K2_SetWorldLocationAndRotation(struct FVector NewLocation, struct FRotator NewRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_SetWorldLocationAndRotation
	void K2_SetWorldLocation(struct FVector NewLocation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_SetWorldLocation
	void K2_SetRelativeTransform(struct FTransform& NewTransform, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_SetRelativeTransform
	void K2_SetRelativeRotation(struct FRotator NewRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_SetRelativeRotation
	void K2_SetRelativeLocationAndRotation(struct FVector NewLocation, struct FRotator NewRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_SetRelativeLocationAndRotation
	void K2_SetRelativeLocation(struct FVector NewLocation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_SetRelativeLocation
	struct FTransform K2_GetComponentToWorld(); // Function Engine.SceneComponent.K2_GetComponentToWorld
	struct FVector K2_GetComponentScale(); // Function Engine.SceneComponent.K2_GetComponentScale
	struct FRotator K2_GetComponentRotation(); // Function Engine.SceneComponent.K2_GetComponentRotation
	struct FVector K2_GetComponentLocation(); // Function Engine.SceneComponent.K2_GetComponentLocation
	void K2_DetachFromComponent(enum class EDetachmentRule LocationRule, enum class EDetachmentRule RotationRule, enum class EDetachmentRule ScaleRule, bool bCallModify); // Function Engine.SceneComponent.K2_DetachFromComponent
	bool K2_AttachToComponent(struct USceneComponent* Parent, struct FName SocketName, enum class EAttachmentRule LocationRule, enum class EAttachmentRule RotationRule, enum class EAttachmentRule ScaleRule, bool bWeldSimulatedBodies); // Function Engine.SceneComponent.K2_AttachToComponent
	bool K2_AttachTo(struct USceneComponent* InParent, struct FName InSocketName, enum class EAttachLocation AttachType, bool bWeldSimulatedBodies); // Function Engine.SceneComponent.K2_AttachTo
	void K2_AddWorldTransformKeepScale(struct FTransform& DeltaTransform, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_AddWorldTransformKeepScale
	void K2_AddWorldTransform(struct FTransform& DeltaTransform, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_AddWorldTransform
	void K2_AddWorldRotation(struct FRotator DeltaRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_AddWorldRotation
	void K2_AddWorldOffset(struct FVector DeltaLocation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_AddWorldOffset
	void K2_AddRelativeRotation(struct FRotator DeltaRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_AddRelativeRotation
	void K2_AddRelativeLocation(struct FVector DeltaLocation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_AddRelativeLocation
	void K2_AddLocalTransform(struct FTransform& DeltaTransform, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_AddLocalTransform
	void K2_AddLocalRotation(struct FRotator DeltaRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_AddLocalRotation
	void K2_AddLocalOffset(struct FVector DeltaLocation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_AddLocalOffset
	bool IsVisible(); // Function Engine.SceneComponent.IsVisible
	bool IsSimulatingPhysics(struct FName BoneName); // Function Engine.SceneComponent.IsSimulatingPhysics
	bool IsAnySimulatingPhysics(); // Function Engine.SceneComponent.IsAnySimulatingPhysics
	struct FVector GetUpVector(); // Function Engine.SceneComponent.GetUpVector
	struct FTransform GetSocketTransform(struct FName InSocketName, enum class ERelativeTransformSpace TransformSpace); // Function Engine.SceneComponent.GetSocketTransform
	struct FRotator GetSocketRotation(struct FName InSocketName); // Function Engine.SceneComponent.GetSocketRotation
	struct FQuat GetSocketQuaternion(struct FName InSocketName); // Function Engine.SceneComponent.GetSocketQuaternion
	struct FVector GetSocketLocation(struct FName InSocketName); // Function Engine.SceneComponent.GetSocketLocation
	bool GetShouldUpdatePhysicsVolume(); // Function Engine.SceneComponent.GetShouldUpdatePhysicsVolume
	struct FVector GetRightVector(); // Function Engine.SceneComponent.GetRightVector
	struct FTransform GetRelativeTransform(); // Function Engine.SceneComponent.GetRelativeTransform
	struct APhysicsVolume* GetPhysicsVolume(); // Function Engine.SceneComponent.GetPhysicsVolume
	void GetParentComponents(struct TArray<struct USceneComponent*>& Parents); // Function Engine.SceneComponent.GetParentComponents
	int32_t GetNumChildrenComponents(); // Function Engine.SceneComponent.GetNumChildrenComponents
	struct FVector GetForwardVector(); // Function Engine.SceneComponent.GetForwardVector
	struct FVector GetComponentVelocity(); // Function Engine.SceneComponent.GetComponentVelocity
	void GetChildrenComponents(bool bIncludeAllDescendants, struct TArray<struct USceneComponent*>& Children); // Function Engine.SceneComponent.GetChildrenComponents
	struct USceneComponent* GetChildComponent(int32_t ChildIndex); // Function Engine.SceneComponent.GetChildComponent
	struct FName GetAttachSocketName(); // Function Engine.SceneComponent.GetAttachSocketName
	struct USceneComponent* GetAttachParent(); // Function Engine.SceneComponent.GetAttachParent
	struct TArray<struct FName> GetAllSocketNames(); // Function Engine.SceneComponent.GetAllSocketNames
	bool DoesSocketExist(struct FName InSocketName); // Function Engine.SceneComponent.DoesSocketExist
	void DetachFromParent(bool bMaintainWorldPosition, bool bCallModify); // Function Engine.SceneComponent.DetachFromParent
}; 
 
 


//Class Engine.MaterialExpressionNamedRerouteDeclaration Size 112
// Inherited 64 bytes 
class UMaterialExpressionNamedRerouteDeclaration : public UMaterialExpressionNamedRerouteBase
{

 public: 
	struct FExpressionInput Input;  // Offset: 64 Size: 20
	struct FName Name;  // Offset: 84 Size: 8
	struct FGuid VariableGuid;  // Offset: 92 Size: 16
	char pad_108[4];  // Offset: 108 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionHairAttributes Size 72
// Inherited 64 bytes 
class UMaterialExpressionHairAttributes : public UMaterialExpression
{

 public: 
	char bUseTangentSpace : 1;  // Offset: 64 Size: 1
	char pad_64_1 : 7;  // Offset: 64 Size: 1
	char pad_65[8];  // Offset: 65 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.KismetStringTableLibrary Size 40
// Inherited 40 bytes 
class UKismetStringTableLibrary : public UBlueprintFunctionLibrary
{

 public: 



 // Functions 
 public:
	bool IsRegisteredTableId(struct FName TableId); // Function Engine.KismetStringTableLibrary.IsRegisteredTableId
	bool IsRegisteredTableEntry(struct FName TableId, struct FString Key); // Function Engine.KismetStringTableLibrary.IsRegisteredTableEntry
	struct FString GetTableNamespace(struct FName TableId); // Function Engine.KismetStringTableLibrary.GetTableNamespace
	struct FString GetTableEntrySourceString(struct FName TableId, struct FString Key); // Function Engine.KismetStringTableLibrary.GetTableEntrySourceString
	struct FString GetTableEntryMetaData(struct FName TableId, struct FString Key, struct FName MetaDataId); // Function Engine.KismetStringTableLibrary.GetTableEntryMetaData
	struct TArray<struct FName> GetRegisteredStringTables(); // Function Engine.KismetStringTableLibrary.GetRegisteredStringTables
	struct TArray<struct FName> GetMetaDataIdsFromStringTableEntry(struct FName TableId, struct FString Key); // Function Engine.KismetStringTableLibrary.GetMetaDataIdsFromStringTableEntry
	struct TArray<struct FString> GetKeysFromStringTable(struct FName TableId); // Function Engine.KismetStringTableLibrary.GetKeysFromStringTable
}; 
 
 


//Class Engine.DynamicSubsystem Size 48
// Inherited 48 bytes 
class UDynamicSubsystem : public USubsystem
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.KismetSystemLibrary Size 40
// Inherited 40 bytes 
class UKismetSystemLibrary : public UBlueprintFunctionLibrary
{

 public: 



 // Functions 
 public:
	void UnregisterForRemoteNotifications(); // Function Engine.KismetSystemLibrary.UnregisterForRemoteNotifications
	void UnloadPrimaryAssetList(struct TArray<struct FPrimaryAssetId>& PrimaryAssetIdList); // Function Engine.KismetSystemLibrary.UnloadPrimaryAssetList
	void UnloadPrimaryAsset(struct FPrimaryAssetId PrimaryAssetId); // Function Engine.KismetSystemLibrary.UnloadPrimaryAsset
	void TransactObject(struct UObject* Object); // Function Engine.KismetSystemLibrary.TransactObject
	void StackTrace(); // Function Engine.KismetSystemLibrary.StackTrace
	bool SphereTraceSingleForObjects(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, float Radius, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult& OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.SphereTraceSingleForObjects
	bool SphereTraceSingleByProfile(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, float Radius, struct FName ProfileName, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult& OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.SphereTraceSingleByProfile
	bool SphereTraceSingle(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, float Radius, enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult& OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.SphereTraceSingle
	bool SphereTraceMultiForObjects(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, float Radius, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct TArray<struct FHitResult>& OutHits, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.SphereTraceMultiForObjects
	bool SphereTraceMultiByProfile(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, float Radius, struct FName ProfileName, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct TArray<struct FHitResult>& OutHits, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.SphereTraceMultiByProfile
	bool SphereTraceMulti(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, float Radius, enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct TArray<struct FHitResult>& OutHits, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.SphereTraceMulti
	bool SphereOverlapComponents(struct UObject* WorldContextObject, struct FVector SpherePos, float SphereRadius, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, UObject* ComponentClassFilter, struct TArray<struct AActor*>& ActorsToIgnore, struct TArray<struct UPrimitiveComponent*>& OutComponents); // Function Engine.KismetSystemLibrary.SphereOverlapComponents
	bool SphereOverlapActors(struct UObject* WorldContextObject, struct FVector SpherePos, float SphereRadius, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, UObject* ActorClassFilter, struct TArray<struct AActor*>& ActorsToIgnore, struct TArray<struct AActor*>& OutActors); // Function Engine.KismetSystemLibrary.SphereOverlapActors
	void SnapshotObject(struct UObject* Object); // Function Engine.KismetSystemLibrary.SnapshotObject
	void ShowPlatformSpecificLeaderboardScreen(struct FString CategoryName); // Function Engine.KismetSystemLibrary.ShowPlatformSpecificLeaderboardScreen
	void ShowPlatformSpecificAchievementsScreen(struct APlayerController* SpecificPlayer); // Function Engine.KismetSystemLibrary.ShowPlatformSpecificAchievementsScreen
	void ShowInterstitialAd(); // Function Engine.KismetSystemLibrary.ShowInterstitialAd
	void ShowAdBanner(int32_t AdIdIndex, bool bShowOnBottomOfScreen); // Function Engine.KismetSystemLibrary.ShowAdBanner
	void SetWindowTitle(struct FText& Title); // Function Engine.KismetSystemLibrary.SetWindowTitle
	void SetVolumeButtonsHandledBySystem(bool bEnabled); // Function Engine.KismetSystemLibrary.SetVolumeButtonsHandledBySystem
	void SetVectorPropertyByName(struct UObject* Object, struct FName PropertyName, struct FVector& Value); // Function Engine.KismetSystemLibrary.SetVectorPropertyByName
	void SetUserActivity(struct FUserActivity& UserActivity); // Function Engine.KismetSystemLibrary.SetUserActivity
	void SetTransformPropertyByName(struct UObject* Object, struct FName PropertyName, struct FTransform& Value); // Function Engine.KismetSystemLibrary.SetTransformPropertyByName
	void SetTextPropertyByName(struct UObject* Object, struct FName PropertyName, struct FText& Value); // Function Engine.KismetSystemLibrary.SetTextPropertyByName
	void SetSuppressViewportTransitionMessage(struct UObject* WorldContextObject, bool bState); // Function Engine.KismetSystemLibrary.SetSuppressViewportTransitionMessage
	void SetStructurePropertyByName(struct UObject* Object, struct FName PropertyName, struct FGenericStruct& Value); // Function Engine.KismetSystemLibrary.SetStructurePropertyByName
	void SetStringPropertyByName(struct UObject* Object, struct FName PropertyName, struct FString Value); // Function Engine.KismetSystemLibrary.SetStringPropertyByName
	void SetSoftObjectPropertyByName(struct UObject* Object, struct FName PropertyName, struct TSoftObjectPtr<UObject>& Value); // Function Engine.KismetSystemLibrary.SetSoftObjectPropertyByName
	void SetSoftClassPropertyByName(struct UObject* Object, struct FName PropertyName, struct TSoftClassPtr<UObject>& Value); // Function Engine.KismetSystemLibrary.SetSoftClassPropertyByName
	void SetRotatorPropertyByName(struct UObject* Object, struct FName PropertyName, struct FRotator& Value); // Function Engine.KismetSystemLibrary.SetRotatorPropertyByName
	void SetObjectPropertyByName(struct UObject* Object, struct FName PropertyName, struct UObject* Value); // Function Engine.KismetSystemLibrary.SetObjectPropertyByName
	void SetNamePropertyByName(struct UObject* Object, struct FName PropertyName, struct FName& Value); // Function Engine.KismetSystemLibrary.SetNamePropertyByName
	void SetLinearColorPropertyByName(struct UObject* Object, struct FName PropertyName, struct FLinearColor& Value); // Function Engine.KismetSystemLibrary.SetLinearColorPropertyByName
	void SetIntPropertyByName(struct UObject* Object, struct FName PropertyName, int32_t Value); // Function Engine.KismetSystemLibrary.SetIntPropertyByName
	void SetInterfacePropertyByName(struct UObject* Object, struct FName PropertyName, struct TScriptInterface<IInterface>& Value); // Function Engine.KismetSystemLibrary.SetInterfacePropertyByName
	void SetInt64PropertyByName(struct UObject* Object, struct FName PropertyName, int64_t Value); // Function Engine.KismetSystemLibrary.SetInt64PropertyByName
	void SetGamepadsBlockDeviceFeedback(bool bBlock); // Function Engine.KismetSystemLibrary.SetGamepadsBlockDeviceFeedback
	void SetFloatPropertyByName(struct UObject* Object, struct FName PropertyName, float Value); // Function Engine.KismetSystemLibrary.SetFloatPropertyByName
	void SetFieldPathPropertyByName(struct UObject* Object, struct FName PropertyName, struct TFieldPath<FNone>& Value); // Function Engine.KismetSystemLibrary.SetFieldPathPropertyByName
	void SetColorPropertyByName(struct UObject* Object, struct FName PropertyName, struct FColor& Value); // Function Engine.KismetSystemLibrary.SetColorPropertyByName
	void SetCollisionProfileNameProperty(struct UObject* Object, struct FName PropertyName, struct FCollisionProfileName& Value); // Function Engine.KismetSystemLibrary.SetCollisionProfileNameProperty
	void SetClassPropertyByName(struct UObject* Object, struct FName PropertyName, UObject* Value); // Function Engine.KismetSystemLibrary.SetClassPropertyByName
	void SetBytePropertyByName(struct UObject* Object, struct FName PropertyName, char Value); // Function Engine.KismetSystemLibrary.SetBytePropertyByName
	void SetBoolPropertyByName(struct UObject* Object, struct FName PropertyName, bool Value); // Function Engine.KismetSystemLibrary.SetBoolPropertyByName
	void RetriggerableDelay(struct UObject* WorldContextObject, float Duration, struct FLatentActionInfo LatentInfo); // Function Engine.KismetSystemLibrary.RetriggerableDelay
	void ResetGamepadAssignmentToController(int32_t ControllerId); // Function Engine.KismetSystemLibrary.ResetGamepadAssignmentToController
	void ResetGamepadAssignments(); // Function Engine.KismetSystemLibrary.ResetGamepadAssignments
	void RegisterForRemoteNotifications(); // Function Engine.KismetSystemLibrary.RegisterForRemoteNotifications
	void QuitGame(struct UObject* WorldContextObject, struct APlayerController* SpecificPlayer, enum class EQuitPreference QuitPreference, bool bIgnorePlatformRestrictions); // Function Engine.KismetSystemLibrary.QuitGame
	void PrintWarning(struct FString inString); // Function Engine.KismetSystemLibrary.PrintWarning
	void PrintText(struct UObject* WorldContextObject, struct FText InText, bool bPrintToScreen, bool bPrintToLog, struct FLinearColor TextColor, float Duration); // Function Engine.KismetSystemLibrary.PrintText
	void PrintString(struct UObject* WorldContextObject, struct FString inString, bool bPrintToScreen, bool bPrintToLog, struct FLinearColor TextColor, float Duration); // Function Engine.KismetSystemLibrary.PrintString
	bool ParseParamValue(struct FString inString, struct FString InParam, struct FString& OutValue); // Function Engine.KismetSystemLibrary.ParseParamValue
	bool ParseParam(struct FString inString, struct FString InParam); // Function Engine.KismetSystemLibrary.ParseParam
	void ParseCommandLine(struct FString InCmdLine, struct TArray<struct FString>& OutTokens, struct TArray<struct FString>& OutSwitches, struct TMap<struct FString, struct FString>& OutParams); // Function Engine.KismetSystemLibrary.ParseCommandLine
	void OnAssetLoaded__DelegateSignature(struct UObject* Loaded); // DelegateFunction Engine.KismetSystemLibrary.OnAssetLoaded__DelegateSignature
	void OnAssetClassLoaded__DelegateSignature(UObject* Loaded); // DelegateFunction Engine.KismetSystemLibrary.OnAssetClassLoaded__DelegateSignature
	bool NotEqual_SoftObjectReference(struct TSoftObjectPtr<UObject>& A, struct TSoftObjectPtr<UObject>& B); // Function Engine.KismetSystemLibrary.NotEqual_SoftObjectReference
	bool NotEqual_SoftClassReference(struct TSoftClassPtr<UObject>& A, struct TSoftClassPtr<UObject>& B); // Function Engine.KismetSystemLibrary.NotEqual_SoftClassReference
	bool NotEqual_PrimaryAssetType(struct FPrimaryAssetType A, struct FPrimaryAssetType B); // Function Engine.KismetSystemLibrary.NotEqual_PrimaryAssetType
	bool NotEqual_PrimaryAssetId(struct FPrimaryAssetId A, struct FPrimaryAssetId B); // Function Engine.KismetSystemLibrary.NotEqual_PrimaryAssetId
	struct FString NormalizeFilename(struct FString InFilename); // Function Engine.KismetSystemLibrary.NormalizeFilename
	void MoveComponentTo(struct USceneComponent* Component, struct FVector TargetRelativeLocation, struct FRotator TargetRelativeRotation, bool bEaseOut, bool bEaseIn, float OverTime, bool bForceShortestRotationPath, enum class EMoveComponentAction MoveAction, struct FLatentActionInfo LatentInfo); // Function Engine.KismetSystemLibrary.MoveComponentTo
	struct FSoftObjectPath MakeSoftObjectPath(struct FString PathString); // Function Engine.KismetSystemLibrary.MakeSoftObjectPath
	struct FSoftClassPath MakeSoftClassPath(struct FString PathString); // Function Engine.KismetSystemLibrary.MakeSoftClassPath
	struct FText MakeLiteralText(struct FText Value); // Function Engine.KismetSystemLibrary.MakeLiteralText
	struct FString MakeLiteralString(struct FString Value); // Function Engine.KismetSystemLibrary.MakeLiteralString
	struct FName MakeLiteralName(struct FName Value); // Function Engine.KismetSystemLibrary.MakeLiteralName
	int32_t MakeLiteralInt(int32_t Value); // Function Engine.KismetSystemLibrary.MakeLiteralInt
	float MakeLiteralFloat(float Value); // Function Engine.KismetSystemLibrary.MakeLiteralFloat
	char MakeLiteralByte(char Value); // Function Engine.KismetSystemLibrary.MakeLiteralByte
	bool MakeLiteralBool(bool Value); // Function Engine.KismetSystemLibrary.MakeLiteralBool
	void LoadInterstitialAd(int32_t AdIdIndex); // Function Engine.KismetSystemLibrary.LoadInterstitialAd
	UObject* LoadClassAsset_Blocking(struct TSoftClassPtr<UObject> AssetClass); // Function Engine.KismetSystemLibrary.LoadClassAsset_Blocking
	void LoadAssetClass(struct UObject* WorldContextObject, struct TSoftClassPtr<UObject> AssetClass, struct FDelegate OnLoaded, struct FLatentActionInfo LatentInfo); // Function Engine.KismetSystemLibrary.LoadAssetClass
	struct UObject* LoadAsset_Blocking(struct TSoftObjectPtr<UObject> Asset); // Function Engine.KismetSystemLibrary.LoadAsset_Blocking
	void LoadAsset(struct UObject* WorldContextObject, struct TSoftObjectPtr<UObject> Asset, struct FDelegate OnLoaded, struct FLatentActionInfo LatentInfo); // Function Engine.KismetSystemLibrary.LoadAsset
	bool LineTraceSingleForObjects(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult& OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.LineTraceSingleForObjects
	bool LineTraceSingleByProfile(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, struct FName ProfileName, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult& OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.LineTraceSingleByProfile
	bool LineTraceSingle(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult& OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.LineTraceSingle
	bool LineTraceMultiForObjects(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct TArray<struct FHitResult>& OutHits, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.LineTraceMultiForObjects
	bool LineTraceMultiByProfile(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, struct FName ProfileName, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct TArray<struct FHitResult>& OutHits, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.LineTraceMultiByProfile
	bool LineTraceMulti(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct TArray<struct FHitResult>& OutHits, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.LineTraceMulti
	void LaunchURL(struct FString URL); // Function Engine.KismetSystemLibrary.LaunchURL
	void K2_UnPauseTimerHandle(struct UObject* WorldContextObject, struct FTimerHandle Handle); // Function Engine.KismetSystemLibrary.K2_UnPauseTimerHandle
	void K2_UnPauseTimerDelegate(struct FDelegate Delegate); // Function Engine.KismetSystemLibrary.K2_UnPauseTimerDelegate
	void K2_UnPauseTimer(struct UObject* Object, struct FString FunctionName); // Function Engine.KismetSystemLibrary.K2_UnPauseTimer
	bool K2_TimerExistsHandle(struct UObject* WorldContextObject, struct FTimerHandle Handle); // Function Engine.KismetSystemLibrary.K2_TimerExistsHandle
	bool K2_TimerExistsDelegate(struct FDelegate Delegate); // Function Engine.KismetSystemLibrary.K2_TimerExistsDelegate
	bool K2_TimerExists(struct UObject* Object, struct FString FunctionName); // Function Engine.KismetSystemLibrary.K2_TimerExists
	struct FTimerHandle K2_SetTimerDelegate(struct FDelegate Delegate, float Time, bool bLooping, float InitialStartDelay, float InitialStartDelayVariance); // Function Engine.KismetSystemLibrary.K2_SetTimerDelegate
	struct FTimerHandle K2_SetTimer(struct UObject* Object, struct FString FunctionName, float Time, bool bLooping, float InitialStartDelay, float InitialStartDelayVariance); // Function Engine.KismetSystemLibrary.K2_SetTimer
	void K2_PauseTimerHandle(struct UObject* WorldContextObject, struct FTimerHandle Handle); // Function Engine.KismetSystemLibrary.K2_PauseTimerHandle
	void K2_PauseTimerDelegate(struct FDelegate Delegate); // Function Engine.KismetSystemLibrary.K2_PauseTimerDelegate
	void K2_PauseTimer(struct UObject* Object, struct FString FunctionName); // Function Engine.KismetSystemLibrary.K2_PauseTimer
	bool K2_IsValidTimerHandle(struct FTimerHandle Handle); // Function Engine.KismetSystemLibrary.K2_IsValidTimerHandle
	bool K2_IsTimerPausedHandle(struct UObject* WorldContextObject, struct FTimerHandle Handle); // Function Engine.KismetSystemLibrary.K2_IsTimerPausedHandle
	bool K2_IsTimerPausedDelegate(struct FDelegate Delegate); // Function Engine.KismetSystemLibrary.K2_IsTimerPausedDelegate
	bool K2_IsTimerPaused(struct UObject* Object, struct FString FunctionName); // Function Engine.KismetSystemLibrary.K2_IsTimerPaused
	bool K2_IsTimerActiveHandle(struct UObject* WorldContextObject, struct FTimerHandle Handle); // Function Engine.KismetSystemLibrary.K2_IsTimerActiveHandle
	bool K2_IsTimerActiveDelegate(struct FDelegate Delegate); // Function Engine.KismetSystemLibrary.K2_IsTimerActiveDelegate
	bool K2_IsTimerActive(struct UObject* Object, struct FString FunctionName); // Function Engine.KismetSystemLibrary.K2_IsTimerActive
	struct FTimerHandle K2_InvalidateTimerHandle(struct FTimerHandle& Handle); // Function Engine.KismetSystemLibrary.K2_InvalidateTimerHandle
	float K2_GetTimerRemainingTimeHandle(struct UObject* WorldContextObject, struct FTimerHandle Handle); // Function Engine.KismetSystemLibrary.K2_GetTimerRemainingTimeHandle
	float K2_GetTimerRemainingTimeDelegate(struct FDelegate Delegate); // Function Engine.KismetSystemLibrary.K2_GetTimerRemainingTimeDelegate
	float K2_GetTimerRemainingTime(struct UObject* Object, struct FString FunctionName); // Function Engine.KismetSystemLibrary.K2_GetTimerRemainingTime
	float K2_GetTimerElapsedTimeHandle(struct UObject* WorldContextObject, struct FTimerHandle Handle); // Function Engine.KismetSystemLibrary.K2_GetTimerElapsedTimeHandle
	float K2_GetTimerElapsedTimeDelegate(struct FDelegate Delegate); // Function Engine.KismetSystemLibrary.K2_GetTimerElapsedTimeDelegate
	float K2_GetTimerElapsedTime(struct UObject* Object, struct FString FunctionName); // Function Engine.KismetSystemLibrary.K2_GetTimerElapsedTime
	void K2_ClearTimerHandle(struct UObject* WorldContextObject, struct FTimerHandle Handle); // Function Engine.KismetSystemLibrary.K2_ClearTimerHandle
	void K2_ClearTimerDelegate(struct FDelegate Delegate); // Function Engine.KismetSystemLibrary.K2_ClearTimerDelegate
	void K2_ClearTimer(struct UObject* Object, struct FString FunctionName); // Function Engine.KismetSystemLibrary.K2_ClearTimer
	void K2_ClearAndInvalidateTimerHandle(struct UObject* WorldContextObject, struct FTimerHandle& Handle); // Function Engine.KismetSystemLibrary.K2_ClearAndInvalidateTimerHandle
	bool IsValidSoftObjectReference(struct TSoftObjectPtr<UObject>& SoftObjectReference); // Function Engine.KismetSystemLibrary.IsValidSoftObjectReference
	bool IsValidSoftClassReference(struct TSoftClassPtr<UObject>& SoftClassReference); // Function Engine.KismetSystemLibrary.IsValidSoftClassReference
	bool IsValidPrimaryAssetType(struct FPrimaryAssetType PrimaryAssetType); // Function Engine.KismetSystemLibrary.IsValidPrimaryAssetType
	bool IsValidPrimaryAssetId(struct FPrimaryAssetId PrimaryAssetId); // Function Engine.KismetSystemLibrary.IsValidPrimaryAssetId
	bool IsValidClass(UObject* Class); // Function Engine.KismetSystemLibrary.IsValidClass
	bool IsValid(struct UObject* Object); // Function Engine.KismetSystemLibrary.IsValid
	bool IsUnattended(); // Function Engine.KismetSystemLibrary.IsUnattended
	bool IsStandalone(struct UObject* WorldContextObject); // Function Engine.KismetSystemLibrary.IsStandalone
	bool IsSplitScreen(struct UObject* WorldContextObject); // Function Engine.KismetSystemLibrary.IsSplitScreen
	bool IsServer(struct UObject* WorldContextObject); // Function Engine.KismetSystemLibrary.IsServer
	bool IsScreensaverEnabled(); // Function Engine.KismetSystemLibrary.IsScreensaverEnabled
	bool IsPackagedForDistribution(); // Function Engine.KismetSystemLibrary.IsPackagedForDistribution
	bool IsLoggedIn(struct APlayerController* SpecificPlayer); // Function Engine.KismetSystemLibrary.IsLoggedIn
	bool IsInterstitialAdRequested(); // Function Engine.KismetSystemLibrary.IsInterstitialAdRequested
	bool IsInterstitialAdAvailable(); // Function Engine.KismetSystemLibrary.IsInterstitialAdAvailable
	bool IsDedicatedServer(struct UObject* WorldContextObject); // Function Engine.KismetSystemLibrary.IsDedicatedServer
	bool IsControllerAssignedToGamepad(int32_t ControllerId); // Function Engine.KismetSystemLibrary.IsControllerAssignedToGamepad
	void HideAdBanner(); // Function Engine.KismetSystemLibrary.HideAdBanner
	bool GetVolumeButtonsHandledBySystem(); // Function Engine.KismetSystemLibrary.GetVolumeButtonsHandledBySystem
	struct FString GetUniqueDeviceId(); // Function Engine.KismetSystemLibrary.GetUniqueDeviceId
	struct FString GetSystemPath(struct UObject* Object); // Function Engine.KismetSystemLibrary.GetSystemPath
	bool GetSupportedFullscreenResolutions(struct TArray<struct FIntPoint>& Resolutions); // Function Engine.KismetSystemLibrary.GetSupportedFullscreenResolutions
	struct TSoftObjectPtr<UObject> GetSoftObjectReferenceFromPrimaryAssetId(struct FPrimaryAssetId PrimaryAssetId); // Function Engine.KismetSystemLibrary.GetSoftObjectReferenceFromPrimaryAssetId
	struct TSoftClassPtr<UObject> GetSoftClassReferenceFromPrimaryAssetId(struct FPrimaryAssetId PrimaryAssetId); // Function Engine.KismetSystemLibrary.GetSoftClassReferenceFromPrimaryAssetId
	int32_t GetRenderingMaterialQualityLevel(); // Function Engine.KismetSystemLibrary.GetRenderingMaterialQualityLevel
	int32_t GetRenderingDetailMode(); // Function Engine.KismetSystemLibrary.GetRenderingDetailMode
	struct FString GetProjectSavedDirectory(); // Function Engine.KismetSystemLibrary.GetProjectSavedDirectory
	struct FString GetProjectDirectory(); // Function Engine.KismetSystemLibrary.GetProjectDirectory
	struct FString GetProjectContentDirectory(); // Function Engine.KismetSystemLibrary.GetProjectContentDirectory
	void GetPrimaryAssetsWithBundleState(struct TArray<struct FName>& RequiredBundles, struct TArray<struct FName>& ExcludedBundles, struct TArray<struct FPrimaryAssetType>& ValidTypes, bool bForceCurrentState, struct TArray<struct FPrimaryAssetId>& OutPrimaryAssetIdList); // Function Engine.KismetSystemLibrary.GetPrimaryAssetsWithBundleState
	void GetPrimaryAssetIdList(struct FPrimaryAssetType PrimaryAssetType, struct TArray<struct FPrimaryAssetId>& OutPrimaryAssetIdList); // Function Engine.KismetSystemLibrary.GetPrimaryAssetIdList
	struct FPrimaryAssetId GetPrimaryAssetIdFromSoftObjectReference(struct TSoftObjectPtr<UObject> SoftObjectReference); // Function Engine.KismetSystemLibrary.GetPrimaryAssetIdFromSoftObjectReference
	struct FPrimaryAssetId GetPrimaryAssetIdFromSoftClassReference(struct TSoftClassPtr<UObject> SoftClassReference); // Function Engine.KismetSystemLibrary.GetPrimaryAssetIdFromSoftClassReference
	struct FPrimaryAssetId GetPrimaryAssetIdFromObject(struct UObject* Object); // Function Engine.KismetSystemLibrary.GetPrimaryAssetIdFromObject
	struct FPrimaryAssetId GetPrimaryAssetIdFromClass(UObject* Class); // Function Engine.KismetSystemLibrary.GetPrimaryAssetIdFromClass
	struct TArray<struct FString> GetPreferredLanguages(); // Function Engine.KismetSystemLibrary.GetPreferredLanguages
	struct FString GetPlatformUserName(); // Function Engine.KismetSystemLibrary.GetPlatformUserName
	struct FString GetPlatformUserDir(); // Function Engine.KismetSystemLibrary.GetPlatformUserDir
	struct FString GetPathName(struct UObject* Object); // Function Engine.KismetSystemLibrary.GetPathName
	struct UObject* GetOuterObject(struct UObject* Object); // Function Engine.KismetSystemLibrary.GetOuterObject
	struct FString GetObjectName(struct UObject* Object); // Function Engine.KismetSystemLibrary.GetObjectName
	struct UObject* GetObjectFromPrimaryAssetId(struct FPrimaryAssetId PrimaryAssetId); // Function Engine.KismetSystemLibrary.GetObjectFromPrimaryAssetId
	int32_t GetMinYResolutionForUI(); // Function Engine.KismetSystemLibrary.GetMinYResolutionForUI
	int32_t GetMinYResolutionFor3DView(); // Function Engine.KismetSystemLibrary.GetMinYResolutionFor3DView
	struct FString GetLocalCurrencySymbol(); // Function Engine.KismetSystemLibrary.GetLocalCurrencySymbol
	struct FString GetLocalCurrencyCode(); // Function Engine.KismetSystemLibrary.GetLocalCurrencyCode
	float GetGameTimeInSeconds(struct UObject* WorldContextObject); // Function Engine.KismetSystemLibrary.GetGameTimeInSeconds
	struct FString GetGamepadControllerName(int32_t ControllerId); // Function Engine.KismetSystemLibrary.GetGamepadControllerName
	struct UTexture2D* GetGamepadButtonGlyph(struct FString ButtonKey, int32_t ControllerIndex); // Function Engine.KismetSystemLibrary.GetGamepadButtonGlyph
	struct FString GetGameName(); // Function Engine.KismetSystemLibrary.GetGameName
	struct FString GetGameBundleId(); // Function Engine.KismetSystemLibrary.GetGameBundleId
	int64_t GetFrameCount(); // Function Engine.KismetSystemLibrary.GetFrameCount
	struct FString GetEngineVersion(); // Function Engine.KismetSystemLibrary.GetEngineVersion
	struct FString GetDisplayName(struct UObject* Object); // Function Engine.KismetSystemLibrary.GetDisplayName
	struct FString GetDeviceId(); // Function Engine.KismetSystemLibrary.GetDeviceId
	struct FString GetDefaultLocale(); // Function Engine.KismetSystemLibrary.GetDefaultLocale
	struct FString GetDefaultLanguage(); // Function Engine.KismetSystemLibrary.GetDefaultLanguage
	bool GetCurrentBundleState(struct FPrimaryAssetId PrimaryAssetId, bool bForceCurrentState, struct TArray<struct FName>& OutBundles); // Function Engine.KismetSystemLibrary.GetCurrentBundleState
	bool GetConvenientWindowedResolutions(struct TArray<struct FIntPoint>& Resolutions); // Function Engine.KismetSystemLibrary.GetConvenientWindowedResolutions
	int32_t GetConsoleVariableIntValue(struct FString VariableName); // Function Engine.KismetSystemLibrary.GetConsoleVariableIntValue
	float GetConsoleVariableFloatValue(struct FString VariableName); // Function Engine.KismetSystemLibrary.GetConsoleVariableFloatValue
	bool GetConsoleVariableBoolValue(struct FString VariableName); // Function Engine.KismetSystemLibrary.GetConsoleVariableBoolValue
	void GetComponentBounds(struct USceneComponent* Component, struct FVector& Origin, struct FVector& BoxExtent, float& SphereRadius); // Function Engine.KismetSystemLibrary.GetComponentBounds
	struct FString GetCommandLine(); // Function Engine.KismetSystemLibrary.GetCommandLine
	UObject* GetClassFromPrimaryAssetId(struct FPrimaryAssetId PrimaryAssetId); // Function Engine.KismetSystemLibrary.GetClassFromPrimaryAssetId
	struct FString GetClassDisplayName(UObject* Class); // Function Engine.KismetSystemLibrary.GetClassDisplayName
	int32_t GetAdIDCount(); // Function Engine.KismetSystemLibrary.GetAdIDCount
	void GetActorListFromComponentList(struct TArray<struct UPrimitiveComponent*>& ComponentList, UObject* ActorClassFilter, struct TArray<struct AActor*>& OutActorList); // Function Engine.KismetSystemLibrary.GetActorListFromComponentList
	void GetActorBounds(struct AActor* Actor, struct FVector& Origin, struct FVector& BoxExtent); // Function Engine.KismetSystemLibrary.GetActorBounds
	void ForceCloseAdBanner(); // Function Engine.KismetSystemLibrary.ForceCloseAdBanner
	void FlushPersistentDebugLines(struct UObject* WorldContextObject); // Function Engine.KismetSystemLibrary.FlushPersistentDebugLines
	void FlushDebugStrings(struct UObject* WorldContextObject); // Function Engine.KismetSystemLibrary.FlushDebugStrings
	void ExecuteConsoleCommand(struct UObject* WorldContextObject, struct FString Command, struct APlayerController* SpecificPlayer); // Function Engine.KismetSystemLibrary.ExecuteConsoleCommand
	bool EqualEqual_SoftObjectReference(struct TSoftObjectPtr<UObject>& A, struct TSoftObjectPtr<UObject>& B); // Function Engine.KismetSystemLibrary.EqualEqual_SoftObjectReference
	bool EqualEqual_SoftClassReference(struct TSoftClassPtr<UObject>& A, struct TSoftClassPtr<UObject>& B); // Function Engine.KismetSystemLibrary.EqualEqual_SoftClassReference
	bool EqualEqual_PrimaryAssetType(struct FPrimaryAssetType A, struct FPrimaryAssetType B); // Function Engine.KismetSystemLibrary.EqualEqual_PrimaryAssetType
	bool EqualEqual_PrimaryAssetId(struct FPrimaryAssetId A, struct FPrimaryAssetId B); // Function Engine.KismetSystemLibrary.EqualEqual_PrimaryAssetId
	int32_t EndTransaction(); // Function Engine.KismetSystemLibrary.EndTransaction
	void DrawDebugString(struct UObject* WorldContextObject, struct FVector TextLocation, struct FString Text, struct AActor* TestBaseActor, struct FLinearColor TextColor, float Duration); // Function Engine.KismetSystemLibrary.DrawDebugString
	void DrawDebugSphere(struct UObject* WorldContextObject, struct FVector Center, float Radius, int32_t Segments, struct FLinearColor LineColor, float Duration, float Thickness); // Function Engine.KismetSystemLibrary.DrawDebugSphere
	void DrawDebugPoint(struct UObject* WorldContextObject, struct FVector position, float Size, struct FLinearColor PointColor, float Duration); // Function Engine.KismetSystemLibrary.DrawDebugPoint
	void DrawDebugPlane(struct UObject* WorldContextObject, struct FPlane& PlaneCoordinates, struct FVector Location, float Size, struct FLinearColor PlaneColor, float Duration); // Function Engine.KismetSystemLibrary.DrawDebugPlane
	void DrawDebugLine(struct UObject* WorldContextObject, struct FVector LineStart, struct FVector LineEnd, struct FLinearColor LineColor, float Duration, float Thickness); // Function Engine.KismetSystemLibrary.DrawDebugLine
	void DrawDebugFrustum(struct UObject* WorldContextObject, struct FTransform& FrustumTransform, struct FLinearColor FrustumColor, float Duration, float Thickness); // Function Engine.KismetSystemLibrary.DrawDebugFrustum
	void DrawDebugFloatHistoryTransform(struct UObject* WorldContextObject, struct FDebugFloatHistory& FloatHistory, struct FTransform& DrawTransform, struct FVector2D DrawSize, struct FLinearColor DrawColor, float Duration); // Function Engine.KismetSystemLibrary.DrawDebugFloatHistoryTransform
	void DrawDebugFloatHistoryLocation(struct UObject* WorldContextObject, struct FDebugFloatHistory& FloatHistory, struct FVector DrawLocation, struct FVector2D DrawSize, struct FLinearColor DrawColor, float Duration); // Function Engine.KismetSystemLibrary.DrawDebugFloatHistoryLocation
	void DrawDebugCylinder(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, float Radius, int32_t Segments, struct FLinearColor LineColor, float Duration, float Thickness); // Function Engine.KismetSystemLibrary.DrawDebugCylinder
	void DrawDebugCoordinateSystem(struct UObject* WorldContextObject, struct FVector AxisLoc, struct FRotator AxisRot, float Scale, float Duration, float Thickness); // Function Engine.KismetSystemLibrary.DrawDebugCoordinateSystem
	void DrawDebugConeInDegrees(struct UObject* WorldContextObject, struct FVector Origin, struct FVector Direction, float Length, float AngleWidth, float AngleHeight, int32_t NumSides, struct FLinearColor LineColor, float Duration, float Thickness); // Function Engine.KismetSystemLibrary.DrawDebugConeInDegrees
	void DrawDebugCone(struct UObject* WorldContextObject, struct FVector Origin, struct FVector Direction, float Length, float AngleWidth, float AngleHeight, int32_t NumSides, struct FLinearColor LineColor, float Duration, float Thickness); // Function Engine.KismetSystemLibrary.DrawDebugCone
	void DrawDebugCircle(struct UObject* WorldContextObject, struct FVector Center, float Radius, int32_t NumSegments, struct FLinearColor LineColor, float Duration, float Thickness, struct FVector YAxis, struct FVector ZAxis, bool bDrawAxis); // Function Engine.KismetSystemLibrary.DrawDebugCircle
	void DrawDebugCapsule(struct UObject* WorldContextObject, struct FVector Center, float HalfHeight, float Radius, struct FRotator Rotation, struct FLinearColor LineColor, float Duration, float Thickness); // Function Engine.KismetSystemLibrary.DrawDebugCapsule
	void DrawDebugCamera(struct ACameraActor* CameraActor, struct FLinearColor CameraColor, float Duration); // Function Engine.KismetSystemLibrary.DrawDebugCamera
	void DrawDebugBox(struct UObject* WorldContextObject, struct FVector Center, struct FVector Extent, struct FLinearColor LineColor, struct FRotator Rotation, float Duration, float Thickness); // Function Engine.KismetSystemLibrary.DrawDebugBox
	void DrawDebugArrow(struct UObject* WorldContextObject, struct FVector LineStart, struct FVector LineEnd, float ArrowSize, struct FLinearColor LineColor, float Duration, float Thickness); // Function Engine.KismetSystemLibrary.DrawDebugArrow
	bool DoesImplementInterface(struct UObject* TestObject, UInterface* Interface); // Function Engine.KismetSystemLibrary.DoesImplementInterface
	void Delay(struct UObject* WorldContextObject, float Duration, struct FLatentActionInfo LatentInfo); // Function Engine.KismetSystemLibrary.Delay
	void CreateCopyForUndoBuffer(struct UObject* ObjectToModify); // Function Engine.KismetSystemLibrary.CreateCopyForUndoBuffer
	struct FString ConvertToRelativePath(struct FString Filename); // Function Engine.KismetSystemLibrary.ConvertToRelativePath
	struct FString ConvertToAbsolutePath(struct FString Filename); // Function Engine.KismetSystemLibrary.ConvertToAbsolutePath
	struct TSoftObjectPtr<UObject> Conv_SoftObjPathToSoftObjRef(struct FSoftObjectPath& SoftObjectPath); // Function Engine.KismetSystemLibrary.Conv_SoftObjPathToSoftObjRef
	struct FString Conv_SoftObjectReferenceToString(struct TSoftObjectPtr<UObject>& SoftObjectReference); // Function Engine.KismetSystemLibrary.Conv_SoftObjectReferenceToString
	struct UObject* Conv_SoftObjectReferenceToObject(struct TSoftObjectPtr<UObject>& SoftObject); // Function Engine.KismetSystemLibrary.Conv_SoftObjectReferenceToObject
	struct FString Conv_SoftClassReferenceToString(struct TSoftClassPtr<UObject>& SoftClassReference); // Function Engine.KismetSystemLibrary.Conv_SoftClassReferenceToString
	UObject* Conv_SoftClassReferenceToClass(struct TSoftClassPtr<UObject>& SoftClass); // Function Engine.KismetSystemLibrary.Conv_SoftClassReferenceToClass
	struct TSoftClassPtr<UObject> Conv_SoftClassPathToSoftClassRef(struct FSoftClassPath& SoftClassPath); // Function Engine.KismetSystemLibrary.Conv_SoftClassPathToSoftClassRef
	struct FString Conv_PrimaryAssetTypeToString(struct FPrimaryAssetType PrimaryAssetType); // Function Engine.KismetSystemLibrary.Conv_PrimaryAssetTypeToString
	struct FString Conv_PrimaryAssetIdToString(struct FPrimaryAssetId PrimaryAssetId); // Function Engine.KismetSystemLibrary.Conv_PrimaryAssetIdToString
	struct TSoftObjectPtr<UObject> Conv_ObjectToSoftObjectReference(struct UObject* Object); // Function Engine.KismetSystemLibrary.Conv_ObjectToSoftObjectReference
	struct UObject* Conv_InterfaceToObject(struct TScriptInterface<IInterface>& Interface); // Function Engine.KismetSystemLibrary.Conv_InterfaceToObject
	struct TSoftClassPtr<UObject> Conv_ClassToSoftClassReference(UObject*& Class); // Function Engine.KismetSystemLibrary.Conv_ClassToSoftClassReference
	void ControlScreensaver(bool bAllowScreenSaver); // Function Engine.KismetSystemLibrary.ControlScreensaver
	bool ComponentOverlapComponents(struct UPrimitiveComponent* Component, struct FTransform& ComponentTransform, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, UObject* ComponentClassFilter, struct TArray<struct AActor*>& ActorsToIgnore, struct TArray<struct UPrimitiveComponent*>& OutComponents); // Function Engine.KismetSystemLibrary.ComponentOverlapComponents
	bool ComponentOverlapActors(struct UPrimitiveComponent* Component, struct FTransform& ComponentTransform, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, UObject* ActorClassFilter, struct TArray<struct AActor*>& ActorsToIgnore, struct TArray<struct AActor*>& OutActors); // Function Engine.KismetSystemLibrary.ComponentOverlapActors
	void CollectGarbage(); // Function Engine.KismetSystemLibrary.CollectGarbage
	bool CapsuleTraceSingleForObjects(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, float Radius, float HalfHeight, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult& OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.CapsuleTraceSingleForObjects
	bool CapsuleTraceSingleByProfile(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, float Radius, float HalfHeight, struct FName ProfileName, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult& OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.CapsuleTraceSingleByProfile
	bool CapsuleTraceSingle(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, float Radius, float HalfHeight, enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult& OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.CapsuleTraceSingle
	bool CapsuleTraceMultiForObjects(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, float Radius, float HalfHeight, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct TArray<struct FHitResult>& OutHits, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.CapsuleTraceMultiForObjects
	bool CapsuleTraceMultiByProfile(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, float Radius, float HalfHeight, struct FName ProfileName, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct TArray<struct FHitResult>& OutHits, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.CapsuleTraceMultiByProfile
	bool CapsuleTraceMulti(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, float Radius, float HalfHeight, enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct TArray<struct FHitResult>& OutHits, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.CapsuleTraceMulti
	bool CapsuleOverlapComponents(struct UObject* WorldContextObject, struct FVector CapsulePos, float Radius, float HalfHeight, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, UObject* ComponentClassFilter, struct TArray<struct AActor*>& ActorsToIgnore, struct TArray<struct UPrimitiveComponent*>& OutComponents); // Function Engine.KismetSystemLibrary.CapsuleOverlapComponents
	bool CapsuleOverlapActors(struct UObject* WorldContextObject, struct FVector CapsulePos, float Radius, float HalfHeight, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, UObject* ActorClassFilter, struct TArray<struct AActor*>& ActorsToIgnore, struct TArray<struct AActor*>& OutActors); // Function Engine.KismetSystemLibrary.CapsuleOverlapActors
	bool CanLaunchURL(struct FString URL); // Function Engine.KismetSystemLibrary.CanLaunchURL
	void CancelTransaction(int32_t Index); // Function Engine.KismetSystemLibrary.CancelTransaction
	void BreakSoftObjectPath(struct FSoftObjectPath InSoftObjectPath, struct FString& PathString); // Function Engine.KismetSystemLibrary.BreakSoftObjectPath
	void BreakSoftClassPath(struct FSoftClassPath InSoftClassPath, struct FString& PathString); // Function Engine.KismetSystemLibrary.BreakSoftClassPath
	bool BoxTraceSingleForObjects(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, struct FVector HalfSize, struct FRotator Orientation, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult& OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.BoxTraceSingleForObjects
	bool BoxTraceSingleByProfile(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, struct FVector HalfSize, struct FRotator Orientation, struct FName ProfileName, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult& OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.BoxTraceSingleByProfile
	bool BoxTraceSingle(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, struct FVector HalfSize, struct FRotator Orientation, enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult& OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.BoxTraceSingle
	bool BoxTraceMultiForObjects(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, struct FVector HalfSize, struct FRotator Orientation, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct TArray<struct FHitResult>& OutHits, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.BoxTraceMultiForObjects
	bool BoxTraceMultiByProfile(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, struct FVector HalfSize, struct FRotator Orientation, struct FName ProfileName, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct TArray<struct FHitResult>& OutHits, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.BoxTraceMultiByProfile
	bool BoxTraceMulti(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, struct FVector HalfSize, struct FRotator Orientation, enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct TArray<struct FHitResult>& OutHits, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.BoxTraceMulti
	bool BoxOverlapComponents(struct UObject* WorldContextObject, struct FVector BoxPos, struct FVector Extent, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, UObject* ComponentClassFilter, struct TArray<struct AActor*>& ActorsToIgnore, struct TArray<struct UPrimitiveComponent*>& OutComponents); // Function Engine.KismetSystemLibrary.BoxOverlapComponents
	bool BoxOverlapActors(struct UObject* WorldContextObject, struct FVector BoxPos, struct FVector BoxExtent, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, UObject* ActorClassFilter, struct TArray<struct AActor*>& ActorsToIgnore, struct TArray<struct AActor*>& OutActors); // Function Engine.KismetSystemLibrary.BoxOverlapActors
	int32_t BeginTransaction(struct FString Context, struct FText Description, struct UObject* PrimaryObject); // Function Engine.KismetSystemLibrary.BeginTransaction
	struct FDebugFloatHistory AddFloatHistorySample(float Value, struct FDebugFloatHistory& FloatHistory); // Function Engine.KismetSystemLibrary.AddFloatHistorySample
}; 
 
 


//Class Engine.ParticleSystemReplay Size 64
// Inherited 40 bytes 
class UParticleSystemReplay : public UObject
{

 public: 
	int32_t ClipIDNumber;  // Offset: 40 Size: 4
	char pad_44[20];  // Offset: 44 Size: 20



 // Functions 
 public:
}; 
 
 


//Class Engine.PrimitiveComponent Size 1136
// Inherited 528 bytes 
class UPrimitiveComponent : public USceneComponent
{

 public: 
	float MinDrawDistance;  // Offset: 528 Size: 4
	float LDMaxDrawDistance;  // Offset: 532 Size: 4
	float CachedMaxDrawDistance;  // Offset: 536 Size: 4
	char pad_540_1 : 7;  // Offset: 540 Size: 1
	bool bBlockNeverDistanceCullbyParent : 1;  // Offset: 540 Size: 1
	enum class ESceneDepthPriorityGroup DepthPriorityGroup;  // Offset: 541 Size: 1
	enum class ESceneDepthPriorityGroup ViewOwnerDepthPriorityGroup;  // Offset: 542 Size: 1
	enum class EIndirectLightingCacheQuality IndirectLightingCacheQuality;  // Offset: 543 Size: 1
	enum class ELightmapType LightmapType;  // Offset: 544 Size: 1
	char bUseMaxLODAsImposter : 1;  // Offset: 545 Size: 1
	char bBatchImpostersAsInstances : 1;  // Offset: 545 Size: 1
	char bNeverDistanceCull : 1;  // Offset: 545 Size: 1
	char pad_545_1 : 4;  // Offset: 545 Size: 1
	char bAlwaysCreatePhysicsState : 1;  // Offset: 545 Size: 1
	char bGenerateOverlapEvents : 1;  // Offset: 546 Size: 1
	char bMultiBodyOverlap : 1;  // Offset: 546 Size: 1
	char bTraceComplexOnMove : 1;  // Offset: 546 Size: 1
	char bReturnMaterialOnMove : 1;  // Offset: 546 Size: 1
	char bUseViewOwnerDepthPriorityGroup : 1;  // Offset: 546 Size: 1
	char bAllowCullDistanceVolume : 1;  // Offset: 546 Size: 1
	char bHasMotionBlurVelocityMeshes : 1;  // Offset: 546 Size: 1
	char bVisibleInReflectionCaptures : 1;  // Offset: 546 Size: 1
	char bVisibleInRealTimeSkyCaptures : 1;  // Offset: 547 Size: 1
	char bVisibleInRayTracing : 1;  // Offset: 547 Size: 1
	char bRenderInMainPass : 1;  // Offset: 547 Size: 1
	char bRenderInDepthPass : 1;  // Offset: 547 Size: 1
	char bReceivesDecals : 1;  // Offset: 547 Size: 1
	char bDecalOverDecal : 1;  // Offset: 547 Size: 1
	char bOwnerNoSee : 1;  // Offset: 547 Size: 1
	char bOnlyOwnerSee : 1;  // Offset: 547 Size: 1
	char bTreatAsBackgroundForOcclusion : 1;  // Offset: 548 Size: 1
	char bUseAsOccluder : 1;  // Offset: 548 Size: 1
	char bSelectable : 1;  // Offset: 548 Size: 1
	char bForceMipStreaming : 1;  // Offset: 548 Size: 1
	char bHasPerInstanceHitProxies : 1;  // Offset: 548 Size: 1
	char CastShadow : 1;  // Offset: 548 Size: 1
	char ForceNoCastShadowOnMobile : 1;  // Offset: 548 Size: 1
	char bAffectDynamicIndirectLighting : 1;  // Offset: 548 Size: 1
	char bAffectDistanceFieldLighting : 1;  // Offset: 549 Size: 1
	char bCastDynamicShadow : 1;  // Offset: 549 Size: 1
	char bCastStaticShadow : 1;  // Offset: 549 Size: 1
	char bCastVolumetricTranslucentShadow : 1;  // Offset: 549 Size: 1
	char bCastContactShadow : 1;  // Offset: 549 Size: 1
	char bSelfShadowOnly : 1;  // Offset: 549 Size: 1
	char bCastFarShadow : 1;  // Offset: 549 Size: 1
	char bCastInsetShadow : 1;  // Offset: 549 Size: 1
	char bCastCinematicShadow : 1;  // Offset: 550 Size: 1
	char bCastHiddenShadow : 1;  // Offset: 550 Size: 1
	char bCastShadowAsTwoSided : 1;  // Offset: 550 Size: 1
	char bLightAsIfStatic : 1;  // Offset: 550 Size: 1
	char bLightAttachmentsAsGroup : 1;  // Offset: 550 Size: 1
	char bExcludeFromLightAttachmentGroup : 1;  // Offset: 550 Size: 1
	char bReceiveMobileCSMShadows : 1;  // Offset: 550 Size: 1
	char bSingleSampleShadowFromStationaryLights : 1;  // Offset: 550 Size: 1
	char bIgnoreRadialImpulse : 1;  // Offset: 551 Size: 1
	char bIgnoreRadialForce : 1;  // Offset: 551 Size: 1
	char bApplyImpulseOnDamage : 1;  // Offset: 551 Size: 1
	char bReplicatePhysicsToAutonomousProxy : 1;  // Offset: 551 Size: 1
	char bFillCollisionUnderneathForNavmesh : 1;  // Offset: 551 Size: 1
	char AlwaysLoadOnClient : 1;  // Offset: 551 Size: 1
	char AlwaysLoadOnServer : 1;  // Offset: 551 Size: 1
	char bUseEditorCompositing : 1;  // Offset: 551 Size: 1
	char bRenderCustomDepth : 1;  // Offset: 552 Size: 1
	char bVisibleInSceneCaptureOnly : 1;  // Offset: 552 Size: 1
	char bHiddenInSceneCapture : 1;  // Offset: 552 Size: 1
	char pad_552_1 : 5;  // Offset: 552 Size: 1
	enum class EHasCustomNavigableGeometry bHasCustomNavigableGeometry;  // Offset: 553 Size: 1
	char pad_554[1];  // Offset: 554 Size: 1
	enum class ECanBeCharacterBase CanCharacterStepUpOn;  // Offset: 555 Size: 1
	struct FLightingChannels LightingChannels;  // Offset: 556 Size: 1
	enum class ERendererStencilMask CustomDepthStencilWriteMask;  // Offset: 557 Size: 1
	char pad_558[2];  // Offset: 558 Size: 2
	int32_t CustomDepthStencilValue;  // Offset: 560 Size: 4
	int32_t OutlineStencilValue;  // Offset: 564 Size: 4
	char bUseLinearVelocityOnly : 1;  // Offset: 568 Size: 1
	char bDrawSSR : 1;  // Offset: 568 Size: 1
	char pad_568_1 : 6;  // Offset: 568 Size: 1
	char pad_569[8];  // Offset: 569 Size: 8
	struct FCustomPrimitiveData CustomPrimitiveData;  // Offset: 576 Size: 16
	struct FCustomPrimitiveData CustomPrimitiveDataInternal;  // Offset: 592 Size: 16
	char pad_608[8];  // Offset: 608 Size: 8
	int32_t TranslucencySortPriority;  // Offset: 616 Size: 4
	float TranslucencySortDistanceOffset;  // Offset: 620 Size: 4
	int32_t VisibilityId;  // Offset: 624 Size: 4
	char pad_628[4];  // Offset: 628 Size: 4
	struct TArray<struct URuntimeVirtualTexture*> RuntimeVirtualTextures;  // Offset: 632 Size: 16
	int8_t VirtualTextureLodBias;  // Offset: 648 Size: 1
	int8_t VirtualTextureCullMips;  // Offset: 649 Size: 1
	int8_t VirtualTextureMinCoverage;  // Offset: 650 Size: 1
	enum class ERuntimeVirtualTextureMainPassType VirtualTextureRenderPassType;  // Offset: 651 Size: 1
	char pad_652[4];  // Offset: 652 Size: 4
	float LpvBiasMultiplier;  // Offset: 656 Size: 4
	char pad_660[8];  // Offset: 660 Size: 8
	float BoundsScale;  // Offset: 668 Size: 4
	char pad_672[16];  // Offset: 672 Size: 16
	struct TArray<struct AActor*> MoveIgnoreActors;  // Offset: 688 Size: 16
	struct TArray<struct UPrimitiveComponent*> MoveIgnoreComponents;  // Offset: 704 Size: 16
	char pad_720[16];  // Offset: 720 Size: 16
	struct FBodyInstance BodyInstance;  // Offset: 736 Size: 344
	struct FMulticastSparseDelegate OnComponentHit;  // Offset: 1080 Size: 1
	struct FMulticastSparseDelegate OnComponentBeginOverlap;  // Offset: 1081 Size: 1
	struct FMulticastSparseDelegate OnComponentEndOverlap;  // Offset: 1082 Size: 1
	struct FMulticastSparseDelegate OnComponentWake;  // Offset: 1083 Size: 1
	struct FMulticastSparseDelegate OnComponentSleep;  // Offset: 1084 Size: 1
	char pad_1085[1];  // Offset: 1085 Size: 1
	struct FMulticastSparseDelegate OnBeginCursorOver;  // Offset: 1086 Size: 1
	struct FMulticastSparseDelegate OnEndCursorOver;  // Offset: 1087 Size: 1
	struct FMulticastSparseDelegate OnClicked;  // Offset: 1088 Size: 1
	struct FMulticastSparseDelegate OnReleased;  // Offset: 1089 Size: 1
	struct FMulticastSparseDelegate OnInputTouchBegin;  // Offset: 1090 Size: 1
	struct FMulticastSparseDelegate OnInputTouchEnd;  // Offset: 1091 Size: 1
	struct FMulticastSparseDelegate OnInputTouchEnter;  // Offset: 1092 Size: 1
	struct FMulticastSparseDelegate OnInputTouchLeave;  // Offset: 1093 Size: 1
	char pad_1094[26];  // Offset: 1094 Size: 26
	struct UPrimitiveComponent* LODParentPrimitive;  // Offset: 1120 Size: 8
	char bUseMultiLODLevel : 1;  // Offset: 1128 Size: 1
	char pad_1128_1 : 7;  // Offset: 1128 Size: 1
	char pad_1129[8];  // Offset: 1129 Size: 8



 // Functions 
 public:
	bool WasRecentlyRendered(float Tolerance); // Function Engine.PrimitiveComponent.WasRecentlyRendered
	void WakeRigidBody(struct FName BoneName); // Function Engine.PrimitiveComponent.WakeRigidBody
	void WakeAllRigidBodies(); // Function Engine.PrimitiveComponent.WakeAllRigidBodies
	void SetWalkableSlopeOverride(struct FWalkableSlopeOverride& NewOverride); // Function Engine.PrimitiveComponent.SetWalkableSlopeOverride
	void SetVisibleInSceneCaptureOnly(bool bValue); // Function Engine.PrimitiveComponent.SetVisibleInSceneCaptureOnly
	void SetUseCCD(bool InUseCCD, struct FName BoneName); // Function Engine.PrimitiveComponent.SetUseCCD
	void SetTranslucentSortPriority(int32_t NewTranslucentSortPriority); // Function Engine.PrimitiveComponent.SetTranslucentSortPriority
	void SetTranslucencySortDistanceOffset(float NewTranslucencySortDistanceOffset); // Function Engine.PrimitiveComponent.SetTranslucencySortDistanceOffset
	void SetSingleSampleShadowFromStationaryLights(bool bNewSingleSampleShadowFromStationaryLights); // Function Engine.PrimitiveComponent.SetSingleSampleShadowFromStationaryLights
	void SetSimulatePhysics(bool bSimulate); // Function Engine.PrimitiveComponent.SetSimulatePhysics
	void SetRenderInMainPass(bool bValue); // Function Engine.PrimitiveComponent.SetRenderInMainPass
	void SetRenderCustomDepth(bool bValue); // Function Engine.PrimitiveComponent.SetRenderCustomDepth
	void SetReceivesDecals(bool bNewReceivesDecals); // Function Engine.PrimitiveComponent.SetReceivesDecals
	void SetPhysMaterialOverride(struct UPhysicalMaterial* NewPhysMaterial); // Function Engine.PrimitiveComponent.SetPhysMaterialOverride
	void SetPhysicsMaxAngularVelocityInRadians(float NewMaxAngVel, bool bAddToCurrent, struct FName BoneName); // Function Engine.PrimitiveComponent.SetPhysicsMaxAngularVelocityInRadians
	void SetPhysicsMaxAngularVelocityInDegrees(float NewMaxAngVel, bool bAddToCurrent, struct FName BoneName); // Function Engine.PrimitiveComponent.SetPhysicsMaxAngularVelocityInDegrees
	void SetPhysicsMaxAngularVelocity(float NewMaxAngVel, bool bAddToCurrent, struct FName BoneName); // Function Engine.PrimitiveComponent.SetPhysicsMaxAngularVelocity
	void SetPhysicsLinearVelocity(struct FVector NewVel, bool bAddToCurrent, struct FName BoneName); // Function Engine.PrimitiveComponent.SetPhysicsLinearVelocity
	void SetPhysicsAngularVelocityInRadians(struct FVector NewAngVel, bool bAddToCurrent, struct FName BoneName); // Function Engine.PrimitiveComponent.SetPhysicsAngularVelocityInRadians
	void SetPhysicsAngularVelocityInDegrees(struct FVector NewAngVel, bool bAddToCurrent, struct FName BoneName); // Function Engine.PrimitiveComponent.SetPhysicsAngularVelocityInDegrees
	void SetPhysicsAngularVelocity(struct FVector NewAngVel, bool bAddToCurrent, struct FName BoneName); // Function Engine.PrimitiveComponent.SetPhysicsAngularVelocity
	void SetOwnerNoSee(bool bNewOwnerNoSee); // Function Engine.PrimitiveComponent.SetOwnerNoSee
	void SetOutlineStencilValue(int32_t Value); // Function Engine.PrimitiveComponent.SetOutlineStencilValue
	void SetOnlyOwnerSee(bool bNewOnlyOwnerSee); // Function Engine.PrimitiveComponent.SetOnlyOwnerSee
	void SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision); // Function Engine.PrimitiveComponent.SetNotifyRigidBodyCollision
	void SetMaterialByName(struct FName MaterialSlotName, struct UMaterialInterface* Material); // Function Engine.PrimitiveComponent.SetMaterialByName
	void SetMaterial(int32_t ElementIndex, struct UMaterialInterface* Material); // Function Engine.PrimitiveComponent.SetMaterial
	void SetMassScale(struct FName BoneName, float InMassScale); // Function Engine.PrimitiveComponent.SetMassScale
	void SetMassOverrideInKg(struct FName BoneName, float MassInKg, bool bOverrideMass); // Function Engine.PrimitiveComponent.SetMassOverrideInKg
	void SetLinearDamping(float InDamping); // Function Engine.PrimitiveComponent.SetLinearDamping
	void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2); // Function Engine.PrimitiveComponent.SetLightingChannels
	void SetLightAttachmentsAsGroup(bool bInLightAttachmentsAsGroup); // Function Engine.PrimitiveComponent.SetLightAttachmentsAsGroup
	void SetHiddenInSceneCapture(bool bValue); // Function Engine.PrimitiveComponent.SetHiddenInSceneCapture
	void SetGenerateOverlapEvents(bool bInGenerateOverlapEvents); // Function Engine.PrimitiveComponent.SetGenerateOverlapEvents
	void SetForceNoCastShadowOnMobile(bool NewNoCastShadow); // Function Engine.PrimitiveComponent.SetForceNoCastShadowOnMobile
	void SetExcludeFromLightAttachmentGroup(bool bInExcludeFromLightAttachmentGroup); // Function Engine.PrimitiveComponent.SetExcludeFromLightAttachmentGroup
	void SetEnableGravity(bool bGravityEnabled); // Function Engine.PrimitiveComponent.SetEnableGravity
	void SetDefaultCustomPrimitiveDataVector4(int32_t DataIndex, struct FVector4 Value); // Function Engine.PrimitiveComponent.SetDefaultCustomPrimitiveDataVector4
	void SetDefaultCustomPrimitiveDataVector3(int32_t DataIndex, struct FVector Value); // Function Engine.PrimitiveComponent.SetDefaultCustomPrimitiveDataVector3
	void SetDefaultCustomPrimitiveDataVector2(int32_t DataIndex, struct FVector2D Value); // Function Engine.PrimitiveComponent.SetDefaultCustomPrimitiveDataVector2
	void SetDefaultCustomPrimitiveDataFloat(int32_t DataIndex, float Value); // Function Engine.PrimitiveComponent.SetDefaultCustomPrimitiveDataFloat
	void SetDecalOverDecal(bool bNewValue); // Function Engine.PrimitiveComponent.SetDecalOverDecal
	void SetCustomPrimitiveDataVector4(int32_t DataIndex, struct FVector4 Value); // Function Engine.PrimitiveComponent.SetCustomPrimitiveDataVector4
	void SetCustomPrimitiveDataVector3(int32_t DataIndex, struct FVector Value); // Function Engine.PrimitiveComponent.SetCustomPrimitiveDataVector3
	void SetCustomPrimitiveDataVector2(int32_t DataIndex, struct FVector2D Value); // Function Engine.PrimitiveComponent.SetCustomPrimitiveDataVector2
	void SetCustomPrimitiveDataFloat(int32_t DataIndex, float Value); // Function Engine.PrimitiveComponent.SetCustomPrimitiveDataFloat
	void SetCustomDepthStencilWriteMask(enum class ERendererStencilMask WriteMaskBit); // Function Engine.PrimitiveComponent.SetCustomDepthStencilWriteMask
	void SetCustomDepthStencilValue(int32_t Value); // Function Engine.PrimitiveComponent.SetCustomDepthStencilValue
	void SetCullDistance(float NewCullDistance); // Function Engine.PrimitiveComponent.SetCullDistance
	void SetConstraintMode(enum class EDOFMode ConstraintMode); // Function Engine.PrimitiveComponent.SetConstraintMode
	void SetCollisionResponseToChannel(enum class ECollisionChannel Channel, enum class ECollisionResponse NewResponse); // Function Engine.PrimitiveComponent.SetCollisionResponseToChannel
	void SetCollisionResponseToAllChannels(enum class ECollisionResponse NewResponse); // Function Engine.PrimitiveComponent.SetCollisionResponseToAllChannels
	void SetCollisionProfileName(struct FName InCollisionProfileName, bool bUpdateOverlaps); // Function Engine.PrimitiveComponent.SetCollisionProfileName
	void SetCollisionObjectType(enum class ECollisionChannel Channel); // Function Engine.PrimitiveComponent.SetCollisionObjectType
	void SetCollisionEnabled(enum class ECollisionEnabled NewType); // Function Engine.PrimitiveComponent.SetCollisionEnabled
	void SetCenterOfMass(struct FVector CenterOfMassOffset, struct FName BoneName); // Function Engine.PrimitiveComponent.SetCenterOfMass
	void SetCastShadow(bool NewCastShadow); // Function Engine.PrimitiveComponent.SetCastShadow
	void SetCastInsetShadow(bool bInCastInsetShadow); // Function Engine.PrimitiveComponent.SetCastInsetShadow
	void SetCastHiddenShadow(bool NewCastHiddenShadow); // Function Engine.PrimitiveComponent.SetCastHiddenShadow
	void SetBoundsScale(float NewBoundsScale); // Function Engine.PrimitiveComponent.SetBoundsScale
	void SetAngularDamping(float InDamping); // Function Engine.PrimitiveComponent.SetAngularDamping
	void SetAllUseCCD(bool InUseCCD); // Function Engine.PrimitiveComponent.SetAllUseCCD
	void SetAllPhysicsLinearVelocity(struct FVector NewVel, bool bAddToCurrent); // Function Engine.PrimitiveComponent.SetAllPhysicsLinearVelocity
	void SetAllPhysicsAngularVelocityInRadians(struct FVector& NewAngVel, bool bAddToCurrent); // Function Engine.PrimitiveComponent.SetAllPhysicsAngularVelocityInRadians
	void SetAllPhysicsAngularVelocityInDegrees(struct FVector& NewAngVel, bool bAddToCurrent); // Function Engine.PrimitiveComponent.SetAllPhysicsAngularVelocityInDegrees
	void SetAllMassScale(float InMassScale); // Function Engine.PrimitiveComponent.SetAllMassScale
	struct FVector ScaleByMomentOfInertia(struct FVector InputVector, struct FName BoneName); // Function Engine.PrimitiveComponent.ScaleByMomentOfInertia
	void PutRigidBodyToSleep(struct FName BoneName); // Function Engine.PrimitiveComponent.PutRigidBodyToSleep
	bool K2_SphereTraceComponent(struct FVector TraceStart, struct FVector TraceEnd, float SphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, struct FVector& HitLocation, struct FVector& HitNormal, struct FName& BoneName, struct FHitResult& OutHit); // Function Engine.PrimitiveComponent.K2_SphereTraceComponent
	bool K2_SphereOverlapComponent(struct FVector InSphereCentre, float InSphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, struct FVector& HitLocation, struct FVector& HitNormal, struct FName& BoneName, struct FHitResult& OutHit); // Function Engine.PrimitiveComponent.K2_SphereOverlapComponent
	bool K2_LineTraceComponent(struct FVector TraceStart, struct FVector TraceEnd, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, struct FVector& HitLocation, struct FVector& HitNormal, struct FName& BoneName, struct FHitResult& OutHit); // Function Engine.PrimitiveComponent.K2_LineTraceComponent
	bool K2_IsQueryCollisionEnabled(); // Function Engine.PrimitiveComponent.K2_IsQueryCollisionEnabled
	bool K2_IsPhysicsCollisionEnabled(); // Function Engine.PrimitiveComponent.K2_IsPhysicsCollisionEnabled
	bool K2_IsCollisionEnabled(); // Function Engine.PrimitiveComponent.K2_IsCollisionEnabled
	bool K2_BoxOverlapComponent(struct FVector InBoxCentre, struct FBox InBox, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, struct FVector& HitLocation, struct FVector& HitNormal, struct FName& BoneName, struct FHitResult& OutHit); // Function Engine.PrimitiveComponent.K2_BoxOverlapComponent
	bool IsOverlappingComponent(struct UPrimitiveComponent* OtherComp); // Function Engine.PrimitiveComponent.IsOverlappingComponent
	bool IsOverlappingActor(struct AActor* Other); // Function Engine.PrimitiveComponent.IsOverlappingActor
	bool IsGravityEnabled(); // Function Engine.PrimitiveComponent.IsGravityEnabled
	bool IsAnyRigidBodyAwake(); // Function Engine.PrimitiveComponent.IsAnyRigidBodyAwake
	void IgnoreComponentWhenMoving(struct UPrimitiveComponent* Component, bool bShouldIgnore); // Function Engine.PrimitiveComponent.IgnoreComponentWhenMoving
	void IgnoreActorWhenMoving(struct AActor* Actor, bool bShouldIgnore); // Function Engine.PrimitiveComponent.IgnoreActorWhenMoving
	struct FWalkableSlopeOverride GetWalkableSlopeOverride(); // Function Engine.PrimitiveComponent.GetWalkableSlopeOverride
	struct FVector GetPhysicsLinearVelocityAtPoint(struct FVector Point, struct FName BoneName); // Function Engine.PrimitiveComponent.GetPhysicsLinearVelocityAtPoint
	struct FVector GetPhysicsLinearVelocity(struct FName BoneName); // Function Engine.PrimitiveComponent.GetPhysicsLinearVelocity
	struct FVector GetPhysicsAngularVelocityInRadians(struct FName BoneName); // Function Engine.PrimitiveComponent.GetPhysicsAngularVelocityInRadians
	struct FVector GetPhysicsAngularVelocityInDegrees(struct FName BoneName); // Function Engine.PrimitiveComponent.GetPhysicsAngularVelocityInDegrees
	struct FVector GetPhysicsAngularVelocity(struct FName BoneName); // Function Engine.PrimitiveComponent.GetPhysicsAngularVelocity
	void GetOverlappingComponents(struct TArray<struct UPrimitiveComponent*>& OutOverlappingComponents); // Function Engine.PrimitiveComponent.GetOverlappingComponents
	void GetOverlappingActors(struct TArray<struct AActor*>& OverlappingActors, AActor* ClassFilter); // Function Engine.PrimitiveComponent.GetOverlappingActors
	int32_t GetNumMaterials(); // Function Engine.PrimitiveComponent.GetNumMaterials
	struct UMaterialInterface* GetMaterialFromCollisionFaceIndex(int32_t FaceIndex, int32_t& SectionIndex); // Function Engine.PrimitiveComponent.GetMaterialFromCollisionFaceIndex
	struct UMaterialInterface* GetMaterial(int32_t ElementIndex); // Function Engine.PrimitiveComponent.GetMaterial
	float GetMassScale(struct FName BoneName); // Function Engine.PrimitiveComponent.GetMassScale
	float GetMass(); // Function Engine.PrimitiveComponent.GetMass
	float GetLinearDamping(); // Function Engine.PrimitiveComponent.GetLinearDamping
	struct FVector GetInertiaTensor(struct FName BoneName); // Function Engine.PrimitiveComponent.GetInertiaTensor
	bool GetGenerateOverlapEvents(); // Function Engine.PrimitiveComponent.GetGenerateOverlapEvents
	enum class ECollisionResponse GetCollisionResponseToChannel(enum class ECollisionChannel Channel); // Function Engine.PrimitiveComponent.GetCollisionResponseToChannel
	struct FName GetCollisionProfileName(); // Function Engine.PrimitiveComponent.GetCollisionProfileName
	enum class ECollisionChannel GetCollisionObjectType(); // Function Engine.PrimitiveComponent.GetCollisionObjectType
	enum class ECollisionEnabled GetCollisionEnabled(); // Function Engine.PrimitiveComponent.GetCollisionEnabled
	float GetClosestPointOnCollision(struct FVector& Point, struct FVector& OutPointOnBody, struct FName BoneName); // Function Engine.PrimitiveComponent.GetClosestPointOnCollision
	struct FVector GetCenterOfMass(struct FName BoneName); // Function Engine.PrimitiveComponent.GetCenterOfMass
	float GetAngularDamping(); // Function Engine.PrimitiveComponent.GetAngularDamping
	struct UMaterialInstanceDynamic* CreateDynamicMaterialInstance(int32_t ElementIndex, struct UMaterialInterface* SourceMaterial, struct FName OptionalName); // Function Engine.PrimitiveComponent.CreateDynamicMaterialInstance
	struct UMaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicFromMaterial(int32_t ElementIndex, struct UMaterialInterface* Parent); // Function Engine.PrimitiveComponent.CreateAndSetMaterialInstanceDynamicFromMaterial
	struct UMaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamic(int32_t ElementIndex); // Function Engine.PrimitiveComponent.CreateAndSetMaterialInstanceDynamic
	struct TArray<struct UPrimitiveComponent*> CopyArrayOfMoveIgnoreComponents(); // Function Engine.PrimitiveComponent.CopyArrayOfMoveIgnoreComponents
	struct TArray<struct AActor*> CopyArrayOfMoveIgnoreActors(); // Function Engine.PrimitiveComponent.CopyArrayOfMoveIgnoreActors
	void ClearMoveIgnoreComponents(); // Function Engine.PrimitiveComponent.ClearMoveIgnoreComponents
	void ClearMoveIgnoreActors(); // Function Engine.PrimitiveComponent.ClearMoveIgnoreActors
	bool CanCharacterStepUp(struct APawn* Pawn); // Function Engine.PrimitiveComponent.CanCharacterStepUp
	void AddTorqueInRadians(struct FVector Torque, struct FName BoneName, bool bAccelChange); // Function Engine.PrimitiveComponent.AddTorqueInRadians
	void AddTorqueInDegrees(struct FVector Torque, struct FName BoneName, bool bAccelChange); // Function Engine.PrimitiveComponent.AddTorqueInDegrees
	void AddTorque(struct FVector Torque, struct FName BoneName, bool bAccelChange); // Function Engine.PrimitiveComponent.AddTorque
	void AddRadialImpulse(struct FVector Origin, float Radius, float Strength, enum class ERadialImpulseFalloff Falloff, bool bVelChange); // Function Engine.PrimitiveComponent.AddRadialImpulse
	void AddRadialForce(struct FVector Origin, float Radius, float Strength, enum class ERadialImpulseFalloff Falloff, bool bAccelChange); // Function Engine.PrimitiveComponent.AddRadialForce
	void AddImpulseAtLocation(struct FVector Impulse, struct FVector Location, struct FName BoneName); // Function Engine.PrimitiveComponent.AddImpulseAtLocation
	void AddImpulse(struct FVector Impulse, struct FName BoneName, bool bVelChange); // Function Engine.PrimitiveComponent.AddImpulse
	void AddForceAtLocationLocal(struct FVector Force, struct FVector Location, struct FName BoneName); // Function Engine.PrimitiveComponent.AddForceAtLocationLocal
	void AddForceAtLocation(struct FVector Force, struct FVector Location, struct FName BoneName); // Function Engine.PrimitiveComponent.AddForceAtLocation
	void AddForce(struct FVector Force, struct FName BoneName, bool bAccelChange); // Function Engine.PrimitiveComponent.AddForce
	void AddAngularImpulseInRadians(struct FVector Impulse, struct FName BoneName, bool bVelChange); // Function Engine.PrimitiveComponent.AddAngularImpulseInRadians
	void AddAngularImpulseInDegrees(struct FVector Impulse, struct FName BoneName, bool bVelChange); // Function Engine.PrimitiveComponent.AddAngularImpulseInDegrees
	void AddAngularImpulse(struct FVector Impulse, struct FName BoneName, bool bVelChange); // Function Engine.PrimitiveComponent.AddAngularImpulse
}; 
 
 


//Class Engine.MaterialExpressionShadingPathSwitch Size 144
// Inherited 64 bytes 
class UMaterialExpressionShadingPathSwitch : public UMaterialExpression
{

 public: 
	struct FExpressionInput Default;  // Offset: 64 Size: 20
	struct FExpressionInput Inputs[3];  // Offset: 84 Size: 60



 // Functions 
 public:
}; 
 
 


//Class Engine.AnimNotify Size 56
// Inherited 40 bytes 
class UAnimNotify : public UObject
{

 public: 
	char pad_40[16];  // Offset: 40 Size: 16



 // Functions 
 public:
	bool Received_Notify(struct USkeletalMeshComponent* MeshComp, struct UAnimSequenceBase* Animation); // Function Engine.AnimNotify.Received_Notify
	struct FString GetNotifyName(); // Function Engine.AnimNotify.GetNotifyName
}; 
 
 


//Class Engine.FXSystemComponent Size 1136
// Inherited 1136 bytes 
class UFXSystemComponent : public UPrimitiveComponent
{

 public: 



 // Functions 
 public:
	void SetVectorParameter(struct FName ParameterName, struct FVector Param); // Function Engine.FXSystemComponent.SetVectorParameter
	void SetUseAutoManageAttachment(bool bAutoManage); // Function Engine.FXSystemComponent.SetUseAutoManageAttachment
	void SetIntParameter(struct FName ParameterName, int32_t Param); // Function Engine.FXSystemComponent.SetIntParameter
	void SetFloatParameter(struct FName ParameterName, float Param); // Function Engine.FXSystemComponent.SetFloatParameter
	void SetEmitterEnable(struct FName EmitterName, bool bNewEnableState); // Function Engine.FXSystemComponent.SetEmitterEnable
	void SetColorParameter(struct FName ParameterName, struct FLinearColor Param); // Function Engine.FXSystemComponent.SetColorParameter
	void SetBoolParameter(struct FName ParameterName, bool Param); // Function Engine.FXSystemComponent.SetBoolParameter
	void SetAutoAttachmentParameters(struct USceneComponent* Parent, struct FName SocketName, enum class EAttachmentRule LocationRule, enum class EAttachmentRule RotationRule, enum class EAttachmentRule ScaleRule); // Function Engine.FXSystemComponent.SetAutoAttachmentParameters
	void SetActorParameter(struct FName ParameterName, struct AActor* Param); // Function Engine.FXSystemComponent.SetActorParameter
	void ReleaseToPool(); // Function Engine.FXSystemComponent.ReleaseToPool
	struct UFXSystemAsset* GetFXSystemAsset(); // Function Engine.FXSystemComponent.GetFXSystemAsset
}; 
 
 


//Class Engine.DPICustomScalingRule Size 40
// Inherited 40 bytes 
class UDPICustomScalingRule : public UObject
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.Console Size 304
// Inherited 40 bytes 
class UConsole : public UObject
{

 public: 
	char pad_40[16];  // Offset: 40 Size: 16
	struct ULocalPlayer* ConsoleTargetPlayer;  // Offset: 56 Size: 8
	struct UTexture2D* DefaultTexture_Black;  // Offset: 64 Size: 8
	struct UTexture2D* DefaultTexture_White;  // Offset: 72 Size: 8
	char pad_80[24];  // Offset: 80 Size: 24
	struct TArray<struct FString> HistoryBuffer;  // Offset: 104 Size: 16
	char pad_120[184];  // Offset: 120 Size: 184



 // Functions 
 public:
}; 
 
 


//Class Engine.TriggerBase Size 552
// Inherited 544 bytes 
class ATriggerBase : public AActor
{

 public: 
	struct UShapeComponent* CollisionComponent;  // Offset: 544 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.FXSystemAsset Size 48
// Inherited 40 bytes 
class UFXSystemAsset : public UObject
{

 public: 
	uint32_t MaxPoolSize;  // Offset: 40 Size: 4
	uint32_t PoolPrimeSize;  // Offset: 44 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleEventReceiverSpawn Size 216
// Inherited 64 bytes 
class UParticleModuleEventReceiverSpawn : public UParticleModuleEventReceiverBase
{

 public: 
	struct FRawDistributionFloat SpawnCount;  // Offset: 64 Size: 48
	char bUseParticleTime : 1;  // Offset: 112 Size: 1
	char bUsePSysLocation : 1;  // Offset: 112 Size: 1
	char bInheritVelocity : 1;  // Offset: 112 Size: 1
	char pad_112_1 : 5;  // Offset: 112 Size: 1
	char pad_113[8];  // Offset: 113 Size: 8
	struct FRawDistributionVector InheritVelocityScale;  // Offset: 120 Size: 72
	struct TArray<struct UPhysicalMaterial*> PhysicalMaterials;  // Offset: 192 Size: 16
	char bBanPhysicalMaterials : 1;  // Offset: 208 Size: 1
	char pad_208_1 : 7;  // Offset: 208 Size: 1
	char pad_209[8];  // Offset: 209 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.InterpTrackFloatParticleParam Size 152
// Inherited 144 bytes 
class UInterpTrackFloatParticleParam : public UInterpTrackFloatBase
{

 public: 
	struct FName ParamName;  // Offset: 144 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.SoundEffectPreset Size 104
// Inherited 40 bytes 
class USoundEffectPreset : public UObject
{

 public: 
	char pad_40[64];  // Offset: 40 Size: 64



 // Functions 
 public:
}; 
 
 


//Class Engine.LightmassCharacterIndirectDetailVolume Size 608
// Inherited 600 bytes 
class ALightmassCharacterIndirectDetailVolume : public AVolume
{

 public: 
	float SampleSpacingScale;  // Offset: 600 Size: 4
	char pad_604_1 : 7;  // Offset: 604 Size: 1
	bool bIgnoreNearbyVolumeSample : 1;  // Offset: 604 Size: 1
	char pad_605[3];  // Offset: 605 Size: 3



 // Functions 
 public:
}; 
 
 


//Class Engine.HLODProxy Size 136
// Inherited 40 bytes 
class UHLODProxy : public UObject
{

 public: 
	struct TArray<struct FHLODProxyMesh> ProxyMeshes;  // Offset: 40 Size: 16
	struct TMap<struct UHLODProxyDesc*, struct FHLODProxyMesh> HLODActors;  // Offset: 56 Size: 80



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionShadowReplace Size 104
// Inherited 64 bytes 
class UMaterialExpressionShadowReplace : public UMaterialExpression
{

 public: 
	struct FExpressionInput Default;  // Offset: 64 Size: 20
	struct FExpressionInput Shadow;  // Offset: 84 Size: 20



 // Functions 
 public:
}; 
 
 


//Class Engine.AnimNotifyState Size 48
// Inherited 40 bytes 
class UAnimNotifyState : public UObject
{

 public: 
	char pad_40[8];  // Offset: 40 Size: 8



 // Functions 
 public:
	bool Received_NotifyTick(struct USkeletalMeshComponent* MeshComp, struct UAnimSequenceBase* Animation, float FrameDeltaTime); // Function Engine.AnimNotifyState.Received_NotifyTick
	bool Received_NotifyEnd(struct USkeletalMeshComponent* MeshComp, struct UAnimSequenceBase* Animation); // Function Engine.AnimNotifyState.Received_NotifyEnd
	bool Received_NotifyBegin(struct USkeletalMeshComponent* MeshComp, struct UAnimSequenceBase* Animation, float TotalDuration); // Function Engine.AnimNotifyState.Received_NotifyBegin
	struct FString GetNotifyName(); // Function Engine.AnimNotifyState.GetNotifyName
}; 
 
 


//Class Engine.SoundSubmixWithParentBase Size 64
// Inherited 56 bytes 
class USoundSubmixWithParentBase : public USoundSubmixBase
{

 public: 
	struct USoundSubmixBase* ParentSubmix;  // Offset: 56 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionDecalDerivative Size 64
// Inherited 64 bytes 
class UMaterialExpressionDecalDerivative : public UMaterialExpression
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.MeshComponent Size 1200
// Inherited 1136 bytes 
class UMeshComponent : public UPrimitiveComponent
{

 public: 
	struct TArray<struct UMaterialInterface*> OverrideMaterials;  // Offset: 1136 Size: 16
	char pad_1152[16];  // Offset: 1152 Size: 16
	char bEnableMaterialParameterCaching : 1;  // Offset: 1168 Size: 1
	char pad_1168_1 : 7;  // Offset: 1168 Size: 1
	char pad_1169[8];  // Offset: 1169 Size: 8
	struct TArray<struct FOverayMaterialArray> OverlayMaterials;  // Offset: 1176 Size: 16
	char pad_1192[8];  // Offset: 1192 Size: 8



 // Functions 
 public:
	void SetVectorParameterValueOnMaterials(struct FName ParameterName, struct FVector ParameterValue); // Function Engine.MeshComponent.SetVectorParameterValueOnMaterials
	void SetScalarParameterValueOnMaterials(struct FName ParameterName, float ParameterValue); // Function Engine.MeshComponent.SetScalarParameterValueOnMaterials
	void SetOverlayMaterial(int32_t ElementIndex, int32_t OverlayIndex, struct UMaterialInterface* OverlayMaterial); // Function Engine.MeshComponent.SetOverlayMaterial
	void PrestreamTextures(float Seconds, bool bPrioritizeCharacterTextures, int32_t CinematicTextureGroups); // Function Engine.MeshComponent.PrestreamTextures
	bool IsUseOverlayMaterial(); // Function Engine.MeshComponent.IsUseOverlayMaterial
	bool IsMaterialSlotNameValid(struct FName MaterialSlotName); // Function Engine.MeshComponent.IsMaterialSlotNameValid
	struct UMaterialInterface* GetOverlayMaterial(int32_t ElementIndex, int32_t OverlayIndex); // Function Engine.MeshComponent.GetOverlayMaterial
	int32_t GetNumOverlayMaterials(int32_t ElementIndex); // Function Engine.MeshComponent.GetNumOverlayMaterials
	struct TArray<struct FName> GetMaterialSlotNames(); // Function Engine.MeshComponent.GetMaterialSlotNames
	struct TArray<struct UMaterialInterface*> GetMaterials(); // Function Engine.MeshComponent.GetMaterials
	int32_t GetMaterialIndex(struct FName MaterialSlotName); // Function Engine.MeshComponent.GetMaterialIndex
}; 
 
 


//Class Engine.MovementComponent Size 240
// Inherited 176 bytes 
class UMovementComponent : public UActorComponent
{

 public: 
	struct USceneComponent* UpdatedComponent;  // Offset: 176 Size: 8
	struct UPrimitiveComponent* UpdatedPrimitive;  // Offset: 184 Size: 8
	char pad_192[4];  // Offset: 192 Size: 4
	struct FVector Velocity;  // Offset: 196 Size: 12
	struct FVector PlaneConstraintNormal;  // Offset: 208 Size: 12
	struct FVector PlaneConstraintOrigin;  // Offset: 220 Size: 12
	char bUpdateOnlyIfRendered : 1;  // Offset: 232 Size: 1
	char bAutoUpdateTickRegistration : 1;  // Offset: 232 Size: 1
	char bTickBeforeOwner : 1;  // Offset: 232 Size: 1
	char bAutoRegisterUpdatedComponent : 1;  // Offset: 232 Size: 1
	char bConstrainToPlane : 1;  // Offset: 232 Size: 1
	char bSnapToPlaneAtStart : 1;  // Offset: 232 Size: 1
	char bAutoRegisterPhysicsVolumeUpdates : 1;  // Offset: 232 Size: 1
	char bComponentShouldUpdatePhysicsVolume : 1;  // Offset: 232 Size: 1
	char pad_233[2];  // Offset: 233 Size: 2
	enum class EPlaneConstraintAxisSetting PlaneConstraintAxisSetting;  // Offset: 235 Size: 1
	char pad_236[4];  // Offset: 236 Size: 4



 // Functions 
 public:
	void StopMovementImmediately(); // Function Engine.MovementComponent.StopMovementImmediately
	void SnapUpdatedComponentToPlane(); // Function Engine.MovementComponent.SnapUpdatedComponentToPlane
	void SetUpdatedComponent(struct USceneComponent* NewUpdatedComponent); // Function Engine.MovementComponent.SetUpdatedComponent
	void SetPlaneConstraintOrigin(struct FVector PlaneOrigin); // Function Engine.MovementComponent.SetPlaneConstraintOrigin
	void SetPlaneConstraintNormal(struct FVector PlaneNormal); // Function Engine.MovementComponent.SetPlaneConstraintNormal
	void SetPlaneConstraintFromVectors(struct FVector Forward, struct FVector Up); // Function Engine.MovementComponent.SetPlaneConstraintFromVectors
	void SetPlaneConstraintEnabled(bool bEnabled); // Function Engine.MovementComponent.SetPlaneConstraintEnabled
	void SetPlaneConstraintAxisSetting(enum class EPlaneConstraintAxisSetting NewAxisSetting); // Function Engine.MovementComponent.SetPlaneConstraintAxisSetting
	void PhysicsVolumeChanged(struct APhysicsVolume* NewVolume); // Function Engine.MovementComponent.PhysicsVolumeChanged
	bool K2_MoveUpdatedComponent(struct FVector Delta, struct FRotator NewRotation, struct FHitResult& OutHit, bool bSweep, bool bTeleport); // Function Engine.MovementComponent.K2_MoveUpdatedComponent
	float K2_GetModifiedMaxSpeed(); // Function Engine.MovementComponent.K2_GetModifiedMaxSpeed
	float K2_GetMaxSpeedModifier(); // Function Engine.MovementComponent.K2_GetMaxSpeedModifier
	bool IsExceedingMaxSpeed(float MaxSpeed); // Function Engine.MovementComponent.IsExceedingMaxSpeed
	struct FVector GetPlaneConstraintOrigin(); // Function Engine.MovementComponent.GetPlaneConstraintOrigin
	struct FVector GetPlaneConstraintNormal(); // Function Engine.MovementComponent.GetPlaneConstraintNormal
	enum class EPlaneConstraintAxisSetting GetPlaneConstraintAxisSetting(); // Function Engine.MovementComponent.GetPlaneConstraintAxisSetting
	struct APhysicsVolume* GetPhysicsVolume(); // Function Engine.MovementComponent.GetPhysicsVolume
	float GetMaxSpeed(); // Function Engine.MovementComponent.GetMaxSpeed
	float GetGravityZ(); // Function Engine.MovementComponent.GetGravityZ
	struct FVector ConstrainNormalToPlane(struct FVector Normal); // Function Engine.MovementComponent.ConstrainNormalToPlane
	struct FVector ConstrainLocationToPlane(struct FVector Location); // Function Engine.MovementComponent.ConstrainLocationToPlane
	struct FVector ConstrainDirectionToPlane(struct FVector Direction); // Function Engine.MovementComponent.ConstrainDirectionToPlane
}; 
 
 


//Class Engine.Font Size 464
// Inherited 40 bytes 
class UFont : public UObject
{

 public: 
	char pad_40[8];  // Offset: 40 Size: 8
	enum class EFontCacheType FontCacheType;  // Offset: 48 Size: 1
	char pad_49[7];  // Offset: 49 Size: 7
	struct TArray<struct FFontCharacter> Characters;  // Offset: 56 Size: 16
	struct TArray<struct UTexture2D*> Textures;  // Offset: 72 Size: 16
	int32_t IsRemapped;  // Offset: 88 Size: 4
	float EmScale;  // Offset: 92 Size: 4
	float Ascent;  // Offset: 96 Size: 4
	float Descent;  // Offset: 100 Size: 4
	float Leading;  // Offset: 104 Size: 4
	int32_t Kerning;  // Offset: 108 Size: 4
	struct FFontImportOptionsData ImportOptions;  // Offset: 112 Size: 176
	int32_t NumCharacters;  // Offset: 288 Size: 4
	char pad_292[4];  // Offset: 292 Size: 4
	struct TArray<int32_t> MaxCharHeight;  // Offset: 296 Size: 16
	float ScalingFactor;  // Offset: 312 Size: 4
	int32_t LegacyFontSize;  // Offset: 316 Size: 4
	struct FName LegacyFontName;  // Offset: 320 Size: 8
	struct FCompositeFont CompositeFont;  // Offset: 328 Size: 56
	char pad_384[80];  // Offset: 384 Size: 80



 // Functions 
 public:
}; 
 
 


//Class Engine.TimecodeProvider Size 48
// Inherited 40 bytes 
class UTimecodeProvider : public UObject
{

 public: 
	float FrameDelay;  // Offset: 40 Size: 4
	char pad_44[4];  // Offset: 44 Size: 4



 // Functions 
 public:
	struct FTimecode GetTimecode(); // Function Engine.TimecodeProvider.GetTimecode
	enum class ETimecodeProviderSynchronizationState GetSynchronizationState(); // Function Engine.TimecodeProvider.GetSynchronizationState
	struct FQualifiedFrameTime GetQualifiedFrameTime(); // Function Engine.TimecodeProvider.GetQualifiedFrameTime
	struct FFrameRate GetFrameRate(); // Function Engine.TimecodeProvider.GetFrameRate
	struct FTimecode GetDelayedTimecode(); // Function Engine.TimecodeProvider.GetDelayedTimecode
	struct FQualifiedFrameTime GetDelayedQualifiedFrameTime(); // Function Engine.TimecodeProvider.GetDelayedQualifiedFrameTime
	bool FetchTimecode(struct FQualifiedFrameTime& OutFrameTime); // Function Engine.TimecodeProvider.FetchTimecode
	void FetchAndUpdate(); // Function Engine.TimecodeProvider.FetchAndUpdate
}; 
 
 


//Class Engine.TargetPoint Size 544
// Inherited 544 bytes 
class ATargetPoint : public AActor
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.AssetImportData Size 40
// Inherited 40 bytes 
class UAssetImportData : public UObject
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.Polys Size 56
// Inherited 40 bytes 
class UPolys : public UObject
{

 public: 
	char pad_40[16];  // Offset: 40 Size: 16



 // Functions 
 public:
}; 
 
 


//Class Engine.AnimBoneCompressionCodec Size 56
// Inherited 40 bytes 
class UAnimBoneCompressionCodec : public UObject
{

 public: 
	struct FString Description;  // Offset: 40 Size: 16



 // Functions 
 public:
}; 
 
 


//Class Engine.EdGraphNode_Documentation Size 184
// Inherited 152 bytes 
class UEdGraphNode_Documentation : public UEdGraphNode
{

 public: 
	struct FString Link;  // Offset: 152 Size: 16
	struct FString Excerpt;  // Offset: 168 Size: 16



 // Functions 
 public:
}; 
 
 


//Class Engine.TextureRenderTargetCube Size 416
// Inherited 384 bytes 
class UTextureRenderTargetCube : public UTextureRenderTarget
{

 public: 
	int32_t SizeX;  // Offset: 384 Size: 4
	struct FLinearColor ClearColor;  // Offset: 388 Size: 16
	enum class EPixelFormat OverrideFormat;  // Offset: 404 Size: 1
	char bHDR : 1;  // Offset: 405 Size: 1
	char bForceLinearGamma : 1;  // Offset: 405 Size: 1
	char pad_405_1 : 6;  // Offset: 405 Size: 1
	char pad_406[11];  // Offset: 406 Size: 11



 // Functions 
 public:
}; 
 
 


//Class Engine.Light Size 560
// Inherited 544 bytes 
class ALight : public AActor
{

 public: 
	struct ULightComponent* LightComponent;  // Offset: 544 Size: 8
	char bEnabled : 1;  // Offset: 552 Size: 1
	char pad_552_1 : 7;  // Offset: 552 Size: 1
	char pad_553[8];  // Offset: 553 Size: 8



 // Functions 
 public:
	void ToggleEnabled(); // Function Engine.Light.ToggleEnabled
	void SetLightFunctionScale(struct FVector NewLightFunctionScale); // Function Engine.Light.SetLightFunctionScale
	void SetLightFunctionMaterial(struct UMaterialInterface* NewLightFunctionMaterial); // Function Engine.Light.SetLightFunctionMaterial
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance); // Function Engine.Light.SetLightFunctionFadeDistance
	void SetLightColor(struct FLinearColor NewLightColor); // Function Engine.Light.SetLightColor
	void SetEnabled(bool bSetEnabled); // Function Engine.Light.SetEnabled
	void SetCastShadows(bool bNewValue); // Function Engine.Light.SetCastShadows
	void SetBrightness(float NewBrightness); // Function Engine.Light.SetBrightness
	void SetAffectTranslucentLighting(bool bNewValue); // Function Engine.Light.SetAffectTranslucentLighting
	void OnRep_bEnabled(); // Function Engine.Light.OnRep_bEnabled
	bool IsEnabled(); // Function Engine.Light.IsEnabled
	struct FLinearColor GetLightColor(); // Function Engine.Light.GetLightColor
	float GetBrightness(); // Function Engine.Light.GetBrightness
}; 
 
 


//Class Engine.Info Size 544
// Inherited 544 bytes 
class AInfo : public AActor
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.GameModeBase Size 704
// Inherited 544 bytes 
class AGameModeBase : public AInfo
{

 public: 
	struct FString OptionsString;  // Offset: 544 Size: 16
	AGameSession* GameSessionClass;  // Offset: 560 Size: 8
	AGameStateBase* GameStateClass;  // Offset: 568 Size: 8
	APlayerController* PlayerControllerClass;  // Offset: 576 Size: 8
	APlayerState* PlayerStateClass;  // Offset: 584 Size: 8
	AHUD* HUDClass;  // Offset: 592 Size: 8
	APawn* DefaultPawnClass;  // Offset: 600 Size: 8
	ASpectatorPawn* SpectatorClass;  // Offset: 608 Size: 8
	APlayerController* ReplaySpectatorPlayerControllerClass;  // Offset: 616 Size: 8
	AServerStatReplicator* ServerStatReplicatorClass;  // Offset: 624 Size: 8
	struct AGameSession* GameSession;  // Offset: 632 Size: 8
	struct AGameStateBase* GameState;  // Offset: 640 Size: 8
	struct AServerStatReplicator* ServerStatReplicator;  // Offset: 648 Size: 8
	struct FText DefaultPlayerName;  // Offset: 656 Size: 24
	char bUseSeamlessTravel : 1;  // Offset: 680 Size: 1
	char bStartPlayersAsSpectators : 1;  // Offset: 680 Size: 1
	char bPauseable : 1;  // Offset: 680 Size: 1
	char pad_680_1 : 5;  // Offset: 680 Size: 1
	char pad_681[24];  // Offset: 681 Size: 24



 // Functions 
 public:
	void StartPlay(); // Function Engine.GameModeBase.StartPlay
	struct APawn* SpawnDefaultPawnFor(struct AController* NewPlayer, struct AActor* StartSpot); // Function Engine.GameModeBase.SpawnDefaultPawnFor
	struct APawn* SpawnDefaultPawnAtTransform(struct AController* NewPlayer, struct FTransform& SpawnTransform); // Function Engine.GameModeBase.SpawnDefaultPawnAtTransform
	bool ShouldReset(struct AActor* ActorToReset); // Function Engine.GameModeBase.ShouldReset
	void ReturnToMainMenuHost(); // Function Engine.GameModeBase.ReturnToMainMenuHost
	void RestartPlayerAtTransform(struct AController* NewPlayer, struct FTransform& SpawnTransform); // Function Engine.GameModeBase.RestartPlayerAtTransform
	void RestartPlayerAtPlayerStart(struct AController* NewPlayer, struct AActor* StartSpot); // Function Engine.GameModeBase.RestartPlayerAtPlayerStart
	void RestartPlayer(struct AController* NewPlayer); // Function Engine.GameModeBase.RestartPlayer
	void ResetLevel(); // Function Engine.GameModeBase.ResetLevel
	bool PlayerCanRestart(struct APlayerController* Player); // Function Engine.GameModeBase.PlayerCanRestart
	bool MustSpectate(struct APlayerController* NewPlayerController); // Function Engine.GameModeBase.MustSpectate
	void K2_PostLogin(struct APlayerController* NewPlayer); // Function Engine.GameModeBase.K2_PostLogin
	void K2_OnSwapPlayerControllers(struct APlayerController* OldPC, struct APlayerController* NewPC); // Function Engine.GameModeBase.K2_OnSwapPlayerControllers
	void K2_OnRestartPlayer(struct AController* NewPlayer); // Function Engine.GameModeBase.K2_OnRestartPlayer
	void K2_OnLogout(struct AController* ExitingController); // Function Engine.GameModeBase.K2_OnLogout
	void K2_OnChangeName(struct AController* Other, struct FString NewName, bool bNameChange); // Function Engine.GameModeBase.K2_OnChangeName
	struct AActor* K2_FindPlayerStart(struct AController* Player, struct FString IncomingName); // Function Engine.GameModeBase.K2_FindPlayerStart
	void InitStartSpot(struct AActor* StartSpot, struct AController* NewPlayer); // Function Engine.GameModeBase.InitStartSpot
	void InitializeHUDForPlayer(struct APlayerController* NewPlayer); // Function Engine.GameModeBase.InitializeHUDForPlayer
	bool HasMatchStarted(); // Function Engine.GameModeBase.HasMatchStarted
	bool HasMatchEnded(); // Function Engine.GameModeBase.HasMatchEnded
	void HandleStartingNewPlayer(struct APlayerController* NewPlayer); // Function Engine.GameModeBase.HandleStartingNewPlayer
	int32_t GetNumSpectators(); // Function Engine.GameModeBase.GetNumSpectators
	int32_t GetNumPlayers(); // Function Engine.GameModeBase.GetNumPlayers
	UObject* GetDefaultPawnClassForController(struct AController* InController); // Function Engine.GameModeBase.GetDefaultPawnClassForController
	struct AActor* FindPlayerStart(struct AController* Player, struct FString IncomingName); // Function Engine.GameModeBase.FindPlayerStart
	struct AActor* ChoosePlayerStart(struct AController* Player); // Function Engine.GameModeBase.ChoosePlayerStart
	void ChangeName(struct AController* Controller, struct FString NewName, bool bNameChange); // Function Engine.GameModeBase.ChangeName
	bool CanSpectate(struct APlayerController* Viewer, struct APlayerState* ViewTarget); // Function Engine.GameModeBase.CanSpectate
}; 
 
 


//Class Engine.SoundNodeSwitch Size 80
// Inherited 72 bytes 
class USoundNodeSwitch : public USoundNode
{

 public: 
	struct FName IntParameterName;  // Offset: 72 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionDecalLifetimeOpacity Size 64
// Inherited 64 bytes 
class UMaterialExpressionDecalLifetimeOpacity : public UMaterialExpression
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.AnimMetaData Size 40
// Inherited 40 bytes 
class UAnimMetaData : public UObject
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.InstancedStaticMeshComponent Size 1488
// Inherited 1312 bytes 
class UInstancedStaticMeshComponent : public UStaticMeshComponent
{

 public: 
	struct TArray<struct FInstancedStaticMeshInstanceData> PerInstanceSMData;  // Offset: 1304 Size: 16
	int32_t NumCustomDataFloats;  // Offset: 1320 Size: 4
	struct TArray<float> PerInstanceSMCustomData;  // Offset: 1328 Size: 16
	int32_t InstancingRandomSeed;  // Offset: 1344 Size: 4
	float LODScaleFactor;  // Offset: 1348 Size: 4
	char pad_1356_1 : 7;  // Offset: 1356 Size: 1
	bool bUseFullPrecision : 1;  // Offset: 1352 Size: 1
	int32_t InstanceStartCullDistance;  // Offset: 1356 Size: 4
	int32_t InstanceEndCullDistance;  // Offset: 1360 Size: 4
	char pad_1365[3];  // Offset: 1365 Size: 3
	struct TArray<int32_t> InstanceReorderTable;  // Offset: 1368 Size: 16
	char pad_1384[72];  // Offset: 1384 Size: 72
	int32_t NumPendingLightmaps;  // Offset: 1456 Size: 4
	char pad_1460[4];  // Offset: 1460 Size: 4
	struct TArray<struct FInstancedStaticMeshMappingInfo> CachedMappings;  // Offset: 1464 Size: 16
	char pad_1480[8];  // Offset: 1480 Size: 8



 // Functions 
 public:
	bool UpdateInstanceTransform(int32_t InstanceIndex, struct FTransform& NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport); // Function Engine.InstancedStaticMeshComponent.UpdateInstanceTransform
	bool SetCustomDataValue(int32_t InstanceIndex, int32_t CustomDataIndex, float CustomDataValue, bool bMarkRenderStateDirty); // Function Engine.InstancedStaticMeshComponent.SetCustomDataValue
	void SetCullDistances(int32_t StartCullDistance, int32_t EndCullDistance); // Function Engine.InstancedStaticMeshComponent.SetCullDistances
	bool RemoveInstance(int32_t InstanceIndex); // Function Engine.InstancedStaticMeshComponent.RemoveInstance
	bool GetInstanceTransform(int32_t InstanceIndex, struct FTransform& OutInstanceTransform, bool bWorldSpace); // Function Engine.InstancedStaticMeshComponent.GetInstanceTransform
	struct TArray<int32_t> GetInstancesOverlappingSphere(struct FVector& Center, float Radius, bool bSphereInWorldSpace); // Function Engine.InstancedStaticMeshComponent.GetInstancesOverlappingSphere
	struct TArray<int32_t> GetInstancesOverlappingBox(struct FBox& Box, bool bBoxInWorldSpace); // Function Engine.InstancedStaticMeshComponent.GetInstancesOverlappingBox
	int32_t GetInstanceCount(); // Function Engine.InstancedStaticMeshComponent.GetInstanceCount
	void ClearInstances(); // Function Engine.InstancedStaticMeshComponent.ClearInstances
	bool BatchUpdateInstancesTransforms(int32_t StartInstanceIndex, struct TArray<struct FTransform>& NewInstancesTransforms, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport); // Function Engine.InstancedStaticMeshComponent.BatchUpdateInstancesTransforms
	bool BatchUpdateInstancesTransform(int32_t StartInstanceIndex, int32_t NumInstances, struct FTransform& NewInstancesTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport); // Function Engine.InstancedStaticMeshComponent.BatchUpdateInstancesTransform
	int32_t AddInstanceWorldSpace(struct FTransform& WorldTransform); // Function Engine.InstancedStaticMeshComponent.AddInstanceWorldSpace
	struct TArray<int32_t> AddInstances(struct TArray<struct FTransform>& InstanceTransforms, bool bShouldReturnIndices); // Function Engine.InstancedStaticMeshComponent.AddInstances
	int32_t AddInstance(struct FTransform& InstanceTransform); // Function Engine.InstancedStaticMeshComponent.AddInstance
}; 
 
 


//Class Engine.SphereReflectionCapture Size 560
// Inherited 552 bytes 
class ASphereReflectionCapture : public AReflectionCapture
{

 public: 
	struct UDrawSphereComponent* DrawCaptureRadius;  // Offset: 552 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.EngineSubsystem Size 48
// Inherited 48 bytes 
class UEngineSubsystem : public UDynamicSubsystem
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionQualitySwitch Size 168
// Inherited 64 bytes 
class UMaterialExpressionQualitySwitch : public UMaterialExpression
{

 public: 
	struct FExpressionInput Default;  // Offset: 64 Size: 20
	struct FExpressionInput Inputs[4];  // Offset: 84 Size: 80
	char pad_164[4];  // Offset: 164 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleCollisionGPU Size 168
// Inherited 48 bytes 
class UParticleModuleCollisionGPU : public UParticleModuleCollisionBase
{

 public: 
	struct FRawDistributionFloat Resilience;  // Offset: 48 Size: 48
	struct FRawDistributionFloat ResilienceScaleOverLife;  // Offset: 96 Size: 48
	float Friction;  // Offset: 144 Size: 4
	float RandomSpread;  // Offset: 148 Size: 4
	float RandomDistribution;  // Offset: 152 Size: 4
	float RadiusScale;  // Offset: 156 Size: 4
	float RadiusBias;  // Offset: 160 Size: 4
	enum class EParticleCollisionResponse Response;  // Offset: 164 Size: 1
	enum class EParticleCollisionMode CollisionMode;  // Offset: 165 Size: 1
	char pad_166[2];  // Offset: 166 Size: 2



 // Functions 
 public:
}; 
 
 


//Class Engine.InterpTrackInstVectorProp Size 104
// Inherited 80 bytes 
class UInterpTrackInstVectorProp : public UInterpTrackInstProperty
{

 public: 
	char pad_80[8];  // Offset: 80 Size: 8
	struct FVector ResetVector;  // Offset: 88 Size: 12
	char pad_100[4];  // Offset: 100 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialParameterCollection Size 112
// Inherited 40 bytes 
class UMaterialParameterCollection : public UObject
{

 public: 
	struct FGuid StateId;  // Offset: 40 Size: 16
	struct TArray<struct FCollectionScalarParameter> ScalarParameters;  // Offset: 56 Size: 16
	struct TArray<struct FCollectionVectorParameter> VectorParameters;  // Offset: 72 Size: 16
	char pad_88[24];  // Offset: 88 Size: 24



 // Functions 
 public:
}; 
 
 


//Class Engine.CurveVector Size 432
// Inherited 48 bytes 
class UCurveVector : public UCurveBase
{

 public: 
	struct FRichCurve FloatCurves[3];  // Offset: 48 Size: 384



 // Functions 
 public:
	struct FVector GetVectorValue(float InTime); // Function Engine.CurveVector.GetVectorValue
}; 
 
 


//Class Engine.MaterialExpressionPrecomputedAOMask Size 64
// Inherited 64 bytes 
class UMaterialExpressionPrecomputedAOMask : public UMaterialExpression
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.CameraShakePattern Size 40
// Inherited 40 bytes 
class UCameraShakePattern : public UObject
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpression Size 64
// Inherited 40 bytes 
class UMaterialExpression : public UObject
{

 public: 
	struct UMaterial* Material;  // Offset: 40 Size: 8
	struct UMaterialFunction* Function;  // Offset: 48 Size: 8
	char bIsParameterExpression : 1;  // Offset: 56 Size: 1
	char pad_56_1 : 7;  // Offset: 56 Size: 1
	char pad_57[8];  // Offset: 57 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.SaveGame Size 40
// Inherited 40 bytes 
class USaveGame : public UObject
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.GameStateBase Size 624
// Inherited 544 bytes 
class AGameStateBase : public AInfo
{

 public: 
	AGameModeBase* GameModeClass;  // Offset: 544 Size: 8
	struct AGameModeBase* AuthorityGameMode;  // Offset: 552 Size: 8
	ASpectatorPawn* SpectatorClass;  // Offset: 560 Size: 8
	struct TArray<struct APlayerState*> PlayerArray;  // Offset: 568 Size: 16
	char pad_584_1 : 7;  // Offset: 584 Size: 1
	bool bReplicatedHasBegunPlay : 1;  // Offset: 584 Size: 1
	char pad_585[3];  // Offset: 585 Size: 3
	float ReplicatedWorldTimeSeconds;  // Offset: 588 Size: 4
	float ServerWorldTimeSecondsDelta;  // Offset: 592 Size: 4
	float ServerWorldTimeSecondsUpdateFrequency;  // Offset: 596 Size: 4
	char pad_600[24];  // Offset: 600 Size: 24



 // Functions 
 public:
	void OnRep_SpectatorClass(); // Function Engine.GameStateBase.OnRep_SpectatorClass
	void OnRep_ReplicatedWorldTimeSeconds(); // Function Engine.GameStateBase.OnRep_ReplicatedWorldTimeSeconds
	void OnRep_ReplicatedHasBegunPlay(); // Function Engine.GameStateBase.OnRep_ReplicatedHasBegunPlay
	void OnRep_GameModeClass(); // Function Engine.GameStateBase.OnRep_GameModeClass
	bool HasMatchStarted(); // Function Engine.GameStateBase.HasMatchStarted
	bool HasMatchEnded(); // Function Engine.GameStateBase.HasMatchEnded
	bool HasBegunPlay(); // Function Engine.GameStateBase.HasBegunPlay
	float GetServerWorldTimeSeconds(); // Function Engine.GameStateBase.GetServerWorldTimeSeconds
	float GetPlayerStartTime(struct AController* Controller); // Function Engine.GameStateBase.GetPlayerStartTime
	float GetPlayerRespawnDelay(struct AController* Controller); // Function Engine.GameStateBase.GetPlayerRespawnDelay
}; 
 
 


//Class Engine.AnimNotify_PauseClothingSimulation Size 56
// Inherited 56 bytes 
class UAnimNotify_PauseClothingSimulation : public UAnimNotify
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.AssetUserData Size 40
// Inherited 40 bytes 
class UAssetUserData : public UObject
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.BoneReferenceSkeletonProvider Size 40
// Inherited 40 bytes 
class UBoneReferenceSkeletonProvider : public UInterface
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionTextureBase Size 72
// Inherited 64 bytes 
class UMaterialExpressionTextureBase : public UMaterialExpression
{

 public: 
	struct UTexture* Texture;  // Offset: 64 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionScreenPosition Size 64
// Inherited 64 bytes 
class UMaterialExpressionScreenPosition : public UMaterialExpression
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.BlueprintCore Size 80
// Inherited 40 bytes 
class UBlueprintCore : public UObject
{

 public: 
	UObject* SkeletonGeneratedClass;  // Offset: 40 Size: 8
	UObject* GeneratedClass;  // Offset: 48 Size: 8
	char pad_56_1 : 7;  // Offset: 56 Size: 1
	bool bLegacyNeedToPurgeSkelRefs : 1;  // Offset: 56 Size: 1
	char pad_57[3];  // Offset: 57 Size: 3
	struct FGuid BlueprintGuid;  // Offset: 60 Size: 16
	char pad_76[4];  // Offset: 76 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionParticleMotionBlurFade Size 64
// Inherited 64 bytes 
class UMaterialExpressionParticleMotionBlurFade : public UMaterialExpression
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.Pawn Size 640
// Inherited 544 bytes 
class APawn : public AActor
{

 public: 
	char pad_544[8];  // Offset: 544 Size: 8
	char bUseControllerRotationPitch : 1;  // Offset: 552 Size: 1
	char bUseControllerRotationYaw : 1;  // Offset: 552 Size: 1
	char bUseControllerRotationRoll : 1;  // Offset: 552 Size: 1
	char bCanAffectNavigationGeneration : 1;  // Offset: 552 Size: 1
	char pad_552_1 : 4;  // Offset: 552 Size: 1
	char pad_553[4];  // Offset: 553 Size: 4
	float BaseEyeHeight;  // Offset: 556 Size: 4
	enum class EAutoReceiveInput AutoPossessPlayer;  // Offset: 560 Size: 1
	enum class EAutoPossessAI AutoPossessAI;  // Offset: 561 Size: 1
	char RemoteViewPitch;  // Offset: 562 Size: 1
	char pad_563[5];  // Offset: 563 Size: 5
	AController* AIControllerClass;  // Offset: 568 Size: 8
	struct APlayerState* PlayerState;  // Offset: 576 Size: 8
	char pad_584[8];  // Offset: 584 Size: 8
	struct AController* LastHitBy;  // Offset: 592 Size: 8
	struct AController* Controller;  // Offset: 600 Size: 8
	char pad_608[4];  // Offset: 608 Size: 4
	struct FVector ControlInputVector;  // Offset: 612 Size: 12
	struct FVector LastControlInputVector;  // Offset: 624 Size: 12
	char pad_636[4];  // Offset: 636 Size: 4



 // Functions 
 public:
	void SpawnDefaultController(); // Function Engine.Pawn.SpawnDefaultController
	void SetCanAffectNavigationGeneration(bool bNewValue, bool bForceUpdate); // Function Engine.Pawn.SetCanAffectNavigationGeneration
	void ReceiveUnpossessed(struct AController* OldController); // Function Engine.Pawn.ReceiveUnpossessed
	void ReceivePossessed(struct AController* NewController); // Function Engine.Pawn.ReceivePossessed
	void PawnMakeNoise(float Loudness, struct FVector NoiseLocation, bool bUseNoiseMakerLocation, struct AActor* NoiseMaker); // Function Engine.Pawn.PawnMakeNoise
	void OnRep_PlayerState(); // Function Engine.Pawn.OnRep_PlayerState
	void OnRep_Controller(); // Function Engine.Pawn.OnRep_Controller
	void LaunchPawn(struct FVector LaunchVelocity, bool bXYOverride, bool bZOverride); // Function Engine.Pawn.LaunchPawn
	struct FVector K2_GetMovementInputVector(); // Function Engine.Pawn.K2_GetMovementInputVector
	bool IsPlayerControlled(); // Function Engine.Pawn.IsPlayerControlled
	bool IsPawnControlled(); // Function Engine.Pawn.IsPawnControlled
	bool IsMoveInputIgnored(); // Function Engine.Pawn.IsMoveInputIgnored
	bool IsLocallyControlled(); // Function Engine.Pawn.IsLocallyControlled
	bool IsControlled(); // Function Engine.Pawn.IsControlled
	bool IsBotControlled(); // Function Engine.Pawn.IsBotControlled
	struct FVector GetPendingMovementInputVector(); // Function Engine.Pawn.GetPendingMovementInputVector
	struct FVector GetNavAgentLocation(); // Function Engine.Pawn.GetNavAgentLocation
	struct UPawnMovementComponent* GetMovementComponent(); // Function Engine.Pawn.GetMovementComponent
	struct AActor* GetMovementBaseActor(struct APawn* Pawn); // Function Engine.Pawn.GetMovementBaseActor
	struct FVector GetLastMovementInputVector(); // Function Engine.Pawn.GetLastMovementInputVector
	struct FRotator GetControlRotation(); // Function Engine.Pawn.GetControlRotation
	struct AController* GetController(); // Function Engine.Pawn.GetController
	struct FRotator GetBaseAimRotation(); // Function Engine.Pawn.GetBaseAimRotation
	void DetachFromControllerPendingDestroy(); // Function Engine.Pawn.DetachFromControllerPendingDestroy
	struct FVector ConsumeMovementInputVector(); // Function Engine.Pawn.ConsumeMovementInputVector
	void AddMovementInput(struct FVector WorldDirection, float ScaleValue, bool bForce); // Function Engine.Pawn.AddMovementInput
	void AddControllerYawInput(float Val); // Function Engine.Pawn.AddControllerYawInput
	void AddControllerRollInput(float Val); // Function Engine.Pawn.AddControllerRollInput
	void AddControllerPitchInput(float Val); // Function Engine.Pawn.AddControllerPitchInput
}; 
 
 


//Class Engine.Character Size 1216
// Inherited 640 bytes 
class ACharacter : public APawn
{

 public: 
	struct USkeletalMeshComponent* Mesh;  // Offset: 640 Size: 8
	struct UCharacterMovementComponent* CharacterMovement;  // Offset: 648 Size: 8
	struct UCapsuleComponent* CapsuleComponent;  // Offset: 656 Size: 8
	struct FBasedMovementInfo BasedMovement;  // Offset: 664 Size: 48
	struct FBasedMovementInfo ReplicatedBasedMovement;  // Offset: 712 Size: 48
	float AnimRootMotionTranslationScale;  // Offset: 760 Size: 4
	struct FVector BaseTranslationOffset;  // Offset: 764 Size: 12
	char pad_776[8];  // Offset: 776 Size: 8
	struct FQuat BaseRotationOffset;  // Offset: 784 Size: 16
	float ReplicatedServerLastTransformUpdateTimeStamp;  // Offset: 800 Size: 4
	float ReplayLastTransformUpdateTimeStamp;  // Offset: 804 Size: 4
	char ReplicatedMovementMode;  // Offset: 808 Size: 1
	char pad_809_1 : 7;  // Offset: 809 Size: 1
	bool bInBaseReplication : 1;  // Offset: 809 Size: 1
	char pad_810[2];  // Offset: 810 Size: 2
	float CrouchedEyeHeight;  // Offset: 812 Size: 4
	char bIsCrouched : 1;  // Offset: 816 Size: 1
	char bProxyIsJumpForceApplied : 1;  // Offset: 816 Size: 1
	char bPressedJump : 1;  // Offset: 816 Size: 1
	char bClientUpdating : 1;  // Offset: 816 Size: 1
	char bClientWasFalling : 1;  // Offset: 816 Size: 1
	char bClientResimulateRootMotion : 1;  // Offset: 816 Size: 1
	char bClientResimulateRootMotionSources : 1;  // Offset: 816 Size: 1
	char bSimGravityDisabled : 1;  // Offset: 816 Size: 1
	char bClientCheckEncroachmentOnNetUpdate : 1;  // Offset: 817 Size: 1
	char bServerMoveIgnoreRootMotion : 1;  // Offset: 817 Size: 1
	char bWasJumping : 1;  // Offset: 817 Size: 1
	char pad_817_1 : 5;  // Offset: 817 Size: 1
	char pad_818[3];  // Offset: 818 Size: 3
	float JumpKeyHoldTime;  // Offset: 820 Size: 4
	float JumpForceTimeRemaining;  // Offset: 824 Size: 4
	float ProxyJumpForceStartedTime;  // Offset: 828 Size: 4
	float JumpMaxHoldTime;  // Offset: 832 Size: 4
	int32_t JumpMaxCount;  // Offset: 836 Size: 4
	int32_t JumpCurrentCount;  // Offset: 840 Size: 4
	int32_t JumpCurrentCountPreJump;  // Offset: 844 Size: 4
	char pad_848[8];  // Offset: 848 Size: 8
	struct FMulticastInlineDelegate OnReachedJumpApex;  // Offset: 856 Size: 16
	char pad_872[16];  // Offset: 872 Size: 16
	struct FMulticastInlineDelegate MovementModeChangedDelegate;  // Offset: 888 Size: 16
	struct FMulticastInlineDelegate OnCharacterMovementUpdated;  // Offset: 904 Size: 16
	struct FRootMotionSourceGroup SavedRootMotion;  // Offset: 920 Size: 56
	struct FRootMotionMovementParams ClientRootMotionParams;  // Offset: 976 Size: 64
	struct TArray<struct FSimulatedRootMotionReplicatedMove> RootMotionRepMoves;  // Offset: 1040 Size: 16
	struct FRepRootMotionMontage RepRootMotion;  // Offset: 1056 Size: 152
	char pad_1208[8];  // Offset: 1208 Size: 8



 // Functions 
 public:
	void UnCrouch(bool bClientSimulation); // Function Engine.Character.UnCrouch
	void StopJumping(); // Function Engine.Character.StopJumping
	void StopAnimMontage(struct UAnimMontage* AnimMontage); // Function Engine.Character.StopAnimMontage
	void ServerMovePacked(struct FCharacterServerMovePackedBits PackedBits); // Function Engine.Character.ServerMovePacked
	void ServerMoveOld(float OldTimeStamp, struct FVector_NetQuantize10 OldAccel, char OldMoveFlags); // Function Engine.Character.ServerMoveOld
	void ServerMoveNoBase(float Timestamp, struct FVector_NetQuantize10 InAccel, struct FVector_NetQuantize100 ClientLoc, char CompressedMoveFlags, char ClientRoll, uint32_t View, char ClientMovementMode); // Function Engine.Character.ServerMoveNoBase
	void ServerMoveDualNoBase(float TimeStamp0, struct FVector_NetQuantize10 InAccel0, char PendingFlags, uint32_t View0, float Timestamp, struct FVector_NetQuantize10 InAccel, struct FVector_NetQuantize100 ClientLoc, char NewFlags, char ClientRoll, uint32_t View, char ClientMovementMode); // Function Engine.Character.ServerMoveDualNoBase
	void ServerMoveDualHybridRootMotion(float TimeStamp0, struct FVector_NetQuantize10 InAccel0, char PendingFlags, uint32_t View0, float Timestamp, struct FVector_NetQuantize10 InAccel, struct FVector_NetQuantize100 ClientLoc, char NewFlags, char ClientRoll, uint32_t View, struct UPrimitiveComponent* ClientMovementBase, struct FName ClientBaseBoneName, char ClientMovementMode); // Function Engine.Character.ServerMoveDualHybridRootMotion
	void ServerMoveDual(float TimeStamp0, struct FVector_NetQuantize10 InAccel0, char PendingFlags, uint32_t View0, float Timestamp, struct FVector_NetQuantize10 InAccel, struct FVector_NetQuantize100 ClientLoc, char NewFlags, char ClientRoll, uint32_t View, struct UPrimitiveComponent* ClientMovementBase, struct FName ClientBaseBoneName, char ClientMovementMode); // Function Engine.Character.ServerMoveDual
	void ServerMove(float Timestamp, struct FVector_NetQuantize10 InAccel, struct FVector_NetQuantize100 ClientLoc, char CompressedMoveFlags, char ClientRoll, uint32_t View, struct UPrimitiveComponent* ClientMovementBase, struct FName ClientBaseBoneName, char ClientMovementMode); // Function Engine.Character.ServerMove
	void RootMotionDebugClientPrintOnScreen(struct FString inString); // Function Engine.Character.RootMotionDebugClientPrintOnScreen
	float PlayAnimMontage(struct UAnimMontage* AnimMontage, float InPlayRate, struct FName StartSectionName); // Function Engine.Character.PlayAnimMontage
	void OnWalkingOffLedge(struct FVector& PreviousFloorImpactNormal, struct FVector& PreviousFloorContactNormal, struct FVector& PreviousLocation, float TimeDelta); // Function Engine.Character.OnWalkingOffLedge
	void OnRep_RootMotion(); // Function Engine.Character.OnRep_RootMotion
	void OnRep_ReplicatedBasedMovement(); // Function Engine.Character.OnRep_ReplicatedBasedMovement
	void OnRep_ReplayLastTransformUpdateTimeStamp(); // Function Engine.Character.OnRep_ReplayLastTransformUpdateTimeStamp
	void OnRep_IsCrouched(); // Function Engine.Character.OnRep_IsCrouched
	void OnLaunched(struct FVector LaunchVelocity, bool bXYOverride, bool bZOverride); // Function Engine.Character.OnLaunched
	void OnLanded(struct FHitResult& Hit); // Function Engine.Character.OnLanded
	void OnJumped(); // Function Engine.Character.OnJumped
	void LaunchCharacter(struct FVector LaunchVelocity, bool bXYOverride, bool bZOverride); // Function Engine.Character.LaunchCharacter
	void K2_UpdateCustomMovement(float DeltaTime); // Function Engine.Character.K2_UpdateCustomMovement
	void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust); // Function Engine.Character.K2_OnStartCrouch
	void K2_OnMovementModeChanged(enum class EMovementMode PrevMovementMode, enum class EMovementMode NewMovementMode, char PrevCustomMode, char NewCustomMode); // Function Engine.Character.K2_OnMovementModeChanged
	void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust); // Function Engine.Character.K2_OnEndCrouch
	void Jump(); // Function Engine.Character.Jump
	bool IsPlayingRootMotion(); // Function Engine.Character.IsPlayingRootMotion
	bool IsPlayingNetworkedRootMotionMontage(); // Function Engine.Character.IsPlayingNetworkedRootMotionMontage
	bool IsJumpProvidingForce(); // Function Engine.Character.IsJumpProvidingForce
	bool HasAnyRootMotion(); // Function Engine.Character.HasAnyRootMotion
	struct UAnimMontage* GetCurrentMontage(); // Function Engine.Character.GetCurrentMontage
	struct FVector GetBaseTranslationOffset(); // Function Engine.Character.GetBaseTranslationOffset
	struct FRotator GetBaseRotationOffsetRotator(); // Function Engine.Character.GetBaseRotationOffsetRotator
	float GetAnimRootMotionTranslationScale(); // Function Engine.Character.GetAnimRootMotionTranslationScale
	void Crouch(bool bClientSimulation); // Function Engine.Character.Crouch
	void ClientVeryShortAdjustPosition(float Timestamp, struct FVector NewLoc, struct UPrimitiveComponent* NewBase, struct FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, char ServerMovementMode); // Function Engine.Character.ClientVeryShortAdjustPosition
	void ClientMoveResponsePacked(struct FCharacterMoveResponsePackedBits PackedBits); // Function Engine.Character.ClientMoveResponsePacked
	void ClientCheatWalk(); // Function Engine.Character.ClientCheatWalk
	void ClientCheatGhost(); // Function Engine.Character.ClientCheatGhost
	void ClientCheatFly(); // Function Engine.Character.ClientCheatFly
	void ClientAdjustRootMotionSourcePosition(float Timestamp, struct FRootMotionSourceGroup ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, struct FVector ServerLoc, struct FVector_NetQuantizeNormal ServerRotation, float ServerVelZ, struct UPrimitiveComponent* ServerBase, struct FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, char ServerMovementMode); // Function Engine.Character.ClientAdjustRootMotionSourcePosition
	void ClientAdjustRootMotionPosition(float Timestamp, float ServerMontageTrackPosition, struct FVector ServerLoc, struct FVector_NetQuantizeNormal ServerRotation, float ServerVelZ, struct UPrimitiveComponent* ServerBase, struct FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, char ServerMovementMode); // Function Engine.Character.ClientAdjustRootMotionPosition
	void ClientAdjustPosition(float Timestamp, struct FVector NewLoc, struct FVector NewVel, struct UPrimitiveComponent* NewBase, struct FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, char ServerMovementMode); // Function Engine.Character.ClientAdjustPosition
	void ClientAckGoodMove(float Timestamp); // Function Engine.Character.ClientAckGoodMove
	bool CanJumpInternal(); // Function Engine.Character.CanJumpInternal
	bool CanJump(); // Function Engine.Character.CanJump
	bool CanCrouch(); // Function Engine.Character.CanCrouch
	void CacheInitialMeshOffset(struct FVector MeshRelativeLocation, struct FRotator MeshRelativeRotation); // Function Engine.Character.CacheInitialMeshOffset
}; 
 
 


//Class Engine.MaterialExpressionTangentCustomOutput Size 88
// Inherited 64 bytes 
class UMaterialExpressionTangentCustomOutput : public UMaterialExpressionCustomOutput
{

 public: 
	struct FExpressionInput Input;  // Offset: 64 Size: 20
	char pad_84[4];  // Offset: 84 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleTrailBase Size 48
// Inherited 48 bytes 
class UParticleModuleTrailBase : public UParticleModule
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionDistanceFieldGradient Size 88
// Inherited 64 bytes 
class UMaterialExpressionDistanceFieldGradient : public UMaterialExpression
{

 public: 
	struct FExpressionInput position;  // Offset: 64 Size: 20
	char pad_84[4];  // Offset: 84 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.SoundEffectSubmixPreset Size 104
// Inherited 104 bytes 
class USoundEffectSubmixPreset : public USoundEffectPreset
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.SoundNodeParamCrossFade Size 96
// Inherited 88 bytes 
class USoundNodeParamCrossFade : public USoundNodeDistanceCrossFade
{

 public: 
	struct FName ParamName;  // Offset: 88 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.LevelPartitionInterface Size 40
// Inherited 40 bytes 
class ULevelPartitionInterface : public UInterface
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.SplineComponent Size 1392
// Inherited 1136 bytes 
class USplineComponent : public UPrimitiveComponent
{

 public: 
	struct FSplineCurves SplineCurves;  // Offset: 1136 Size: 112
	struct FInterpCurveVector SplineInfo;  // Offset: 1248 Size: 24
	struct FInterpCurveQuat SplineRotInfo;  // Offset: 1272 Size: 24
	struct FInterpCurveVector SplineScaleInfo;  // Offset: 1296 Size: 24
	struct FInterpCurveFloat SplineReparamTable;  // Offset: 1320 Size: 24
	char pad_1344_1 : 7;  // Offset: 1344 Size: 1
	bool bAllowSplineEditingPerInstance : 1;  // Offset: 1344 Size: 1
	char pad_1345[3];  // Offset: 1345 Size: 3
	int32_t ReparamStepsPerSegment;  // Offset: 1348 Size: 4
	float Duration;  // Offset: 1352 Size: 4
	char pad_1356_1 : 7;  // Offset: 1356 Size: 1
	bool bStationaryEndpoints : 1;  // Offset: 1356 Size: 1
	char pad_1357_1 : 7;  // Offset: 1357 Size: 1
	bool bSplineHasBeenEdited : 1;  // Offset: 1357 Size: 1
	char pad_1358_1 : 7;  // Offset: 1358 Size: 1
	bool bModifiedByConstructionScript : 1;  // Offset: 1358 Size: 1
	char pad_1359_1 : 7;  // Offset: 1359 Size: 1
	bool bInputSplinePointsToConstructionScript : 1;  // Offset: 1359 Size: 1
	char pad_1360_1 : 7;  // Offset: 1360 Size: 1
	bool bDrawDebug : 1;  // Offset: 1360 Size: 1
	char pad_1361_1 : 7;  // Offset: 1361 Size: 1
	bool bClosedLoop : 1;  // Offset: 1361 Size: 1
	char pad_1362_1 : 7;  // Offset: 1362 Size: 1
	bool bLoopPositionOverride : 1;  // Offset: 1362 Size: 1
	char pad_1363[1];  // Offset: 1363 Size: 1
	float LoopPosition;  // Offset: 1364 Size: 4
	struct FVector DefaultUpVector;  // Offset: 1368 Size: 12
	char pad_1380[12];  // Offset: 1380 Size: 12



 // Functions 
 public:
	void UpdateSpline(); // Function Engine.SplineComponent.UpdateSpline
	void SetWorldLocationAtSplinePoint(int32_t PointIndex, struct FVector& InLocation); // Function Engine.SplineComponent.SetWorldLocationAtSplinePoint
	void SetUpVectorAtSplinePoint(int32_t PointIndex, struct FVector& InUpVector, enum class ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline); // Function Engine.SplineComponent.SetUpVectorAtSplinePoint
	void SetUnselectedSplineSegmentColor(struct FLinearColor& SegmentColor); // Function Engine.SplineComponent.SetUnselectedSplineSegmentColor
	void SetTangentsAtSplinePoint(int32_t PointIndex, struct FVector& InArriveTangent, struct FVector& InLeaveTangent, enum class ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline); // Function Engine.SplineComponent.SetTangentsAtSplinePoint
	void SetTangentColor(struct FLinearColor& TangentColor); // Function Engine.SplineComponent.SetTangentColor
	void SetTangentAtSplinePoint(int32_t PointIndex, struct FVector& InTangent, enum class ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline); // Function Engine.SplineComponent.SetTangentAtSplinePoint
	void SetSplineWorldPoints(struct TArray<struct FVector>& Points); // Function Engine.SplineComponent.SetSplineWorldPoints
	void SetSplinePointType(int32_t PointIndex, enum class ESplinePointType Type, bool bUpdateSpline); // Function Engine.SplineComponent.SetSplinePointType
	void SetSplinePoints(struct TArray<struct FVector>& Points, enum class ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline); // Function Engine.SplineComponent.SetSplinePoints
	void SetSplineLocalPoints(struct TArray<struct FVector>& Points); // Function Engine.SplineComponent.SetSplineLocalPoints
	void SetSelectedSplineSegmentColor(struct FLinearColor& SegmentColor); // Function Engine.SplineComponent.SetSelectedSplineSegmentColor
	void SetScaleAtSplinePoint(int32_t PointIndex, struct FVector& InScaleVector, bool bUpdateSpline); // Function Engine.SplineComponent.SetScaleAtSplinePoint
	void SetRotationAtSplinePoint(int32_t PointIndex, struct FRotator& InRotation, enum class ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline); // Function Engine.SplineComponent.SetRotationAtSplinePoint
	void SetLocationAtSplinePoint(int32_t PointIndex, struct FVector& InLocation, enum class ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline); // Function Engine.SplineComponent.SetLocationAtSplinePoint
	void SetDrawDebug(bool bShow); // Function Engine.SplineComponent.SetDrawDebug
	void SetDefaultUpVector(struct FVector& UpVector, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.SetDefaultUpVector
	void SetClosedLoopAtPosition(bool bInClosedLoop, float Key, bool bUpdateSpline); // Function Engine.SplineComponent.SetClosedLoopAtPosition
	void SetClosedLoop(bool bInClosedLoop, bool bUpdateSpline); // Function Engine.SplineComponent.SetClosedLoop
	void RemoveSplinePoint(int32_t Index, bool bUpdateSpline); // Function Engine.SplineComponent.RemoveSplinePoint
	bool IsClosedLoop(); // Function Engine.SplineComponent.IsClosedLoop
	struct FVector GetWorldTangentAtDistanceAlongSpline(float Distance); // Function Engine.SplineComponent.GetWorldTangentAtDistanceAlongSpline
	struct FRotator GetWorldRotationAtTime(float Time, bool bUseConstantVelocity); // Function Engine.SplineComponent.GetWorldRotationAtTime
	struct FRotator GetWorldRotationAtDistanceAlongSpline(float Distance); // Function Engine.SplineComponent.GetWorldRotationAtDistanceAlongSpline
	struct FVector GetWorldLocationAtTime(float Time, bool bUseConstantVelocity); // Function Engine.SplineComponent.GetWorldLocationAtTime
	struct FVector GetWorldLocationAtSplinePoint(int32_t PointIndex); // Function Engine.SplineComponent.GetWorldLocationAtSplinePoint
	struct FVector GetWorldLocationAtDistanceAlongSpline(float Distance); // Function Engine.SplineComponent.GetWorldLocationAtDistanceAlongSpline
	struct FVector GetWorldDirectionAtTime(float Time, bool bUseConstantVelocity); // Function Engine.SplineComponent.GetWorldDirectionAtTime
	struct FVector GetWorldDirectionAtDistanceAlongSpline(float Distance); // Function Engine.SplineComponent.GetWorldDirectionAtDistanceAlongSpline
	struct FVector GetVectorPropertyAtSplinePoint(int32_t Index, struct FName PropertyName); // Function Engine.SplineComponent.GetVectorPropertyAtSplinePoint
	struct FVector GetVectorPropertyAtSplineInputKey(float InKey, struct FName PropertyName); // Function Engine.SplineComponent.GetVectorPropertyAtSplineInputKey
	struct FVector GetUpVectorAtTime(float Time, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity); // Function Engine.SplineComponent.GetUpVectorAtTime
	struct FVector GetUpVectorAtSplinePoint(int32_t PointIndex, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetUpVectorAtSplinePoint
	struct FVector GetUpVectorAtSplineInputKey(float InKey, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetUpVectorAtSplineInputKey
	struct FVector GetUpVectorAtDistanceAlongSpline(float Distance, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetUpVectorAtDistanceAlongSpline
	struct FTransform GetTransformAtTime(float Time, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity, bool bUseScale); // Function Engine.SplineComponent.GetTransformAtTime
	struct FTransform GetTransformAtSplinePoint(int32_t PointIndex, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseScale); // Function Engine.SplineComponent.GetTransformAtSplinePoint
	struct FTransform GetTransformAtSplineInputKey(float InKey, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseScale); // Function Engine.SplineComponent.GetTransformAtSplineInputKey
	struct FTransform GetTransformAtDistanceAlongSpline(float Distance, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseScale); // Function Engine.SplineComponent.GetTransformAtDistanceAlongSpline
	struct FVector GetTangentAtTime(float Time, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity); // Function Engine.SplineComponent.GetTangentAtTime
	struct FVector GetTangentAtSplinePoint(int32_t PointIndex, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetTangentAtSplinePoint
	struct FVector GetTangentAtSplineInputKey(float InKey, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetTangentAtSplineInputKey
	struct FVector GetTangentAtDistanceAlongSpline(float Distance, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetTangentAtDistanceAlongSpline
	enum class ESplinePointType GetSplinePointType(int32_t PointIndex); // Function Engine.SplineComponent.GetSplinePointType
	float GetSplineLength(); // Function Engine.SplineComponent.GetSplineLength
	struct FVector GetScaleAtTime(float Time, bool bUseConstantVelocity); // Function Engine.SplineComponent.GetScaleAtTime
	struct FVector GetScaleAtSplinePoint(int32_t PointIndex); // Function Engine.SplineComponent.GetScaleAtSplinePoint
	struct FVector GetScaleAtSplineInputKey(float InKey); // Function Engine.SplineComponent.GetScaleAtSplineInputKey
	struct FVector GetScaleAtDistanceAlongSpline(float Distance); // Function Engine.SplineComponent.GetScaleAtDistanceAlongSpline
	struct FRotator GetRotationAtTime(float Time, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity); // Function Engine.SplineComponent.GetRotationAtTime
	struct FRotator GetRotationAtSplinePoint(int32_t PointIndex, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetRotationAtSplinePoint
	struct FRotator GetRotationAtSplineInputKey(float InKey, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetRotationAtSplineInputKey
	struct FRotator GetRotationAtDistanceAlongSpline(float Distance, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetRotationAtDistanceAlongSpline
	float GetRollAtTime(float Time, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity); // Function Engine.SplineComponent.GetRollAtTime
	float GetRollAtSplinePoint(int32_t PointIndex, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetRollAtSplinePoint
	float GetRollAtSplineInputKey(float InKey, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetRollAtSplineInputKey
	float GetRollAtDistanceAlongSpline(float Distance, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetRollAtDistanceAlongSpline
	struct FVector GetRightVectorAtTime(float Time, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity); // Function Engine.SplineComponent.GetRightVectorAtTime
	struct FVector GetRightVectorAtSplinePoint(int32_t PointIndex, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetRightVectorAtSplinePoint
	struct FVector GetRightVectorAtSplineInputKey(float InKey, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetRightVectorAtSplineInputKey
	struct FVector GetRightVectorAtDistanceAlongSpline(float Distance, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetRightVectorAtDistanceAlongSpline
	int32_t GetNumberOfSplineSegments(); // Function Engine.SplineComponent.GetNumberOfSplineSegments
	int32_t GetNumberOfSplinePoints(); // Function Engine.SplineComponent.GetNumberOfSplinePoints
	struct FVector GetLocationAtTime(float Time, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity); // Function Engine.SplineComponent.GetLocationAtTime
	struct FVector GetLocationAtSplinePoint(int32_t PointIndex, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetLocationAtSplinePoint
	struct FVector GetLocationAtSplineInputKey(float InKey, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetLocationAtSplineInputKey
	struct FVector GetLocationAtDistanceAlongSpline(float Distance, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetLocationAtDistanceAlongSpline
	void GetLocationAndTangentAtSplinePoint(int32_t PointIndex, struct FVector& Location, struct FVector& Tangent, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetLocationAndTangentAtSplinePoint
	void GetLocalLocationAndTangentAtSplinePoint(int32_t PointIndex, struct FVector& LocalLocation, struct FVector& LocalTangent); // Function Engine.SplineComponent.GetLocalLocationAndTangentAtSplinePoint
	struct FVector GetLeaveTangentAtSplinePoint(int32_t PointIndex, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetLeaveTangentAtSplinePoint
	float GetInputKeyAtDistanceAlongSpline(float Distance); // Function Engine.SplineComponent.GetInputKeyAtDistanceAlongSpline
	float GetFloatPropertyAtSplinePoint(int32_t Index, struct FName PropertyName); // Function Engine.SplineComponent.GetFloatPropertyAtSplinePoint
	float GetFloatPropertyAtSplineInputKey(float InKey, struct FName PropertyName); // Function Engine.SplineComponent.GetFloatPropertyAtSplineInputKey
	float GetDistanceAlongSplineAtSplinePoint(int32_t PointIndex); // Function Engine.SplineComponent.GetDistanceAlongSplineAtSplinePoint
	float GetDistanceAlongSplineAtSplineInputKey(float InKey); // Function Engine.SplineComponent.GetDistanceAlongSplineAtSplineInputKey
	struct FVector GetDirectionAtTime(float Time, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity); // Function Engine.SplineComponent.GetDirectionAtTime
	struct FVector GetDirectionAtSplinePoint(int32_t PointIndex, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetDirectionAtSplinePoint
	struct FVector GetDirectionAtSplineInputKey(float InKey, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetDirectionAtSplineInputKey
	struct FVector GetDirectionAtDistanceAlongSpline(float Distance, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetDirectionAtDistanceAlongSpline
	struct FVector GetDefaultUpVector(enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetDefaultUpVector
	struct FVector GetArriveTangentAtSplinePoint(int32_t PointIndex, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetArriveTangentAtSplinePoint
	struct FVector FindUpVectorClosestToWorldLocation(struct FVector& WorldLocation, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.FindUpVectorClosestToWorldLocation
	struct FTransform FindTransformClosestToWorldLocation(struct FVector& WorldLocation, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseScale); // Function Engine.SplineComponent.FindTransformClosestToWorldLocation
	struct FVector FindTangentClosestToWorldLocation(struct FVector& WorldLocation, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.FindTangentClosestToWorldLocation
	struct FVector FindScaleClosestToWorldLocation(struct FVector& WorldLocation); // Function Engine.SplineComponent.FindScaleClosestToWorldLocation
	struct FRotator FindRotationClosestToWorldLocation(struct FVector& WorldLocation, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.FindRotationClosestToWorldLocation
	float FindRollClosestToWorldLocation(struct FVector& WorldLocation, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.FindRollClosestToWorldLocation
	struct FVector FindRightVectorClosestToWorldLocation(struct FVector& WorldLocation, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.FindRightVectorClosestToWorldLocation
	struct FVector FindLocationClosestToWorldLocation(struct FVector& WorldLocation, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.FindLocationClosestToWorldLocation
	float FindInputKeyClosestToWorldLocation(struct FVector& WorldLocation); // Function Engine.SplineComponent.FindInputKeyClosestToWorldLocation
	struct FVector FindDirectionClosestToWorldLocation(struct FVector& WorldLocation, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.FindDirectionClosestToWorldLocation
	void ClearSplinePoints(bool bUpdateSpline); // Function Engine.SplineComponent.ClearSplinePoints
	void AddSplineWorldPoint(struct FVector& position); // Function Engine.SplineComponent.AddSplineWorldPoint
	void AddSplinePointAtIndex(struct FVector& position, int32_t Index, enum class ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline); // Function Engine.SplineComponent.AddSplinePointAtIndex
	void AddSplinePoint(struct FVector& position, enum class ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline); // Function Engine.SplineComponent.AddSplinePoint
	void AddSplineLocalPoint(struct FVector& position); // Function Engine.SplineComponent.AddSplineLocalPoint
	void AddPoints(struct TArray<struct FSplinePoint>& Points, bool bUpdateSpline); // Function Engine.SplineComponent.AddPoints
	void AddPoint(struct FSplinePoint& Point, bool bUpdateSpline); // Function Engine.SplineComponent.AddPoint
}; 
 
 


//Class Engine.CameraShakeBase Size 176
// Inherited 40 bytes 
class UCameraShakeBase : public UObject
{

 public: 
	char pad_40_1 : 7;  // Offset: 40 Size: 1
	bool bSingleInstance : 1;  // Offset: 40 Size: 1
	char pad_41[3];  // Offset: 41 Size: 3
	float ShakeScale;  // Offset: 44 Size: 4
	struct UCameraShakePattern* RootShakePattern;  // Offset: 48 Size: 8
	struct APlayerCameraManager* CameraManager;  // Offset: 56 Size: 8
	char pad_64[112];  // Offset: 64 Size: 112



 // Functions 
 public:
	void SetRootShakePattern(struct UCameraShakePattern* InPattern); // Function Engine.CameraShakeBase.SetRootShakePattern
	struct UCameraShakePattern* GetRootShakePattern(); // Function Engine.CameraShakeBase.GetRootShakePattern
}; 
 
 


//Class Engine.SplineMeshComponent Size 1456
// Inherited 1312 bytes 
class USplineMeshComponent : public UStaticMeshComponent
{

 public: 
	struct FSplineMeshParams SplineParams;  // Offset: 1312 Size: 88
	struct FVector SplineUpDir;  // Offset: 1400 Size: 12
	float SplineBoundaryMin;  // Offset: 1412 Size: 4
	struct FGuid CachedMeshBodySetupGuid;  // Offset: 1416 Size: 16
	struct UBodySetup* BodySetup;  // Offset: 1432 Size: 8
	float SplineBoundaryMax;  // Offset: 1440 Size: 4
	char bAllowSplineEditingPerInstance : 1;  // Offset: 1444 Size: 1
	char bSmoothInterpRollScale : 1;  // Offset: 1444 Size: 1
	char bMeshDirty : 1;  // Offset: 1444 Size: 1
	char pad_1444_1 : 5;  // Offset: 1444 Size: 1
	enum class ESplineMeshAxis ForwardAxis;  // Offset: 1445 Size: 1
	char pad_1446[2];  // Offset: 1446 Size: 2
	float VirtualTextureMainPassMaxDrawDistance;  // Offset: 1448 Size: 4
	char pad_1452[4];  // Offset: 1452 Size: 4



 // Functions 
 public:
	void UpdateMesh(); // Function Engine.SplineMeshComponent.UpdateMesh
	void SetStartTangent(struct FVector StartTangent, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetStartTangent
	void SetStartScale(struct FVector2D StartScale, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetStartScale
	void SetStartRoll(float StartRoll, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetStartRoll
	void SetStartPosition(struct FVector StartPos, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetStartPosition
	void SetStartOffset(struct FVector2D StartOffset, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetStartOffset
	void SetStartAndEnd(struct FVector StartPos, struct FVector StartTangent, struct FVector EndPos, struct FVector EndTangent, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetStartAndEnd
	void SetSplineUpDir(struct FVector& InSplineUpDir, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetSplineUpDir
	void SetForwardAxis(enum class ESplineMeshAxis InForwardAxis, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetForwardAxis
	void SetEndTangent(struct FVector EndTangent, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetEndTangent
	void SetEndScale(struct FVector2D EndScale, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetEndScale
	void SetEndRoll(float EndRoll, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetEndRoll
	void SetEndPosition(struct FVector EndPos, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetEndPosition
	void SetEndOffset(struct FVector2D EndOffset, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetEndOffset
	void SetBoundaryMin(float InBoundaryMin, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetBoundaryMin
	void SetBoundaryMax(float InBoundaryMax, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetBoundaryMax
	struct FVector GetStartTangent(); // Function Engine.SplineMeshComponent.GetStartTangent
	struct FVector2D GetStartScale(); // Function Engine.SplineMeshComponent.GetStartScale
	float GetStartRoll(); // Function Engine.SplineMeshComponent.GetStartRoll
	struct FVector GetStartPosition(); // Function Engine.SplineMeshComponent.GetStartPosition
	struct FVector2D GetStartOffset(); // Function Engine.SplineMeshComponent.GetStartOffset
	struct FVector GetSplineUpDir(); // Function Engine.SplineMeshComponent.GetSplineUpDir
	enum class ESplineMeshAxis GetForwardAxis(); // Function Engine.SplineMeshComponent.GetForwardAxis
	struct FVector GetEndTangent(); // Function Engine.SplineMeshComponent.GetEndTangent
	struct FVector2D GetEndScale(); // Function Engine.SplineMeshComponent.GetEndScale
	float GetEndRoll(); // Function Engine.SplineMeshComponent.GetEndRoll
	struct FVector GetEndPosition(); // Function Engine.SplineMeshComponent.GetEndPosition
	struct FVector2D GetEndOffset(); // Function Engine.SplineMeshComponent.GetEndOffset
	float GetBoundaryMin(); // Function Engine.SplineMeshComponent.GetBoundaryMin
	float GetBoundaryMax(); // Function Engine.SplineMeshComponent.GetBoundaryMax
}; 
 
 


//Class Engine.Commandlet Size 128
// Inherited 40 bytes 
class UCommandlet : public UObject
{

 public: 
	struct FString HelpDescription;  // Offset: 40 Size: 16
	struct FString HelpUsage;  // Offset: 56 Size: 16
	struct FString HelpWebLink;  // Offset: 72 Size: 16
	struct TArray<struct FString> HelpParamNames;  // Offset: 88 Size: 16
	struct TArray<struct FString> HelpParamDescriptions;  // Offset: 104 Size: 16
	char IsServer : 1;  // Offset: 120 Size: 1
	char IsClient : 1;  // Offset: 120 Size: 1
	char IsEditor : 1;  // Offset: 120 Size: 1
	char LogToConsole : 1;  // Offset: 120 Size: 1
	char ShowErrorCount : 1;  // Offset: 120 Size: 1
	char ShowProgress : 1;  // Offset: 120 Size: 1
	char pad_120_1 : 2;  // Offset: 120 Size: 1
	char pad_121[8];  // Offset: 121 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.AtmosphericFog Size 560
// Inherited 544 bytes 
class AAtmosphericFog : public AInfo
{

 public: 
	struct UAtmosphericFogComponent* AtmosphericFogComponent;  // Offset: 544 Size: 8
	struct UAtmosphericFogCacheComponent* AtmosphericFogCacheComponent;  // Offset: 552 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleTypeDataBeam2 Size 336
// Inherited 48 bytes 
class UParticleModuleTypeDataBeam2 : public UParticleModuleTypeDataBase
{

 public: 
	enum class EBeam2Method BeamMethod;  // Offset: 48 Size: 1
	char pad_49[3];  // Offset: 49 Size: 3
	int32_t TextureTile;  // Offset: 52 Size: 4
	float TextureTileDistance;  // Offset: 56 Size: 4
	int32_t Sheets;  // Offset: 60 Size: 4
	int32_t MaxBeamCount;  // Offset: 64 Size: 4
	float Speed;  // Offset: 68 Size: 4
	int32_t InterpolationPoints;  // Offset: 72 Size: 4
	char bAlwaysOn : 1;  // Offset: 76 Size: 1
	char pad_76_1 : 7;  // Offset: 76 Size: 1
	char pad_77[4];  // Offset: 77 Size: 4
	int32_t UpVectorStepSize;  // Offset: 80 Size: 4
	struct FName BranchParentName;  // Offset: 84 Size: 8
	char pad_92[4];  // Offset: 92 Size: 4
	struct FRawDistributionFloat Distance;  // Offset: 96 Size: 48
	enum class EBeamTaperMethod TaperMethod;  // Offset: 144 Size: 1
	char pad_145[7];  // Offset: 145 Size: 7
	struct FRawDistributionFloat TaperFactor;  // Offset: 152 Size: 48
	struct FRawDistributionFloat TaperScale;  // Offset: 200 Size: 48
	char RenderGeometry : 1;  // Offset: 248 Size: 1
	char RenderDirectLine : 1;  // Offset: 248 Size: 1
	char RenderLines : 1;  // Offset: 248 Size: 1
	char RenderTessellation : 1;  // Offset: 248 Size: 1
	char pad_248_1 : 4;  // Offset: 248 Size: 1
	char pad_249[88];  // Offset: 249 Size: 88



 // Functions 
 public:
}; 
 
 


//Class Engine.SkinnedMeshComponent Size 1760
// Inherited 1200 bytes 
class USkinnedMeshComponent : public UMeshComponent
{

 public: 
	struct USkeletalMesh* SkeletalMesh;  // Offset: 1200 Size: 8
	struct TWeakObjectPtr<USkinnedMeshComponent> MasterPoseComponent;  // Offset: 1208 Size: 8
	struct TArray<enum class ESkinCacheUsage> SkinCacheUsage;  // Offset: 1216 Size: 16
	struct TArray<struct FVertexOffsetUsage> VertexOffsetUsage;  // Offset: 1232 Size: 16
	char pad_1248[248];  // Offset: 1248 Size: 248
	struct UPhysicsAsset* PhysicsAssetOverride;  // Offset: 1496 Size: 8
	int32_t ForcedLodModel;  // Offset: 1504 Size: 4
	int32_t MinLodModel;  // Offset: 1508 Size: 4
	char pad_1512[8];  // Offset: 1512 Size: 8
	float StreamingDistanceMultiplier;  // Offset: 1520 Size: 4
	char pad_1524[12];  // Offset: 1524 Size: 12
	struct TArray<struct FSkelMeshComponentLODInfo> LODInfo;  // Offset: 1536 Size: 16
	char pad_1552[36];  // Offset: 1552 Size: 36
	enum class EVisibilityBasedAnimTickOption VisibilityBasedAnimTickOption;  // Offset: 1588 Size: 1
	char pad_1589[1];  // Offset: 1589 Size: 1
	char pad_1590_1 : 3;  // Offset: 1590 Size: 1
	char bOverrideMinLod : 1;  // Offset: 1590 Size: 1
	char bUseBoundsFromMasterPoseComponent : 1;  // Offset: 1590 Size: 1
	char bForceWireframe : 1;  // Offset: 1590 Size: 1
	char bDisplayBones : 1;  // Offset: 1590 Size: 1
	char bDisableMorphTarget : 1;  // Offset: 1590 Size: 1
	char bHideSkin : 1;  // Offset: 1591 Size: 1
	char bPerBoneMotionBlur : 1;  // Offset: 1591 Size: 1
	char bComponentUseFixedSkelBounds : 1;  // Offset: 1591 Size: 1
	char bConsiderAllBodiesForBounds : 1;  // Offset: 1591 Size: 1
	char bSyncAttachParentLOD : 1;  // Offset: 1591 Size: 1
	char bCanHighlightSelectedSections : 1;  // Offset: 1591 Size: 1
	char bRecentlyRendered : 1;  // Offset: 1591 Size: 1
	char bCastCapsuleDirectShadow : 1;  // Offset: 1591 Size: 1
	char bCastCapsuleIndirectShadow : 1;  // Offset: 1592 Size: 1
	char bCPUSkinning : 1;  // Offset: 1592 Size: 1
	char bEnableUpdateRateOptimizations : 1;  // Offset: 1592 Size: 1
	char bDisplayDebugUpdateRateOptimizations : 1;  // Offset: 1592 Size: 1
	char bRenderStatic : 1;  // Offset: 1592 Size: 1
	char bNoSkinning : 1;  // Offset: 1592 Size: 1
	char bPrepareSkinSnapshot : 1;  // Offset: 1592 Size: 1
	char bUseSkinSnapshot : 1;  // Offset: 1592 Size: 1
	char bIgnoreMasterPoseComponentLOD : 1;  // Offset: 1593 Size: 1
	char pad_1593_1 : 2;  // Offset: 1593 Size: 1
	char bCachedLocalBoundsUpToDate : 1;  // Offset: 1593 Size: 1
	char pad_1593_2 : 1;  // Offset: 1593 Size: 1
	char bSkinSnapshotDirty : 1;  // Offset: 1593 Size: 1
	char bForceMeshObjectUpdate : 1;  // Offset: 1593 Size: 1
	char pad_1593_3 : 1;  // Offset: 1593 Size: 1
	char pad_1594[3];  // Offset: 1594 Size: 3
	float CapsuleIndirectShadowMinVisibility;  // Offset: 1596 Size: 4
	char pad_1600[28];  // Offset: 1600 Size: 28
	struct FBoxSphereBounds CachedWorldSpaceBounds;  // Offset: 1628 Size: 28
	char pad_1656[8];  // Offset: 1656 Size: 8
	struct FMatrix CachedWorldToLocalTransform;  // Offset: 1664 Size: 64
	char pad_1728[32];  // Offset: 1728 Size: 32



 // Functions 
 public:
	void UnloadSkinWeightProfile(struct FName InProfileName); // Function Engine.SkinnedMeshComponent.UnloadSkinWeightProfile
	void UnHideBoneByName(struct FName BoneName); // Function Engine.SkinnedMeshComponent.UnHideBoneByName
	void TransformToBoneSpace(struct FName BoneName, struct FVector InPosition, struct FRotator InRotation, struct FVector& OutPosition, struct FRotator& OutRotation); // Function Engine.SkinnedMeshComponent.TransformToBoneSpace
	void TransformFromBoneSpace(struct FName BoneName, struct FVector InPosition, struct FRotator InRotation, struct FVector& OutPosition, struct FRotator& OutRotation); // Function Engine.SkinnedMeshComponent.TransformFromBoneSpace
	void ShowMaterialSection(int32_t MaterialID, int32_t SectionIndex, bool bShow, int32_t LODIndex); // Function Engine.SkinnedMeshComponent.ShowMaterialSection
	void ShowAllMaterialSections(int32_t LODIndex); // Function Engine.SkinnedMeshComponent.ShowAllMaterialSections
	void SetVertexOffsetUsage(int32_t LODIndex, int32_t Usage); // Function Engine.SkinnedMeshComponent.SetVertexOffsetUsage
	void SetVertexColorOverride_LinearColor(int32_t LODIndex, struct TArray<struct FLinearColor>& VertexColors); // Function Engine.SkinnedMeshComponent.SetVertexColorOverride_LinearColor
	void SetUseSkinSnapshot(bool bNewValue); // Function Engine.SkinnedMeshComponent.SetUseSkinSnapshot
	bool SetSkinWeightProfile(struct FName InProfileName); // Function Engine.SkinnedMeshComponent.SetSkinWeightProfile
	void SetSkinWeightOverride(int32_t LODIndex, struct TArray<struct FSkelMeshSkinWeightInfo>& SkinWeights); // Function Engine.SkinnedMeshComponent.SetSkinWeightOverride
	void SetSkeletalMesh(struct USkeletalMesh* NewMesh, bool bReinitPose); // Function Engine.SkinnedMeshComponent.SetSkeletalMesh
	void SetRenderStatic(bool bNewValue); // Function Engine.SkinnedMeshComponent.SetRenderStatic
	void SetPreSkinningOffsets(int32_t LODIndex, struct TArray<struct FVector> Offsets); // Function Engine.SkinnedMeshComponent.SetPreSkinningOffsets
	void SetPrepareSkinSnapshot(bool bNewValue); // Function Engine.SkinnedMeshComponent.SetPrepareSkinSnapshot
	void SetPostSkinningOffsets(int32_t LODIndex, struct TArray<struct FVector> Offsets); // Function Engine.SkinnedMeshComponent.SetPostSkinningOffsets
	void SetPhysicsAsset(struct UPhysicsAsset* NewPhysicsAsset, bool bForceReInit); // Function Engine.SkinnedMeshComponent.SetPhysicsAsset
	void SetNoSkinning(bool bNewValue); // Function Engine.SkinnedMeshComponent.SetNoSkinning
	void SetMinLOD(int32_t InNewMinLOD); // Function Engine.SkinnedMeshComponent.SetMinLOD
	void SetMasterPoseComponent(struct USkinnedMeshComponent* NewMasterBoneComponent, bool bForceUpdate); // Function Engine.SkinnedMeshComponent.SetMasterPoseComponent
	void SetForcedLOD(int32_t InNewForcedLOD); // Function Engine.SkinnedMeshComponent.SetForcedLOD
	void SetCastCapsuleIndirectShadow(bool bNewValue); // Function Engine.SkinnedMeshComponent.SetCastCapsuleIndirectShadow
	void SetCastCapsuleDirectShadow(bool bNewValue); // Function Engine.SkinnedMeshComponent.SetCastCapsuleDirectShadow
	void SetCapsuleIndirectShadowMinVisibility(float NewValue); // Function Engine.SkinnedMeshComponent.SetCapsuleIndirectShadowMinVisibility
	void MarkSkinSnapshotDirty(); // Function Engine.SkinnedMeshComponent.MarkSkinSnapshotDirty
	bool IsUsingSkinWeightProfile(); // Function Engine.SkinnedMeshComponent.IsUsingSkinWeightProfile
	bool IsUseSkinSnapshot(); // Function Engine.SkinnedMeshComponent.IsUseSkinSnapshot
	bool IsNoSkinning(); // Function Engine.SkinnedMeshComponent.IsNoSkinning
	bool IsMaterialSectionShown(int32_t MaterialID, int32_t LODIndex); // Function Engine.SkinnedMeshComponent.IsMaterialSectionShown
	bool IsBoneHiddenByName(struct FName BoneName); // Function Engine.SkinnedMeshComponent.IsBoneHiddenByName
	void HideBoneByName(struct FName BoneName, enum class EPhysBodyOp PhysBodyOption); // Function Engine.SkinnedMeshComponent.HideBoneByName
	int32_t GetVertexOffsetUsage(int32_t LODIndex); // Function Engine.SkinnedMeshComponent.GetVertexOffsetUsage
	bool GetTwistAndSwingAngleOfDeltaRotationFromRefPose(struct FName BoneName, float& OutTwistAngle, float& OutSwingAngle); // Function Engine.SkinnedMeshComponent.GetTwistAndSwingAngleOfDeltaRotationFromRefPose
	struct FName GetSocketBoneName(struct FName InSocketName); // Function Engine.SkinnedMeshComponent.GetSocketBoneName
	struct FVector GetRefPosePosition(int32_t BoneIndex); // Function Engine.SkinnedMeshComponent.GetRefPosePosition
	struct FName GetParentBone(struct FName BoneName); // Function Engine.SkinnedMeshComponent.GetParentBone
	int32_t GetNumLODs(); // Function Engine.SkinnedMeshComponent.GetNumLODs
	int32_t GetNumBones(); // Function Engine.SkinnedMeshComponent.GetNumBones
	int32_t GetForcedLOD(); // Function Engine.SkinnedMeshComponent.GetForcedLOD
	struct FTransform GetDeltaTransformFromRefPose(struct FName BoneName, struct FName BaseName); // Function Engine.SkinnedMeshComponent.GetDeltaTransformFromRefPose
	struct FName GetCurrentSkinWeightProfileName(); // Function Engine.SkinnedMeshComponent.GetCurrentSkinWeightProfileName
	struct FName GetBoneName(int32_t BoneIndex); // Function Engine.SkinnedMeshComponent.GetBoneName
	int32_t GetBoneIndex(struct FName BoneName); // Function Engine.SkinnedMeshComponent.GetBoneIndex
	struct FName FindClosestBone_K2(struct FVector TestLocation, struct FVector& BoneLocation, float IgnoreScale, bool bRequirePhysicsAsset); // Function Engine.SkinnedMeshComponent.FindClosestBone_K2
	void ClearVertexColorOverride(int32_t LODIndex); // Function Engine.SkinnedMeshComponent.ClearVertexColorOverride
	void ClearSkinWeightProfile(); // Function Engine.SkinnedMeshComponent.ClearSkinWeightProfile
	void ClearSkinWeightOverride(int32_t LODIndex); // Function Engine.SkinnedMeshComponent.ClearSkinWeightOverride
	bool BoneIsChildOf(struct FName BoneName, struct FName ParentBoneName); // Function Engine.SkinnedMeshComponent.BoneIsChildOf
}; 
 
 


//Class Engine.LocalLightComponent Size 864
// Inherited 832 bytes 
class ULocalLightComponent : public ULightComponent
{

 public: 
	enum class ELightUnits IntensityUnits;  // Offset: 832 Size: 1
	char pad_833[3];  // Offset: 833 Size: 3
	float Radius;  // Offset: 836 Size: 4
	float AttenuationRadius;  // Offset: 840 Size: 4
	struct FLightmassPointLightSettings LightmassSettings;  // Offset: 844 Size: 12
	char pad_856[8];  // Offset: 856 Size: 8



 // Functions 
 public:
	void SetIntensityUnits(enum class ELightUnits NewIntensityUnits); // Function Engine.LocalLightComponent.SetIntensityUnits
	void SetAttenuationRadius(float NewRadius); // Function Engine.LocalLightComponent.SetAttenuationRadius
	float GetUnitsConversionFactor(enum class ELightUnits SrcUnits, enum class ELightUnits TargetUnits, float CosHalfConeAngle); // Function Engine.LocalLightComponent.GetUnitsConversionFactor
}; 
 
 


//Class Engine.SkeletalMeshComponent Size 3856
// Inherited 1760 bytes 
class USkeletalMeshComponent : public USkinnedMeshComponent
{

 public: 
	UObject* AnimBlueprintGeneratedClass;  // Offset: 1760 Size: 8
	UAnimInstance* AnimClass;  // Offset: 1768 Size: 8
	struct UAnimInstance* AnimScriptInstance;  // Offset: 1776 Size: 8
	struct UAnimInstance* PostProcessAnimInstance;  // Offset: 1784 Size: 8
	struct FSingleAnimationPlayData AnimationData;  // Offset: 1792 Size: 24
	char pad_1816[16];  // Offset: 1816 Size: 16
	struct FVector RootBoneTranslation;  // Offset: 1832 Size: 12
	struct FVector LineCheckBoundsScale;  // Offset: 1844 Size: 12
	char pad_1856[48];  // Offset: 1856 Size: 48
	struct TArray<struct UAnimInstance*> LinkedInstances;  // Offset: 1904 Size: 16
	struct TArray<struct FTransform> CachedBoneSpaceTransforms;  // Offset: 1920 Size: 16
	struct TArray<struct FTransform> CachedComponentSpaceTransforms;  // Offset: 1936 Size: 16
	char pad_1952[336];  // Offset: 1952 Size: 336
	float GlobalAnimRateScale;  // Offset: 2288 Size: 4
	enum class EKinematicBonesUpdateToPhysics KinematicBonesUpdateType;  // Offset: 2292 Size: 1
	enum class EPhysicsTransformUpdateMode PhysicsTransformUpdateMode;  // Offset: 2293 Size: 1
	char pad_2294[1];  // Offset: 2294 Size: 1
	enum class EAnimationMode AnimationMode;  // Offset: 2295 Size: 1
	char pad_2296[1];  // Offset: 2296 Size: 1
	char bDisablePostProcessBlueprint : 1;  // Offset: 2297 Size: 1
	char pad_2297_1 : 1;  // Offset: 2297 Size: 1
	char bUpdateOverlapsOnAnimationFinalize : 1;  // Offset: 2297 Size: 1
	char pad_2297_2 : 1;  // Offset: 2297 Size: 1
	char bHasValidBodies : 1;  // Offset: 2297 Size: 1
	char bBlendPhysics : 1;  // Offset: 2297 Size: 1
	char bEnablePhysicsOnDedicatedServer : 1;  // Offset: 2297 Size: 1
	char bUpdateJointsFromAnimation : 1;  // Offset: 2297 Size: 1
	char bDisableClothSimulation : 1;  // Offset: 2298 Size: 1
	char pad_2298_1 : 7;  // Offset: 2298 Size: 1
	char pad_2299[6];  // Offset: 2299 Size: 6
	char pad_2304_1 : 1;  // Offset: 2304 Size: 1
	char bDisableRigidBodyAnimNode : 1;  // Offset: 2304 Size: 1
	char bAllowAnimCurveEvaluation : 1;  // Offset: 2304 Size: 1
	char bDisableAnimCurves : 1;  // Offset: 2304 Size: 1
	char pad_2304_2 : 3;  // Offset: 2304 Size: 1
	char bCollideWithEnvironment : 1;  // Offset: 2304 Size: 1
	char bCollideWithAttachedChildren : 1;  // Offset: 2305 Size: 1
	char bLocalSpaceSimulation : 1;  // Offset: 2305 Size: 1
	char bResetAfterTeleport : 1;  // Offset: 2305 Size: 1
	char pad_2305_1 : 1;  // Offset: 2305 Size: 1
	char bDeferKinematicBoneUpdate : 1;  // Offset: 2305 Size: 1
	char bNoSkeletonUpdate : 1;  // Offset: 2305 Size: 1
	char bPauseAnims : 1;  // Offset: 2305 Size: 1
	char bUseRefPoseOnInitAnim : 1;  // Offset: 2305 Size: 1
	char bEnablePerPolyCollision : 1;  // Offset: 2306 Size: 1
	char bForceRefpose : 1;  // Offset: 2306 Size: 1
	char bOnlyAllowAutonomousTickPose : 1;  // Offset: 2306 Size: 1
	char bIsAutonomousTickPose : 1;  // Offset: 2306 Size: 1
	char bOldForceRefPose : 1;  // Offset: 2306 Size: 1
	char bShowPrePhysBones : 1;  // Offset: 2306 Size: 1
	char bRequiredBonesUpToDate : 1;  // Offset: 2306 Size: 1
	char bAnimTreeInitialised : 1;  // Offset: 2306 Size: 1
	char bIncludeComponentLocationIntoBounds : 1;  // Offset: 2307 Size: 1
	char bEnableLineCheckWithBounds : 1;  // Offset: 2307 Size: 1
	char bPropagateCurvesToSlaves : 1;  // Offset: 2307 Size: 1
	char bSkipKinematicUpdateWhenInterpolating : 1;  // Offset: 2307 Size: 1
	char bSkipBoundsUpdateWhenInterpolating : 1;  // Offset: 2307 Size: 1
	char pad_2307_1 : 2;  // Offset: 2307 Size: 1
	char bNeedsQueuedAnimEventsDispatched : 1;  // Offset: 2307 Size: 1
	char pad_2308[2];  // Offset: 2308 Size: 2
	uint16_t CachedAnimCurveUidVersion;  // Offset: 2310 Size: 2
	float ClothBlendWeight;  // Offset: 2312 Size: 4
	char pad_2316_1 : 7;  // Offset: 2316 Size: 1
	bool bWaitForParallelClothTask : 1;  // Offset: 2316 Size: 1
	char pad_2317[3];  // Offset: 2317 Size: 3
	struct TArray<struct FName> DisallowedAnimCurves;  // Offset: 2320 Size: 16
	struct UBodySetup* BodySetup;  // Offset: 2336 Size: 8
	char pad_2344[8];  // Offset: 2344 Size: 8
	struct FMulticastInlineDelegate OnConstraintBroken;  // Offset: 2352 Size: 16
	UClothingSimulationFactory* ClothingSimulationFactory;  // Offset: 2368 Size: 8
	char pad_2376[208];  // Offset: 2376 Size: 208
	float TeleportDistanceThreshold;  // Offset: 2584 Size: 4
	float TeleportRotationThreshold;  // Offset: 2588 Size: 4
	char pad_2592[8];  // Offset: 2592 Size: 8
	uint32_t LastPoseTickFrame;  // Offset: 2600 Size: 4
	char pad_2604[84];  // Offset: 2604 Size: 84
	struct UClothingSimulationInteractor* ClothingInteractor;  // Offset: 2688 Size: 8
	char pad_2696[200];  // Offset: 2696 Size: 200
	struct FMulticastInlineDelegate OnAnimInitialized;  // Offset: 2896 Size: 16
	char pad_2912[944];  // Offset: 2912 Size: 944



 // Functions 
 public:
	void UnlinkAnimClassLayers(UAnimInstance* InClass); // Function Engine.SkeletalMeshComponent.UnlinkAnimClassLayers
	void UnbindClothFromMasterPoseComponent(bool bRestoreSimulationSpace); // Function Engine.SkeletalMeshComponent.UnbindClothFromMasterPoseComponent
	void ToggleDisablePostProcessBlueprint(); // Function Engine.SkeletalMeshComponent.ToggleDisablePostProcessBlueprint
	void TermBodiesBelow(struct FName ParentBoneName); // Function Engine.SkeletalMeshComponent.TermBodiesBelow
	void SuspendClothingSimulation(); // Function Engine.SkeletalMeshComponent.SuspendClothingSimulation
	void Stop(); // Function Engine.SkeletalMeshComponent.Stop
	void SnapshotPose(struct FPoseSnapshot& Snapshot); // Function Engine.SkeletalMeshComponent.SnapshotPose
	void SetUpdateClothInEditor(bool NewUpdateState); // Function Engine.SkeletalMeshComponent.SetUpdateClothInEditor
	void SetUpdateAnimationInEditor(bool NewUpdateState); // Function Engine.SkeletalMeshComponent.SetUpdateAnimationInEditor
	void SetTeleportRotationThreshold(float Threshold); // Function Engine.SkeletalMeshComponent.SetTeleportRotationThreshold
	void SetTeleportDistanceThreshold(float Threshold); // Function Engine.SkeletalMeshComponent.SetTeleportDistanceThreshold
	void SetPosition(float InPos, bool bFireNotifies); // Function Engine.SkeletalMeshComponent.SetPosition
	void SetPlayRate(float Rate); // Function Engine.SkeletalMeshComponent.SetPlayRate
	void SetPhysicsBlendWeight(float PhysicsBlendWeight); // Function Engine.SkeletalMeshComponent.SetPhysicsBlendWeight
	void SetNotifyRigidBodyCollisionBelow(bool bNewNotifyRigidBodyCollision, struct FName BoneName, bool bIncludeSelf); // Function Engine.SkeletalMeshComponent.SetNotifyRigidBodyCollisionBelow
	void SetMorphTarget(struct FName MorphTargetName, float Value, bool bRemoveZeroWeight); // Function Engine.SkeletalMeshComponent.SetMorphTarget
	void SetEnablePhysicsBlending(bool bNewBlendPhysics); // Function Engine.SkeletalMeshComponent.SetEnablePhysicsBlending
	void SetEnableGravityOnAllBodiesBelow(bool bEnableGravity, struct FName BoneName, bool bIncludeSelf); // Function Engine.SkeletalMeshComponent.SetEnableGravityOnAllBodiesBelow
	void SetEnableBodyGravity(bool bEnableGravity, struct FName BoneName); // Function Engine.SkeletalMeshComponent.SetEnableBodyGravity
	void SetDisablePostProcessBlueprint(bool bInDisablePostProcess); // Function Engine.SkeletalMeshComponent.SetDisablePostProcessBlueprint
	void SetDisableAnimCurves(bool bInDisableAnimCurves); // Function Engine.SkeletalMeshComponent.SetDisableAnimCurves
	void SetConstraintProfileForAll(struct FName ProfileName, bool bDefaultIfNotFound); // Function Engine.SkeletalMeshComponent.SetConstraintProfileForAll
	void SetConstraintProfile(struct FName JointName, struct FName ProfileName, bool bDefaultIfNotFound); // Function Engine.SkeletalMeshComponent.SetConstraintProfile
	void SetClothMaxDistanceScale(float Scale); // Function Engine.SkeletalMeshComponent.SetClothMaxDistanceScale
	void SetBodyNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision, struct FName BoneName); // Function Engine.SkeletalMeshComponent.SetBodyNotifyRigidBodyCollision
	void SetAnimClass(UObject* NewClass); // Function Engine.SkeletalMeshComponent.SetAnimClass
	void SetAnimationMode(enum class EAnimationMode InAnimationMode); // Function Engine.SkeletalMeshComponent.SetAnimationMode
	void SetAnimation(struct UAnimationAsset* NewAnimToPlay); // Function Engine.SkeletalMeshComponent.SetAnimation
	void SetAngularLimits(struct FName InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle); // Function Engine.SkeletalMeshComponent.SetAngularLimits
	void SetAllowRigidBodyAnimNode(bool bInAllow, bool bReinitAnim); // Function Engine.SkeletalMeshComponent.SetAllowRigidBodyAnimNode
	void SetAllowedAnimCurvesEvaluation(struct TArray<struct FName>& list, bool bAllow); // Function Engine.SkeletalMeshComponent.SetAllowedAnimCurvesEvaluation
	void SetAllowAnimCurveEvaluation(bool bInAllow); // Function Engine.SkeletalMeshComponent.SetAllowAnimCurveEvaluation
	void SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType); // Function Engine.SkeletalMeshComponent.SetAllMotorsAngularVelocityDrive
	void SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType); // Function Engine.SkeletalMeshComponent.SetAllMotorsAngularPositionDrive
	void SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType); // Function Engine.SkeletalMeshComponent.SetAllMotorsAngularDriveParams
	void SetAllBodiesSimulatePhysics(bool bNewSimulate); // Function Engine.SkeletalMeshComponent.SetAllBodiesSimulatePhysics
	void SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType); // Function Engine.SkeletalMeshComponent.SetAllBodiesPhysicsBlendWeight
	void SetAllBodiesBelowSimulatePhysics(struct FName& InBoneName, bool bNewSimulate, bool bIncludeSelf); // Function Engine.SkeletalMeshComponent.SetAllBodiesBelowSimulatePhysics
	void SetAllBodiesBelowPhysicsBlendWeight(struct FName& InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType, bool bIncludeSelf); // Function Engine.SkeletalMeshComponent.SetAllBodiesBelowPhysicsBlendWeight
	void ResumeClothingSimulation(); // Function Engine.SkeletalMeshComponent.ResumeClothingSimulation
	void ResetClothTeleportMode(); // Function Engine.SkeletalMeshComponent.ResetClothTeleportMode
	void ResetAnimInstanceDynamics(enum class ETeleportType InTeleportType); // Function Engine.SkeletalMeshComponent.ResetAnimInstanceDynamics
	void ResetAllowedAnimCurveEvaluation(); // Function Engine.SkeletalMeshComponent.ResetAllowedAnimCurveEvaluation
	void ResetAllBodiesSimulatePhysics(); // Function Engine.SkeletalMeshComponent.ResetAllBodiesSimulatePhysics
	void PlayAnimation(struct UAnimationAsset* NewAnimToPlay, bool bLooping); // Function Engine.SkeletalMeshComponent.PlayAnimation
	void Play(bool bLooping); // Function Engine.SkeletalMeshComponent.Play
	void OverrideAnimationData(struct UAnimationAsset* InAnimToPlay, bool bIsLooping, bool bIsPlaying, float position, float PlayRate); // Function Engine.SkeletalMeshComponent.OverrideAnimationData
	void LinkAnimGraphByTag(struct FName InTag, UAnimInstance* InClass); // Function Engine.SkeletalMeshComponent.LinkAnimGraphByTag
	void LinkAnimClassLayers(UAnimInstance* InClass); // Function Engine.SkeletalMeshComponent.LinkAnimClassLayers
	bool K2_GetClosestPointOnPhysicsAsset(struct FVector& WorldPosition, struct FVector& ClosestWorldPosition, struct FVector& Normal, struct FName& BoneName, float& Distance); // Function Engine.SkeletalMeshComponent.K2_GetClosestPointOnPhysicsAsset
	bool IsPlaying(); // Function Engine.SkeletalMeshComponent.IsPlaying
	bool IsClothingSimulationSuspended(); // Function Engine.SkeletalMeshComponent.IsClothingSimulationSuspended
	bool IsBodyGravityEnabled(struct FName BoneName); // Function Engine.SkeletalMeshComponent.IsBodyGravityEnabled
	bool HasValidAnimationInstance(); // Function Engine.SkeletalMeshComponent.HasValidAnimationInstance
	float GetTeleportRotationThreshold(); // Function Engine.SkeletalMeshComponent.GetTeleportRotationThreshold
	float GetTeleportDistanceThreshold(); // Function Engine.SkeletalMeshComponent.GetTeleportDistanceThreshold
	bool GetStringAttribute_Ref(struct FName& BoneName, struct FName& AttributeName, struct FString& OutValue, enum class ECustomBoneAttributeLookup LookupType); // Function Engine.SkeletalMeshComponent.GetStringAttribute_Ref
	bool GetStringAttribute(struct FName& BoneName, struct FName& AttributeName, struct FString DefaultValue, struct FString& OutValue, enum class ECustomBoneAttributeLookup LookupType); // Function Engine.SkeletalMeshComponent.GetStringAttribute
	struct FVector GetSkeletalCenterOfMass(); // Function Engine.SkeletalMeshComponent.GetSkeletalCenterOfMass
	struct UAnimInstance* GetPostProcessInstance(); // Function Engine.SkeletalMeshComponent.GetPostProcessInstance
	float GetPosition(); // Function Engine.SkeletalMeshComponent.GetPosition
	float GetPlayRate(); // Function Engine.SkeletalMeshComponent.GetPlayRate
	float GetMorphTarget(struct FName MorphTargetName); // Function Engine.SkeletalMeshComponent.GetMorphTarget
	struct UAnimInstance* GetLinkedAnimLayerInstanceByGroup(struct FName InGroup); // Function Engine.SkeletalMeshComponent.GetLinkedAnimLayerInstanceByGroup
	struct UAnimInstance* GetLinkedAnimLayerInstanceByClass(UAnimInstance* InClass); // Function Engine.SkeletalMeshComponent.GetLinkedAnimLayerInstanceByClass
	void GetLinkedAnimGraphInstancesByTag(struct FName InTag, struct TArray<struct UAnimInstance*>& OutLinkedInstances); // Function Engine.SkeletalMeshComponent.GetLinkedAnimGraphInstancesByTag
	struct UAnimInstance* GetLinkedAnimGraphInstanceByTag(struct FName InTag); // Function Engine.SkeletalMeshComponent.GetLinkedAnimGraphInstanceByTag
	bool GetIntegerAttribute_Ref(struct FName& BoneName, struct FName& AttributeName, int32_t& OutValue, enum class ECustomBoneAttributeLookup LookupType); // Function Engine.SkeletalMeshComponent.GetIntegerAttribute_Ref
	bool GetIntegerAttribute(struct FName& BoneName, struct FName& AttributeName, int32_t DefaultValue, int32_t& OutValue, enum class ECustomBoneAttributeLookup LookupType); // Function Engine.SkeletalMeshComponent.GetIntegerAttribute
	bool GetFloatAttribute_Ref(struct FName& BoneName, struct FName& AttributeName, float& OutValue, enum class ECustomBoneAttributeLookup LookupType); // Function Engine.SkeletalMeshComponent.GetFloatAttribute_Ref
	bool GetFloatAttribute(struct FName& BoneName, struct FName& AttributeName, float DefaultValue, float& OutValue, enum class ECustomBoneAttributeLookup LookupType); // Function Engine.SkeletalMeshComponent.GetFloatAttribute
	bool GetDisablePostProcessBlueprint(); // Function Engine.SkeletalMeshComponent.GetDisablePostProcessBlueprint
	bool GetDisableAnimCurves(); // Function Engine.SkeletalMeshComponent.GetDisableAnimCurves
	void GetCurrentJointAngles(struct FName InBoneName, float& Swing1Angle, float& TwistAngle, float& Swing2Angle); // Function Engine.SkeletalMeshComponent.GetCurrentJointAngles
	float GetClothMaxDistanceScale(); // Function Engine.SkeletalMeshComponent.GetClothMaxDistanceScale
	struct UClothingSimulationInteractor* GetClothingSimulationInteractor(); // Function Engine.SkeletalMeshComponent.GetClothingSimulationInteractor
	float GetBoneMass(struct FName BoneName, bool bScaleMass); // Function Engine.SkeletalMeshComponent.GetBoneMass
	struct UAnimInstance* GetAnimInstance(); // Function Engine.SkeletalMeshComponent.GetAnimInstance
	UObject* GetAnimClass(); // Function Engine.SkeletalMeshComponent.GetAnimClass
	enum class EAnimationMode GetAnimationMode(); // Function Engine.SkeletalMeshComponent.GetAnimationMode
	bool GetAllowRigidBodyAnimNode(); // Function Engine.SkeletalMeshComponent.GetAllowRigidBodyAnimNode
	bool GetAllowedAnimCurveEvaluate(); // Function Engine.SkeletalMeshComponent.GetAllowedAnimCurveEvaluate
	void ForceClothNextUpdateTeleportAndReset(); // Function Engine.SkeletalMeshComponent.ForceClothNextUpdateTeleportAndReset
	void ForceClothNextUpdateTeleport(); // Function Engine.SkeletalMeshComponent.ForceClothNextUpdateTeleport
	struct FName FindConstraintBoneName(int32_t ConstraintIndex); // Function Engine.SkeletalMeshComponent.FindConstraintBoneName
	void ClearMorphTargets(); // Function Engine.SkeletalMeshComponent.ClearMorphTargets
	void BreakConstraint(struct FVector Impulse, struct FVector HitLocation, struct FName InBoneName); // Function Engine.SkeletalMeshComponent.BreakConstraint
	void BindClothToMasterPoseComponent(); // Function Engine.SkeletalMeshComponent.BindClothToMasterPoseComponent
	void AllowAnimCurveEvaluation(struct FName NameOfCurve, bool bAllow); // Function Engine.SkeletalMeshComponent.AllowAnimCurveEvaluation
	void AddImpulseToAllBodiesBelow(struct FVector Impulse, struct FName BoneName, bool bVelChange, bool bIncludeSelf); // Function Engine.SkeletalMeshComponent.AddImpulseToAllBodiesBelow
	void AddForceToAllBodiesBelow(struct FVector Force, struct FName BoneName, bool bAccelChange, bool bIncludeSelf); // Function Engine.SkeletalMeshComponent.AddForceToAllBodiesBelow
	void AccumulateAllBodiesBelowPhysicsBlendWeight(struct FName& InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType); // Function Engine.SkeletalMeshComponent.AccumulateAllBodiesBelowPhysicsBlendWeight
}; 
 
 


//Class Engine.MaterialExpressionLogarithm2 Size 88
// Inherited 64 bytes 
class UMaterialExpressionLogarithm2 : public UMaterialExpression
{

 public: 
	struct FExpressionInput X;  // Offset: 64 Size: 20
	char pad_84[4];  // Offset: 84 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.SoundWaveProcedural Size 960
// Inherited 880 bytes 
class USoundWaveProcedural : public USoundWave
{

 public: 
	char pad_880[80];  // Offset: 880 Size: 80



 // Functions 
 public:
}; 
 
 


//Class Engine.InterpTrackLinearColorProp Size 152
// Inherited 144 bytes 
class UInterpTrackLinearColorProp : public UInterpTrackLinearColorBase
{

 public: 
	struct FName PropertyName;  // Offset: 144 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.SpotLight Size 568
// Inherited 560 bytes 
class ASpotLight : public ALight
{

 public: 
	struct USpotLightComponent* SpotLightComponent;  // Offset: 560 Size: 8



 // Functions 
 public:
	void SetOuterConeAngle(float NewOuterConeAngle); // Function Engine.SpotLight.SetOuterConeAngle
	void SetInnerConeAngle(float NewInnerConeAngle); // Function Engine.SpotLight.SetInnerConeAngle
}; 
 
 


//Class Engine.PlayerStartPIE Size 592
// Inherited 592 bytes 
class APlayerStartPIE : public APlayerStart
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.AnimCompress_LeastDestructive Size 64
// Inherited 64 bytes 
class UAnimCompress_LeastDestructive : public UAnimCompress_BitwiseCompressOnly
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.BlueprintGeneratedClass Size 808
// Inherited 560 bytes 
class UBlueprintGeneratedClass : public UClass
{

 public: 
	int32_t NumReplicatedProperties;  // Offset: 560 Size: 4
	char bHasNativizedParent : 1;  // Offset: 564 Size: 1
	char bHasCookedComponentInstancingData : 1;  // Offset: 564 Size: 1
	char pad_564_1 : 6;  // Offset: 564 Size: 1
	char pad_565[4];  // Offset: 565 Size: 4
	struct TArray<struct UDynamicBlueprintBinding*> DynamicBindingObjects;  // Offset: 568 Size: 16
	struct TArray<struct UActorComponent*> ComponentTemplates;  // Offset: 584 Size: 16
	struct TArray<struct UTimelineTemplate*> Timelines;  // Offset: 600 Size: 16
	struct TArray<struct FBPComponentClassOverride> ComponentClassOverrides;  // Offset: 616 Size: 16
	struct USimpleConstructionScript* SimpleConstructionScript;  // Offset: 632 Size: 8
	struct UInheritableComponentHandler* InheritableComponentHandler;  // Offset: 640 Size: 8
	struct UStructProperty* UberGraphFramePointerProperty;  // Offset: 648 Size: 8
	char pad_656[8];  // Offset: 656 Size: 8
	struct UFunction* UberGraphFunction;  // Offset: 664 Size: 8
	struct TMap<struct FName, struct FBlueprintCookedComponentInstancingData> CookedComponentInstancingData;  // Offset: 672 Size: 80
	char pad_752[56];  // Offset: 752 Size: 56



 // Functions 
 public:
}; 
 
 


//Class Engine.AudioComponent Size 2160
// Inherited 528 bytes 
class UAudioComponent : public USceneComponent
{

 public: 
	struct USoundBase* Sound;  // Offset: 520 Size: 8
	struct TArray<struct FAudioComponentParam> InstanceParameters;  // Offset: 528 Size: 16
	struct USoundClass* SoundClassOverride;  // Offset: 544 Size: 8
	char bAutoDestroy : 1;  // Offset: 552 Size: 1
	char bStopWhenOwnerDestroyed : 1;  // Offset: 552 Size: 1
	char bShouldRemainActiveIfDropped : 1;  // Offset: 552 Size: 1
	char bAllowSpatialization : 1;  // Offset: 552 Size: 1
	char bOverrideAttenuation : 1;  // Offset: 552 Size: 1
	char bOverrideSubtitlePriority : 1;  // Offset: 552 Size: 1
	char bIsUISound : 1;  // Offset: 552 Size: 1
	char bEnableLowPassFilter : 1;  // Offset: 552 Size: 1
	char bOverridePriority : 1;  // Offset: 553 Size: 1
	char bSuppressSubtitles : 1;  // Offset: 553 Size: 1
	char pad_561_1 : 2;  // Offset: 561 Size: 1
	char bAutoManageAttachment : 1;  // Offset: 554 Size: 1
	struct FName AudioComponentUserID;  // Offset: 560 Size: 8
	float PitchModulationMin;  // Offset: 568 Size: 4
	float PitchModulationMax;  // Offset: 572 Size: 4
	float VolumeModulationMin;  // Offset: 576 Size: 4
	float VolumeModulationMax;  // Offset: 580 Size: 4
	float VolumeMultiplier;  // Offset: 584 Size: 4
	int32_t EnvelopeFollowerAttackTime;  // Offset: 588 Size: 4
	int32_t EnvelopeFollowerReleaseTime;  // Offset: 592 Size: 4
	float Priority;  // Offset: 596 Size: 4
	float SubtitlePriority;  // Offset: 600 Size: 4
	char pad_605_1 : 3;  // Offset: 605 Size: 1
	char pad_606[3];  // Offset: 606 Size: 3
	struct USoundEffectSourcePresetChain* SourceEffectChain;  // Offset: 608 Size: 8
	float PitchMultiplier;  // Offset: 616 Size: 4
	float LowPassFilterFrequency;  // Offset: 620 Size: 4
	char pad_624[8];  // Offset: 624 Size: 8
	struct USoundAttenuation* AttenuationSettings;  // Offset: 632 Size: 8
	struct FSoundAttenuationSettings AttenuationOverrides;  // Offset: 640 Size: 928
	struct USoundConcurrency* ConcurrencySettings;  // Offset: 1568 Size: 8
	struct TSet<struct USoundConcurrency*> ConcurrencySet;  // Offset: 1576 Size: 80
	char pad_1656[12];  // Offset: 1656 Size: 12
	enum class EAttachmentRule AutoAttachLocationRule;  // Offset: 1668 Size: 1
	enum class EAttachmentRule AutoAttachRotationRule;  // Offset: 1669 Size: 1
	enum class EAttachmentRule AutoAttachScaleRule;  // Offset: 1670 Size: 1
	char pad_1671[1];  // Offset: 1671 Size: 1
	struct FSoundModulationDefaultRoutingSettings ModulationRouting;  // Offset: 1672 Size: 72
	struct FMulticastInlineDelegate OnAudioPlayStateChanged;  // Offset: 1744 Size: 16
	char pad_1760[24];  // Offset: 1760 Size: 24
	struct FMulticastInlineDelegate OnAudioVirtualizationChanged;  // Offset: 1784 Size: 16
	char pad_1800[24];  // Offset: 1800 Size: 24
	struct FMulticastInlineDelegate OnAudioFinished;  // Offset: 1824 Size: 16
	char pad_1840[24];  // Offset: 1840 Size: 24
	struct FMulticastInlineDelegate OnAudioPlaybackPercent;  // Offset: 1864 Size: 16
	char pad_1880[24];  // Offset: 1880 Size: 24
	struct FMulticastInlineDelegate OnAudioSingleEnvelopeValue;  // Offset: 1904 Size: 16
	char pad_1920[24];  // Offset: 1920 Size: 24
	struct FMulticastInlineDelegate OnAudioMultiEnvelopeValue;  // Offset: 1944 Size: 16
	char pad_1960[24];  // Offset: 1960 Size: 24
	struct FDelegate OnQueueSubtitles;  // Offset: 1984 Size: 16
	struct TWeakObjectPtr<USceneComponent> AutoAttachParent;  // Offset: 2000 Size: 8
	struct FName AutoAttachSocketName;  // Offset: 2008 Size: 8
	char pad_2016[144];  // Offset: 2016 Size: 144



 // Functions 
 public:
	void StopDelayed(float DelayTime); // Function Engine.AudioComponent.StopDelayed
	void Stop(); // Function Engine.AudioComponent.Stop
	void SetWaveParameter(struct FName InName, struct USoundWave* InWave); // Function Engine.AudioComponent.SetWaveParameter
	void SetVolumeMultiplier(float NewVolumeMultiplier); // Function Engine.AudioComponent.SetVolumeMultiplier
	void SetUISound(bool bInUISound); // Function Engine.AudioComponent.SetUISound
	void SetSubmixSend(struct USoundSubmixBase* Submix, float SendLevel); // Function Engine.AudioComponent.SetSubmixSend
	void SetSourceBusSendPreEffect(struct USoundSourceBus* SoundSourceBus, float SourceBusSendLevel); // Function Engine.AudioComponent.SetSourceBusSendPreEffect
	void SetSourceBusSendPostEffect(struct USoundSourceBus* SoundSourceBus, float SourceBusSendLevel); // Function Engine.AudioComponent.SetSourceBusSendPostEffect
	void SetSound(struct USoundBase* NewSound); // Function Engine.AudioComponent.SetSound
	void SetPitchMultiplier(float NewPitchMultiplier); // Function Engine.AudioComponent.SetPitchMultiplier
	void SetPaused(bool bPause); // Function Engine.AudioComponent.SetPaused
	void SetOutputToBusOnly(bool bInOutputToBusOnly); // Function Engine.AudioComponent.SetOutputToBusOnly
	void SetLowPassFilterFrequency(float InLowPassFilterFrequency); // Function Engine.AudioComponent.SetLowPassFilterFrequency
	void SetLowPassFilterEnabled(bool InLowPassFilterEnabled); // Function Engine.AudioComponent.SetLowPassFilterEnabled
	void SetIntParameter(struct FName InName, int32_t inInt); // Function Engine.AudioComponent.SetIntParameter
	void SetFloatParameter(struct FName InName, float InFloat); // Function Engine.AudioComponent.SetFloatParameter
	void SetBoolParameter(struct FName InName, bool InBool); // Function Engine.AudioComponent.SetBoolParameter
	void SetAudioBusSendPreEffect(struct UAudioBus* AudioBus, float AudioBusSendLevel); // Function Engine.AudioComponent.SetAudioBusSendPreEffect
	void SetAudioBusSendPostEffect(struct UAudioBus* AudioBus, float AudioBusSendLevel); // Function Engine.AudioComponent.SetAudioBusSendPostEffect
	void PlayQuantized(struct UObject* WorldContextObject, struct UQuartzClockHandle*& InClockHandle, struct FQuartzQuantizationBoundary& InQuantizationBoundary, struct FDelegate& InDelegate, float InStartTime, float InFadeInDuration, float InFadeVolumeLevel, enum class EAudioFaderCurve InFadeCurve); // Function Engine.AudioComponent.PlayQuantized
	void Play(float StartTime); // Function Engine.AudioComponent.Play
	bool IsVirtualized(); // Function Engine.AudioComponent.IsVirtualized
	bool IsPlaying(); // Function Engine.AudioComponent.IsPlaying
	bool HasCookedFFTData(); // Function Engine.AudioComponent.HasCookedFFTData
	bool HasCookedAmplitudeEnvelopeData(); // Function Engine.AudioComponent.HasCookedAmplitudeEnvelopeData
	enum class EAudioComponentPlayState GetPlayState(); // Function Engine.AudioComponent.GetPlayState
	bool GetCookedFFTDataForAllPlayingSounds(struct TArray<struct FSoundWaveSpectralDataPerSound>& OutSoundWaveSpectralData); // Function Engine.AudioComponent.GetCookedFFTDataForAllPlayingSounds
	bool GetCookedFFTData(struct TArray<float>& FrequenciesToGet, struct TArray<struct FSoundWaveSpectralData>& OutSoundWaveSpectralData); // Function Engine.AudioComponent.GetCookedFFTData
	bool GetCookedEnvelopeDataForAllPlayingSounds(struct TArray<struct FSoundWaveEnvelopeDataPerSound>& OutEnvelopeData); // Function Engine.AudioComponent.GetCookedEnvelopeDataForAllPlayingSounds
	bool GetCookedEnvelopeData(float& OutEnvelopeData); // Function Engine.AudioComponent.GetCookedEnvelopeData
	void FadeOut(float FadeOutDuration, float FadeVolumeLevel, enum class EAudioFaderCurve FadeCurve); // Function Engine.AudioComponent.FadeOut
	void FadeIn(float FadeInDuration, float FadeVolumeLevel, float StartTime, enum class EAudioFaderCurve FadeCurve); // Function Engine.AudioComponent.FadeIn
	bool BP_GetAttenuationSettingsToApply(struct FSoundAttenuationSettings& OutAttenuationSettings); // Function Engine.AudioComponent.BP_GetAttenuationSettingsToApply
	void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel, enum class EAudioFaderCurve FadeCurve); // Function Engine.AudioComponent.AdjustVolume
	void AdjustAttenuation(struct FSoundAttenuationSettings& InAttenuationSettings); // Function Engine.AudioComponent.AdjustAttenuation
}; 
 
 


//Class Engine.SoundEffectSourcePreset Size 104
// Inherited 104 bytes 
class USoundEffectSourcePreset : public USoundEffectPreset
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.PawnMovementComponent Size 312
// Inherited 304 bytes 
class UPawnMovementComponent : public UNavMovementComponent
{

 public: 
	struct APawn* PawnOwner;  // Offset: 304 Size: 8



 // Functions 
 public:
	struct FVector K2_GetInputVector(); // Function Engine.PawnMovementComponent.K2_GetInputVector
	bool IsMoveInputIgnored(); // Function Engine.PawnMovementComponent.IsMoveInputIgnored
	struct FVector GetPendingInputVector(); // Function Engine.PawnMovementComponent.GetPendingInputVector
	struct APawn* GetPawnOwner(); // Function Engine.PawnMovementComponent.GetPawnOwner
	struct FVector GetLastInputVector(); // Function Engine.PawnMovementComponent.GetLastInputVector
	struct FVector ConsumeInputVector(); // Function Engine.PawnMovementComponent.ConsumeInputVector
	void AddInputVector(struct FVector WorldVector, bool bForce); // Function Engine.PawnMovementComponent.AddInputVector
}; 
 
 


//Class Engine.CharacterMovementComponent Size 2800
// Inherited 312 bytes 
class UCharacterMovementComponent : public UPawnMovementComponent
{

 public: 
	char pad_312[16];  // Offset: 312 Size: 16
	struct ACharacter* CharacterOwner;  // Offset: 328 Size: 8
	float GravityScale;  // Offset: 336 Size: 4
	float MaxStepHeight;  // Offset: 340 Size: 4
	float JumpZVelocity;  // Offset: 344 Size: 4
	float JumpOffJumpZFactor;  // Offset: 348 Size: 4
	float WalkableFloorAngle;  // Offset: 352 Size: 4
	float WalkableFloorZ;  // Offset: 356 Size: 4
	enum class EMovementMode MovementMode;  // Offset: 360 Size: 1
	char CustomMovementMode;  // Offset: 361 Size: 1
	enum class ENetworkSmoothingMode NetworkSmoothingMode;  // Offset: 362 Size: 1
	char pad_363[1];  // Offset: 363 Size: 1
	float GroundFriction;  // Offset: 364 Size: 4
	char pad_368[28];  // Offset: 368 Size: 28
	float MaxWalkSpeed;  // Offset: 396 Size: 4
	float MaxWalkSpeedCrouched;  // Offset: 400 Size: 4
	float MaxSwimSpeed;  // Offset: 404 Size: 4
	float MaxFlySpeed;  // Offset: 408 Size: 4
	float MaxCustomMovementSpeed;  // Offset: 412 Size: 4
	float MaxAcceleration;  // Offset: 416 Size: 4
	float MinAnalogWalkSpeed;  // Offset: 420 Size: 4
	float BrakingFrictionFactor;  // Offset: 424 Size: 4
	float BrakingFriction;  // Offset: 428 Size: 4
	float BrakingSubStepTime;  // Offset: 432 Size: 4
	float BrakingDecelerationWalking;  // Offset: 436 Size: 4
	float BrakingDecelerationFalling;  // Offset: 440 Size: 4
	float BrakingDecelerationSwimming;  // Offset: 444 Size: 4
	float BrakingDecelerationFlying;  // Offset: 448 Size: 4
	float AirControl;  // Offset: 452 Size: 4
	float AirControlBoostMultiplier;  // Offset: 456 Size: 4
	float AirControlBoostVelocityThreshold;  // Offset: 460 Size: 4
	float FallingLateralFriction;  // Offset: 464 Size: 4
	float CrouchedHalfHeight;  // Offset: 468 Size: 4
	float Buoyancy;  // Offset: 472 Size: 4
	float PerchRadiusThreshold;  // Offset: 476 Size: 4
	float PerchAdditionalHeight;  // Offset: 480 Size: 4
	struct FRotator RotationRate;  // Offset: 484 Size: 12
	char bUseSeparateBrakingFriction : 1;  // Offset: 496 Size: 1
	char bApplyGravityWhileJumping : 1;  // Offset: 496 Size: 1
	char bUseControllerDesiredRotation : 1;  // Offset: 496 Size: 1
	char bOrientRotationToMovement : 1;  // Offset: 496 Size: 1
	char bSweepWhileNavWalking : 1;  // Offset: 496 Size: 1
	char pad_496_1 : 1;  // Offset: 496 Size: 1
	char bMovementInProgress : 1;  // Offset: 496 Size: 1
	char bEnableScopedMovementUpdates : 1;  // Offset: 496 Size: 1
	char bEnableServerDualMoveScopedMovementUpdates : 1;  // Offset: 497 Size: 1
	char bForceMaxAccel : 1;  // Offset: 497 Size: 1
	char bRunPhysicsWithNoController : 1;  // Offset: 497 Size: 1
	char bForceNextFloorCheck : 1;  // Offset: 497 Size: 1
	char bShrinkProxyCapsule : 1;  // Offset: 497 Size: 1
	char bCanWalkOffLedges : 1;  // Offset: 497 Size: 1
	char bCanWalkOffLedgesWhenCrouching : 1;  // Offset: 497 Size: 1
	char pad_497_1 : 1;  // Offset: 497 Size: 1
	char pad_498_1 : 1;  // Offset: 498 Size: 1
	char bNetworkSkipProxyPredictionOnNetUpdate : 1;  // Offset: 498 Size: 1
	char bNetworkAlwaysReplicateTransformUpdateTimestamp : 1;  // Offset: 498 Size: 1
	char bDeferUpdateMoveComponent : 1;  // Offset: 498 Size: 1
	char bEnablePhysicsInteraction : 1;  // Offset: 498 Size: 1
	char bTouchForceScaledToMass : 1;  // Offset: 498 Size: 1
	char bPushForceScaledToMass : 1;  // Offset: 498 Size: 1
	char bPushForceUsingZOffset : 1;  // Offset: 498 Size: 1
	char bScalePushForceToVelocity : 1;  // Offset: 499 Size: 1
	char pad_499_1 : 7;  // Offset: 499 Size: 1
	char pad_500[5];  // Offset: 500 Size: 5
	struct USceneComponent* DeferredUpdatedMoveComponent;  // Offset: 504 Size: 8
	float MaxOutOfWaterStepHeight;  // Offset: 512 Size: 4
	float OutofWaterZ;  // Offset: 516 Size: 4
	float Mass;  // Offset: 520 Size: 4
	float StandingDownwardForceScale;  // Offset: 524 Size: 4
	float InitialPushForceFactor;  // Offset: 528 Size: 4
	float PushForceFactor;  // Offset: 532 Size: 4
	float PushForcePointZOffsetFactor;  // Offset: 536 Size: 4
	float TouchForceFactor;  // Offset: 540 Size: 4
	float MinTouchForce;  // Offset: 544 Size: 4
	float MaxTouchForce;  // Offset: 548 Size: 4
	float RepulsionForce;  // Offset: 552 Size: 4
	struct FVector Acceleration;  // Offset: 556 Size: 12
	char pad_568[8];  // Offset: 568 Size: 8
	struct FQuat LastUpdateRotation;  // Offset: 576 Size: 16
	struct FVector LastUpdateLocation;  // Offset: 592 Size: 12
	struct FVector LastUpdateVelocity;  // Offset: 604 Size: 12
	float ServerLastTransformUpdateTimeStamp;  // Offset: 616 Size: 4
	float ServerLastClientGoodMoveAckTime;  // Offset: 620 Size: 4
	float ServerLastClientAdjustmentTime;  // Offset: 624 Size: 4
	struct FVector PendingImpulseToApply;  // Offset: 628 Size: 12
	struct FVector PendingForceToApply;  // Offset: 640 Size: 12
	float AnalogInputModifier;  // Offset: 652 Size: 4
	char pad_656[12];  // Offset: 656 Size: 12
	float MaxSimulationTimeStep;  // Offset: 668 Size: 4
	int32_t MaxSimulationIterations;  // Offset: 672 Size: 4
	int32_t MaxJumpApexAttemptsPerSimulation;  // Offset: 676 Size: 4
	float MaxDepenetrationWithGeometry;  // Offset: 680 Size: 4
	float MaxDepenetrationWithGeometryAsProxy;  // Offset: 684 Size: 4
	float MaxDepenetrationWithPawn;  // Offset: 688 Size: 4
	float MaxDepenetrationWithPawnAsProxy;  // Offset: 692 Size: 4
	float NetworkSimulatedSmoothLocationTime;  // Offset: 696 Size: 4
	float NetworkSimulatedSmoothRotationTime;  // Offset: 700 Size: 4
	float ListenServerNetworkSimulatedSmoothLocationTime;  // Offset: 704 Size: 4
	float ListenServerNetworkSimulatedSmoothRotationTime;  // Offset: 708 Size: 4
	float NetProxyShrinkRadius;  // Offset: 712 Size: 4
	float NetProxyShrinkHalfHeight;  // Offset: 716 Size: 4
	float NetworkMaxSmoothUpdateDistance;  // Offset: 720 Size: 4
	float NetworkNoSmoothUpdateDistance;  // Offset: 724 Size: 4
	float NetworkMinTimeBetweenClientAckGoodMoves;  // Offset: 728 Size: 4
	float NetworkMinTimeBetweenClientAdjustments;  // Offset: 732 Size: 4
	float NetworkMinTimeBetweenClientAdjustmentsLargeCorrection;  // Offset: 736 Size: 4
	float NetworkLargeClientCorrectionDistance;  // Offset: 740 Size: 4
	float LedgeCheckThreshold;  // Offset: 744 Size: 4
	float JumpOutOfWaterPitch;  // Offset: 748 Size: 4
	struct FFindFloorResult CurrentFloor;  // Offset: 752 Size: 148
	enum class EMovementMode DefaultLandMovementMode;  // Offset: 900 Size: 1
	enum class EMovementMode DefaultWaterMovementMode;  // Offset: 901 Size: 1
	enum class EMovementMode GroundMovementMode;  // Offset: 902 Size: 1
	char bMaintainHorizontalGroundVelocity : 1;  // Offset: 903 Size: 1
	char bImpartBaseVelocityX : 1;  // Offset: 903 Size: 1
	char bImpartBaseVelocityY : 1;  // Offset: 903 Size: 1
	char bImpartBaseVelocityZ : 1;  // Offset: 903 Size: 1
	char bImpartBaseAngularVelocity : 1;  // Offset: 903 Size: 1
	char bJustTeleported : 1;  // Offset: 903 Size: 1
	char bNetworkUpdateReceived : 1;  // Offset: 903 Size: 1
	char bNetworkMovementModeChanged : 1;  // Offset: 903 Size: 1
	char bIgnoreClientMovementErrorChecksAndCorrection : 1;  // Offset: 904 Size: 1
	char bServerAcceptClientAuthoritativePosition : 1;  // Offset: 904 Size: 1
	char bNotifyApex : 1;  // Offset: 904 Size: 1
	char bCheatFlying : 1;  // Offset: 904 Size: 1
	char bWantsToCrouch : 1;  // Offset: 904 Size: 1
	char bCrouchMaintainsBaseLocation : 1;  // Offset: 904 Size: 1
	char bIgnoreBaseRotation : 1;  // Offset: 904 Size: 1
	char bFastAttachedMove : 1;  // Offset: 904 Size: 1
	char bAlwaysCheckFloor : 1;  // Offset: 905 Size: 1
	char bUseFlatBaseForFloorChecks : 1;  // Offset: 905 Size: 1
	char bPerformingJumpOff : 1;  // Offset: 905 Size: 1
	char bWantsToLeaveNavWalking : 1;  // Offset: 905 Size: 1
	char bUseRVOAvoidance : 1;  // Offset: 905 Size: 1
	char bRequestedMoveUseAcceleration : 1;  // Offset: 905 Size: 1
	char pad_905_1 : 1;  // Offset: 905 Size: 1
	char bWasSimulatingRootMotion : 1;  // Offset: 905 Size: 1
	char bAllowPhysicsRotationDuringAnimRootMotion : 1;  // Offset: 906 Size: 1
	char bHasRequestedVelocity : 1;  // Offset: 906 Size: 1
	char bRequestedMoveWithMaxSpeed : 1;  // Offset: 906 Size: 1
	char bWasAvoidanceUpdated : 1;  // Offset: 906 Size: 1
	char pad_906_1 : 2;  // Offset: 906 Size: 1
	char bProjectNavMeshWalking : 1;  // Offset: 906 Size: 1
	char bProjectNavMeshOnBothWorldChannels : 1;  // Offset: 906 Size: 1
	char pad_907[17];  // Offset: 907 Size: 17
	float AvoidanceConsiderationRadius;  // Offset: 924 Size: 4
	struct FVector RequestedVelocity;  // Offset: 928 Size: 12
	int32_t AvoidanceUID;  // Offset: 940 Size: 4
	struct FNavAvoidanceMask AvoidanceGroup;  // Offset: 944 Size: 4
	struct FNavAvoidanceMask GroupsToAvoid;  // Offset: 948 Size: 4
	struct FNavAvoidanceMask GroupsToIgnore;  // Offset: 952 Size: 4
	float AvoidanceWeight;  // Offset: 956 Size: 4
	struct FVector PendingLaunchVelocity;  // Offset: 960 Size: 12
	char pad_972[164];  // Offset: 972 Size: 164
	float NavMeshProjectionInterval;  // Offset: 1136 Size: 4
	float NavMeshProjectionTimer;  // Offset: 1140 Size: 4
	float NavMeshProjectionInterpSpeed;  // Offset: 1144 Size: 4
	float NavMeshProjectionHeightScaleUp;  // Offset: 1148 Size: 4
	float NavMeshProjectionHeightScaleDown;  // Offset: 1152 Size: 4
	float NavWalkingFloorDistTolerance;  // Offset: 1156 Size: 4
	struct FCharacterMovementComponentPostPhysicsTickFunction PostPhysicsTickFunction;  // Offset: 1160 Size: 48
	char pad_1208[24];  // Offset: 1208 Size: 24
	float MinTimeBetweenTimeStampResets;  // Offset: 1232 Size: 4
	char pad_1236[1196];  // Offset: 1236 Size: 1196
	struct FRootMotionSourceGroup CurrentRootMotion;  // Offset: 2432 Size: 56
	struct FRootMotionSourceGroup ServerCorrectionRootMotion;  // Offset: 2488 Size: 56
	char pad_2544[144];  // Offset: 2544 Size: 144
	struct FRootMotionMovementParams RootMotionParams;  // Offset: 2688 Size: 64
	struct FVector AnimRootMotionVelocity;  // Offset: 2752 Size: 12
	char pad_2764[36];  // Offset: 2764 Size: 36



 // Functions 
 public:
	void SetWalkableFloorZ(float InWalkableFloorZ); // Function Engine.CharacterMovementComponent.SetWalkableFloorZ
	void SetWalkableFloorAngle(float InWalkableFloorAngle); // Function Engine.CharacterMovementComponent.SetWalkableFloorAngle
	void SetMovementMode(enum class EMovementMode NewMovementMode, char NewCustomMode); // Function Engine.CharacterMovementComponent.SetMovementMode
	void SetGroupsToIgnoreMask(struct FNavAvoidanceMask& GroupMask); // Function Engine.CharacterMovementComponent.SetGroupsToIgnoreMask
	void SetGroupsToIgnore(int32_t GroupFlags); // Function Engine.CharacterMovementComponent.SetGroupsToIgnore
	void SetGroupsToAvoidMask(struct FNavAvoidanceMask& GroupMask); // Function Engine.CharacterMovementComponent.SetGroupsToAvoidMask
	void SetGroupsToAvoid(int32_t GroupFlags); // Function Engine.CharacterMovementComponent.SetGroupsToAvoid
	void SetAvoidanceGroupMask(struct FNavAvoidanceMask& GroupMask); // Function Engine.CharacterMovementComponent.SetAvoidanceGroupMask
	void SetAvoidanceGroup(int32_t GroupFlags); // Function Engine.CharacterMovementComponent.SetAvoidanceGroup
	void SetAvoidanceEnabled(bool bEnable); // Function Engine.CharacterMovementComponent.SetAvoidanceEnabled
	float K2_GetWalkableFloorZ(); // Function Engine.CharacterMovementComponent.K2_GetWalkableFloorZ
	float K2_GetWalkableFloorAngle(); // Function Engine.CharacterMovementComponent.K2_GetWalkableFloorAngle
	float K2_GetModifiedMaxAcceleration(); // Function Engine.CharacterMovementComponent.K2_GetModifiedMaxAcceleration
	void K2_FindFloor(struct FVector CapsuleLocation, struct FFindFloorResult& FloorResult); // Function Engine.CharacterMovementComponent.K2_FindFloor
	void K2_ComputeFloorDist(struct FVector CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, struct FFindFloorResult& FloorResult); // Function Engine.CharacterMovementComponent.K2_ComputeFloorDist
	bool IsWalking(); // Function Engine.CharacterMovementComponent.IsWalking
	bool IsWalkable(struct FHitResult& Hit); // Function Engine.CharacterMovementComponent.IsWalkable
	float GetValidPerchRadius(); // Function Engine.CharacterMovementComponent.GetValidPerchRadius
	float GetPerchRadiusThreshold(); // Function Engine.CharacterMovementComponent.GetPerchRadiusThreshold
	struct UPrimitiveComponent* GetMovementBase(); // Function Engine.CharacterMovementComponent.GetMovementBase
	float GetMinAnalogSpeed(); // Function Engine.CharacterMovementComponent.GetMinAnalogSpeed
	float GetMaxJumpHeightWithJumpTime(); // Function Engine.CharacterMovementComponent.GetMaxJumpHeightWithJumpTime
	float GetMaxJumpHeight(); // Function Engine.CharacterMovementComponent.GetMaxJumpHeight
	float GetMaxBrakingDeceleration(); // Function Engine.CharacterMovementComponent.GetMaxBrakingDeceleration
	float GetMaxAcceleration(); // Function Engine.CharacterMovementComponent.GetMaxAcceleration
	struct FVector GetLastUpdateVelocity(); // Function Engine.CharacterMovementComponent.GetLastUpdateVelocity
	struct FRotator GetLastUpdateRotation(); // Function Engine.CharacterMovementComponent.GetLastUpdateRotation
	struct FVector GetLastUpdateLocation(); // Function Engine.CharacterMovementComponent.GetLastUpdateLocation
	struct FVector GetImpartedMovementBaseVelocity(); // Function Engine.CharacterMovementComponent.GetImpartedMovementBaseVelocity
	struct FVector GetCurrentAcceleration(); // Function Engine.CharacterMovementComponent.GetCurrentAcceleration
	struct ACharacter* GetCharacterOwner(); // Function Engine.CharacterMovementComponent.GetCharacterOwner
	float GetAnalogInputModifier(); // Function Engine.CharacterMovementComponent.GetAnalogInputModifier
	void DisableMovement(); // Function Engine.CharacterMovementComponent.DisableMovement
	void ClearAccumulatedForces(); // Function Engine.CharacterMovementComponent.ClearAccumulatedForces
	void CapsuleTouched(struct UPrimitiveComponent* OverlappedComp, struct AActor* Other, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function Engine.CharacterMovementComponent.CapsuleTouched
	void CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration); // Function Engine.CharacterMovementComponent.CalcVelocity
	void AddImpulse(struct FVector Impulse, bool bVelocityChange); // Function Engine.CharacterMovementComponent.AddImpulse
	void AddForce(struct FVector Force); // Function Engine.CharacterMovementComponent.AddForce
}; 
 
 


//Class Engine.DistributionFloatUniformCurve Size 80
// Inherited 56 bytes 
class UDistributionFloatUniformCurve : public UDistributionFloat
{

 public: 
	struct FInterpCurveVector2D ConstantCurve;  // Offset: 56 Size: 24



 // Functions 
 public:
}; 
 
 


//Class Engine.AnimNotifyState_TimedParticleEffect Size 96
// Inherited 48 bytes 
class UAnimNotifyState_TimedParticleEffect : public UAnimNotifyState
{

 public: 
	struct UParticleSystem* PSTemplate;  // Offset: 48 Size: 8
	int32_t MirrorDetailLevel;  // Offset: 56 Size: 4
	struct FName SocketName;  // Offset: 60 Size: 8
	struct FVector LocationOffset;  // Offset: 68 Size: 12
	struct FRotator RotationOffset;  // Offset: 80 Size: 12
	char pad_92_1 : 7;  // Offset: 92 Size: 1
	bool bDestroyAtEnd : 1;  // Offset: 92 Size: 1
	char pad_93[3];  // Offset: 93 Size: 3



 // Functions 
 public:
}; 
 
 


//Class Engine.DataTableFunctionLibrary Size 40
// Inherited 40 bytes 
class UDataTableFunctionLibrary : public UBlueprintFunctionLibrary
{

 public: 



 // Functions 
 public:
	void GetDataTableRowNames(struct UDataTable* Table, struct TArray<struct FName>& OutRowNames); // Function Engine.DataTableFunctionLibrary.GetDataTableRowNames
	bool GetDataTableRowFromName(struct UDataTable* Table, struct FName RowName, struct FTableRowBase& OutRow); // Function Engine.DataTableFunctionLibrary.GetDataTableRowFromName
	struct TArray<struct FString> GetDataTableColumnAsString(struct UDataTable* DataTable, struct FName PropertyName); // Function Engine.DataTableFunctionLibrary.GetDataTableColumnAsString
	void EvaluateCurveTableRow(struct UCurveTable* CurveTable, struct FName RowName, float InXY, enum class EEvaluateCurveTableResult& OutResult, float& OutXY, struct FString ContextString); // Function Engine.DataTableFunctionLibrary.EvaluateCurveTableRow
	bool DoesDataTableRowExist(struct UDataTable* Table, struct FName RowName); // Function Engine.DataTableFunctionLibrary.DoesDataTableRowExist
}; 
 
 


//Class Engine.StereoLayerComponent Size 752
// Inherited 528 bytes 
class UStereoLayerComponent : public USceneComponent
{

 public: 
	char bLiveTexture : 1;  // Offset: 520 Size: 1
	char bSupportsDepth : 1;  // Offset: 520 Size: 1
	char bNoAlphaChannel : 1;  // Offset: 520 Size: 1
	struct UTexture* Texture;  // Offset: 528 Size: 8
	struct UTexture* LeftTexture;  // Offset: 536 Size: 8
	char bQuadPreserveTextureRatio : 1;  // Offset: 544 Size: 1
	char pad_544_1 : 4;  // Offset: 544 Size: 1
	char pad_545[4];  // Offset: 545 Size: 4
	struct FVector2D QuadSize;  // Offset: 548 Size: 8
	struct FBox2D UVRect;  // Offset: 556 Size: 20
	float CylinderRadius;  // Offset: 576 Size: 4
	float CylinderOverlayArc;  // Offset: 580 Size: 4
	int32_t CylinderHeight;  // Offset: 584 Size: 4
	struct FEquirectProps EquirectProps;  // Offset: 588 Size: 72
	enum class EStereoLayerType StereoLayerType;  // Offset: 660 Size: 1
	enum class EStereoLayerShape StereoLayerShape;  // Offset: 661 Size: 1
	char pad_662[2];  // Offset: 662 Size: 2
	struct UStereoLayerShape* Shape;  // Offset: 664 Size: 8
	int32_t Priority;  // Offset: 672 Size: 4
	char pad_676[76];  // Offset: 676 Size: 76



 // Functions 
 public:
	void SetUVRect(struct FBox2D InUVRect); // Function Engine.StereoLayerComponent.SetUVRect
	void SetTexture(struct UTexture* InTexture); // Function Engine.StereoLayerComponent.SetTexture
	void SetQuadSize(struct FVector2D InQuadSize); // Function Engine.StereoLayerComponent.SetQuadSize
	void SetPriority(int32_t InPriority); // Function Engine.StereoLayerComponent.SetPriority
	void SetLeftTexture(struct UTexture* InTexture); // Function Engine.StereoLayerComponent.SetLeftTexture
	void SetEquirectProps(struct FEquirectProps InScaleBiases); // Function Engine.StereoLayerComponent.SetEquirectProps
	void MarkTextureForUpdate(); // Function Engine.StereoLayerComponent.MarkTextureForUpdate
	struct FBox2D GetUVRect(); // Function Engine.StereoLayerComponent.GetUVRect
	struct UTexture* GetTexture(); // Function Engine.StereoLayerComponent.GetTexture
	struct FVector2D GetQuadSize(); // Function Engine.StereoLayerComponent.GetQuadSize
	int32_t GetPriority(); // Function Engine.StereoLayerComponent.GetPriority
	struct UTexture* GetLeftTexture(); // Function Engine.StereoLayerComponent.GetLeftTexture
}; 
 
 


//Class Engine.InterpTrackInstFloatProp Size 96
// Inherited 80 bytes 
class UInterpTrackInstFloatProp : public UInterpTrackInstProperty
{

 public: 
	char pad_80[8];  // Offset: 80 Size: 8
	float ResetFloat;  // Offset: 88 Size: 4
	char pad_92[4];  // Offset: 92 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.DynamicBlueprintBinding Size 40
// Inherited 40 bytes 
class UDynamicBlueprintBinding : public UObject
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleBeamModifier Size 264
// Inherited 48 bytes 
class UParticleModuleBeamModifier : public UParticleModuleBeamBase
{

 public: 
	enum class BeamModifierType ModifierType;  // Offset: 48 Size: 1
	char pad_49[3];  // Offset: 49 Size: 3
	struct FBeamModifierOptions PositionOptions;  // Offset: 52 Size: 4
	struct FRawDistributionVector position;  // Offset: 56 Size: 72
	struct FBeamModifierOptions TangentOptions;  // Offset: 128 Size: 4
	char pad_132[4];  // Offset: 132 Size: 4
	struct FRawDistributionVector Tangent;  // Offset: 136 Size: 72
	char bAbsoluteTangent : 1;  // Offset: 208 Size: 1
	char pad_208_1 : 7;  // Offset: 208 Size: 1
	char pad_209[4];  // Offset: 209 Size: 4
	struct FBeamModifierOptions StrengthOptions;  // Offset: 212 Size: 4
	struct FRawDistributionFloat Strength;  // Offset: 216 Size: 48



 // Functions 
 public:
}; 
 
 


//Class Engine.AvoidanceManager Size 224
// Inherited 40 bytes 
class UAvoidanceManager : public UObject
{

 public: 
	char pad_40[8];  // Offset: 40 Size: 8
	float DefaultTimeToLive;  // Offset: 48 Size: 4
	float LockTimeAfterAvoid;  // Offset: 52 Size: 4
	float LockTimeAfterClean;  // Offset: 56 Size: 4
	float DeltaTimeToPredict;  // Offset: 60 Size: 4
	float ArtificialRadiusExpansion;  // Offset: 64 Size: 4
	float TestHeightDifference;  // Offset: 68 Size: 4
	float HeightCheckMargin;  // Offset: 72 Size: 4
	char pad_76[148];  // Offset: 76 Size: 148



 // Functions 
 public:
	bool RegisterMovementComponent(struct UMovementComponent* MovementComp, float AvoidanceWeight); // Function Engine.AvoidanceManager.RegisterMovementComponent
	int32_t GetObjectCount(); // Function Engine.AvoidanceManager.GetObjectCount
	int32_t GetNewAvoidanceUID(); // Function Engine.AvoidanceManager.GetNewAvoidanceUID
	struct FVector GetAvoidanceVelocityForComponent(struct UMovementComponent* MovementComp); // Function Engine.AvoidanceManager.GetAvoidanceVelocityForComponent
}; 
 
 


//Class Engine.TriggerBox Size 552
// Inherited 552 bytes 
class ATriggerBox : public ATriggerBase
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.SkeletalMeshActor Size 680
// Inherited 544 bytes 
class ASkeletalMeshActor : public AActor
{

 public: 
	char pad_544[8];  // Offset: 544 Size: 8
	char bShouldDoAnimNotifies : 1;  // Offset: 552 Size: 1
	char bWakeOnLevelStart : 1;  // Offset: 552 Size: 1
	char bUseSkinSnapshot : 1;  // Offset: 552 Size: 1
	char pad_552_1 : 5;  // Offset: 552 Size: 1
	char pad_553[8];  // Offset: 553 Size: 8
	struct USkeletalMeshComponent* SkeletalMeshComponent;  // Offset: 560 Size: 8
	struct USkeletalMesh* ReplicatedMesh;  // Offset: 568 Size: 8
	struct UPhysicsAsset* ReplicatedPhysAsset;  // Offset: 576 Size: 8
	struct UMaterialInterface* ReplicatedMaterial0;  // Offset: 584 Size: 8
	struct UMaterialInterface* ReplicatedMaterial1;  // Offset: 592 Size: 8
	char pad_600[80];  // Offset: 600 Size: 80



 // Functions 
 public:
	void OnRep_ReplicatedPhysAsset(); // Function Engine.SkeletalMeshActor.OnRep_ReplicatedPhysAsset
	void OnRep_ReplicatedMesh(); // Function Engine.SkeletalMeshActor.OnRep_ReplicatedMesh
	void OnRep_ReplicatedMaterial1(); // Function Engine.SkeletalMeshActor.OnRep_ReplicatedMaterial1
	void OnRep_ReplicatedMaterial0(); // Function Engine.SkeletalMeshActor.OnRep_ReplicatedMaterial0
}; 
 
 


//Class Engine.PrimaryDataAsset Size 48
// Inherited 48 bytes 
class UPrimaryDataAsset : public UDataAsset
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.GameSession Size 568
// Inherited 544 bytes 
class AGameSession : public AInfo
{

 public: 
	int32_t MaxSpectators;  // Offset: 544 Size: 4
	int32_t MaxPlayers;  // Offset: 548 Size: 4
	int32_t MaxPartySize;  // Offset: 552 Size: 4
	char MaxSplitscreensPerConnection;  // Offset: 556 Size: 1
	char pad_557_1 : 7;  // Offset: 557 Size: 1
	bool bRequiresPushToTalk : 1;  // Offset: 557 Size: 1
	char pad_558[2];  // Offset: 558 Size: 2
	struct FName SessionName;  // Offset: 560 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.TextRenderComponent Size 1216
// Inherited 1136 bytes 
class UTextRenderComponent : public UPrimitiveComponent
{

 public: 
	struct FText Text;  // Offset: 1136 Size: 24
	struct UMaterialInterface* TextMaterial;  // Offset: 1160 Size: 8
	struct UFont* Font;  // Offset: 1168 Size: 8
	enum class EHorizTextAligment HorizontalAlignment;  // Offset: 1176 Size: 1
	enum class EVerticalTextAligment VerticalAlignment;  // Offset: 1177 Size: 1
	char pad_1178[2];  // Offset: 1178 Size: 2
	struct FColor TextRenderColor;  // Offset: 1180 Size: 4
	float XScale;  // Offset: 1184 Size: 4
	float YScale;  // Offset: 1188 Size: 4
	float WorldSize;  // Offset: 1192 Size: 4
	float InvDefaultSize;  // Offset: 1196 Size: 4
	float HorizSpacingAdjust;  // Offset: 1200 Size: 4
	float VertSpacingAdjust;  // Offset: 1204 Size: 4
	char bAlwaysRenderAsText : 1;  // Offset: 1208 Size: 1
	char pad_1208_1 : 7;  // Offset: 1208 Size: 1
	char pad_1209[8];  // Offset: 1209 Size: 8



 // Functions 
 public:
	void SetYScale(float Value); // Function Engine.TextRenderComponent.SetYScale
	void SetXScale(float Value); // Function Engine.TextRenderComponent.SetXScale
	void SetWorldSize(float Value); // Function Engine.TextRenderComponent.SetWorldSize
	void SetVertSpacingAdjust(float Value); // Function Engine.TextRenderComponent.SetVertSpacingAdjust
	void SetVerticalAlignment(enum class EVerticalTextAligment Value); // Function Engine.TextRenderComponent.SetVerticalAlignment
	void SetTextRenderColor(struct FColor Value); // Function Engine.TextRenderComponent.SetTextRenderColor
	void SetTextMaterial(struct UMaterialInterface* Material); // Function Engine.TextRenderComponent.SetTextMaterial
	void SetText(struct FString Value); // Function Engine.TextRenderComponent.SetText
	void SetHorizSpacingAdjust(float Value); // Function Engine.TextRenderComponent.SetHorizSpacingAdjust
	void SetHorizontalAlignment(enum class EHorizTextAligment Value); // Function Engine.TextRenderComponent.SetHorizontalAlignment
	void SetFont(struct UFont* Value); // Function Engine.TextRenderComponent.SetFont
	void K2_SetText(struct FText& Value); // Function Engine.TextRenderComponent.K2_SetText
	struct FVector GetTextWorldSize(); // Function Engine.TextRenderComponent.GetTextWorldSize
	struct FVector GetTextLocalSize(); // Function Engine.TextRenderComponent.GetTextLocalSize
}; 
 
 


//Class Engine.Controller Size 664
// Inherited 544 bytes 
class AController : public AActor
{

 public: 
	char pad_544[8];  // Offset: 544 Size: 8
	struct APlayerState* PlayerState;  // Offset: 552 Size: 8
	char pad_560[8];  // Offset: 560 Size: 8
	struct FMulticastInlineDelegate OnInstigatedAnyDamage;  // Offset: 568 Size: 16
	struct FName StateName;  // Offset: 584 Size: 8
	struct APawn* Pawn;  // Offset: 592 Size: 8
	char pad_600[8];  // Offset: 600 Size: 8
	struct ACharacter* Character;  // Offset: 608 Size: 8
	struct USceneComponent* TransformComponent;  // Offset: 616 Size: 8
	char pad_624[24];  // Offset: 624 Size: 24
	struct FRotator ControlRotation;  // Offset: 648 Size: 12
	char bAttachToPawn : 1;  // Offset: 660 Size: 1
	char pad_660_1 : 7;  // Offset: 660 Size: 1
	char pad_661[4];  // Offset: 661 Size: 4



 // Functions 
 public:
	void UnPossess(); // Function Engine.Controller.UnPossess
	void StopMovement(); // Function Engine.Controller.StopMovement
	void SetInitialLocationAndRotation(struct FVector& NewLocation, struct FRotator& NewRotation); // Function Engine.Controller.SetInitialLocationAndRotation
	void SetIgnoreMoveInput(bool bNewMoveInput); // Function Engine.Controller.SetIgnoreMoveInput
	void SetIgnoreLookInput(bool bNewLookInput); // Function Engine.Controller.SetIgnoreLookInput
	void SetControlRotation(struct FRotator& NewRotation); // Function Engine.Controller.SetControlRotation
	void ResetIgnoreMoveInput(); // Function Engine.Controller.ResetIgnoreMoveInput
	void ResetIgnoreLookInput(); // Function Engine.Controller.ResetIgnoreLookInput
	void ResetIgnoreInputFlags(); // Function Engine.Controller.ResetIgnoreInputFlags
	void ReceiveUnPossess(struct APawn* UnpossessedPawn); // Function Engine.Controller.ReceiveUnPossess
	void ReceivePossess(struct APawn* PossessedPawn); // Function Engine.Controller.ReceivePossess
	void ReceiveInstigatedAnyDamage(float Damage, struct UDamageType* DamageType, struct AActor* DamagedActor, struct AActor* DamageCauser); // Function Engine.Controller.ReceiveInstigatedAnyDamage
	void Possess(struct APawn* InPawn); // Function Engine.Controller.Possess
	void OnRep_PlayerState(); // Function Engine.Controller.OnRep_PlayerState
	void OnRep_Pawn(); // Function Engine.Controller.OnRep_Pawn
	bool LineOfSightTo(struct AActor* Other, struct FVector ViewPoint, bool bAlternateChecks); // Function Engine.Controller.LineOfSightTo
	struct APawn* K2_GetPawn(); // Function Engine.Controller.K2_GetPawn
	bool IsPlayerController(); // Function Engine.Controller.IsPlayerController
	bool IsMoveInputIgnored(); // Function Engine.Controller.IsMoveInputIgnored
	bool IsLookInputIgnored(); // Function Engine.Controller.IsLookInputIgnored
	bool IsLocalPlayerController(); // Function Engine.Controller.IsLocalPlayerController
	bool IsLocalController(); // Function Engine.Controller.IsLocalController
	struct AActor* GetViewTarget(); // Function Engine.Controller.GetViewTarget
	struct FRotator GetDesiredRotation(); // Function Engine.Controller.GetDesiredRotation
	struct FRotator GetControlRotation(); // Function Engine.Controller.GetControlRotation
	void ClientSetRotation(struct FRotator NewRotation, bool bResetCamera); // Function Engine.Controller.ClientSetRotation
	void ClientSetLocation(struct FVector NewLocation, struct FRotator NewRotation); // Function Engine.Controller.ClientSetLocation
	struct APlayerController* CastToPlayerController(); // Function Engine.Controller.CastToPlayerController
}; 
 
 


//Class Engine.Distribution Size 48
// Inherited 40 bytes 
class UDistribution : public UObject
{

 public: 
	char pad_40[8];  // Offset: 40 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.LocalPlayer Size 600
// Inherited 72 bytes 
class ULocalPlayer : public UPlayer
{

 public: 
	char pad_72[40];  // Offset: 72 Size: 40
	struct UGameViewportClient* ViewportClient;  // Offset: 112 Size: 8
	char pad_120[28];  // Offset: 120 Size: 28
	enum class EAspectRatioAxisConstraint AspectRatioAxisConstraint;  // Offset: 148 Size: 1
	char pad_149[3];  // Offset: 149 Size: 3
	APlayerController* PendingLevelPlayerControllerClass;  // Offset: 152 Size: 8
	char bSentSplitJoin : 1;  // Offset: 160 Size: 1
	char pad_160_1 : 7;  // Offset: 160 Size: 1
	char pad_161[24];  // Offset: 161 Size: 24
	int32_t ControllerId;  // Offset: 184 Size: 4
	char pad_188[412];  // Offset: 188 Size: 412



 // Functions 
 public:
}; 
 
 


//Class Engine.CompositeCurveTable Size 200
// Inherited 160 bytes 
class UCompositeCurveTable : public UCurveTable
{

 public: 
	struct TArray<struct UCurveTable*> ParentTables;  // Offset: 160 Size: 16
	struct TArray<struct UCurveTable*> OldParentTables;  // Offset: 176 Size: 16
	char pad_192[8];  // Offset: 192 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionPixelNormalWS Size 64
// Inherited 64 bytes 
class UMaterialExpressionPixelNormalWS : public UMaterialExpression
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.BlueprintExtension Size 40
// Inherited 40 bytes 
class UBlueprintExtension : public UObject
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.PlayerController Size 1408
// Inherited 664 bytes 
class APlayerController : public AController
{

 public: 
	struct UPlayer* Player;  // Offset: 664 Size: 8
	struct APawn* AcknowledgedPawn;  // Offset: 672 Size: 8
	struct UInterpTrackInstDirector* ControllingDirTrackInst;  // Offset: 680 Size: 8
	struct AHUD* MyHUD;  // Offset: 688 Size: 8
	struct APlayerCameraManager* PlayerCameraManager;  // Offset: 696 Size: 8
	APlayerCameraManager* PlayerCameraManagerClass;  // Offset: 704 Size: 8
	char pad_712_1 : 7;  // Offset: 712 Size: 1
	bool bAutoManageActiveCameraTarget : 1;  // Offset: 712 Size: 1
	char pad_713[3];  // Offset: 713 Size: 3
	struct FRotator TargetViewRotation;  // Offset: 716 Size: 12
	char pad_728[12];  // Offset: 728 Size: 12
	float SmoothTargetViewRotationSpeed;  // Offset: 740 Size: 4
	char pad_744[8];  // Offset: 744 Size: 8
	struct TArray<struct AActor*> HiddenActors;  // Offset: 752 Size: 16
	struct TArray<struct TWeakObjectPtr<UPrimitiveComponent>> HiddenPrimitiveComponents;  // Offset: 768 Size: 16
	char pad_784[4];  // Offset: 784 Size: 4
	float LastSpectatorStateSynchTime;  // Offset: 788 Size: 4
	struct FVector LastSpectatorSyncLocation;  // Offset: 792 Size: 12
	struct FRotator LastSpectatorSyncRotation;  // Offset: 804 Size: 12
	int32_t ClientCap;  // Offset: 816 Size: 4
	char pad_820[4];  // Offset: 820 Size: 4
	struct UCheatManager* CheatManager;  // Offset: 824 Size: 8
	UCheatManager* CheatClass;  // Offset: 832 Size: 8
	struct UPlayerInput* PlayerInput;  // Offset: 840 Size: 8
	struct TArray<struct FActiveForceFeedbackEffect> ActiveForceFeedbackEffects;  // Offset: 848 Size: 16
	char pad_864[128];  // Offset: 864 Size: 128
	char pad_992_1 : 4;  // Offset: 992 Size: 1
	char bPlayerIsWaiting : 1;  // Offset: 992 Size: 1
	char pad_992_2 : 3;  // Offset: 992 Size: 1
	char pad_993[4];  // Offset: 993 Size: 4
	char NetPlayerIndex;  // Offset: 996 Size: 1
	char pad_997[59];  // Offset: 997 Size: 59
	struct UNetConnection* PendingSwapConnection;  // Offset: 1056 Size: 8
	struct UNetConnection* NetConnection;  // Offset: 1064 Size: 8
	char pad_1072[12];  // Offset: 1072 Size: 12
	float InputYawScale;  // Offset: 1084 Size: 4
	float InputPitchScale;  // Offset: 1088 Size: 4
	float InputRollScale;  // Offset: 1092 Size: 4
	char bShowMouseCursor : 1;  // Offset: 1096 Size: 1
	char bEnableClickEvents : 1;  // Offset: 1096 Size: 1
	char bEnableTouchEvents : 1;  // Offset: 1096 Size: 1
	char bEnableMouseOverEvents : 1;  // Offset: 1096 Size: 1
	char bEnableTouchOverEvents : 1;  // Offset: 1096 Size: 1
	char bForceFeedbackEnabled : 1;  // Offset: 1096 Size: 1
	char pad_1096_1 : 2;  // Offset: 1096 Size: 1
	char pad_1097[4];  // Offset: 1097 Size: 4
	float ForceFeedbackScale;  // Offset: 1100 Size: 4
	struct TArray<struct FKey> ClickEventKeys;  // Offset: 1104 Size: 16
	enum class EMouseCursor DefaultMouseCursor;  // Offset: 1120 Size: 1
	enum class EMouseCursor CurrentMouseCursor;  // Offset: 1121 Size: 1
	enum class ECollisionChannel DefaultClickTraceChannel;  // Offset: 1122 Size: 1
	enum class ECollisionChannel CurrentClickTraceChannel;  // Offset: 1123 Size: 1
	float HitResultTraceDistance;  // Offset: 1124 Size: 4
	uint16_t SeamlessTravelCount;  // Offset: 1128 Size: 2
	uint16_t LastCompletedSeamlessTravelCount;  // Offset: 1130 Size: 2
	char pad_1132[116];  // Offset: 1132 Size: 116
	struct UInputComponent* InactiveStateInputComponent;  // Offset: 1248 Size: 8
	char pad_1256_1 : 2;  // Offset: 1256 Size: 1
	char bShouldPerformFullTickWhenPaused : 1;  // Offset: 1256 Size: 1
	char pad_1256_2 : 5;  // Offset: 1256 Size: 1
	char pad_1257[24];  // Offset: 1257 Size: 24
	struct UTouchInterface* CurrentTouchInterface;  // Offset: 1280 Size: 8
	char pad_1288[80];  // Offset: 1288 Size: 80
	struct ASpectatorPawn* SpectatorPawn;  // Offset: 1368 Size: 8
	char pad_1376[4];  // Offset: 1376 Size: 4
	char pad_1380_1 : 7;  // Offset: 1380 Size: 1
	bool bIsLocalPlayerController : 1;  // Offset: 1380 Size: 1
	char pad_1381[3];  // Offset: 1381 Size: 3
	struct FVector SpawnLocation;  // Offset: 1384 Size: 12
	char pad_1396[12];  // Offset: 1396 Size: 12



 // Functions 
 public:
	bool WasInputKeyJustReleased(struct FKey Key); // Function Engine.PlayerController.WasInputKeyJustReleased
	bool WasInputKeyJustPressed(struct FKey Key); // Function Engine.PlayerController.WasInputKeyJustPressed
	void ToggleSpeaking(bool bInSpeaking); // Function Engine.PlayerController.ToggleSpeaking
	void TestServerLevelVisibilityChange(struct FName PackageName, struct FName Filename); // Function Engine.PlayerController.TestServerLevelVisibilityChange
	void SwitchLevel(struct FString URL); // Function Engine.PlayerController.SwitchLevel
	void StopHapticEffect(enum class EControllerHand Hand); // Function Engine.PlayerController.StopHapticEffect
	void StartFire(char FireModeNum); // Function Engine.PlayerController.StartFire
	void SetVirtualJoystickVisibility(bool bVisible); // Function Engine.PlayerController.SetVirtualJoystickVisibility
	void SetViewTargetWithBlend(struct AActor* NewViewTarget, float BlendTime, enum class EViewTargetBlendFunction BlendFunc, float BlendExp, bool bLockOutgoing); // Function Engine.PlayerController.SetViewTargetWithBlend
	void SetName(struct FString S); // Function Engine.PlayerController.SetName
	void SetMouseLocation(int32_t X, int32_t Y); // Function Engine.PlayerController.SetMouseLocation
	void SetMouseCursorWidget(enum class EMouseCursor Cursor, struct UUserWidget* CursorWidget); // Function Engine.PlayerController.SetMouseCursorWidget
	void SetHapticsByValue(float Frequency, float Amplitude, enum class EControllerHand Hand); // Function Engine.PlayerController.SetHapticsByValue
	void SetDisableHaptics(bool bNewDisabled); // Function Engine.PlayerController.SetDisableHaptics
	void SetControllerLightColor(struct FColor Color); // Function Engine.PlayerController.SetControllerLightColor
	void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning); // Function Engine.PlayerController.SetCinematicMode
	void SetAudioListenerOverride(struct USceneComponent* AttachToComponent, struct FVector Location, struct FRotator Rotation); // Function Engine.PlayerController.SetAudioListenerOverride
	void SetAudioListenerAttenuationOverride(struct USceneComponent* AttachToComponent, struct FVector AttenuationLocationOVerride); // Function Engine.PlayerController.SetAudioListenerAttenuationOverride
	void ServerViewSelf(struct FViewTargetTransitionParams TransitionParams); // Function Engine.PlayerController.ServerViewSelf
	void ServerViewPrevPlayer(); // Function Engine.PlayerController.ServerViewPrevPlayer
	void ServerViewNextPlayer(); // Function Engine.PlayerController.ServerViewNextPlayer
	void ServerVerifyViewTarget(); // Function Engine.PlayerController.ServerVerifyViewTarget
	void ServerUpdateMultipleLevelsVisibility(struct TArray<struct FUpdateLevelVisibilityLevelInfo> LevelVisibilities); // Function Engine.PlayerController.ServerUpdateMultipleLevelsVisibility
	void ServerUpdateLevelVisibility(struct FUpdateLevelVisibilityLevelInfo LevelVisibility); // Function Engine.PlayerController.ServerUpdateLevelVisibility
	void ServerUpdateCamera(struct FVector_NetQuantize CamLoc, int32_t CamPitchAndYaw); // Function Engine.PlayerController.ServerUpdateCamera
	void ServerUnmutePlayer(struct FUniqueNetIdRepl playerId); // Function Engine.PlayerController.ServerUnmutePlayer
	void ServerToggleAILogging(); // Function Engine.PlayerController.ServerToggleAILogging
	void ServerShortTimeout(); // Function Engine.PlayerController.ServerShortTimeout
	void ServerSetSpectatorWaiting(bool bWaiting); // Function Engine.PlayerController.ServerSetSpectatorWaiting
	void ServerSetSpectatorLocation(struct FVector NewLoc, struct FRotator NewRot); // Function Engine.PlayerController.ServerSetSpectatorLocation
	void ServerRestartPlayer(); // Function Engine.PlayerController.ServerRestartPlayer
	void ServerPause(); // Function Engine.PlayerController.ServerPause
	void ServerNotifyLoadedWorld(struct FName WorldPackageName); // Function Engine.PlayerController.ServerNotifyLoadedWorld
	void ServerMutePlayer(struct FUniqueNetIdRepl playerId); // Function Engine.PlayerController.ServerMutePlayer
	void ServerExecRPC(struct FString Msg); // Function Engine.PlayerController.ServerExecRPC
	void ServerExec(struct FString Msg); // Function Engine.PlayerController.ServerExec
	void ServerCheckClientPossessionReliable(); // Function Engine.PlayerController.ServerCheckClientPossessionReliable
	void ServerCheckClientPossession(); // Function Engine.PlayerController.ServerCheckClientPossession
	void ServerChangeName(struct FString S); // Function Engine.PlayerController.ServerChangeName
	void ServerCamera(struct FName NewMode); // Function Engine.PlayerController.ServerCamera
	void ServerAcknowledgePossession(struct APawn* P); // Function Engine.PlayerController.ServerAcknowledgePossession
	void SendToConsole(struct FString Command); // Function Engine.PlayerController.SendToConsole
	void RestartLevel(); // Function Engine.PlayerController.RestartLevel
	void ResetControllerLightColor(); // Function Engine.PlayerController.ResetControllerLightColor
	bool ProjectWorldLocationToScreen(struct FVector WorldLocation, struct FVector2D& ScreenLocation, bool bPlayerViewportRelative); // Function Engine.PlayerController.ProjectWorldLocationToScreen
	void PlayHapticEffect(struct UHapticFeedbackEffect_Base* HapticEffect, enum class EControllerHand Hand, float Scale, bool bLoop); // Function Engine.PlayerController.PlayHapticEffect
	void PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, enum class EDynamicForceFeedbackAction Action, struct FLatentActionInfo LatentInfo); // Function Engine.PlayerController.PlayDynamicForceFeedback
	void Pause(); // Function Engine.PlayerController.Pause
	void OnServerStartedVisualLogger(bool bIsLogging); // Function Engine.PlayerController.OnServerStartedVisualLogger
	void LocalTravel(struct FString URL); // Function Engine.PlayerController.LocalTravel
	void K2_ClientPlayForceFeedback(struct UForceFeedbackEffect* ForceFeedbackEffect, struct FName Tag, bool bLooping, bool bIgnoreTimeDilation, bool bPlayWhilePaused); // Function Engine.PlayerController.K2_ClientPlayForceFeedback
	bool IsInputKeyDown(struct FKey Key); // Function Engine.PlayerController.IsInputKeyDown
	void GetViewportSize(int32_t& SizeX, int32_t& SizeY); // Function Engine.PlayerController.GetViewportSize
	struct ASpectatorPawn* GetSpectatorPawn(); // Function Engine.PlayerController.GetSpectatorPawn
	bool GetMousePosition(float& LocationX, float& LocationY); // Function Engine.PlayerController.GetMousePosition
	struct FVector GetInputVectorKeyState(struct FKey Key); // Function Engine.PlayerController.GetInputVectorKeyState
	void GetInputTouchState(enum class ETouchIndex FingerIndex, float& LocationX, float& LocationY, bool& bIsCurrentlyPressed); // Function Engine.PlayerController.GetInputTouchState
	void GetInputMouseDelta(float& DeltaX, float& DeltaY); // Function Engine.PlayerController.GetInputMouseDelta
	void GetInputMotionState(struct FVector& Tilt, struct FVector& RotationRate, struct FVector& Gravity, struct FVector& Acceleration); // Function Engine.PlayerController.GetInputMotionState
	float GetInputKeyTimeDown(struct FKey Key); // Function Engine.PlayerController.GetInputKeyTimeDown
	void GetInputAnalogStickState(enum class EControllerAnalogStick WhichStick, float& StickX, float& StickY); // Function Engine.PlayerController.GetInputAnalogStickState
	float GetInputAnalogKeyState(struct FKey Key); // Function Engine.PlayerController.GetInputAnalogKeyState
	struct AHUD* GetHUD(); // Function Engine.PlayerController.GetHUD
	bool GetHitResultUnderFingerForObjects(enum class ETouchIndex FingerIndex, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, struct FHitResult& HitResult); // Function Engine.PlayerController.GetHitResultUnderFingerForObjects
	bool GetHitResultUnderFingerByChannel(enum class ETouchIndex FingerIndex, enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, struct FHitResult& HitResult); // Function Engine.PlayerController.GetHitResultUnderFingerByChannel
	bool GetHitResultUnderFinger(enum class ETouchIndex FingerIndex, enum class ECollisionChannel TraceChannel, bool bTraceComplex, struct FHitResult& HitResult); // Function Engine.PlayerController.GetHitResultUnderFinger
	bool GetHitResultUnderCursorForObjects(struct TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, struct FHitResult& HitResult); // Function Engine.PlayerController.GetHitResultUnderCursorForObjects
	bool GetHitResultUnderCursorByChannel(enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, struct FHitResult& HitResult); // Function Engine.PlayerController.GetHitResultUnderCursorByChannel
	bool GetHitResultUnderCursor(enum class ECollisionChannel TraceChannel, bool bTraceComplex, struct FHitResult& HitResult); // Function Engine.PlayerController.GetHitResultUnderCursor
	struct FVector GetFocalLocation(); // Function Engine.PlayerController.GetFocalLocation
	void FOV(float NewFOV); // Function Engine.PlayerController.FOV
	void EnableCheats(); // Function Engine.PlayerController.EnableCheats
	bool DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, struct FVector& WorldLocation, struct FVector& WorldDirection); // Function Engine.PlayerController.DeprojectScreenPositionToWorld
	bool DeprojectMousePositionToWorld(struct FVector& WorldLocation, struct FVector& WorldDirection); // Function Engine.PlayerController.DeprojectMousePositionToWorld
	void ConsoleKey(struct FKey Key); // Function Engine.PlayerController.ConsoleKey
	void ClientWasKicked(struct FText KickReason); // Function Engine.PlayerController.ClientWasKicked
	void ClientVoiceHandshakeComplete(); // Function Engine.PlayerController.ClientVoiceHandshakeComplete
	void ClientUpdateMultipleLevelsStreamingStatus(struct TArray<struct FUpdateLevelStreamingLevelStatus> LevelStatuses); // Function Engine.PlayerController.ClientUpdateMultipleLevelsStreamingStatus
	void ClientUpdateLevelStreamingStatus(struct FName PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int32_t LODIndex); // Function Engine.PlayerController.ClientUpdateLevelStreamingStatus
	void ClientUnmutePlayer(struct FUniqueNetIdRepl playerId); // Function Engine.PlayerController.ClientUnmutePlayer
	void ClientTravelInternal(struct FString URL, enum class ETravelType TravelType, bool bSeamless, struct FGuid MapPackageGuid); // Function Engine.PlayerController.ClientTravelInternal
	void ClientTravel(struct FString URL, enum class ETravelType TravelType, bool bSeamless, struct FGuid MapPackageGuid); // Function Engine.PlayerController.ClientTravel
	void ClientTeamMessage(struct APlayerState* SenderPlayerState, struct FString S, struct FName Type, float MsgLifeTime); // Function Engine.PlayerController.ClientTeamMessage
	void ClientStopForceFeedback(struct UForceFeedbackEffect* ForceFeedbackEffect, struct FName Tag); // Function Engine.PlayerController.ClientStopForceFeedback
	void ClientStopCameraShakesFromSource(struct UCameraShakeSourceComponent* SourceComponent, bool bImmediately); // Function Engine.PlayerController.ClientStopCameraShakesFromSource
	void ClientStopCameraShake(UCameraShakeBase* Shake, bool bImmediately); // Function Engine.PlayerController.ClientStopCameraShake
	void ClientStopCameraAnim(struct UCameraAnim* AnimToStop); // Function Engine.PlayerController.ClientStopCameraAnim
	void ClientStartOnlineSession(); // Function Engine.PlayerController.ClientStartOnlineSession
	void ClientStartCameraShakeFromSource(UCameraShakeBase* Shake, struct UCameraShakeSourceComponent* SourceComponent); // Function Engine.PlayerController.ClientStartCameraShakeFromSource
	void ClientStartCameraShake(UCameraShakeBase* Shake, float Scale, enum class ECameraShakePlaySpace PlaySpace, struct FRotator UserPlaySpaceRot); // Function Engine.PlayerController.ClientStartCameraShake
	void ClientSpawnCameraLensEffect(AEmitterCameraLensEffectBase* LensEffectEmitterClass); // Function Engine.PlayerController.ClientSpawnCameraLensEffect
	void ClientSetViewTarget(struct AActor* A, struct FViewTargetTransitionParams TransitionParams); // Function Engine.PlayerController.ClientSetViewTarget
	void ClientSetSpectatorWaiting(bool bWaiting); // Function Engine.PlayerController.ClientSetSpectatorWaiting
	void ClientSetHUD(AHUD* NewHUDClass); // Function Engine.PlayerController.ClientSetHUD
	void ClientSetForceMipLevelsToBeResident(struct UMaterialInterface* Material, float ForceDuration, int32_t CinematicTextureGroups); // Function Engine.PlayerController.ClientSetForceMipLevelsToBeResident
	void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD); // Function Engine.PlayerController.ClientSetCinematicMode
	void ClientSetCameraMode(struct FName NewCamMode); // Function Engine.PlayerController.ClientSetCameraMode
	void ClientSetCameraFade(bool bEnableFading, struct FColor FadeColor, struct FVector2D FadeAlpha, float FadeTime, bool bFadeAudio, bool bHoldWhenFinished); // Function Engine.PlayerController.ClientSetCameraFade
	void ClientSetBlockOnAsyncLoading(); // Function Engine.PlayerController.ClientSetBlockOnAsyncLoading
	void ClientReturnToMainMenuWithTextReason(struct FText ReturnReason); // Function Engine.PlayerController.ClientReturnToMainMenuWithTextReason
	void ClientReturnToMainMenu(struct FString ReturnReason); // Function Engine.PlayerController.ClientReturnToMainMenu
	void ClientRetryClientRestart(struct APawn* NewPawn); // Function Engine.PlayerController.ClientRetryClientRestart
	void ClientRestart(struct APawn* NewPawn); // Function Engine.PlayerController.ClientRestart
	void ClientReset(); // Function Engine.PlayerController.ClientReset
	void ClientRepObjRef(struct UObject* Object); // Function Engine.PlayerController.ClientRepObjRef
	void ClientReceiveLocalizedMessage(ULocalMessage* Message, int32_t SWITCH, struct APlayerState* RelatedPlayerState_2, struct APlayerState* RelatedPlayerState_3, struct UObject* OptionalObject); // Function Engine.PlayerController.ClientReceiveLocalizedMessage
	void ClientPrestreamTextures(struct AActor* ForcedActor, float ForceDuration, bool bEnableStreaming, int32_t CinematicTextureGroups); // Function Engine.PlayerController.ClientPrestreamTextures
	void ClientPrepareMapChange(struct FName LevelName, bool bFirst, bool bLast); // Function Engine.PlayerController.ClientPrepareMapChange
	void ClientPlaySoundAtLocation(struct USoundBase* Sound, struct FVector Location, float VolumeMultiplier, float PitchMultiplier); // Function Engine.PlayerController.ClientPlaySoundAtLocation
	void ClientPlaySound(struct USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier); // Function Engine.PlayerController.ClientPlaySound
	void ClientPlayForceFeedback_Internal(struct UForceFeedbackEffect* ForceFeedbackEffect, struct FForceFeedbackParameters Params); // Function Engine.PlayerController.ClientPlayForceFeedback_Internal
	void ClientPlayCameraAnim(struct UCameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, enum class ECameraShakePlaySpace Space, struct FRotator CustomPlaySpace); // Function Engine.PlayerController.ClientPlayCameraAnim
	void ClientMutePlayer(struct FUniqueNetIdRepl playerId); // Function Engine.PlayerController.ClientMutePlayer
	void ClientMessage(struct FString S, struct FName Type, float MsgLifeTime); // Function Engine.PlayerController.ClientMessage
	void ClientIgnoreMoveInput(bool bIgnore); // Function Engine.PlayerController.ClientIgnoreMoveInput
	void ClientIgnoreLookInput(bool bIgnore); // Function Engine.PlayerController.ClientIgnoreLookInput
	void ClientGotoState(struct FName NewState); // Function Engine.PlayerController.ClientGotoState
	void ClientGameEnded(struct AActor* EndGameFocus, bool bIsWinner); // Function Engine.PlayerController.ClientGameEnded
	void ClientForceGarbageCollection(); // Function Engine.PlayerController.ClientForceGarbageCollection
	void ClientFlushLevelStreaming(); // Function Engine.PlayerController.ClientFlushLevelStreaming
	void ClientEndOnlineSession(); // Function Engine.PlayerController.ClientEndOnlineSession
	void ClientEnableNetworkVoice(bool bEnable); // Function Engine.PlayerController.ClientEnableNetworkVoice
	void ClientCommitMapChange(); // Function Engine.PlayerController.ClientCommitMapChange
	void ClientClearCameraLensEffects(); // Function Engine.PlayerController.ClientClearCameraLensEffects
	void ClientCapBandwidth(int32_t Cap); // Function Engine.PlayerController.ClientCapBandwidth
	void ClientCancelPendingMapChange(); // Function Engine.PlayerController.ClientCancelPendingMapChange
	void ClientAddTextureStreamingLoc(struct FVector InLoc, float Duration, bool bOverrideLocation); // Function Engine.PlayerController.ClientAddTextureStreamingLoc
	void ClearAudioListenerOverride(); // Function Engine.PlayerController.ClearAudioListenerOverride
	void ClearAudioListenerAttenuationOverride(); // Function Engine.PlayerController.ClearAudioListenerAttenuationOverride
	bool CanRestartPlayer(); // Function Engine.PlayerController.CanRestartPlayer
	void Camera(struct FName NewMode); // Function Engine.PlayerController.Camera
	void AddYawInput(float Val); // Function Engine.PlayerController.AddYawInput
	void AddRollInput(float Val); // Function Engine.PlayerController.AddRollInput
	void AddPitchInput(float Val); // Function Engine.PlayerController.AddPitchInput
	void ActivateTouchInterface(struct UTouchInterface* NewTouchInterface); // Function Engine.PlayerController.ActivateTouchInterface
}; 
 
 


//Class Engine.PlayerState Size 800
// Inherited 544 bytes 
class APlayerState : public AInfo
{

 public: 
	float Score;  // Offset: 544 Size: 4
	int32_t playerId;  // Offset: 548 Size: 4
	char Ping;  // Offset: 552 Size: 1
	char pad_553[1];  // Offset: 553 Size: 1
	char bShouldUpdateReplicatedPing : 1;  // Offset: 554 Size: 1
	char bIsSpectator : 1;  // Offset: 554 Size: 1
	char bOnlySpectator : 1;  // Offset: 554 Size: 1
	char bIsABot : 1;  // Offset: 554 Size: 1
	char pad_554_1 : 1;  // Offset: 554 Size: 1
	char bIsInactive : 1;  // Offset: 554 Size: 1
	char bFromPreviousLevel : 1;  // Offset: 554 Size: 1
	char pad_554_2 : 1;  // Offset: 554 Size: 1
	char pad_555[2];  // Offset: 555 Size: 2
	int32_t StartTime;  // Offset: 556 Size: 4
	ULocalMessage* EngineMessageClass;  // Offset: 560 Size: 8
	char pad_568[8];  // Offset: 568 Size: 8
	struct FString SavedNetworkAddress;  // Offset: 576 Size: 16
	struct FUniqueNetIdRepl UniqueId;  // Offset: 592 Size: 40
	char pad_632[8];  // Offset: 632 Size: 8
	struct APawn* PawnPrivate;  // Offset: 640 Size: 8
	char pad_648[120];  // Offset: 648 Size: 120
	struct FString PlayerNamePrivate;  // Offset: 768 Size: 16
	char pad_784[16];  // Offset: 784 Size: 16



 // Functions 
 public:
	void ReceiveOverrideWith(struct APlayerState* OldPlayerState); // Function Engine.PlayerState.ReceiveOverrideWith
	void ReceiveCopyProperties(struct APlayerState* NewPlayerState); // Function Engine.PlayerState.ReceiveCopyProperties
	void OnRep_UniqueId(); // Function Engine.PlayerState.OnRep_UniqueId
	void OnRep_Score(); // Function Engine.PlayerState.OnRep_Score
	void OnRep_PlayerName(); // Function Engine.PlayerState.OnRep_PlayerName
	void OnRep_PlayerId(); // Function Engine.PlayerState.OnRep_PlayerId
	void OnRep_bIsInactive(); // Function Engine.PlayerState.OnRep_bIsInactive
	bool IsOnlyASpectator(); // Function Engine.PlayerState.IsOnlyASpectator
	struct FString GetPlayerName(); // Function Engine.PlayerState.GetPlayerName
}; 
 
 


//Class Engine.MaterialFunctionMaterialLayer Size 88
// Inherited 88 bytes 
class UMaterialFunctionMaterialLayer : public UMaterialFunction
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.CameraActor Size 2080
// Inherited 544 bytes 
class ACameraActor : public AActor
{

 public: 
	enum class EAutoReceiveInput AutoActivateForPlayer;  // Offset: 544 Size: 1
	char pad_545[7];  // Offset: 545 Size: 7
	struct UCameraComponent* CameraComponent;  // Offset: 552 Size: 8
	struct USceneComponent* SceneComponent;  // Offset: 560 Size: 8
	char pad_568[8];  // Offset: 568 Size: 8
	char bConstrainAspectRatio : 1;  // Offset: 576 Size: 1
	char pad_576_1 : 7;  // Offset: 576 Size: 1
	char pad_577[4];  // Offset: 577 Size: 4
	float AspectRatio;  // Offset: 580 Size: 4
	float FOVAngle;  // Offset: 584 Size: 4
	float PostProcessBlendWeight;  // Offset: 588 Size: 4
	struct FPostProcessSettings PostProcessSettings;  // Offset: 592 Size: 1488



 // Functions 
 public:
	int32_t GetAutoActivatePlayerIndex(); // Function Engine.CameraActor.GetAutoActivatePlayerIndex
}; 
 
 


//Class Engine.CameraComponent Size 2144
// Inherited 528 bytes 
class UCameraComponent : public USceneComponent
{

 public: 
	float FieldOfView;  // Offset: 520 Size: 4
	float OrthoWidth;  // Offset: 524 Size: 4
	float OrthoNearClipPlane;  // Offset: 528 Size: 4
	float OrthoFarClipPlane;  // Offset: 532 Size: 4
	float AspectRatio;  // Offset: 536 Size: 4
	char bConstrainAspectRatio : 1;  // Offset: 540 Size: 1
	char bUseFieldOfViewForLOD : 1;  // Offset: 540 Size: 1
	char bLockToHmd : 1;  // Offset: 540 Size: 1
	char bUsePawnControlRotation : 1;  // Offset: 540 Size: 1
	char bSkipDepthOfFieldTAA : 1;  // Offset: 540 Size: 1
	enum class ECameraMotionBlurMode MotionBlurMode;  // Offset: 541 Size: 1
	char pad_549_1 : 2;  // Offset: 549 Size: 1
	bool SkipMaxCascade : 1;  // Offset: 542 Size: 1
	enum class ECameraProjectionMode ProjectionMode;  // Offset: 544 Size: 1
	char pad_551[57];  // Offset: 551 Size: 57
	float PostProcessBlendWeight;  // Offset: 608 Size: 4
	char pad_612[44];  // Offset: 612 Size: 44
	struct FPostProcessSettings PostProcessSettings;  // Offset: 656 Size: 1488



 // Functions 
 public:
	void SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD); // Function Engine.CameraComponent.SetUseFieldOfViewForLOD
	void SetProjectionMode(enum class ECameraProjectionMode InProjectionMode); // Function Engine.CameraComponent.SetProjectionMode
	void SetPostProcessBlendWeight(float InPostProcessBlendWeight); // Function Engine.CameraComponent.SetPostProcessBlendWeight
	void SetOrthoWidth(float InOrthoWidth); // Function Engine.CameraComponent.SetOrthoWidth
	void SetOrthoNearClipPlane(float InOrthoNearClipPlane); // Function Engine.CameraComponent.SetOrthoNearClipPlane
	void SetOrthoFarClipPlane(float InOrthoFarClipPlane); // Function Engine.CameraComponent.SetOrthoFarClipPlane
	void SetFieldOfView(float InFieldOfView); // Function Engine.CameraComponent.SetFieldOfView
	void SetConstraintAspectRatio(bool bInConstrainAspectRatio); // Function Engine.CameraComponent.SetConstraintAspectRatio
	void SetAspectRatio(float InAspectRatio); // Function Engine.CameraComponent.SetAspectRatio
	void RemoveBlendable(struct TScriptInterface<IBlendableInterface> InBlendableObject); // Function Engine.CameraComponent.RemoveBlendable
	void OnCameraMeshHiddenChanged(); // Function Engine.CameraComponent.OnCameraMeshHiddenChanged
	void GetCameraView(float DeltaTime, struct FMinimalViewInfo& DesiredView); // Function Engine.CameraComponent.GetCameraView
	void AddOrUpdateBlendable(struct TScriptInterface<IBlendableInterface> InBlendableObject, float InWeight); // Function Engine.CameraComponent.AddOrUpdateBlendable
}; 
 
 


//Class Engine.MaterialFunctionMaterialLayerBlend Size 88
// Inherited 88 bytes 
class UMaterialFunctionMaterialLayerBlend : public UMaterialFunction
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.LightComponentBase Size 576
// Inherited 528 bytes 
class ULightComponentBase : public USceneComponent
{

 public: 
	struct FGuid LightGuid;  // Offset: 520 Size: 16
	float Brightness;  // Offset: 536 Size: 4
	float Intensity;  // Offset: 540 Size: 4
	struct FColor LightColor;  // Offset: 544 Size: 4
	char bAffectsWorld : 1;  // Offset: 548 Size: 1
	char CastShadows : 1;  // Offset: 548 Size: 1
	char CastStaticShadows : 1;  // Offset: 548 Size: 1
	char CastDynamicShadows : 1;  // Offset: 548 Size: 1
	char bAffectTranslucentLighting : 1;  // Offset: 548 Size: 1
	char bTransmission : 1;  // Offset: 548 Size: 1
	char bCastVolumetricShadow : 1;  // Offset: 548 Size: 1
	char bCastDeepShadow : 1;  // Offset: 548 Size: 1
	char bCastRaytracedShadow : 1;  // Offset: 549 Size: 1
	char bAffectReflectionNoRayTracing : 1;  // Offset: 549 Size: 1
	char bAffectReflection : 1;  // Offset: 549 Size: 1
	char bAffectGlobalIllumination : 1;  // Offset: 549 Size: 1
	float DeepShadowLayerDistribution;  // Offset: 552 Size: 4
	float IndirectLightingIntensity;  // Offset: 556 Size: 4
	float VolumetricScatteringIntensity;  // Offset: 560 Size: 4
	int32_t SamplesPerPixel;  // Offset: 564 Size: 4
	char pad_573_1 : 4;  // Offset: 573 Size: 1
	char pad_574[3];  // Offset: 574 Size: 3



 // Functions 
 public:
	void SetSamplesPerPixel(int32_t NewValue); // Function Engine.LightComponentBase.SetSamplesPerPixel
	void SetCastVolumetricShadow(bool bNewValue); // Function Engine.LightComponentBase.SetCastVolumetricShadow
	void SetCastShadows(bool bNewValue); // Function Engine.LightComponentBase.SetCastShadows
	void SetCastRaytracedShadow(bool bNewValue); // Function Engine.LightComponentBase.SetCastRaytracedShadow
	void SetCastDeepShadow(bool bNewValue); // Function Engine.LightComponentBase.SetCastDeepShadow
	void SetAffectReflectionNoRayTracing(bool bNewValue); // Function Engine.LightComponentBase.SetAffectReflectionNoRayTracing
	void SetAffectReflection(bool bNewValue); // Function Engine.LightComponentBase.SetAffectReflection
	void SetAffectGlobalIllumination(bool bNewValue); // Function Engine.LightComponentBase.SetAffectGlobalIllumination
	struct FLinearColor GetLightColor(); // Function Engine.LightComponentBase.GetLightColor
}; 
 
 


//Class Engine.LightComponent Size 832
// Inherited 576 bytes 
class ULightComponent : public ULightComponentBase
{

 public: 
	float Temperature;  // Offset: 568 Size: 4
	float MaxDrawDistance;  // Offset: 572 Size: 4
	float MaxDistanceFadeRange;  // Offset: 576 Size: 4
	float TexelsPerPixelSpotlight;  // Offset: 580 Size: 4
	char bUseTemperature : 1;  // Offset: 584 Size: 1
	int32_t ShadowMapChannel;  // Offset: 588 Size: 4
	float MinRoughness;  // Offset: 596 Size: 4
	float SpecularScale;  // Offset: 600 Size: 4
	float MinRoughness_K2;  // Offset: 604 Size: 4
	float ShadowResolutionScale;  // Offset: 608 Size: 4
	float ShadowBias;  // Offset: 612 Size: 4
	float ShadowSlopeBias;  // Offset: 616 Size: 4
	float ShadowSharpen;  // Offset: 620 Size: 4
	float ContactShadowLength;  // Offset: 624 Size: 4
	char ContactShadowLengthInWS : 1;  // Offset: 628 Size: 1
	char InverseSquaredFalloff : 1;  // Offset: 628 Size: 1
	char CastTranslucentShadows : 1;  // Offset: 628 Size: 1
	char bCastShadowsFromCinematicObjectsOnly : 1;  // Offset: 628 Size: 1
	char bAffectDynamicIndirectLighting : 1;  // Offset: 628 Size: 1
	char bForceCachedShadowsForMovablePrimitives : 1;  // Offset: 628 Size: 1
	char pad_628_1 : 1;  // Offset: 628 Size: 1
	char pad_629[4];  // Offset: 629 Size: 4
	struct FLightingChannels LightingChannels;  // Offset: 632 Size: 1
	char pad_633[7];  // Offset: 633 Size: 7
	struct UMaterialInterface* LightFunctionMaterial;  // Offset: 640 Size: 8
	struct FVector LightFunctionScale;  // Offset: 648 Size: 12
	char pad_660[4];  // Offset: 660 Size: 4
	struct UTextureLightProfile* IESTexture;  // Offset: 664 Size: 8
	char bUseIESBrightness : 1;  // Offset: 672 Size: 1
	char pad_672_1 : 7;  // Offset: 672 Size: 1
	char pad_673[4];  // Offset: 673 Size: 4
	float IESBrightnessScale;  // Offset: 676 Size: 4
	float LightFunctionFadeDistance;  // Offset: 680 Size: 4
	float DisabledBrightness;  // Offset: 684 Size: 4
	char bEnableLightShaftBloom : 1;  // Offset: 688 Size: 1
	char pad_688_1 : 7;  // Offset: 688 Size: 1
	char pad_689[4];  // Offset: 689 Size: 4
	float BloomScale;  // Offset: 692 Size: 4
	float BloomThreshold;  // Offset: 696 Size: 4
	float BloomMaxBrightness;  // Offset: 700 Size: 4
	struct FColor BloomTint;  // Offset: 704 Size: 4
	char pad_708_1 : 7;  // Offset: 708 Size: 1
	bool bUseRayTracedDistanceFieldShadows : 1;  // Offset: 708 Size: 1
	char pad_709[3];  // Offset: 709 Size: 3
	float RayStartOffsetDepthScale;  // Offset: 712 Size: 4
	char pad_716[116];  // Offset: 716 Size: 116



 // Functions 
 public:
	void SetVolumetricScatteringIntensity(float NewIntensity); // Function Engine.LightComponent.SetVolumetricScatteringIntensity
	void SetUseTemperature(bool bNewValue); // Function Engine.LightComponent.SetUseTemperature
	void SetUseIESBrightness(bool bNewValue); // Function Engine.LightComponent.SetUseIESBrightness
	void SetTransmission(bool bNewValue); // Function Engine.LightComponent.SetTransmission
	void SetTemperature(float NewTemperature); // Function Engine.LightComponent.SetTemperature
	void SetSpecularScale(float NewValue); // Function Engine.LightComponent.SetSpecularScale
	void SetShadowSlopeBias(float NewValue); // Function Engine.LightComponent.SetShadowSlopeBias
	void SetShadowBias(float NewValue); // Function Engine.LightComponent.SetShadowBias
	void SetMinRoughness(float NewValue); // Function Engine.LightComponent.SetMinRoughness
	void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2); // Function Engine.LightComponent.SetLightingChannels
	void SetLightFunctionScale(struct FVector NewLightFunctionScale); // Function Engine.LightComponent.SetLightFunctionScale
	void SetLightFunctionMaterial(struct UMaterialInterface* NewLightFunctionMaterial); // Function Engine.LightComponent.SetLightFunctionMaterial
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance); // Function Engine.LightComponent.SetLightFunctionFadeDistance
	void SetLightFunctionDisabledBrightness(float NewValue); // Function Engine.LightComponent.SetLightFunctionDisabledBrightness
	void SetLightColor(struct FLinearColor NewLightColor, bool bSRGB); // Function Engine.LightComponent.SetLightColor
	void SetIntensity(float NewIntensity); // Function Engine.LightComponent.SetIntensity
	void SetIndirectLightingIntensity(float NewIntensity); // Function Engine.LightComponent.SetIndirectLightingIntensity
	void SetIESTexture(struct UTextureLightProfile* NewValue); // Function Engine.LightComponent.SetIESTexture
	void SetIESBrightnessScale(float NewValue); // Function Engine.LightComponent.SetIESBrightnessScale
	void SetForceCachedShadowsForMovablePrimitives(bool bNewValue); // Function Engine.LightComponent.SetForceCachedShadowsForMovablePrimitives
	void SetEnableLightShaftBloom(bool bNewValue); // Function Engine.LightComponent.SetEnableLightShaftBloom
	void SetBloomTint(struct FColor NewValue); // Function Engine.LightComponent.SetBloomTint
	void SetBloomThreshold(float NewValue); // Function Engine.LightComponent.SetBloomThreshold
	void SetBloomScale(float NewValue); // Function Engine.LightComponent.SetBloomScale
	void SetBloomMaxBrightness(float NewValue); // Function Engine.LightComponent.SetBloomMaxBrightness
	void SetAffectTranslucentLighting(bool bNewValue); // Function Engine.LightComponent.SetAffectTranslucentLighting
	void SetAffectDynamicIndirectLighting(bool bNewValue); // Function Engine.LightComponent.SetAffectDynamicIndirectLighting
}; 
 
 


//Class Engine.MaterialExpressionArcsine Size 88
// Inherited 64 bytes 
class UMaterialExpressionArcsine : public UMaterialExpression
{

 public: 
	struct FExpressionInput Input;  // Offset: 64 Size: 20
	char pad_84[4];  // Offset: 84 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.Interface_ActorSubobject Size 40
// Inherited 40 bytes 
class UInterface_ActorSubobject : public UInterface
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.ChildActorComponent Size 576
// Inherited 528 bytes 
class UChildActorComponent : public USceneComponent
{

 public: 
	AActor* ChildActorClass;  // Offset: 520 Size: 8
	struct AActor* ChildActor;  // Offset: 528 Size: 8
	struct AActor* ChildActorTemplate;  // Offset: 536 Size: 8
	char pad_552[24];  // Offset: 552 Size: 24



 // Functions 
 public:
	void SetChildActorClass(AActor* InClass); // Function Engine.ChildActorComponent.SetChildActorClass
}; 
 
 


//Class Engine.PointLightComponent Size 880
// Inherited 864 bytes 
class UPointLightComponent : public ULocalLightComponent
{

 public: 
	char bUseInverseSquaredFalloff : 1;  // Offset: 856 Size: 1
	float LightFalloffExponent;  // Offset: 860 Size: 4
	float SourceRadius;  // Offset: 864 Size: 4
	float SoftSourceRadius;  // Offset: 868 Size: 4
	float SourceLength;  // Offset: 872 Size: 4



 // Functions 
 public:
	void SetSourceRadius(float bNewValue); // Function Engine.PointLightComponent.SetSourceRadius
	void SetSourceLength(float NewValue); // Function Engine.PointLightComponent.SetSourceLength
	void SetSoftSourceRadius(float bNewValue); // Function Engine.PointLightComponent.SetSoftSourceRadius
	void SetLightFalloffExponent(float NewLightFalloffExponent); // Function Engine.PointLightComponent.SetLightFalloffExponent
}; 
 
 


//Class Engine.InterpTrackInstFloatAnimBPParam Size 64
// Inherited 40 bytes 
class UInterpTrackInstFloatAnimBPParam : public UInterpTrackInst
{

 public: 
	struct UAnimInstance* AnimScriptInstance;  // Offset: 40 Size: 8
	float ResetFloat;  // Offset: 48 Size: 4
	char pad_52[12];  // Offset: 52 Size: 12



 // Functions 
 public:
}; 
 
 


//Class Engine.SpotLightComponent Size 896
// Inherited 880 bytes 
class USpotLightComponent : public UPointLightComponent
{

 public: 
	float InnerConeAngle;  // Offset: 880 Size: 4
	float OuterConeAngle;  // Offset: 884 Size: 4
	char pad_888[8];  // Offset: 888 Size: 8



 // Functions 
 public:
	void SetOuterConeAngle(float NewOuterConeAngle); // Function Engine.SpotLightComponent.SetOuterConeAngle
	void SetInnerConeAngle(float NewInnerConeAngle); // Function Engine.SpotLightComponent.SetInnerConeAngle
}; 
 
 


//Class Engine.MaterialExpressionRuntimeVirtualTextureOutput Size 208
// Inherited 64 bytes 
class UMaterialExpressionRuntimeVirtualTextureOutput : public UMaterialExpressionCustomOutput
{

 public: 
	struct FExpressionInput BaseColor;  // Offset: 64 Size: 20
	struct FExpressionInput Specular;  // Offset: 84 Size: 20
	struct FExpressionInput Roughness;  // Offset: 104 Size: 20
	struct FExpressionInput Normal;  // Offset: 124 Size: 20
	struct FExpressionInput WorldHeight;  // Offset: 144 Size: 20
	struct FExpressionInput Opacity;  // Offset: 164 Size: 20
	struct FExpressionInput Mask;  // Offset: 184 Size: 20
	char pad_204[4];  // Offset: 204 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.GameUserSettings Size 312
// Inherited 40 bytes 
class UGameUserSettings : public UObject
{

 public: 
	char pad_40_1 : 7;  // Offset: 40 Size: 1
	bool bUseVSync : 1;  // Offset: 40 Size: 1
	char pad_41_1 : 7;  // Offset: 41 Size: 1
	bool bUseDynamicResolution : 1;  // Offset: 41 Size: 1
	char pad_42[86];  // Offset: 42 Size: 86
	int32_t DisplayMonitorIndex;  // Offset: 128 Size: 4
	int32_t LastUserConfirmedDisplayMonitorIndex;  // Offset: 132 Size: 4
	uint32_t DisplayRefreshRateNumerator;  // Offset: 136 Size: 4
	uint32_t DisplayRefreshRateDenominator;  // Offset: 140 Size: 4
	uint32_t LastUserConfirmedDisplayRefreshRateNumerator;  // Offset: 144 Size: 4
	uint32_t LastUserConfirmedDisplayRefreshRateDenominator;  // Offset: 148 Size: 4
	uint32_t ResolutionSizeX;  // Offset: 152 Size: 4
	uint32_t ResolutionSizeY;  // Offset: 156 Size: 4
	uint32_t LastUserConfirmedResolutionSizeX;  // Offset: 160 Size: 4
	uint32_t LastUserConfirmedResolutionSizeY;  // Offset: 164 Size: 4
	int32_t WindowPosX;  // Offset: 168 Size: 4
	int32_t WindowPosY;  // Offset: 172 Size: 4
	int32_t FullscreenMode;  // Offset: 176 Size: 4
	int32_t LastConfirmedFullscreenMode;  // Offset: 180 Size: 4
	int32_t PreferredFullscreenMode;  // Offset: 184 Size: 4
	uint32_t Version;  // Offset: 188 Size: 4
	int32_t AudioQualityLevel;  // Offset: 192 Size: 4
	int32_t LastConfirmedAudioQualityLevel;  // Offset: 196 Size: 4
	float FrameRateLimit;  // Offset: 200 Size: 4
	char pad_204[4];  // Offset: 204 Size: 4
	int32_t DesiredScreenWidth;  // Offset: 208 Size: 4
	char pad_212_1 : 7;  // Offset: 212 Size: 1
	bool bUseDesiredScreenHeight : 1;  // Offset: 212 Size: 1
	char pad_213[3];  // Offset: 213 Size: 3
	int32_t DesiredScreenHeight;  // Offset: 216 Size: 4
	int32_t LastUserConfirmedDesiredScreenWidth;  // Offset: 220 Size: 4
	int32_t LastUserConfirmedDesiredScreenHeight;  // Offset: 224 Size: 4
	float LastRecommendedScreenWidth;  // Offset: 228 Size: 4
	float LastRecommendedScreenHeight;  // Offset: 232 Size: 4
	float LastCPUBenchmarkResult;  // Offset: 236 Size: 4
	float LastGPUBenchmarkResult;  // Offset: 240 Size: 4
	char pad_244[4];  // Offset: 244 Size: 4
	struct TArray<float> LastCPUBenchmarkSteps;  // Offset: 248 Size: 16
	struct TArray<float> LastGPUBenchmarkSteps;  // Offset: 264 Size: 16
	float LastGPUBenchmarkMultiplier;  // Offset: 280 Size: 4
	char pad_284_1 : 7;  // Offset: 284 Size: 1
	bool bUseHDRDisplayOutput : 1;  // Offset: 284 Size: 1
	char pad_285[3];  // Offset: 285 Size: 3
	int32_t HDRDisplayOutputNits;  // Offset: 288 Size: 4
	char pad_292[4];  // Offset: 292 Size: 4
	struct FMulticastInlineDelegate OnGameUserSettingsUINeedsUpdate;  // Offset: 296 Size: 16



 // Functions 
 public:
	void ValidateSettings(); // Function Engine.GameUserSettings.ValidateSettings
	bool SupportsHDRDisplayOutput(); // Function Engine.GameUserSettings.SupportsHDRDisplayOutput
	void SetVSyncEnabled(bool bEnable); // Function Engine.GameUserSettings.SetVSyncEnabled
	void SetVisualEffectQuality(int32_t Value); // Function Engine.GameUserSettings.SetVisualEffectQuality
	void SetViewDistanceQuality(int32_t Value); // Function Engine.GameUserSettings.SetViewDistanceQuality
	void SetToDefaults(); // Function Engine.GameUserSettings.SetToDefaults
	void SetTextureQuality(int32_t Value); // Function Engine.GameUserSettings.SetTextureQuality
	void SetShadowQuality(int32_t Value); // Function Engine.GameUserSettings.SetShadowQuality
	void SetShadingQuality(int32_t Value); // Function Engine.GameUserSettings.SetShadingQuality
	void SetScreenResolution(struct FIntPoint Resolution); // Function Engine.GameUserSettings.SetScreenResolution
	void SetResolutionScaleValueEx(float NewScaleValue); // Function Engine.GameUserSettings.SetResolutionScaleValueEx
	void SetResolutionScaleValue(int32_t NewScaleValue); // Function Engine.GameUserSettings.SetResolutionScaleValue
	void SetResolutionScaleNormalized(float NewScaleNormalized); // Function Engine.GameUserSettings.SetResolutionScaleNormalized
	void SetPostProcessingQuality(int32_t Value); // Function Engine.GameUserSettings.SetPostProcessingQuality
	void SetOverallScalabilityLevel(int32_t Value); // Function Engine.GameUserSettings.SetOverallScalabilityLevel
	void SetGraphicOptionQuality(int32_t Value); // Function Engine.GameUserSettings.SetGraphicOptionQuality
	void SetFullscreenMode(enum class EWindowMode InFullscreenMode); // Function Engine.GameUserSettings.SetFullscreenMode
	void SetFrameRateLimit(float NewLimit); // Function Engine.GameUserSettings.SetFrameRateLimit
	void SetFoliageQuality(int32_t Value); // Function Engine.GameUserSettings.SetFoliageQuality
	void SetDynamicResolutionEnabled(bool bEnable); // Function Engine.GameUserSettings.SetDynamicResolutionEnabled
	void SetDisplayMonitorIndex(int32_t InDisplayMonitorIndex); // Function Engine.GameUserSettings.SetDisplayMonitorIndex
	void SetBenchmarkFallbackValues(); // Function Engine.GameUserSettings.SetBenchmarkFallbackValues
	void SetAudioQualityLevel(int32_t QualityLevel); // Function Engine.GameUserSettings.SetAudioQualityLevel
	void SetAntiAliasingQuality(int32_t Value); // Function Engine.GameUserSettings.SetAntiAliasingQuality
	void SaveSettings(); // Function Engine.GameUserSettings.SaveSettings
	void RunHardwareBenchmark(int32_t WorkScale, float CPUMultiplier, float GPUMultiplier); // Function Engine.GameUserSettings.RunHardwareBenchmark
	void RevertVideoMode(); // Function Engine.GameUserSettings.RevertVideoMode
	void ResetToCurrentSettings(); // Function Engine.GameUserSettings.ResetToCurrentSettings
	void LoadSettings(bool bForceReload); // Function Engine.GameUserSettings.LoadSettings
	bool IsVSyncEnabled(); // Function Engine.GameUserSettings.IsVSyncEnabled
	bool IsVSyncDirty(); // Function Engine.GameUserSettings.IsVSyncDirty
	bool IsScreenResolutionDirty(); // Function Engine.GameUserSettings.IsScreenResolutionDirty
	bool IsHDREnabled(); // Function Engine.GameUserSettings.IsHDREnabled
	bool IsFullscreenModeDirty(); // Function Engine.GameUserSettings.IsFullscreenModeDirty
	bool IsDynamicResolutionEnabled(); // Function Engine.GameUserSettings.IsDynamicResolutionEnabled
	bool IsDynamicResolutionDirty(); // Function Engine.GameUserSettings.IsDynamicResolutionDirty
	bool IsDirty(); // Function Engine.GameUserSettings.IsDirty
	int32_t GetVisualEffectQuality(); // Function Engine.GameUserSettings.GetVisualEffectQuality
	int32_t GetViewDistanceQuality(); // Function Engine.GameUserSettings.GetViewDistanceQuality
	int32_t GetTextureQuality(); // Function Engine.GameUserSettings.GetTextureQuality
	int32_t GetSyncInterval(); // Function Engine.GameUserSettings.GetSyncInterval
	int32_t GetShadowQuality(); // Function Engine.GameUserSettings.GetShadowQuality
	int32_t GetShadingQuality(); // Function Engine.GameUserSettings.GetShadingQuality
	struct FIntPoint GetScreenResolution(); // Function Engine.GameUserSettings.GetScreenResolution
	float GetResolutionScaleNormalized(); // Function Engine.GameUserSettings.GetResolutionScaleNormalized
	void GetResolutionScaleInformationEx(float& CurrentScaleNormalized, float& CurrentScaleValue, float& MinScaleValue, float& MaxScaleValue); // Function Engine.GameUserSettings.GetResolutionScaleInformationEx
	void GetResolutionScaleInformation(float& CurrentScaleNormalized, int32_t& CurrentScaleValue, int32_t& MinScaleValue, int32_t& MaxScaleValue); // Function Engine.GameUserSettings.GetResolutionScaleInformation
	float GetRecommendedResolutionScale(); // Function Engine.GameUserSettings.GetRecommendedResolutionScale
	enum class EWindowMode GetPreferredFullscreenMode(); // Function Engine.GameUserSettings.GetPreferredFullscreenMode
	int32_t GetPostProcessingQuality(); // Function Engine.GameUserSettings.GetPostProcessingQuality
	int32_t GetOverallScalabilityLevel(); // Function Engine.GameUserSettings.GetOverallScalabilityLevel
	struct FIntPoint GetLastConfirmedScreenResolution(); // Function Engine.GameUserSettings.GetLastConfirmedScreenResolution
	enum class EWindowMode GetLastConfirmedFullscreenMode(); // Function Engine.GameUserSettings.GetLastConfirmedFullscreenMode
	int32_t GetLastConfirmedDisplayMonitorIndex(); // Function Engine.GameUserSettings.GetLastConfirmedDisplayMonitorIndex
	int32_t GetGraphicOptionQuality(); // Function Engine.GameUserSettings.GetGraphicOptionQuality
	struct UGameUserSettings* GetGameUserSettings(); // Function Engine.GameUserSettings.GetGameUserSettings
	enum class EWindowMode GetFullscreenMode(); // Function Engine.GameUserSettings.GetFullscreenMode
	float GetFrameRateLimit(); // Function Engine.GameUserSettings.GetFrameRateLimit
	int32_t GetFramePace(); // Function Engine.GameUserSettings.GetFramePace
	int32_t GetFoliageQuality(); // Function Engine.GameUserSettings.GetFoliageQuality
	int32_t GetDisplayMonitorIndex(); // Function Engine.GameUserSettings.GetDisplayMonitorIndex
	struct FIntPoint GetDesktopResolution(int32_t MonitorIndex); // Function Engine.GameUserSettings.GetDesktopResolution
	struct FIntPoint GetDefaultWindowPosition(); // Function Engine.GameUserSettings.GetDefaultWindowPosition
	enum class EWindowMode GetDefaultWindowMode(); // Function Engine.GameUserSettings.GetDefaultWindowMode
	float GetDefaultResolutionScale(); // Function Engine.GameUserSettings.GetDefaultResolutionScale
	struct FIntPoint GetDefaultResolution(); // Function Engine.GameUserSettings.GetDefaultResolution
	int32_t GetDefaultDisplayMonitorIndex(); // Function Engine.GameUserSettings.GetDefaultDisplayMonitorIndex
	int32_t GetCurrentHDRDisplayNits(); // Function Engine.GameUserSettings.GetCurrentHDRDisplayNits
	int32_t GetAudioQualityLevel(); // Function Engine.GameUserSettings.GetAudioQualityLevel
	int32_t GetAntiAliasingQuality(); // Function Engine.GameUserSettings.GetAntiAliasingQuality
	void EnableHDRDisplayOutput(bool bEnable, int32_t DisplayNits); // Function Engine.GameUserSettings.EnableHDRDisplayOutput
	void ConfirmVideoMode(); // Function Engine.GameUserSettings.ConfirmVideoMode
	void ApplySettings(bool bCheckForCommandLineOverrides); // Function Engine.GameUserSettings.ApplySettings
	void ApplyResolutionSettings(bool bCheckForCommandLineOverrides); // Function Engine.GameUserSettings.ApplyResolutionSettings
	void ApplyNonResolutionSettings(); // Function Engine.GameUserSettings.ApplyNonResolutionSettings
	void ApplyHardwareBenchmarkResults(); // Function Engine.GameUserSettings.ApplyHardwareBenchmarkResults
}; 
 
 


//Class Engine.AssetManager Size 1144
// Inherited 40 bytes 
class UAssetManager : public UObject
{

 public: 
	char pad_40[696];  // Offset: 40 Size: 696
	struct TArray<struct UObject*> ObjectReferenceList;  // Offset: 736 Size: 16
	char pad_752_1 : 7;  // Offset: 752 Size: 1
	bool bIsGlobalAsyncScanEnvironment : 1;  // Offset: 752 Size: 1
	char pad_753_1 : 7;  // Offset: 753 Size: 1
	bool bShouldGuessTypeAndName : 1;  // Offset: 753 Size: 1
	char pad_754_1 : 7;  // Offset: 754 Size: 1
	bool bShouldUseSynchronousLoad : 1;  // Offset: 754 Size: 1
	char pad_755_1 : 7;  // Offset: 755 Size: 1
	bool bIsLoadingFromPakFiles : 1;  // Offset: 755 Size: 1
	char pad_756_1 : 7;  // Offset: 756 Size: 1
	bool bShouldAcquireMissingChunksOnLoad : 1;  // Offset: 756 Size: 1
	char pad_757_1 : 7;  // Offset: 757 Size: 1
	bool bOnlyCookProductionAssets : 1;  // Offset: 757 Size: 1
	char pad_758_1 : 7;  // Offset: 758 Size: 1
	bool bIsBulkScanning : 1;  // Offset: 758 Size: 1
	char pad_759_1 : 7;  // Offset: 759 Size: 1
	bool bIsPrimaryAssetDirectoryCurrent : 1;  // Offset: 759 Size: 1
	char pad_760_1 : 7;  // Offset: 760 Size: 1
	bool bIsManagementDatabaseCurrent : 1;  // Offset: 760 Size: 1
	char pad_761_1 : 7;  // Offset: 761 Size: 1
	bool bUpdateManagementDatabaseAfterScan : 1;  // Offset: 761 Size: 1
	char pad_762_1 : 7;  // Offset: 762 Size: 1
	bool bIncludeOnlyOnDiskAssets : 1;  // Offset: 762 Size: 1
	char pad_763_1 : 7;  // Offset: 763 Size: 1
	bool bHasCompletedInitialScan : 1;  // Offset: 763 Size: 1
	int32_t NumberOfSpawnedNotifications;  // Offset: 764 Size: 4
	char pad_768[376];  // Offset: 768 Size: 376



 // Functions 
 public:
}; 
 
 


//Class Engine.AnimCompress_RemoveEverySecondKey Size 72
// Inherited 64 bytes 
class UAnimCompress_RemoveEverySecondKey : public UAnimCompress
{

 public: 
	int32_t MinKeys;  // Offset: 64 Size: 4
	char bStartAtSecondKey : 1;  // Offset: 68 Size: 1
	char pad_68_1 : 7;  // Offset: 68 Size: 1
	char pad_69[4];  // Offset: 69 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.CheatManager Size 136
// Inherited 40 bytes 
class UCheatManager : public UObject
{

 public: 
	struct ADebugCameraController* DebugCameraControllerRef;  // Offset: 40 Size: 8
	ADebugCameraController* DebugCameraControllerClass;  // Offset: 48 Size: 8
	char pad_56[64];  // Offset: 56 Size: 64
	struct TArray<struct UCheatManagerExtension*> CheatManagerExtensions;  // Offset: 120 Size: 16



 // Functions 
 public:
	void Walk(); // Function Engine.CheatManager.Walk
	void ViewSelf(); // Function Engine.CheatManager.ViewSelf
	void ViewPlayer(struct FString S); // Function Engine.CheatManager.ViewPlayer
	void ViewClass(AActor* DesiredClass); // Function Engine.CheatManager.ViewClass
	void ViewActor(struct FName ActorName); // Function Engine.CheatManager.ViewActor
	void UpdateSafeArea(); // Function Engine.CheatManager.UpdateSafeArea
	void ToggleServerStatReplicatorUpdateStatNet(); // Function Engine.CheatManager.ToggleServerStatReplicatorUpdateStatNet
	void ToggleServerStatReplicatorClientOverwrite(); // Function Engine.CheatManager.ToggleServerStatReplicatorClientOverwrite
	void ToggleDebugCamera(); // Function Engine.CheatManager.ToggleDebugCamera
	void ToggleAILogging(); // Function Engine.CheatManager.ToggleAILogging
	void TestCollisionDistance(); // Function Engine.CheatManager.TestCollisionDistance
	void Teleport(); // Function Engine.CheatManager.Teleport
	void Summon(struct FString ClassName); // Function Engine.CheatManager.Summon
	void StreamLevelOut(struct FName PackageName); // Function Engine.CheatManager.StreamLevelOut
	void StreamLevelIn(struct FName PackageName); // Function Engine.CheatManager.StreamLevelIn
	void SpawnServerStatReplicator(); // Function Engine.CheatManager.SpawnServerStatReplicator
	void Slomo(float NewTimeDilation); // Function Engine.CheatManager.Slomo
	void SetWorldOrigin(); // Function Engine.CheatManager.SetWorldOrigin
	void SetMouseSensitivityToDefault(); // Function Engine.CheatManager.SetMouseSensitivityToDefault
	void ServerToggleAILogging(); // Function Engine.CheatManager.ServerToggleAILogging
	void ReceiveInitCheatManager(); // Function Engine.CheatManager.ReceiveInitCheatManager
	void ReceiveEndPlay(); // Function Engine.CheatManager.ReceiveEndPlay
	void PlayersOnly(); // Function Engine.CheatManager.PlayersOnly
	void OnlyLoadLevel(struct FName PackageName); // Function Engine.CheatManager.OnlyLoadLevel
	void LogLoc(); // Function Engine.CheatManager.LogLoc
	void InvertMouse(); // Function Engine.CheatManager.InvertMouse
	void God(); // Function Engine.CheatManager.God
	void Ghost(); // Function Engine.CheatManager.Ghost
	void FreezeFrame(float Delay); // Function Engine.CheatManager.FreezeFrame
	void Fly(); // Function Engine.CheatManager.Fly
	void FlushLog(); // Function Engine.CheatManager.FlushLog
	void EnableDebugCamera(); // Function Engine.CheatManager.EnableDebugCamera
	void DumpVoiceMutingState(); // Function Engine.CheatManager.DumpVoiceMutingState
	void DumpPartyState(); // Function Engine.CheatManager.DumpPartyState
	void DumpOnlineSessionState(); // Function Engine.CheatManager.DumpOnlineSessionState
	void DumpChatState(); // Function Engine.CheatManager.DumpChatState
	void DisableDebugCamera(); // Function Engine.CheatManager.DisableDebugCamera
	void DestroyTarget(); // Function Engine.CheatManager.DestroyTarget
	void DestroyServerStatReplicator(); // Function Engine.CheatManager.DestroyServerStatReplicator
	void DestroyPawns(APawn* aClass); // Function Engine.CheatManager.DestroyPawns
	void DestroyAllPawnsExceptTarget(); // Function Engine.CheatManager.DestroyAllPawnsExceptTarget
	void DestroyAll(AActor* aClass); // Function Engine.CheatManager.DestroyAll
	void DebugCapsuleSweepSize(float HalfHeight, float Radius); // Function Engine.CheatManager.DebugCapsuleSweepSize
	void DebugCapsuleSweepPawn(); // Function Engine.CheatManager.DebugCapsuleSweepPawn
	void DebugCapsuleSweepComplex(bool bTraceComplex); // Function Engine.CheatManager.DebugCapsuleSweepComplex
	void DebugCapsuleSweepClear(); // Function Engine.CheatManager.DebugCapsuleSweepClear
	void DebugCapsuleSweepChannel(enum class ECollisionChannel Channel); // Function Engine.CheatManager.DebugCapsuleSweepChannel
	void DebugCapsuleSweepCapture(); // Function Engine.CheatManager.DebugCapsuleSweepCapture
	void DebugCapsuleSweep(); // Function Engine.CheatManager.DebugCapsuleSweep
	void DamageTarget(float DamageAmount); // Function Engine.CheatManager.DamageTarget
	void CheatScript(struct FString ScriptName); // Function Engine.CheatManager.CheatScript
	void ChangeSize(float F); // Function Engine.CheatManager.ChangeSize
	void BugItStringCreator(struct FVector ViewLocation, struct FRotator ViewRotation, struct FString& GoString, struct FString& LocString); // Function Engine.CheatManager.BugItStringCreator
	void BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll); // Function Engine.CheatManager.BugItGo
	void BugIt(struct FString ScreenShotDescription); // Function Engine.CheatManager.BugIt
}; 
 
 


//Class Engine.ChildConnection Size 7088
// Inherited 7080 bytes 
class UChildConnection : public UNetConnection
{

 public: 
	struct UNetConnection* Parent;  // Offset: 7080 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleLight_Seeded Size 320
// Inherited 288 bytes 
class UParticleModuleLight_Seeded : public UParticleModuleLight
{

 public: 
	struct FParticleRandomSeedInfo RandomSeedInfo;  // Offset: 288 Size: 32



 // Functions 
 public:
}; 
 
 


//Class Engine.Engine Size 3384
// Inherited 40 bytes 
class UEngine : public UObject
{

 public: 
	char pad_40[8];  // Offset: 40 Size: 8
	struct UFont* TinyFont;  // Offset: 48 Size: 8
	struct FSoftObjectPath TinyFontName;  // Offset: 56 Size: 24
	struct UFont* SmallFont;  // Offset: 80 Size: 8
	struct FSoftObjectPath SmallFontName;  // Offset: 88 Size: 24
	struct UFont* MediumFont;  // Offset: 112 Size: 8
	struct FSoftObjectPath MediumFontName;  // Offset: 120 Size: 24
	struct UFont* LargeFont;  // Offset: 144 Size: 8
	struct FSoftObjectPath LargeFontName;  // Offset: 152 Size: 24
	struct UFont* SubtitleFont;  // Offset: 176 Size: 8
	struct FSoftObjectPath SubtitleFontName;  // Offset: 184 Size: 24
	struct TArray<struct UFont*> AdditionalFonts;  // Offset: 208 Size: 16
	struct TArray<struct FString> AdditionalFontNames;  // Offset: 224 Size: 16
	UConsole* ConsoleClass;  // Offset: 240 Size: 8
	struct FSoftClassPath ConsoleClassName;  // Offset: 248 Size: 24
	UGameViewportClient* GameViewportClientClass;  // Offset: 272 Size: 8
	struct FSoftClassPath GameViewportClientClassName;  // Offset: 280 Size: 24
	ULocalPlayer* LocalPlayerClass;  // Offset: 304 Size: 8
	struct FSoftClassPath LocalPlayerClassName;  // Offset: 312 Size: 24
	AWorldSettings* WorldSettingsClass;  // Offset: 336 Size: 8
	struct FSoftClassPath WorldSettingsClassName;  // Offset: 344 Size: 24
	struct FSoftClassPath NavigationSystemClassName;  // Offset: 368 Size: 24
	UNavigationSystemBase* NavigationSystemClass;  // Offset: 392 Size: 8
	struct FSoftClassPath NavigationSystemConfigClassName;  // Offset: 400 Size: 24
	UNavigationSystemConfig* NavigationSystemConfigClass;  // Offset: 424 Size: 8
	struct FSoftClassPath AvoidanceManagerClassName;  // Offset: 432 Size: 24
	UAvoidanceManager* AvoidanceManagerClass;  // Offset: 456 Size: 8
	struct FSoftClassPath AIControllerClassName;  // Offset: 464 Size: 24
	UPhysicsCollisionHandler* PhysicsCollisionHandlerClass;  // Offset: 488 Size: 8
	struct FSoftClassPath PhysicsCollisionHandlerClassName;  // Offset: 496 Size: 24
	struct FSoftClassPath GameUserSettingsClassName;  // Offset: 520 Size: 24
	UGameUserSettings* GameUserSettingsClass;  // Offset: 544 Size: 8
	struct UGameUserSettings* GameUserSettings;  // Offset: 552 Size: 8
	ALevelScriptActor* LevelScriptActorClass;  // Offset: 560 Size: 8
	struct FSoftClassPath LevelScriptActorClassName;  // Offset: 568 Size: 24
	struct FSoftClassPath DefaultBlueprintBaseClassName;  // Offset: 592 Size: 24
	struct FSoftClassPath GameSingletonClassName;  // Offset: 616 Size: 24
	struct UObject* GameSingleton;  // Offset: 640 Size: 8
	struct FSoftClassPath AssetManagerClassName;  // Offset: 648 Size: 24
	struct UAssetManager* AssetManager;  // Offset: 672 Size: 8
	struct UTexture2D* DefaultTexture;  // Offset: 680 Size: 8
	struct FSoftObjectPath DefaultTextureName;  // Offset: 688 Size: 24
	struct UTexture* DefaultDiffuseTexture;  // Offset: 712 Size: 8
	struct FSoftObjectPath DefaultDiffuseTextureName;  // Offset: 720 Size: 24
	struct UTexture2D* DefaultBSPVertexTexture;  // Offset: 744 Size: 8
	struct FSoftObjectPath DefaultBSPVertexTextureName;  // Offset: 752 Size: 24
	struct UTexture2D* HighFrequencyNoiseTexture;  // Offset: 776 Size: 8
	struct FSoftObjectPath HighFrequencyNoiseTextureName;  // Offset: 784 Size: 24
	struct UTexture2D* DefaultBokehTexture;  // Offset: 808 Size: 8
	struct FSoftObjectPath DefaultBokehTextureName;  // Offset: 816 Size: 24
	struct UTexture2D* DefaultBloomKernelTexture;  // Offset: 840 Size: 8
	struct FSoftObjectPath DefaultBloomKernelTextureName;  // Offset: 848 Size: 24
	struct UMaterial* WireframeMaterial;  // Offset: 872 Size: 8
	struct FString WireframeMaterialName;  // Offset: 880 Size: 16
	struct UMaterial* DebugMeshMaterial;  // Offset: 896 Size: 8
	struct FSoftObjectPath DebugMeshMaterialName;  // Offset: 904 Size: 24
	struct UMaterial* EmissiveMeshMaterial;  // Offset: 928 Size: 8
	struct FSoftObjectPath EmissiveMeshMaterialName;  // Offset: 936 Size: 24
	struct UMaterial* LevelColorationLitMaterial;  // Offset: 960 Size: 8
	struct FString LevelColorationLitMaterialName;  // Offset: 968 Size: 16
	struct UMaterial* LevelColorationUnlitMaterial;  // Offset: 984 Size: 8
	struct FString LevelColorationUnlitMaterialName;  // Offset: 992 Size: 16
	struct UMaterial* LightingTexelDensityMaterial;  // Offset: 1008 Size: 8
	struct FString LightingTexelDensityName;  // Offset: 1016 Size: 16
	struct UMaterial* ShadedLevelColorationLitMaterial;  // Offset: 1032 Size: 8
	struct FString ShadedLevelColorationLitMaterialName;  // Offset: 1040 Size: 16
	struct UMaterial* ShadedLevelColorationUnlitMaterial;  // Offset: 1056 Size: 8
	struct FString ShadedLevelColorationUnlitMaterialName;  // Offset: 1064 Size: 16
	struct UMaterial* RemoveSurfaceMaterial;  // Offset: 1080 Size: 8
	struct FSoftObjectPath RemoveSurfaceMaterialName;  // Offset: 1088 Size: 24
	struct UMaterial* VertexColorMaterial;  // Offset: 1112 Size: 8
	struct FString VertexColorMaterialName;  // Offset: 1120 Size: 16
	struct UMaterial* VertexColorViewModeMaterial_ColorOnly;  // Offset: 1136 Size: 8
	struct FString VertexColorViewModeMaterialName_ColorOnly;  // Offset: 1144 Size: 16
	struct UMaterial* VertexColorViewModeMaterial_AlphaAsColor;  // Offset: 1160 Size: 8
	struct FString VertexColorViewModeMaterialName_AlphaAsColor;  // Offset: 1168 Size: 16
	struct UMaterial* VertexColorViewModeMaterial_RedOnly;  // Offset: 1184 Size: 8
	struct FString VertexColorViewModeMaterialName_RedOnly;  // Offset: 1192 Size: 16
	struct UMaterial* VertexColorViewModeMaterial_GreenOnly;  // Offset: 1208 Size: 8
	struct FString VertexColorViewModeMaterialName_GreenOnly;  // Offset: 1216 Size: 16
	struct UMaterial* VertexColorViewModeMaterial_BlueOnly;  // Offset: 1232 Size: 8
	struct FString VertexColorViewModeMaterialName_BlueOnly;  // Offset: 1240 Size: 16
	struct FSoftObjectPath DebugEditorMaterialName;  // Offset: 1256 Size: 24
	struct UMaterial* ConstraintLimitMaterial;  // Offset: 1280 Size: 8
	struct UMaterialInstanceDynamic* ConstraintLimitMaterialX;  // Offset: 1288 Size: 8
	struct UMaterialInstanceDynamic* ConstraintLimitMaterialXAxis;  // Offset: 1296 Size: 8
	struct UMaterialInstanceDynamic* ConstraintLimitMaterialY;  // Offset: 1304 Size: 8
	struct UMaterialInstanceDynamic* ConstraintLimitMaterialYAxis;  // Offset: 1312 Size: 8
	struct UMaterialInstanceDynamic* ConstraintLimitMaterialZ;  // Offset: 1320 Size: 8
	struct UMaterialInstanceDynamic* ConstraintLimitMaterialZAxis;  // Offset: 1328 Size: 8
	struct UMaterialInstanceDynamic* ConstraintLimitMaterialPrismatic;  // Offset: 1336 Size: 8
	struct UMaterial* InvalidLightmapSettingsMaterial;  // Offset: 1344 Size: 8
	struct FSoftObjectPath InvalidLightmapSettingsMaterialName;  // Offset: 1352 Size: 24
	struct UMaterial* PreviewShadowsIndicatorMaterial;  // Offset: 1376 Size: 8
	struct FSoftObjectPath PreviewShadowsIndicatorMaterialName;  // Offset: 1384 Size: 24
	struct UMaterial* ArrowMaterial;  // Offset: 1408 Size: 8
	struct UMaterialInstanceDynamic* ArrowMaterialYellow;  // Offset: 1416 Size: 8
	struct FSoftObjectPath ArrowMaterialName;  // Offset: 1424 Size: 24
	struct FLinearColor LightingOnlyBrightness;  // Offset: 1448 Size: 16
	struct TArray<struct FLinearColor> ShaderComplexityColors;  // Offset: 1464 Size: 16
	struct TArray<struct FLinearColor> QuadComplexityColors;  // Offset: 1480 Size: 16
	struct TArray<struct FLinearColor> LightComplexityColors;  // Offset: 1496 Size: 16
	struct TArray<struct FLinearColor> StationaryLightOverlapColors;  // Offset: 1512 Size: 16
	struct TArray<struct FLinearColor> LODColorationColors;  // Offset: 1528 Size: 16
	struct TArray<struct FLinearColor> DetailModeColorationColors;  // Offset: 1544 Size: 16
	struct TArray<struct FLinearColor> HLODColorationColors;  // Offset: 1560 Size: 16
	struct TArray<struct FLinearColor> StreamingAccuracyColors;  // Offset: 1576 Size: 16
	float MaxPixelShaderAdditiveComplexityCount;  // Offset: 1592 Size: 4
	float MaxES3PixelShaderAdditiveComplexityCount;  // Offset: 1596 Size: 4
	int32_t DecalStaticShadowMapSizeMin;  // Offset: 1600 Size: 4
	int32_t DecalStaticShadowMapSizeMax;  // Offset: 1604 Size: 4
	float MinLightMapDensity;  // Offset: 1608 Size: 4
	float IdealLightMapDensity;  // Offset: 1612 Size: 4
	float MaxLightMapDensity;  // Offset: 1616 Size: 4
	char bRenderLightMapDensityGrayscale : 1;  // Offset: 1620 Size: 1
	char pad_1620_1 : 7;  // Offset: 1620 Size: 1
	char pad_1621[4];  // Offset: 1621 Size: 4
	float RenderLightMapDensityGrayscaleScale;  // Offset: 1624 Size: 4
	float RenderLightMapDensityColorScale;  // Offset: 1628 Size: 4
	struct FLinearColor LightMapDensityVertexMappedColor;  // Offset: 1632 Size: 16
	struct FLinearColor LightMapDensitySelectedColor;  // Offset: 1648 Size: 16
	struct TArray<struct FStatColorMapping> StatColorMappings;  // Offset: 1664 Size: 16
	struct UPhysicalMaterial* DefaultPhysMaterial;  // Offset: 1680 Size: 8
	struct FSoftObjectPath DefaultPhysMaterialName;  // Offset: 1688 Size: 24
	struct TArray<struct FGameNameRedirect> ActiveGameNameRedirects;  // Offset: 1712 Size: 16
	struct TArray<struct FClassRedirect> ActiveClassRedirects;  // Offset: 1728 Size: 16
	struct TArray<struct FPluginRedirect> ActivePluginRedirects;  // Offset: 1744 Size: 16
	struct TArray<struct FStructRedirect> ActiveStructRedirects;  // Offset: 1760 Size: 16
	struct UTexture2D* PreIntegratedSkinBRDFTexture;  // Offset: 1776 Size: 8
	struct FSoftObjectPath PreIntegratedSkinBRDFTextureName;  // Offset: 1784 Size: 24
	struct UTexture2D* BlueNoiseTexture;  // Offset: 1808 Size: 8
	struct FSoftObjectPath BlueNoiseTextureName;  // Offset: 1816 Size: 24
	struct UTexture2D* MiniFontTexture;  // Offset: 1840 Size: 8
	struct FSoftObjectPath MiniFontTextureName;  // Offset: 1848 Size: 24
	struct UTexture* WeightMapPlaceholderTexture;  // Offset: 1872 Size: 8
	struct FSoftObjectPath WeightMapPlaceholderTextureName;  // Offset: 1880 Size: 24
	struct UTexture2D* LightMapDensityTexture;  // Offset: 1904 Size: 8
	struct FSoftObjectPath LightMapDensityTextureName;  // Offset: 1912 Size: 24
	char pad_1936[8];  // Offset: 1936 Size: 8
	struct UGameViewportClient* GameViewport;  // Offset: 1944 Size: 8
	struct TArray<struct FString> DeferredCommands;  // Offset: 1952 Size: 16
	float NearClipPlane;  // Offset: 1968 Size: 4
	char bSubtitlesEnabled : 1;  // Offset: 1972 Size: 1
	char bSubtitlesForcedOff : 1;  // Offset: 1972 Size: 1
	char pad_1972_1 : 6;  // Offset: 1972 Size: 1
	char pad_1973[4];  // Offset: 1973 Size: 4
	int32_t MaximumLoopIterationCount;  // Offset: 1976 Size: 4
	char bCanBlueprintsTickByDefault : 1;  // Offset: 1980 Size: 1
	char bOptimizeAnimBlueprintMemberVariableAccess : 1;  // Offset: 1980 Size: 1
	char bAllowMultiThreadedAnimationUpdate : 1;  // Offset: 1980 Size: 1
	char bEnableEditorPSysRealtimeLOD : 1;  // Offset: 1980 Size: 1
	char pad_1980_1 : 1;  // Offset: 1980 Size: 1
	char bSmoothFrameRate : 1;  // Offset: 1980 Size: 1
	char bUseFixedFrameRate : 1;  // Offset: 1980 Size: 1
	char pad_1980_2 : 1;  // Offset: 1980 Size: 1
	char pad_1981[4];  // Offset: 1981 Size: 4
	float FixedFrameRate;  // Offset: 1984 Size: 4
	struct FFloatRange SmoothedFrameRateRange;  // Offset: 1988 Size: 16
	char pad_2004[4];  // Offset: 2004 Size: 4
	struct UEngineCustomTimeStep* CustomTimeStep;  // Offset: 2008 Size: 8
	char pad_2016[32];  // Offset: 2016 Size: 32
	struct FSoftClassPath CustomTimeStepClassName;  // Offset: 2048 Size: 24
	struct UTimecodeProvider* TimecodeProvider;  // Offset: 2072 Size: 8
	char pad_2080[32];  // Offset: 2080 Size: 32
	struct FSoftClassPath TimecodeProviderClassName;  // Offset: 2112 Size: 24
	char pad_2136_1 : 7;  // Offset: 2136 Size: 1
	bool bGenerateDefaultTimecode : 1;  // Offset: 2136 Size: 1
	char pad_2137[3];  // Offset: 2137 Size: 3
	struct FFrameRate GenerateDefaultTimecodeFrameRate;  // Offset: 2140 Size: 8
	float GenerateDefaultTimecodeFrameDelay;  // Offset: 2148 Size: 4
	char bCheckForMultiplePawnsSpawnedInAFrame : 1;  // Offset: 2152 Size: 1
	char pad_2152_1 : 7;  // Offset: 2152 Size: 1
	char pad_2153[4];  // Offset: 2153 Size: 4
	int32_t NumPawnsAllowedToBeSpawnedInAFrame;  // Offset: 2156 Size: 4
	char bShouldGenerateLowQualityLightmaps : 1;  // Offset: 2160 Size: 1
	char pad_2160_1 : 7;  // Offset: 2160 Size: 1
	char pad_2161[4];  // Offset: 2161 Size: 4
	struct FColor C_WorldBox;  // Offset: 2164 Size: 4
	struct FColor C_BrushWire;  // Offset: 2168 Size: 4
	struct FColor C_AddWire;  // Offset: 2172 Size: 4
	struct FColor C_SubtractWire;  // Offset: 2176 Size: 4
	struct FColor C_SemiSolidWire;  // Offset: 2180 Size: 4
	struct FColor C_NonSolidWire;  // Offset: 2184 Size: 4
	struct FColor C_WireBackground;  // Offset: 2188 Size: 4
	struct FColor C_ScaleBoxHi;  // Offset: 2192 Size: 4
	struct FColor C_VolumeCollision;  // Offset: 2196 Size: 4
	struct FColor C_BSPCollision;  // Offset: 2200 Size: 4
	struct FColor C_OrthoBackground;  // Offset: 2204 Size: 4
	struct FColor C_Volume;  // Offset: 2208 Size: 4
	struct FColor C_BrushShape;  // Offset: 2212 Size: 4
	float StreamingDistanceFactor;  // Offset: 2216 Size: 4
	char pad_2220[4];  // Offset: 2220 Size: 4
	struct FDirectoryPath GameScreenshotSaveDirectory;  // Offset: 2224 Size: 16
	enum class ETransitionType TransitionType;  // Offset: 2240 Size: 1
	char pad_2241[7];  // Offset: 2241 Size: 7
	struct FString TransitionDescription;  // Offset: 2248 Size: 16
	struct FString TransitionGameMode;  // Offset: 2264 Size: 16
	char bAllowMatureLanguage : 1;  // Offset: 2280 Size: 1
	char pad_2280_1 : 7;  // Offset: 2280 Size: 1
	char pad_2281[4];  // Offset: 2281 Size: 4
	float CameraRotationThreshold;  // Offset: 2284 Size: 4
	float CameraTranslationThreshold;  // Offset: 2288 Size: 4
	float PrimitiveProbablyVisibleTime;  // Offset: 2292 Size: 4
	float MaxOcclusionPixelsFraction;  // Offset: 2296 Size: 4
	char bPauseOnLossOfFocus : 1;  // Offset: 2300 Size: 1
	char pad_2300_1 : 7;  // Offset: 2300 Size: 1
	char pad_2301[4];  // Offset: 2301 Size: 4
	int32_t MaxParticleResize;  // Offset: 2304 Size: 4
	int32_t MaxParticleResizeWarn;  // Offset: 2308 Size: 4
	struct TArray<struct FDropNoteInfo> PendingDroppedNotes;  // Offset: 2312 Size: 16
	float NetClientTicksPerSecond;  // Offset: 2328 Size: 4
	float DisplayGamma;  // Offset: 2332 Size: 4
	float MinDesiredFrameRate;  // Offset: 2336 Size: 4
	struct FLinearColor DefaultSelectedMaterialColor;  // Offset: 2340 Size: 16
	struct FLinearColor SelectedMaterialColor;  // Offset: 2356 Size: 16
	struct FLinearColor SelectionOutlineColor;  // Offset: 2372 Size: 16
	struct FLinearColor SubduedSelectionOutlineColor;  // Offset: 2388 Size: 16
	struct FLinearColor SelectedMaterialColorOverride;  // Offset: 2404 Size: 16
	char pad_2420_1 : 7;  // Offset: 2420 Size: 1
	bool bIsOverridingSelectedColor : 1;  // Offset: 2420 Size: 1
	char pad_2421[3];  // Offset: 2421 Size: 3
	char bEnableOnScreenDebugMessages : 1;  // Offset: 2424 Size: 1
	char bEnableOnScreenDebugMessagesDisplay : 1;  // Offset: 2424 Size: 1
	char bSuppressMapWarnings : 1;  // Offset: 2424 Size: 1
	char bDisableAILogging : 1;  // Offset: 2424 Size: 1
	char pad_2424_1 : 4;  // Offset: 2424 Size: 1
	char pad_2425[4];  // Offset: 2425 Size: 4
	uint32_t bEnableVisualLogRecordingOnStart;  // Offset: 2428 Size: 4
	int32_t ScreenSaverInhibitorSemaphore;  // Offset: 2432 Size: 4
	char bLockReadOnlyLevels : 1;  // Offset: 2436 Size: 1
	char pad_2436_1 : 7;  // Offset: 2436 Size: 1
	char pad_2437[4];  // Offset: 2437 Size: 4
	struct FString ParticleEventManagerClassPath;  // Offset: 2440 Size: 16
	float SelectionHighlightIntensity;  // Offset: 2456 Size: 4
	float BSPSelectionHighlightIntensity;  // Offset: 2460 Size: 4
	float SelectionHighlightIntensityBillboards;  // Offset: 2464 Size: 4
	char pad_2468[620];  // Offset: 2468 Size: 620
	struct TArray<struct FNetDriverDefinition> NetDriverDefinitions;  // Offset: 3088 Size: 16
	struct TArray<struct FString> ServerActors;  // Offset: 3104 Size: 16
	struct TArray<struct FString> RuntimeServerActors;  // Offset: 3120 Size: 16
	float NetErrorLogInterval;  // Offset: 3136 Size: 4
	char bStartedLoadMapMovie : 1;  // Offset: 3140 Size: 1
	char pad_3140_1 : 7;  // Offset: 3140 Size: 1
	char pad_3141[28];  // Offset: 3141 Size: 28
	int32_t NextWorldContextHandle;  // Offset: 3168 Size: 4
	char pad_3172[212];  // Offset: 3172 Size: 212



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleAttractorPointGravity Size 120
// Inherited 48 bytes 
class UParticleModuleAttractorPointGravity : public UParticleModuleAttractorBase
{

 public: 
	struct FVector position;  // Offset: 48 Size: 12
	float Radius;  // Offset: 60 Size: 4
	struct UDistributionFloat* Strength;  // Offset: 64 Size: 8
	struct FRawDistributionFloat StrengthRaw;  // Offset: 72 Size: 48



 // Functions 
 public:
}; 
 
 


//Class Engine.RectLightComponent Size 896
// Inherited 864 bytes 
class URectLightComponent : public ULocalLightComponent
{

 public: 
	float SourceWidth;  // Offset: 856 Size: 4
	float SourceHeight;  // Offset: 860 Size: 4
	float BarnDoorAngle;  // Offset: 864 Size: 4
	float BarnDoorLength;  // Offset: 868 Size: 4
	struct UTexture* SourceTexture;  // Offset: 872 Size: 8
	char pad_888[8];  // Offset: 888 Size: 8



 // Functions 
 public:
	void SetSourceWidth(float bNewValue); // Function Engine.RectLightComponent.SetSourceWidth
	void SetSourceTexture(struct UTexture* bNewValue); // Function Engine.RectLightComponent.SetSourceTexture
	void SetSourceHeight(float NewValue); // Function Engine.RectLightComponent.SetSourceHeight
	void SetBarnDoorLength(float NewValue); // Function Engine.RectLightComponent.SetBarnDoorLength
	void SetBarnDoorAngle(float NewValue); // Function Engine.RectLightComponent.SetBarnDoorAngle
}; 
 
 


//Class Engine.ScriptViewportClient Size 56
// Inherited 40 bytes 
class UScriptViewportClient : public UObject
{

 public: 
	char pad_40[16];  // Offset: 40 Size: 16



 // Functions 
 public:
}; 
 
 


//Class Engine.SubsystemBlueprintLibrary Size 40
// Inherited 40 bytes 
class USubsystemBlueprintLibrary : public UBlueprintFunctionLibrary
{

 public: 



 // Functions 
 public:
	struct UWorldSubsystem* GetWorldSubsystem(struct UObject* ContextObject, UWorldSubsystem* Class); // Function Engine.SubsystemBlueprintLibrary.GetWorldSubsystem
	struct ULocalPlayerSubsystem* GetLocalPlayerSubSystemFromPlayerController(struct APlayerController* PlayerController, ULocalPlayerSubsystem* Class); // Function Engine.SubsystemBlueprintLibrary.GetLocalPlayerSubSystemFromPlayerController
	struct ULocalPlayerSubsystem* GetLocalPlayerSubsystem(struct UObject* ContextObject, ULocalPlayerSubsystem* Class); // Function Engine.SubsystemBlueprintLibrary.GetLocalPlayerSubsystem
	struct UGameInstanceSubsystem* GetGameInstanceSubsystem(struct UObject* ContextObject, UGameInstanceSubsystem* Class); // Function Engine.SubsystemBlueprintLibrary.GetGameInstanceSubsystem
	struct UEngineSubsystem* GetEngineSubsystem(UEngineSubsystem* Class); // Function Engine.SubsystemBlueprintLibrary.GetEngineSubsystem
}; 
 
 


//Class Engine.GameViewportClient Size 864
// Inherited 56 bytes 
class UGameViewportClient : public UScriptViewportClient
{

 public: 
	char pad_56[8];  // Offset: 56 Size: 8
	struct UConsole* ViewportConsole;  // Offset: 64 Size: 8
	struct TArray<struct FDebugDisplayProperty> DebugProperties;  // Offset: 72 Size: 16
	char pad_88[16];  // Offset: 88 Size: 16
	int32_t MaxSplitscreenPlayers;  // Offset: 104 Size: 4
	char pad_108[12];  // Offset: 108 Size: 12
	struct UWorld* World;  // Offset: 120 Size: 8
	struct UGameInstance* GameInstance;  // Offset: 128 Size: 8
	char pad_136[728];  // Offset: 136 Size: 728



 // Functions 
 public:
	void SSSwapControllers(); // Function Engine.GameViewportClient.SSSwapControllers
	void ShowTitleSafeArea(); // Function Engine.GameViewportClient.ShowTitleSafeArea
	void SetConsoleTarget(int32_t PlayerIndex); // Function Engine.GameViewportClient.SetConsoleTarget
}; 
 
 


//Class Engine.FloatingPawnMovement Size 336
// Inherited 312 bytes 
class UFloatingPawnMovement : public UPawnMovementComponent
{

 public: 
	float MaxSpeed;  // Offset: 312 Size: 4
	float Acceleration;  // Offset: 316 Size: 4
	float Deceleration;  // Offset: 320 Size: 4
	float TurningBoost;  // Offset: 324 Size: 4
	char bPositionCorrected : 1;  // Offset: 328 Size: 1
	char pad_328_1 : 7;  // Offset: 328 Size: 1
	char pad_329[8];  // Offset: 329 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.AnimMontage Size 464
// Inherited 168 bytes 
class UAnimMontage : public UAnimCompositeBase
{

 public: 
	struct FAlphaBlend BlendIn;  // Offset: 168 Size: 48
	float BlendInTime;  // Offset: 216 Size: 4
	char pad_220[4];  // Offset: 220 Size: 4
	struct FAlphaBlend BlendOut;  // Offset: 224 Size: 48
	float BlendOutTime;  // Offset: 272 Size: 4
	float BlendOutTriggerTime;  // Offset: 276 Size: 4
	struct FName SyncGroup;  // Offset: 280 Size: 8
	int32_t SyncSlotIndex;  // Offset: 288 Size: 4
	char pad_292[4];  // Offset: 292 Size: 4
	struct FMarkerSyncData MarkerData;  // Offset: 296 Size: 32
	struct TArray<struct FCompositeSection> CompositeSections;  // Offset: 328 Size: 16
	struct TArray<struct FSlotAnimationTrack> SlotAnimTracks;  // Offset: 344 Size: 16
	struct TArray<struct FBranchingPoint> BranchingPoints;  // Offset: 360 Size: 16
	char pad_376_1 : 7;  // Offset: 376 Size: 1
	bool bEnableRootMotionTranslation : 1;  // Offset: 376 Size: 1
	char pad_377_1 : 7;  // Offset: 377 Size: 1
	bool bEnableRootMotionRotation : 1;  // Offset: 377 Size: 1
	char pad_378_1 : 7;  // Offset: 378 Size: 1
	bool bEnableAutoBlendOut : 1;  // Offset: 378 Size: 1
	enum class ERootMotionRootLock RootMotionRootLock;  // Offset: 379 Size: 1
	char pad_380[4];  // Offset: 380 Size: 4
	struct TArray<struct FBranchingPointMarker> BranchingPointMarkers;  // Offset: 384 Size: 16
	struct TArray<int32_t> BranchingPointStateNotifyIndices;  // Offset: 400 Size: 16
	struct FTimeStretchCurve TimeStretchCurve;  // Offset: 416 Size: 40
	struct FName TimeStretchCurveName;  // Offset: 456 Size: 8



 // Functions 
 public:
	float GetDefaultBlendOutTime(); // Function Engine.AnimMontage.GetDefaultBlendOutTime
}; 
 
 


//Class Engine.HUD Size 784
// Inherited 544 bytes 
class AHUD : public AActor
{

 public: 
	struct APlayerController* PlayerOwner;  // Offset: 544 Size: 8
	char bLostFocusPaused : 1;  // Offset: 552 Size: 1
	char bShowHUD : 1;  // Offset: 552 Size: 1
	char bShowDebugInfo : 1;  // Offset: 552 Size: 1
	char pad_552_1 : 5;  // Offset: 552 Size: 1
	char pad_553[4];  // Offset: 553 Size: 4
	int32_t CurrentTargetIndex;  // Offset: 556 Size: 4
	char bShowHitBoxDebugInfo : 1;  // Offset: 560 Size: 1
	char bShowOverlays : 1;  // Offset: 560 Size: 1
	char bEnableDebugTextShadow : 1;  // Offset: 560 Size: 1
	char pad_560_1 : 5;  // Offset: 560 Size: 1
	char pad_561[8];  // Offset: 561 Size: 8
	struct TArray<struct AActor*> PostRenderedActors;  // Offset: 568 Size: 16
	char pad_584[8];  // Offset: 584 Size: 8
	struct TArray<struct FName> DebugDisplay;  // Offset: 592 Size: 16
	struct TArray<struct FName> ToggledDebugCategories;  // Offset: 608 Size: 16
	struct UCanvas* Canvas;  // Offset: 624 Size: 8
	struct UCanvas* DebugCanvas;  // Offset: 632 Size: 8
	struct TArray<struct FDebugTextInfo> DebugTextList;  // Offset: 640 Size: 16
	AActor* ShowDebugTargetDesiredClass;  // Offset: 656 Size: 8
	struct AActor* ShowDebugTargetActor;  // Offset: 664 Size: 8
	char pad_672[112];  // Offset: 672 Size: 112



 // Functions 
 public:
	void ShowHUD(); // Function Engine.HUD.ShowHUD
	void ShowDebugToggleSubCategory(struct FName Category); // Function Engine.HUD.ShowDebugToggleSubCategory
	void ShowDebugForReticleTargetToggle(AActor* DesiredClass); // Function Engine.HUD.ShowDebugForReticleTargetToggle
	void ShowDebug(struct FName DebugType); // Function Engine.HUD.ShowDebug
	void RemoveDebugText(struct AActor* SrcActor, bool bLeaveDurationText); // Function Engine.HUD.RemoveDebugText
	void RemoveAllDebugStrings(); // Function Engine.HUD.RemoveAllDebugStrings
	void ReceiveHitBoxRelease(struct FName BoxName); // Function Engine.HUD.ReceiveHitBoxRelease
	void ReceiveHitBoxEndCursorOver(struct FName BoxName); // Function Engine.HUD.ReceiveHitBoxEndCursorOver
	void ReceiveHitBoxClick(struct FName BoxName); // Function Engine.HUD.ReceiveHitBoxClick
	void ReceiveHitBoxBeginCursorOver(struct FName BoxName); // Function Engine.HUD.ReceiveHitBoxBeginCursorOver
	void ReceiveDrawHUD(int32_t SizeX, int32_t SizeY); // Function Engine.HUD.ReceiveDrawHUD
	struct FVector Project(struct FVector Location); // Function Engine.HUD.Project
	void PreviousDebugTarget(); // Function Engine.HUD.PreviousDebugTarget
	void NextDebugTarget(); // Function Engine.HUD.NextDebugTarget
	void GetTextSize(struct FString Text, float& OutWidth, float& OutHeight, struct UFont* Font, float Scale); // Function Engine.HUD.GetTextSize
	struct APlayerController* GetOwningPlayerController(); // Function Engine.HUD.GetOwningPlayerController
	struct APawn* GetOwningPawn(); // Function Engine.HUD.GetOwningPawn
	void GetActorsInSelectionRectangle(AActor* ClassFilter, struct FVector2D& FirstPoint, struct FVector2D& SecondPoint, struct TArray<struct AActor*>& OutActors, bool bIncludeNonCollidingComponents, bool bActorMustBeFullyEnclosed); // Function Engine.HUD.GetActorsInSelectionRectangle
	void DrawTextureSimple(struct UTexture* Texture, float ScreenX, float ScreenY, float Scale, bool bScalePosition); // Function Engine.HUD.DrawTextureSimple
	void DrawTexture(struct UTexture* Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, struct FLinearColor TintColor, enum class EBlendMode BlendMode, float Scale, bool bScalePosition, float Rotation, struct FVector2D RotPivot); // Function Engine.HUD.DrawTexture
	void DrawText(struct FString Text, struct FLinearColor TextColor, float ScreenX, float ScreenY, struct UFont* Font, float Scale, bool bScalePosition); // Function Engine.HUD.DrawText
	void DrawRect(struct FLinearColor RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH); // Function Engine.HUD.DrawRect
	void DrawMaterialTriangle(struct UMaterialInterface* Material, struct FVector2D V0_Pos, struct FVector2D V1_Pos, struct FVector2D V2_Pos, struct FVector2D V0_UV, struct FVector2D V1_UV, struct FVector2D V2_UV, struct FLinearColor V0_Color, struct FLinearColor V1_Color, struct FLinearColor V2_Color); // Function Engine.HUD.DrawMaterialTriangle
	void DrawMaterialSimple(struct UMaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, bool bScalePosition); // Function Engine.HUD.DrawMaterialSimple
	void DrawMaterial(struct UMaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale, bool bScalePosition, float Rotation, struct FVector2D RotPivot); // Function Engine.HUD.DrawMaterial
	void DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, struct FLinearColor LineColor, float LineThickness); // Function Engine.HUD.DrawLine
	void Deproject(float ScreenX, float ScreenY, struct FVector& WorldPosition, struct FVector& WorldDirection); // Function Engine.HUD.Deproject
	void AddHitBox(struct FVector2D position, struct FVector2D Size, struct FName InName, bool bConsumesInput, int32_t Priority); // Function Engine.HUD.AddHitBox
	void AddDebugText(struct FString DebugText, struct AActor* SrcActor, float Duration, struct FVector Offset, struct FVector DesiredOffset, struct FColor TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, struct UFont* InFont, float FontScale, bool bDrawShadow); // Function Engine.HUD.AddDebugText
}; 
 
 


//Class Engine.InterpTrackFloatMaterialParam Size 168
// Inherited 144 bytes 
class UInterpTrackFloatMaterialParam : public UInterpTrackFloatBase
{

 public: 
	struct TArray<struct UMaterialInterface*> TargetMaterials;  // Offset: 144 Size: 16
	struct FName ParamName;  // Offset: 160 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.LevelScriptActor Size 552
// Inherited 544 bytes 
class ALevelScriptActor : public AActor
{

 public: 
	char bInputEnabled : 1;  // Offset: 544 Size: 1
	char pad_544_1 : 7;  // Offset: 544 Size: 1
	char pad_545[8];  // Offset: 545 Size: 8



 // Functions 
 public:
	void WorldOriginLocationChanged(struct FIntVector OldOriginLocation, struct FIntVector NewOriginLocation); // Function Engine.LevelScriptActor.WorldOriginLocationChanged
	void SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning); // Function Engine.LevelScriptActor.SetCinematicMode
	bool RemoteEvent(struct FName EventName); // Function Engine.LevelScriptActor.RemoteEvent
	void LevelReset(); // Function Engine.LevelScriptActor.LevelReset
}; 
 
 


//Class Engine.SoundNodeMixer Size 88
// Inherited 72 bytes 
class USoundNodeMixer : public USoundNode
{

 public: 
	struct TArray<float> InputVolume;  // Offset: 72 Size: 16



 // Functions 
 public:
}; 
 
 


//Class Engine.DefaultPawn Size 680
// Inherited 640 bytes 
class ADefaultPawn : public APawn
{

 public: 
	float BaseTurnRate;  // Offset: 640 Size: 4
	float BaseLookUpRate;  // Offset: 644 Size: 4
	struct UPawnMovementComponent* MovementComponent;  // Offset: 648 Size: 8
	struct USphereComponent* CollisionComponent;  // Offset: 656 Size: 8
	struct UStaticMeshComponent* MeshComponent;  // Offset: 664 Size: 8
	char bAddDefaultMovementBindings : 1;  // Offset: 672 Size: 1
	char pad_672_1 : 7;  // Offset: 672 Size: 1
	char pad_673[8];  // Offset: 673 Size: 8



 // Functions 
 public:
	void TurnAtRate(float Rate); // Function Engine.DefaultPawn.TurnAtRate
	void MoveUp_World(float Val); // Function Engine.DefaultPawn.MoveUp_World
	void MoveRight(float Val); // Function Engine.DefaultPawn.MoveRight
	void MoveForward(float Val); // Function Engine.DefaultPawn.MoveForward
	void LookUpAtRate(float Rate); // Function Engine.DefaultPawn.LookUpAtRate
}; 
 
 


//Class Engine.AnimCompress_RemoveLinearKeys Size 96
// Inherited 64 bytes 
class UAnimCompress_RemoveLinearKeys : public UAnimCompress
{

 public: 
	float MaxPosDiff;  // Offset: 64 Size: 4
	float MaxAngleDiff;  // Offset: 68 Size: 4
	float MaxScaleDiff;  // Offset: 72 Size: 4
	float MaxEffectorDiff;  // Offset: 76 Size: 4
	float MinEffectorDiff;  // Offset: 80 Size: 4
	float EffectorDiffSocket;  // Offset: 84 Size: 4
	float ParentKeyScale;  // Offset: 88 Size: 4
	char bRetarget : 1;  // Offset: 92 Size: 1
	char bActuallyFilterLinearKeys : 1;  // Offset: 92 Size: 1
	char pad_92_1 : 6;  // Offset: 92 Size: 1
	char pad_93[4];  // Offset: 93 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionReflectionCapturePassSwitch Size 104
// Inherited 64 bytes 
class UMaterialExpressionReflectionCapturePassSwitch : public UMaterialExpression
{

 public: 
	struct FExpressionInput Default;  // Offset: 64 Size: 20
	struct FExpressionInput Reflection;  // Offset: 84 Size: 20



 // Functions 
 public:
}; 
 
 


//Class Engine.SpectatorPawn Size 680
// Inherited 680 bytes 
class ASpectatorPawn : public ADefaultPawn
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.InputKeyDelegateBinding Size 56
// Inherited 40 bytes 
class UInputKeyDelegateBinding : public UInputDelegateBinding
{

 public: 
	struct TArray<struct FBlueprintInputKeyDelegateBinding> InputKeyDelegateBindings;  // Offset: 40 Size: 16



 // Functions 
 public:
}; 
 
 


//Class Engine.WorldSettings Size 928
// Inherited 544 bytes 
class AWorldSettings : public AInfo
{

 public: 
	char pad_544[8];  // Offset: 544 Size: 8
	int32_t VisibilityCellSize;  // Offset: 552 Size: 4
	enum class EVisibilityAggressiveness VisibilityAggressiveness;  // Offset: 556 Size: 1
	char bPrecomputeVisibility : 1;  // Offset: 557 Size: 1
	char bPlaceCellsOnlyAlongCameraTracks : 1;  // Offset: 557 Size: 1
	char bEnableWorldBoundsChecks : 1;  // Offset: 557 Size: 1
	char bEnableNavigationSystem : 1;  // Offset: 557 Size: 1
	char bEnableAISystem : 1;  // Offset: 557 Size: 1
	char bEnableWorldComposition : 1;  // Offset: 557 Size: 1
	char bUseClientSideLevelStreamingVolumes : 1;  // Offset: 557 Size: 1
	char bEnableWorldOriginRebasing : 1;  // Offset: 557 Size: 1
	char bWorldGravitySet : 1;  // Offset: 558 Size: 1
	char bGlobalGravitySet : 1;  // Offset: 558 Size: 1
	char bMinimizeBSPSections : 1;  // Offset: 558 Size: 1
	char bForceNoPrecomputedLighting : 1;  // Offset: 558 Size: 1
	char bHighPriorityLoading : 1;  // Offset: 558 Size: 1
	char bHighPriorityLoadingLocal : 1;  // Offset: 558 Size: 1
	char bOverrideDefaultBroadphaseSettings : 1;  // Offset: 558 Size: 1
	char pad_558_1 : 1;  // Offset: 558 Size: 1
	char pad_559[2];  // Offset: 559 Size: 2
	struct UNavigationSystemConfig* NavigationSystemConfig;  // Offset: 560 Size: 8
	struct UNavigationSystemConfig* NavigationSystemConfigOverride;  // Offset: 568 Size: 8
	float WorldToMeters;  // Offset: 576 Size: 4
	float KillZ;  // Offset: 580 Size: 4
	UDamageType* KillZDamageType;  // Offset: 584 Size: 8
	float WorldGravityZ;  // Offset: 592 Size: 4
	float GlobalGravityZ;  // Offset: 596 Size: 4
	ADefaultPhysicsVolume* DefaultPhysicsVolumeClass;  // Offset: 600 Size: 8
	UPhysicsCollisionHandler* PhysicsCollisionHandlerClass;  // Offset: 608 Size: 8
	AGameModeBase* DefaultGameMode;  // Offset: 616 Size: 8
	AGameNetworkManager* GameNetworkManagerClass;  // Offset: 624 Size: 8
	int32_t PackedLightAndShadowMapTextureSize;  // Offset: 632 Size: 4
	float MaxRGBMLimitationInReflectionCaptureForAutoDetection;  // Offset: 636 Size: 4
	struct FVector DefaultColorScale;  // Offset: 640 Size: 12
	float DefaultMaxDistanceFieldOcclusionDistance;  // Offset: 652 Size: 4
	float GlobalDistanceFieldViewDistance;  // Offset: 656 Size: 4
	float DynamicIndirectShadowsSelfShadowingIntensity;  // Offset: 660 Size: 4
	struct FReverbSettings DefaultReverbSettings;  // Offset: 664 Size: 32
	struct FInteriorSettings DefaultAmbientZoneSettings;  // Offset: 696 Size: 36
	char pad_732[4];  // Offset: 732 Size: 4
	struct USoundMix* DefaultBaseSoundMix;  // Offset: 736 Size: 8
	float TimeDilation;  // Offset: 744 Size: 4
	float MatineeTimeDilation;  // Offset: 748 Size: 4
	float DemoPlayTimeDilation;  // Offset: 752 Size: 4
	float MinGlobalTimeDilation;  // Offset: 756 Size: 4
	float MaxGlobalTimeDilation;  // Offset: 760 Size: 4
	float MinUndilatedFrameTime;  // Offset: 764 Size: 4
	float MaxUndilatedFrameTime;  // Offset: 768 Size: 4
	struct FBroadphaseSettings BroadphaseSettings;  // Offset: 772 Size: 64
	char pad_836[4];  // Offset: 836 Size: 4
	struct APlayerState* Pauser;  // Offset: 840 Size: 8
	struct TArray<struct FNetViewer> ReplicationViewers;  // Offset: 848 Size: 16
	struct TArray<struct UAssetUserData*> AssetUserData;  // Offset: 864 Size: 16
	struct APlayerState* PauserPlayerState;  // Offset: 880 Size: 8
	int32_t MaxNumberOfBookmarks;  // Offset: 888 Size: 4
	char pad_892[4];  // Offset: 892 Size: 4
	UBookmarkBase* DefaultBookmarkClass;  // Offset: 896 Size: 8
	struct TArray<struct UBookmarkBase*> BookmarkArray;  // Offset: 904 Size: 16
	UBookmarkBase* LastBookmarkClass;  // Offset: 920 Size: 8



 // Functions 
 public:
	void OnRep_WorldGravityZ(); // Function Engine.WorldSettings.OnRep_WorldGravityZ
}; 
 
 


//Class Engine.MaterialExpressionArctangentFast Size 88
// Inherited 64 bytes 
class UMaterialExpressionArctangentFast : public UMaterialExpression
{

 public: 
	struct FExpressionInput Input;  // Offset: 64 Size: 20
	char pad_84[4];  // Offset: 84 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.SphereReflectionCaptureComponent Size 768
// Inherited 752 bytes 
class USphereReflectionCaptureComponent : public UReflectionCaptureComponent
{

 public: 
	float InfluenceRadius;  // Offset: 752 Size: 4
	float CaptureDistanceScale;  // Offset: 756 Size: 4
	struct UDrawSphereComponent* PreviewInfluenceRadius;  // Offset: 760 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.World Size 1944
// Inherited 40 bytes 
class UWorld : public UObject
{

 public: 
	char pad_40[8];  // Offset: 40 Size: 8
	struct ULevel* PersistentLevel;  // Offset: 48 Size: 8
	struct UNetDriver* NetDriver;  // Offset: 56 Size: 8
	struct ULineBatchComponent* LineBatcher;  // Offset: 64 Size: 8
	struct ULineBatchComponent* PersistentLineBatcher;  // Offset: 72 Size: 8
	struct ULineBatchComponent* ForegroundLineBatcher;  // Offset: 80 Size: 8
	struct AGameNetworkManager* NetworkManager;  // Offset: 88 Size: 8
	struct UPhysicsCollisionHandler* PhysicsCollisionHandler;  // Offset: 96 Size: 8
	struct TArray<struct UObject*> ExtraReferencedObjects;  // Offset: 104 Size: 16
	struct TArray<struct UObject*> PerModuleDataObjects;  // Offset: 120 Size: 16
	struct TArray<struct ULevelStreaming*> StreamingLevels;  // Offset: 136 Size: 16
	struct FStreamingLevelsToConsider StreamingLevelsToConsider;  // Offset: 152 Size: 40
	struct FString StreamingLevelsPrefix;  // Offset: 192 Size: 16
	struct ULevel* CurrentLevelPendingVisibility;  // Offset: 208 Size: 8
	struct ULevel* CurrentLevelPendingInvisibility;  // Offset: 216 Size: 8
	struct UDemoNetDriver* DemoNetDriver;  // Offset: 224 Size: 8
	struct AParticleEventManager* MyParticleEventManager;  // Offset: 232 Size: 8
	struct APhysicsVolume* DefaultPhysicsVolume;  // Offset: 240 Size: 8
	char pad_248[22];  // Offset: 248 Size: 22
	char pad_270_1 : 2;  // Offset: 270 Size: 1
	char bAreConstraintsDirty : 1;  // Offset: 270 Size: 1
	char pad_270_2 : 5;  // Offset: 270 Size: 1
	char pad_271[2];  // Offset: 271 Size: 2
	struct UNavigationSystemBase* NavigationSystem;  // Offset: 272 Size: 8
	struct AGameModeBase* AuthorityGameMode;  // Offset: 280 Size: 8
	struct AGameStateBase* GameState;  // Offset: 288 Size: 8
	struct UAISystemBase* AISystem;  // Offset: 296 Size: 8
	struct UAvoidanceManager* AvoidanceManager;  // Offset: 304 Size: 8
	struct TArray<struct ULevel*> Levels;  // Offset: 312 Size: 16
	struct TArray<struct FLevelCollection> LevelCollections;  // Offset: 328 Size: 16
	char pad_344[40];  // Offset: 344 Size: 40
	struct UGameInstance* OwningGameInstance;  // Offset: 384 Size: 8
	struct TArray<struct UMaterialParameterCollectionInstance*> ParameterCollectionInstances;  // Offset: 392 Size: 16
	struct UCanvas* CanvasForRenderingToTarget;  // Offset: 408 Size: 8
	struct UCanvas* CanvasForDrawMaterialToRenderTarget;  // Offset: 416 Size: 8
	char pad_424[80];  // Offset: 424 Size: 80
	struct UPhysicsFieldComponent* PhysicsField;  // Offset: 504 Size: 8
	struct TSet<struct UActorComponent*> ComponentsThatNeedPreEndOfFrameSync;  // Offset: 512 Size: 80
	struct TArray<struct UActorComponent*> ComponentsThatNeedEndOfFrameUpdate;  // Offset: 592 Size: 16
	struct TArray<struct UActorComponent*> ComponentsThatNeedEndOfFrameUpdate_OnGameThread;  // Offset: 608 Size: 16
	char pad_624[880];  // Offset: 624 Size: 880
	struct UWorldComposition* WorldComposition;  // Offset: 1504 Size: 8
	char pad_1512[144];  // Offset: 1512 Size: 144
	struct FWorldPSCPool PSCPool;  // Offset: 1656 Size: 88
	char pad_1744[200];  // Offset: 1744 Size: 200



 // Functions 
 public:
	struct AWorldSettings* K2_GetWorldSettings(); // Function Engine.World.K2_GetWorldSettings
	void HandleTimelineScrubbed(); // Function Engine.World.HandleTimelineScrubbed
}; 
 
 


//Class Engine.ActorComponentInstanceDataTransientOuter Size 40
// Inherited 40 bytes 
class UActorComponentInstanceDataTransientOuter : public UObject
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.CameraAnimInst Size 272
// Inherited 40 bytes 
class UCameraAnimInst : public UObject
{

 public: 
	struct UCameraAnim* CamAnim;  // Offset: 40 Size: 8
	struct UInterpGroupInst* InterpGroupInst;  // Offset: 48 Size: 8
	char pad_56[24];  // Offset: 56 Size: 24
	float PlayRate;  // Offset: 80 Size: 4
	char pad_84[20];  // Offset: 84 Size: 20
	struct UInterpTrackMove* MoveTrack;  // Offset: 104 Size: 8
	struct UInterpTrackInstMove* MoveInst;  // Offset: 112 Size: 8
	enum class ECameraShakePlaySpace PlaySpace;  // Offset: 120 Size: 1
	char pad_121[151];  // Offset: 121 Size: 151



 // Functions 
 public:
	void Stop(bool bImmediate); // Function Engine.CameraAnimInst.Stop
	void SetScale(float NewDuration); // Function Engine.CameraAnimInst.SetScale
	void SetDuration(float NewDuration); // Function Engine.CameraAnimInst.SetDuration
}; 
 
 


//Class Engine.UserDefinedStruct Size 264
// Inherited 192 bytes 
class UUserDefinedStruct : public UScriptStruct
{

 public: 
	enum class EUserDefinedStructureStatus status;  // Offset: 192 Size: 1
	char pad_193[3];  // Offset: 193 Size: 3
	struct FGuid Guid;  // Offset: 196 Size: 16
	char pad_212[52];  // Offset: 212 Size: 52



 // Functions 
 public:
}; 
 
 


//Class Engine.StaticMeshActor Size 560
// Inherited 544 bytes 
class AStaticMeshActor : public AActor
{

 public: 
	struct UStaticMeshComponent* StaticMeshComponent;  // Offset: 544 Size: 8
	char pad_552_1 : 7;  // Offset: 552 Size: 1
	bool bStaticMeshReplicateMovement : 1;  // Offset: 552 Size: 1
	enum class ENavDataGatheringMode NavigationGeometryGatheringMode;  // Offset: 553 Size: 1
	char pad_554[6];  // Offset: 554 Size: 6



 // Functions 
 public:
	void SetMobility(enum class EComponentMobility InMobility); // Function Engine.StaticMeshActor.SetMobility
}; 
 
 


//Class Engine.AnimNotify_ResumeClothingSimulation Size 56
// Inherited 56 bytes 
class UAnimNotify_ResumeClothingSimulation : public UAnimNotify
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.GameMode Size 776
// Inherited 704 bytes 
class AGameMode : public AGameModeBase
{

 public: 
	struct FName MatchState;  // Offset: 704 Size: 8
	char bDelayedStart : 1;  // Offset: 712 Size: 1
	char pad_712_1 : 7;  // Offset: 712 Size: 1
	char pad_713[4];  // Offset: 713 Size: 4
	int32_t NumSpectators;  // Offset: 716 Size: 4
	int32_t NumPlayers;  // Offset: 720 Size: 4
	int32_t NumBots;  // Offset: 724 Size: 4
	float MinRespawnDelay;  // Offset: 728 Size: 4
	int32_t NumTravellingPlayers;  // Offset: 732 Size: 4
	ULocalMessage* EngineMessageClass;  // Offset: 736 Size: 8
	struct TArray<struct APlayerState*> InactivePlayerArray;  // Offset: 744 Size: 16
	float InactivePlayerStateLifeSpan;  // Offset: 760 Size: 4
	int32_t MaxInactivePlayers;  // Offset: 764 Size: 4
	char pad_768_1 : 7;  // Offset: 768 Size: 1
	bool bHandleDedicatedServerReplays : 1;  // Offset: 768 Size: 1
	char pad_769[7];  // Offset: 769 Size: 7



 // Functions 
 public:
	void StartMatch(); // Function Engine.GameMode.StartMatch
	void SetBandwidthLimit(float AsyncIOBandwidthLimit); // Function Engine.GameMode.SetBandwidthLimit
	void Say(struct FString Msg); // Function Engine.GameMode.Say
	void RestartGame(); // Function Engine.GameMode.RestartGame
	bool ReadyToStartMatch(); // Function Engine.GameMode.ReadyToStartMatch
	bool ReadyToEndMatch(); // Function Engine.GameMode.ReadyToEndMatch
	void K2_OnSetMatchState(struct FName NewState); // Function Engine.GameMode.K2_OnSetMatchState
	bool IsMatchInProgress(); // Function Engine.GameMode.IsMatchInProgress
	struct FName GetMatchState(); // Function Engine.GameMode.GetMatchState
	void EndMatch(); // Function Engine.GameMode.EndMatch
	void AbortMatch(); // Function Engine.GameMode.AbortMatch
}; 
 
 


//Class Engine.MaterialBillboardComponent Size 1152
// Inherited 1136 bytes 
class UMaterialBillboardComponent : public UPrimitiveComponent
{

 public: 
	struct TArray<struct FMaterialSpriteElement> Elements;  // Offset: 1136 Size: 16



 // Functions 
 public:
	void SetElements(struct TArray<struct FMaterialSpriteElement>& NewElements); // Function Engine.MaterialBillboardComponent.SetElements
	void AddElement(struct UMaterialInterface* Material, struct UCurveFloat* DistanceToOpacityCurve, bool bSizeIsInScreenSpace, float BaseSizeX, float BaseSizeY, struct UCurveFloat* DistanceToSizeCurve); // Function Engine.MaterialBillboardComponent.AddElement
}; 
 
 


//Class Engine.MaterialExpressionMaterialProxyReplace Size 104
// Inherited 64 bytes 
class UMaterialExpressionMaterialProxyReplace : public UMaterialExpression
{

 public: 
	struct FExpressionInput Realtime;  // Offset: 64 Size: 20
	struct FExpressionInput MaterialProxy;  // Offset: 84 Size: 20



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleOrbit Size 304
// Inherited 56 bytes 
class UParticleModuleOrbit : public UParticleModuleOrbitBase
{

 public: 
	enum class EOrbitChainMode ChainMode;  // Offset: 56 Size: 1
	char pad_57[7];  // Offset: 57 Size: 7
	struct FRawDistributionVector OffsetAmount;  // Offset: 64 Size: 72
	struct FOrbitOptions OffsetOptions;  // Offset: 136 Size: 4
	char pad_140[4];  // Offset: 140 Size: 4
	struct FRawDistributionVector RotationAmount;  // Offset: 144 Size: 72
	struct FOrbitOptions RotationOptions;  // Offset: 216 Size: 4
	char pad_220[4];  // Offset: 220 Size: 4
	struct FRawDistributionVector RotationRateAmount;  // Offset: 224 Size: 72
	struct FOrbitOptions RotationRateOptions;  // Offset: 296 Size: 4
	char pad_300[4];  // Offset: 300 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.Selection Size 160
// Inherited 40 bytes 
class USelection : public UObject
{

 public: 
	char pad_40[120];  // Offset: 40 Size: 120



 // Functions 
 public:
}; 
 
 


//Class Engine.InterpData Size 112
// Inherited 40 bytes 
class UInterpData : public UObject
{

 public: 
	float InterpLength;  // Offset: 40 Size: 4
	float PathBuildTime;  // Offset: 44 Size: 4
	struct TArray<struct UInterpGroup*> InterpGroups;  // Offset: 48 Size: 16
	struct UInterpCurveEdSetup* CurveEdSetup;  // Offset: 64 Size: 8
	float EdSectionStart;  // Offset: 72 Size: 4
	float EdSectionEnd;  // Offset: 76 Size: 4
	char bShouldBakeAndPrune : 1;  // Offset: 80 Size: 1
	char pad_80_1 : 7;  // Offset: 80 Size: 1
	char pad_81[8];  // Offset: 81 Size: 8
	struct UInterpGroupDirector* CachedDirectorGroup;  // Offset: 88 Size: 8
	struct TArray<struct FName> AllEventNames;  // Offset: 96 Size: 16



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleOrientationBase Size 48
// Inherited 48 bytes 
class UParticleModuleOrientationBase : public UParticleModule
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionParticleRandom Size 64
// Inherited 64 bytes 
class UMaterialExpressionParticleRandom : public UMaterialExpression
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.AnimNotifyState_DisableRootMotion Size 48
// Inherited 48 bytes 
class UAnimNotifyState_DisableRootMotion : public UAnimNotifyState
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.GameState Size 656
// Inherited 624 bytes 
class AGameState : public AGameStateBase
{

 public: 
	struct FName MatchState;  // Offset: 624 Size: 8
	struct FName PreviousMatchState;  // Offset: 632 Size: 8
	int32_t ElapsedTime;  // Offset: 640 Size: 4
	char pad_644[12];  // Offset: 644 Size: 12



 // Functions 
 public:
	void OnRep_MatchState(); // Function Engine.GameState.OnRep_MatchState
	void OnRep_ElapsedTime(); // Function Engine.GameState.OnRep_ElapsedTime
}; 
 
 


//Class Engine.MaterialExpressionSkinningVertexOffsets Size 64
// Inherited 64 bytes 
class UMaterialExpressionSkinningVertexOffsets : public UMaterialExpression
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.SkyLight Size 560
// Inherited 544 bytes 
class ASkyLight : public AInfo
{

 public: 
	struct USkyLightComponent* LightComponent;  // Offset: 544 Size: 8
	char bEnabled : 1;  // Offset: 552 Size: 1
	char pad_552_1 : 7;  // Offset: 552 Size: 1
	char pad_553[8];  // Offset: 553 Size: 8



 // Functions 
 public:
	void OnRep_bEnabled(); // Function Engine.SkyLight.OnRep_bEnabled
}; 
 
 


//Class Engine.MaterialExpressionComment Size 112
// Inherited 64 bytes 
class UMaterialExpressionComment : public UMaterialExpression
{

 public: 
	int32_t SizeX;  // Offset: 64 Size: 4
	int32_t SizeY;  // Offset: 68 Size: 4
	struct FString Text;  // Offset: 72 Size: 16
	struct FLinearColor CommentColor;  // Offset: 88 Size: 16
	int32_t FontSize;  // Offset: 104 Size: 4
	char pad_108[4];  // Offset: 108 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionRotator Size 120
// Inherited 64 bytes 
class UMaterialExpressionRotator : public UMaterialExpression
{

 public: 
	struct FExpressionInput Coordinate;  // Offset: 64 Size: 20
	struct FExpressionInput Time;  // Offset: 84 Size: 20
	float CenterX;  // Offset: 104 Size: 4
	float CenterY;  // Offset: 108 Size: 4
	float Speed;  // Offset: 112 Size: 4
	uint32_t ConstCoordinate;  // Offset: 116 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.StreamableRenderAsset Size 96
// Inherited 40 bytes 
class UStreamableRenderAsset : public UObject
{

 public: 
	char pad_40[24];  // Offset: 40 Size: 24
	double ForceMipLevelsToBeResidentTimestamp;  // Offset: 64 Size: 8
	int32_t NumCinematicMipLevels;  // Offset: 72 Size: 4
	int32_t StreamingIndex;  // Offset: 76 Size: 4
	int32_t CachedCombinedLODBias;  // Offset: 80 Size: 4
	char NeverStream : 1;  // Offset: 84 Size: 1
	char bGlobalForceMipLevelsToBeResident : 1;  // Offset: 84 Size: 1
	char bHasStreamingUpdatePending : 1;  // Offset: 84 Size: 1
	char bForceMiplevelsToBeResident : 1;  // Offset: 84 Size: 1
	char bIgnoreStreamingMipBias : 1;  // Offset: 84 Size: 1
	char bUseCinematicMipLevels : 1;  // Offset: 84 Size: 1
	char pad_84_1 : 2;  // Offset: 84 Size: 1
	char pad_85[12];  // Offset: 85 Size: 12



 // Functions 
 public:
}; 
 
 


//Class Engine.DefaultPhysicsVolume Size 616
// Inherited 616 bytes 
class ADefaultPhysicsVolume : public APhysicsVolume
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.EmitterCameraLensEffectBase Size 736
// Inherited 624 bytes 
class AEmitterCameraLensEffectBase : public AEmitter
{

 public: 
	struct UParticleSystem* PS_CameraEffect;  // Offset: 624 Size: 8
	struct UParticleSystem* PS_CameraEffectNonExtremeContent;  // Offset: 632 Size: 8
	struct APlayerCameraManager* BaseCamera;  // Offset: 640 Size: 8
	char pad_648[8];  // Offset: 648 Size: 8
	struct FTransform RelativeTransform;  // Offset: 656 Size: 48
	float BaseFOV;  // Offset: 704 Size: 4
	char bAllowMultipleInstances : 1;  // Offset: 708 Size: 1
	char bResetWhenRetriggered : 1;  // Offset: 708 Size: 1
	char pad_708_1 : 6;  // Offset: 708 Size: 1
	char pad_709[4];  // Offset: 709 Size: 4
	struct TArray<AEmitterCameraLensEffectBase*> EmittersToTreatAsSame;  // Offset: 712 Size: 16
	float DistFromCamera;  // Offset: 728 Size: 4
	char pad_732[4];  // Offset: 732 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.Texture Size 384
// Inherited 96 bytes 
class UTexture : public UStreamableRenderAsset
{

 public: 
	char pad_96[8];  // Offset: 96 Size: 8
	struct FGuid LightingGuid;  // Offset: 104 Size: 16
	enum class TextureMipGenSettings MipGenSettings;  // Offset: 120 Size: 1
	char pad_121[3];  // Offset: 121 Size: 3
	char CompressionNone : 1;  // Offset: 124 Size: 1
	char DeferCompression : 1;  // Offset: 124 Size: 1
	char pad_124_1 : 6;  // Offset: 124 Size: 1
	char pad_125[4];  // Offset: 125 Size: 4
	int32_t LODBias;  // Offset: 128 Size: 4
	enum class TextureCompressionSettings CompressionSettings;  // Offset: 132 Size: 1
	enum class TextureFilter Filter;  // Offset: 133 Size: 1
	enum class ETextureMipLoadOptions MipLoadOptions;  // Offset: 134 Size: 1
	enum class TextureGroup LODGroup;  // Offset: 135 Size: 1
	struct FPerPlatformFloat Downscale;  // Offset: 136 Size: 4
	enum class ETextureDownscaleOptions DownscaleOptions;  // Offset: 140 Size: 1
	char sRGB : 1;  // Offset: 141 Size: 1
	char bNoTiling : 1;  // Offset: 141 Size: 1
	char VirtualTextureStreaming : 1;  // Offset: 141 Size: 1
	char CompressionYCoCg : 1;  // Offset: 141 Size: 1
	char bNotOfflineProcessed : 1;  // Offset: 141 Size: 1
	char bAsyncResourceReleaseHasBeenStarted : 1;  // Offset: 141 Size: 1
	char pad_141_1 : 2;  // Offset: 141 Size: 1
	char pad_142[3];  // Offset: 142 Size: 3
	struct TArray<struct UAssetUserData*> AssetUserData;  // Offset: 144 Size: 16
	char pad_160[224];  // Offset: 160 Size: 224



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleOrientationAxisLock Size 56
// Inherited 48 bytes 
class UParticleModuleOrientationAxisLock : public UParticleModuleOrientationBase
{

 public: 
	enum class EParticleAxisLock LockAxisFlags;  // Offset: 48 Size: 1
	char pad_49[7];  // Offset: 49 Size: 7



 // Functions 
 public:
}; 
 
 


//Class Engine.TextureMipDataProviderFactory Size 40
// Inherited 40 bytes 
class UTextureMipDataProviderFactory : public UAssetUserData
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.AISystemBase Size 88
// Inherited 40 bytes 
class UAISystemBase : public UObject
{

 public: 
	struct FSoftClassPath AISystemClassName;  // Offset: 40 Size: 24
	struct FName AISystemModuleName;  // Offset: 64 Size: 8
	char pad_72[8];  // Offset: 72 Size: 8
	char pad_80_1 : 7;  // Offset: 80 Size: 1
	bool bInstantiateAISystemOnClient : 1;  // Offset: 80 Size: 1
	char pad_81[7];  // Offset: 81 Size: 7



 // Functions 
 public:
}; 
 
 


//Class Engine.TextureCube Size 464
// Inherited 384 bytes 
class UTextureCube : public UTexture
{

 public: 
	char pad_384[80];  // Offset: 384 Size: 80



 // Functions 
 public:
}; 
 
 


//Class Engine.CullDistanceVolume Size 624
// Inherited 600 bytes 
class ACullDistanceVolume : public AVolume
{

 public: 
	struct TArray<struct FCullDistanceSizePair> CullDistances;  // Offset: 600 Size: 16
	char bEnabled : 1;  // Offset: 616 Size: 1
	char pad_616_1 : 7;  // Offset: 616 Size: 1
	char pad_617[8];  // Offset: 617 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionFloor Size 88
// Inherited 64 bytes 
class UMaterialExpressionFloor : public UMaterialExpression
{

 public: 
	struct FExpressionInput Input;  // Offset: 64 Size: 20
	char pad_84[4];  // Offset: 84 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.StaticMeshComponent Size 1312
// Inherited 1200 bytes 
class UStaticMeshComponent : public UMeshComponent
{

 public: 
	int32_t ForcedLodModel;  // Offset: 1192 Size: 4
	int32_t PreviousLODLevel;  // Offset: 1196 Size: 4
	int32_t MinLOD;  // Offset: 1200 Size: 4
	int32_t SubDivisionStepSize;  // Offset: 1204 Size: 4
	struct UStaticMesh* StaticMesh;  // Offset: 1208 Size: 8
	struct FColor WireframeColorOverride;  // Offset: 1216 Size: 4
	char bEvaluateWorldPositionOffset : 1;  // Offset: 1220 Size: 1
	char bOverrideWireframeColor : 1;  // Offset: 1220 Size: 1
	char bOverrideMinLod : 1;  // Offset: 1220 Size: 1
	char bOverrideNavigationExport : 1;  // Offset: 1220 Size: 1
	char bForceNavigationObstacle : 1;  // Offset: 1220 Size: 1
	char bDisallowMeshPaintPerInstance : 1;  // Offset: 1220 Size: 1
	char bIgnoreInstanceForTextureStreaming : 1;  // Offset: 1220 Size: 1
	char bOverrideLightMapRes : 1;  // Offset: 1220 Size: 1
	char bCastDistanceFieldIndirectShadow : 1;  // Offset: 1221 Size: 1
	char bOverrideDistanceFieldSelfShadowBias : 1;  // Offset: 1221 Size: 1
	char bUseSubDivisions : 1;  // Offset: 1221 Size: 1
	char bUseDefaultCollision : 1;  // Offset: 1221 Size: 1
	char bReverseCulling : 1;  // Offset: 1221 Size: 1
	int32_t OverriddenLightMapRes;  // Offset: 1224 Size: 4
	float DistanceFieldIndirectShadowMinVisibility;  // Offset: 1228 Size: 4
	float DistanceFieldSelfShadowBias;  // Offset: 1232 Size: 4
	float StreamingDistanceMultiplier;  // Offset: 1236 Size: 4
	struct TArray<struct FStaticMeshComponentLODInfo> LODData;  // Offset: 1240 Size: 16
	struct TArray<struct FStreamingTextureBuildInfo> StreamingTextureData;  // Offset: 1256 Size: 16
	char bUseMovableStaticMeshLightmass : 1;  // Offset: 1272 Size: 1
	struct FLightmassPrimitiveSettings LightmassSettings;  // Offset: 1276 Size: 24
	char pad_1301_1 : 2;  // Offset: 1301 Size: 1
	char pad_1302[11];  // Offset: 1302 Size: 11



 // Functions 
 public:
	bool SetStaticMesh(struct UStaticMesh* NewMesh); // Function Engine.StaticMeshComponent.SetStaticMesh
	void SetReverseCulling(bool ReverseCulling); // Function Engine.StaticMeshComponent.SetReverseCulling
	void SetForcedLodModel(int32_t NewForcedLodModel); // Function Engine.StaticMeshComponent.SetForcedLodModel
	void SetEvaluateWorldPositionOffsetInRayTracing(bool NewValue); // Function Engine.StaticMeshComponent.SetEvaluateWorldPositionOffsetInRayTracing
	void SetDistanceFieldSelfShadowBias(float NewValue); // Function Engine.StaticMeshComponent.SetDistanceFieldSelfShadowBias
	void OnRep_StaticMesh(struct UStaticMesh* OldStaticMesh); // Function Engine.StaticMeshComponent.OnRep_StaticMesh
	void GetLocalBounds(struct FVector& Min, struct FVector& Max); // Function Engine.StaticMeshComponent.GetLocalBounds
}; 
 
 


//Class Engine.BlendableInterface Size 40
// Inherited 40 bytes 
class UBlendableInterface : public UInterface
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModule Size 48
// Inherited 40 bytes 
class UParticleModule : public UObject
{

 public: 
	char bSpawnModule : 1;  // Offset: 40 Size: 1
	char bUpdateModule : 1;  // Offset: 40 Size: 1
	char bFinalUpdateModule : 1;  // Offset: 40 Size: 1
	char bUpdateForGPUEmitter : 1;  // Offset: 40 Size: 1
	char bCurvesAsColor : 1;  // Offset: 40 Size: 1
	char b3DDrawMode : 1;  // Offset: 40 Size: 1
	char bSupported3DDrawMode : 1;  // Offset: 40 Size: 1
	char bEnabled : 1;  // Offset: 40 Size: 1
	char bEditable : 1;  // Offset: 41 Size: 1
	char LODDuplicate : 1;  // Offset: 41 Size: 1
	char bSupportsRandomSeed : 1;  // Offset: 41 Size: 1
	char bRequiresLoopingNotification : 1;  // Offset: 41 Size: 1
	char pad_41_1 : 4;  // Offset: 41 Size: 1
	char LODValidity;  // Offset: 42 Size: 1
	char pad_43[5];  // Offset: 43 Size: 5



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionClamp Size 136
// Inherited 64 bytes 
class UMaterialExpressionClamp : public UMaterialExpression
{

 public: 
	struct FExpressionInput Input;  // Offset: 64 Size: 20
	struct FExpressionInput Min;  // Offset: 84 Size: 20
	struct FExpressionInput Max;  // Offset: 104 Size: 20
	enum class EClampMode ClampMode;  // Offset: 124 Size: 1
	char pad_125[3];  // Offset: 125 Size: 3
	float MinDefault;  // Offset: 128 Size: 4
	float MaxDefault;  // Offset: 132 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.InterpFilter_Classes Size 56
// Inherited 56 bytes 
class UInterpFilter_Classes : public UInterpFilter
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.MatineeInterface Size 40
// Inherited 40 bytes 
class UMatineeInterface : public UInterface
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.PreviewMeshCollection Size 80
// Inherited 48 bytes 
class UPreviewMeshCollection : public UDataAsset
{

 public: 
	char pad_48[8];  // Offset: 48 Size: 8
	struct USkeleton* Skeleton;  // Offset: 56 Size: 8
	struct TArray<struct FPreviewMeshCollectionEntry> SkeletalMeshes;  // Offset: 64 Size: 16



 // Functions 
 public:
}; 
 
 


//Class Engine.HierarchicalInstancedStaticMeshComponent Size 1728
// Inherited 1488 bytes 
class UHierarchicalInstancedStaticMeshComponent : public UInstancedStaticMeshComponent
{

 public: 
	char pad_1488[8];  // Offset: 1488 Size: 8
	struct TArray<int32_t> SortedInstances;  // Offset: 1496 Size: 16
	int32_t NumBuiltInstances;  // Offset: 1512 Size: 4
	char pad_1516[4];  // Offset: 1516 Size: 4
	struct FBox BuiltInstanceBounds;  // Offset: 1520 Size: 28
	struct FBox UnbuiltInstanceBounds;  // Offset: 1548 Size: 28
	struct TArray<struct FBox> UnbuiltInstanceBoundsList;  // Offset: 1576 Size: 16
	char bEnableDensityScaling : 1;  // Offset: 1592 Size: 1
	char pad_1592_1 : 7;  // Offset: 1592 Size: 1
	char pad_1593[8];  // Offset: 1593 Size: 8
	int32_t OcclusionLayerNumNodes;  // Offset: 1600 Size: 4
	struct FBoxSphereBounds CacheMeshExtendedBounds;  // Offset: 1604 Size: 28
	char pad_1632_1 : 7;  // Offset: 1632 Size: 1
	bool bDisableCollision : 1;  // Offset: 1632 Size: 1
	char pad_1633[3];  // Offset: 1633 Size: 3
	int32_t InstanceCountToRender;  // Offset: 1636 Size: 4
	char pad_1640[88];  // Offset: 1640 Size: 88



 // Functions 
 public:
	bool RemoveInstances(struct TArray<int32_t>& InstancesToRemove); // Function Engine.HierarchicalInstancedStaticMeshComponent.RemoveInstances
}; 
 
 


//Class Engine.MaterialExpressionFontSampleParameter Size 112
// Inherited 80 bytes 
class UMaterialExpressionFontSampleParameter : public UMaterialExpressionFontSample
{

 public: 
	struct FName ParameterName;  // Offset: 80 Size: 8
	struct FGuid ExpressionGUID;  // Offset: 88 Size: 16
	struct FName Group;  // Offset: 104 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.Brush Size 600
// Inherited 544 bytes 
class ABrush : public AActor
{

 public: 
	enum class EBrushType BrushType;  // Offset: 544 Size: 1
	char pad_545[3];  // Offset: 545 Size: 3
	struct FColor BrushColor;  // Offset: 548 Size: 4
	int32_t PolyFlags;  // Offset: 552 Size: 4
	char bColored : 1;  // Offset: 556 Size: 1
	char bSolidWhenSelected : 1;  // Offset: 556 Size: 1
	char bPlaceableFromClassBrowser : 1;  // Offset: 556 Size: 1
	char bNotForClientOrServer : 1;  // Offset: 556 Size: 1
	char pad_556_1 : 4;  // Offset: 556 Size: 1
	char pad_557[4];  // Offset: 557 Size: 4
	struct UModel* Brush;  // Offset: 560 Size: 8
	struct UBrushComponent* BrushComponent;  // Offset: 568 Size: 8
	char bInManipulation : 1;  // Offset: 576 Size: 1
	char pad_576_1 : 7;  // Offset: 576 Size: 1
	char pad_577[8];  // Offset: 577 Size: 8
	struct TArray<struct FGeomSelection> SavedSelections;  // Offset: 584 Size: 16



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleVectorFieldScale Size 104
// Inherited 48 bytes 
class UParticleModuleVectorFieldScale : public UParticleModuleVectorFieldBase
{

 public: 
	struct UDistributionFloat* VectorFieldScale;  // Offset: 48 Size: 8
	struct FRawDistributionFloat VectorFieldScaleRaw;  // Offset: 56 Size: 48



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionConstant4Vector Size 80
// Inherited 64 bytes 
class UMaterialExpressionConstant4Vector : public UMaterialExpression
{

 public: 
	struct FLinearColor Constant;  // Offset: 64 Size: 16



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleAcceleration Size 136
// Inherited 56 bytes 
class UParticleModuleAcceleration : public UParticleModuleAccelerationBase
{

 public: 
	struct FRawDistributionVector Acceleration;  // Offset: 56 Size: 72
	char bApplyOwnerScale : 1;  // Offset: 128 Size: 1
	char pad_128_1 : 7;  // Offset: 128 Size: 1
	char pad_129[8];  // Offset: 129 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.Volume Size 600
// Inherited 600 bytes 
class AVolume : public ABrush
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.DialogueWave Size 112
// Inherited 40 bytes 
class UDialogueWave : public UObject
{

 public: 
	char bMature : 1;  // Offset: 40 Size: 1
	char bOverride_SubtitleOverride : 1;  // Offset: 40 Size: 1
	char pad_40_1 : 6;  // Offset: 40 Size: 1
	char pad_41[8];  // Offset: 41 Size: 8
	struct FString SpokenText;  // Offset: 48 Size: 16
	struct FString SubtitleOverride;  // Offset: 64 Size: 16
	struct TArray<struct FDialogueContextMapping> ContextMappings;  // Offset: 80 Size: 16
	struct FGuid LocalizationGUID;  // Offset: 96 Size: 16



 // Functions 
 public:
}; 
 
 


//Class Engine.EdGraphSchema Size 40
// Inherited 40 bytes 
class UEdGraphSchema : public UObject
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialInterface Size 152
// Inherited 40 bytes 
class UMaterialInterface : public UObject
{

 public: 
	char pad_40[16];  // Offset: 40 Size: 16
	struct USubsurfaceProfile* SubsurfaceProfile;  // Offset: 56 Size: 8
	char pad_64[16];  // Offset: 64 Size: 16
	struct FLightmassMaterialInterfaceSettings LightmassSettings;  // Offset: 80 Size: 32
	struct TArray<struct FMaterialTextureInfo> TextureStreamingData;  // Offset: 112 Size: 16
	struct TArray<struct UAssetUserData*> AssetUserData;  // Offset: 128 Size: 16
	char pad_144[8];  // Offset: 144 Size: 8



 // Functions 
 public:
	void SetForceMipLevelsToBeResident(bool OverrideForceMiplevelsToBeResident, bool bForceMiplevelsToBeResidentValue, float ForceDuration, int32_t CinematicTextureGroups, bool bFastResponse); // Function Engine.MaterialInterface.SetForceMipLevelsToBeResident
	struct UPhysicalMaterialMask* GetPhysicalMaterialMask(); // Function Engine.MaterialInterface.GetPhysicalMaterialMask
	struct UPhysicalMaterial* GetPhysicalMaterialFromMap(int32_t Index); // Function Engine.MaterialInterface.GetPhysicalMaterialFromMap
	struct UPhysicalMaterial* GetPhysicalMaterial(); // Function Engine.MaterialInterface.GetPhysicalMaterial
	struct FMaterialParameterInfo GetParameterInfo(enum class EMaterialParameterAssociation Association, struct FName ParameterName, struct UMaterialFunctionInterface* LayerFunction); // Function Engine.MaterialInterface.GetParameterInfo
	struct UMaterial* GetBaseMaterial(); // Function Engine.MaterialInterface.GetBaseMaterial
}; 
 
 


//Class Engine.ParticleModuleLocationPrimitiveCylinder Size 288
// Inherited 176 bytes 
class UParticleModuleLocationPrimitiveCylinder : public UParticleModuleLocationPrimitiveBase
{

 public: 
	char RadialVelocity : 1;  // Offset: 176 Size: 1
	char pad_176_1 : 7;  // Offset: 176 Size: 1
	char pad_177[8];  // Offset: 177 Size: 8
	struct FRawDistributionFloat StartRadius;  // Offset: 184 Size: 48
	struct FRawDistributionFloat StartHeight;  // Offset: 232 Size: 48
	enum class CylinderHeightAxis HeightAxis;  // Offset: 280 Size: 1
	char pad_281[7];  // Offset: 281 Size: 7



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialInstance Size 808
// Inherited 152 bytes 
class UMaterialInstance : public UMaterialInterface
{

 public: 
	struct UPhysicalMaterial* PhysMaterial;  // Offset: 152 Size: 8
	struct UPhysicalMaterial* PhysicalMaterialMap[8];  // Offset: 160 Size: 64
	struct UMaterialInterface* Parent;  // Offset: 224 Size: 8
	char bHasStaticPermutationResource : 1;  // Offset: 232 Size: 1
	char bOverrideSubsurfaceProfile : 1;  // Offset: 232 Size: 1
	char pad_232_1 : 6;  // Offset: 232 Size: 1
	char pad_233[16];  // Offset: 233 Size: 16
	struct TArray<struct FScalarParameterValue> ScalarParameterValues;  // Offset: 248 Size: 16
	struct TArray<struct FVectorParameterValue> VectorParameterValues;  // Offset: 264 Size: 16
	struct TArray<struct FTextureParameterValue> TextureParameterValues;  // Offset: 280 Size: 16
	struct TArray<struct FRuntimeVirtualTextureParameterValue> RuntimeVirtualTextureParameterValues;  // Offset: 296 Size: 16
	struct TArray<struct FFontParameterValue> FontParameterValues;  // Offset: 312 Size: 16
	struct FMaterialInstanceBasePropertyOverrides BasePropertyOverrides;  // Offset: 328 Size: 12
	char pad_340[12];  // Offset: 340 Size: 12
	struct FStaticParameterSet StaticParameters;  // Offset: 352 Size: 64
	struct FMaterialCachedParameters CachedLayerParameters;  // Offset: 416 Size: 336
	struct TArray<struct UObject*> CachedReferencedTextures;  // Offset: 752 Size: 16
	char pad_768[40];  // Offset: 768 Size: 40



 // Functions 
 public:
}; 
 
 


//Class Engine.InterpGroupInst Size 72
// Inherited 40 bytes 
class UInterpGroupInst : public UObject
{

 public: 
	struct UInterpGroup* Group;  // Offset: 40 Size: 8
	struct AActor* GroupActor;  // Offset: 48 Size: 8
	struct TArray<struct UInterpTrackInst*> TrackInst;  // Offset: 56 Size: 16



 // Functions 
 public:
}; 
 
 


//Class Engine.SoundNodeMature Size 72
// Inherited 72 bytes 
class USoundNodeMature : public USoundNode
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialInstanceConstant Size 816
// Inherited 808 bytes 
class UMaterialInstanceConstant : public UMaterialInstance
{

 public: 
	struct UPhysicalMaterialMask* PhysMaterialMask;  // Offset: 808 Size: 8



 // Functions 
 public:
	struct FLinearColor K2_GetVectorParameterValue(struct FName ParameterName); // Function Engine.MaterialInstanceConstant.K2_GetVectorParameterValue
	struct UTexture* K2_GetTextureParameterValue(struct FName ParameterName); // Function Engine.MaterialInstanceConstant.K2_GetTextureParameterValue
	float K2_GetScalarParameterValue(struct FName ParameterName); // Function Engine.MaterialInstanceConstant.K2_GetScalarParameterValue
}; 
 
 


//Class Engine.InterpTrackInst Size 40
// Inherited 40 bytes 
class UInterpTrackInst : public UObject
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.WorldSubsystem Size 48
// Inherited 48 bytes 
class UWorldSubsystem : public USubsystem
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.NavPathObserverInterface Size 40
// Inherited 40 bytes 
class UNavPathObserverInterface : public UInterface
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.TimelineTemplate Size 184
// Inherited 40 bytes 
class UTimelineTemplate : public UObject
{

 public: 
	float TimelineLength;  // Offset: 40 Size: 4
	enum class ETimelineLengthMode LengthMode;  // Offset: 44 Size: 1
	char bAutoPlay : 1;  // Offset: 45 Size: 1
	char bLoop : 1;  // Offset: 45 Size: 1
	char bReplicated : 1;  // Offset: 45 Size: 1
	char bIgnoreTimeDilation : 1;  // Offset: 45 Size: 1
	char pad_45_1 : 4;  // Offset: 45 Size: 1
	char pad_46[3];  // Offset: 46 Size: 3
	struct TArray<struct FTTEventTrack> EventTracks;  // Offset: 48 Size: 16
	struct TArray<struct FTTFloatTrack> FloatTracks;  // Offset: 64 Size: 16
	struct TArray<struct FTTVectorTrack> VectorTracks;  // Offset: 80 Size: 16
	struct TArray<struct FTTLinearColorTrack> LinearColorTracks;  // Offset: 96 Size: 16
	struct TArray<struct FBPVariableMetaDataEntry> MetaDataArray;  // Offset: 112 Size: 16
	struct FGuid TimelineGuid;  // Offset: 128 Size: 16
	enum class ETickingGroup TimelineTickGroup;  // Offset: 144 Size: 1
	char pad_145[3];  // Offset: 145 Size: 3
	struct FName VariableName;  // Offset: 148 Size: 8
	struct FName DirectionPropertyName;  // Offset: 156 Size: 8
	struct FName UpdateFunctionName;  // Offset: 164 Size: 8
	struct FName FinishedFunctionName;  // Offset: 172 Size: 8
	char pad_180[4];  // Offset: 180 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleVectorFieldScaleOverLife Size 104
// Inherited 48 bytes 
class UParticleModuleVectorFieldScaleOverLife : public UParticleModuleVectorFieldBase
{

 public: 
	struct UDistributionFloat* VectorFieldScaleOverLife;  // Offset: 48 Size: 8
	struct FRawDistributionFloat VectorFieldScaleOverLifeRaw;  // Offset: 56 Size: 48



 // Functions 
 public:
}; 
 
 


//Class Engine.TickableWorldSubsystem Size 64
// Inherited 48 bytes 
class UTickableWorldSubsystem : public UWorldSubsystem
{

 public: 
	char pad_48[16];  // Offset: 48 Size: 16



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionCustomOutput Size 64
// Inherited 64 bytes 
class UMaterialExpressionCustomOutput : public UMaterialExpression
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.SoundBase Size 368
// Inherited 40 bytes 
class USoundBase : public UObject
{

 public: 
	char pad_40[8];  // Offset: 40 Size: 8
	struct USoundClass* SoundClassObject;  // Offset: 48 Size: 8
	char bDebug : 1;  // Offset: 56 Size: 1
	char bOverrideConcurrency : 1;  // Offset: 56 Size: 1
	char bEnableBusSends : 1;  // Offset: 56 Size: 1
	char bEnableBaseSubmix : 1;  // Offset: 56 Size: 1
	char bEnableSubmixSends : 1;  // Offset: 56 Size: 1
	char bHasDelayNode : 1;  // Offset: 56 Size: 1
	char bHasConcatenatorNode : 1;  // Offset: 56 Size: 1
	char bBypassVolumeScaleForPriority : 1;  // Offset: 56 Size: 1
	enum class EVirtualizationMode VirtualizationMode;  // Offset: 57 Size: 1
	char pad_58[86];  // Offset: 58 Size: 86
	struct TSet<struct USoundConcurrency*> ConcurrencySet;  // Offset: 144 Size: 80
	struct FSoundConcurrencySettings ConcurrencyOverrides;  // Offset: 224 Size: 40
	float Duration;  // Offset: 264 Size: 4
	float MaxDistance;  // Offset: 268 Size: 4
	float TotalSamples;  // Offset: 272 Size: 4
	float Priority;  // Offset: 276 Size: 4
	struct USoundAttenuation* AttenuationSettings;  // Offset: 280 Size: 8
	struct USoundSubmixBase* SoundSubmixObject;  // Offset: 288 Size: 8
	struct TArray<struct FSoundSubmixSendInfo> SoundSubmixSends;  // Offset: 296 Size: 16
	struct USoundEffectSourcePresetChain* SourceEffectChain;  // Offset: 312 Size: 8
	struct TArray<struct FSoundSourceBusSendInfo> BusSends;  // Offset: 320 Size: 16
	struct TArray<struct FSoundSourceBusSendInfo> PreEffectBusSends;  // Offset: 336 Size: 16
	struct TArray<struct UAssetUserData*> AssetUserData;  // Offset: 352 Size: 16



 // Functions 
 public:
}; 
 
 


//Class Engine.SoundWave Size 880
// Inherited 368 bytes 
class USoundWave : public USoundBase
{

 public: 
	int32_t CompressionQuality;  // Offset: 368 Size: 4
	int32_t StreamingPriority;  // Offset: 372 Size: 4
	enum class ESoundwaveSampleRateSettings SampleRateQuality;  // Offset: 376 Size: 1
	char pad_377[1];  // Offset: 377 Size: 1
	enum class ESoundGroup SoundGroup;  // Offset: 378 Size: 1
	char bLooping : 1;  // Offset: 379 Size: 1
	char bStreaming : 1;  // Offset: 379 Size: 1
	char bSeekableStreaming : 1;  // Offset: 379 Size: 1
	char pad_379_1 : 5;  // Offset: 379 Size: 1
	enum class ESoundWaveLoadingBehavior LoadingBehavior;  // Offset: 380 Size: 1
	char pad_381_1 : 6;  // Offset: 381 Size: 1
	char bMature : 1;  // Offset: 381 Size: 1
	char bManualWordWrap : 1;  // Offset: 381 Size: 1
	char bSingleLine : 1;  // Offset: 382 Size: 1
	char bIsAmbisonics : 1;  // Offset: 382 Size: 1
	char pad_382_1 : 6;  // Offset: 382 Size: 1
	char pad_383[2];  // Offset: 383 Size: 2
	struct FSoundModulationDefaultRoutingSettings ModulationSettings;  // Offset: 384 Size: 72
	struct TArray<float> FrequenciesToAnalyze;  // Offset: 456 Size: 16
	struct TArray<struct FSoundWaveSpectralTimeData> CookedSpectralTimeData;  // Offset: 472 Size: 16
	struct TArray<struct FSoundWaveEnvelopeTimeData> CookedEnvelopeTimeData;  // Offset: 488 Size: 16
	int32_t InitialChunkSize;  // Offset: 504 Size: 4
	char pad_508[68];  // Offset: 508 Size: 68
	struct FString SpokenText;  // Offset: 576 Size: 16
	float SubtitlePriority;  // Offset: 592 Size: 4
	float Volume;  // Offset: 596 Size: 4
	float Pitch;  // Offset: 600 Size: 4
	int32_t NumChannels;  // Offset: 604 Size: 4
	int32_t SampleRate;  // Offset: 608 Size: 4
	char pad_612[12];  // Offset: 612 Size: 12
	struct TArray<struct FSubtitleCue> Subtitles;  // Offset: 624 Size: 16
	struct UCurveTable* Curves;  // Offset: 640 Size: 8
	struct UCurveTable* InternalCurves;  // Offset: 648 Size: 8
	char pad_656[224];  // Offset: 656 Size: 224



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleLifetime Size 96
// Inherited 48 bytes 
class UParticleModuleLifetime : public UParticleModuleLifetimeBase
{

 public: 
	struct FRawDistributionFloat LifeTime;  // Offset: 48 Size: 48



 // Functions 
 public:
}; 
 
 


//Class Engine.Canvas Size 720
// Inherited 40 bytes 
class UCanvas : public UObject
{

 public: 
	float OrgX;  // Offset: 40 Size: 4
	float OrgY;  // Offset: 44 Size: 4
	float ClipX;  // Offset: 48 Size: 4
	float ClipY;  // Offset: 52 Size: 4
	struct FColor DrawColor;  // Offset: 56 Size: 4
	char bCenterX : 1;  // Offset: 60 Size: 1
	char bCenterY : 1;  // Offset: 60 Size: 1
	char bNoSmooth : 1;  // Offset: 60 Size: 1
	char pad_60_1 : 5;  // Offset: 60 Size: 1
	char pad_61[4];  // Offset: 61 Size: 4
	int32_t SizeX;  // Offset: 64 Size: 4
	int32_t SizeY;  // Offset: 68 Size: 4
	char pad_72[8];  // Offset: 72 Size: 8
	struct FPlane ColorModulate;  // Offset: 80 Size: 16
	struct UTexture2D* DefaultTexture;  // Offset: 96 Size: 8
	struct UTexture2D* GradientTexture0;  // Offset: 104 Size: 8
	struct UReporterGraph* ReporterGraph;  // Offset: 112 Size: 8
	char pad_120[600];  // Offset: 120 Size: 600



 // Functions 
 public:
	struct FVector2D K2_TextSize(struct UFont* RenderFont, struct FString RenderText, struct FVector2D Scale); // Function Engine.Canvas.K2_TextSize
	struct FVector2D K2_StrLen(struct UFont* RenderFont, struct FString RenderText); // Function Engine.Canvas.K2_StrLen
	struct FVector K2_Project(struct FVector WorldLocation); // Function Engine.Canvas.K2_Project
	void K2_DrawTriangle(struct UTexture* RenderTexture, struct TArray<struct FCanvasUVTri> Triangles); // Function Engine.Canvas.K2_DrawTriangle
	void K2_DrawTexture(struct UTexture* RenderTexture, struct FVector2D ScreenPosition, struct FVector2D ScreenSize, struct FVector2D CoordinatePosition, struct FVector2D CoordinateSize, struct FLinearColor RenderColor, enum class EBlendMode BlendMode, float Rotation, struct FVector2D PivotPoint); // Function Engine.Canvas.K2_DrawTexture
	void K2_DrawText(struct UFont* RenderFont, struct FString RenderText, struct FVector2D ScreenPosition, struct FVector2D Scale, struct FLinearColor RenderColor, float Kerning, struct FLinearColor ShadowColor, struct FVector2D ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, struct FLinearColor OutlineColor); // Function Engine.Canvas.K2_DrawText
	void K2_DrawPolygon(struct UTexture* RenderTexture, struct FVector2D ScreenPosition, struct FVector2D Radius, int32_t NumberOfSides, struct FLinearColor RenderColor); // Function Engine.Canvas.K2_DrawPolygon
	void K2_DrawMaterialTriangle(struct UMaterialInterface* RenderMaterial, struct TArray<struct FCanvasUVTri> Triangles); // Function Engine.Canvas.K2_DrawMaterialTriangle
	void K2_DrawMaterial(struct UMaterialInterface* RenderMaterial, struct FVector2D ScreenPosition, struct FVector2D ScreenSize, struct FVector2D CoordinatePosition, struct FVector2D CoordinateSize, float Rotation, struct FVector2D PivotPoint); // Function Engine.Canvas.K2_DrawMaterial
	void K2_DrawLine(struct FVector2D ScreenPositionA, struct FVector2D ScreenPositionB, float Thickness, struct FLinearColor RenderColor); // Function Engine.Canvas.K2_DrawLine
	void K2_DrawBox(struct FVector2D ScreenPosition, struct FVector2D ScreenSize, float Thickness, struct FLinearColor RenderColor); // Function Engine.Canvas.K2_DrawBox
	void K2_DrawBorder(struct UTexture* BorderTexture, struct UTexture* BackgroundTexture, struct UTexture* LeftBorderTexture, struct UTexture* RightBorderTexture, struct UTexture* TopBorderTexture, struct UTexture* BottomBorderTexture, struct FVector2D ScreenPosition, struct FVector2D ScreenSize, struct FVector2D CoordinatePosition, struct FVector2D CoordinateSize, struct FLinearColor RenderColor, struct FVector2D BorderScale, struct FVector2D BackgroundScale, float Rotation, struct FVector2D PivotPoint, struct FVector2D CornerSize); // Function Engine.Canvas.K2_DrawBorder
	void K2_Deproject(struct FVector2D ScreenPosition, struct FVector& WorldOrigin, struct FVector& WorldDirection); // Function Engine.Canvas.K2_Deproject
}; 
 
 


//Class Engine.Blueprint Size 160
// Inherited 80 bytes 
class UBlueprint : public UBlueprintCore
{

 public: 
	UObject* ParentClass;  // Offset: 80 Size: 8
	enum class EBlueprintType BlueprintType;  // Offset: 88 Size: 1
	char bRecompileOnLoad : 1;  // Offset: 89 Size: 1
	char bHasBeenRegenerated : 1;  // Offset: 89 Size: 1
	char bIsRegeneratingOnLoad : 1;  // Offset: 89 Size: 1
	char pad_89_1 : 5;  // Offset: 89 Size: 1
	char pad_90[3];  // Offset: 90 Size: 3
	int32_t BlueprintSystemVersion;  // Offset: 92 Size: 4
	struct USimpleConstructionScript* SimpleConstructionScript;  // Offset: 96 Size: 8
	struct TArray<struct UActorComponent*> ComponentTemplates;  // Offset: 104 Size: 16
	struct TArray<struct UTimelineTemplate*> Timelines;  // Offset: 120 Size: 16
	struct TArray<struct FBPComponentClassOverride> ComponentClassOverrides;  // Offset: 136 Size: 16
	struct UInheritableComponentHandler* InheritableComponentHandler;  // Offset: 152 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.DistributionVectorUniform Size 96
// Inherited 56 bytes 
class UDistributionVectorUniform : public UDistributionVector
{

 public: 
	struct FVector Max;  // Offset: 56 Size: 12
	struct FVector Min;  // Offset: 68 Size: 12
	char bLockAxes : 1;  // Offset: 80 Size: 1
	char pad_80_1 : 7;  // Offset: 80 Size: 1
	char pad_81[4];  // Offset: 81 Size: 4
	enum class EDistributionVectorLockFlags LockedAxes;  // Offset: 84 Size: 1
	enum class EDistributionVectorMirrorFlags MirrorFlags[3];  // Offset: 85 Size: 3
	char bUseExtremes : 1;  // Offset: 88 Size: 1
	char pad_88_1 : 7;  // Offset: 88 Size: 1
	char pad_89[8];  // Offset: 89 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.Model Size 600
// Inherited 40 bytes 
class UModel : public UObject
{

 public: 
	char pad_40[560];  // Offset: 40 Size: 560



 // Functions 
 public:
}; 
 
 


//Class Engine.PlatformInterfaceWebResponse Size 176
// Inherited 40 bytes 
class UPlatformInterfaceWebResponse : public UObject
{

 public: 
	struct FString OriginalURL;  // Offset: 40 Size: 16
	int32_t ResponseCode;  // Offset: 56 Size: 4
	int32_t Tag;  // Offset: 60 Size: 4
	struct FString StringResponse;  // Offset: 64 Size: 16
	struct TArray<char> BinaryResponse;  // Offset: 80 Size: 16
	char pad_96[80];  // Offset: 96 Size: 80



 // Functions 
 public:
	int32_t GetNumHeaders(); // Function Engine.PlatformInterfaceWebResponse.GetNumHeaders
	struct FString GetHeaderValue(struct FString HeaderName); // Function Engine.PlatformInterfaceWebResponse.GetHeaderValue
	void GetHeader(int32_t HeaderIndex, struct FString& Header, struct FString& Value); // Function Engine.PlatformInterfaceWebResponse.GetHeader
}; 
 
 


//Class Engine.Channel Size 104
// Inherited 40 bytes 
class UChannel : public UObject
{

 public: 
	struct UNetConnection* Connection;  // Offset: 40 Size: 8
	char pad_48[56];  // Offset: 48 Size: 56



 // Functions 
 public:
}; 
 
 


//Class Engine.ActorChannel Size 656
// Inherited 104 bytes 
class UActorChannel : public UChannel
{

 public: 
	struct AActor* Actor;  // Offset: 104 Size: 8
	char pad_112[232];  // Offset: 112 Size: 232
	struct TArray<struct UObject*> CreateSubObjects;  // Offset: 344 Size: 16
	char pad_360[296];  // Offset: 360 Size: 296



 // Functions 
 public:
}; 
 
 


//Class Engine.KismetArrayLibrary Size 40
// Inherited 40 bytes 
class UKismetArrayLibrary : public UBlueprintFunctionLibrary
{

 public: 



 // Functions 
 public:
	void SetArrayPropertyByName(struct UObject* Object, struct FName PropertyName, struct TArray<int32_t>& Value); // Function Engine.KismetArrayLibrary.SetArrayPropertyByName
	void FilterArray(struct TArray<struct AActor*>& TargetArray, AActor* FilterClass, struct TArray<struct AActor*>& FilteredArray); // Function Engine.KismetArrayLibrary.FilterArray
	void Array_Swap(struct TArray<int32_t>& TargetArray, int32_t firstIndex, int32_t SecondIndex); // Function Engine.KismetArrayLibrary.Array_Swap
	void Array_Shuffle(struct TArray<int32_t>& TargetArray); // Function Engine.KismetArrayLibrary.Array_Shuffle
	void Array_Set(struct TArray<int32_t>& TargetArray, int32_t Index, int32_t& Item, bool bSizeToFit); // Function Engine.KismetArrayLibrary.Array_Set
	void Array_Reverse(struct TArray<int32_t>& TargetArray); // Function Engine.KismetArrayLibrary.Array_Reverse
	void Array_Resize(struct TArray<int32_t>& TargetArray, int32_t Size); // Function Engine.KismetArrayLibrary.Array_Resize
	bool Array_RemoveItem(struct TArray<int32_t>& TargetArray, int32_t& Item); // Function Engine.KismetArrayLibrary.Array_RemoveItem
	void Array_Remove(struct TArray<int32_t>& TargetArray, int32_t IndexToRemove); // Function Engine.KismetArrayLibrary.Array_Remove
	void Array_RandomFromStream(struct TArray<int32_t>& TargetArray, struct FRandomStream& RandomStream, int32_t& OutItem, int32_t& OutIndex); // Function Engine.KismetArrayLibrary.Array_RandomFromStream
	void Array_Random(struct TArray<int32_t>& TargetArray, int32_t& OutItem, int32_t& OutIndex); // Function Engine.KismetArrayLibrary.Array_Random
	int32_t Array_Length(struct TArray<int32_t>& TargetArray); // Function Engine.KismetArrayLibrary.Array_Length
	int32_t Array_LastIndex(struct TArray<int32_t>& TargetArray); // Function Engine.KismetArrayLibrary.Array_LastIndex
	bool Array_IsValidIndex(struct TArray<int32_t>& TargetArray, int32_t IndexToTest); // Function Engine.KismetArrayLibrary.Array_IsValidIndex
	void Array_Insert(struct TArray<int32_t>& TargetArray, int32_t& NewItem, int32_t Index); // Function Engine.KismetArrayLibrary.Array_Insert
	bool Array_Identical(struct TArray<int32_t>& ArrayA, struct TArray<int32_t>& ArrayB); // Function Engine.KismetArrayLibrary.Array_Identical
	void Array_Get(struct TArray<int32_t>& TargetArray, int32_t Index, int32_t& Item); // Function Engine.KismetArrayLibrary.Array_Get
	int32_t Array_Find(struct TArray<int32_t>& TargetArray, int32_t& ItemToFind); // Function Engine.KismetArrayLibrary.Array_Find
	bool Array_Contains(struct TArray<int32_t>& TargetArray, int32_t& ItemToFind); // Function Engine.KismetArrayLibrary.Array_Contains
	void Array_Clear(struct TArray<int32_t>& TargetArray); // Function Engine.KismetArrayLibrary.Array_Clear
	void Array_Append(struct TArray<int32_t>& TargetArray, struct TArray<int32_t>& SourceArray); // Function Engine.KismetArrayLibrary.Array_Append
	int32_t Array_AddUnique(struct TArray<int32_t>& TargetArray, int32_t& NewItem); // Function Engine.KismetArrayLibrary.Array_AddUnique
	int32_t Array_Add(struct TArray<int32_t>& TargetArray, int32_t& NewItem); // Function Engine.KismetArrayLibrary.Array_Add
}; 
 
 


//Class Engine.AnimNotify_ResetClothingSimulation Size 56
// Inherited 56 bytes 
class UAnimNotify_ResetClothingSimulation : public UAnimNotify
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.AnimationAsset Size 128
// Inherited 40 bytes 
class UAnimationAsset : public UObject
{

 public: 
	char pad_40[16];  // Offset: 40 Size: 16
	struct USkeleton* Skeleton;  // Offset: 56 Size: 8
	char pad_64[32];  // Offset: 64 Size: 32
	struct TArray<struct UAnimMetaData*> MetaData;  // Offset: 96 Size: 16
	struct TArray<struct UAssetUserData*> AssetUserData;  // Offset: 112 Size: 16



 // Functions 
 public:
}; 
 
 


//Class Engine.BlendSpaceBase Size 328
// Inherited 128 bytes 
class UBlendSpaceBase : public UAnimationAsset
{

 public: 
	char pad_128[8];  // Offset: 128 Size: 8
	char pad_136_1 : 7;  // Offset: 136 Size: 1
	bool bRotationBlendInMeshSpace : 1;  // Offset: 136 Size: 1
	char pad_137[3];  // Offset: 137 Size: 3
	float AnimLength;  // Offset: 140 Size: 4
	struct FInterpolationParameter InterpolationParam[3];  // Offset: 144 Size: 24
	float TargetWeightInterpolationSpeedPerSec;  // Offset: 168 Size: 4
	enum class ENotifyTriggerMode NotifyTriggerMode;  // Offset: 172 Size: 1
	char pad_173[3];  // Offset: 173 Size: 3
	struct TArray<struct FPerBoneInterpolation> PerBoneBlend;  // Offset: 176 Size: 16
	int32_t SampleIndexWithMarkers;  // Offset: 192 Size: 4
	char pad_196[4];  // Offset: 196 Size: 4
	struct TArray<struct FBlendSample> SampleData;  // Offset: 200 Size: 16
	struct TArray<struct FEditorElement> GridSamples;  // Offset: 216 Size: 16
	struct FBlendParameter BlendParameters[3];  // Offset: 232 Size: 96



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionCrossProduct Size 104
// Inherited 64 bytes 
class UMaterialExpressionCrossProduct : public UMaterialExpression
{

 public: 
	struct FExpressionInput A;  // Offset: 64 Size: 20
	struct FExpressionInput B;  // Offset: 84 Size: 20



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleKillBase Size 48
// Inherited 48 bytes 
class UParticleModuleKillBase : public UParticleModule
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionAppendVector Size 104
// Inherited 64 bytes 
class UMaterialExpressionAppendVector : public UMaterialExpression
{

 public: 
	struct FExpressionInput A;  // Offset: 64 Size: 20
	struct FExpressionInput B;  // Offset: 84 Size: 20



 // Functions 
 public:
}; 
 
 


//Class Engine.BlendSpace Size 336
// Inherited 328 bytes 
class UBlendSpace : public UBlendSpaceBase
{

 public: 
	enum class EBlendSpaceAxis AxisToScaleAnimation;  // Offset: 328 Size: 1
	char pad_329[7];  // Offset: 329 Size: 7



 // Functions 
 public:
}; 
 
 


//Class Engine.AimOffsetBlendSpace Size 336
// Inherited 336 bytes 
class UAimOffsetBlendSpace : public UBlendSpace
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionCameraVectorWS Size 64
// Inherited 64 bytes 
class UMaterialExpressionCameraVectorWS : public UMaterialExpression
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.InGameAdManager Size 96
// Inherited 56 bytes 
class UInGameAdManager : public UPlatformInterfaceBase
{

 public: 
	char bShouldPauseWhileAdOpen : 1;  // Offset: 56 Size: 1
	char pad_56_1 : 7;  // Offset: 56 Size: 1
	char pad_57[8];  // Offset: 57 Size: 8
	struct TArray<struct FDelegate> ClickedBannerDelegates;  // Offset: 64 Size: 16
	struct TArray<struct FDelegate> ClosedAdDelegates;  // Offset: 80 Size: 16



 // Functions 
 public:
}; 
 
 


//Class Engine.CloudStorageBase Size 80
// Inherited 56 bytes 
class UCloudStorageBase : public UPlatformInterfaceBase
{

 public: 
	struct TArray<struct FString> LocalCloudFiles;  // Offset: 56 Size: 16
	char bSuppressDelegateCalls : 1;  // Offset: 72 Size: 1
	char pad_72_1 : 7;  // Offset: 72 Size: 1
	char pad_73[8];  // Offset: 73 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.SoundClass Size 200
// Inherited 40 bytes 
class USoundClass : public UObject
{

 public: 
	struct FSoundClassProperties Properties;  // Offset: 40 Size: 120
	struct TArray<struct USoundClass*> ChildClasses;  // Offset: 160 Size: 16
	struct TArray<struct FPassiveSoundMixModifier> PassiveSoundMixModifiers;  // Offset: 176 Size: 16
	struct USoundClass* ParentClass;  // Offset: 192 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.ReflectionCapture Size 552
// Inherited 544 bytes 
class AReflectionCapture : public AActor
{

 public: 
	struct UReflectionCaptureComponent* CaptureComponent;  // Offset: 544 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.BlendSpace1D Size 336
// Inherited 328 bytes 
class UBlendSpace1D : public UBlendSpaceBase
{

 public: 
	char pad_328_1 : 7;  // Offset: 328 Size: 1
	bool bScaleAnimation : 1;  // Offset: 328 Size: 1
	char pad_329[7];  // Offset: 329 Size: 7



 // Functions 
 public:
}; 
 
 


//Class Engine.Interface_PostProcessVolume Size 40
// Inherited 40 bytes 
class UInterface_PostProcessVolume : public UInterface
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleBeamBase Size 48
// Inherited 48 bytes 
class UParticleModuleBeamBase : public UParticleModule
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.AimOffsetBlendSpace1D Size 336
// Inherited 336 bytes 
class UAimOffsetBlendSpace1D : public UBlendSpace1D
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionViewProperty Size 72
// Inherited 64 bytes 
class UMaterialExpressionViewProperty : public UMaterialExpression
{

 public: 
	enum class EMaterialExposedViewProperty Property;  // Offset: 64 Size: 1
	char pad_65[7];  // Offset: 65 Size: 7



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionAtmosphericLightColor Size 64
// Inherited 64 bytes 
class UMaterialExpressionAtmosphericLightColor : public UMaterialExpression
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.LightmassPrimitiveSettingsObject Size 64
// Inherited 40 bytes 
class ULightmassPrimitiveSettingsObject : public UObject
{

 public: 
	struct FLightmassPrimitiveSettings LightmassSettings;  // Offset: 40 Size: 24



 // Functions 
 public:
}; 
 
 


//Class Engine.AmbientSound Size 552
// Inherited 544 bytes 
class AAmbientSound : public AActor
{

 public: 
	struct UAudioComponent* AudioComponent;  // Offset: 544 Size: 8



 // Functions 
 public:
	void Stop(); // Function Engine.AmbientSound.Stop
	void Play(float StartTime); // Function Engine.AmbientSound.Play
	void FadeOut(float FadeOutDuration, float FadeVolumeLevel); // Function Engine.AmbientSound.FadeOut
	void FadeIn(float FadeInDuration, float FadeVolumeLevel); // Function Engine.AmbientSound.FadeIn
	void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel); // Function Engine.AmbientSound.AdjustVolume
}; 
 
 


//Class Engine.TimelineComponent Size 336
// Inherited 176 bytes 
class UTimelineComponent : public UActorComponent
{

 public: 
	struct FTimeline TheTimeline;  // Offset: 176 Size: 152
	char bIgnoreTimeDilation : 1;  // Offset: 328 Size: 1
	char pad_328_1 : 7;  // Offset: 328 Size: 1
	char pad_329[8];  // Offset: 329 Size: 8



 // Functions 
 public:
	void Stop(); // Function Engine.TimelineComponent.Stop
	void SetVectorCurve(struct UCurveVector* NewVectorCurve, struct FName VectorTrackName); // Function Engine.TimelineComponent.SetVectorCurve
	void SetTimelineLengthMode(enum class ETimelineLengthMode NewLengthMode); // Function Engine.TimelineComponent.SetTimelineLengthMode
	void SetTimelineLength(float NewLength); // Function Engine.TimelineComponent.SetTimelineLength
	void SetPlayRate(float NewRate); // Function Engine.TimelineComponent.SetPlayRate
	void SetPlaybackPosition(float NewPosition, bool bFireEvents, bool bFireUpdate); // Function Engine.TimelineComponent.SetPlaybackPosition
	void SetNewTime(float NewTime); // Function Engine.TimelineComponent.SetNewTime
	void SetLooping(bool bNewLooping); // Function Engine.TimelineComponent.SetLooping
	void SetLinearColorCurve(struct UCurveLinearColor* NewLinearColorCurve, struct FName LinearColorTrackName); // Function Engine.TimelineComponent.SetLinearColorCurve
	void SetIgnoreTimeDilation(bool bNewIgnoreTimeDilation); // Function Engine.TimelineComponent.SetIgnoreTimeDilation
	void SetFloatCurve(struct UCurveFloat* NewFloatCurve, struct FName FloatTrackName); // Function Engine.TimelineComponent.SetFloatCurve
	void ReverseFromEnd(); // Function Engine.TimelineComponent.ReverseFromEnd
	void Reverse(); // Function Engine.TimelineComponent.Reverse
	void PlayFromStart(); // Function Engine.TimelineComponent.PlayFromStart
	void Play(); // Function Engine.TimelineComponent.Play
	void OnRep_Timeline(); // Function Engine.TimelineComponent.OnRep_Timeline
	bool IsReversing(); // Function Engine.TimelineComponent.IsReversing
	bool IsPlaying(); // Function Engine.TimelineComponent.IsPlaying
	bool IsLooping(); // Function Engine.TimelineComponent.IsLooping
	float GetTimelineLength(); // Function Engine.TimelineComponent.GetTimelineLength
	float GetPlayRate(); // Function Engine.TimelineComponent.GetPlayRate
	float GetPlaybackPosition(); // Function Engine.TimelineComponent.GetPlaybackPosition
	bool GetIgnoreTimeDilation(); // Function Engine.TimelineComponent.GetIgnoreTimeDilation
}; 
 
 


//Class Engine.AnimationSettings Size 208
// Inherited 56 bytes 
class UAnimationSettings : public UDeveloperSettings
{

 public: 
	int32_t CompressCommandletVersion;  // Offset: 56 Size: 4
	char pad_60[4];  // Offset: 60 Size: 4
	struct TArray<struct FString> KeyEndEffectorsMatchNameArray;  // Offset: 64 Size: 16
	char pad_80_1 : 7;  // Offset: 80 Size: 1
	bool ForceRecompression : 1;  // Offset: 80 Size: 1
	char pad_81_1 : 7;  // Offset: 81 Size: 1
	bool bForceBelowThreshold : 1;  // Offset: 81 Size: 1
	char pad_82_1 : 7;  // Offset: 82 Size: 1
	bool bFirstRecompressUsingCurrentOrDefault : 1;  // Offset: 82 Size: 1
	char pad_83_1 : 7;  // Offset: 83 Size: 1
	bool bRaiseMaxErrorToExisting : 1;  // Offset: 83 Size: 1
	char pad_84_1 : 7;  // Offset: 84 Size: 1
	bool bEnablePerformanceLog : 1;  // Offset: 84 Size: 1
	char pad_85_1 : 7;  // Offset: 85 Size: 1
	bool bStripAnimationDataOnDedicatedServer : 1;  // Offset: 85 Size: 1
	char pad_86_1 : 7;  // Offset: 86 Size: 1
	bool bTickAnimationOnSkeletalMeshInit : 1;  // Offset: 86 Size: 1
	char pad_87[1];  // Offset: 87 Size: 1
	struct TArray<struct FCustomAttributeSetting> BoneCustomAttributesNames;  // Offset: 88 Size: 16
	struct TArray<struct FString> BoneNamesWithCustomAttributes;  // Offset: 104 Size: 16
	struct TMap<struct FName, enum class ECustomAttributeBlendType> AttributeBlendModes;  // Offset: 120 Size: 80
	enum class ECustomAttributeBlendType DefaultAttributeBlendMode;  // Offset: 200 Size: 1
	char pad_201[7];  // Offset: 201 Size: 7



 // Functions 
 public:
}; 
 
 


//Class Engine.SoundNodeLooping Size 80
// Inherited 72 bytes 
class USoundNodeLooping : public USoundNode
{

 public: 
	int32_t LoopCount;  // Offset: 72 Size: 4
	char bLoopIndefinitely : 1;  // Offset: 76 Size: 1
	char pad_76_1 : 7;  // Offset: 76 Size: 1
	char pad_77[4];  // Offset: 77 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.AnimBlueprint Size 200
// Inherited 160 bytes 
class UAnimBlueprint : public UBlueprint
{

 public: 
	char pad_160[8];  // Offset: 160 Size: 8
	struct USkeleton* TargetSkeleton;  // Offset: 168 Size: 8
	struct TArray<struct FAnimGroupInfo> Groups;  // Offset: 176 Size: 16
	char pad_192_1 : 7;  // Offset: 192 Size: 1
	bool bUseMultiThreadedAnimationUpdate : 1;  // Offset: 192 Size: 1
	char pad_193_1 : 7;  // Offset: 193 Size: 1
	bool bWarnAboutBlueprintUsage : 1;  // Offset: 193 Size: 1
	char pad_194[6];  // Offset: 194 Size: 6



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionCustom Size 168
// Inherited 64 bytes 
class UMaterialExpressionCustom : public UMaterialExpression
{

 public: 
	struct FString code;  // Offset: 64 Size: 16
	enum class ECustomMaterialOutputType OutputType;  // Offset: 80 Size: 1
	char pad_81[7];  // Offset: 81 Size: 7
	struct FString Description;  // Offset: 88 Size: 16
	struct TArray<struct FCustomInput> Inputs;  // Offset: 104 Size: 16
	struct TArray<struct FCustomOutput> AdditionalOutputs;  // Offset: 120 Size: 16
	struct TArray<struct FCustomDefine> AdditionalDefines;  // Offset: 136 Size: 16
	struct TArray<struct FString> IncludeFilePaths;  // Offset: 152 Size: 16



 // Functions 
 public:
}; 
 
 


//Class Engine.AnimBlueprintGeneratedClass Size 1456
// Inherited 808 bytes 
class UAnimBlueprintGeneratedClass : public UBlueprintGeneratedClass
{

 public: 
	char pad_808[8];  // Offset: 808 Size: 8
	struct TArray<struct FBakedAnimationStateMachine> BakedStateMachines;  // Offset: 816 Size: 16
	struct USkeleton* TargetSkeleton;  // Offset: 832 Size: 8
	struct TArray<struct FAnimNotifyEvent> AnimNotifies;  // Offset: 840 Size: 16
	struct TMap<struct FName, struct FCachedPoseIndices> OrderedSavedPoseIndicesMap;  // Offset: 856 Size: 80
	char pad_936[128];  // Offset: 936 Size: 128
	struct TArray<struct FName> SyncGroupNames;  // Offset: 1064 Size: 16
	struct TArray<struct FExposedValueHandler> EvaluateGraphExposedInputs;  // Offset: 1080 Size: 16
	struct TMap<struct FName, struct FGraphAssetPlayerInformation> GraphAssetPlayerInformation;  // Offset: 1096 Size: 80
	struct TMap<struct FName, struct FAnimGraphBlendOptions> GraphBlendOptions;  // Offset: 1176 Size: 80
	struct FPropertyAccessLibrary PropertyAccessLibrary;  // Offset: 1256 Size: 200



 // Functions 
 public:
}; 
 
 


//Class Engine.DialogueVoice Size 64
// Inherited 40 bytes 
class UDialogueVoice : public UObject
{

 public: 
	enum class EGrammaticalGender Gender;  // Offset: 40 Size: 1
	enum class EGrammaticalNumber Plurality;  // Offset: 41 Size: 1
	char pad_42[2];  // Offset: 42 Size: 2
	struct FGuid LocalizationGUID;  // Offset: 44 Size: 16
	char pad_60[4];  // Offset: 60 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionVertexInterpolator Size 96
// Inherited 64 bytes 
class UMaterialExpressionVertexInterpolator : public UMaterialExpressionCustomOutput
{

 public: 
	struct FExpressionInput Input;  // Offset: 64 Size: 20
	char pad_84[12];  // Offset: 84 Size: 12



 // Functions 
 public:
}; 
 
 


//Class Engine.LODSyncComponent Size 320
// Inherited 176 bytes 
class ULODSyncComponent : public UActorComponent
{

 public: 
	int32_t NumLODs;  // Offset: 176 Size: 4
	int32_t ForcedLOD;  // Offset: 180 Size: 4
	struct TArray<struct FComponentSync> ComponentsToSync;  // Offset: 184 Size: 16
	struct TMap<struct FName, struct FLODMappingData> CustomLODMapping;  // Offset: 200 Size: 80
	int32_t CurrentLOD;  // Offset: 280 Size: 4
	int32_t CurrentNumLODs;  // Offset: 284 Size: 4
	struct TArray<struct UPrimitiveComponent*> DriveComponents;  // Offset: 288 Size: 16
	struct TArray<struct UPrimitiveComponent*> SubComponents;  // Offset: 304 Size: 16



 // Functions 
 public:
	struct FString GetLODSyncDebugText(); // Function Engine.LODSyncComponent.GetLODSyncDebugText
}; 
 
 


//Class Engine.RuntimeVirtualTextureVolume Size 552
// Inherited 544 bytes 
class ARuntimeVirtualTextureVolume : public AActor
{

 public: 
	struct URuntimeVirtualTextureComponent* VirtualTextureComponent;  // Offset: 544 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.AnimBoneCompressionSettings Size 56
// Inherited 40 bytes 
class UAnimBoneCompressionSettings : public UObject
{

 public: 
	struct TArray<struct UAnimBoneCompressionCodec*> Codecs;  // Offset: 40 Size: 16



 // Functions 
 public:
}; 
 
 


//Class Engine.DestructibleInterface Size 40
// Inherited 40 bytes 
class UDestructibleInterface : public UInterface
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.AnimClassData Size 816
// Inherited 40 bytes 
class UAnimClassData : public UObject
{

 public: 
	char pad_40[8];  // Offset: 40 Size: 8
	struct TArray<struct FBakedAnimationStateMachine> BakedStateMachines;  // Offset: 48 Size: 16
	struct USkeleton* TargetSkeleton;  // Offset: 64 Size: 8
	struct TArray<struct FAnimNotifyEvent> AnimNotifies;  // Offset: 72 Size: 16
	struct TMap<struct FName, struct FCachedPoseIndices> OrderedSavedPoseIndicesMap;  // Offset: 88 Size: 80
	struct TArray<struct FAnimBlueprintFunction> AnimBlueprintFunctions;  // Offset: 168 Size: 16
	struct TArray<struct FAnimBlueprintFunctionData> AnimBlueprintFunctionData;  // Offset: 184 Size: 16
	struct TArray<struct TFieldPath<FNone>> AnimNodeProperties;  // Offset: 200 Size: 16
	char pad_216[16];  // Offset: 216 Size: 16
	struct TArray<struct TFieldPath<FNone>> LinkedAnimGraphNodeProperties;  // Offset: 232 Size: 16
	char pad_248[16];  // Offset: 248 Size: 16
	struct TArray<struct TFieldPath<FNone>> LinkedAnimLayerNodeProperties;  // Offset: 264 Size: 16
	char pad_280[16];  // Offset: 280 Size: 16
	struct TArray<struct TFieldPath<FNone>> PreUpdateNodeProperties;  // Offset: 296 Size: 16
	char pad_312[16];  // Offset: 312 Size: 16
	struct TArray<struct TFieldPath<FNone>> DynamicResetNodeProperties;  // Offset: 328 Size: 16
	char pad_344[16];  // Offset: 344 Size: 16
	struct TArray<struct TFieldPath<FNone>> StateMachineNodeProperties;  // Offset: 360 Size: 16
	char pad_376[16];  // Offset: 376 Size: 16
	struct TArray<struct TFieldPath<FNone>> InitializationNodeProperties;  // Offset: 392 Size: 16
	char pad_408[16];  // Offset: 408 Size: 16
	struct TMap<struct FName, struct FGraphAssetPlayerInformation> GraphNameAssetPlayers;  // Offset: 424 Size: 80
	struct TArray<struct FName> SyncGroupNames;  // Offset: 504 Size: 16
	struct TArray<struct FExposedValueHandler> EvaluateGraphExposedInputs;  // Offset: 520 Size: 16
	struct TMap<struct FName, struct FAnimGraphBlendOptions> GraphBlendOptions;  // Offset: 536 Size: 80
	struct FPropertyAccessLibrary PropertyAccessLibrary;  // Offset: 616 Size: 200



 // Functions 
 public:
}; 
 
 


//Class Engine.PhysicsConstraintActor Size 576
// Inherited 544 bytes 
class APhysicsConstraintActor : public ARigidBodyBase
{

 public: 
	struct UPhysicsConstraintComponent* ConstraintComp;  // Offset: 544 Size: 8
	struct AActor* ConstraintActor1;  // Offset: 552 Size: 8
	struct AActor* ConstraintActor2;  // Offset: 560 Size: 8
	char bDisableCollision : 1;  // Offset: 568 Size: 1
	char pad_568_1 : 7;  // Offset: 568 Size: 1
	char pad_569[8];  // Offset: 569 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.AnimClassInterface Size 40
// Inherited 40 bytes 
class UAnimClassInterface : public UInterface
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.InterpTrackInstParticleReplay Size 48
// Inherited 40 bytes 
class UInterpTrackInstParticleReplay : public UInterpTrackInst
{

 public: 
	float LastUpdatePosition;  // Offset: 40 Size: 4
	char pad_44[4];  // Offset: 44 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.AnimSequenceBase Size 168
// Inherited 128 bytes 
class UAnimSequenceBase : public UAnimationAsset
{

 public: 
	struct TArray<struct FAnimNotifyEvent> Notifies;  // Offset: 128 Size: 16
	float SequenceLength;  // Offset: 144 Size: 4
	float RateScale;  // Offset: 148 Size: 4
	struct FRawCurveTracks RawCurveData;  // Offset: 152 Size: 16



 // Functions 
 public:
	float GetPlayLength(); // Function Engine.AnimSequenceBase.GetPlayLength
}; 
 
 


//Class Engine.LocalPlayerSubsystem Size 48
// Inherited 48 bytes 
class ULocalPlayerSubsystem : public USubsystem
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.DirectionalLightComponent Size 1040
// Inherited 832 bytes 
class UDirectionalLightComponent : public ULightComponent
{

 public: 
	float ShadowCascadeBiasDistribution;  // Offset: 832 Size: 4
	char bEnableLightShaftOcclusion : 1;  // Offset: 836 Size: 1
	char pad_836_1 : 7;  // Offset: 836 Size: 1
	char pad_837[4];  // Offset: 837 Size: 4
	float OcclusionMaskDarkness;  // Offset: 840 Size: 4
	float OcclusionDepthRange;  // Offset: 844 Size: 4
	struct FVector LightShaftOverrideDirection;  // Offset: 848 Size: 12
	float WholeSceneDynamicShadowRadius;  // Offset: 860 Size: 4
	float DynamicShadowDistanceMovableLight;  // Offset: 864 Size: 4
	float DynamicShadowDistanceStationaryLight;  // Offset: 868 Size: 4
	int32_t DynamicShadowCascades;  // Offset: 872 Size: 4
	int32_t MaxCascadeStaticObjects;  // Offset: 876 Size: 4
	int32_t MaxCascadeDynamicObjects;  // Offset: 880 Size: 4
	float CascadeDistributionExponent;  // Offset: 884 Size: 4
	float CascadeTransitionFraction;  // Offset: 888 Size: 4
	float ShadowDistanceFadeoutFraction;  // Offset: 892 Size: 4
	char bUseInsetShadowsForMovableObjects : 1;  // Offset: 896 Size: 1
	char pad_896_1 : 7;  // Offset: 896 Size: 1
	char pad_897[4];  // Offset: 897 Size: 4
	int32_t FarShadowCascadeCount;  // Offset: 900 Size: 4
	float FarShadowDistance;  // Offset: 904 Size: 4
	float DistanceFieldShadowDistance;  // Offset: 908 Size: 4
	float LightSourceAngle;  // Offset: 912 Size: 4
	float LightSourceSoftAngle;  // Offset: 916 Size: 4
	float ShadowSourceAngleFactor;  // Offset: 920 Size: 4
	float TraceDistance;  // Offset: 924 Size: 4
	char bUsedAsAtmosphereSunLight : 1;  // Offset: 928 Size: 1
	char pad_928_1 : 7;  // Offset: 928 Size: 1
	char pad_929[4];  // Offset: 929 Size: 4
	int32_t AtmosphereSunLightIndex;  // Offset: 932 Size: 4
	struct FLinearColor AtmosphereSunDiskColorScale;  // Offset: 936 Size: 16
	char bPerPixelAtmosphereTransmittance : 1;  // Offset: 952 Size: 1
	char bCastShadowsOnClouds : 1;  // Offset: 952 Size: 1
	char bCastShadowsOnAtmosphere : 1;  // Offset: 952 Size: 1
	char bCastCloudShadows : 1;  // Offset: 952 Size: 1
	char pad_952_1 : 4;  // Offset: 952 Size: 1
	char pad_953[4];  // Offset: 953 Size: 4
	float CloudShadowStrength;  // Offset: 956 Size: 4
	float CloudShadowOnAtmosphereStrength;  // Offset: 960 Size: 4
	float CloudShadowOnSurfaceStrength;  // Offset: 964 Size: 4
	float CloudShadowDepthBias;  // Offset: 968 Size: 4
	float CloudShadowExtent;  // Offset: 972 Size: 4
	float CloudShadowMapResolutionScale;  // Offset: 976 Size: 4
	float CloudShadowRaySampleCountScale;  // Offset: 980 Size: 4
	struct FLinearColor CloudScatteredLuminanceScale;  // Offset: 984 Size: 16
	struct FLightmassDirectionalLightSettings LightmassSettings;  // Offset: 1000 Size: 16
	char bCastModulatedShadows : 1;  // Offset: 1016 Size: 1
	char pad_1016_1 : 7;  // Offset: 1016 Size: 1
	char pad_1017[4];  // Offset: 1017 Size: 4
	struct FColor ModulatedShadowColor;  // Offset: 1020 Size: 4
	float ShadowAmount;  // Offset: 1024 Size: 4
	char pad_1028[12];  // Offset: 1028 Size: 12



 // Functions 
 public:
	void SetShadowDistanceFadeoutFraction(float NewValue); // Function Engine.DirectionalLightComponent.SetShadowDistanceFadeoutFraction
	void SetShadowAmount(float NewValue); // Function Engine.DirectionalLightComponent.SetShadowAmount
	void SetOcclusionMaskDarkness(float NewValue); // Function Engine.DirectionalLightComponent.SetOcclusionMaskDarkness
	void SetMaxCascadeStaticObjects(int32_t NewValue); // Function Engine.DirectionalLightComponent.SetMaxCascadeStaticObjects
	void SetMaxCascadeDynamicObjects(int32_t NewValue); // Function Engine.DirectionalLightComponent.SetMaxCascadeDynamicObjects
	void SetLightShaftOverrideDirection(struct FVector NewValue); // Function Engine.DirectionalLightComponent.SetLightShaftOverrideDirection
	void SetEnableLightShaftOcclusion(bool bNewValue); // Function Engine.DirectionalLightComponent.SetEnableLightShaftOcclusion
	void SetDynamicShadowDistanceStationaryLight(float NewValue); // Function Engine.DirectionalLightComponent.SetDynamicShadowDistanceStationaryLight
	void SetDynamicShadowDistanceMovableLight(float NewValue); // Function Engine.DirectionalLightComponent.SetDynamicShadowDistanceMovableLight
	void SetDynamicShadowCascades(int32_t NewValue); // Function Engine.DirectionalLightComponent.SetDynamicShadowCascades
	void SetCascadeTransitionFraction(float NewValue); // Function Engine.DirectionalLightComponent.SetCascadeTransitionFraction
	void SetCascadeDistributionExponent(float NewValue); // Function Engine.DirectionalLightComponent.SetCascadeDistributionExponent
	void SetAtmosphereSunLightIndex(int32_t NewValue); // Function Engine.DirectionalLightComponent.SetAtmosphereSunLightIndex
	void SetAtmosphereSunLight(bool bNewValue); // Function Engine.DirectionalLightComponent.SetAtmosphereSunLight
}; 
 
 


//Class Engine.PhysicsAsset Size 312
// Inherited 40 bytes 
class UPhysicsAsset : public UObject
{

 public: 
	char pad_40[8];  // Offset: 40 Size: 8
	struct TArray<int32_t> BoundsBodies;  // Offset: 48 Size: 16
	struct TArray<struct USkeletalBodySetup*> SkeletalBodySetups;  // Offset: 64 Size: 16
	struct TArray<struct UPhysicsConstraintTemplate*> ConstraintSetup;  // Offset: 80 Size: 16
	struct FSolverIterations SolverIterations;  // Offset: 96 Size: 28
	enum class EPhysicsAssetSolverType SolverType;  // Offset: 124 Size: 1
	char bNotForDedicatedServer : 1;  // Offset: 125 Size: 1
	char pad_125_1 : 7;  // Offset: 125 Size: 1
	char pad_126[163];  // Offset: 126 Size: 163
	struct UThumbnailInfo* ThumbnailInfo;  // Offset: 288 Size: 8
	struct TArray<struct UBodySetup*> BodySetup;  // Offset: 296 Size: 16



 // Functions 
 public:
}; 
 
 


//Class Engine.Texture2D Size 416
// Inherited 384 bytes 
class UTexture2D : public UTexture
{

 public: 
	int32_t LevelIndex;  // Offset: 376 Size: 4
	int32_t FirstResourceMemMip;  // Offset: 380 Size: 4
	char bTemporarilyDisableStreaming : 1;  // Offset: 384 Size: 1
	enum class TextureAddress AddressX;  // Offset: 385 Size: 1
	enum class TextureAddress AddressY;  // Offset: 386 Size: 1
	struct FIntPoint ImportedSize;  // Offset: 388 Size: 8
	char pad_402_1 : 7;  // Offset: 402 Size: 1
	char pad_403[14];  // Offset: 403 Size: 14



 // Functions 
 public:
	int32_t Blueprint_GetSizeY(); // Function Engine.Texture2D.Blueprint_GetSizeY
	int32_t Blueprint_GetSizeX(); // Function Engine.Texture2D.Blueprint_GetSizeX
}; 
 
 


//Class Engine.ParticleSystem Size 272
// Inherited 48 bytes 
class UParticleSystem : public UFXSystemAsset
{

 public: 
	float UpdateTime_FPS;  // Offset: 48 Size: 4
	float UpdateTime_Delta;  // Offset: 52 Size: 4
	float WarmupTime;  // Offset: 56 Size: 4
	float WarmupTickRate;  // Offset: 60 Size: 4
	struct TArray<struct UParticleEmitter*> Emitters;  // Offset: 64 Size: 16
	struct UParticleSystemComponent* PreviewComponent;  // Offset: 80 Size: 8
	struct UInterpCurveEdSetup* CurveEdSetup;  // Offset: 88 Size: 8
	float LODDistanceCheckTime;  // Offset: 96 Size: 4
	float MacroUVRadius;  // Offset: 100 Size: 4
	struct TArray<float> LODDistances;  // Offset: 104 Size: 16
	struct TArray<struct FParticleSystemLOD> LODSettings;  // Offset: 120 Size: 16
	struct FBox FixedRelativeBoundingBox;  // Offset: 136 Size: 28
	float SecondsBeforeInactive;  // Offset: 164 Size: 4
	float Delay;  // Offset: 168 Size: 4
	float DelayLow;  // Offset: 172 Size: 4
	char bOrientZAxisTowardCamera : 1;  // Offset: 176 Size: 1
	char bUseFixedRelativeBoundingBox : 1;  // Offset: 176 Size: 1
	char bShouldResetPeakCounts : 1;  // Offset: 176 Size: 1
	char bHasPhysics : 1;  // Offset: 176 Size: 1
	char bUseRealtimeThumbnail : 1;  // Offset: 176 Size: 1
	char ThumbnailImageOutOfDate : 1;  // Offset: 176 Size: 1
	char pad_176_1 : 2;  // Offset: 176 Size: 1
	char bUseDelayRange : 1;  // Offset: 177 Size: 1
	char bAllowManagedTicking : 1;  // Offset: 177 Size: 1
	char bInfluencedLocalPawnActive : 1;  // Offset: 177 Size: 1
	char bInfluencedLocalPawnDetail : 1;  // Offset: 177 Size: 1
	char bAutoDeactivate : 1;  // Offset: 177 Size: 1
	char bRegenerateLODDuplicate : 1;  // Offset: 177 Size: 1
	char pad_177_1 : 2;  // Offset: 177 Size: 1
	enum class EParticleSystemUpdateMode SystemUpdateMode;  // Offset: 178 Size: 1
	enum class ParticleSystemLODMethod LODMethod;  // Offset: 179 Size: 1
	enum class EParticleSystemInsignificanceReaction InsignificantReaction;  // Offset: 180 Size: 1
	enum class EParticleSystemOcclusionBoundsMethod OcclusionBoundsMethod;  // Offset: 181 Size: 1
	char pad_182[1];  // Offset: 182 Size: 1
	enum class EParticleSignificanceLevel MaxSignificanceLevel;  // Offset: 183 Size: 1
	uint32_t MinTimeBetweenTicks;  // Offset: 184 Size: 4
	float InsignificanceDelay;  // Offset: 188 Size: 4
	struct FVector MacroUVPosition;  // Offset: 192 Size: 12
	struct FBox CustomOcclusionBounds;  // Offset: 204 Size: 28
	struct TArray<struct FLODSoloTrack> SoloTracking;  // Offset: 232 Size: 16
	struct TArray<struct FNamedEmitterMaterial> NamedMaterialSlots;  // Offset: 248 Size: 16
	char pad_264[8];  // Offset: 264 Size: 8



 // Functions 
 public:
	bool ContainsEmitterType(UObject* TypeData); // Function Engine.ParticleSystem.ContainsEmitterType
}; 
 
 


//Class Engine.AnimCompositeBase Size 168
// Inherited 168 bytes 
class UAnimCompositeBase : public UAnimSequenceBase
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionRayTracingQualitySwitch Size 104
// Inherited 64 bytes 
class UMaterialExpressionRayTracingQualitySwitch : public UMaterialExpression
{

 public: 
	struct FExpressionInput Normal;  // Offset: 64 Size: 20
	struct FExpressionInput RayTraced;  // Offset: 84 Size: 20



 // Functions 
 public:
}; 
 
 


//Class Engine.GameNetworkManager Size 720
// Inherited 544 bytes 
class AGameNetworkManager : public AInfo
{

 public: 
	float BadPacketLossThreshold;  // Offset: 544 Size: 4
	float SeverePacketLossThreshold;  // Offset: 548 Size: 4
	int32_t BadPingThreshold;  // Offset: 552 Size: 4
	int32_t SeverePingThreshold;  // Offset: 556 Size: 4
	int32_t AdjustedNetSpeed;  // Offset: 560 Size: 4
	float LastNetSpeedUpdateTime;  // Offset: 564 Size: 4
	int32_t TotalNetBandwidth;  // Offset: 568 Size: 4
	int32_t MinDynamicBandwidth;  // Offset: 572 Size: 4
	int32_t MaxDynamicBandwidth;  // Offset: 576 Size: 4
	char bIsStandbyCheckingEnabled : 1;  // Offset: 580 Size: 1
	char bHasStandbyCheatTriggered : 1;  // Offset: 580 Size: 1
	char pad_580_1 : 6;  // Offset: 580 Size: 1
	char pad_581[4];  // Offset: 581 Size: 4
	float StandbyRxCheatTime;  // Offset: 584 Size: 4
	float StandbyTxCheatTime;  // Offset: 588 Size: 4
	float PercentMissingForRxStandby;  // Offset: 592 Size: 4
	float PercentMissingForTxStandby;  // Offset: 596 Size: 4
	float PercentForBadPing;  // Offset: 600 Size: 4
	float JoinInProgressStandbyWaitTime;  // Offset: 604 Size: 4
	float MoveRepSize;  // Offset: 608 Size: 4
	float MAXPOSITIONERRORSQUARED;  // Offset: 612 Size: 4
	float MAXNEARZEROVELOCITYSQUARED;  // Offset: 616 Size: 4
	float CLIENTADJUSTUPDATECOST;  // Offset: 620 Size: 4
	float MAXCLIENTUPDATEINTERVAL;  // Offset: 624 Size: 4
	float MaxClientForcedUpdateDuration;  // Offset: 628 Size: 4
	float ServerForcedUpdateHitchThreshold;  // Offset: 632 Size: 4
	float ServerForcedUpdateHitchCooldown;  // Offset: 636 Size: 4
	float MaxMoveDeltaTime;  // Offset: 640 Size: 4
	float MaxClientSmoothingDeltaTime;  // Offset: 644 Size: 4
	float ClientNetSendMoveDeltaTime;  // Offset: 648 Size: 4
	float ClientNetSendMoveDeltaTimeThrottled;  // Offset: 652 Size: 4
	float ClientNetSendMoveDeltaTimeStationary;  // Offset: 656 Size: 4
	int32_t ClientNetSendMoveThrottleAtNetSpeed;  // Offset: 660 Size: 4
	int32_t ClientNetSendMoveThrottleOverPlayerCount;  // Offset: 664 Size: 4
	char pad_668_1 : 7;  // Offset: 668 Size: 1
	bool ClientAuthorativePosition : 1;  // Offset: 668 Size: 1
	char pad_669[3];  // Offset: 669 Size: 3
	float ClientErrorUpdateRateLimit;  // Offset: 672 Size: 4
	float ClientNetCamUpdateDeltaTime;  // Offset: 676 Size: 4
	float ClientNetCamUpdatePositionLimit;  // Offset: 680 Size: 4
	char pad_684_1 : 7;  // Offset: 684 Size: 1
	bool bMovementTimeDiscrepancyDetection : 1;  // Offset: 684 Size: 1
	char pad_685_1 : 7;  // Offset: 685 Size: 1
	bool bMovementTimeDiscrepancyResolution : 1;  // Offset: 685 Size: 1
	char pad_686[2];  // Offset: 686 Size: 2
	float MovementTimeDiscrepancyMaxTimeMargin;  // Offset: 688 Size: 4
	float MovementTimeDiscrepancyMinTimeMargin;  // Offset: 692 Size: 4
	float MovementTimeDiscrepancyResolutionRate;  // Offset: 696 Size: 4
	float MovementTimeDiscrepancyDriftAllowance;  // Offset: 700 Size: 4
	char pad_704_1 : 7;  // Offset: 704 Size: 1
	bool bMovementTimeDiscrepancyForceCorrectionsDuringResolution : 1;  // Offset: 704 Size: 1
	char pad_705_1 : 7;  // Offset: 705 Size: 1
	bool bUseDistanceBasedRelevancy : 1;  // Offset: 705 Size: 1
	char pad_706[14];  // Offset: 706 Size: 14



 // Functions 
 public:
}; 
 
 


//Class Engine.AnimComposite Size 184
// Inherited 168 bytes 
class UAnimComposite : public UAnimCompositeBase
{

 public: 
	struct FAnimTrack AnimationTrack;  // Offset: 168 Size: 16



 // Functions 
 public:
}; 
 
 


//Class Engine.DrawFrustumComponent Size 1168
// Inherited 1136 bytes 
class UDrawFrustumComponent : public UPrimitiveComponent
{

 public: 
	struct FColor FrustumColor;  // Offset: 1136 Size: 4
	float FrustumAngle;  // Offset: 1140 Size: 4
	float FrustumAspectRatio;  // Offset: 1144 Size: 4
	float FrustumStartDist;  // Offset: 1148 Size: 4
	float FrustumEndDist;  // Offset: 1152 Size: 4
	char pad_1156[4];  // Offset: 1156 Size: 4
	struct UTexture* Texture;  // Offset: 1160 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.AnimCompress Size 64
// Inherited 56 bytes 
class UAnimCompress : public UAnimBoneCompressionCodec
{

 public: 
	char bNeedsSkeleton : 1;  // Offset: 56 Size: 1
	char pad_56_1 : 7;  // Offset: 56 Size: 1
	char pad_57[4];  // Offset: 57 Size: 4
	enum class AnimationCompressionFormat TranslationCompressionFormat;  // Offset: 60 Size: 1
	enum class AnimationCompressionFormat RotationCompressionFormat;  // Offset: 61 Size: 1
	enum class AnimationCompressionFormat ScaleCompressionFormat;  // Offset: 62 Size: 1
	char pad_63[1];  // Offset: 63 Size: 1



 // Functions 
 public:
}; 
 
 


//Class Engine.AnimCompress_BitwiseCompressOnly Size 64
// Inherited 64 bytes 
class UAnimCompress_BitwiseCompressOnly : public UAnimCompress
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.AnimCompress_PerTrackCompression Size 216
// Inherited 96 bytes 
class UAnimCompress_PerTrackCompression : public UAnimCompress_RemoveLinearKeys
{

 public: 
	float MaxZeroingThreshold;  // Offset: 96 Size: 4
	float MaxPosDiffBitwise;  // Offset: 100 Size: 4
	float MaxAngleDiffBitwise;  // Offset: 104 Size: 4
	float MaxScaleDiffBitwise;  // Offset: 108 Size: 4
	struct TArray<enum class AnimationCompressionFormat> AllowedRotationFormats;  // Offset: 112 Size: 16
	struct TArray<enum class AnimationCompressionFormat> AllowedTranslationFormats;  // Offset: 128 Size: 16
	struct TArray<enum class AnimationCompressionFormat> AllowedScaleFormats;  // Offset: 144 Size: 16
	char bResampleAnimation : 1;  // Offset: 160 Size: 1
	char pad_160_1 : 7;  // Offset: 160 Size: 1
	char pad_161[4];  // Offset: 161 Size: 4
	float ResampledFramerate;  // Offset: 164 Size: 4
	int32_t MinKeysForResampling;  // Offset: 168 Size: 4
	char bUseAdaptiveError : 1;  // Offset: 172 Size: 1
	char bUseOverrideForEndEffectors : 1;  // Offset: 172 Size: 1
	char pad_172_1 : 6;  // Offset: 172 Size: 1
	char pad_173[4];  // Offset: 173 Size: 4
	int32_t TrackHeightBias;  // Offset: 176 Size: 4
	float ParentingDivisor;  // Offset: 180 Size: 4
	float ParentingDivisorExponent;  // Offset: 184 Size: 4
	char bUseAdaptiveError2 : 1;  // Offset: 188 Size: 1
	char pad_188_1 : 7;  // Offset: 188 Size: 1
	char pad_189[4];  // Offset: 189 Size: 4
	float RotationErrorSourceRatio;  // Offset: 192 Size: 4
	float TranslationErrorSourceRatio;  // Offset: 196 Size: 4
	float ScaleErrorSourceRatio;  // Offset: 200 Size: 4
	float MaxErrorPerTrackRatio;  // Offset: 204 Size: 4
	float PerturbationProbeSize;  // Offset: 208 Size: 4
	char pad_212[4];  // Offset: 212 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.DebugCameraHUD Size 784
// Inherited 784 bytes 
class ADebugCameraHUD : public AHUD
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.AnimCompress_RemoveTrivialKeys Size 80
// Inherited 64 bytes 
class UAnimCompress_RemoveTrivialKeys : public UAnimCompress
{

 public: 
	float MaxPosDiff;  // Offset: 64 Size: 4
	float MaxAngleDiff;  // Offset: 68 Size: 4
	float MaxScaleDiff;  // Offset: 72 Size: 4
	char pad_76[4];  // Offset: 76 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.NavAreaBase Size 48
// Inherited 40 bytes 
class UNavAreaBase : public UObject
{

 public: 
	char pad_40[8];  // Offset: 40 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.DistributionFloatParticleParameter Size 96
// Inherited 96 bytes 
class UDistributionFloatParticleParameter : public UDistributionFloatParameterBase
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.AnimCurveCompressionCodec_CompressedRichCurve Size 40
// Inherited 40 bytes 
class UAnimCurveCompressionCodec_CompressedRichCurve : public UAnimCurveCompressionCodec
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.HLODEngineSubsystem Size 48
// Inherited 48 bytes 
class UHLODEngineSubsystem : public UEngineSubsystem
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.AnimCurveCompressionCodec_UniformIndexable Size 40
// Inherited 40 bytes 
class UAnimCurveCompressionCodec_UniformIndexable : public UAnimCurveCompressionCodec
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleTypeDataRibbon Size 96
// Inherited 48 bytes 
class UParticleModuleTypeDataRibbon : public UParticleModuleTypeDataBase
{

 public: 
	int32_t MaxTessellationBetweenParticles;  // Offset: 48 Size: 4
	int32_t SheetsPerTrail;  // Offset: 52 Size: 4
	int32_t MaxTrailCount;  // Offset: 56 Size: 4
	int32_t MaxParticleInTrailCount;  // Offset: 60 Size: 4
	char bDeadTrailsOnDeactivate : 1;  // Offset: 64 Size: 1
	char bDeadTrailsOnSourceLoss : 1;  // Offset: 64 Size: 1
	char bClipSourceSegement : 1;  // Offset: 64 Size: 1
	char bEnablePreviousTangentRecalculation : 1;  // Offset: 64 Size: 1
	char bTangentRecalculationEveryFrame : 1;  // Offset: 64 Size: 1
	char bSpawnInitialParticle : 1;  // Offset: 64 Size: 1
	char pad_64_1 : 2;  // Offset: 64 Size: 1
	char pad_65[4];  // Offset: 65 Size: 4
	enum class ETrailsRenderAxisOption RenderAxis;  // Offset: 68 Size: 1
	char pad_69[3];  // Offset: 69 Size: 3
	float TangentSpawningScalar;  // Offset: 72 Size: 4
	char bRenderGeometry : 1;  // Offset: 76 Size: 1
	char bRenderSpawnPoints : 1;  // Offset: 76 Size: 1
	char bRenderTangents : 1;  // Offset: 76 Size: 1
	char bRenderTessellation : 1;  // Offset: 76 Size: 1
	char pad_76_1 : 4;  // Offset: 76 Size: 1
	char pad_77[4];  // Offset: 77 Size: 4
	float TilingDistance;  // Offset: 80 Size: 4
	float DistanceTessellationStepSize;  // Offset: 84 Size: 4
	char bEnableTangentDiffInterpScale : 1;  // Offset: 88 Size: 1
	char bUseLocalRender : 1;  // Offset: 88 Size: 1
	char pad_88_1 : 6;  // Offset: 88 Size: 1
	char pad_89[4];  // Offset: 89 Size: 4
	float TangentTessellationScalar;  // Offset: 92 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleVelocityCone Size 168
// Inherited 56 bytes 
class UParticleModuleVelocityCone : public UParticleModuleVelocityBase
{

 public: 
	struct FRawDistributionFloat Angle;  // Offset: 56 Size: 48
	struct FRawDistributionFloat Velocity;  // Offset: 104 Size: 48
	struct FVector Direction;  // Offset: 152 Size: 12
	char pad_164[4];  // Offset: 164 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.DebugDrawService Size 40
// Inherited 40 bytes 
class UDebugDrawService : public UBlueprintFunctionLibrary
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.Skeleton Size 912
// Inherited 40 bytes 
class USkeleton : public UObject
{

 public: 
	char pad_40[16];  // Offset: 40 Size: 16
	struct TArray<struct FBoneNode> BoneTree;  // Offset: 56 Size: 16
	struct TArray<struct FTransform> RefLocalPoses;  // Offset: 72 Size: 16
	char pad_88[280];  // Offset: 88 Size: 280
	struct FGuid VirtualBoneGuid;  // Offset: 368 Size: 16
	struct TArray<struct FVirtualBone> VirtualBones;  // Offset: 384 Size: 16
	struct TArray<struct USkeletalMeshSocket*> Sockets;  // Offset: 400 Size: 16
	char pad_416[80];  // Offset: 416 Size: 80
	struct FSmartNameContainer SmartNames;  // Offset: 496 Size: 80
	char pad_576[48];  // Offset: 576 Size: 48
	struct TArray<struct UBlendProfile*> BlendProfiles;  // Offset: 624 Size: 16
	struct TArray<struct FAnimSlotGroup> SlotGroups;  // Offset: 640 Size: 16
	char pad_656[240];  // Offset: 656 Size: 240
	struct TArray<struct UAssetUserData*> AssetUserData;  // Offset: 896 Size: 16



 // Functions 
 public:
}; 
 
 


//Class Engine.AnimCurveCompressionCodec_UniformlySampled Size 40
// Inherited 40 bytes 
class UAnimCurveCompressionCodec_UniformlySampled : public UAnimCurveCompressionCodec
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.AnimCurveCompressionSettings Size 48
// Inherited 40 bytes 
class UAnimCurveCompressionSettings : public UObject
{

 public: 
	struct UAnimCurveCompressionCodec* Codec;  // Offset: 40 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.HapticFeedbackEffect_Base Size 40
// Inherited 40 bytes 
class UHapticFeedbackEffect_Base : public UObject
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.NullNavSysConfig Size 80
// Inherited 80 bytes 
class UNullNavSysConfig : public UNavigationSystemConfig
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.AnimLayerInterface Size 40
// Inherited 40 bytes 
class UAnimLayerInterface : public UInterface
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionCurveAtlasRowParameter Size 136
// Inherited 96 bytes 
class UMaterialExpressionCurveAtlasRowParameter : public UMaterialExpressionScalarParameter
{

 public: 
	struct UCurveLinearColor* Curve;  // Offset: 96 Size: 8
	struct UCurveLinearColorAtlas* Atlas;  // Offset: 104 Size: 8
	struct FExpressionInput InputTime;  // Offset: 112 Size: 20
	char pad_132[4];  // Offset: 132 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.AnimNotify_PlayParticleEffect Size 144
// Inherited 56 bytes 
class UAnimNotify_PlayParticleEffect : public UAnimNotify
{

 public: 
	struct UParticleSystem* PSTemplate;  // Offset: 56 Size: 8
	int32_t MirrorDetailLevel;  // Offset: 64 Size: 4
	struct FVector LocationOffset;  // Offset: 68 Size: 12
	struct FRotator RotationOffset;  // Offset: 80 Size: 12
	struct FVector Scale;  // Offset: 92 Size: 12
	char pad_104[24];  // Offset: 104 Size: 24
	char Attached : 1;  // Offset: 128 Size: 1
	char pad_128_1 : 7;  // Offset: 128 Size: 1
	char pad_129[4];  // Offset: 129 Size: 4
	struct FName SocketName;  // Offset: 132 Size: 8
	char pad_140[4];  // Offset: 140 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.ShapeComponent Size 1168
// Inherited 1136 bytes 
class UShapeComponent : public UPrimitiveComponent
{

 public: 
	struct UBodySetup* ShapeBodySetup;  // Offset: 1136 Size: 8
	UNavAreaBase* AreaClass;  // Offset: 1144 Size: 8
	struct FColor ShapeColor;  // Offset: 1152 Size: 4
	char bDrawOnlyIfSelected : 1;  // Offset: 1156 Size: 1
	char bShouldCollideWhenPlacing : 1;  // Offset: 1156 Size: 1
	char bDynamicObstacle : 1;  // Offset: 1156 Size: 1
	char pad_1156_1 : 5;  // Offset: 1156 Size: 1
	char pad_1157[12];  // Offset: 1157 Size: 12



 // Functions 
 public:
}; 
 
 


//Class Engine.AnimNotify_PlaySound Size 88
// Inherited 56 bytes 
class UAnimNotify_PlaySound : public UAnimNotify
{

 public: 
	struct USoundBase* Sound;  // Offset: 56 Size: 8
	float VolumeMultiplier;  // Offset: 64 Size: 4
	float PitchMultiplier;  // Offset: 68 Size: 4
	char bFollow : 1;  // Offset: 72 Size: 1
	char pad_72_1 : 7;  // Offset: 72 Size: 1
	char pad_73[4];  // Offset: 73 Size: 4
	struct FName AttachName;  // Offset: 76 Size: 8
	char pad_84[4];  // Offset: 84 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleLocationPrimitiveTriangle Size 264
// Inherited 48 bytes 
class UParticleModuleLocationPrimitiveTriangle : public UParticleModuleLocationBase
{

 public: 
	struct FRawDistributionVector StartOffset;  // Offset: 48 Size: 72
	struct FRawDistributionFloat Height;  // Offset: 120 Size: 48
	struct FRawDistributionFloat Angle;  // Offset: 168 Size: 48
	struct FRawDistributionFloat Thickness;  // Offset: 216 Size: 48



 // Functions 
 public:
}; 
 
 


//Class Engine.BlueprintPathsLibrary Size 40
// Inherited 40 bytes 
class UBlueprintPathsLibrary : public UBlueprintFunctionLibrary
{

 public: 



 // Functions 
 public:
	struct FString VideoCaptureDir(); // Function Engine.BlueprintPathsLibrary.VideoCaptureDir
	void ValidatePath(struct FString InPath, bool& bDidSucceed, struct FText& OutReason); // Function Engine.BlueprintPathsLibrary.ValidatePath
	void Split(struct FString InPath, struct FString& PathPart, struct FString& FilenamePart, struct FString& ExtensionPart); // Function Engine.BlueprintPathsLibrary.Split
	struct FString SourceConfigDir(); // Function Engine.BlueprintPathsLibrary.SourceConfigDir
	bool ShouldSaveToUserDir(); // Function Engine.BlueprintPathsLibrary.ShouldSaveToUserDir
	struct FString ShaderWorkingDir(); // Function Engine.BlueprintPathsLibrary.ShaderWorkingDir
	void SetProjectFilePath(struct FString NewGameProjectFilePath); // Function Engine.BlueprintPathsLibrary.SetProjectFilePath
	struct FString SetExtension(struct FString InPath, struct FString InNewExtension); // Function Engine.BlueprintPathsLibrary.SetExtension
	struct FString ScreenShotDir(); // Function Engine.BlueprintPathsLibrary.ScreenShotDir
	struct FString SandboxesDir(); // Function Engine.BlueprintPathsLibrary.SandboxesDir
	struct FString RootDir(); // Function Engine.BlueprintPathsLibrary.RootDir
	void RemoveDuplicateSlashes(struct FString InPath, struct FString& OutPath); // Function Engine.BlueprintPathsLibrary.RemoveDuplicateSlashes
	struct FString ProjectUserDir(); // Function Engine.BlueprintPathsLibrary.ProjectUserDir
	struct FString ProjectSavedDir(); // Function Engine.BlueprintPathsLibrary.ProjectSavedDir
	struct FString ProjectPluginsDir(); // Function Engine.BlueprintPathsLibrary.ProjectPluginsDir
	struct FString ProjectPersistentDownloadDir(); // Function Engine.BlueprintPathsLibrary.ProjectPersistentDownloadDir
	struct FString ProjectModsDir(); // Function Engine.BlueprintPathsLibrary.ProjectModsDir
	struct FString ProjectLogDir(); // Function Engine.BlueprintPathsLibrary.ProjectLogDir
	struct FString ProjectIntermediateDir(); // Function Engine.BlueprintPathsLibrary.ProjectIntermediateDir
	struct FString ProjectDir(); // Function Engine.BlueprintPathsLibrary.ProjectDir
	struct FString ProjectContentDir(); // Function Engine.BlueprintPathsLibrary.ProjectContentDir
	struct FString ProjectConfigDir(); // Function Engine.BlueprintPathsLibrary.ProjectConfigDir
	struct FString ProfilingDir(); // Function Engine.BlueprintPathsLibrary.ProfilingDir
	void NormalizeFilename(struct FString InPath, struct FString& OutPath); // Function Engine.BlueprintPathsLibrary.NormalizeFilename
	void NormalizeDirectoryName(struct FString InPath, struct FString& OutPath); // Function Engine.BlueprintPathsLibrary.NormalizeDirectoryName
	struct FString MakeValidFileName(struct FString inString, struct FString InReplacementChar); // Function Engine.BlueprintPathsLibrary.MakeValidFileName
	void MakeStandardFilename(struct FString InPath, struct FString& OutPath); // Function Engine.BlueprintPathsLibrary.MakeStandardFilename
	void MakePlatformFilename(struct FString InPath, struct FString& OutPath); // Function Engine.BlueprintPathsLibrary.MakePlatformFilename
	bool MakePathRelativeTo(struct FString InPath, struct FString InRelativeTo, struct FString& OutPath); // Function Engine.BlueprintPathsLibrary.MakePathRelativeTo
	struct FString LaunchDir(); // Function Engine.BlueprintPathsLibrary.LaunchDir
	bool IsSamePath(struct FString PathA, struct FString PathB); // Function Engine.BlueprintPathsLibrary.IsSamePath
	bool IsRestrictedPath(struct FString InPath); // Function Engine.BlueprintPathsLibrary.IsRestrictedPath
	bool IsRelative(struct FString InPath); // Function Engine.BlueprintPathsLibrary.IsRelative
	bool IsProjectFilePathSet(); // Function Engine.BlueprintPathsLibrary.IsProjectFilePathSet
	bool IsDrive(struct FString InPath); // Function Engine.BlueprintPathsLibrary.IsDrive
	bool HasProjectPersistentDownloadDir(); // Function Engine.BlueprintPathsLibrary.HasProjectPersistentDownloadDir
	struct TArray<struct FString> GetToolTipLocalizationPaths(); // Function Engine.BlueprintPathsLibrary.GetToolTipLocalizationPaths
	struct TArray<struct FString> GetRestrictedFolderNames(); // Function Engine.BlueprintPathsLibrary.GetRestrictedFolderNames
	struct FString GetRelativePathToRoot(); // Function Engine.BlueprintPathsLibrary.GetRelativePathToRoot
	struct TArray<struct FString> GetPropertyNameLocalizationPaths(); // Function Engine.BlueprintPathsLibrary.GetPropertyNameLocalizationPaths
	struct FString GetProjectFilePath(); // Function Engine.BlueprintPathsLibrary.GetProjectFilePath
	struct FString GetPath(struct FString InPath); // Function Engine.BlueprintPathsLibrary.GetPath
	struct FString GetInvalidFileSystemChars(); // Function Engine.BlueprintPathsLibrary.GetInvalidFileSystemChars
	struct TArray<struct FString> GetGameLocalizationPaths(); // Function Engine.BlueprintPathsLibrary.GetGameLocalizationPaths
	struct FString GetExtension(struct FString InPath, bool bIncludeDot); // Function Engine.BlueprintPathsLibrary.GetExtension
	struct TArray<struct FString> GetEngineLocalizationPaths(); // Function Engine.BlueprintPathsLibrary.GetEngineLocalizationPaths
	struct TArray<struct FString> GetEditorLocalizationPaths(); // Function Engine.BlueprintPathsLibrary.GetEditorLocalizationPaths
	struct FString GetCleanFilename(struct FString InPath); // Function Engine.BlueprintPathsLibrary.GetCleanFilename
	struct FString GetBaseFilename(struct FString InPath, bool bRemovePath); // Function Engine.BlueprintPathsLibrary.GetBaseFilename
	struct FString GeneratedConfigDir(); // Function Engine.BlueprintPathsLibrary.GeneratedConfigDir
	struct FString GameUserDeveloperDir(); // Function Engine.BlueprintPathsLibrary.GameUserDeveloperDir
	struct FString GameSourceDir(); // Function Engine.BlueprintPathsLibrary.GameSourceDir
	struct FString GameDevelopersDir(); // Function Engine.BlueprintPathsLibrary.GameDevelopersDir
	struct FString GameAgnosticSavedDir(); // Function Engine.BlueprintPathsLibrary.GameAgnosticSavedDir
	bool FileExists(struct FString InPath); // Function Engine.BlueprintPathsLibrary.FileExists
	struct FString FeaturePackDir(); // Function Engine.BlueprintPathsLibrary.FeaturePackDir
	struct FString EnterprisePluginsDir(); // Function Engine.BlueprintPathsLibrary.EnterprisePluginsDir
	struct FString EnterpriseFeaturePackDir(); // Function Engine.BlueprintPathsLibrary.EnterpriseFeaturePackDir
	struct FString EnterpriseDir(); // Function Engine.BlueprintPathsLibrary.EnterpriseDir
	struct FString EngineVersionAgnosticUserDir(); // Function Engine.BlueprintPathsLibrary.EngineVersionAgnosticUserDir
	struct FString EngineUserDir(); // Function Engine.BlueprintPathsLibrary.EngineUserDir
	struct FString EngineSourceDir(); // Function Engine.BlueprintPathsLibrary.EngineSourceDir
	struct FString EngineSavedDir(); // Function Engine.BlueprintPathsLibrary.EngineSavedDir
	struct FString EnginePluginsDir(); // Function Engine.BlueprintPathsLibrary.EnginePluginsDir
	struct FString EngineIntermediateDir(); // Function Engine.BlueprintPathsLibrary.EngineIntermediateDir
	struct FString EngineDir(); // Function Engine.BlueprintPathsLibrary.EngineDir
	struct FString EngineContentDir(); // Function Engine.BlueprintPathsLibrary.EngineContentDir
	struct FString EngineConfigDir(); // Function Engine.BlueprintPathsLibrary.EngineConfigDir
	bool DirectoryExists(struct FString InPath); // Function Engine.BlueprintPathsLibrary.DirectoryExists
	struct FString DiffDir(); // Function Engine.BlueprintPathsLibrary.DiffDir
	struct FString CreateTempFilename(struct FString Path, struct FString Prefix, struct FString Extension); // Function Engine.BlueprintPathsLibrary.CreateTempFilename
	struct FString ConvertToSandboxPath(struct FString InPath, struct FString InSandboxName); // Function Engine.BlueprintPathsLibrary.ConvertToSandboxPath
	struct FString ConvertRelativePathToFull(struct FString InPath, struct FString InBasePath); // Function Engine.BlueprintPathsLibrary.ConvertRelativePathToFull
	struct FString ConvertFromSandboxPath(struct FString InPath, struct FString InSandboxName); // Function Engine.BlueprintPathsLibrary.ConvertFromSandboxPath
	struct FString Combine(struct TArray<struct FString>& InPaths); // Function Engine.BlueprintPathsLibrary.Combine
	bool CollapseRelativeDirectories(struct FString InPath, struct FString& OutPath); // Function Engine.BlueprintPathsLibrary.CollapseRelativeDirectories
	struct FString CloudDir(); // Function Engine.BlueprintPathsLibrary.CloudDir
	struct FString ChangeExtension(struct FString InPath, struct FString InNewExtension); // Function Engine.BlueprintPathsLibrary.ChangeExtension
	struct FString BugItDir(); // Function Engine.BlueprintPathsLibrary.BugItDir
	struct FString AutomationTransientDir(); // Function Engine.BlueprintPathsLibrary.AutomationTransientDir
	struct FString AutomationLogDir(); // Function Engine.BlueprintPathsLibrary.AutomationLogDir
	struct FString AutomationDir(); // Function Engine.BlueprintPathsLibrary.AutomationDir
}; 
 
 


//Class Engine.AnimNotify_ResetDynamics Size 56
// Inherited 56 bytes 
class UAnimNotify_ResetDynamics : public UAnimNotify
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.BillboardComponent Size 1168
// Inherited 1136 bytes 
class UBillboardComponent : public UPrimitiveComponent
{

 public: 
	struct UTexture2D* Sprite;  // Offset: 1136 Size: 8
	char bIsScreenSizeScaled : 1;  // Offset: 1144 Size: 1
	char pad_1144_1 : 7;  // Offset: 1144 Size: 1
	char pad_1145[4];  // Offset: 1145 Size: 4
	float ScreenSize;  // Offset: 1148 Size: 4
	float U;  // Offset: 1152 Size: 4
	float UL;  // Offset: 1156 Size: 4
	float V;  // Offset: 1160 Size: 4
	float VL;  // Offset: 1164 Size: 4



 // Functions 
 public:
	void SetUV(int32_t NewU, int32_t NewUL, int32_t NewV, int32_t NewVL); // Function Engine.BillboardComponent.SetUV
	void SetSpriteAndUV(struct UTexture2D* NewSprite, int32_t NewU, int32_t NewUL, int32_t NewV, int32_t NewVL); // Function Engine.BillboardComponent.SetSpriteAndUV
	void SetSprite(struct UTexture2D* NewSprite); // Function Engine.BillboardComponent.SetSprite
}; 
 
 


//Class Engine.InterpTrackLinearColorBase Size 144
// Inherited 112 bytes 
class UInterpTrackLinearColorBase : public UInterpTrack
{

 public: 
	struct FInterpCurveLinearColor LinearColorTrack;  // Offset: 112 Size: 24
	float CurveTension;  // Offset: 136 Size: 4
	char pad_140[4];  // Offset: 140 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.SoundfieldSubmix Size 104
// Inherited 64 bytes 
class USoundfieldSubmix : public USoundSubmixWithParentBase
{

 public: 
	struct FName SoundfieldEncodingFormat;  // Offset: 64 Size: 8
	struct USoundfieldEncodingSettingsBase* EncodingSettings;  // Offset: 72 Size: 8
	struct TArray<struct USoundfieldEffectBase*> SoundfieldEffectChain;  // Offset: 80 Size: 16
	USoundfieldEncodingSettingsBase* EncodingSettingsClass;  // Offset: 96 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.LineBatchComponent Size 1200
// Inherited 1136 bytes 
class ULineBatchComponent : public UPrimitiveComponent
{

 public: 
	char pad_1136[64];  // Offset: 1136 Size: 64



 // Functions 
 public:
}; 
 
 


//Class Engine.AnimNotifyState_Trail Size 96
// Inherited 48 bytes 
class UAnimNotifyState_Trail : public UAnimNotifyState
{

 public: 
	struct UParticleSystem* PSTemplate;  // Offset: 48 Size: 8
	int32_t MirrorDetailLevel;  // Offset: 56 Size: 4
	struct FName FirstSocketName;  // Offset: 60 Size: 8
	struct FName SecondSocketName;  // Offset: 68 Size: 8
	enum class ETrailWidthMode WidthScaleMode;  // Offset: 76 Size: 1
	char pad_77[3];  // Offset: 77 Size: 3
	struct FName WidthScaleCurve;  // Offset: 80 Size: 8
	char bRecycleSpawnedSystems : 1;  // Offset: 88 Size: 1
	char pad_88_1 : 7;  // Offset: 88 Size: 1
	char pad_89[8];  // Offset: 89 Size: 8



 // Functions 
 public:
	struct UParticleSystem* OverridePSTemplate(struct USkeletalMeshComponent* MeshComp, struct UAnimSequenceBase* Animation); // Function Engine.AnimNotifyState_Trail.OverridePSTemplate
}; 
 
 


//Class Engine.MaterialFunctionInterface Size 64
// Inherited 40 bytes 
class UMaterialFunctionInterface : public UObject
{

 public: 
	struct FGuid StateId;  // Offset: 40 Size: 16
	enum class EMaterialFunctionUsage MaterialFunctionUsage;  // Offset: 56 Size: 1
	char pad_57[7];  // Offset: 57 Size: 7



 // Functions 
 public:
}; 
 
 


//Class Engine.SoundConcurrency Size 80
// Inherited 40 bytes 
class USoundConcurrency : public UObject
{

 public: 
	struct FSoundConcurrencySettings Concurrency;  // Offset: 40 Size: 40



 // Functions 
 public:
}; 
 
 


//Class Engine.Material Size 1120
// Inherited 152 bytes 
class UMaterial : public UMaterialInterface
{

 public: 
	struct UPhysicalMaterial* PhysMaterial;  // Offset: 152 Size: 8
	struct UPhysicalMaterialMask* PhysMaterialMask;  // Offset: 160 Size: 8
	struct UPhysicalMaterial* PhysicalMaterialMap[8];  // Offset: 168 Size: 64
	struct FScalarMaterialInput Metallic;  // Offset: 232 Size: 20
	struct FScalarMaterialInput Specular;  // Offset: 252 Size: 20
	struct FScalarMaterialInput Anisotropy;  // Offset: 272 Size: 20
	struct FVectorMaterialInput Normal;  // Offset: 292 Size: 20
	struct FVectorMaterialInput Tangent;  // Offset: 312 Size: 20
	struct FColorMaterialInput EmissiveColor;  // Offset: 332 Size: 20
	enum class EMaterialDomain MaterialDomain;  // Offset: 352 Size: 1
	enum class EBlendMode BlendMode;  // Offset: 353 Size: 1
	enum class EDecalBlendMode DecalBlendMode;  // Offset: 354 Size: 1
	enum class EMaterialDecalResponse MaterialDecalResponse;  // Offset: 355 Size: 1
	enum class EMaterialShadingModel ShadingModel;  // Offset: 356 Size: 1
	char bCastDynamicShadowAsMasked : 1;  // Offset: 357 Size: 1
	char pad_357_1 : 7;  // Offset: 357 Size: 1
	struct FMaterialShadingModelField ShadingModels;  // Offset: 358 Size: 2
	float OpacityMaskClipValue;  // Offset: 360 Size: 4
	struct FVectorMaterialInput WorldPositionOffset;  // Offset: 364 Size: 20
	struct FScalarMaterialInput Refraction;  // Offset: 384 Size: 20
	struct FMaterialAttributesInput MaterialAttributes;  // Offset: 404 Size: 24
	struct FScalarMaterialInput PixelDepthOffset;  // Offset: 428 Size: 20
	struct FShadingModelMaterialInput ShadingModelFromMaterialExpression;  // Offset: 448 Size: 20
	char bEnableSeparateTranslucency : 1;  // Offset: 468 Size: 1
	char bEnableResponsiveAA : 1;  // Offset: 468 Size: 1
	char bScreenSpaceReflections : 1;  // Offset: 468 Size: 1
	char bContactShadows : 1;  // Offset: 468 Size: 1
	char TwoSided : 1;  // Offset: 468 Size: 1
	char pad_468_1 : 3;  // Offset: 468 Size: 1
	enum class ECastShadowCullMode CastShadowCullMode;  // Offset: 469 Size: 1
	char DitheredLODTransition : 1;  // Offset: 470 Size: 1
	char DitherOpacityMask : 1;  // Offset: 470 Size: 1
	char bAllowNegativeEmissiveColor : 1;  // Offset: 470 Size: 1
	char pad_470_1 : 5;  // Offset: 470 Size: 1
	enum class ETranslucencyLightingMode TranslucencyLightingMode;  // Offset: 471 Size: 1
	char bEnableMobileSeparateTranslucency : 1;  // Offset: 472 Size: 1
	char pad_472_1 : 7;  // Offset: 472 Size: 1
	char pad_473[4];  // Offset: 473 Size: 4
	int32_t NumCustomizedUVs;  // Offset: 476 Size: 4
	float TranslucencyDirectionalLightingIntensity;  // Offset: 480 Size: 4
	float TranslucentShadowDensityScale;  // Offset: 484 Size: 4
	float TranslucentSelfShadowDensityScale;  // Offset: 488 Size: 4
	float TranslucentSelfShadowSecondDensityScale;  // Offset: 492 Size: 4
	float TranslucentSelfShadowSecondOpacity;  // Offset: 496 Size: 4
	float TranslucentBackscatteringExponent;  // Offset: 500 Size: 4
	struct FLinearColor TranslucentMultipleScatteringExtinction;  // Offset: 504 Size: 16
	float TranslucentShadowStartOffset;  // Offset: 520 Size: 4
	char bDisableDepthTest : 1;  // Offset: 524 Size: 1
	char bWriteOnlyAlpha : 1;  // Offset: 524 Size: 1
	char bGenerateSphericalParticleNormals : 1;  // Offset: 524 Size: 1
	char bTangentSpaceNormal : 1;  // Offset: 524 Size: 1
	char bUseEmissiveForDynamicAreaLighting : 1;  // Offset: 524 Size: 1
	char bBlockGI : 1;  // Offset: 524 Size: 1
	char bUsedAsSpecialEngineMaterial : 1;  // Offset: 524 Size: 1
	char bUsedWithSkeletalMesh : 1;  // Offset: 524 Size: 1
	char bUsedWithEditorCompositing : 1;  // Offset: 525 Size: 1
	char bUsedWithParticleSprites : 1;  // Offset: 525 Size: 1
	char bUsedWithBeamTrails : 1;  // Offset: 525 Size: 1
	char bUsedWithMeshParticles : 1;  // Offset: 525 Size: 1
	char bUsedWithNiagaraSprites : 1;  // Offset: 525 Size: 1
	char bUsedWithNiagaraRibbons : 1;  // Offset: 525 Size: 1
	char bUsedWithNiagaraMeshParticles : 1;  // Offset: 525 Size: 1
	char bUsedWithGeometryCache : 1;  // Offset: 525 Size: 1
	char bUsedWithStaticLighting : 1;  // Offset: 526 Size: 1
	char bUsedWithMorphTargets : 1;  // Offset: 526 Size: 1
	char bUsedWithSplineMeshes : 1;  // Offset: 526 Size: 1
	char bUsedWithInstancedStaticMeshes : 1;  // Offset: 526 Size: 1
	char bUsedWithGeometryCollections : 1;  // Offset: 526 Size: 1
	char bUsesDistortion : 1;  // Offset: 526 Size: 1
	char bUsedWithClothing : 1;  // Offset: 526 Size: 1
	char pad_526_1 : 1;  // Offset: 526 Size: 1
	char pad_527[2];  // Offset: 527 Size: 2
	char bUsedWithWater : 1;  // Offset: 528 Size: 1
	char bUsedWithHairStrands : 1;  // Offset: 528 Size: 1
	char bUsedWithLidarPointCloud : 1;  // Offset: 528 Size: 1
	char bUsedWithVirtualHeightfieldMesh : 1;  // Offset: 528 Size: 1
	char pad_528_1 : 4;  // Offset: 528 Size: 1
	char pad_529[4];  // Offset: 529 Size: 4
	char bUsedWithUI : 1;  // Offset: 532 Size: 1
	char bAutomaticallySetUsageInEditor : 1;  // Offset: 532 Size: 1
	char bFullyRough : 1;  // Offset: 532 Size: 1
	char bFullyRoughOnMobile : 1;  // Offset: 532 Size: 1
	char pad_532_1 : 4;  // Offset: 532 Size: 1
	char pad_533[4];  // Offset: 533 Size: 4
	char bMicroShadowing : 1;  // Offset: 536 Size: 1
	char bSimpleAO : 1;  // Offset: 536 Size: 1
	char bMinRoughnessToSpecularScale : 1;  // Offset: 536 Size: 1
	char bForwardScreenSpaceReflection : 1;  // Offset: 536 Size: 1
	char bTranslucentForwardSSR : 1;  // Offset: 536 Size: 1
	char bDrawDecalWithLightingOnMobile : 1;  // Offset: 536 Size: 1
	char bForceSingleScatteringBRDF : 1;  // Offset: 536 Size: 1
	char pad_536_1 : 1;  // Offset: 536 Size: 1
	char pad_537[4];  // Offset: 537 Size: 4
	char bUseFullPrecision : 1;  // Offset: 540 Size: 1
	char bUseLightmapDirectionality : 1;  // Offset: 540 Size: 1
	char bUseAlphaToCoverage : 1;  // Offset: 540 Size: 1
	char pad_540_1 : 5;  // Offset: 540 Size: 1
	char pad_541[4];  // Offset: 541 Size: 4
	char bForwardRenderUsePreintegratedGFForSimpleIBL : 1;  // Offset: 544 Size: 1
	char pad_544_1 : 7;  // Offset: 544 Size: 1
	char pad_545[4];  // Offset: 545 Size: 4
	char bUseHQForwardReflections : 1;  // Offset: 548 Size: 1
	char bForceLQForwardReflectionsOnMobile : 1;  // Offset: 548 Size: 1
	char bUseTranslucentDepth : 1;  // Offset: 548 Size: 1
	char bForwardBlendsSkyLightCubemaps : 1;  // Offset: 548 Size: 1
	char bUsePlanarForwardReflections : 1;  // Offset: 548 Size: 1
	char bForceNoPlanarReflectionsOnMobile : 1;  // Offset: 548 Size: 1
	char bNormalCurvatureToRoughness : 1;  // Offset: 548 Size: 1
	char pad_548_1 : 1;  // Offset: 548 Size: 1
	enum class EMaterialTessellationMode D3D11TessellationMode;  // Offset: 549 Size: 1
	char bEnableCrackFreeDisplacement : 1;  // Offset: 550 Size: 1
	char bEnableAdaptiveTessellation : 1;  // Offset: 550 Size: 1
	char AllowTranslucentCustomDepthWrites : 1;  // Offset: 550 Size: 1
	char Wireframe : 1;  // Offset: 550 Size: 1
	char WriteDepthToTranslucentMaterial : 1;  // Offset: 550 Size: 1
	char pad_550_1 : 3;  // Offset: 550 Size: 1
	enum class EMaterialShadingRate ShadingRate;  // Offset: 551 Size: 1
	char bCanMaskedBeAssumedOpaque : 1;  // Offset: 552 Size: 1
	char bIsMasked : 1;  // Offset: 552 Size: 1
	char bIsPreviewMaterial : 1;  // Offset: 552 Size: 1
	char bIsFunctionPreviewMaterial : 1;  // Offset: 552 Size: 1
	char bUseMaterialAttributes : 1;  // Offset: 552 Size: 1
	char bCastRayTracedShadows : 1;  // Offset: 552 Size: 1
	char bUseTranslucencyVertexFog : 1;  // Offset: 552 Size: 1
	char bApplyCloudFogging : 1;  // Offset: 552 Size: 1
	char bIsSky : 1;  // Offset: 553 Size: 1
	char bComputeFogPerPixel : 1;  // Offset: 553 Size: 1
	char bOutputTranslucentVelocity : 1;  // Offset: 553 Size: 1
	char bAllowDevelopmentShaderCompile : 1;  // Offset: 553 Size: 1
	char bIsMaterialEditorStatsMaterial : 1;  // Offset: 553 Size: 1
	char pad_553_1 : 3;  // Offset: 553 Size: 1
	enum class EBlendableLocation BlendableLocation;  // Offset: 554 Size: 1
	char BlendableOutputAlpha : 1;  // Offset: 555 Size: 1
	char bEnableStencilTest : 1;  // Offset: 555 Size: 1
	char pad_555_1 : 6;  // Offset: 555 Size: 1
	enum class EMaterialStencilCompare StencilCompare;  // Offset: 556 Size: 1
	char StencilRefValue;  // Offset: 557 Size: 1
	enum class ERefractionMode RefractionMode;  // Offset: 558 Size: 1
	char pad_559[1];  // Offset: 559 Size: 1
	int32_t BlendablePriority;  // Offset: 560 Size: 4
	char bIsBlendable : 1;  // Offset: 564 Size: 1
	char pad_564_1 : 7;  // Offset: 564 Size: 1
	char pad_565[4];  // Offset: 565 Size: 4
	uint32_t UsageFlagWarnings;  // Offset: 568 Size: 4
	float RefractionDepthBias;  // Offset: 572 Size: 4
	struct FGuid StateId;  // Offset: 576 Size: 16
	float MaxDisplacement;  // Offset: 592 Size: 4
	char pad_596[52];  // Offset: 596 Size: 52
	struct FMaterialCachedExpressionData CachedExpressionData;  // Offset: 648 Size: 472



 // Functions 
 public:
}; 
 
 


//Class Engine.AnimSequence Size 448
// Inherited 168 bytes 
class UAnimSequence : public UAnimSequenceBase
{

 public: 
	int32_t NumFrames;  // Offset: 168 Size: 4
	char pad_172[4];  // Offset: 172 Size: 4
	struct TArray<struct FTrackToSkeletonMap> TrackToSkeletonMapTable;  // Offset: 176 Size: 16
	char pad_192[16];  // Offset: 192 Size: 16
	struct UAnimBoneCompressionSettings* BoneCompressionSettings;  // Offset: 208 Size: 8
	struct UAnimCurveCompressionSettings* CurveCompressionSettings;  // Offset: 216 Size: 8
	char pad_224[112];  // Offset: 224 Size: 112
	enum class EAdditiveAnimationType AdditiveAnimType;  // Offset: 336 Size: 1
	enum class EAdditiveBasePoseType RefPoseType;  // Offset: 337 Size: 1
	char pad_338[6];  // Offset: 338 Size: 6
	struct UAnimSequence* RefPoseSeq;  // Offset: 344 Size: 8
	int32_t RefFrameIndex;  // Offset: 352 Size: 4
	struct FName RetargetSource;  // Offset: 356 Size: 8
	char pad_364[4];  // Offset: 364 Size: 4
	struct TArray<struct FTransform> RetargetSourceAssetReferencePose;  // Offset: 368 Size: 16
	enum class EAnimInterpolationType Interpolation;  // Offset: 384 Size: 1
	char pad_385_1 : 7;  // Offset: 385 Size: 1
	bool bEnableRootMotion : 1;  // Offset: 385 Size: 1
	enum class ERootMotionRootLock RootMotionRootLock;  // Offset: 386 Size: 1
	char pad_387_1 : 7;  // Offset: 387 Size: 1
	bool bForceRootLock : 1;  // Offset: 387 Size: 1
	char pad_388_1 : 7;  // Offset: 388 Size: 1
	bool bUseNormalizedRootMotionScale : 1;  // Offset: 388 Size: 1
	char pad_389_1 : 7;  // Offset: 389 Size: 1
	bool bRootMotionSettingsCopiedFromMontage : 1;  // Offset: 389 Size: 1
	char pad_390[2];  // Offset: 390 Size: 2
	struct TArray<struct FAnimSyncMarker> AuthoredSyncMarkers;  // Offset: 392 Size: 16
	char pad_408[24];  // Offset: 408 Size: 24
	struct TArray<struct FBakedCustomAttributePerBoneData> BakedPerBoneCustomAttributeData;  // Offset: 432 Size: 16



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionSSSColorOutput Size 88
// Inherited 64 bytes 
class UMaterialExpressionSSSColorOutput : public UMaterialExpressionCustomOutput
{

 public: 
	struct FExpressionInput Input;  // Offset: 64 Size: 20
	char pad_84[4];  // Offset: 84 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.AnimSet Size 240
// Inherited 40 bytes 
class UAnimSet : public UObject
{

 public: 
	char bAnimRotationOnly : 1;  // Offset: 40 Size: 1
	char pad_40_1 : 7;  // Offset: 40 Size: 1
	char pad_41[8];  // Offset: 41 Size: 8
	struct TArray<struct FName> TrackBoneNames;  // Offset: 48 Size: 16
	struct TArray<struct FAnimSetMeshLinkup> LinkupCache;  // Offset: 64 Size: 16
	struct TArray<char> BoneUseAnimTranslation;  // Offset: 80 Size: 16
	struct TArray<char> ForceUseMeshTranslation;  // Offset: 96 Size: 16
	struct TArray<struct FName> UseTranslationBoneNames;  // Offset: 112 Size: 16
	struct TArray<struct FName> ForceMeshTranslationBoneNames;  // Offset: 128 Size: 16
	struct FName PreviewSkelMeshName;  // Offset: 144 Size: 8
	struct FName BestRatioSkelMeshName;  // Offset: 152 Size: 8
	char pad_160[80];  // Offset: 160 Size: 80



 // Functions 
 public:
}; 
 
 


//Class Engine.StreamingSettings Size 112
// Inherited 56 bytes 
class UStreamingSettings : public UDeveloperSettings
{

 public: 
	char AsyncLoadingThreadEnabled : 1;  // Offset: 56 Size: 1
	char WarnIfTimeLimitExceeded : 1;  // Offset: 56 Size: 1
	char pad_56_1 : 6;  // Offset: 56 Size: 1
	char pad_57[4];  // Offset: 57 Size: 4
	float TimeLimitExceededMultiplier;  // Offset: 60 Size: 4
	float TimeLimitExceededMinTime;  // Offset: 64 Size: 4
	int32_t MinBulkDataSizeForAsyncLoading;  // Offset: 68 Size: 4
	char UseBackgroundLevelStreaming : 1;  // Offset: 72 Size: 1
	char AsyncLoadingUseFullTimeLimit : 1;  // Offset: 72 Size: 1
	char pad_72_1 : 6;  // Offset: 72 Size: 1
	char pad_73[4];  // Offset: 73 Size: 4
	float AsyncLoadingTimeLimit;  // Offset: 76 Size: 4
	float PriorityAsyncLoadingExtraTime;  // Offset: 80 Size: 4
	float LevelStreamingActorsUpdateTimeLimit;  // Offset: 84 Size: 4
	float PriorityLevelStreamingActorsUpdateExtraTime;  // Offset: 88 Size: 4
	int32_t LevelStreamingComponentsRegistrationGranularity;  // Offset: 92 Size: 4
	float LevelStreamingUnregisterComponentsTimeLimit;  // Offset: 96 Size: 4
	int32_t LevelStreamingComponentsUnregistrationGranularity;  // Offset: 100 Size: 4
	char FlushStreamingOnExit : 1;  // Offset: 104 Size: 1
	char EventDrivenLoaderEnabled : 1;  // Offset: 104 Size: 1
	char pad_104_1 : 6;  // Offset: 104 Size: 1
	char pad_105[8];  // Offset: 105 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.AnimSingleNodeInstance Size 720
// Inherited 704 bytes 
class UAnimSingleNodeInstance : public UAnimInstance
{

 public: 
	struct UAnimationAsset* CurrentAsset;  // Offset: 696 Size: 8
	struct FDelegate PostEvaluateAnimEvent;  // Offset: 704 Size: 16



 // Functions 
 public:
	void StopAnim(); // Function Engine.AnimSingleNodeInstance.StopAnim
	void SetReverse(bool bInReverse); // Function Engine.AnimSingleNodeInstance.SetReverse
	void SetPreviewCurveOverride(struct FName& PoseName, float Value, bool bRemoveIfZero); // Function Engine.AnimSingleNodeInstance.SetPreviewCurveOverride
	void SetPositionWithPreviousTime(float InPosition, float InPreviousTime, bool bFireNotifies); // Function Engine.AnimSingleNodeInstance.SetPositionWithPreviousTime
	void SetPosition(float InPosition, bool bFireNotifies); // Function Engine.AnimSingleNodeInstance.SetPosition
	void SetPlayRate(float InPlayRate); // Function Engine.AnimSingleNodeInstance.SetPlayRate
	void SetPlaying(bool bIsPlaying); // Function Engine.AnimSingleNodeInstance.SetPlaying
	void SetLooping(bool bIsLooping); // Function Engine.AnimSingleNodeInstance.SetLooping
	void SetBlendSpaceInput(struct FVector& InBlendInput); // Function Engine.AnimSingleNodeInstance.SetBlendSpaceInput
	void SetAnimationAsset(struct UAnimationAsset* NewAsset, bool bIsLooping, float InPlayRate); // Function Engine.AnimSingleNodeInstance.SetAnimationAsset
	void PlayAnim(bool bIsLooping, float InPlayRate, float InStartPosition); // Function Engine.AnimSingleNodeInstance.PlayAnim
	float GetLength(); // Function Engine.AnimSingleNodeInstance.GetLength
	struct UAnimationAsset* GetAnimationAsset(); // Function Engine.AnimSingleNodeInstance.GetAnimationAsset
}; 
 
 


//Class Engine.LevelStreamingVolume Size 624
// Inherited 600 bytes 
class ALevelStreamingVolume : public AVolume
{

 public: 
	struct TArray<struct FName> StreamingLevelNames;  // Offset: 600 Size: 16
	char bEditorPreVisOnly : 1;  // Offset: 616 Size: 1
	char bDisabled : 1;  // Offset: 616 Size: 1
	char pad_616_1 : 6;  // Offset: 616 Size: 1
	char pad_617[4];  // Offset: 617 Size: 4
	enum class EStreamingVolumeUsage StreamingUsage;  // Offset: 620 Size: 1
	char pad_621[3];  // Offset: 621 Size: 3



 // Functions 
 public:
}; 
 
 


//Class Engine.Interface_CollisionDataProvider Size 40
// Inherited 40 bytes 
class UInterface_CollisionDataProvider : public UInterface
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.PhysicsSpringComponent Size 560
// Inherited 528 bytes 
class UPhysicsSpringComponent : public USceneComponent
{

 public: 
	float SpringStiffness;  // Offset: 520 Size: 4
	float SpringDamping;  // Offset: 524 Size: 4
	float SpringLengthAtRest;  // Offset: 528 Size: 4
	float SpringRadius;  // Offset: 532 Size: 4
	enum class ECollisionChannel SpringChannel;  // Offset: 536 Size: 1
	char pad_545_1 : 7;  // Offset: 545 Size: 1
	bool bIgnoreSelf : 1;  // Offset: 537 Size: 1
	float SpringCompression;  // Offset: 540 Size: 4
	char pad_550[10];  // Offset: 550 Size: 10



 // Functions 
 public:
	struct FVector GetSpringRestingPoint(); // Function Engine.PhysicsSpringComponent.GetSpringRestingPoint
	struct FVector GetSpringDirection(); // Function Engine.PhysicsSpringComponent.GetSpringDirection
	struct FVector GetSpringCurrentEndPoint(); // Function Engine.PhysicsSpringComponent.GetSpringCurrentEndPoint
	float GetNormalizedCompressionScalar(); // Function Engine.PhysicsSpringComponent.GetNormalizedCompressionScalar
}; 
 
 


//Class Engine.AnimStreamable Size 224
// Inherited 168 bytes 
class UAnimStreamable : public UAnimSequenceBase
{

 public: 
	int32_t NumFrames;  // Offset: 168 Size: 4
	enum class EAnimInterpolationType Interpolation;  // Offset: 172 Size: 1
	char pad_173[3];  // Offset: 173 Size: 3
	struct FName RetargetSource;  // Offset: 176 Size: 8
	char pad_184[16];  // Offset: 184 Size: 16
	struct UAnimBoneCompressionSettings* BoneCompressionSettings;  // Offset: 200 Size: 8
	struct UAnimCurveCompressionSettings* CurveCompressionSettings;  // Offset: 208 Size: 8
	char pad_216_1 : 7;  // Offset: 216 Size: 1
	bool bEnableRootMotion : 1;  // Offset: 216 Size: 1
	enum class ERootMotionRootLock RootMotionRootLock;  // Offset: 217 Size: 1
	char pad_218_1 : 7;  // Offset: 218 Size: 1
	bool bForceRootLock : 1;  // Offset: 218 Size: 1
	char pad_219_1 : 7;  // Offset: 219 Size: 1
	bool bUseNormalizedRootMotionScale : 1;  // Offset: 219 Size: 1
	char pad_220[4];  // Offset: 220 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.HLODProxyDesc Size 40
// Inherited 40 bytes 
class UHLODProxyDesc : public UObject
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.AsyncActionHandleSaveGame Size 104
// Inherited 48 bytes 
class UAsyncActionHandleSaveGame : public UBlueprintAsyncActionBase
{

 public: 
	struct FMulticastInlineDelegate completed;  // Offset: 48 Size: 16
	char pad_64[32];  // Offset: 64 Size: 32
	struct USaveGame* SaveGameObject;  // Offset: 96 Size: 8



 // Functions 
 public:
	struct UAsyncActionHandleSaveGame* AsyncSaveGameToSlot(struct UObject* WorldContextObject, struct USaveGame* SaveGameObject, struct FString SlotName, int32_t UserIndex); // Function Engine.AsyncActionHandleSaveGame.AsyncSaveGameToSlot
	struct UAsyncActionHandleSaveGame* AsyncLoadGameFromSlot(struct UObject* WorldContextObject, struct FString SlotName, int32_t UserIndex); // Function Engine.AsyncActionHandleSaveGame.AsyncLoadGameFromSlot
}; 
 
 


//Class Engine.ApplicationLifecycleComponent Size 320
// Inherited 176 bytes 
class UApplicationLifecycleComponent : public UActorComponent
{

 public: 
	struct FMulticastInlineDelegate ApplicationWillDeactivateDelegate;  // Offset: 176 Size: 16
	struct FMulticastInlineDelegate ApplicationHasReactivatedDelegate;  // Offset: 192 Size: 16
	struct FMulticastInlineDelegate ApplicationWillEnterBackgroundDelegate;  // Offset: 208 Size: 16
	struct FMulticastInlineDelegate ApplicationHasEnteredForegroundDelegate;  // Offset: 224 Size: 16
	struct FMulticastInlineDelegate ApplicationWillTerminateDelegate;  // Offset: 240 Size: 16
	struct FMulticastInlineDelegate ApplicationShouldUnloadResourcesDelegate;  // Offset: 256 Size: 16
	struct FMulticastInlineDelegate ApplicationReceivedStartupArgumentsDelegate;  // Offset: 272 Size: 16
	struct FMulticastInlineDelegate OnTemperatureChangeDelegate;  // Offset: 288 Size: 16
	struct FMulticastInlineDelegate OnLowPowerModeDelegate;  // Offset: 304 Size: 16



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleRotation_Seeded Size 128
// Inherited 96 bytes 
class UParticleModuleRotation_Seeded : public UParticleModuleRotation
{

 public: 
	struct FParticleRandomSeedInfo RandomSeedInfo;  // Offset: 96 Size: 32



 // Functions 
 public:
}; 
 
 


//Class Engine.EngineBaseTypes Size 40
// Inherited 40 bytes 
class UEngineBaseTypes : public UObject
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.ArrowComponent Size 1168
// Inherited 1136 bytes 
class UArrowComponent : public UPrimitiveComponent
{

 public: 
	struct FColor ArrowColor;  // Offset: 1136 Size: 4
	float ArrowSize;  // Offset: 1140 Size: 4
	float ArrowLength;  // Offset: 1144 Size: 4
	float ScreenSize;  // Offset: 1148 Size: 4
	char bIsScreenSizeScaled : 1;  // Offset: 1152 Size: 1
	char bTreatAsASprite : 1;  // Offset: 1152 Size: 1
	char pad_1152_1 : 6;  // Offset: 1152 Size: 1
	char pad_1153[16];  // Offset: 1153 Size: 16



 // Functions 
 public:
	void SetArrowColor(struct FLinearColor NewColor); // Function Engine.ArrowComponent.SetArrowColor
}; 
 
 


//Class Engine.DocumentationActor Size 552
// Inherited 544 bytes 
class ADocumentationActor : public AActor
{

 public: 
	char pad_544[8];  // Offset: 544 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.VectorFieldVolume Size 552
// Inherited 544 bytes 
class AVectorFieldVolume : public AActor
{

 public: 
	struct UVectorFieldComponent* VectorFieldComponent;  // Offset: 544 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.AssetExportTask Size 120
// Inherited 40 bytes 
class UAssetExportTask : public UObject
{

 public: 
	struct UObject* Object;  // Offset: 40 Size: 8
	struct UExporter* Exporter;  // Offset: 48 Size: 8
	struct FString Filename;  // Offset: 56 Size: 16
	char pad_72_1 : 7;  // Offset: 72 Size: 1
	bool bSelected : 1;  // Offset: 72 Size: 1
	char pad_73_1 : 7;  // Offset: 73 Size: 1
	bool bReplaceIdentical : 1;  // Offset: 73 Size: 1
	char pad_74_1 : 7;  // Offset: 74 Size: 1
	bool bPrompt : 1;  // Offset: 74 Size: 1
	char pad_75_1 : 7;  // Offset: 75 Size: 1
	bool bAutomated : 1;  // Offset: 75 Size: 1
	char pad_76_1 : 7;  // Offset: 76 Size: 1
	bool bUseFileArchive : 1;  // Offset: 76 Size: 1
	char pad_77_1 : 7;  // Offset: 77 Size: 1
	bool bWriteEmptyFiles : 1;  // Offset: 77 Size: 1
	char pad_78[2];  // Offset: 78 Size: 2
	struct TArray<struct UObject*> IgnoreObjectList;  // Offset: 80 Size: 16
	struct UObject* Options;  // Offset: 96 Size: 8
	struct TArray<struct FString> errors;  // Offset: 104 Size: 16



 // Functions 
 public:
}; 
 
 


//Class Engine.AssetManagerSettings Size 256
// Inherited 56 bytes 
class UAssetManagerSettings : public UDeveloperSettings
{

 public: 
	struct TArray<struct FPrimaryAssetTypeInfo> PrimaryAssetTypesToScan;  // Offset: 56 Size: 16
	struct TArray<struct FDirectoryPath> DirectoriesToExclude;  // Offset: 72 Size: 16
	struct TArray<struct FPrimaryAssetRulesOverride> PrimaryAssetRules;  // Offset: 88 Size: 16
	struct TArray<struct FPrimaryAssetRulesCustomOverride> CustomPrimaryAssetRules;  // Offset: 104 Size: 16
	char pad_120_1 : 7;  // Offset: 120 Size: 1
	bool bOnlyCookProductionAssets : 1;  // Offset: 120 Size: 1
	char pad_121_1 : 7;  // Offset: 121 Size: 1
	bool bShouldManagerDetermineTypeAndName : 1;  // Offset: 121 Size: 1
	char pad_122_1 : 7;  // Offset: 122 Size: 1
	bool bShouldGuessTypeAndNameInEditor : 1;  // Offset: 122 Size: 1
	char pad_123_1 : 7;  // Offset: 123 Size: 1
	bool bShouldAcquireMissingChunksOnLoad : 1;  // Offset: 123 Size: 1
	char pad_124[4];  // Offset: 124 Size: 4
	struct TArray<struct FAssetManagerRedirect> PrimaryAssetIdRedirects;  // Offset: 128 Size: 16
	struct TArray<struct FAssetManagerRedirect> PrimaryAssetTypeRedirects;  // Offset: 144 Size: 16
	struct TArray<struct FAssetManagerRedirect> AssetPathRedirects;  // Offset: 160 Size: 16
	struct TSet<struct FName> MetaDataTagsForAssetRegistry;  // Offset: 176 Size: 80



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionPixelDepth Size 64
// Inherited 64 bytes 
class UMaterialExpressionPixelDepth : public UMaterialExpression
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.InterpTrackFade Size 168
// Inherited 144 bytes 
class UInterpTrackFade : public UInterpTrackFloatBase
{

 public: 
	char bPersistFade : 1;  // Offset: 144 Size: 1
	char bFadeAudio : 1;  // Offset: 144 Size: 1
	char pad_144_1 : 6;  // Offset: 144 Size: 1
	char pad_145[4];  // Offset: 145 Size: 4
	struct FLinearColor FadeColor;  // Offset: 148 Size: 16
	char pad_164[4];  // Offset: 164 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.AsyncActionLoadPrimaryAssetBase Size 120
// Inherited 48 bytes 
class UAsyncActionLoadPrimaryAssetBase : public UBlueprintAsyncActionBase
{

 public: 
	char pad_48[72];  // Offset: 48 Size: 72



 // Functions 
 public:
}; 
 
 


//Class Engine.AsyncActionLoadPrimaryAsset Size 136
// Inherited 120 bytes 
class UAsyncActionLoadPrimaryAsset : public UAsyncActionLoadPrimaryAssetBase
{

 public: 
	struct FMulticastInlineDelegate completed;  // Offset: 120 Size: 16



 // Functions 
 public:
	struct UAsyncActionLoadPrimaryAsset* AsyncLoadPrimaryAsset(struct UObject* WorldContextObject, struct FPrimaryAssetId PrimaryAsset, struct TArray<struct FName>& LoadBundles); // Function Engine.AsyncActionLoadPrimaryAsset.AsyncLoadPrimaryAsset
}; 
 
 


//Class Engine.InterpTrackBoolProp Size 136
// Inherited 112 bytes 
class UInterpTrackBoolProp : public UInterpTrack
{

 public: 
	struct TArray<struct FBoolTrackKey> BoolTrack;  // Offset: 112 Size: 16
	struct FName PropertyName;  // Offset: 128 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.AsyncActionLoadPrimaryAssetClass Size 136
// Inherited 120 bytes 
class UAsyncActionLoadPrimaryAssetClass : public UAsyncActionLoadPrimaryAssetBase
{

 public: 
	struct FMulticastInlineDelegate completed;  // Offset: 120 Size: 16



 // Functions 
 public:
	struct UAsyncActionLoadPrimaryAssetClass* AsyncLoadPrimaryAssetClass(struct UObject* WorldContextObject, struct FPrimaryAssetId PrimaryAsset, struct TArray<struct FName>& LoadBundles); // Function Engine.AsyncActionLoadPrimaryAssetClass.AsyncLoadPrimaryAssetClass
}; 
 
 


//Class Engine.CheckBoxStyleAsset Size 1448
// Inherited 40 bytes 
class UCheckBoxStyleAsset : public UObject
{

 public: 
	struct FCheckBoxStyle CheckBoxStyle;  // Offset: 40 Size: 1408



 // Functions 
 public:
}; 
 
 


//Class Engine.RuntimeVirtualTexture Size 160
// Inherited 40 bytes 
class URuntimeVirtualTexture : public UObject
{

 public: 
	int32_t TileCount;  // Offset: 40 Size: 4
	int32_t TileSize;  // Offset: 44 Size: 4
	int32_t TileBorderSize;  // Offset: 48 Size: 4
	enum class ERuntimeVirtualTextureMaterialType MaterialType;  // Offset: 52 Size: 1
	char pad_53_1 : 7;  // Offset: 53 Size: 1
	bool bCompressTextures : 1;  // Offset: 53 Size: 1
	char pad_54_1 : 7;  // Offset: 54 Size: 1
	bool bClearTextures : 1;  // Offset: 54 Size: 1
	char pad_55_1 : 7;  // Offset: 55 Size: 1
	bool bSinglePhysicalSpace : 1;  // Offset: 55 Size: 1
	char pad_56_1 : 7;  // Offset: 56 Size: 1
	bool bPrivateSpace : 1;  // Offset: 56 Size: 1
	char pad_57_1 : 7;  // Offset: 57 Size: 1
	bool bAdaptive : 1;  // Offset: 57 Size: 1
	char pad_58_1 : 7;  // Offset: 58 Size: 1
	bool bContinuousUpdate : 1;  // Offset: 58 Size: 1
	char pad_59[1];  // Offset: 59 Size: 1
	int32_t RemoveLowMips;  // Offset: 60 Size: 4
	enum class TextureGroup LODGroup;  // Offset: 64 Size: 1
	char pad_65[3];  // Offset: 65 Size: 3
	int32_t Size;  // Offset: 68 Size: 4
	struct URuntimeVirtualTextureStreamingProxy* StreamingTexture;  // Offset: 72 Size: 8
	char pad_80[80];  // Offset: 80 Size: 80



 // Functions 
 public:
	int32_t GetTileSize(); // Function Engine.RuntimeVirtualTexture.GetTileSize
	int32_t GetTileCount(); // Function Engine.RuntimeVirtualTexture.GetTileCount
	int32_t GetTileBorderSize(); // Function Engine.RuntimeVirtualTexture.GetTileBorderSize
	int32_t GetSize(); // Function Engine.RuntimeVirtualTexture.GetSize
	int32_t GetPageTableSize(); // Function Engine.RuntimeVirtualTexture.GetPageTableSize
}; 
 
 


//Class Engine.SceneCaptureComponentCube Size 768
// Inherited 720 bytes 
class USceneCaptureComponentCube : public USceneCaptureComponent
{

 public: 
	struct UTextureRenderTargetCube* TextureTarget;  // Offset: 712 Size: 8
	char pad_728_1 : 7;  // Offset: 728 Size: 1
	bool bCaptureRotation : 1;  // Offset: 720 Size: 1
	struct UTextureRenderTargetCube* TextureTargetLeft;  // Offset: 728 Size: 8
	struct UTextureRenderTargetCube* TextureTargetRight;  // Offset: 736 Size: 8
	struct UTextureRenderTarget2D* TextureTargetODS;  // Offset: 744 Size: 8
	float IPD;  // Offset: 752 Size: 4
	char pad_757[11];  // Offset: 757 Size: 11



 // Functions 
 public:
	void CaptureScene(); // Function Engine.SceneCaptureComponentCube.CaptureScene
}; 
 
 


//Class Engine.AsyncActionLoadPrimaryAssetList Size 136
// Inherited 120 bytes 
class UAsyncActionLoadPrimaryAssetList : public UAsyncActionLoadPrimaryAssetBase
{

 public: 
	struct FMulticastInlineDelegate completed;  // Offset: 120 Size: 16



 // Functions 
 public:
	struct UAsyncActionLoadPrimaryAssetList* AsyncLoadPrimaryAssetList(struct UObject* WorldContextObject, struct TArray<struct FPrimaryAssetId>& PrimaryAssetList, struct TArray<struct FName>& LoadBundles); // Function Engine.AsyncActionLoadPrimaryAssetList.AsyncLoadPrimaryAssetList
}; 
 
 


//Class Engine.MaterialExpressionTextureSampleParameterSubUV Size 136
// Inherited 128 bytes 
class UMaterialExpressionTextureSampleParameterSubUV : public UMaterialExpressionTextureSampleParameter2D
{

 public: 
	char bBlend : 1;  // Offset: 128 Size: 1
	char pad_128_1 : 7;  // Offset: 128 Size: 1
	char pad_129[8];  // Offset: 129 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.AsyncActionLoadPrimaryAssetClassList Size 136
// Inherited 120 bytes 
class UAsyncActionLoadPrimaryAssetClassList : public UAsyncActionLoadPrimaryAssetBase
{

 public: 
	struct FMulticastInlineDelegate completed;  // Offset: 120 Size: 16



 // Functions 
 public:
	struct UAsyncActionLoadPrimaryAssetClassList* AsyncLoadPrimaryAssetClassList(struct UObject* WorldContextObject, struct TArray<struct FPrimaryAssetId>& PrimaryAssetList, struct TArray<struct FName>& LoadBundles); // Function Engine.AsyncActionLoadPrimaryAssetClassList.AsyncLoadPrimaryAssetClassList
}; 
 
 


//Class Engine.ParticleModuleSizeBase Size 48
// Inherited 48 bytes 
class UParticleModuleSizeBase : public UParticleModule
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionAbs Size 88
// Inherited 64 bytes 
class UMaterialExpressionAbs : public UMaterialExpression
{

 public: 
	struct FExpressionInput Input;  // Offset: 64 Size: 20
	char pad_84[4];  // Offset: 84 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleLODLevel Size 184
// Inherited 40 bytes 
class UParticleLODLevel : public UObject
{

 public: 
	int32_t Level;  // Offset: 40 Size: 4
	char bEnabled : 1;  // Offset: 44 Size: 1
	char pad_44_1 : 7;  // Offset: 44 Size: 1
	char pad_45[4];  // Offset: 45 Size: 4
	struct UParticleModuleRequired* RequiredModule;  // Offset: 48 Size: 8
	struct TArray<struct UParticleModule*> Modules;  // Offset: 56 Size: 16
	struct UParticleModuleTypeDataBase* TypeDataModule;  // Offset: 72 Size: 8
	struct UParticleModuleSpawn* SpawnModule;  // Offset: 80 Size: 8
	struct UParticleModuleEventGenerator* EventGenerator;  // Offset: 88 Size: 8
	struct TArray<struct UParticleModuleSpawnBase*> SpawningModules;  // Offset: 96 Size: 16
	struct TArray<struct UParticleModule*> SpawnModules;  // Offset: 112 Size: 16
	struct TArray<struct UParticleModule*> UpdateModules;  // Offset: 128 Size: 16
	struct TArray<struct UParticleModuleOrbit*> OrbitModules;  // Offset: 144 Size: 16
	struct TArray<struct UParticleModuleEventReceiverBase*> EventReceiverModules;  // Offset: 160 Size: 16
	char ConvertedModules : 1;  // Offset: 176 Size: 1
	char pad_176_1 : 7;  // Offset: 176 Size: 1
	char pad_177[4];  // Offset: 177 Size: 4
	int32_t PeakActiveParticles;  // Offset: 180 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.AsyncActionChangePrimaryAssetBundles Size 136
// Inherited 120 bytes 
class UAsyncActionChangePrimaryAssetBundles : public UAsyncActionLoadPrimaryAssetBase
{

 public: 
	struct FMulticastInlineDelegate completed;  // Offset: 120 Size: 16



 // Functions 
 public:
	struct UAsyncActionChangePrimaryAssetBundles* AsyncChangeBundleStateForPrimaryAssetList(struct UObject* WorldContextObject, struct TArray<struct FPrimaryAssetId>& PrimaryAssetList, struct TArray<struct FName>& AddBundles, struct TArray<struct FName>& RemoveBundles); // Function Engine.AsyncActionChangePrimaryAssetBundles.AsyncChangeBundleStateForPrimaryAssetList
	struct UAsyncActionChangePrimaryAssetBundles* AsyncChangeBundleStateForMatchingPrimaryAssets(struct UObject* WorldContextObject, struct TArray<struct FName>& NewBundles, struct TArray<struct FName>& OldBundles); // Function Engine.AsyncActionChangePrimaryAssetBundles.AsyncChangeBundleStateForMatchingPrimaryAssets
}; 
 
 


//Class Engine.AtmosphericFogCacheComponent Size 560
// Inherited 528 bytes 
class UAtmosphericFogCacheComponent : public USceneComponent
{

 public: 
	char pad_528[32];  // Offset: 528 Size: 32



 // Functions 
 public:
}; 
 
 


//Class Engine.TextRenderActor Size 552
// Inherited 544 bytes 
class ATextRenderActor : public AActor
{

 public: 
	struct UTextRenderComponent* TextRender;  // Offset: 544 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.AtmosphericFogComponent Size 864
// Inherited 528 bytes 
class UAtmosphericFogComponent : public USceneComponent
{

 public: 
	float SunMultiplier;  // Offset: 520 Size: 4
	float FogMultiplier;  // Offset: 524 Size: 4
	float DensityMultiplier;  // Offset: 528 Size: 4
	float DensityOffset;  // Offset: 532 Size: 4
	float DistanceScale;  // Offset: 536 Size: 4
	float AltitudeScale;  // Offset: 540 Size: 4
	float DistanceOffset;  // Offset: 544 Size: 4
	float GroundOffset;  // Offset: 548 Size: 4
	float StartDistance;  // Offset: 552 Size: 4
	float CacheDegree;  // Offset: 556 Size: 4
	float SunDiscScale;  // Offset: 560 Size: 4
	float DefaultBrightness;  // Offset: 564 Size: 4
	struct FColor DefaultLightColor;  // Offset: 568 Size: 4
	char bDisableSunDisk : 1;  // Offset: 572 Size: 1
	char bAtmosphereAffectsSunIlluminance : 1;  // Offset: 572 Size: 1
	char bDisableGroundScattering : 1;  // Offset: 572 Size: 1
	struct FVector CacheRate;  // Offset: 576 Size: 12
	struct FAtmospherePrecomputeParameters PrecomputeParams;  // Offset: 588 Size: 44
	struct UTexture2D* TransmittanceTexture;  // Offset: 632 Size: 8
	struct UTexture2D* IrradianceTexture;  // Offset: 640 Size: 8
	struct UTextureRenderTarget2D* DebugTextureTarget;  // Offset: 648 Size: 8
	char pad_660_1 : 5;  // Offset: 660 Size: 1
	char pad_661[204];  // Offset: 661 Size: 204



 // Functions 
 public:
	void StartPrecompute(); // Function Engine.AtmosphericFogComponent.StartPrecompute
	void SetSunMultiplier(float NewSunMultiplier); // Function Engine.AtmosphericFogComponent.SetSunMultiplier
	void SetStartDistance(float NewStartDistance); // Function Engine.AtmosphericFogComponent.SetStartDistance
	void SetPrecomputeParams(float DensityHeight, int32_t MaxScatteringOrder, int32_t InscatterAltitudeSampleNum); // Function Engine.AtmosphericFogComponent.SetPrecomputeParams
	void SetFogMultiplier(float NewFogMultiplier); // Function Engine.AtmosphericFogComponent.SetFogMultiplier
	void SetDistanceScale(float NewDistanceScale); // Function Engine.AtmosphericFogComponent.SetDistanceScale
	void SetDistanceOffset(float NewDistanceOffset); // Function Engine.AtmosphericFogComponent.SetDistanceOffset
	void SetDensityOffset(float NewDensityOffset); // Function Engine.AtmosphericFogComponent.SetDensityOffset
	void SetDensityMultiplier(float NewDensityMultiplier); // Function Engine.AtmosphericFogComponent.SetDensityMultiplier
	void SetDefaultLightColor(struct FLinearColor NewLightColor); // Function Engine.AtmosphericFogComponent.SetDefaultLightColor
	void SetDefaultBrightness(float NewBrightness); // Function Engine.AtmosphericFogComponent.SetDefaultBrightness
	void SetCacheDegree(float NewCacheDegree); // Function Engine.AtmosphericFogComponent.SetCacheDegree
	void SetAltitudeScale(float NewAltitudeScale); // Function Engine.AtmosphericFogComponent.SetAltitudeScale
	void DisableSunDisk(bool NewSunDisk); // Function Engine.AtmosphericFogComponent.DisableSunDisk
	void DisableGroundScattering(bool NewGroundScattering); // Function Engine.AtmosphericFogComponent.DisableGroundScattering
}; 
 
 


//Class Engine.AudioBus Size 48
// Inherited 40 bytes 
class UAudioBus : public UObject
{

 public: 
	enum class EAudioBusChannels AudioBusChannels;  // Offset: 40 Size: 1
	char pad_41[7];  // Offset: 41 Size: 7



 // Functions 
 public:
}; 
 
 


//Class Engine.Interface_AssetUserData Size 40
// Inherited 40 bytes 
class UInterface_AssetUserData : public UInterface
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.BookmarkBase Size 40
// Inherited 40 bytes 
class UBookmarkBase : public UObject
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.AudioSettings Size 408
// Inherited 56 bytes 
class UAudioSettings : public UDeveloperSettings
{

 public: 
	struct FSoftObjectPath DefaultSoundClassName;  // Offset: 56 Size: 24
	struct FSoftObjectPath DefaultMediaSoundClassName;  // Offset: 80 Size: 24
	struct FSoftObjectPath DefaultSoundConcurrencyName;  // Offset: 104 Size: 24
	struct FSoftObjectPath DefaultBaseSoundMix;  // Offset: 128 Size: 24
	struct FSoftObjectPath VoiPSoundClass;  // Offset: 152 Size: 24
	struct FSoftObjectPath MasterSubmix;  // Offset: 176 Size: 24
	struct FSoftObjectPath BaseDefaultSubmix;  // Offset: 200 Size: 24
	struct FSoftObjectPath ReverbSubmix;  // Offset: 224 Size: 24
	struct FSoftObjectPath EQSubmix;  // Offset: 248 Size: 24
	enum class EVoiceSampleRate VoiPSampleRate;  // Offset: 272 Size: 4
	float DefaultReverbSendLevel;  // Offset: 276 Size: 4
	int32_t MaximumConcurrentStreams;  // Offset: 280 Size: 4
	float GlobalMinPitchScale;  // Offset: 284 Size: 4
	float GlobalMaxPitchScale;  // Offset: 288 Size: 4
	char pad_292[4];  // Offset: 292 Size: 4
	struct TArray<struct FAudioQualitySettings> QualityLevels;  // Offset: 296 Size: 16
	char bAllowPlayWhenSilent : 1;  // Offset: 312 Size: 1
	char bDisableMasterEQ : 1;  // Offset: 312 Size: 1
	char bAllowCenterChannel3DPanning : 1;  // Offset: 312 Size: 1
	char pad_312_1 : 5;  // Offset: 312 Size: 1
	char pad_313[4];  // Offset: 313 Size: 4
	uint32_t NumStoppingSources;  // Offset: 316 Size: 4
	enum class EPanningMethod PanningMethod;  // Offset: 320 Size: 1
	enum class EMonoChannelUpmixMethod MonoChannelUpmixMethod;  // Offset: 321 Size: 1
	char pad_322[6];  // Offset: 322 Size: 6
	struct FString DialogueFilenameFormat;  // Offset: 328 Size: 16
	struct TArray<struct FSoundDebugEntry> DebugSounds;  // Offset: 344 Size: 16
	struct TArray<struct FDefaultAudioBusSettings> DefaultAudioBuses;  // Offset: 360 Size: 16
	struct USoundClass* DefaultSoundClass;  // Offset: 376 Size: 8
	struct USoundClass* DefaultMediaSoundClass;  // Offset: 384 Size: 8
	struct USoundConcurrency* DefaultSoundConcurrency;  // Offset: 392 Size: 8
	char pad_400[8];  // Offset: 400 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.BlueprintMapLibrary Size 40
// Inherited 40 bytes 
class UBlueprintMapLibrary : public UBlueprintFunctionLibrary
{

 public: 



 // Functions 
 public:
	void SetMapPropertyByName(struct UObject* Object, struct FName PropertyName, struct TMap<int32_t, int32_t>& Value); // Function Engine.BlueprintMapLibrary.SetMapPropertyByName
	void Map_Values(struct TMap<int32_t, int32_t>& TargetMap, struct TArray<int32_t>& Values); // Function Engine.BlueprintMapLibrary.Map_Values
	bool Map_Remove(struct TMap<int32_t, int32_t>& TargetMap, int32_t& Key); // Function Engine.BlueprintMapLibrary.Map_Remove
	int32_t Map_Length(struct TMap<int32_t, int32_t>& TargetMap); // Function Engine.BlueprintMapLibrary.Map_Length
	void Map_Keys(struct TMap<int32_t, int32_t>& TargetMap, struct TArray<int32_t>& Keys); // Function Engine.BlueprintMapLibrary.Map_Keys
	bool Map_Find(struct TMap<int32_t, int32_t>& TargetMap, int32_t& Key, int32_t& Value); // Function Engine.BlueprintMapLibrary.Map_Find
	bool Map_Contains(struct TMap<int32_t, int32_t>& TargetMap, int32_t& Key); // Function Engine.BlueprintMapLibrary.Map_Contains
	void Map_Clear(struct TMap<int32_t, int32_t>& TargetMap); // Function Engine.BlueprintMapLibrary.Map_Clear
	void Map_Add(struct TMap<int32_t, int32_t>& TargetMap, int32_t& Key, int32_t& Value); // Function Engine.BlueprintMapLibrary.Map_Add
}; 
 
 


//Class Engine.InputVectorAxisDelegateBinding Size 56
// Inherited 56 bytes 
class UInputVectorAxisDelegateBinding : public UInputAxisKeyDelegateBinding
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.VectorFieldStatic Size 152
// Inherited 72 bytes 
class UVectorFieldStatic : public UVectorField
{

 public: 
	int32_t SizeX;  // Offset: 72 Size: 4
	int32_t SizeY;  // Offset: 76 Size: 4
	int32_t SizeZ;  // Offset: 80 Size: 4
	char pad_84_1 : 7;  // Offset: 84 Size: 1
	bool bAllowCPUAccess : 1;  // Offset: 84 Size: 1
	char pad_85[67];  // Offset: 85 Size: 67



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionDepthOfFieldFunction Size 88
// Inherited 64 bytes 
class UMaterialExpressionDepthOfFieldFunction : public UMaterialExpression
{

 public: 
	enum class EDepthOfFieldFunctionValue FunctionValue;  // Offset: 64 Size: 1
	char pad_65[3];  // Offset: 65 Size: 3
	struct FExpressionInput Depth;  // Offset: 68 Size: 20



 // Functions 
 public:
}; 
 
 


//Class Engine.AudioVolume Size 712
// Inherited 600 bytes 
class AAudioVolume : public AVolume
{

 public: 
	float Priority;  // Offset: 600 Size: 4
	char bEnabled : 1;  // Offset: 604 Size: 1
	char pad_604_1 : 7;  // Offset: 604 Size: 1
	char pad_605[4];  // Offset: 605 Size: 4
	struct FReverbSettings Settings;  // Offset: 608 Size: 32
	struct FInteriorSettings AmbientZoneSettings;  // Offset: 640 Size: 36
	char pad_676[4];  // Offset: 676 Size: 4
	struct TArray<struct FAudioVolumeSubmixSendSettings> SubmixSendSettings;  // Offset: 680 Size: 16
	struct TArray<struct FAudioVolumeSubmixOverrideSettings> SubmixOverrideSettings;  // Offset: 696 Size: 16



 // Functions 
 public:
	void SetSubmixSendSettings(struct TArray<struct FAudioVolumeSubmixSendSettings>& NewSubmixSendSettings); // Function Engine.AudioVolume.SetSubmixSendSettings
	void SetSubmixOverrideSettings(struct TArray<struct FAudioVolumeSubmixOverrideSettings>& NewSubmixOverrideSettings); // Function Engine.AudioVolume.SetSubmixOverrideSettings
	void SetReverbSettings(struct FReverbSettings& NewReverbSettings); // Function Engine.AudioVolume.SetReverbSettings
	void SetPriority(float NewPriority); // Function Engine.AudioVolume.SetPriority
	void SetInteriorSettings(struct FInteriorSettings& NewInteriorSettings); // Function Engine.AudioVolume.SetInteriorSettings
	void SetEnabled(bool bNewEnabled); // Function Engine.AudioVolume.SetEnabled
	void OnRep_bEnabled(); // Function Engine.AudioVolume.OnRep_bEnabled
}; 
 
 


//Class Engine.MaterialExpressionLightmapUVs Size 64
// Inherited 64 bytes 
class UMaterialExpressionLightmapUVs : public UMaterialExpression
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.DialogueSoundWaveProxy Size 392
// Inherited 368 bytes 
class UDialogueSoundWaveProxy : public USoundBase
{

 public: 
	char pad_368[24];  // Offset: 368 Size: 24



 // Functions 
 public:
}; 
 
 


//Class Engine.ServerStatReplicator Size 744
// Inherited 544 bytes 
class AServerStatReplicator : public AInfo
{

 public: 
	char pad_544_1 : 7;  // Offset: 544 Size: 1
	bool bUpdateStatNet : 1;  // Offset: 544 Size: 1
	char pad_545_1 : 7;  // Offset: 545 Size: 1
	bool bOverwriteClientStats : 1;  // Offset: 545 Size: 1
	char pad_546[2];  // Offset: 546 Size: 2
	uint32_t Channels;  // Offset: 548 Size: 4
	uint32_t InRate;  // Offset: 552 Size: 4
	uint32_t OutRate;  // Offset: 556 Size: 4
	char pad_560[4];  // Offset: 560 Size: 4
	uint32_t MaxPacketOverhead;  // Offset: 564 Size: 4
	uint32_t InRateClientMax;  // Offset: 568 Size: 4
	uint32_t InRateClientMin;  // Offset: 572 Size: 4
	uint32_t InRateClientAvg;  // Offset: 576 Size: 4
	uint32_t InPacketsClientMax;  // Offset: 580 Size: 4
	uint32_t InPacketsClientMin;  // Offset: 584 Size: 4
	uint32_t InPacketsClientAvg;  // Offset: 588 Size: 4
	uint32_t OutRateClientMax;  // Offset: 592 Size: 4
	uint32_t OutRateClientMin;  // Offset: 596 Size: 4
	uint32_t OutRateClientAvg;  // Offset: 600 Size: 4
	uint32_t OutPacketsClientMax;  // Offset: 604 Size: 4
	uint32_t OutPacketsClientMin;  // Offset: 608 Size: 4
	uint32_t OutPacketsClientAvg;  // Offset: 612 Size: 4
	uint32_t NetNumClients;  // Offset: 616 Size: 4
	uint32_t InPackets;  // Offset: 620 Size: 4
	uint32_t OutPackets;  // Offset: 624 Size: 4
	uint32_t InBunches;  // Offset: 628 Size: 4
	uint32_t OutBunches;  // Offset: 632 Size: 4
	uint32_t OutLoss;  // Offset: 636 Size: 4
	uint32_t InLoss;  // Offset: 640 Size: 4
	uint32_t VoiceBytesSent;  // Offset: 644 Size: 4
	uint32_t VoiceBytesRecv;  // Offset: 648 Size: 4
	uint32_t VoicePacketsSent;  // Offset: 652 Size: 4
	uint32_t VoicePacketsRecv;  // Offset: 656 Size: 4
	uint32_t PercentInVoice;  // Offset: 660 Size: 4
	uint32_t PercentOutVoice;  // Offset: 664 Size: 4
	uint32_t NumActorChannels;  // Offset: 668 Size: 4
	uint32_t NumConsideredActors;  // Offset: 672 Size: 4
	uint32_t PrioritizedActors;  // Offset: 676 Size: 4
	uint32_t NumRelevantActors;  // Offset: 680 Size: 4
	uint32_t NumRelevantDeletedActors;  // Offset: 684 Size: 4
	uint32_t NumReplicatedActorAttempts;  // Offset: 688 Size: 4
	uint32_t NumReplicatedActors;  // Offset: 692 Size: 4
	uint32_t NumActors;  // Offset: 696 Size: 4
	uint32_t NumNetActors;  // Offset: 700 Size: 4
	uint32_t NumDormantActors;  // Offset: 704 Size: 4
	uint32_t NumInitiallyDormantActors;  // Offset: 708 Size: 4
	uint32_t NumNetGUIDsAckd;  // Offset: 712 Size: 4
	uint32_t NumNetGUIDsPending;  // Offset: 716 Size: 4
	uint32_t NumNetGUIDsUnAckd;  // Offset: 720 Size: 4
	uint32_t ObjPathBytes;  // Offset: 724 Size: 4
	uint32_t NetGUIDOutRate;  // Offset: 728 Size: 4
	uint32_t NetGUIDInRate;  // Offset: 732 Size: 4
	uint32_t NetSaturated;  // Offset: 736 Size: 4
	char pad_740[4];  // Offset: 740 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.AutoDestroySubsystem Size 80
// Inherited 64 bytes 
class UAutoDestroySubsystem : public UTickableWorldSubsystem
{

 public: 
	struct TArray<struct AActor*> ActorsToPoll;  // Offset: 64 Size: 16



 // Functions 
 public:
	void OnActorEndPlay(struct AActor* Actor, enum class EEndPlayReason EndPlayReason); // Function Engine.AutoDestroySubsystem.OnActorEndPlay
}; 
 
 


//Class Engine.MaterialExpressionRound Size 88
// Inherited 64 bytes 
class UMaterialExpressionRound : public UMaterialExpression
{

 public: 
	struct FExpressionInput Input;  // Offset: 64 Size: 20
	char pad_84[4];  // Offset: 84 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.InterpToMovementComponent Size 400
// Inherited 240 bytes 
class UInterpToMovementComponent : public UMovementComponent
{

 public: 
	float Duration;  // Offset: 240 Size: 4
	char bPauseOnImpact : 1;  // Offset: 244 Size: 1
	char pad_244_1 : 7;  // Offset: 244 Size: 1
	char pad_245[4];  // Offset: 245 Size: 4
	char pad_248_1 : 7;  // Offset: 248 Size: 1
	bool bSweep : 1;  // Offset: 248 Size: 1
	enum class ETeleportType TeleportType;  // Offset: 249 Size: 1
	enum class EInterpToBehaviourType BehaviourType;  // Offset: 250 Size: 1
	char pad_251_1 : 7;  // Offset: 251 Size: 1
	bool bCheckIfStillInWorld : 1;  // Offset: 251 Size: 1
	char bForceSubStepping : 1;  // Offset: 252 Size: 1
	char pad_252_1 : 7;  // Offset: 252 Size: 1
	char pad_253[4];  // Offset: 253 Size: 4
	struct FMulticastInlineDelegate OnInterpToReverse;  // Offset: 256 Size: 16
	struct FMulticastInlineDelegate OnInterpToStop;  // Offset: 272 Size: 16
	struct FMulticastInlineDelegate OnWaitBeginDelegate;  // Offset: 288 Size: 16
	struct FMulticastInlineDelegate OnWaitEndDelegate;  // Offset: 304 Size: 16
	struct FMulticastInlineDelegate OnResetDelegate;  // Offset: 320 Size: 16
	float MaxSimulationTimeStep;  // Offset: 336 Size: 4
	int32_t MaxSimulationIterations;  // Offset: 340 Size: 4
	struct TArray<struct FInterpControlPoint> ControlPoints;  // Offset: 344 Size: 16
	char pad_360[40];  // Offset: 360 Size: 40



 // Functions 
 public:
	void StopSimulating(struct FHitResult& HitResult); // Function Engine.InterpToMovementComponent.StopSimulating
	void RestartMovement(float InitialDirection); // Function Engine.InterpToMovementComponent.RestartMovement
	void ResetControlPoints(); // Function Engine.InterpToMovementComponent.ResetControlPoints
	void OnInterpToWaitEndDelegate__DelegateSignature(struct FHitResult& ImpactResult, float Time); // DelegateFunction Engine.InterpToMovementComponent.OnInterpToWaitEndDelegate__DelegateSignature
	void OnInterpToWaitBeginDelegate__DelegateSignature(struct FHitResult& ImpactResult, float Time); // DelegateFunction Engine.InterpToMovementComponent.OnInterpToWaitBeginDelegate__DelegateSignature
	void OnInterpToStopDelegate__DelegateSignature(struct FHitResult& ImpactResult, float Time); // DelegateFunction Engine.InterpToMovementComponent.OnInterpToStopDelegate__DelegateSignature
	void OnInterpToReverseDelegate__DelegateSignature(struct FHitResult& ImpactResult, float Time); // DelegateFunction Engine.InterpToMovementComponent.OnInterpToReverseDelegate__DelegateSignature
	void OnInterpToResetDelegate__DelegateSignature(struct FHitResult& ImpactResult, float Time); // DelegateFunction Engine.InterpToMovementComponent.OnInterpToResetDelegate__DelegateSignature
	void FinaliseControlPoints(); // Function Engine.InterpToMovementComponent.FinaliseControlPoints
	void AddControlPointPosition(struct FVector Pos, bool bPositionIsRelative); // Function Engine.InterpToMovementComponent.AddControlPointPosition
}; 
 
 


//Class Engine.AutomationTestSettings Size 832
// Inherited 40 bytes 
class UAutomationTestSettings : public UObject
{

 public: 
	struct TArray<struct FString> EngineTestModules;  // Offset: 40 Size: 16
	struct TArray<struct FString> EditorTestModules;  // Offset: 56 Size: 16
	struct FSoftObjectPath AutomationTestmap;  // Offset: 72 Size: 24
	struct TArray<struct FEditorMapPerformanceTestDefinition> EditorPerformanceTestMaps;  // Offset: 96 Size: 16
	struct TArray<struct FSoftObjectPath> AssetsToOpen;  // Offset: 112 Size: 16
	struct TArray<struct FString> MapsToPIETest;  // Offset: 128 Size: 16
	struct FBuildPromotionTestSettings BuildPromotionTest;  // Offset: 144 Size: 496
	struct FMaterialEditorPromotionSettings MaterialEditorPromotionTest;  // Offset: 640 Size: 48
	struct FParticleEditorPromotionSettings ParticleEditorPromotionTest;  // Offset: 688 Size: 16
	struct FBlueprintEditorPromotionSettings BlueprintEditorPromotionTest;  // Offset: 704 Size: 48
	struct TArray<struct FString> TestLevelFolders;  // Offset: 752 Size: 16
	struct TArray<struct FExternalToolDefinition> ExternalTools;  // Offset: 768 Size: 16
	struct TArray<struct FEditorImportExportTestDefinition> ImportExportTestDefinitions;  // Offset: 784 Size: 16
	struct TArray<struct FLaunchOnTestSettings> LaunchOnSettings;  // Offset: 800 Size: 16
	struct FIntPoint DefaultScreenshotResolution;  // Offset: 816 Size: 8
	float PIETestDuration;  // Offset: 824 Size: 4
	char pad_828[4];  // Offset: 828 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionLightVector Size 64
// Inherited 64 bytes 
class UMaterialExpressionLightVector : public UMaterialExpression
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.StaticMeshSocket Size 104
// Inherited 40 bytes 
class UStaticMeshSocket : public UObject
{

 public: 
	struct FName SocketName;  // Offset: 40 Size: 8
	struct FVector RelativeLocation;  // Offset: 48 Size: 12
	struct FRotator RelativeRotation;  // Offset: 60 Size: 12
	struct FVector RelativeScale;  // Offset: 72 Size: 12
	char pad_84[4];  // Offset: 84 Size: 4
	struct FString Tag;  // Offset: 88 Size: 16



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionPerInstanceRandom Size 64
// Inherited 64 bytes 
class UMaterialExpressionPerInstanceRandom : public UMaterialExpression
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.BandwidthTestActor Size 576
// Inherited 544 bytes 
class ABandwidthTestActor : public AActor
{

 public: 
	struct FBandwidthTestGenerator BandwidthGenerator;  // Offset: 544 Size: 32



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionArccosineFast Size 88
// Inherited 64 bytes 
class UMaterialExpressionArccosineFast : public UMaterialExpression
{

 public: 
	struct FExpressionInput Input;  // Offset: 64 Size: 20
	char pad_84[4];  // Offset: 84 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.SCS_Node Size 216
// Inherited 40 bytes 
class USCS_Node : public UObject
{

 public: 
	UObject* ComponentClass;  // Offset: 40 Size: 8
	struct UActorComponent* ComponentTemplate;  // Offset: 48 Size: 8
	struct FBlueprintCookedComponentInstancingData CookedComponentInstancingData;  // Offset: 56 Size: 72
	struct FName AttachToName;  // Offset: 128 Size: 8
	struct FName ParentComponentOrVariableName;  // Offset: 136 Size: 8
	struct FName ParentComponentOwnerClassName;  // Offset: 144 Size: 8
	char pad_152_1 : 7;  // Offset: 152 Size: 1
	bool bIsParentComponentNative : 1;  // Offset: 152 Size: 1
	char pad_153[7];  // Offset: 153 Size: 7
	struct TArray<struct USCS_Node*> ChildNodes;  // Offset: 160 Size: 16
	struct TArray<struct FBPVariableMetaDataEntry> MetaDataArray;  // Offset: 176 Size: 16
	struct FGuid VariableGuid;  // Offset: 192 Size: 16
	struct FName InternalVariableName;  // Offset: 208 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.BoxReflectionCapture Size 552
// Inherited 552 bytes 
class ABoxReflectionCapture : public AReflectionCapture
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.BlendProfile Size 72
// Inherited 40 bytes 
class UBlendProfile : public UObject
{

 public: 
	char pad_40[8];  // Offset: 40 Size: 8
	struct USkeleton* OwningSkeleton;  // Offset: 48 Size: 8
	struct TArray<struct FBlendProfileBoneEntry> ProfileEntries;  // Offset: 56 Size: 16



 // Functions 
 public:
}; 
 
 


//Class Engine.SplineMetadata Size 40
// Inherited 40 bytes 
class USplineMetadata : public UObject
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.BlockingVolume Size 600
// Inherited 600 bytes 
class ABlockingVolume : public AVolume
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.PlatformGameInstance Size 632
// Inherited 424 bytes 
class UPlatformGameInstance : public UGameInstance
{

 public: 
	struct FMulticastInlineDelegate ApplicationWillDeactivateDelegate;  // Offset: 424 Size: 16
	struct FMulticastInlineDelegate ApplicationHasReactivatedDelegate;  // Offset: 440 Size: 16
	struct FMulticastInlineDelegate ApplicationWillEnterBackgroundDelegate;  // Offset: 456 Size: 16
	struct FMulticastInlineDelegate ApplicationHasEnteredForegroundDelegate;  // Offset: 472 Size: 16
	struct FMulticastInlineDelegate ApplicationWillTerminateDelegate;  // Offset: 488 Size: 16
	struct FMulticastInlineDelegate ApplicationShouldUnloadResourcesDelegate;  // Offset: 504 Size: 16
	struct FMulticastInlineDelegate ApplicationReceivedStartupArgumentsDelegate;  // Offset: 520 Size: 16
	struct FMulticastInlineDelegate ApplicationRegisteredForRemoteNotificationsDelegate;  // Offset: 536 Size: 16
	struct FMulticastInlineDelegate ApplicationRegisteredForUserNotificationsDelegate;  // Offset: 552 Size: 16
	struct FMulticastInlineDelegate ApplicationFailedToRegisterForRemoteNotificationsDelegate;  // Offset: 568 Size: 16
	struct FMulticastInlineDelegate ApplicationReceivedRemoteNotificationDelegate;  // Offset: 584 Size: 16
	struct FMulticastInlineDelegate ApplicationReceivedLocalNotificationDelegate;  // Offset: 600 Size: 16
	struct FMulticastInlineDelegate ApplicationReceivedScreenOrientationChangedNotificationDelegate;  // Offset: 616 Size: 16



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionVolumetricAdvancedMaterialInput Size 64
// Inherited 64 bytes 
class UMaterialExpressionVolumetricAdvancedMaterialInput : public UMaterialExpression
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.InterpGroupCamera Size 96
// Inherited 80 bytes 
class UInterpGroupCamera : public UInterpGroup
{

 public: 
	struct UCameraAnim* CameraAnimInst;  // Offset: 80 Size: 8
	float CompressTolerance;  // Offset: 88 Size: 4
	char pad_92[4];  // Offset: 92 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.BlueprintPlatformLibrary Size 40
// Inherited 40 bytes 
class UBlueprintPlatformLibrary : public UBlueprintFunctionLibrary
{

 public: 



 // Functions 
 public:
	int32_t ScheduleLocalNotificationFromNow(int32_t inSecondsFromNow, struct FText& Title, struct FText& Body, struct FText& Action, struct FString ActivationEvent); // Function Engine.BlueprintPlatformLibrary.ScheduleLocalNotificationFromNow
	void ScheduleLocalNotificationBadgeFromNow(int32_t inSecondsFromNow, struct FString ActivationEvent); // Function Engine.BlueprintPlatformLibrary.ScheduleLocalNotificationBadgeFromNow
	int32_t ScheduleLocalNotificationBadgeAtTime(struct FDateTime& FireDateTime, bool LocalTime, struct FString ActivationEvent); // Function Engine.BlueprintPlatformLibrary.ScheduleLocalNotificationBadgeAtTime
	int32_t ScheduleLocalNotificationAtTime(struct FDateTime& FireDateTime, bool LocalTime, struct FText& Title, struct FText& Body, struct FText& Action, struct FString ActivationEvent); // Function Engine.BlueprintPlatformLibrary.ScheduleLocalNotificationAtTime
	void GetLaunchNotification(bool& NotificationLaunchedApp, struct FString& ActivationEvent, int32_t& FireDate); // Function Engine.BlueprintPlatformLibrary.GetLaunchNotification
	enum class EScreenOrientation GetDeviceOrientation(); // Function Engine.BlueprintPlatformLibrary.GetDeviceOrientation
	void ClearAllLocalNotifications(); // Function Engine.BlueprintPlatformLibrary.ClearAllLocalNotifications
	void CancelLocalNotificationById(int32_t NotificationId); // Function Engine.BlueprintPlatformLibrary.CancelLocalNotificationById
	void CancelLocalNotification(struct FString ActivationEvent); // Function Engine.BlueprintPlatformLibrary.CancelLocalNotification
}; 
 
 


//Class Engine.DecalActor Size 552
// Inherited 544 bytes 
class ADecalActor : public AActor
{

 public: 
	struct UDecalComponent* Decal;  // Offset: 544 Size: 8



 // Functions 
 public:
	void SetDecalMaterial(struct UMaterialInterface* NewDecalMaterial); // Function Engine.DecalActor.SetDecalMaterial
	struct UMaterialInterface* GetDecalMaterial(); // Function Engine.DecalActor.GetDecalMaterial
	struct UMaterialInstanceDynamic* CreateDynamicMaterialInstance(); // Function Engine.DecalActor.CreateDynamicMaterialInstance
}; 
 
 


//Class Engine.VolumeTexture Size 464
// Inherited 384 bytes 
class UVolumeTexture : public UTexture
{

 public: 
	char pad_384[80];  // Offset: 384 Size: 80



 // Functions 
 public:
}; 
 
 


//Class Engine.BlueprintSetLibrary Size 40
// Inherited 40 bytes 
class UBlueprintSetLibrary : public UBlueprintFunctionLibrary
{

 public: 



 // Functions 
 public:
	void SetSetPropertyByName(struct UObject* Object, struct FName PropertyName, struct TSet<int32_t>& Value); // Function Engine.BlueprintSetLibrary.SetSetPropertyByName
	void Set_Union(struct TSet<int32_t>& A, struct TSet<int32_t>& B, struct TSet<int32_t>& Result); // Function Engine.BlueprintSetLibrary.Set_Union
	void Set_ToArray(struct TSet<int32_t>& A, struct TArray<int32_t>& Result); // Function Engine.BlueprintSetLibrary.Set_ToArray
	void Set_RemoveItems(struct TSet<int32_t>& TargetSet, struct TArray<int32_t>& Items); // Function Engine.BlueprintSetLibrary.Set_RemoveItems
	bool Set_Remove(struct TSet<int32_t>& TargetSet, int32_t& Item); // Function Engine.BlueprintSetLibrary.Set_Remove
	int32_t Set_Length(struct TSet<int32_t>& TargetSet); // Function Engine.BlueprintSetLibrary.Set_Length
	void Set_Intersection(struct TSet<int32_t>& A, struct TSet<int32_t>& B, struct TSet<int32_t>& Result); // Function Engine.BlueprintSetLibrary.Set_Intersection
	void Set_Difference(struct TSet<int32_t>& A, struct TSet<int32_t>& B, struct TSet<int32_t>& Result); // Function Engine.BlueprintSetLibrary.Set_Difference
	bool Set_Contains(struct TSet<int32_t>& TargetSet, int32_t& ItemToFind); // Function Engine.BlueprintSetLibrary.Set_Contains
	void Set_Clear(struct TSet<int32_t>& TargetSet); // Function Engine.BlueprintSetLibrary.Set_Clear
	void Set_AddItems(struct TSet<int32_t>& TargetSet, struct TArray<int32_t>& NewItems); // Function Engine.BlueprintSetLibrary.Set_AddItems
	void Set_Add(struct TSet<int32_t>& TargetSet, int32_t& NewItem); // Function Engine.BlueprintSetLibrary.Set_Add
}; 
 
 


//Class Engine.ForceFeedbackAttenuation Size 216
// Inherited 40 bytes 
class UForceFeedbackAttenuation : public UObject
{

 public: 
	struct FForceFeedbackAttenuationSettings Attenuation;  // Offset: 40 Size: 176



 // Functions 
 public:
}; 
 
 


//Class Engine.BodySetup Size 672
// Inherited 72 bytes 
class UBodySetup : public UBodySetupCore
{

 public: 
	struct FKAggregateGeom AggGeom;  // Offset: 72 Size: 88
	char bAlwaysFullAnimWeight : 1;  // Offset: 160 Size: 1
	char bConsiderForBounds : 1;  // Offset: 160 Size: 1
	char bMeshCollideAll : 1;  // Offset: 160 Size: 1
	char bDoubleSidedGeometry : 1;  // Offset: 160 Size: 1
	char bGenerateNonMirroredCollision : 1;  // Offset: 160 Size: 1
	char bSharedCookedData : 1;  // Offset: 160 Size: 1
	char bGenerateMirroredCollision : 1;  // Offset: 160 Size: 1
	char bSupportUVsAndFaceRemap : 1;  // Offset: 160 Size: 1
	char pad_161[7];  // Offset: 161 Size: 7
	struct UPhysicalMaterial* PhysMaterial;  // Offset: 168 Size: 8
	struct FWalkableSlopeOverride WalkableSlopeOverride;  // Offset: 176 Size: 16
	char pad_192[104];  // Offset: 192 Size: 104
	struct FBodyInstance DefaultInstance;  // Offset: 296 Size: 344
	char pad_640[8];  // Offset: 640 Size: 8
	struct FVector BuildScale3D;  // Offset: 648 Size: 12
	char pad_660[12];  // Offset: 660 Size: 12



 // Functions 
 public:
}; 
 
 


//Class Engine.NetworkPredictionInterface Size 40
// Inherited 40 bytes 
class UNetworkPredictionInterface : public UInterface
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.BoundsCopyComponent Size 288
// Inherited 176 bytes 
class UBoundsCopyComponent : public UActorComponent
{

 public: 
	struct TSoftObjectPtr<AActor> BoundsSourceActor;  // Offset: 176 Size: 40
	char pad_216_1 : 7;  // Offset: 216 Size: 1
	bool bUseCollidingComponentsForSourceBounds : 1;  // Offset: 216 Size: 1
	char pad_217_1 : 7;  // Offset: 217 Size: 1
	bool bKeepOwnBoundsScale : 1;  // Offset: 217 Size: 1
	char pad_218_1 : 7;  // Offset: 218 Size: 1
	bool bUseCollidingComponentsForOwnBounds : 1;  // Offset: 218 Size: 1
	char pad_219[5];  // Offset: 219 Size: 5
	struct FTransform PostTransform;  // Offset: 224 Size: 48
	char pad_272_1 : 7;  // Offset: 272 Size: 1
	bool bCopyXBounds : 1;  // Offset: 272 Size: 1
	char pad_273_1 : 7;  // Offset: 273 Size: 1
	bool bCopyYBounds : 1;  // Offset: 273 Size: 1
	char pad_274_1 : 7;  // Offset: 274 Size: 1
	bool bCopyZBounds : 1;  // Offset: 274 Size: 1
	char pad_275[13];  // Offset: 275 Size: 13



 // Functions 
 public:
}; 
 
 


//Class Engine.BoxComponent Size 1184
// Inherited 1168 bytes 
class UBoxComponent : public UShapeComponent
{

 public: 
	struct FVector BoxExtent;  // Offset: 1160 Size: 12
	float LineThickness;  // Offset: 1172 Size: 4



 // Functions 
 public:
	void SetBoxExtent(struct FVector InBoxExtent, bool bUpdateOverlaps); // Function Engine.BoxComponent.SetBoxExtent
	struct FVector GetUnscaledBoxExtent(); // Function Engine.BoxComponent.GetUnscaledBoxExtent
	struct FVector GetScaledBoxExtent(); // Function Engine.BoxComponent.GetScaledBoxExtent
}; 
 
 


//Class Engine.ReflectionCaptureComponent Size 752
// Inherited 528 bytes 
class UReflectionCaptureComponent : public USceneComponent
{

 public: 
	struct UBillboardComponent* CaptureOffsetComponent;  // Offset: 520 Size: 8
	enum class EReflectionSourceType ReflectionSourceType;  // Offset: 528 Size: 1
	enum class EMobileReflectionCompression MobileReflectionCompression;  // Offset: 529 Size: 1
	struct UTextureCube* Cubemap;  // Offset: 536 Size: 8
	float SourceCubemapAngle;  // Offset: 544 Size: 4
	float Brightness;  // Offset: 548 Size: 4
	char pad_554_1 : 7;  // Offset: 554 Size: 1
	bool bModifyMaxValueRGBM : 1;  // Offset: 552 Size: 1
	char pad_555[1];  // Offset: 555 Size: 1
	float MaxValueRGBM;  // Offset: 556 Size: 4
	struct FVector CaptureOffset;  // Offset: 560 Size: 12
	struct FGuid MapBuildDataId;  // Offset: 572 Size: 16
	char pad_588_1 : 7;  // Offset: 588 Size: 1
	bool bUseDiffuseIndirect : 1;  // Offset: 588 Size: 1
	char pad_589[3];  // Offset: 589 Size: 3
	struct FVector4 DiffuseSH[7];  // Offset: 592 Size: 112
	char pad_704[16];  // Offset: 704 Size: 16
	struct UTextureCube* CachedEncodedHDRCubemap;  // Offset: 720 Size: 8
	char pad_728[24];  // Offset: 728 Size: 24



 // Functions 
 public:
}; 
 
 


//Class Engine.DistributionVectorParticleParameter Size 144
// Inherited 144 bytes 
class UDistributionVectorParticleParameter : public UDistributionVectorParameterBase
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.InterpTrackInstColorScale Size 40
// Inherited 40 bytes 
class UInterpTrackInstColorScale : public UInterpTrackInst
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.BoxReflectionCaptureComponent Size 784
// Inherited 752 bytes 
class UBoxReflectionCaptureComponent : public UReflectionCaptureComponent
{

 public: 
	float BoxTransitionDistance;  // Offset: 752 Size: 4
	char pad_756[4];  // Offset: 756 Size: 4
	struct UBoxComponent* PreviewInfluenceBox;  // Offset: 760 Size: 8
	struct UBoxComponent* PreviewCaptureBox;  // Offset: 768 Size: 8
	char pad_776[8];  // Offset: 776 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.Breakpoint Size 64
// Inherited 40 bytes 
class UBreakpoint : public UObject
{

 public: 
	char bEnabled : 1;  // Offset: 40 Size: 1
	char pad_40_1 : 7;  // Offset: 40 Size: 1
	char pad_41[8];  // Offset: 41 Size: 8
	struct UEdGraphNode* Node;  // Offset: 48 Size: 8
	char bStepOnce : 1;  // Offset: 56 Size: 1
	char bStepOnce_WasPreviouslyDisabled : 1;  // Offset: 56 Size: 1
	char bStepOnce_RemoveAfterHit : 1;  // Offset: 56 Size: 1
	char pad_56_1 : 5;  // Offset: 56 Size: 1
	char pad_57[8];  // Offset: 57 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionPreSkinnedPosition Size 64
// Inherited 64 bytes 
class UMaterialExpressionPreSkinnedPosition : public UMaterialExpression
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.KismetInternationalizationLibrary Size 40
// Inherited 40 bytes 
class UKismetInternationalizationLibrary : public UBlueprintFunctionLibrary
{

 public: 



 // Functions 
 public:
	bool SetCurrentLocale(struct FString Culture, bool SaveToConfig); // Function Engine.KismetInternationalizationLibrary.SetCurrentLocale
	bool SetCurrentLanguageAndLocale(struct FString Culture, bool SaveToConfig); // Function Engine.KismetInternationalizationLibrary.SetCurrentLanguageAndLocale
	bool SetCurrentLanguage(struct FString Culture, bool SaveToConfig); // Function Engine.KismetInternationalizationLibrary.SetCurrentLanguage
	bool SetCurrentCulture(struct FString Culture, bool SaveToConfig); // Function Engine.KismetInternationalizationLibrary.SetCurrentCulture
	bool SetCurrentAssetGroupCulture(struct FName AssetGroup, struct FString Culture, bool SaveToConfig); // Function Engine.KismetInternationalizationLibrary.SetCurrentAssetGroupCulture
	struct FString GetSuitableCulture(struct TArray<struct FString>& AvailableCultures, struct FString CultureToMatch, struct FString FallbackCulture); // Function Engine.KismetInternationalizationLibrary.GetSuitableCulture
	struct FString GetNativeCulture(enum class ELocalizedTextSourceCategory TextCategory); // Function Engine.KismetInternationalizationLibrary.GetNativeCulture
	struct TArray<struct FString> GetLocalizedCultures(bool IncludeGame, bool IncludeEngine, bool IncludeEditor, bool IncludeAdditional); // Function Engine.KismetInternationalizationLibrary.GetLocalizedCultures
	struct FString GetCurrentLocale(); // Function Engine.KismetInternationalizationLibrary.GetCurrentLocale
	struct FString GetCurrentLanguage(); // Function Engine.KismetInternationalizationLibrary.GetCurrentLanguage
	struct FString GetCurrentCulture(); // Function Engine.KismetInternationalizationLibrary.GetCurrentCulture
	struct FString GetCurrentAssetGroupCulture(struct FName AssetGroup); // Function Engine.KismetInternationalizationLibrary.GetCurrentAssetGroupCulture
	struct FString GetCultureDisplayName(struct FString Culture, bool Localized); // Function Engine.KismetInternationalizationLibrary.GetCultureDisplayName
	void ClearCurrentAssetGroupCulture(struct FName AssetGroup, bool SaveToConfig); // Function Engine.KismetInternationalizationLibrary.ClearCurrentAssetGroupCulture
}; 
 
 


//Class Engine.MaterialExpressionPanner Size 144
// Inherited 64 bytes 
class UMaterialExpressionPanner : public UMaterialExpression
{

 public: 
	struct FExpressionInput Coordinate;  // Offset: 64 Size: 20
	struct FExpressionInput Time;  // Offset: 84 Size: 20
	struct FExpressionInput Speed;  // Offset: 104 Size: 20
	float SpeedX;  // Offset: 124 Size: 4
	float SpeedY;  // Offset: 128 Size: 4
	uint32_t ConstCoordinate;  // Offset: 132 Size: 4
	char pad_136_1 : 7;  // Offset: 136 Size: 1
	bool bFractionalPart : 1;  // Offset: 136 Size: 1
	char pad_137[7];  // Offset: 137 Size: 7



 // Functions 
 public:
}; 
 
 


//Class Engine.LevelBounds Size 560
// Inherited 544 bytes 
class ALevelBounds : public AActor
{

 public: 
	struct UBoxComponent* BoxComponent;  // Offset: 544 Size: 8
	char pad_552_1 : 7;  // Offset: 552 Size: 1
	bool bAutoUpdateBounds : 1;  // Offset: 552 Size: 1
	char pad_553[7];  // Offset: 553 Size: 7



 // Functions 
 public:
}; 
 
 


//Class Engine.CheatManagerExtension Size 40
// Inherited 40 bytes 
class UCheatManagerExtension : public UObject
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.CameraShakeSourceActor Size 552
// Inherited 544 bytes 
class ACameraShakeSourceActor : public AActor
{

 public: 
	struct UCameraShakeSourceComponent* CameraShakeSourceComponent;  // Offset: 544 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.PrimaryAssetLabel Size 104
// Inherited 48 bytes 
class UPrimaryAssetLabel : public UPrimaryDataAsset
{

 public: 
	struct FPrimaryAssetRules Rules;  // Offset: 48 Size: 12
	char bLabelAssetsInMyDirectory : 1;  // Offset: 60 Size: 1
	char bIsRuntimeLabel : 1;  // Offset: 60 Size: 1
	char pad_60_1 : 6;  // Offset: 60 Size: 1
	char pad_61[4];  // Offset: 61 Size: 4
	struct TArray<struct TSoftObjectPtr<UObject>> ExplicitAssets;  // Offset: 64 Size: 16
	struct TArray<struct TSoftClassPtr<UObject>> ExplicitBlueprints;  // Offset: 80 Size: 16
	struct FCollectionReference AssetCollection;  // Offset: 96 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.BrushBuilder Size 128
// Inherited 40 bytes 
class UBrushBuilder : public UObject
{

 public: 
	struct FString BitmapFilename;  // Offset: 40 Size: 16
	struct FString ToolTip;  // Offset: 56 Size: 16
	char NotifyBadParams : 1;  // Offset: 72 Size: 1
	char pad_72_1 : 7;  // Offset: 72 Size: 1
	char pad_73[8];  // Offset: 73 Size: 8
	struct TArray<struct FVector> Vertices;  // Offset: 80 Size: 16
	struct TArray<struct FBuilderPoly> Polys;  // Offset: 96 Size: 16
	struct FName Layer;  // Offset: 112 Size: 8
	char MergeCoplanars : 1;  // Offset: 120 Size: 1
	char pad_120_1 : 7;  // Offset: 120 Size: 1
	char pad_121[8];  // Offset: 121 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.DemoNetConnection Size 7192
// Inherited 7080 bytes 
class UDemoNetConnection : public UNetConnection
{

 public: 
	char pad_7080[112];  // Offset: 7080 Size: 112



 // Functions 
 public:
}; 
 
 


//Class Engine.LODActor Size 680
// Inherited 544 bytes 
class ALODActor : public AActor
{

 public: 
	struct UStaticMeshComponent* StaticMeshComponent;  // Offset: 544 Size: 8
	struct TMap<struct FHLODInstancingKey, struct UInstancedStaticMeshComponent*> InstancedStaticMeshComponents;  // Offset: 552 Size: 80
	struct UHLODProxy* Proxy;  // Offset: 632 Size: 8
	struct FName Key;  // Offset: 640 Size: 8
	float LODDrawDistance;  // Offset: 648 Size: 4
	int32_t LODLevel;  // Offset: 652 Size: 4
	struct TArray<struct AActor*> SubActors;  // Offset: 656 Size: 16
	char CachedNumHLODLevels;  // Offset: 672 Size: 1
	char pad_673[7];  // Offset: 673 Size: 7



 // Functions 
 public:
}; 
 
 


//Class Engine.InputComponent Size 312
// Inherited 176 bytes 
class UInputComponent : public UActorComponent
{

 public: 
	char pad_176[112];  // Offset: 176 Size: 112
	struct TArray<struct FCachedKeyToActionInfo> CachedKeyToActionInfo;  // Offset: 288 Size: 16
	char pad_304[8];  // Offset: 304 Size: 8



 // Functions 
 public:
	bool WasControllerKeyJustReleased(struct FKey Key); // Function Engine.InputComponent.WasControllerKeyJustReleased
	bool WasControllerKeyJustPressed(struct FKey Key); // Function Engine.InputComponent.WasControllerKeyJustPressed
	bool IsControllerKeyDown(struct FKey Key); // Function Engine.InputComponent.IsControllerKeyDown
	void GetTouchState(int32_t FingerIndex, float& LocationX, float& LocationY, bool& bIsCurrentlyPressed); // Function Engine.InputComponent.GetTouchState
	struct FVector GetControllerVectorKeyState(struct FKey Key); // Function Engine.InputComponent.GetControllerVectorKeyState
	void GetControllerMouseDelta(float& DeltaX, float& DeltaY); // Function Engine.InputComponent.GetControllerMouseDelta
	float GetControllerKeyTimeDown(struct FKey Key); // Function Engine.InputComponent.GetControllerKeyTimeDown
	void GetControllerAnalogStickState(enum class EControllerAnalogStick WhichStick, float& StickX, float& StickY); // Function Engine.InputComponent.GetControllerAnalogStickState
	float GetControllerAnalogKeyState(struct FKey Key); // Function Engine.InputComponent.GetControllerAnalogKeyState
}; 
 
 


//Class Engine.BrushComponent Size 1152
// Inherited 1136 bytes 
class UBrushComponent : public UPrimitiveComponent
{

 public: 
	struct UModel* Brush;  // Offset: 1136 Size: 8
	struct UBodySetup* BrushBodySetup;  // Offset: 1144 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.BrushShape Size 600
// Inherited 600 bytes 
class ABrushShape : public ABrush
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionRerouteBase Size 64
// Inherited 64 bytes 
class UMaterialExpressionRerouteBase : public UMaterialExpression
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionConstant3Vector Size 80
// Inherited 64 bytes 
class UMaterialExpressionConstant3Vector : public UMaterialExpression
{

 public: 
	struct FLinearColor Constant;  // Offset: 64 Size: 16



 // Functions 
 public:
}; 
 
 


//Class Engine.ButtonStyleAsset Size 672
// Inherited 40 bytes 
class UButtonStyleAsset : public UObject
{

 public: 
	struct FButtonStyle ButtonStyle;  // Offset: 40 Size: 632



 // Functions 
 public:
}; 
 
 


//Class Engine.CameraAnim Size 1600
// Inherited 40 bytes 
class UCameraAnim : public UObject
{

 public: 
	struct UInterpGroup* CameraInterpGroup;  // Offset: 40 Size: 8
	float AnimLength;  // Offset: 48 Size: 4
	struct FBox BoundingBox;  // Offset: 52 Size: 28
	char bRelativeToInitialTransform : 1;  // Offset: 80 Size: 1
	char bRelativeToInitialFOV : 1;  // Offset: 80 Size: 1
	char pad_80_1 : 6;  // Offset: 80 Size: 1
	char pad_81[4];  // Offset: 81 Size: 4
	float BaseFOV;  // Offset: 84 Size: 4
	char pad_88[8];  // Offset: 88 Size: 8
	struct FPostProcessSettings BasePostProcessSettings;  // Offset: 96 Size: 1488
	float BasePostProcessBlendWeight;  // Offset: 1584 Size: 4
	char pad_1588[12];  // Offset: 1588 Size: 12



 // Functions 
 public:
}; 
 
 


//Class Engine.CameraBlockingVolume Size 600
// Inherited 600 bytes 
class ACameraBlockingVolume : public AVolume
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialFunction Size 88
// Inherited 64 bytes 
class UMaterialFunction : public UMaterialFunctionInterface
{

 public: 
	struct FString Description;  // Offset: 64 Size: 16
	char bExposeToLibrary : 1;  // Offset: 80 Size: 1
	char bPrefixParameterNames : 1;  // Offset: 80 Size: 1
	char pad_80_1 : 6;  // Offset: 80 Size: 1
	char pad_81[8];  // Offset: 81 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.ReporterGraph Size 168
// Inherited 48 bytes 
class UReporterGraph : public UReporterBase
{

 public: 
	char pad_48[120];  // Offset: 48 Size: 120



 // Functions 
 public:
}; 
 
 


//Class Engine.CameraModifier Size 72
// Inherited 40 bytes 
class UCameraModifier : public UObject
{

 public: 
	char bDebug : 1;  // Offset: 40 Size: 1
	char bExclusive : 1;  // Offset: 40 Size: 1
	char pad_40_1 : 6;  // Offset: 40 Size: 1
	char pad_41[4];  // Offset: 41 Size: 4
	char Priority;  // Offset: 44 Size: 1
	char pad_45[3];  // Offset: 45 Size: 3
	struct APlayerCameraManager* CameraOwner;  // Offset: 48 Size: 8
	float AlphaInTime;  // Offset: 56 Size: 4
	float AlphaOutTime;  // Offset: 60 Size: 4
	float Alpha;  // Offset: 64 Size: 4
	char pad_68[4];  // Offset: 68 Size: 4



 // Functions 
 public:
	bool IsDisabled(); // Function Engine.CameraModifier.IsDisabled
	struct AActor* GetViewTarget(); // Function Engine.CameraModifier.GetViewTarget
	void EnableModifier(); // Function Engine.CameraModifier.EnableModifier
	void DisableModifier(bool bImmediate); // Function Engine.CameraModifier.DisableModifier
	void BlueprintModifyPostProcess(float DeltaTime, float& PostProcessBlendWeight, struct FPostProcessSettings& PostProcessSettings); // Function Engine.CameraModifier.BlueprintModifyPostProcess
	void BlueprintModifyCamera(float DeltaTime, struct FVector ViewLocation, struct FRotator ViewRotation, float FOV, struct FVector& NewViewLocation, struct FRotator& NewViewRotation, float& NewFOV); // Function Engine.CameraModifier.BlueprintModifyCamera
}; 
 
 


//Class Engine.ParticleModuleVectorFieldRotationRate Size 64
// Inherited 48 bytes 
class UParticleModuleVectorFieldRotationRate : public UParticleModuleVectorFieldBase
{

 public: 
	struct FVector RotationRate;  // Offset: 48 Size: 12
	char pad_60[4];  // Offset: 60 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionDotProduct Size 104
// Inherited 64 bytes 
class UMaterialExpressionDotProduct : public UMaterialExpression
{

 public: 
	struct FExpressionInput A;  // Offset: 64 Size: 20
	struct FExpressionInput B;  // Offset: 84 Size: 20



 // Functions 
 public:
}; 
 
 


//Class Engine.CameraModifier_CameraShake Size 176
// Inherited 72 bytes 
class UCameraModifier_CameraShake : public UCameraModifier
{

 public: 
	struct TArray<struct FActiveCameraShakeInfo> ActiveShakes;  // Offset: 72 Size: 16
	struct TMap<UCameraShakeBase*, struct FPooledCameraShakes> ExpiredPooledShakesMap;  // Offset: 88 Size: 80
	float SplitScreenShakeScale;  // Offset: 168 Size: 4
	char pad_172[4];  // Offset: 172 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionSkyAtmosphereViewLuminance Size 64
// Inherited 64 bytes 
class UMaterialExpressionSkyAtmosphereViewLuminance : public UMaterialExpression
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.InterpGroupInstDirector Size 72
// Inherited 72 bytes 
class UInterpGroupInstDirector : public UInterpGroupInst
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.VectorField Size 72
// Inherited 40 bytes 
class UVectorField : public UObject
{

 public: 
	struct FBox Bounds;  // Offset: 40 Size: 28
	float Intensity;  // Offset: 68 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.CameraShakeSourceComponent Size 560
// Inherited 528 bytes 
class UCameraShakeSourceComponent : public USceneComponent
{

 public: 
	enum class ECameraShakeAttenuation Attenuation;  // Offset: 520 Size: 1
	float InnerAttenuationRadius;  // Offset: 524 Size: 4
	float OuterAttenuationRadius;  // Offset: 528 Size: 4
	UCameraShakeBase* CameraShake;  // Offset: 536 Size: 8
	char pad_545_1 : 7;  // Offset: 545 Size: 1
	bool bAutoStart : 1;  // Offset: 544 Size: 1
	char pad_546[14];  // Offset: 546 Size: 14



 // Functions 
 public:
	void StopAllCameraShakesOfType(UCameraShakeBase* InCameraShake, bool bImmediately); // Function Engine.CameraShakeSourceComponent.StopAllCameraShakesOfType
	void StopAllCameraShakes(bool bImmediately); // Function Engine.CameraShakeSourceComponent.StopAllCameraShakes
	void StartCameraShake(UCameraShakeBase* InCameraShake, float Scale, enum class ECameraShakePlaySpace PlaySpace, struct FRotator UserPlaySpaceRot); // Function Engine.CameraShakeSourceComponent.StartCameraShake
	void Start(); // Function Engine.CameraShakeSourceComponent.Start
	float GetAttenuationFactor(struct FVector& Location); // Function Engine.CameraShakeSourceComponent.GetAttenuationFactor
}; 
 
 


//Class Engine.TextureRenderTarget Size 384
// Inherited 384 bytes 
class UTextureRenderTarget : public UTexture
{

 public: 
	float TargetGamma;  // Offset: 376 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.TextureRenderTarget2D Size 432
// Inherited 384 bytes 
class UTextureRenderTarget2D : public UTextureRenderTarget
{

 public: 
	int32_t SizeX;  // Offset: 384 Size: 4
	int32_t SizeY;  // Offset: 388 Size: 4
	struct FLinearColor ClearColor;  // Offset: 392 Size: 16
	enum class TextureAddress AddressX;  // Offset: 408 Size: 1
	enum class TextureAddress AddressY;  // Offset: 409 Size: 1
	char bForceLinearGamma : 1;  // Offset: 410 Size: 1
	char bHDR : 1;  // Offset: 410 Size: 1
	char bGPUSharedFlag : 1;  // Offset: 410 Size: 1
	char pad_410_1 : 5;  // Offset: 410 Size: 1
	enum class ETextureRenderTargetFormat RenderTargetFormat;  // Offset: 411 Size: 1
	char bAutoGenerateMips : 1;  // Offset: 412 Size: 1
	char pad_412_1 : 7;  // Offset: 412 Size: 1
	enum class TextureFilter MipsSamplerFilter;  // Offset: 413 Size: 1
	enum class TextureAddress MipsAddressU;  // Offset: 414 Size: 1
	enum class TextureAddress MipsAddressV;  // Offset: 415 Size: 1
	enum class EPixelFormat OverrideFormat;  // Offset: 416 Size: 1
	char pad_417[15];  // Offset: 417 Size: 15



 // Functions 
 public:
}; 
 
 


//Class Engine.CanvasRenderTarget2D Size 464
// Inherited 432 bytes 
class UCanvasRenderTarget2D : public UTextureRenderTarget2D
{

 public: 
	struct FMulticastInlineDelegate OnCanvasRenderTargetUpdate;  // Offset: 424 Size: 16
	struct TWeakObjectPtr<UWorld> World;  // Offset: 440 Size: 8
	char pad_456_1 : 7;  // Offset: 456 Size: 1
	bool bShouldClearRenderTargetOnReceiveUpdate : 1;  // Offset: 448 Size: 1
	char pad_457[7];  // Offset: 457 Size: 7



 // Functions 
 public:
	void UpdateResource(); // Function Engine.CanvasRenderTarget2D.UpdateResource
	void ReceiveUpdate(struct UCanvas* Canvas, int32_t Width, int32_t Height); // Function Engine.CanvasRenderTarget2D.ReceiveUpdate
	void GetSize(int32_t& Width, int32_t& Height); // Function Engine.CanvasRenderTarget2D.GetSize
	struct UCanvasRenderTarget2D* CreateCanvasRenderTarget2D(struct UObject* WorldContextObject, UCanvasRenderTarget2D* CanvasRenderTarget2DClass, int32_t Width, int32_t Height); // Function Engine.CanvasRenderTarget2D.CreateCanvasRenderTarget2D
}; 
 
 


//Class Engine.CapsuleComponent Size 1168
// Inherited 1168 bytes 
class UCapsuleComponent : public UShapeComponent
{

 public: 
	float CapsuleHalfHeight;  // Offset: 1160 Size: 4
	float CapsuleRadius;  // Offset: 1164 Size: 4



 // Functions 
 public:
	void SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps); // Function Engine.CapsuleComponent.SetCapsuleSize
	void SetCapsuleRadius(float Radius, bool bUpdateOverlaps); // Function Engine.CapsuleComponent.SetCapsuleRadius
	void SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps); // Function Engine.CapsuleComponent.SetCapsuleHalfHeight
	void GetUnscaledCapsuleSize_WithoutHemisphere(float& OutRadius, float& OutHalfHeightWithoutHemisphere); // Function Engine.CapsuleComponent.GetUnscaledCapsuleSize_WithoutHemisphere
	void GetUnscaledCapsuleSize(float& OutRadius, float& OutHalfHeight); // Function Engine.CapsuleComponent.GetUnscaledCapsuleSize
	float GetUnscaledCapsuleRadius(); // Function Engine.CapsuleComponent.GetUnscaledCapsuleRadius
	float GetUnscaledCapsuleHalfHeight_WithoutHemisphere(); // Function Engine.CapsuleComponent.GetUnscaledCapsuleHalfHeight_WithoutHemisphere
	float GetUnscaledCapsuleHalfHeight(); // Function Engine.CapsuleComponent.GetUnscaledCapsuleHalfHeight
	float GetShapeScale(); // Function Engine.CapsuleComponent.GetShapeScale
	void GetScaledCapsuleSize_WithoutHemisphere(float& OutRadius, float& OutHalfHeightWithoutHemisphere); // Function Engine.CapsuleComponent.GetScaledCapsuleSize_WithoutHemisphere
	void GetScaledCapsuleSize(float& OutRadius, float& OutHalfHeight); // Function Engine.CapsuleComponent.GetScaledCapsuleSize
	float GetScaledCapsuleRadius(); // Function Engine.CapsuleComponent.GetScaledCapsuleRadius
	float GetScaledCapsuleHalfHeight_WithoutHemisphere(); // Function Engine.CapsuleComponent.GetScaledCapsuleHalfHeight_WithoutHemisphere
	float GetScaledCapsuleHalfHeight(); // Function Engine.CapsuleComponent.GetScaledCapsuleHalfHeight
}; 
 
 


//Class Engine.PlatformInterfaceBase Size 56
// Inherited 40 bytes 
class UPlatformInterfaceBase : public UObject
{

 public: 
	struct TArray<struct FDelegateArray> AllDelegates;  // Offset: 40 Size: 16



 // Functions 
 public:
}; 
 
 


//Class Engine.CollisionProfile Size 368
// Inherited 56 bytes 
class UCollisionProfile : public UDeveloperSettings
{

 public: 
	struct TArray<struct FCollisionResponseTemplate> Profiles;  // Offset: 56 Size: 16
	struct TArray<struct FCustomChannelSetup> DefaultChannelResponses;  // Offset: 72 Size: 16
	struct TArray<struct FCustomProfile> EditProfiles;  // Offset: 88 Size: 16
	struct TArray<struct FRedirector> ProfileRedirects;  // Offset: 104 Size: 16
	struct TArray<struct FRedirector> CollisionChannelRedirects;  // Offset: 120 Size: 16
	char pad_136[232];  // Offset: 136 Size: 232



 // Functions 
 public:
}; 
 
 


//Class Engine.InterpTrackInstFloatMaterialParam Size 96
// Inherited 40 bytes 
class UInterpTrackInstFloatMaterialParam : public UInterpTrackInst
{

 public: 
	struct TArray<struct UMaterialInstanceDynamic*> MaterialInstances;  // Offset: 40 Size: 16
	struct TArray<float> ResetFloats;  // Offset: 56 Size: 16
	struct TArray<struct FPrimitiveMaterialRef> PrimitiveMaterialRefs;  // Offset: 72 Size: 16
	struct UInterpTrackFloatMaterialParam* InstancedTrack;  // Offset: 88 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.ComponentDelegateBinding Size 56
// Inherited 40 bytes 
class UComponentDelegateBinding : public UDynamicBlueprintBinding
{

 public: 
	struct TArray<struct FBlueprintComponentDelegateBinding> ComponentDelegateBindings;  // Offset: 40 Size: 16



 // Functions 
 public:
}; 
 
 


//Class Engine.DataTable Size 176
// Inherited 40 bytes 
class UDataTable : public UObject
{

 public: 
	struct UScriptStruct* RowStruct;  // Offset: 40 Size: 8
	char pad_48[80];  // Offset: 48 Size: 80
	char bStripFromClientBuilds : 1;  // Offset: 128 Size: 1
	char bIgnoreExtraFields : 1;  // Offset: 128 Size: 1
	char bIgnoreMissingFields : 1;  // Offset: 128 Size: 1
	char pad_128_1 : 5;  // Offset: 128 Size: 1
	char pad_129[8];  // Offset: 129 Size: 8
	struct FString ImportKeyField;  // Offset: 136 Size: 16
	char pad_152[24];  // Offset: 152 Size: 24



 // Functions 
 public:
}; 
 
 


//Class Engine.CompositeDataTable Size 216
// Inherited 176 bytes 
class UCompositeDataTable : public UDataTable
{

 public: 
	struct TArray<struct UDataTable*> ParentTables;  // Offset: 176 Size: 16
	struct TArray<struct UDataTable*> OldParentTables;  // Offset: 192 Size: 16
	char pad_208[8];  // Offset: 208 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionAnisotropyOutput Size 88
// Inherited 64 bytes 
class UMaterialExpressionAnisotropyOutput : public UMaterialExpressionCustomOutput
{

 public: 
	struct FExpressionInput Input;  // Offset: 64 Size: 20
	char pad_84[4];  // Offset: 84 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.ControlChannel Size 128
// Inherited 104 bytes 
class UControlChannel : public UChannel
{

 public: 
	char pad_104[24];  // Offset: 104 Size: 24



 // Functions 
 public:
}; 
 
 


//Class Engine.VisualLoggerDebugSnapshotInterface Size 40
// Inherited 40 bytes 
class UVisualLoggerDebugSnapshotInterface : public UInterface
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.GarbageCollectionSettings Size 88
// Inherited 56 bytes 
class UGarbageCollectionSettings : public UDeveloperSettings
{

 public: 
	float TimeBetweenPurgingPendingKillObjects;  // Offset: 56 Size: 4
	char FlushStreamingOnGC : 1;  // Offset: 60 Size: 1
	char AllowParallelGC : 1;  // Offset: 60 Size: 1
	char IncrementalBeginDestroyEnabled : 1;  // Offset: 60 Size: 1
	char MultithreadedDestructionEnabled : 1;  // Offset: 60 Size: 1
	char CreateGCClusters : 1;  // Offset: 60 Size: 1
	char AssetClusteringEnabled : 1;  // Offset: 60 Size: 1
	char ActorClusteringEnabled : 1;  // Offset: 60 Size: 1
	char BlueprintClusteringEnabled : 1;  // Offset: 60 Size: 1
	char UseDisregardForGCOnDedicatedServers : 1;  // Offset: 61 Size: 1
	char pad_61_1 : 7;  // Offset: 61 Size: 1
	char pad_62[3];  // Offset: 62 Size: 3
	int32_t MinGCClusterSize;  // Offset: 64 Size: 4
	int32_t NumRetriesBeforeForcingGC;  // Offset: 68 Size: 4
	int32_t MaxObjectsNotConsideredByGC;  // Offset: 72 Size: 4
	int32_t SizeOfPermanentObjectPool;  // Offset: 76 Size: 4
	int32_t MaxObjectsInGame;  // Offset: 80 Size: 4
	int32_t MaxObjectsInEditor;  // Offset: 84 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.CurveBase Size 48
// Inherited 40 bytes 
class UCurveBase : public UObject
{

 public: 
	char pad_40[8];  // Offset: 40 Size: 8



 // Functions 
 public:
	void GetValueRange(float& MinValue, float& MaxValue); // Function Engine.CurveBase.GetValueRange
	void GetTimeRange(float& MinTime, float& MaxTime); // Function Engine.CurveBase.GetTimeRange
}; 
 
 


//Class Engine.GameplayStatics Size 40
// Inherited 40 bytes 
class UGameplayStatics : public UBlueprintFunctionLibrary
{

 public: 



 // Functions 
 public:
	void UnRetainAllSoundsInSoundClass(struct USoundClass* InSoundClass); // Function Engine.GameplayStatics.UnRetainAllSoundsInSoundClass
	void UnloadStreamLevelBySoftObjectPtr(struct UObject* WorldContextObject, struct TSoftObjectPtr<UWorld> Level, struct FLatentActionInfo LatentInfo, bool bShouldBlockOnUnload); // Function Engine.GameplayStatics.UnloadStreamLevelBySoftObjectPtr
	void UnloadStreamLevel(struct UObject* WorldContextObject, struct FName LevelName, struct FLatentActionInfo LatentInfo, bool bShouldBlockOnUnload); // Function Engine.GameplayStatics.UnloadStreamLevel
	bool SuggestProjectileVelocity_CustomArc(struct UObject* WorldContextObject, struct FVector& OutLaunchVelocity, struct FVector StartPos, struct FVector EndPos, float OverrideGravityZ, float ArcParam); // Function Engine.GameplayStatics.SuggestProjectileVelocity_CustomArc
	struct UAudioComponent* SpawnSoundAttached(struct USoundBase* Sound, struct USceneComponent* AttachToComponent, struct FName AttachPointName, struct FVector Location, struct FRotator Rotation, enum class EAttachLocation LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, struct USoundAttenuation* AttenuationSettings, struct USoundConcurrency* ConcurrencySettings, bool bAutoDestroy); // Function Engine.GameplayStatics.SpawnSoundAttached
	struct UAudioComponent* SpawnSoundAtLocation(struct UObject* WorldContextObject, struct USoundBase* Sound, struct FVector Location, struct FRotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, struct USoundAttenuation* AttenuationSettings, struct USoundConcurrency* ConcurrencySettings, bool bAutoDestroy); // Function Engine.GameplayStatics.SpawnSoundAtLocation
	struct UAudioComponent* SpawnSound2D(struct UObject* WorldContextObject, struct USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, struct USoundConcurrency* ConcurrencySettings, bool bPersistAcrossLevelTransition, bool bAutoDestroy); // Function Engine.GameplayStatics.SpawnSound2D
	struct UObject* SpawnObject(UObject* ObjectClass, struct UObject* Outer); // Function Engine.GameplayStatics.SpawnObject
	struct UForceFeedbackComponent* SpawnForceFeedbackAttached(struct UForceFeedbackEffect* ForceFeedbackEffect, struct USceneComponent* AttachToComponent, struct FName AttachPointName, struct FVector Location, struct FRotator Rotation, enum class EAttachLocation LocationType, bool bStopWhenAttachedToDestroyed, bool bLooping, float IntensityMultiplier, float StartTime, struct UForceFeedbackAttenuation* AttenuationSettings, bool bAutoDestroy); // Function Engine.GameplayStatics.SpawnForceFeedbackAttached
	struct UForceFeedbackComponent* SpawnForceFeedbackAtLocation(struct UObject* WorldContextObject, struct UForceFeedbackEffect* ForceFeedbackEffect, struct FVector Location, struct FRotator Rotation, bool bLooping, float IntensityMultiplier, float StartTime, struct UForceFeedbackAttenuation* AttenuationSettings, bool bAutoDestroy); // Function Engine.GameplayStatics.SpawnForceFeedbackAtLocation
	struct UParticleSystemComponent* SpawnEmitterAttached(struct UParticleSystem* EmitterTemplate, struct USceneComponent* AttachToComponent, struct FName AttachPointName, struct FVector Location, struct FRotator Rotation, struct FVector Scale, enum class EAttachLocation LocationType, bool bAutoDestroy, enum class EPSCPoolMethod PoolingMethod, bool bAutoActivate); // Function Engine.GameplayStatics.SpawnEmitterAttached
	struct UParticleSystemComponent* SpawnEmitterAtLocation(struct UObject* WorldContextObject, struct UParticleSystem* EmitterTemplate, struct FVector Location, struct FRotator Rotation, struct FVector Scale, bool bAutoDestroy, enum class EPSCPoolMethod PoolingMethod, bool bAutoActivateSystem); // Function Engine.GameplayStatics.SpawnEmitterAtLocation
	struct UAudioComponent* SpawnDialogueAttached(struct UDialogueWave* Dialogue, struct FDialogueContext& Context, struct USceneComponent* AttachToComponent, struct FName AttachPointName, struct FVector Location, struct FRotator Rotation, enum class EAttachLocation LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, struct USoundAttenuation* AttenuationSettings, bool bAutoDestroy); // Function Engine.GameplayStatics.SpawnDialogueAttached
	struct UAudioComponent* SpawnDialogueAtLocation(struct UObject* WorldContextObject, struct UDialogueWave* Dialogue, struct FDialogueContext& Context, struct FVector Location, struct FRotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, struct USoundAttenuation* AttenuationSettings, bool bAutoDestroy); // Function Engine.GameplayStatics.SpawnDialogueAtLocation
	struct UAudioComponent* SpawnDialogue2D(struct UObject* WorldContextObject, struct UDialogueWave* Dialogue, struct FDialogueContext& Context, float VolumeMultiplier, float PitchMultiplier, float StartTime, bool bAutoDestroy); // Function Engine.GameplayStatics.SpawnDialogue2D
	struct UDecalComponent* SpawnDecalAttached(struct UMaterialInterface* DecalMaterial, struct FVector DecalSize, struct USceneComponent* AttachToComponent, struct FName AttachPointName, struct FVector Location, struct FRotator Rotation, enum class EAttachLocation LocationType, float LifeSpan); // Function Engine.GameplayStatics.SpawnDecalAttached
	struct UDecalComponent* SpawnDecalAtLocation(struct UObject* WorldContextObject, struct UMaterialInterface* DecalMaterial, struct FVector DecalSize, struct FVector Location, struct FRotator Rotation, float LifeSpan); // Function Engine.GameplayStatics.SpawnDecalAtLocation
	void SetWorldOriginLocation(struct UObject* WorldContextObject, struct FIntVector NewLocation); // Function Engine.GameplayStatics.SetWorldOriginLocation
	void SetViewportMouseCaptureMode(struct UObject* WorldContextObject, enum class EMouseCaptureMode MouseCaptureMode); // Function Engine.GameplayStatics.SetViewportMouseCaptureMode
	void SetSubtitlesEnabled(bool bEnabled); // Function Engine.GameplayStatics.SetSubtitlesEnabled
	void SetSoundMixClassOverride(struct UObject* WorldContextObject, struct USoundMix* InSoundMixModifier, struct USoundClass* InSoundClass, float Volume, float Pitch, float FadeInTime, bool bApplyToChildren); // Function Engine.GameplayStatics.SetSoundMixClassOverride
	void SetSoundClassDistanceScale(struct UObject* WorldContextObject, struct USoundClass* SoundClass, float DistanceAttenuationScale, float TimeSec); // Function Engine.GameplayStatics.SetSoundClassDistanceScale
	void SetPlayerControllerID(struct APlayerController* Player, int32_t ControllerId); // Function Engine.GameplayStatics.SetPlayerControllerID
	void SetMaxAudioChannelsScaled(struct UObject* WorldContextObject, float MaxChannelCountScale); // Function Engine.GameplayStatics.SetMaxAudioChannelsScaled
	void SetGlobalTimeDilation(struct UObject* WorldContextObject, float TimeDilation); // Function Engine.GameplayStatics.SetGlobalTimeDilation
	void SetGlobalPitchModulation(struct UObject* WorldContextObject, float PitchModulation, float TimeSec); // Function Engine.GameplayStatics.SetGlobalPitchModulation
	void SetGlobalListenerFocusParameters(struct UObject* WorldContextObject, float FocusAzimuthScale, float NonFocusAzimuthScale, float FocusDistanceScale, float NonFocusDistanceScale, float FocusVolumeScale, float NonFocusVolumeScale, float FocusPriorityScale, float NonFocusPriorityScale); // Function Engine.GameplayStatics.SetGlobalListenerFocusParameters
	bool SetGamePaused(struct UObject* WorldContextObject, bool bPaused); // Function Engine.GameplayStatics.SetGamePaused
	void SetForceDisableSplitscreen(struct UObject* WorldContextObject, bool bDisable); // Function Engine.GameplayStatics.SetForceDisableSplitscreen
	void SetEnableWorldRendering(struct UObject* WorldContextObject, bool bEnable); // Function Engine.GameplayStatics.SetEnableWorldRendering
	void SetBaseSoundMix(struct UObject* WorldContextObject, struct USoundMix* InSoundMix); // Function Engine.GameplayStatics.SetBaseSoundMix
	bool SaveGameToSlot(struct USaveGame* SaveGameObject, struct FString SlotName, int32_t UserIndex); // Function Engine.GameplayStatics.SaveGameToSlot
	void RemovePlayer(struct APlayerController* Player, bool bDestroyPawn); // Function Engine.GameplayStatics.RemovePlayer
	struct FVector RebaseZeroOriginOntoLocal(struct UObject* WorldContextObject, struct FVector WorldLocation); // Function Engine.GameplayStatics.RebaseZeroOriginOntoLocal
	struct FVector RebaseLocalOriginOntoZero(struct UObject* WorldContextObject, struct FVector WorldLocation); // Function Engine.GameplayStatics.RebaseLocalOriginOntoZero
	void PushSoundMixModifier(struct UObject* WorldContextObject, struct USoundMix* InSoundMixModifier); // Function Engine.GameplayStatics.PushSoundMixModifier
	bool ProjectWorldToScreen(struct APlayerController* Player, struct FVector& WorldPosition, struct FVector2D& ScreenPosition, bool bPlayerViewportRelative); // Function Engine.GameplayStatics.ProjectWorldToScreen
	void PrimeSound(struct USoundBase* InSound); // Function Engine.GameplayStatics.PrimeSound
	void PrimeAllSoundsInSoundClass(struct USoundClass* InSoundClass); // Function Engine.GameplayStatics.PrimeAllSoundsInSoundClass
	void PopSoundMixModifier(struct UObject* WorldContextObject, struct USoundMix* InSoundMixModifier); // Function Engine.GameplayStatics.PopSoundMixModifier
	void PlayWorldCameraShake(struct UObject* WorldContextObject, UCameraShakeBase* Shake, struct FVector Epicenter, float InnerRadius, float OuterRadius, float Falloff, bool bOrientShakeTowardsEpicenter); // Function Engine.GameplayStatics.PlayWorldCameraShake
	void PlaySoundAtLocation(struct UObject* WorldContextObject, struct USoundBase* Sound, struct FVector Location, struct FRotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, struct USoundAttenuation* AttenuationSettings, struct USoundConcurrency* ConcurrencySettings, struct AActor* OwningActor); // Function Engine.GameplayStatics.PlaySoundAtLocation
	void PlaySound2D(struct UObject* WorldContextObject, struct USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, struct USoundConcurrency* ConcurrencySettings, struct AActor* OwningActor, bool bIsUISound); // Function Engine.GameplayStatics.PlaySound2D
	void PlayDialogueAtLocation(struct UObject* WorldContextObject, struct UDialogueWave* Dialogue, struct FDialogueContext& Context, struct FVector Location, struct FRotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, struct USoundAttenuation* AttenuationSettings); // Function Engine.GameplayStatics.PlayDialogueAtLocation
	void PlayDialogue2D(struct UObject* WorldContextObject, struct UDialogueWave* Dialogue, struct FDialogueContext& Context, float VolumeMultiplier, float PitchMultiplier, float StartTime); // Function Engine.GameplayStatics.PlayDialogue2D
	struct FString ParseOption(struct FString Options, struct FString Key); // Function Engine.GameplayStatics.ParseOption
	void OpenLevelBySoftObjectPtr(struct UObject* WorldContextObject, struct TSoftObjectPtr<UWorld> Level, bool bAbsolute, struct FString Options); // Function Engine.GameplayStatics.OpenLevelBySoftObjectPtr
	void OpenLevel(struct UObject* WorldContextObject, struct FName LevelName, bool bAbsolute, struct FString Options); // Function Engine.GameplayStatics.OpenLevel
	struct FHitResult MakeHitResult(bool bBlockingHit, bool bInitialOverlap, float Time, float Distance, struct FVector Location, struct FVector ImpactPoint, struct FVector Normal, struct FVector ImpactNormal, struct UPhysicalMaterial* PhysMat, struct AActor* HitActor, struct UPrimitiveComponent* HitComponent, struct FName HitBoneName, int32_t HitItem, int32_t ElementIndex, int32_t FaceIndex, struct FVector TraceStart, struct FVector TraceEnd); // Function Engine.GameplayStatics.MakeHitResult
	void LoadStreamLevelBySoftObjectPtr(struct UObject* WorldContextObject, struct TSoftObjectPtr<UWorld> Level, bool bMakeVisibleAfterLoad, bool bShouldBlockOnLoad, struct FLatentActionInfo LatentInfo); // Function Engine.GameplayStatics.LoadStreamLevelBySoftObjectPtr
	void LoadStreamLevel(struct UObject* WorldContextObject, struct FName LevelName, bool bMakeVisibleAfterLoad, bool bShouldBlockOnLoad, struct FLatentActionInfo LatentInfo); // Function Engine.GameplayStatics.LoadStreamLevel
	struct USaveGame* LoadGameFromSlot(struct FString SlotName, int32_t UserIndex); // Function Engine.GameplayStatics.LoadGameFromSlot
	bool IsSplitscreenForceDisabled(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.IsSplitscreenForceDisabled
	bool IsGamePaused(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.IsGamePaused
	bool HasOption(struct FString Options, struct FString InKey); // Function Engine.GameplayStatics.HasOption
	bool HasLaunchOption(struct FString OptionToCheck); // Function Engine.GameplayStatics.HasLaunchOption
	int32_t GrassOverlappingSphereCount(struct UObject* WorldContextObject, struct UStaticMesh* StaticMesh, struct FVector CenterPosition, float Radius); // Function Engine.GameplayStatics.GrassOverlappingSphereCount
	struct FIntVector GetWorldOriginLocation(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetWorldOriginLocation
	float GetWorldDeltaSeconds(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetWorldDeltaSeconds
	void GetViewProjectionMatrix(struct FMinimalViewInfo DesiredView, struct FMatrix& ViewMatrix, struct FMatrix& ProjectionMatrix, struct FMatrix& ViewProjectionMatrix); // Function Engine.GameplayStatics.GetViewProjectionMatrix
	enum class EMouseCaptureMode GetViewportMouseCaptureMode(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetViewportMouseCaptureMode
	float GetUnpausedTimeSeconds(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetUnpausedTimeSeconds
	float GetTimeSeconds(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetTimeSeconds
	enum class EPhysicalSurface GetSurfaceType(struct FHitResult& Hit); // Function Engine.GameplayStatics.GetSurfaceType
	struct ULevelStreaming* GetStreamingLevel(struct UObject* WorldContextObject, struct FName PackageName); // Function Engine.GameplayStatics.GetStreamingLevel
	float GetRealTimeSeconds(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetRealTimeSeconds
	struct APawn* GetPlayerPawn(struct UObject* WorldContextObject, int32_t PlayerIndex); // Function Engine.GameplayStatics.GetPlayerPawn
	int32_t GetPlayerControllerID(struct APlayerController* Player); // Function Engine.GameplayStatics.GetPlayerControllerID
	struct APlayerController* GetPlayerControllerFromID(struct UObject* WorldContextObject, int32_t ControllerId); // Function Engine.GameplayStatics.GetPlayerControllerFromID
	struct APlayerController* GetPlayerController(struct UObject* WorldContextObject, int32_t PlayerIndex); // Function Engine.GameplayStatics.GetPlayerController
	struct ACharacter* GetPlayerCharacter(struct UObject* WorldContextObject, int32_t PlayerIndex); // Function Engine.GameplayStatics.GetPlayerCharacter
	struct APlayerCameraManager* GetPlayerCameraManager(struct UObject* WorldContextObject, int32_t PlayerIndex); // Function Engine.GameplayStatics.GetPlayerCameraManager
	struct FString GetPlatformName(); // Function Engine.GameplayStatics.GetPlatformName
	UObject* GetObjectClass(struct UObject* Object); // Function Engine.GameplayStatics.GetObjectClass
	int32_t GetMaxAudioChannelCount(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetMaxAudioChannelCount
	void GetKeyValue(struct FString Pair, struct FString& Key, struct FString& Value); // Function Engine.GameplayStatics.GetKeyValue
	int32_t GetIntOption(struct FString Options, struct FString Key, int32_t DefaultValue); // Function Engine.GameplayStatics.GetIntOption
	float GetGlobalTimeDilation(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetGlobalTimeDilation
	struct AGameStateBase* GetGameState(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetGameState
	struct AGameModeBase* GetGameMode(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetGameMode
	struct UGameInstance* GetGameInstance(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetGameInstance
	bool GetEnableWorldRendering(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetEnableWorldRendering
	struct UReverbEffect* GetCurrentReverbEffect(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetCurrentReverbEffect
	struct FString GetCurrentLevelName(struct UObject* WorldContextObject, bool bRemovePrefixString); // Function Engine.GameplayStatics.GetCurrentLevelName
	bool GetClosestListenerLocation(struct UObject* WorldContextObject, struct FVector& Location, float MaximumRange, bool bAllowAttenuationOverride, struct FVector& ListenerPosition); // Function Engine.GameplayStatics.GetClosestListenerLocation
	float GetAudioTimeSeconds(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetAudioTimeSeconds
	void GetAllActorsWithTag(struct UObject* WorldContextObject, struct FName Tag, struct TArray<struct AActor*>& OutActors); // Function Engine.GameplayStatics.GetAllActorsWithTag
	void GetAllActorsWithInterface(struct UObject* WorldContextObject, UInterface* Interface, struct TArray<struct AActor*>& OutActors); // Function Engine.GameplayStatics.GetAllActorsWithInterface
	void GetAllActorsOfClassWithTag(struct UObject* WorldContextObject, AActor* ActorClass, struct FName Tag, struct TArray<struct AActor*>& OutActors); // Function Engine.GameplayStatics.GetAllActorsOfClassWithTag
	void GetAllActorsOfClass(struct UObject* WorldContextObject, AActor* ActorClass, struct TArray<struct AActor*>& OutActors); // Function Engine.GameplayStatics.GetAllActorsOfClass
	struct AActor* GetActorOfClass(struct UObject* WorldContextObject, AActor* ActorClass); // Function Engine.GameplayStatics.GetActorOfClass
	void GetActorArrayBounds(struct TArray<struct AActor*>& Actors, bool bOnlyCollidingComponents, struct FVector& Center, struct FVector& BoxExtent); // Function Engine.GameplayStatics.GetActorArrayBounds
	struct FVector GetActorArrayAverageLocation(struct TArray<struct AActor*>& Actors); // Function Engine.GameplayStatics.GetActorArrayAverageLocation
	void GetAccurateRealTime(int32_t& Seconds, float& PartialSeconds); // Function Engine.GameplayStatics.GetAccurateRealTime
	void FlushLevelStreaming(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.FlushLevelStreaming
	struct AActor* FinishSpawningActor(struct AActor* Actor, struct FTransform& SpawnTransform); // Function Engine.GameplayStatics.FinishSpawningActor
	struct AActor* FindNearestActor(struct FVector Origin, struct TArray<struct AActor*>& ActorsToCheck, float& Distance); // Function Engine.GameplayStatics.FindNearestActor
	bool FindCollisionUV(struct FHitResult& Hit, int32_t UVChannel, struct FVector2D& UV); // Function Engine.GameplayStatics.FindCollisionUV
	void EnableLiveStreaming(bool Enable); // Function Engine.GameplayStatics.EnableLiveStreaming
	bool DoesSaveGameExist(struct FString SlotName, int32_t UserIndex); // Function Engine.GameplayStatics.DoesSaveGameExist
	bool DeprojectScreenToWorld(struct APlayerController* Player, struct FVector2D& ScreenPosition, struct FVector& WorldPosition, struct FVector& WorldDirection); // Function Engine.GameplayStatics.DeprojectScreenToWorld
	bool DeleteGameInSlot(struct FString SlotName, int32_t UserIndex); // Function Engine.GameplayStatics.DeleteGameInSlot
	void DeactivateReverbEffect(struct UObject* WorldContextObject, struct FName TagName); // Function Engine.GameplayStatics.DeactivateReverbEffect
	struct UAudioComponent* CreateSound2D(struct UObject* WorldContextObject, struct USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, struct USoundConcurrency* ConcurrencySettings, bool bPersistAcrossLevelTransition, bool bAutoDestroy); // Function Engine.GameplayStatics.CreateSound2D
	struct USaveGame* CreateSaveGameObject(USaveGame* SaveGameClass); // Function Engine.GameplayStatics.CreateSaveGameObject
	struct APlayerController* CreatePlayer(struct UObject* WorldContextObject, int32_t ControllerId, bool bSpawnPlayerController); // Function Engine.GameplayStatics.CreatePlayer
	void ClearSoundMixModifiers(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.ClearSoundMixModifiers
	void ClearSoundMixClassOverride(struct UObject* WorldContextObject, struct USoundMix* InSoundMixModifier, struct USoundClass* InSoundClass, float FadeOutTime); // Function Engine.GameplayStatics.ClearSoundMixClassOverride
	void CancelAsyncLoading(); // Function Engine.GameplayStatics.CancelAsyncLoading
	void BreakHitResult(struct FHitResult& Hit, bool& bBlockingHit, bool& bInitialOverlap, float& Time, float& Distance, struct FVector& Location, struct FVector& ImpactPoint, struct FVector& Normal, struct FVector& ImpactNormal, struct UPhysicalMaterial*& PhysMat, struct AActor*& HitActor, struct UPrimitiveComponent*& HitComponent, struct FName& HitBoneName, int32_t& HitItem, int32_t& ElementIndex, int32_t& FaceIndex, struct FVector& TraceStart, struct FVector& TraceEnd); // Function Engine.GameplayStatics.BreakHitResult
	bool BlueprintSuggestProjectileVelocity(struct UObject* WorldContextObject, struct FVector& TossVelocity, struct FVector StartLocation, struct FVector EndLocation, float LaunchSpeed, float OverrideGravityZ, enum class ESuggestProjVelocityTraceOption TraceOption, float CollisionRadius, bool bFavorHighArc, bool bDrawDebug); // Function Engine.GameplayStatics.BlueprintSuggestProjectileVelocity
	bool Blueprint_PredictProjectilePath_ByTraceChannel(struct UObject* WorldContextObject, struct FHitResult& OutHit, struct TArray<struct FVector>& OutPathPositions, struct FVector& OutLastTraceDestination, struct FVector StartPos, struct FVector LaunchVelocity, bool bTracePath, float ProjectileRadius, enum class ECollisionChannel TraceChannel, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, float DrawDebugTime, float SimFrequency, float MaxSimTime, float OverrideGravityZ); // Function Engine.GameplayStatics.Blueprint_PredictProjectilePath_ByTraceChannel
	bool Blueprint_PredictProjectilePath_ByObjectType(struct UObject* WorldContextObject, struct FHitResult& OutHit, struct TArray<struct FVector>& OutPathPositions, struct FVector& OutLastTraceDestination, struct FVector StartPos, struct FVector LaunchVelocity, bool bTracePath, float ProjectileRadius, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, float DrawDebugTime, float SimFrequency, float MaxSimTime, float OverrideGravityZ); // Function Engine.GameplayStatics.Blueprint_PredictProjectilePath_ByObjectType
	bool Blueprint_PredictProjectilePath_Advanced(struct UObject* WorldContextObject, struct FPredictProjectilePathParams& PredictParams, struct FPredictProjectilePathResult& PredictResult); // Function Engine.GameplayStatics.Blueprint_PredictProjectilePath_Advanced
	struct AActor* BeginSpawningActorFromClass(struct UObject* WorldContextObject, AActor* ActorClass, struct FTransform& SpawnTransform, bool bNoCollisionFail, struct AActor* Owner); // Function Engine.GameplayStatics.BeginSpawningActorFromClass
	struct AActor* BeginSpawningActorFromBlueprint(struct UObject* WorldContextObject, struct UBlueprint* Blueprint, struct FTransform& SpawnTransform, bool bNoCollisionFail); // Function Engine.GameplayStatics.BeginSpawningActorFromBlueprint
	struct AActor* BeginDeferredActorSpawnFromClass(struct UObject* WorldContextObject, AActor* ActorClass, struct FTransform& SpawnTransform, enum class ESpawnActorCollisionHandlingMethod CollisionHandlingOverride, struct AActor* Owner); // Function Engine.GameplayStatics.BeginDeferredActorSpawnFromClass
	bool AreSubtitlesEnabled(); // Function Engine.GameplayStatics.AreSubtitlesEnabled
	bool AreAnyListenersWithinRange(struct UObject* WorldContextObject, struct FVector& Location, float MaximumRange); // Function Engine.GameplayStatics.AreAnyListenersWithinRange
	bool ApplyRadialDamageWithFalloff(struct UObject* WorldContextObject, float BaseDamage, float MinimumDamage, struct FVector& Origin, float DamageInnerRadius, float DamageOuterRadius, float DamageFalloff, UDamageType* DamageTypeClass, struct TArray<struct AActor*>& IgnoreActors, struct AActor* DamageCauser, struct AController* InstigatedByController, enum class ECollisionChannel DamagePreventionChannel); // Function Engine.GameplayStatics.ApplyRadialDamageWithFalloff
	bool ApplyRadialDamage(struct UObject* WorldContextObject, float BaseDamage, struct FVector& Origin, float DamageRadius, UDamageType* DamageTypeClass, struct TArray<struct AActor*>& IgnoreActors, struct AActor* DamageCauser, struct AController* InstigatedByController, bool bDoFullDamage, enum class ECollisionChannel DamagePreventionChannel); // Function Engine.GameplayStatics.ApplyRadialDamage
	float ApplyPointDamage(struct AActor* DamagedActor, float BaseDamage, struct FVector& HitFromDirection, struct FHitResult& HitInfo, struct AController* EventInstigator, struct AActor* DamageCauser, UDamageType* DamageTypeClass); // Function Engine.GameplayStatics.ApplyPointDamage
	float ApplyDamage(struct AActor* DamagedActor, float BaseDamage, struct AController* EventInstigator, struct AActor* DamageCauser, UDamageType* DamageTypeClass); // Function Engine.GameplayStatics.ApplyDamage
	void AnnounceAccessibleString(struct FString AnnouncementString); // Function Engine.GameplayStatics.AnnounceAccessibleString
	void ActivateReverbEffect(struct UObject* WorldContextObject, struct UReverbEffect* ReverbEffect, struct FName TagName, float Priority, float Volume, float FadeTime); // Function Engine.GameplayStatics.ActivateReverbEffect
}; 
 
 


//Class Engine.CurveEdPresetCurve Size 40
// Inherited 40 bytes 
class UCurveEdPresetCurve : public UObject
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleAccelerationBase Size 56
// Inherited 48 bytes 
class UParticleModuleAccelerationBase : public UParticleModule
{

 public: 
	char bAlwaysInWorldSpace : 1;  // Offset: 48 Size: 1
	char pad_48_1 : 7;  // Offset: 48 Size: 1
	char pad_49[8];  // Offset: 49 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModulePivotOffset Size 56
// Inherited 48 bytes 
class UParticleModulePivotOffset : public UParticleModuleLocationBase
{

 public: 
	struct FVector2D PivotOffset;  // Offset: 48 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionBumpOffset Size 136
// Inherited 64 bytes 
class UMaterialExpressionBumpOffset : public UMaterialExpression
{

 public: 
	struct FExpressionInput Coordinate;  // Offset: 64 Size: 20
	struct FExpressionInput Height;  // Offset: 84 Size: 20
	struct FExpressionInput HeightRatioInput;  // Offset: 104 Size: 20
	float HeightRatio;  // Offset: 124 Size: 4
	float ReferencePlane;  // Offset: 128 Size: 4
	uint32_t ConstCoordinate;  // Offset: 132 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.Interface_PreviewMeshProvider Size 40
// Inherited 40 bytes 
class UInterface_PreviewMeshProvider : public UInterface
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionParticlePositionWS Size 64
// Inherited 64 bytes 
class UMaterialExpressionParticlePositionWS : public UMaterialExpression
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.KismetTextLibrary Size 40
// Inherited 40 bytes 
class UKismetTextLibrary : public UBlueprintFunctionLibrary
{

 public: 



 // Functions 
 public:
	struct FText TextTrimTrailing(struct FText& InText); // Function Engine.KismetTextLibrary.TextTrimTrailing
	struct FText TextTrimPrecedingAndTrailing(struct FText& InText); // Function Engine.KismetTextLibrary.TextTrimPrecedingAndTrailing
	struct FText TextTrimPreceding(struct FText& InText); // Function Engine.KismetTextLibrary.TextTrimPreceding
	struct FText TextToUpper(struct FText& InText); // Function Engine.KismetTextLibrary.TextToUpper
	struct FText TextToLower(struct FText& InText); // Function Engine.KismetTextLibrary.TextToLower
	bool TextIsTransient(struct FText& InText); // Function Engine.KismetTextLibrary.TextIsTransient
	bool TextIsFromStringTable(struct FText& Text); // Function Engine.KismetTextLibrary.TextIsFromStringTable
	bool TextIsEmpty(struct FText& InText); // Function Engine.KismetTextLibrary.TextIsEmpty
	bool TextIsCultureInvariant(struct FText& InText); // Function Engine.KismetTextLibrary.TextIsCultureInvariant
	struct FText TextFromStringTable(struct FName TableId, struct FString Key); // Function Engine.KismetTextLibrary.TextFromStringTable
	bool StringTableIdAndKeyFromText(struct FText Text, struct FName& OutTableId, struct FString& OutKey); // Function Engine.KismetTextLibrary.StringTableIdAndKeyFromText
	struct FText PolyglotDataToText(struct FPolyglotTextData& PolyglotData); // Function Engine.KismetTextLibrary.PolyglotDataToText
	bool NotEqual_TextText(struct FText& A, struct FText& B); // Function Engine.KismetTextLibrary.NotEqual_TextText
	bool NotEqual_IgnoreCase_TextText(struct FText& A, struct FText& B); // Function Engine.KismetTextLibrary.NotEqual_IgnoreCase_TextText
	void IsPolyglotDataValid(struct FPolyglotTextData& PolyglotData, bool& IsValid, struct FText& ErrorMessage); // Function Engine.KismetTextLibrary.IsPolyglotDataValid
	struct FText GetEmptyText(); // Function Engine.KismetTextLibrary.GetEmptyText
	struct FText Format(struct FText InPattern, struct TArray<struct FFormatArgumentData> InArgs); // Function Engine.KismetTextLibrary.Format
	bool FindTextInLocalizationTable(struct FString Namespace, struct FString Key, struct FText& OutText); // Function Engine.KismetTextLibrary.FindTextInLocalizationTable
	bool EqualEqual_TextText(struct FText& A, struct FText& B); // Function Engine.KismetTextLibrary.EqualEqual_TextText
	bool EqualEqual_IgnoreCase_TextText(struct FText& A, struct FText& B); // Function Engine.KismetTextLibrary.EqualEqual_IgnoreCase_TextText
	struct FText Conv_VectorToText(struct FVector InVec); // Function Engine.KismetTextLibrary.Conv_VectorToText
	struct FText Conv_Vector2dToText(struct FVector2D InVec); // Function Engine.KismetTextLibrary.Conv_Vector2dToText
	struct FText Conv_TransformToText(struct FTransform& InTrans); // Function Engine.KismetTextLibrary.Conv_TransformToText
	struct FString Conv_TextToString(struct FText& InText); // Function Engine.KismetTextLibrary.Conv_TextToString
	struct FText Conv_StringToText(struct FString inString); // Function Engine.KismetTextLibrary.Conv_StringToText
	struct FText Conv_RotatorToText(struct FRotator InRot); // Function Engine.KismetTextLibrary.Conv_RotatorToText
	struct FText Conv_ObjectToText(struct UObject* InObj); // Function Engine.KismetTextLibrary.Conv_ObjectToText
	struct FText Conv_NameToText(struct FName InName); // Function Engine.KismetTextLibrary.Conv_NameToText
	struct FText Conv_IntToText(int32_t Value, bool bAlwaysSign, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits); // Function Engine.KismetTextLibrary.Conv_IntToText
	struct FText Conv_Int64ToText(int64_t Value, bool bAlwaysSign, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits); // Function Engine.KismetTextLibrary.Conv_Int64ToText
	struct FText Conv_FloatToText(float Value, enum class ERoundingMode RoundingMode, bool bAlwaysSign, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits, int32_t MinimumFractionalDigits, int32_t MaximumFractionalDigits); // Function Engine.KismetTextLibrary.Conv_FloatToText
	struct FText Conv_ColorToText(struct FLinearColor InColor); // Function Engine.KismetTextLibrary.Conv_ColorToText
	struct FText Conv_ByteToText(char Value); // Function Engine.KismetTextLibrary.Conv_ByteToText
	struct FText Conv_BoolToText(bool InBool); // Function Engine.KismetTextLibrary.Conv_BoolToText
	struct FText AsTimeZoneTime_DateTime(struct FDateTime& InDateTime, struct FString InTimeZone); // Function Engine.KismetTextLibrary.AsTimeZoneTime_DateTime
	struct FText AsTimeZoneDateTime_DateTime(struct FDateTime& InDateTime, struct FString InTimeZone); // Function Engine.KismetTextLibrary.AsTimeZoneDateTime_DateTime
	struct FText AsTimeZoneDate_DateTime(struct FDateTime& InDateTime, struct FString InTimeZone); // Function Engine.KismetTextLibrary.AsTimeZoneDate_DateTime
	struct FText AsTimespan_Timespan(struct FTimespan& InTimespan); // Function Engine.KismetTextLibrary.AsTimespan_Timespan
	struct FText AsTime_DateTime(struct FDateTime& In); // Function Engine.KismetTextLibrary.AsTime_DateTime
	struct FText AsPercent_Float(float Value, enum class ERoundingMode RoundingMode, bool bAlwaysSign, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits, int32_t MinimumFractionalDigits, int32_t MaximumFractionalDigits); // Function Engine.KismetTextLibrary.AsPercent_Float
	struct FText AsDateTime_DateTime(struct FDateTime& In); // Function Engine.KismetTextLibrary.AsDateTime_DateTime
	struct FText AsDate_DateTime(struct FDateTime& InDateTime); // Function Engine.KismetTextLibrary.AsDate_DateTime
	struct FText AsCurrencyBase(int32_t BaseValue, struct FString CurrencyCode); // Function Engine.KismetTextLibrary.AsCurrencyBase
	struct FText AsCurrency_Integer(int32_t Value, enum class ERoundingMode RoundingMode, bool bAlwaysSign, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits, int32_t MinimumFractionalDigits, int32_t MaximumFractionalDigits, struct FString CurrencyCode); // Function Engine.KismetTextLibrary.AsCurrency_Integer
	struct FText AsCurrency_Float(float Value, enum class ERoundingMode RoundingMode, bool bAlwaysSign, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits, int32_t MinimumFractionalDigits, int32_t MaximumFractionalDigits, struct FString CurrencyCode); // Function Engine.KismetTextLibrary.AsCurrency_Float
}; 
 
 


//Class Engine.MaterialExpressionTextureSampleParameter2DArray Size 128
// Inherited 128 bytes 
class UMaterialExpressionTextureSampleParameter2DArray : public UMaterialExpressionTextureSampleParameter
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleColor Size 176
// Inherited 48 bytes 
class UParticleModuleColor : public UParticleModuleColorBase
{

 public: 
	struct FRawDistributionVector StartColor;  // Offset: 48 Size: 72
	struct FRawDistributionFloat StartAlpha;  // Offset: 120 Size: 48
	char bClampAlpha : 1;  // Offset: 168 Size: 1
	char pad_168_1 : 7;  // Offset: 168 Size: 1
	char pad_169[8];  // Offset: 169 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.CurveFloat Size 184
// Inherited 48 bytes 
class UCurveFloat : public UCurveBase
{

 public: 
	struct FRichCurve FloatCurve;  // Offset: 48 Size: 128
	char pad_176_1 : 7;  // Offset: 176 Size: 1
	bool bIsEventCurve : 1;  // Offset: 176 Size: 1
	char pad_177[7];  // Offset: 177 Size: 7



 // Functions 
 public:
	float GetFloatValue(float InTime); // Function Engine.CurveFloat.GetFloatValue
}; 
 
 


//Class Engine.MaterialExpressionWrapOutput Size 88
// Inherited 64 bytes 
class UMaterialExpressionWrapOutput : public UMaterialExpressionCustomOutput
{

 public: 
	struct FExpressionInput Input;  // Offset: 64 Size: 20
	char pad_84[4];  // Offset: 84 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.KillZVolume Size 616
// Inherited 616 bytes 
class AKillZVolume : public APhysicsVolume
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.CurveLinearColor Size 592
// Inherited 48 bytes 
class UCurveLinearColor : public UCurveBase
{

 public: 
	struct FRichCurve FloatCurves[4];  // Offset: 48 Size: 512
	float AdjustHue;  // Offset: 560 Size: 4
	float AdjustSaturation;  // Offset: 564 Size: 4
	float AdjustBrightness;  // Offset: 568 Size: 4
	float AdjustBrightnessCurve;  // Offset: 572 Size: 4
	float AdjustVibrance;  // Offset: 576 Size: 4
	float AdjustMinAlpha;  // Offset: 580 Size: 4
	float AdjustMaxAlpha;  // Offset: 584 Size: 4
	char pad_588[4];  // Offset: 588 Size: 4



 // Functions 
 public:
	struct FLinearColor GetUnadjustedLinearColorValue(float InTime); // Function Engine.CurveLinearColor.GetUnadjustedLinearColorValue
	struct FLinearColor GetLinearColorValue(float InTime); // Function Engine.CurveLinearColor.GetLinearColorValue
	struct FLinearColor GetClampedLinearColorValue(float InTime); // Function Engine.CurveLinearColor.GetClampedLinearColorValue
}; 
 
 


//Class Engine.MaterialExpressionDivide Size 112
// Inherited 64 bytes 
class UMaterialExpressionDivide : public UMaterialExpression
{

 public: 
	struct FExpressionInput A;  // Offset: 64 Size: 20
	struct FExpressionInput B;  // Offset: 84 Size: 20
	float ConstA;  // Offset: 104 Size: 4
	float ConstB;  // Offset: 108 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.CurveLinearColorAtlas Size 448
// Inherited 416 bytes 
class UCurveLinearColorAtlas : public UTexture2D
{

 public: 
	uint32_t TextureSize;  // Offset: 416 Size: 4
	char bSquareResolution : 1;  // Offset: 420 Size: 1
	char pad_420_1 : 7;  // Offset: 420 Size: 1
	char pad_421[4];  // Offset: 421 Size: 4
	uint32_t TextureHeight;  // Offset: 424 Size: 4
	char pad_428[4];  // Offset: 428 Size: 4
	struct TArray<struct UCurveLinearColor*> GradientCurves;  // Offset: 432 Size: 16



 // Functions 
 public:
	bool GetCurvePosition(struct UCurveLinearColor* InCurve, float& position); // Function Engine.CurveLinearColorAtlas.GetCurvePosition
}; 
 
 


//Class Engine.CurveSourceInterface Size 40
// Inherited 40 bytes 
class UCurveSourceInterface : public UInterface
{

 public: 



 // Functions 
 public:
	float GetCurveValue(struct FName CurveName); // Function Engine.CurveSourceInterface.GetCurveValue
	void GetCurves(struct TArray<struct FNamedCurveValue>& OutValues); // Function Engine.CurveSourceInterface.GetCurves
	struct FName GetBindingName(); // Function Engine.CurveSourceInterface.GetBindingName
}; 
 
 


//Class Engine.DamageType Size 64
// Inherited 40 bytes 
class UDamageType : public UObject
{

 public: 
	char bCausedByWorld : 1;  // Offset: 40 Size: 1
	char bScaleMomentumByMass : 1;  // Offset: 40 Size: 1
	char bRadialDamageVelChange : 1;  // Offset: 40 Size: 1
	char pad_40_1 : 5;  // Offset: 40 Size: 1
	char pad_41[4];  // Offset: 41 Size: 4
	float DamageImpulse;  // Offset: 44 Size: 4
	float DestructibleImpulse;  // Offset: 48 Size: 4
	float DestructibleDamageSpreadScale;  // Offset: 52 Size: 4
	float DamageFalloff;  // Offset: 56 Size: 4
	char pad_60[4];  // Offset: 60 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleEventGenerator Size 64
// Inherited 48 bytes 
class UParticleModuleEventGenerator : public UParticleModuleEventBase
{

 public: 
	struct TArray<struct FParticleEvent_GenerateInfo> events;  // Offset: 48 Size: 16



 // Functions 
 public:
}; 
 
 


//Class Engine.DataDrivenCVarEngineSubsystem Size 64
// Inherited 48 bytes 
class UDataDrivenCVarEngineSubsystem : public UEngineSubsystem
{

 public: 
	struct FMulticastInlineDelegate OnDataDrivenCVarDelegate;  // Offset: 48 Size: 16



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionSceneDepthWithoutWater Size 104
// Inherited 64 bytes 
class UMaterialExpressionSceneDepthWithoutWater : public UMaterialExpression
{

 public: 
	enum class EMaterialSceneAttributeInputMode InputMode;  // Offset: 64 Size: 1
	char pad_65[3];  // Offset: 65 Size: 3
	struct FExpressionInput Input;  // Offset: 68 Size: 20
	struct FVector2D ConstInput;  // Offset: 88 Size: 8
	float FallbackDepth;  // Offset: 96 Size: 4
	char pad_100[4];  // Offset: 100 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.InterpTrackFloatAnimBPParam Size 176
// Inherited 144 bytes 
class UInterpTrackFloatAnimBPParam : public UInterpTrackFloatBase
{

 public: 
	UObject* AnimBlueprintClass;  // Offset: 144 Size: 8
	UAnimInstance* AnimClass;  // Offset: 152 Size: 8
	struct FName ParamName;  // Offset: 160 Size: 8
	char pad_168[8];  // Offset: 168 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.DataDrivenConsoleVariableSettings Size 112
// Inherited 56 bytes 
class UDataDrivenConsoleVariableSettings : public UDeveloperSettings
{

 public: 
	char pad_56[24];  // Offset: 56 Size: 24
	struct TArray<struct FDataDrivenConsoleVariable> CVarsArray;  // Offset: 80 Size: 16
	char pad_96[16];  // Offset: 96 Size: 16



 // Functions 
 public:
}; 
 
 


//Class Engine.DebugCameraController Size 1664
// Inherited 1408 bytes 
class ADebugCameraController : public APlayerController
{

 public: 
	char bShowSelectedInfo : 1;  // Offset: 1408 Size: 1
	char bIsFrozenRendering : 1;  // Offset: 1408 Size: 1
	char bIsOrbitingSelectedActor : 1;  // Offset: 1408 Size: 1
	char bOrbitPivotUseCenter : 1;  // Offset: 1408 Size: 1
	char bEnableBufferVisualization : 1;  // Offset: 1408 Size: 1
	char bEnableBufferVisualizationFullMode : 1;  // Offset: 1408 Size: 1
	char bIsBufferVisualizationInputSetup : 1;  // Offset: 1408 Size: 1
	char bLastDisplayEnabled : 1;  // Offset: 1408 Size: 1
	char pad_1409[7];  // Offset: 1409 Size: 7
	struct UDrawFrustumComponent* DrawFrustum;  // Offset: 1416 Size: 8
	struct AActor* SelectedActor;  // Offset: 1424 Size: 8
	struct UPrimitiveComponent* SelectedComponent;  // Offset: 1432 Size: 8
	struct FHitResult SelectedHitPoint;  // Offset: 1440 Size: 136
	struct APlayerController* OriginalControllerRef;  // Offset: 1576 Size: 8
	struct UPlayer* OriginalPlayer;  // Offset: 1584 Size: 8
	float SpeedScale;  // Offset: 1592 Size: 4
	float InitialMaxSpeed;  // Offset: 1596 Size: 4
	float InitialAccel;  // Offset: 1600 Size: 4
	float InitialDecel;  // Offset: 1604 Size: 4
	char pad_1608[56];  // Offset: 1608 Size: 56



 // Functions 
 public:
	void ToggleDisplay(); // Function Engine.DebugCameraController.ToggleDisplay
	void ShowDebugSelectedInfo(); // Function Engine.DebugCameraController.ShowDebugSelectedInfo
	void SetPawnMovementSpeedScale(float NewSpeedScale); // Function Engine.DebugCameraController.SetPawnMovementSpeedScale
	void ReceiveOnDeactivate(struct APlayerController* RestoredPC); // Function Engine.DebugCameraController.ReceiveOnDeactivate
	void ReceiveOnActorSelected(struct AActor* NewSelectedActor, struct FVector& SelectHitLocation, struct FVector& SelectHitNormal, struct FHitResult& Hit); // Function Engine.DebugCameraController.ReceiveOnActorSelected
	void ReceiveOnActivate(struct APlayerController* OriginalPC); // Function Engine.DebugCameraController.ReceiveOnActivate
	struct AActor* GetSelectedActor(); // Function Engine.DebugCameraController.GetSelectedActor
}; 
 
 


//Class Engine.DebugCameraControllerSettings Size 72
// Inherited 56 bytes 
class UDebugCameraControllerSettings : public UDeveloperSettings
{

 public: 
	struct TArray<struct FDebugCameraControllerSettingsViewModeIndex> CycleViewModes;  // Offset: 56 Size: 16



 // Functions 
 public:
}; 
 
 


//Class Engine.PhysicsVolume Size 616
// Inherited 600 bytes 
class APhysicsVolume : public AVolume
{

 public: 
	float TerminalVelocity;  // Offset: 600 Size: 4
	int32_t Priority;  // Offset: 604 Size: 4
	float FluidFriction;  // Offset: 608 Size: 4
	char bWaterVolume : 1;  // Offset: 612 Size: 1
	char bPhysicsOnContact : 1;  // Offset: 612 Size: 1
	char pad_612_1 : 6;  // Offset: 612 Size: 1
	char pad_613[4];  // Offset: 613 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.DemoNetDriver Size 4824
// Inherited 1888 bytes 
class UDemoNetDriver : public UNetDriver
{

 public: 
	char pad_1888[248];  // Offset: 1888 Size: 248
	struct TMap<struct FString, struct FRollbackNetStartupActorInfo> RollbackNetStartupActors;  // Offset: 2136 Size: 80
	char pad_2216[348];  // Offset: 2216 Size: 348
	float CheckpointSaveMaxMSPerFrame;  // Offset: 2564 Size: 4
	char pad_2568[32];  // Offset: 2568 Size: 32
	struct TArray<struct FMulticastRecordOptions> MulticastRecordOptions;  // Offset: 2600 Size: 16
	char pad_2616_1 : 7;  // Offset: 2616 Size: 1
	bool bIsLocalReplay : 1;  // Offset: 2616 Size: 1
	char pad_2617[7];  // Offset: 2617 Size: 7
	struct TArray<struct APlayerController*> SpectatorControllers;  // Offset: 2624 Size: 16
	char pad_2640[2184];  // Offset: 2640 Size: 2184



 // Functions 
 public:
}; 
 
 


//Class Engine.PendingNetGame Size 192
// Inherited 40 bytes 
class UPendingNetGame : public UObject
{

 public: 
	char pad_40[8];  // Offset: 40 Size: 8
	struct UNetDriver* NetDriver;  // Offset: 48 Size: 8
	struct UDemoNetDriver* DemoNetDriver;  // Offset: 56 Size: 8
	char pad_64[128];  // Offset: 64 Size: 128



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionTextureObjectParameter Size 128
// Inherited 128 bytes 
class UMaterialExpressionTextureObjectParameter : public UMaterialExpressionTextureSampleParameter
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionShadingModel Size 72
// Inherited 64 bytes 
class UMaterialExpressionShadingModel : public UMaterialExpression
{

 public: 
	enum class EMaterialShadingModel ShadingModel;  // Offset: 64 Size: 1
	char pad_65[7];  // Offset: 65 Size: 7



 // Functions 
 public:
}; 
 
 


//Class Engine.DemoPendingNetGame Size 192
// Inherited 192 bytes 
class UDemoPendingNetGame : public UPendingNetGame
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.TextureLODSettings Size 56
// Inherited 40 bytes 
class UTextureLODSettings : public UObject
{

 public: 
	struct TArray<struct FTextureLODGroup> TextureLODGroups;  // Offset: 40 Size: 16



 // Functions 
 public:
}; 
 
 


//Class Engine.SystemTimeTimecodeProvider Size 64
// Inherited 48 bytes 
class USystemTimeTimecodeProvider : public UTimecodeProvider
{

 public: 
	struct FFrameRate FrameRate;  // Offset: 48 Size: 8
	char pad_56_1 : 7;  // Offset: 56 Size: 1
	bool bGenerateFullFrame : 1;  // Offset: 56 Size: 1
	char pad_57_1 : 7;  // Offset: 57 Size: 1
	bool bUseHighPerformanceClock : 1;  // Offset: 57 Size: 1
	char pad_58[6];  // Offset: 58 Size: 6



 // Functions 
 public:
}; 
 
 


//Class Engine.DeviceProfile Size 168
// Inherited 56 bytes 
class UDeviceProfile : public UTextureLODSettings
{

 public: 
	struct FString DeviceType;  // Offset: 56 Size: 16
	struct FString BaseProfileName;  // Offset: 72 Size: 16
	struct UObject* Parent;  // Offset: 88 Size: 8
	char pad_96[40];  // Offset: 96 Size: 40
	struct TArray<struct FString> CVars;  // Offset: 136 Size: 16
	char pad_152[16];  // Offset: 152 Size: 16



 // Functions 
 public:
}; 
 
 


//Class Engine.DeviceProfileFragment Size 56
// Inherited 40 bytes 
class UDeviceProfileFragment : public UObject
{

 public: 
	char pad_40[16];  // Offset: 40 Size: 16



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionFrac Size 88
// Inherited 64 bytes 
class UMaterialExpressionFrac : public UMaterialExpression
{

 public: 
	struct FExpressionInput Input;  // Offset: 64 Size: 20
	char pad_84[4];  // Offset: 84 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.DeviceProfileManager Size 200
// Inherited 40 bytes 
class UDeviceProfileManager : public UObject
{

 public: 
	struct TArray<struct UObject*> Profiles;  // Offset: 40 Size: 16
	char pad_56[144];  // Offset: 56 Size: 144



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleLocationPrimitiveBase Size 176
// Inherited 48 bytes 
class UParticleModuleLocationPrimitiveBase : public UParticleModuleLocationBase
{

 public: 
	char Positive_X : 1;  // Offset: 48 Size: 1
	char Positive_Y : 1;  // Offset: 48 Size: 1
	char Positive_Z : 1;  // Offset: 48 Size: 1
	char Negative_X : 1;  // Offset: 48 Size: 1
	char Negative_Y : 1;  // Offset: 48 Size: 1
	char Negative_Z : 1;  // Offset: 48 Size: 1
	char SurfaceOnly : 1;  // Offset: 48 Size: 1
	char Velocity : 1;  // Offset: 48 Size: 1
	char pad_49[7];  // Offset: 49 Size: 7
	struct FRawDistributionFloat VelocityScale;  // Offset: 56 Size: 48
	struct FRawDistributionVector StartLocation;  // Offset: 104 Size: 72



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionTangentOutput Size 88
// Inherited 64 bytes 
class UMaterialExpressionTangentOutput : public UMaterialExpressionCustomOutput
{

 public: 
	struct FExpressionInput Input;  // Offset: 64 Size: 20
	char pad_84[4];  // Offset: 84 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.DistributionFloat Size 56
// Inherited 48 bytes 
class UDistributionFloat : public UDistribution
{

 public: 
	char bCanBeBaked : 1;  // Offset: 48 Size: 1
	char pad_48_1 : 1;  // Offset: 48 Size: 1
	char bBakedDataSuccesfully : 1;  // Offset: 48 Size: 1
	char pad_48_2 : 5;  // Offset: 48 Size: 1
	char pad_49[8];  // Offset: 49 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionSkyAtmosphereLightDirection Size 72
// Inherited 64 bytes 
class UMaterialExpressionSkyAtmosphereLightDirection : public UMaterialExpression
{

 public: 
	int32_t LightIndex;  // Offset: 64 Size: 4
	char pad_68[4];  // Offset: 68 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.DistributionFloatConstant Size 64
// Inherited 56 bytes 
class UDistributionFloatConstant : public UDistributionFloat
{

 public: 
	float Constant;  // Offset: 56 Size: 4
	char pad_60[4];  // Offset: 60 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleCollisionBase Size 48
// Inherited 48 bytes 
class UParticleModuleCollisionBase : public UParticleModule
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.DistributionFloatConstantCurve Size 80
// Inherited 56 bytes 
class UDistributionFloatConstantCurve : public UDistributionFloat
{

 public: 
	struct FInterpCurveFloat ConstantCurve;  // Offset: 56 Size: 24



 // Functions 
 public:
}; 
 
 


//Class Engine.DistributionFloatParameterBase Size 96
// Inherited 64 bytes 
class UDistributionFloatParameterBase : public UDistributionFloatConstant
{

 public: 
	struct FName ParameterName;  // Offset: 64 Size: 8
	float MinInput;  // Offset: 72 Size: 4
	float MaxInput;  // Offset: 76 Size: 4
	float MinOutput;  // Offset: 80 Size: 4
	float MaxOutput;  // Offset: 84 Size: 4
	enum class DistributionParamMode ParamMode;  // Offset: 88 Size: 1
	char pad_89[7];  // Offset: 89 Size: 7



 // Functions 
 public:
}; 
 
 


//Class Engine.DistributionFloatUniform Size 64
// Inherited 56 bytes 
class UDistributionFloatUniform : public UDistributionFloat
{

 public: 
	float Min;  // Offset: 56 Size: 4
	float Max;  // Offset: 60 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.LocalMessage Size 40
// Inherited 40 bytes 
class ULocalMessage : public UObject
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.DistributionVector Size 56
// Inherited 48 bytes 
class UDistributionVector : public UDistribution
{

 public: 
	char bCanBeBaked : 1;  // Offset: 48 Size: 1
	char bIsDirty : 1;  // Offset: 48 Size: 1
	char bBakedDataSuccesfully : 1;  // Offset: 48 Size: 1
	char pad_48_1 : 5;  // Offset: 48 Size: 1
	char pad_49[8];  // Offset: 49 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionMobileShadowBlendOutput Size 88
// Inherited 64 bytes 
class UMaterialExpressionMobileShadowBlendOutput : public UMaterialExpressionCustomOutput
{

 public: 
	struct FExpressionInput Input;  // Offset: 64 Size: 20
	char pad_84[4];  // Offset: 84 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.DistributionVectorConstant Size 80
// Inherited 56 bytes 
class UDistributionVectorConstant : public UDistributionVector
{

 public: 
	struct FVector Constant;  // Offset: 56 Size: 12
	char bLockAxes : 1;  // Offset: 68 Size: 1
	char pad_68_1 : 7;  // Offset: 68 Size: 1
	char pad_69[4];  // Offset: 69 Size: 4
	enum class EDistributionVectorLockFlags LockedAxes;  // Offset: 72 Size: 1
	char pad_73[7];  // Offset: 73 Size: 7



 // Functions 
 public:
}; 
 
 


//Class Engine.DistributionVectorConstantCurve Size 88
// Inherited 56 bytes 
class UDistributionVectorConstantCurve : public UDistributionVector
{

 public: 
	struct FInterpCurveVector ConstantCurve;  // Offset: 56 Size: 24
	char bLockAxes : 1;  // Offset: 80 Size: 1
	char pad_80_1 : 7;  // Offset: 80 Size: 1
	char pad_81[4];  // Offset: 81 Size: 4
	enum class EDistributionVectorLockFlags LockedAxes;  // Offset: 84 Size: 1
	char pad_85[3];  // Offset: 85 Size: 3



 // Functions 
 public:
}; 
 
 


//Class Engine.DistributionVectorParameterBase Size 144
// Inherited 80 bytes 
class UDistributionVectorParameterBase : public UDistributionVectorConstant
{

 public: 
	struct FName ParameterName;  // Offset: 80 Size: 8
	struct FVector MinInput;  // Offset: 88 Size: 12
	struct FVector MaxInput;  // Offset: 100 Size: 12
	struct FVector MinOutput;  // Offset: 112 Size: 12
	struct FVector MaxOutput;  // Offset: 124 Size: 12
	enum class DistributionParamMode ParamModes[3];  // Offset: 136 Size: 3
	char pad_139[5];  // Offset: 139 Size: 5



 // Functions 
 public:
}; 
 
 


//Class Engine.InterpTrackInstLinearColorProp Size 104
// Inherited 80 bytes 
class UInterpTrackInstLinearColorProp : public UInterpTrackInstProperty
{

 public: 
	char pad_80[8];  // Offset: 80 Size: 8
	struct FLinearColor ResetColor;  // Offset: 88 Size: 16



 // Functions 
 public:
}; 
 
 


//Class Engine.DistributionVectorUniformCurve Size 96
// Inherited 56 bytes 
class UDistributionVectorUniformCurve : public UDistributionVector
{

 public: 
	struct FInterpCurveTwoVectors ConstantCurve;  // Offset: 56 Size: 24
	char bLockAxes1 : 1;  // Offset: 80 Size: 1
	char bLockAxes2 : 1;  // Offset: 80 Size: 1
	char pad_80_1 : 6;  // Offset: 80 Size: 1
	char pad_81[4];  // Offset: 81 Size: 4
	enum class EDistributionVectorLockFlags LockedAxes[2];  // Offset: 84 Size: 2
	enum class EDistributionVectorMirrorFlags MirrorFlags[3];  // Offset: 86 Size: 3
	char pad_89[3];  // Offset: 89 Size: 3
	char bUseExtremes : 1;  // Offset: 92 Size: 1
	char pad_92_1 : 7;  // Offset: 92 Size: 1
	char pad_93[4];  // Offset: 93 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionCameraPositionWS Size 64
// Inherited 64 bytes 
class UMaterialExpressionCameraPositionWS : public UMaterialExpression
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.Layer Size 72
// Inherited 40 bytes 
class ULayer : public UObject
{

 public: 
	struct FName LayerName;  // Offset: 40 Size: 8
	char bIsVisible : 1;  // Offset: 48 Size: 1
	char pad_48_1 : 7;  // Offset: 48 Size: 1
	char pad_49[8];  // Offset: 49 Size: 8
	struct TArray<struct FLayerActorStats> ActorStats;  // Offset: 56 Size: 16



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionObjectBounds Size 64
// Inherited 64 bytes 
class UMaterialExpressionObjectBounds : public UMaterialExpression
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.SphereComponent Size 1168
// Inherited 1168 bytes 
class USphereComponent : public UShapeComponent
{

 public: 
	float SphereRadius;  // Offset: 1160 Size: 4



 // Functions 
 public:
	void SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps); // Function Engine.SphereComponent.SetSphereRadius
	float GetUnscaledSphereRadius(); // Function Engine.SphereComponent.GetUnscaledSphereRadius
	float GetShapeScale(); // Function Engine.SphereComponent.GetShapeScale
	float GetScaledSphereRadius(); // Function Engine.SphereComponent.GetScaledSphereRadius
}; 
 
 


//Class Engine.InterpTrackVectorBase Size 144
// Inherited 112 bytes 
class UInterpTrackVectorBase : public UInterpTrack
{

 public: 
	struct FInterpCurveVector VectorTrack;  // Offset: 112 Size: 24
	float CurveTension;  // Offset: 136 Size: 4
	char pad_140[4];  // Offset: 140 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.DrawSphereComponent Size 1168
// Inherited 1168 bytes 
class UDrawSphereComponent : public USphereComponent
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.EdGraph Size 96
// Inherited 40 bytes 
class UEdGraph : public UObject
{

 public: 
	UEdGraphSchema* Schema;  // Offset: 40 Size: 8
	struct TArray<struct UEdGraphNode*> nodes;  // Offset: 48 Size: 16
	char bEditable : 1;  // Offset: 64 Size: 1
	char bAllowDeletion : 1;  // Offset: 64 Size: 1
	char bAllowRenaming : 1;  // Offset: 64 Size: 1
	char pad_64_1 : 5;  // Offset: 64 Size: 1
	char pad_65[32];  // Offset: 65 Size: 32



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionInverseLinearInterpolate Size 144
// Inherited 64 bytes 
class UMaterialExpressionInverseLinearInterpolate : public UMaterialExpression
{

 public: 
	struct FExpressionInput A;  // Offset: 64 Size: 20
	struct FExpressionInput B;  // Offset: 84 Size: 20
	struct FExpressionInput Value;  // Offset: 104 Size: 20
	float ConstA;  // Offset: 124 Size: 4
	float ConstB;  // Offset: 128 Size: 4
	float ConstValue;  // Offset: 132 Size: 4
	char pad_136_1 : 7;  // Offset: 136 Size: 1
	bool bClampResult : 1;  // Offset: 136 Size: 1
	char pad_137[7];  // Offset: 137 Size: 7



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleParameterDynamic Size 72
// Inherited 48 bytes 
class UParticleModuleParameterDynamic : public UParticleModuleParameterBase
{

 public: 
	struct TArray<struct FEmitterDynamicParameter> DynamicParams;  // Offset: 48 Size: 16
	int32_t UpdateFlags;  // Offset: 64 Size: 4
	char bUsesVelocity : 1;  // Offset: 68 Size: 1
	char pad_68_1 : 7;  // Offset: 68 Size: 1
	char pad_69[4];  // Offset: 69 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.MatineeAnimInterface Size 40
// Inherited 40 bytes 
class UMatineeAnimInterface : public UInterface
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.LightMapVirtualTexture Size 40
// Inherited 40 bytes 
class ULightMapVirtualTexture : public UVirtualTexture
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.GraphNodeContextMenuContext Size 80
// Inherited 40 bytes 
class UGraphNodeContextMenuContext : public UObject
{

 public: 
	struct UBlueprint* Blueprint;  // Offset: 40 Size: 8
	struct UEdGraph* Graph;  // Offset: 48 Size: 8
	struct UEdGraphNode* Node;  // Offset: 56 Size: 8
	char pad_64[8];  // Offset: 64 Size: 8
	char pad_72_1 : 7;  // Offset: 72 Size: 1
	bool bIsDebugging : 1;  // Offset: 72 Size: 1
	char pad_73[7];  // Offset: 73 Size: 7



 // Functions 
 public:
}; 
 
 


//Class Engine.EdGraphNode Size 152
// Inherited 40 bytes 
class UEdGraphNode : public UObject
{

 public: 
	char pad_40[16];  // Offset: 40 Size: 16
	struct TArray<struct UEdGraphPin_Deprecated*> DeprecatedPins;  // Offset: 56 Size: 16
	int32_t NodePosX;  // Offset: 72 Size: 4
	int32_t NodePosY;  // Offset: 76 Size: 4
	int32_t NodeWidth;  // Offset: 80 Size: 4
	int32_t NodeHeight;  // Offset: 84 Size: 4
	enum class ENodeAdvancedPins AdvancedPinDisplay;  // Offset: 88 Size: 1
	enum class ENodeEnabledState EnabledState;  // Offset: 89 Size: 1
	char pad_90[1];  // Offset: 90 Size: 1
	char pad_91_1 : 1;  // Offset: 91 Size: 1
	char bDisplayAsDisabled : 1;  // Offset: 91 Size: 1
	char bUserSetEnabledState : 1;  // Offset: 91 Size: 1
	char pad_91_2 : 1;  // Offset: 91 Size: 1
	char bIsNodeEnabled : 1;  // Offset: 91 Size: 1
	char pad_91_3 : 1;  // Offset: 91 Size: 1
	char bHasCompilerMessage : 1;  // Offset: 91 Size: 1
	char pad_91_4 : 1;  // Offset: 91 Size: 1
	char pad_92[5];  // Offset: 92 Size: 5
	struct FString NodeComment;  // Offset: 96 Size: 16
	int32_t ErrorType;  // Offset: 112 Size: 4
	char pad_116[4];  // Offset: 116 Size: 4
	struct FString ErrorMsg;  // Offset: 120 Size: 16
	struct FGuid NodeGuid;  // Offset: 136 Size: 16



 // Functions 
 public:
}; 
 
 


//Class Engine.EdGraphPin_Deprecated Size 280
// Inherited 40 bytes 
class UEdGraphPin_Deprecated : public UObject
{

 public: 
	struct FString PinName;  // Offset: 40 Size: 16
	struct FString PinToolTip;  // Offset: 56 Size: 16
	enum class EEdGraphPinDirection Direction;  // Offset: 72 Size: 1
	char pad_73[7];  // Offset: 73 Size: 7
	struct FEdGraphPinType PinType;  // Offset: 80 Size: 88
	struct FString DefaultValue;  // Offset: 168 Size: 16
	struct FString AutogeneratedDefaultValue;  // Offset: 184 Size: 16
	struct UObject* DefaultObject;  // Offset: 200 Size: 8
	struct FText DefaultTextValue;  // Offset: 208 Size: 24
	struct TArray<struct UEdGraphPin_Deprecated*> LinkedTo;  // Offset: 232 Size: 16
	struct TArray<struct UEdGraphPin_Deprecated*> SubPins;  // Offset: 248 Size: 16
	struct UEdGraphPin_Deprecated* ParentPin;  // Offset: 264 Size: 8
	struct UEdGraphPin_Deprecated* ReferencePassThroughConnection;  // Offset: 272 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.PlayerStart Size 592
// Inherited 584 bytes 
class APlayerStart : public ANavigationObjectBase
{

 public: 
	struct FName PlayerStartTag;  // Offset: 584 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.Emitter Size 624
// Inherited 544 bytes 
class AEmitter : public AActor
{

 public: 
	struct UParticleSystemComponent* ParticleSystemComponent;  // Offset: 544 Size: 8
	char bDestroyOnSystemFinish : 1;  // Offset: 552 Size: 1
	char bPostUpdateTickGroup : 1;  // Offset: 552 Size: 1
	char bCurrentlyActive : 1;  // Offset: 552 Size: 1
	char pad_552_1 : 5;  // Offset: 552 Size: 1
	char pad_553[8];  // Offset: 553 Size: 8
	struct FMulticastInlineDelegate OnParticleSpawn;  // Offset: 560 Size: 16
	struct FMulticastInlineDelegate OnParticleBurst;  // Offset: 576 Size: 16
	struct FMulticastInlineDelegate OnParticleDeath;  // Offset: 592 Size: 16
	struct FMulticastInlineDelegate OnParticleCollide;  // Offset: 608 Size: 16



 // Functions 
 public:
	void ToggleActive(); // Function Engine.Emitter.ToggleActive
	void SetVectorParameter(struct FName ParameterName, struct FVector Param); // Function Engine.Emitter.SetVectorParameter
	void SetTemplate(struct UParticleSystem* NewTemplate); // Function Engine.Emitter.SetTemplate
	void SetMaterialParameter(struct FName ParameterName, struct UMaterialInterface* Param); // Function Engine.Emitter.SetMaterialParameter
	void SetFloatParameter(struct FName ParameterName, float Param); // Function Engine.Emitter.SetFloatParameter
	void SetColorParameter(struct FName ParameterName, struct FLinearColor Param); // Function Engine.Emitter.SetColorParameter
	void SetActorParameter(struct FName ParameterName, struct AActor* Param); // Function Engine.Emitter.SetActorParameter
	void OnRep_bCurrentlyActive(); // Function Engine.Emitter.OnRep_bCurrentlyActive
	void OnParticleSystemFinished(struct UParticleSystemComponent* FinishedComponent); // Function Engine.Emitter.OnParticleSystemFinished
	bool IsActive(); // Function Engine.Emitter.IsActive
	void Deactivate(); // Function Engine.Emitter.Deactivate
	void Activate(); // Function Engine.Emitter.Activate
}; 
 
 


//Class Engine.IntSerialization Size 80
// Inherited 40 bytes 
class UIntSerialization : public UObject
{

 public: 
	uint16_t UnsignedInt16Variable;  // Offset: 40 Size: 2
	char pad_42[2];  // Offset: 42 Size: 2
	uint32_t UnsignedInt32Variable;  // Offset: 44 Size: 4
	uint64_t UnsignedInt64Variable;  // Offset: 48 Size: 8
	int8_t SignedInt8Variable;  // Offset: 56 Size: 1
	char pad_57[1];  // Offset: 57 Size: 1
	int16_t SignedInt16Variable;  // Offset: 58 Size: 2
	char pad_60[4];  // Offset: 60 Size: 4
	int64_t SignedInt64Variable;  // Offset: 64 Size: 8
	char UnsignedInt8Variable;  // Offset: 72 Size: 1
	char pad_73[3];  // Offset: 73 Size: 3
	int32_t SignedInt32Variable;  // Offset: 76 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.ViewModeUtils Size 40
// Inherited 40 bytes 
class UViewModeUtils : public UObject
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.SceneCaptureComponent2D Size 2432
// Inherited 720 bytes 
class USceneCaptureComponent2D : public USceneCaptureComponent
{

 public: 
	enum class ECameraProjectionMode ProjectionType;  // Offset: 712 Size: 1
	float FOVAngle;  // Offset: 716 Size: 4
	float OrthoWidth;  // Offset: 720 Size: 4
	struct UTextureRenderTarget2D* TextureTarget;  // Offset: 728 Size: 8
	enum class ESceneCaptureCompositeMode CompositeMode;  // Offset: 736 Size: 1
	char pad_738[14];  // Offset: 738 Size: 14
	struct FPostProcessSettings PostProcessSettings;  // Offset: 752 Size: 1488
	float PostProcessBlendWeight;  // Offset: 2240 Size: 4
	char bOverride_CustomNearClippingPlane : 1;  // Offset: 2244 Size: 1
	char pad_2244_1 : 7;  // Offset: 2244 Size: 1
	char pad_2245[4];  // Offset: 2245 Size: 4
	float CustomNearClippingPlane;  // Offset: 2248 Size: 4
	char pad_2252_1 : 7;  // Offset: 2252 Size: 1
	bool bUseCustomProjectionMatrix : 1;  // Offset: 2252 Size: 1
	char pad_2253[3];  // Offset: 2253 Size: 3
	struct FMatrix CustomProjectionMatrix;  // Offset: 2256 Size: 64
	char pad_2320_1 : 7;  // Offset: 2320 Size: 1
	bool bEnableClipPlane : 1;  // Offset: 2320 Size: 1
	char pad_2321[3];  // Offset: 2321 Size: 3
	struct FVector ClipPlaneBase;  // Offset: 2324 Size: 12
	struct FVector ClipPlaneNormal;  // Offset: 2336 Size: 12
	float UpdateFrame;  // Offset: 2348 Size: 4
	enum class EDetailMode RenderDetailMode;  // Offset: 2352 Size: 1
	char pad_2353[3];  // Offset: 2353 Size: 3
	int32_t RenderMirrorDetailLevel;  // Offset: 2356 Size: 4
	char pad_2360_1 : 7;  // Offset: 2360 Size: 1
	bool bUseCustomAA : 1;  // Offset: 2360 Size: 1
	enum class EAntiAliasingMethod CustomAAMethod;  // Offset: 2361 Size: 1
	char pad_2362[2];  // Offset: 2362 Size: 2
	int32_t CustomAAQuality;  // Offset: 2364 Size: 4
	char pad_2368_1 : 7;  // Offset: 2368 Size: 1
	bool bUseFXAAGreenAsLuma : 1;  // Offset: 2368 Size: 1
	char pad_2369[3];  // Offset: 2369 Size: 3
	char bCameraCutThisFrame : 1;  // Offset: 2372 Size: 1
	char bConsiderUnrenderedOpaquePixelAsFullyTranslucent : 1;  // Offset: 2372 Size: 1
	char pad_2372_1 : 6;  // Offset: 2372 Size: 1
	char pad_2373[4];  // Offset: 2373 Size: 4
	int32_t MaxCascadeDynamicShadows;  // Offset: 2376 Size: 4
	int32_t MaxCascadeStaticShadows;  // Offset: 2380 Size: 4
	float StaticViewDistanceScale;  // Offset: 2384 Size: 4
	float MovableViewDistanceScale;  // Offset: 2388 Size: 4
	char pad_2392_1 : 7;  // Offset: 2392 Size: 1
	bool bIsMirror : 1;  // Offset: 2392 Size: 1
	char pad_2393_1 : 7;  // Offset: 2393 Size: 1
	bool bDisableFlipCopyGLES : 1;  // Offset: 2393 Size: 1
	char pad_2394_1 : 7;  // Offset: 2394 Size: 1
	bool bMakeOpacityFinalColorLDR : 1;  // Offset: 2394 Size: 1
	char pad_2395_1 : 7;  // Offset: 2395 Size: 1
	bool bTrimEdgeLDRColor : 1;  // Offset: 2395 Size: 1
	char pad_2396_1 : 7;  // Offset: 2396 Size: 1
	bool bUseAlphaFXAA : 1;  // Offset: 2396 Size: 1
	char pad_2397_1 : 7;  // Offset: 2397 Size: 1
	bool bSkipBrightnessContrastAdjustment : 1;  // Offset: 2397 Size: 1
	char pad_2398[34];  // Offset: 2398 Size: 34



 // Functions 
 public:
	void SetRenderDetailMode(enum class EDetailMode eMode); // Function Engine.SceneCaptureComponent2D.SetRenderDetailMode
	void RemoveBlendable(struct TScriptInterface<IBlendableInterface> InBlendableObject); // Function Engine.SceneCaptureComponent2D.RemoveBlendable
	void CaptureScene(); // Function Engine.SceneCaptureComponent2D.CaptureScene
	void AddOrUpdateBlendable(struct TScriptInterface<IBlendableInterface> InBlendableObject, float InWeight); // Function Engine.SceneCaptureComponent2D.AddOrUpdateBlendable
}; 
 
 


//Class Engine.EngineHandlerComponentFactory Size 40
// Inherited 40 bytes 
class UEngineHandlerComponentFactory : public UHandlerComponentFactory
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.PrecomputedVisibilityOverrideVolume Size 648
// Inherited 600 bytes 
class APrecomputedVisibilityOverrideVolume : public AVolume
{

 public: 
	struct TArray<struct AActor*> OverrideVisibleActors;  // Offset: 600 Size: 16
	struct TArray<struct AActor*> OverrideInvisibleActors;  // Offset: 616 Size: 16
	struct TArray<struct FName> OverrideInvisibleLevels;  // Offset: 632 Size: 16



 // Functions 
 public:
}; 
 
 


//Class Engine.EngineMessage Size 168
// Inherited 40 bytes 
class UEngineMessage : public ULocalMessage
{

 public: 
	struct FString FailedPlaceMessage;  // Offset: 40 Size: 16
	struct FString MaxedOutMessage;  // Offset: 56 Size: 16
	struct FString EnteredMessage;  // Offset: 72 Size: 16
	struct FString LeftMessage;  // Offset: 88 Size: 16
	struct FString GlobalNameChange;  // Offset: 104 Size: 16
	struct FString SpecEnteredMessage;  // Offset: 120 Size: 16
	struct FString NewPlayerMessage;  // Offset: 136 Size: 16
	struct FString NewSpecMessage;  // Offset: 152 Size: 16



 // Functions 
 public:
}; 
 
 


//Class Engine.InterpTrackColorProp Size 152
// Inherited 144 bytes 
class UInterpTrackColorProp : public UInterpTrackVectorBase
{

 public: 
	struct FName PropertyName;  // Offset: 144 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.EngineTypes Size 40
// Inherited 40 bytes 
class UEngineTypes : public UObject
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.SoundNodeOscillator Size 112
// Inherited 72 bytes 
class USoundNodeOscillator : public USoundNode
{

 public: 
	char bModulateVolume : 1;  // Offset: 72 Size: 1
	char bModulatePitch : 1;  // Offset: 72 Size: 1
	char pad_72_1 : 6;  // Offset: 72 Size: 1
	char pad_73[4];  // Offset: 73 Size: 4
	float AmplitudeMin;  // Offset: 76 Size: 4
	float AmplitudeMax;  // Offset: 80 Size: 4
	float FrequencyMin;  // Offset: 84 Size: 4
	float FrequencyMax;  // Offset: 88 Size: 4
	float OffsetMin;  // Offset: 92 Size: 4
	float OffsetMax;  // Offset: 96 Size: 4
	float CenterMin;  // Offset: 100 Size: 4
	float CenterMax;  // Offset: 104 Size: 4
	char pad_108[4];  // Offset: 108 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.LevelStreamingAlwaysLoaded Size 336
// Inherited 336 bytes 
class ULevelStreamingAlwaysLoaded : public ULevelStreaming
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.Exporter Size 120
// Inherited 40 bytes 
class UExporter : public UObject
{

 public: 
	UObject* SupportedClass;  // Offset: 40 Size: 8
	struct UObject* ExportRootScope;  // Offset: 48 Size: 8
	struct TArray<struct FString> FormatExtension;  // Offset: 56 Size: 16
	struct TArray<struct FString> FormatDescription;  // Offset: 72 Size: 16
	int32_t PreferredFormatIndex;  // Offset: 88 Size: 4
	int32_t TextIndent;  // Offset: 92 Size: 4
	char bText : 1;  // Offset: 96 Size: 1
	char bSelectedOnly : 1;  // Offset: 96 Size: 1
	char bForceFileOperations : 1;  // Offset: 96 Size: 1
	char pad_96_1 : 5;  // Offset: 96 Size: 1
	char pad_97[8];  // Offset: 97 Size: 8
	struct UAssetExportTask* ExportTask;  // Offset: 104 Size: 8
	char pad_112[8];  // Offset: 112 Size: 8



 // Functions 
 public:
	bool ScriptRunAssetExportTask(struct UAssetExportTask* Task); // Function Engine.Exporter.ScriptRunAssetExportTask
	bool RunAssetExportTasks(struct TArray<struct UAssetExportTask*>& ExportTasks); // Function Engine.Exporter.RunAssetExportTasks
	bool RunAssetExportTask(struct UAssetExportTask* Task); // Function Engine.Exporter.RunAssetExportTask
}; 
 
 


//Class Engine.MaterialExpressionArctangent2 Size 104
// Inherited 64 bytes 
class UMaterialExpressionArctangent2 : public UMaterialExpression
{

 public: 
	struct FExpressionInput Y;  // Offset: 64 Size: 20
	struct FExpressionInput X;  // Offset: 84 Size: 20



 // Functions 
 public:
}; 
 
 


//Class Engine.FontFace Size 88
// Inherited 40 bytes 
class UFontFace : public UObject
{

 public: 
	char pad_40[8];  // Offset: 40 Size: 8
	struct FString SourceFilename;  // Offset: 48 Size: 16
	enum class EFontHinting Hinting;  // Offset: 64 Size: 1
	enum class EFontLoadingPolicy LoadingPolicy;  // Offset: 65 Size: 1
	enum class EFontLayoutMethod LayoutMethod;  // Offset: 66 Size: 1
	char pad_67[21];  // Offset: 67 Size: 21



 // Functions 
 public:
}; 
 
 


//Class Engine.ForceFeedbackComponent Size 752
// Inherited 528 bytes 
class UForceFeedbackComponent : public USceneComponent
{

 public: 
	struct UForceFeedbackEffect* ForceFeedbackEffect;  // Offset: 520 Size: 8
	char bAutoDestroy : 1;  // Offset: 528 Size: 1
	char bStopWhenOwnerDestroyed : 1;  // Offset: 528 Size: 1
	char bLooping : 1;  // Offset: 528 Size: 1
	char bIgnoreTimeDilation : 1;  // Offset: 528 Size: 1
	char bOverrideAttenuation : 1;  // Offset: 528 Size: 1
	float IntensityMultiplier;  // Offset: 532 Size: 4
	struct UForceFeedbackAttenuation* AttenuationSettings;  // Offset: 536 Size: 8
	struct FForceFeedbackAttenuationSettings AttenuationOverrides;  // Offset: 544 Size: 176
	struct FMulticastInlineDelegate OnForceFeedbackFinished;  // Offset: 720 Size: 16
	char pad_740_1 : 3;  // Offset: 740 Size: 1
	char pad_741[12];  // Offset: 741 Size: 12



 // Functions 
 public:
	void Stop(); // Function Engine.ForceFeedbackComponent.Stop
	void SetIntensityMultiplier(float NewIntensityMultiplier); // Function Engine.ForceFeedbackComponent.SetIntensityMultiplier
	void SetForceFeedbackEffect(struct UForceFeedbackEffect* NewForceFeedbackEffect); // Function Engine.ForceFeedbackComponent.SetForceFeedbackEffect
	void Play(float StartTime); // Function Engine.ForceFeedbackComponent.Play
	bool BP_GetAttenuationSettingsToApply(struct FForceFeedbackAttenuationSettings& OutAttenuationSettings); // Function Engine.ForceFeedbackComponent.BP_GetAttenuationSettingsToApply
	void AdjustAttenuation(struct FForceFeedbackAttenuationSettings& InAttenuationSettings); // Function Engine.ForceFeedbackComponent.AdjustAttenuation
}; 
 
 


//Class Engine.ForceFeedbackEffect Size 64
// Inherited 40 bytes 
class UForceFeedbackEffect : public UObject
{

 public: 
	struct TArray<struct FForceFeedbackChannelDetails> ChannelDetails;  // Offset: 40 Size: 16
	float Duration;  // Offset: 56 Size: 4
	char pad_60[4];  // Offset: 60 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleVectorFieldLocal Size 104
// Inherited 48 bytes 
class UParticleModuleVectorFieldLocal : public UParticleModuleVectorFieldBase
{

 public: 
	struct UVectorField* VectorField;  // Offset: 48 Size: 8
	struct FVector RelativeTranslation;  // Offset: 56 Size: 12
	struct FRotator RelativeRotation;  // Offset: 68 Size: 12
	struct FVector RelativeScale3D;  // Offset: 80 Size: 12
	float Intensity;  // Offset: 92 Size: 4
	float Tightness;  // Offset: 96 Size: 4
	char bIgnoreComponentTransform : 1;  // Offset: 100 Size: 1
	char bTileX : 1;  // Offset: 100 Size: 1
	char bTileY : 1;  // Offset: 100 Size: 1
	char bTileZ : 1;  // Offset: 100 Size: 1
	char bUseFixDT : 1;  // Offset: 100 Size: 1
	char pad_100_1 : 3;  // Offset: 100 Size: 1
	char pad_101[4];  // Offset: 101 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.GameEngine Size 3464
// Inherited 3384 bytes 
class UGameEngine : public UEngine
{

 public: 
	float MaxDeltaTime;  // Offset: 3384 Size: 4
	float ServerFlushLogInterval;  // Offset: 3388 Size: 4
	struct UGameInstance* GameInstance;  // Offset: 3392 Size: 8
	char pad_3400[64];  // Offset: 3400 Size: 64



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleAccelerationDrag Size 112
// Inherited 56 bytes 
class UParticleModuleAccelerationDrag : public UParticleModuleAccelerationBase
{

 public: 
	struct UDistributionFloat* DragCoefficient;  // Offset: 56 Size: 8
	struct FRawDistributionFloat DragCoefficientRaw;  // Offset: 64 Size: 48



 // Functions 
 public:
}; 
 
 


//Class Engine.GeneratedMeshAreaLight Size 568
// Inherited 568 bytes 
class AGeneratedMeshAreaLight : public ASpotLight
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.HapticFeedbackEffect_Buffer Size 64
// Inherited 40 bytes 
class UHapticFeedbackEffect_Buffer : public UHapticFeedbackEffect_Base
{

 public: 
	struct TArray<char> Amplitudes;  // Offset: 40 Size: 16
	int32_t SampleRate;  // Offset: 56 Size: 4
	char pad_60[4];  // Offset: 60 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.HapticFeedbackEffect_Curve Size 312
// Inherited 40 bytes 
class UHapticFeedbackEffect_Curve : public UHapticFeedbackEffect_Base
{

 public: 
	struct FHapticFeedbackDetails_Curve HapticDetails;  // Offset: 40 Size: 272



 // Functions 
 public:
}; 
 
 


//Class Engine.StereoLayerFunctionLibrary Size 40
// Inherited 40 bytes 
class UStereoLayerFunctionLibrary : public UBlueprintFunctionLibrary
{

 public: 



 // Functions 
 public:
	void ShowSplashScreen(); // Function Engine.StereoLayerFunctionLibrary.ShowSplashScreen
	void SetSplashScreen(struct UTexture* Texture, struct FVector2D Scale, struct FVector Offset, bool bShowLoadingMovie, bool bShowOnSet); // Function Engine.StereoLayerFunctionLibrary.SetSplashScreen
	void HideSplashScreen(); // Function Engine.StereoLayerFunctionLibrary.HideSplashScreen
	void EnableAutoLoadingSplashScreen(bool InAutoShowEnabled); // Function Engine.StereoLayerFunctionLibrary.EnableAutoLoadingSplashScreen
}; 
 
 


//Class Engine.HealthSnapshotBlueprintLibrary Size 40
// Inherited 40 bytes 
class UHealthSnapshotBlueprintLibrary : public UBlueprintFunctionLibrary
{

 public: 



 // Functions 
 public:
	void StopPerformanceSnapshots(); // Function Engine.HealthSnapshotBlueprintLibrary.StopPerformanceSnapshots
	void StartPerformanceSnapshots(); // Function Engine.HealthSnapshotBlueprintLibrary.StartPerformanceSnapshots
	void LogPerformanceSnapshot(struct FString SnapshotTitle, bool bResetStats); // Function Engine.HealthSnapshotBlueprintLibrary.LogPerformanceSnapshot
}; 
 
 


//Class Engine.ImportanceSamplingLibrary Size 40
// Inherited 40 bytes 
class UImportanceSamplingLibrary : public UBlueprintFunctionLibrary
{

 public: 



 // Functions 
 public:
	float RandomSobolFloat(int32_t Index, int32_t Dimension, float Seed); // Function Engine.ImportanceSamplingLibrary.RandomSobolFloat
	struct FVector RandomSobolCell3D(int32_t Index, int32_t NumCells, struct FVector Cell, struct FVector Seed); // Function Engine.ImportanceSamplingLibrary.RandomSobolCell3D
	struct FVector2D RandomSobolCell2D(int32_t Index, int32_t NumCells, struct FVector2D Cell, struct FVector2D Seed); // Function Engine.ImportanceSamplingLibrary.RandomSobolCell2D
	float NextSobolFloat(int32_t Index, int32_t Dimension, float PreviousValue); // Function Engine.ImportanceSamplingLibrary.NextSobolFloat
	struct FVector NextSobolCell3D(int32_t Index, int32_t NumCells, struct FVector PreviousValue); // Function Engine.ImportanceSamplingLibrary.NextSobolCell3D
	struct FVector2D NextSobolCell2D(int32_t Index, int32_t NumCells, struct FVector2D PreviousValue); // Function Engine.ImportanceSamplingLibrary.NextSobolCell2D
	struct FImportanceTexture MakeImportanceTexture(struct UTexture2D* Texture, enum class EImportanceWeight WeightingFunc); // Function Engine.ImportanceSamplingLibrary.MakeImportanceTexture
	void ImportanceSample(struct FImportanceTexture& Texture, struct FVector2D& Rand, int32_t Samples, float Intensity, struct FVector2D& SamplePosition, struct FLinearColor& SampleColor, float& SampleIntensity, float& SampleSize); // Function Engine.ImportanceSamplingLibrary.ImportanceSample
	void BreakImportanceTexture(struct FImportanceTexture& ImportanceTexture, struct UTexture2D*& Texture, enum class EImportanceWeight& WeightingFunc); // Function Engine.ImportanceSamplingLibrary.BreakImportanceTexture
}; 
 
 


//Class Engine.ImportantToggleSettingInterface Size 40
// Inherited 40 bytes 
class UImportantToggleSettingInterface : public UInterface
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.PainCausingVolume Size 656
// Inherited 616 bytes 
class APainCausingVolume : public APhysicsVolume
{

 public: 
	char bPainCausing : 1;  // Offset: 616 Size: 1
	char pad_616_1 : 7;  // Offset: 616 Size: 1
	char pad_617[4];  // Offset: 617 Size: 4
	float DamagePerSec;  // Offset: 620 Size: 4
	UDamageType* DamageType;  // Offset: 624 Size: 8
	float PainInterval;  // Offset: 632 Size: 4
	char bEntryPain : 1;  // Offset: 636 Size: 1
	char BACKUP_bPainCausing : 1;  // Offset: 636 Size: 1
	char pad_636_1 : 6;  // Offset: 636 Size: 1
	char pad_637[4];  // Offset: 637 Size: 4
	struct AController* DamageInstigator;  // Offset: 640 Size: 8
	char pad_648[8];  // Offset: 648 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.InheritableComponentHandler Size 72
// Inherited 40 bytes 
class UInheritableComponentHandler : public UObject
{

 public: 
	struct TArray<struct FComponentOverrideRecord> Records;  // Offset: 40 Size: 16
	struct TArray<struct UActorComponent*> UnnecessaryComponents;  // Offset: 56 Size: 16



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionNamedRerouteBase Size 64
// Inherited 64 bytes 
class UMaterialExpressionNamedRerouteBase : public UMaterialExpressionRerouteBase
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.InputDelegateBinding Size 40
// Inherited 40 bytes 
class UInputDelegateBinding : public UDynamicBlueprintBinding
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.InputActionDelegateBinding Size 56
// Inherited 40 bytes 
class UInputActionDelegateBinding : public UInputDelegateBinding
{

 public: 
	struct TArray<struct FBlueprintInputActionDelegateBinding> InputActionDelegateBindings;  // Offset: 40 Size: 16



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleSpawn Size 232
// Inherited 56 bytes 
class UParticleModuleSpawn : public UParticleModuleSpawnBase
{

 public: 
	struct FRawDistributionFloat Rate;  // Offset: 56 Size: 48
	struct FRawDistributionFloat RateScale;  // Offset: 104 Size: 48
	enum class EParticleBurstMethod ParticleBurstMethod;  // Offset: 152 Size: 1
	char pad_153[7];  // Offset: 153 Size: 7
	struct TArray<struct FParticleBurst> BurstList;  // Offset: 160 Size: 16
	struct FRawDistributionFloat BurstScale;  // Offset: 176 Size: 48
	char bApplyGlobalSpawnRateScale : 1;  // Offset: 224 Size: 1
	char pad_224_1 : 7;  // Offset: 224 Size: 1
	char pad_225[8];  // Offset: 225 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionCollectionParameter Size 96
// Inherited 64 bytes 
class UMaterialExpressionCollectionParameter : public UMaterialExpression
{

 public: 
	struct UMaterialParameterCollection* Collection;  // Offset: 64 Size: 8
	struct FName ParameterName;  // Offset: 72 Size: 8
	struct FGuid ParameterId;  // Offset: 80 Size: 16



 // Functions 
 public:
}; 
 
 


//Class Engine.PluginCommandlet Size 160
// Inherited 128 bytes 
class UPluginCommandlet : public UCommandlet
{

 public: 
	char pad_128[32];  // Offset: 128 Size: 32



 // Functions 
 public:
}; 
 
 


//Class Engine.InputAxisDelegateBinding Size 56
// Inherited 40 bytes 
class UInputAxisDelegateBinding : public UInputDelegateBinding
{

 public: 
	struct TArray<struct FBlueprintInputAxisDelegateBinding> InputAxisDelegateBindings;  // Offset: 40 Size: 16



 // Functions 
 public:
}; 
 
 


//Class Engine.InputAxisKeyDelegateBinding Size 56
// Inherited 40 bytes 
class UInputAxisKeyDelegateBinding : public UInputDelegateBinding
{

 public: 
	struct TArray<struct FBlueprintInputAxisKeyDelegateBinding> InputAxisKeyDelegateBindings;  // Offset: 40 Size: 16



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleVelocity_Seeded Size 208
// Inherited 176 bytes 
class UParticleModuleVelocity_Seeded : public UParticleModuleVelocity
{

 public: 
	struct FParticleRandomSeedInfo RandomSeedInfo;  // Offset: 176 Size: 32



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionCosine Size 88
// Inherited 64 bytes 
class UMaterialExpressionCosine : public UMaterialExpression
{

 public: 
	struct FExpressionInput Input;  // Offset: 64 Size: 20
	float Period;  // Offset: 84 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.InputTouchDelegateBinding Size 56
// Inherited 40 bytes 
class UInputTouchDelegateBinding : public UInputDelegateBinding
{

 public: 
	struct TArray<struct FBlueprintInputTouchDelegateBinding> InputTouchDelegateBindings;  // Offset: 40 Size: 16



 // Functions 
 public:
}; 
 
 


//Class Engine.InterpCurveEdSetup Size 64
// Inherited 40 bytes 
class UInterpCurveEdSetup : public UObject
{

 public: 
	struct TArray<struct FCurveEdTab> Tabs;  // Offset: 40 Size: 16
	int32_t ActiveTab;  // Offset: 56 Size: 4
	char pad_60[4];  // Offset: 60 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionFunctionInput Size 192
// Inherited 64 bytes 
class UMaterialExpressionFunctionInput : public UMaterialExpression
{

 public: 
	struct FExpressionInput preview;  // Offset: 64 Size: 20
	struct FName InputName;  // Offset: 84 Size: 8
	char pad_92[4];  // Offset: 92 Size: 4
	struct FString Description;  // Offset: 96 Size: 16
	struct FGuid ID;  // Offset: 112 Size: 16
	enum class EFunctionInputType InputType;  // Offset: 128 Size: 1
	char pad_129[15];  // Offset: 129 Size: 15
	struct FVector4 PreviewValue;  // Offset: 144 Size: 16
	char bUsePreviewValueAsDefault : 1;  // Offset: 160 Size: 1
	char pad_160_1 : 7;  // Offset: 160 Size: 1
	char pad_161[4];  // Offset: 161 Size: 4
	int32_t SortPriority;  // Offset: 164 Size: 4
	char bCompilingFunctionPreview : 1;  // Offset: 168 Size: 1
	char pad_168_1 : 7;  // Offset: 168 Size: 1
	char pad_169[24];  // Offset: 169 Size: 24



 // Functions 
 public:
}; 
 
 


//Class Engine.InterpFilter Size 56
// Inherited 40 bytes 
class UInterpFilter : public UObject
{

 public: 
	struct FString Caption;  // Offset: 40 Size: 16



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleBeamNoise Size 400
// Inherited 48 bytes 
class UParticleModuleBeamNoise : public UParticleModuleBeamBase
{

 public: 
	char bLowFreq_Enabled : 1;  // Offset: 48 Size: 1
	char pad_48_1 : 7;  // Offset: 48 Size: 1
	char pad_49[4];  // Offset: 49 Size: 4
	int32_t Frequency;  // Offset: 52 Size: 4
	int32_t Frequency_LowRange;  // Offset: 56 Size: 4
	char pad_60[4];  // Offset: 60 Size: 4
	struct FRawDistributionVector NoiseRange;  // Offset: 64 Size: 72
	struct FRawDistributionFloat NoiseRangeScale;  // Offset: 136 Size: 48
	char bNRScaleEmitterTime : 1;  // Offset: 184 Size: 1
	char pad_184_1 : 7;  // Offset: 184 Size: 1
	char pad_185[8];  // Offset: 185 Size: 8
	struct FRawDistributionVector NoiseSpeed;  // Offset: 192 Size: 72
	char bSmooth : 1;  // Offset: 264 Size: 1
	char pad_264_1 : 7;  // Offset: 264 Size: 1
	char pad_265[4];  // Offset: 265 Size: 4
	float NoiseLockRadius;  // Offset: 268 Size: 4
	char bNoiseLock : 1;  // Offset: 272 Size: 1
	char bOscillate : 1;  // Offset: 272 Size: 1
	char pad_272_1 : 6;  // Offset: 272 Size: 1
	char pad_273[4];  // Offset: 273 Size: 4
	float NoiseLockTime;  // Offset: 276 Size: 4
	float NoiseTension;  // Offset: 280 Size: 4
	char bUseNoiseTangents : 1;  // Offset: 284 Size: 1
	char pad_284_1 : 7;  // Offset: 284 Size: 1
	char pad_285[4];  // Offset: 285 Size: 4
	struct FRawDistributionFloat NoiseTangentStrength;  // Offset: 288 Size: 48
	int32_t NoiseTessellation;  // Offset: 336 Size: 4
	char bTargetNoise : 1;  // Offset: 340 Size: 1
	char pad_340_1 : 7;  // Offset: 340 Size: 1
	char pad_341[4];  // Offset: 341 Size: 4
	float FrequencyDistance;  // Offset: 344 Size: 4
	char bApplyNoiseScale : 1;  // Offset: 348 Size: 1
	char pad_348_1 : 7;  // Offset: 348 Size: 1
	char pad_349[4];  // Offset: 349 Size: 4
	struct FRawDistributionFloat NoiseScale;  // Offset: 352 Size: 48



 // Functions 
 public:
}; 
 
 


//Class Engine.InterpFilter_Custom Size 56
// Inherited 56 bytes 
class UInterpFilter_Custom : public UInterpFilter
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.TextureRenderTargetVolume Size 416
// Inherited 384 bytes 
class UTextureRenderTargetVolume : public UTextureRenderTarget
{

 public: 
	int32_t SizeX;  // Offset: 384 Size: 4
	int32_t SizeY;  // Offset: 388 Size: 4
	int32_t SizeZ;  // Offset: 392 Size: 4
	struct FLinearColor ClearColor;  // Offset: 396 Size: 16
	enum class EPixelFormat OverrideFormat;  // Offset: 412 Size: 1
	char bHDR : 1;  // Offset: 413 Size: 1
	char bForceLinearGamma : 1;  // Offset: 413 Size: 1
	char pad_413_1 : 6;  // Offset: 413 Size: 1
	char pad_414[3];  // Offset: 414 Size: 3



 // Functions 
 public:
}; 
 
 


//Class Engine.InterpTrackInstEvent Size 48
// Inherited 40 bytes 
class UInterpTrackInstEvent : public UInterpTrackInst
{

 public: 
	float LastUpdatePosition;  // Offset: 40 Size: 4
	char pad_44[4];  // Offset: 44 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.InterpGroup Size 80
// Inherited 40 bytes 
class UInterpGroup : public UObject
{

 public: 
	char pad_40[8];  // Offset: 40 Size: 8
	struct TArray<struct UInterpTrack*> InterpTracks;  // Offset: 48 Size: 16
	struct FName GroupName;  // Offset: 64 Size: 8
	struct FColor GroupColor;  // Offset: 72 Size: 4
	char bCollapsed : 1;  // Offset: 76 Size: 1
	char bVisible : 1;  // Offset: 76 Size: 1
	char bIsFolder : 1;  // Offset: 76 Size: 1
	char bIsParented : 1;  // Offset: 76 Size: 1
	char bIsSelected : 1;  // Offset: 76 Size: 1
	char pad_76_1 : 3;  // Offset: 76 Size: 1
	char pad_77[4];  // Offset: 77 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.RadialForceComponent Size 576
// Inherited 528 bytes 
class URadialForceComponent : public USceneComponent
{

 public: 
	float Radius;  // Offset: 520 Size: 4
	enum class ERadialImpulseFalloff Falloff;  // Offset: 524 Size: 1
	float ImpulseStrength;  // Offset: 528 Size: 4
	char bImpulseVelChange : 1;  // Offset: 532 Size: 1
	char bIgnoreOwningActor : 1;  // Offset: 532 Size: 1
	float ForceStrength;  // Offset: 536 Size: 4
	float DestructibleDamage;  // Offset: 540 Size: 4
	struct TArray<enum class EObjectTypeQuery> ObjectTypesToAffect;  // Offset: 544 Size: 16
	char pad_561_1 : 6;  // Offset: 561 Size: 1
	char pad_562[15];  // Offset: 562 Size: 15



 // Functions 
 public:
	void RemoveObjectTypeToAffect(enum class EObjectTypeQuery ObjectType); // Function Engine.RadialForceComponent.RemoveObjectTypeToAffect
	void FireImpulse(); // Function Engine.RadialForceComponent.FireImpulse
	void AddObjectTypeToAffect(enum class EObjectTypeQuery ObjectType); // Function Engine.RadialForceComponent.AddObjectTypeToAffect
}; 
 
 


//Class Engine.KismetRenderingLibrary Size 40
// Inherited 40 bytes 
class UKismetRenderingLibrary : public UBlueprintFunctionLibrary
{

 public: 



 // Functions 
 public:
	void SetCastInsetShadowForAllAttachments(struct UPrimitiveComponent* PrimitiveComponent, bool bCastInsetShadow, bool bLightAttachmentsAsGroup); // Function Engine.KismetRenderingLibrary.SetCastInsetShadowForAllAttachments
	struct UTexture2D* RenderTargetCreateStaticTexture2DEditorOnly(struct UTextureRenderTarget2D* RenderTarget, struct FString Name, enum class TextureCompressionSettings CompressionSettings, enum class TextureMipGenSettings MipSettings); // Function Engine.KismetRenderingLibrary.RenderTargetCreateStaticTexture2DEditorOnly
	void ReleaseRenderTarget2D(struct UTextureRenderTarget2D* TextureRenderTarget); // Function Engine.KismetRenderingLibrary.ReleaseRenderTarget2D
	struct FColor ReadRenderTargetUV(struct UObject* WorldContextObject, struct UTextureRenderTarget2D* TextureRenderTarget, float U, float V); // Function Engine.KismetRenderingLibrary.ReadRenderTargetUV
	struct FLinearColor ReadRenderTargetRawUV(struct UObject* WorldContextObject, struct UTextureRenderTarget2D* TextureRenderTarget, float U, float V); // Function Engine.KismetRenderingLibrary.ReadRenderTargetRawUV
	struct FLinearColor ReadRenderTargetRawPixel(struct UObject* WorldContextObject, struct UTextureRenderTarget2D* TextureRenderTarget, int32_t X, int32_t Y); // Function Engine.KismetRenderingLibrary.ReadRenderTargetRawPixel
	struct FColor ReadRenderTargetPixel(struct UObject* WorldContextObject, struct UTextureRenderTarget2D* TextureRenderTarget, int32_t X, int32_t Y); // Function Engine.KismetRenderingLibrary.ReadRenderTargetPixel
	struct FSkelMeshSkinWeightInfo MakeSkinWeightInfo(int32_t Bone0, char Weight0, int32_t Bone1, char Weight1, int32_t Bone2, char Weight2, int32_t Bone3, char Weight3); // Function Engine.KismetRenderingLibrary.MakeSkinWeightInfo
	struct UTexture2D* ImportFileAsTexture2D(struct UObject* WorldContextObject, struct FString Filename); // Function Engine.KismetRenderingLibrary.ImportFileAsTexture2D
	struct UTexture2D* ImportBufferAsTexture2D(struct UObject* WorldContextObject, struct TArray<char>& Buffer); // Function Engine.KismetRenderingLibrary.ImportBufferAsTexture2D
	void ExportTexture2D(struct UObject* WorldContextObject, struct UTexture2D* Texture, struct FString FilePath, struct FString Filename); // Function Engine.KismetRenderingLibrary.ExportTexture2D
	void ExportRenderTarget(struct UObject* WorldContextObject, struct UTextureRenderTarget2D* TextureRenderTarget, struct FString FilePath, struct FString Filename); // Function Engine.KismetRenderingLibrary.ExportRenderTarget
	void EndDrawCanvasToRenderTarget(struct UObject* WorldContextObject, struct FDrawToRenderTargetContext& Context); // Function Engine.KismetRenderingLibrary.EndDrawCanvasToRenderTarget
	void DrawMaterialToRenderTarget(struct UObject* WorldContextObject, struct UTextureRenderTarget2D* TextureRenderTarget, struct UMaterialInterface* Material); // Function Engine.KismetRenderingLibrary.DrawMaterialToRenderTarget
	struct UTextureRenderTargetVolume* CreateRenderTargetVolume(struct UObject* WorldContextObject, int32_t Width, int32_t Height, int32_t Depth, enum class ETextureRenderTargetFormat Format, struct FLinearColor ClearColor, bool bAutoGenerateMipMaps); // Function Engine.KismetRenderingLibrary.CreateRenderTargetVolume
	struct UTextureRenderTarget2DArray* CreateRenderTarget2DArray(struct UObject* WorldContextObject, int32_t Width, int32_t Height, int32_t Slices, enum class ETextureRenderTargetFormat Format, struct FLinearColor ClearColor, bool bAutoGenerateMipMaps); // Function Engine.KismetRenderingLibrary.CreateRenderTarget2DArray
	struct UTextureRenderTarget2D* CreateRenderTarget2D(struct UObject* WorldContextObject, int32_t Width, int32_t Height, enum class ETextureRenderTargetFormat Format, struct FLinearColor ClearColor, bool bAutoGenerateMipMaps); // Function Engine.KismetRenderingLibrary.CreateRenderTarget2D
	void ConvertRenderTargetToTexture2DEditorOnly(struct UObject* WorldContextObject, struct UTextureRenderTarget2D* RenderTarget, struct UTexture2D* Texture); // Function Engine.KismetRenderingLibrary.ConvertRenderTargetToTexture2DEditorOnly
	void ClearRenderTarget2D(struct UObject* WorldContextObject, struct UTextureRenderTarget2D* TextureRenderTarget, struct FLinearColor ClearColor); // Function Engine.KismetRenderingLibrary.ClearRenderTarget2D
	void BreakSkinWeightInfo(struct FSkelMeshSkinWeightInfo InWeight, int32_t& Bone0, char& Weight0, int32_t& Bone1, char& Weight1, int32_t& Bone2, char& Weight2, int32_t& Bone3, char& Weight3); // Function Engine.KismetRenderingLibrary.BreakSkinWeightInfo
	void BeginDrawCanvasToRenderTarget(struct UObject* WorldContextObject, struct UTextureRenderTarget2D* TextureRenderTarget, struct UCanvas*& Canvas, struct FVector2D& Size, struct FDrawToRenderTargetContext& Context); // Function Engine.KismetRenderingLibrary.BeginDrawCanvasToRenderTarget
}; 
 
 


//Class Engine.InterpGroupDirector Size 80
// Inherited 80 bytes 
class UInterpGroupDirector : public UInterpGroup
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.InterpGroupInstCamera Size 72
// Inherited 72 bytes 
class UInterpGroupInstCamera : public UInterpGroupInst
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleAttractorParticle Size 176
// Inherited 48 bytes 
class UParticleModuleAttractorParticle : public UParticleModuleAttractorBase
{

 public: 
	struct FName EmitterName;  // Offset: 48 Size: 8
	struct FRawDistributionFloat Range;  // Offset: 56 Size: 48
	char bStrengthByDistance : 1;  // Offset: 104 Size: 1
	char pad_104_1 : 7;  // Offset: 104 Size: 1
	char pad_105[8];  // Offset: 105 Size: 8
	struct FRawDistributionFloat Strength;  // Offset: 112 Size: 48
	char bAffectBaseVelocity : 1;  // Offset: 160 Size: 1
	char pad_160_1 : 7;  // Offset: 160 Size: 1
	char pad_161[4];  // Offset: 161 Size: 4
	enum class EAttractorParticleSelectionMethod SelectionMethod;  // Offset: 164 Size: 1
	char pad_165[3];  // Offset: 165 Size: 3
	char bRenewSource : 1;  // Offset: 168 Size: 1
	char bInheritSourceVel : 1;  // Offset: 168 Size: 1
	char pad_168_1 : 6;  // Offset: 168 Size: 1
	char pad_169[4];  // Offset: 169 Size: 4
	int32_t LastSelIndex;  // Offset: 172 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleMaterialBase Size 48
// Inherited 48 bytes 
class UParticleModuleMaterialBase : public UParticleModule
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.InterpTrack Size 112
// Inherited 40 bytes 
class UInterpTrack : public UObject
{

 public: 
	char pad_40[16];  // Offset: 40 Size: 16
	struct TArray<struct UInterpTrack*> SubTracks;  // Offset: 56 Size: 16
	UInterpTrackInst* TrackInstClass;  // Offset: 72 Size: 8
	enum class ETrackActiveCondition ActiveCondition;  // Offset: 80 Size: 1
	char pad_81[7];  // Offset: 81 Size: 7
	struct FString TrackTitle;  // Offset: 88 Size: 16
	char bOnePerGroup : 1;  // Offset: 104 Size: 1
	char bDirGroupOnly : 1;  // Offset: 104 Size: 1
	char bDisableTrack : 1;  // Offset: 104 Size: 1
	char bIsSelected : 1;  // Offset: 104 Size: 1
	char bIsAnimControlTrack : 1;  // Offset: 104 Size: 1
	char bSubTrackOnly : 1;  // Offset: 104 Size: 1
	char bVisible : 1;  // Offset: 104 Size: 1
	char bIsRecording : 1;  // Offset: 104 Size: 1
	char pad_105[7];  // Offset: 105 Size: 7



 // Functions 
 public:
}; 
 
 


//Class Engine.InterpTrackFloatBase Size 144
// Inherited 112 bytes 
class UInterpTrackFloatBase : public UInterpTrack
{

 public: 
	struct FInterpCurveFloat FloatTrack;  // Offset: 112 Size: 24
	float CurveTension;  // Offset: 136 Size: 4
	char pad_140[4];  // Offset: 140 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.InterpTrackAnimControl Size 176
// Inherited 144 bytes 
class UInterpTrackAnimControl : public UInterpTrackFloatBase
{

 public: 
	struct FName SlotName;  // Offset: 144 Size: 8
	struct TArray<struct FAnimControlTrackKey> AnimSeqs;  // Offset: 152 Size: 16
	char bSkipAnimNotifiers : 1;  // Offset: 168 Size: 1
	char pad_168_1 : 7;  // Offset: 168 Size: 1
	char pad_169[8];  // Offset: 169 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.ThumbnailInfo Size 40
// Inherited 40 bytes 
class UThumbnailInfo : public UObject
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.SplineMeshActor Size 552
// Inherited 544 bytes 
class ASplineMeshActor : public AActor
{

 public: 
	struct USplineMeshComponent* SplineMeshComponent;  // Offset: 544 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.InterpTrackAudioMaster Size 144
// Inherited 144 bytes 
class UInterpTrackAudioMaster : public UInterpTrackVectorBase
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.LevelStreaming Size 336
// Inherited 40 bytes 
class ULevelStreaming : public UObject
{

 public: 
	struct TSoftObjectPtr<UWorld> WorldAsset;  // Offset: 40 Size: 40
	struct FName PackageNameToLoad;  // Offset: 80 Size: 8
	struct TArray<struct FName> LODPackageNames;  // Offset: 88 Size: 16
	char pad_104[24];  // Offset: 104 Size: 24
	struct FTransform LevelTransform;  // Offset: 128 Size: 48
	int32_t LevelLODIndex;  // Offset: 176 Size: 4
	int32_t StreamingPriority;  // Offset: 180 Size: 4
	char pad_184[2];  // Offset: 184 Size: 2
	char pad_186_1 : 3;  // Offset: 186 Size: 1
	char bShouldBeVisible : 1;  // Offset: 186 Size: 1
	char bShouldBeLoaded : 1;  // Offset: 186 Size: 1
	char bLocked : 1;  // Offset: 186 Size: 1
	char bIsStatic : 1;  // Offset: 186 Size: 1
	char bShouldBlockOnLoad : 1;  // Offset: 186 Size: 1
	char bShouldBlockOnUnload : 1;  // Offset: 187 Size: 1
	char bDisableDistanceStreaming : 1;  // Offset: 187 Size: 1
	char bDrawOnLevelStatusMap : 1;  // Offset: 187 Size: 1
	char pad_187_1 : 5;  // Offset: 187 Size: 1
	struct FLinearColor LevelColor;  // Offset: 188 Size: 16
	char pad_204[4];  // Offset: 204 Size: 4
	struct TArray<struct ALevelStreamingVolume*> EditorStreamingVolumes;  // Offset: 208 Size: 16
	float MinTimeBetweenVolumeUnloadRequests;  // Offset: 224 Size: 4
	enum class ELevelStreamingType LevelStreamingType;  // Offset: 228 Size: 1
	enum class EDetailMode LevelDetailMode;  // Offset: 229 Size: 1
	char pad_230[10];  // Offset: 230 Size: 10
	struct FMulticastInlineDelegate OnLevelLoaded;  // Offset: 240 Size: 16
	struct FMulticastInlineDelegate OnLevelUnloaded;  // Offset: 256 Size: 16
	struct FMulticastInlineDelegate OnLevelShown;  // Offset: 272 Size: 16
	struct FMulticastInlineDelegate OnLevelHidden;  // Offset: 288 Size: 16
	struct ULevel* LoadedLevel;  // Offset: 304 Size: 8
	struct ULevel* PendingUnloadLevel;  // Offset: 312 Size: 8
	char pad_320[16];  // Offset: 320 Size: 16



 // Functions 
 public:
	bool ShouldBeLoaded(); // Function Engine.LevelStreaming.ShouldBeLoaded
	void SetShouldBeVisible(bool bInShouldBeVisible); // Function Engine.LevelStreaming.SetShouldBeVisible
	void SetShouldBeLoaded(bool bInShouldBeLoaded); // Function Engine.LevelStreaming.SetShouldBeLoaded
	void SetPriority(int32_t NewPriority); // Function Engine.LevelStreaming.SetPriority
	void SetLevelLODIndex(int32_t LODIndex); // Function Engine.LevelStreaming.SetLevelLODIndex
	void SetIsRequestingUnloadAndRemoval(bool bInIsRequestingUnloadAndRemoval); // Function Engine.LevelStreaming.SetIsRequestingUnloadAndRemoval
	bool IsStreamingStatePending(); // Function Engine.LevelStreaming.IsStreamingStatePending
	bool IsLevelVisible(); // Function Engine.LevelStreaming.IsLevelVisible
	bool IsLevelLoaded(); // Function Engine.LevelStreaming.IsLevelLoaded
	struct FName GetWorldAssetPackageFName(); // Function Engine.LevelStreaming.GetWorldAssetPackageFName
	struct ULevel* GetLoadedLevel(); // Function Engine.LevelStreaming.GetLoadedLevel
	struct ALevelScriptActor* GetLevelScriptActor(); // Function Engine.LevelStreaming.GetLevelScriptActor
	bool GetIsRequestingUnloadAndRemoval(); // Function Engine.LevelStreaming.GetIsRequestingUnloadAndRemoval
	struct ULevelStreaming* CreateInstance(struct FString UniqueInstanceName); // Function Engine.LevelStreaming.CreateInstance
}; 
 
 


//Class Engine.PathFollowingAgentInterface Size 40
// Inherited 40 bytes 
class UPathFollowingAgentInterface : public UInterface
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionSSRWeightOutput Size 88
// Inherited 64 bytes 
class UMaterialExpressionSSRWeightOutput : public UMaterialExpressionCustomOutput
{

 public: 
	struct FExpressionInput Input;  // Offset: 64 Size: 20
	char pad_84[4];  // Offset: 84 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.InterpTrackColorScale Size 144
// Inherited 144 bytes 
class UInterpTrackColorScale : public UInterpTrackVectorBase
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.InterpTrackDirector Size 136
// Inherited 112 bytes 
class UInterpTrackDirector : public UInterpTrack
{

 public: 
	struct TArray<struct FDirectorTrackCut> CutTrack;  // Offset: 112 Size: 16
	char bSimulateCameraCutsOnClients : 1;  // Offset: 128 Size: 1
	char pad_128_1 : 7;  // Offset: 128 Size: 1
	char pad_129[8];  // Offset: 129 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleVelocityOverLifetime Size 136
// Inherited 56 bytes 
class UParticleModuleVelocityOverLifetime : public UParticleModuleVelocityBase
{

 public: 
	struct FRawDistributionVector VelOverLife;  // Offset: 56 Size: 72
	char Absolute : 1;  // Offset: 128 Size: 1
	char pad_128_1 : 7;  // Offset: 128 Size: 1
	char pad_129[8];  // Offset: 129 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.InterpTrackEvent Size 136
// Inherited 112 bytes 
class UInterpTrackEvent : public UInterpTrack
{

 public: 
	struct TArray<struct FEventTrackKey> EventTrack;  // Offset: 112 Size: 16
	char bFireEventsWhenForwards : 1;  // Offset: 128 Size: 1
	char bFireEventsWhenBackwards : 1;  // Offset: 128 Size: 1
	char bFireEventsWhenJumpingForwards : 1;  // Offset: 128 Size: 1
	char bUseCustomEventName : 1;  // Offset: 128 Size: 1
	char pad_128_1 : 4;  // Offset: 128 Size: 1
	char pad_129[8];  // Offset: 129 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.SoundfieldEndpointSubmix Size 112
// Inherited 56 bytes 
class USoundfieldEndpointSubmix : public USoundSubmixBase
{

 public: 
	struct FName SoundfieldEndpointType;  // Offset: 56 Size: 8
	UAudioEndpointSettingsBase* EndpointSettingsClass;  // Offset: 64 Size: 8
	struct USoundfieldEndpointSettingsBase* EndpointSettings;  // Offset: 72 Size: 8
	USoundfieldEncodingSettingsBase* EncodingSettingsClass;  // Offset: 80 Size: 8
	struct USoundfieldEncodingSettingsBase* EncodingSettings;  // Offset: 88 Size: 8
	struct TArray<struct USoundfieldEffectBase*> SoundfieldEffectChain;  // Offset: 96 Size: 16



 // Functions 
 public:
}; 
 
 


//Class Engine.InterpTrackFloatProp Size 152
// Inherited 144 bytes 
class UInterpTrackFloatProp : public UInterpTrackFloatBase
{

 public: 
	struct FName PropertyName;  // Offset: 144 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.InterpTrackInstAnimControl Size 48
// Inherited 40 bytes 
class UInterpTrackInstAnimControl : public UInterpTrackInst
{

 public: 
	float LastUpdatePosition;  // Offset: 40 Size: 4
	char pad_44[4];  // Offset: 44 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.InterpTrackInstAudioMaster Size 40
// Inherited 40 bytes 
class UInterpTrackInstAudioMaster : public UInterpTrackInst
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.InterpTrackInstProperty Size 80
// Inherited 40 bytes 
class UInterpTrackInstProperty : public UInterpTrackInst
{

 public: 
	struct TFieldPath<FNone> InterpProperty;  // Offset: 40 Size: 32
	struct UObject* PropertyOuterObjectInst;  // Offset: 72 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.InterpTrackInstBoolProp Size 104
// Inherited 80 bytes 
class UInterpTrackInstBoolProp : public UInterpTrackInstProperty
{

 public: 
	char pad_80[16];  // Offset: 80 Size: 16
	char pad_96_1 : 7;  // Offset: 96 Size: 1
	bool ResetBool : 1;  // Offset: 96 Size: 1
	char pad_97[7];  // Offset: 97 Size: 7



 // Functions 
 public:
}; 
 
 


//Class Engine.InterpTrackInstColorProp Size 96
// Inherited 80 bytes 
class UInterpTrackInstColorProp : public UInterpTrackInstProperty
{

 public: 
	char pad_80[8];  // Offset: 80 Size: 8
	struct FColor ResetColor;  // Offset: 88 Size: 4
	char pad_92[4];  // Offset: 92 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.InterpTrackInstDirector Size 48
// Inherited 40 bytes 
class UInterpTrackInstDirector : public UInterpTrackInst
{

 public: 
	struct AActor* OldViewTarget;  // Offset: 40 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.VoiceChannel Size 120
// Inherited 104 bytes 
class UVoiceChannel : public UChannel
{

 public: 
	char pad_104[16];  // Offset: 104 Size: 16



 // Functions 
 public:
}; 
 
 


//Class Engine.InterpTrackInstFade Size 40
// Inherited 40 bytes 
class UInterpTrackInstFade : public UInterpTrackInst
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.InterpTrackInstFloatParticleParam Size 48
// Inherited 40 bytes 
class UInterpTrackInstFloatParticleParam : public UInterpTrackInst
{

 public: 
	float ResetFloat;  // Offset: 40 Size: 4
	char pad_44[4];  // Offset: 44 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.ObjectReferencer Size 56
// Inherited 40 bytes 
class UObjectReferencer : public UObject
{

 public: 
	struct TArray<struct UObject*> ReferencedObjects;  // Offset: 40 Size: 16



 // Functions 
 public:
}; 
 
 


//Class Engine.InterpTrackInstMove Size 64
// Inherited 40 bytes 
class UInterpTrackInstMove : public UInterpTrackInst
{

 public: 
	struct FVector ResetLocation;  // Offset: 40 Size: 12
	struct FRotator ResetRotation;  // Offset: 52 Size: 12



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionComponentMask Size 88
// Inherited 64 bytes 
class UMaterialExpressionComponentMask : public UMaterialExpression
{

 public: 
	struct FExpressionInput Input;  // Offset: 64 Size: 20
	char R : 1;  // Offset: 84 Size: 1
	char G : 1;  // Offset: 84 Size: 1
	char B : 1;  // Offset: 84 Size: 1
	char A : 1;  // Offset: 84 Size: 1
	char pad_84_1 : 4;  // Offset: 84 Size: 1
	char pad_85[4];  // Offset: 85 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.InterpTrackInstVectorMaterialParam Size 96
// Inherited 40 bytes 
class UInterpTrackInstVectorMaterialParam : public UInterpTrackInst
{

 public: 
	struct TArray<struct UMaterialInstanceDynamic*> MaterialInstances;  // Offset: 40 Size: 16
	struct TArray<struct FVector> ResetVectors;  // Offset: 56 Size: 16
	struct TArray<struct FPrimitiveMaterialRef> PrimitiveMaterialRefs;  // Offset: 72 Size: 16
	struct UInterpTrackVectorMaterialParam* InstancedTrack;  // Offset: 88 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.SoundSourceBus Size 904
// Inherited 880 bytes 
class USoundSourceBus : public USoundWave
{

 public: 
	enum class ESourceBusChannels SourceBusChannels;  // Offset: 880 Size: 1
	char pad_881[3];  // Offset: 881 Size: 3
	float SourceBusDuration;  // Offset: 884 Size: 4
	struct UAudioBus* AudioBus;  // Offset: 888 Size: 8
	char bAutoDeactivateWhenSilent : 1;  // Offset: 896 Size: 1
	char pad_896_1 : 7;  // Offset: 896 Size: 1
	char pad_897[8];  // Offset: 897 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.InterpTrackInstSlomo Size 48
// Inherited 40 bytes 
class UInterpTrackInstSlomo : public UInterpTrackInst
{

 public: 
	float OldTimeDilation;  // Offset: 40 Size: 4
	char pad_44[4];  // Offset: 44 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.InterpTrackInstSound Size 56
// Inherited 40 bytes 
class UInterpTrackInstSound : public UInterpTrackInst
{

 public: 
	float LastUpdatePosition;  // Offset: 40 Size: 4
	char pad_44[4];  // Offset: 44 Size: 4
	struct UAudioComponent* PlayAudioComp;  // Offset: 48 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.WindDirectionalSource Size 552
// Inherited 544 bytes 
class AWindDirectionalSource : public AInfo
{

 public: 
	struct UWindDirectionalSourceComponent* Component;  // Offset: 544 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionVectorParameter Size 112
// Inherited 88 bytes 
class UMaterialExpressionVectorParameter : public UMaterialExpressionParameter
{

 public: 
	struct FLinearColor DefaultValue;  // Offset: 88 Size: 16
	char pad_104_1 : 7;  // Offset: 104 Size: 1
	bool bUseCustomPrimitiveData : 1;  // Offset: 104 Size: 1
	char PrimitiveDataIndex;  // Offset: 105 Size: 1
	char pad_106[6];  // Offset: 106 Size: 6



 // Functions 
 public:
}; 
 
 


//Class Engine.InterpTrackInstToggle Size 56
// Inherited 40 bytes 
class UInterpTrackInstToggle : public UInterpTrackInst
{

 public: 
	enum class ETrackToggleAction Action;  // Offset: 40 Size: 1
	char pad_41[3];  // Offset: 41 Size: 3
	float LastUpdatePosition;  // Offset: 44 Size: 4
	char bSavedActiveState : 1;  // Offset: 48 Size: 1
	char pad_48_1 : 7;  // Offset: 48 Size: 1
	char pad_49[8];  // Offset: 49 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.InterpTrackInstVisibility Size 48
// Inherited 40 bytes 
class UInterpTrackInstVisibility : public UInterpTrackInst
{

 public: 
	enum class EVisibilityTrackAction Action;  // Offset: 40 Size: 1
	char pad_41[3];  // Offset: 41 Size: 3
	float LastUpdatePosition;  // Offset: 44 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.InterpTrackMove Size 200
// Inherited 112 bytes 
class UInterpTrackMove : public UInterpTrack
{

 public: 
	struct FInterpCurveVector PosTrack;  // Offset: 112 Size: 24
	struct FInterpCurveVector EulerTrack;  // Offset: 136 Size: 24
	struct FInterpLookupTrack LookupTrack;  // Offset: 160 Size: 16
	struct FName LookAtGroupName;  // Offset: 176 Size: 8
	float LinCurveTension;  // Offset: 184 Size: 4
	float AngCurveTension;  // Offset: 188 Size: 4
	char bUseQuatInterpolation : 1;  // Offset: 192 Size: 1
	char bShowArrowAtKeys : 1;  // Offset: 192 Size: 1
	char bDisableMovement : 1;  // Offset: 192 Size: 1
	char bShowTranslationOnCurveEd : 1;  // Offset: 192 Size: 1
	char bShowRotationOnCurveEd : 1;  // Offset: 192 Size: 1
	char bHide3DTrack : 1;  // Offset: 192 Size: 1
	char pad_192_1 : 2;  // Offset: 192 Size: 1
	char pad_193[4];  // Offset: 193 Size: 4
	enum class EInterpTrackMoveRotMode RotMode;  // Offset: 196 Size: 1
	char pad_197[3];  // Offset: 197 Size: 3



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionCloudSampleAttribute Size 64
// Inherited 64 bytes 
class UMaterialExpressionCloudSampleAttribute : public UMaterialExpression
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.InterpTrackSlomo Size 144
// Inherited 144 bytes 
class UInterpTrackSlomo : public UInterpTrackFloatBase
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionDDX Size 88
// Inherited 64 bytes 
class UMaterialExpressionDDX : public UMaterialExpression
{

 public: 
	struct FExpressionInput Value;  // Offset: 64 Size: 20
	char pad_84[4];  // Offset: 84 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleKillHeight Size 104
// Inherited 48 bytes 
class UParticleModuleKillHeight : public UParticleModuleKillBase
{

 public: 
	struct FRawDistributionFloat Height;  // Offset: 48 Size: 48
	char bAbsolute : 1;  // Offset: 96 Size: 1
	char bFloor : 1;  // Offset: 96 Size: 1
	char bApplyPSysScale : 1;  // Offset: 96 Size: 1
	char pad_96_1 : 5;  // Offset: 96 Size: 1
	char pad_97[8];  // Offset: 97 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionRuntimeVirtualTextureReplace Size 104
// Inherited 64 bytes 
class UMaterialExpressionRuntimeVirtualTextureReplace : public UMaterialExpression
{

 public: 
	struct FExpressionInput Default;  // Offset: 64 Size: 20
	struct FExpressionInput VirtualTextureOutput;  // Offset: 84 Size: 20



 // Functions 
 public:
}; 
 
 


//Class Engine.InterpTrackToggle Size 136
// Inherited 112 bytes 
class UInterpTrackToggle : public UInterpTrack
{

 public: 
	struct TArray<struct FToggleTrackKey> ToggleTrack;  // Offset: 112 Size: 16
	char bActivateSystemEachUpdate : 1;  // Offset: 128 Size: 1
	char bActivateWithJustAttachedFlag : 1;  // Offset: 128 Size: 1
	char bFireEventsWhenForwards : 1;  // Offset: 128 Size: 1
	char bFireEventsWhenBackwards : 1;  // Offset: 128 Size: 1
	char bFireEventsWhenJumpingForwards : 1;  // Offset: 128 Size: 1
	char pad_128_1 : 3;  // Offset: 128 Size: 1
	char pad_129[8];  // Offset: 129 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleBeamSource Size 280
// Inherited 48 bytes 
class UParticleModuleBeamSource : public UParticleModuleBeamBase
{

 public: 
	enum class Beam2SourceTargetMethod SourceMethod;  // Offset: 48 Size: 1
	char pad_49[3];  // Offset: 49 Size: 3
	struct FName SourceName;  // Offset: 52 Size: 8
	char bSourceAbsolute : 1;  // Offset: 60 Size: 1
	char pad_60_1 : 7;  // Offset: 60 Size: 1
	char pad_61[4];  // Offset: 61 Size: 4
	struct FRawDistributionVector Source;  // Offset: 64 Size: 72
	char bLockSource : 1;  // Offset: 136 Size: 1
	char pad_136_1 : 7;  // Offset: 136 Size: 1
	char pad_137[4];  // Offset: 137 Size: 4
	enum class Beam2SourceTargetTangentMethod SourceTangentMethod;  // Offset: 140 Size: 1
	char pad_141[3];  // Offset: 141 Size: 3
	struct FRawDistributionVector SourceTangent;  // Offset: 144 Size: 72
	char bLockSourceTangent : 1;  // Offset: 216 Size: 1
	char pad_216_1 : 7;  // Offset: 216 Size: 1
	char pad_217[8];  // Offset: 217 Size: 8
	struct FRawDistributionFloat SourceStrength;  // Offset: 224 Size: 48
	char bLockSourceStength : 1;  // Offset: 272 Size: 1
	char pad_272_1 : 7;  // Offset: 272 Size: 1
	char pad_273[8];  // Offset: 273 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.InterpTrackVectorProp Size 152
// Inherited 144 bytes 
class UInterpTrackVectorProp : public UInterpTrackVectorBase
{

 public: 
	struct FName PropertyName;  // Offset: 144 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.InterpTrackVisibility Size 136
// Inherited 112 bytes 
class UInterpTrackVisibility : public UInterpTrack
{

 public: 
	struct TArray<struct FVisibilityTrackKey> VisibilityTrack;  // Offset: 112 Size: 16
	char bFireEventsWhenForwards : 1;  // Offset: 128 Size: 1
	char bFireEventsWhenBackwards : 1;  // Offset: 128 Size: 1
	char bFireEventsWhenJumpingForwards : 1;  // Offset: 128 Size: 1
	char pad_128_1 : 5;  // Offset: 128 Size: 1
	char pad_129[8];  // Offset: 129 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.KismetGuidLibrary Size 40
// Inherited 40 bytes 
class UKismetGuidLibrary : public UBlueprintFunctionLibrary
{

 public: 



 // Functions 
 public:
	void Parse_StringToGuid(struct FString GuidString, struct FGuid& OutGuid, bool& Success); // Function Engine.KismetGuidLibrary.Parse_StringToGuid
	bool NotEqual_GuidGuid(struct FGuid& A, struct FGuid& B); // Function Engine.KismetGuidLibrary.NotEqual_GuidGuid
	struct FGuid NewGuid(); // Function Engine.KismetGuidLibrary.NewGuid
	bool IsValid_Guid(struct FGuid& InGuid); // Function Engine.KismetGuidLibrary.IsValid_Guid
	void Invalidate_Guid(struct FGuid& InGuid); // Function Engine.KismetGuidLibrary.Invalidate_Guid
	bool EqualEqual_GuidGuid(struct FGuid& A, struct FGuid& B); // Function Engine.KismetGuidLibrary.EqualEqual_GuidGuid
	struct FString Conv_GuidToString(struct FGuid& InGuid); // Function Engine.KismetGuidLibrary.Conv_GuidToString
}; 
 
 


//Class Engine.ParticleModuleColor_Seeded Size 208
// Inherited 176 bytes 
class UParticleModuleColor_Seeded : public UParticleModuleColor
{

 public: 
	struct FParticleRandomSeedInfo RandomSeedInfo;  // Offset: 176 Size: 32



 // Functions 
 public:
}; 
 
 


//Class Engine.KismetInputLibrary Size 40
// Inherited 40 bytes 
class UKismetInputLibrary : public UBlueprintFunctionLibrary
{

 public: 



 // Functions 
 public:
	bool PointerEvent_IsTouchEvent(struct FPointerEvent& Input); // Function Engine.KismetInputLibrary.PointerEvent_IsTouchEvent
	bool PointerEvent_IsMouseButtonDown(struct FPointerEvent& Input, struct FKey MouseButton); // Function Engine.KismetInputLibrary.PointerEvent_IsMouseButtonDown
	float PointerEvent_GetWheelDelta(struct FPointerEvent& Input); // Function Engine.KismetInputLibrary.PointerEvent_GetWheelDelta
	int32_t PointerEvent_GetUserIndex(struct FPointerEvent& Input); // Function Engine.KismetInputLibrary.PointerEvent_GetUserIndex
	int32_t PointerEvent_GetTouchpadIndex(struct FPointerEvent& Input); // Function Engine.KismetInputLibrary.PointerEvent_GetTouchpadIndex
	struct FVector2D PointerEvent_GetScreenSpacePosition(struct FPointerEvent& Input); // Function Engine.KismetInputLibrary.PointerEvent_GetScreenSpacePosition
	int32_t PointerEvent_GetPointerIndex(struct FPointerEvent& Input); // Function Engine.KismetInputLibrary.PointerEvent_GetPointerIndex
	struct FVector2D PointerEvent_GetLastScreenSpacePosition(struct FPointerEvent& Input); // Function Engine.KismetInputLibrary.PointerEvent_GetLastScreenSpacePosition
	enum class ESlateGesture PointerEvent_GetGestureType(struct FPointerEvent& Input); // Function Engine.KismetInputLibrary.PointerEvent_GetGestureType
	struct FVector2D PointerEvent_GetGestureDelta(struct FPointerEvent& Input); // Function Engine.KismetInputLibrary.PointerEvent_GetGestureDelta
	struct FKey PointerEvent_GetEffectingButton(struct FPointerEvent& Input); // Function Engine.KismetInputLibrary.PointerEvent_GetEffectingButton
	struct FVector2D PointerEvent_GetCursorDelta(struct FPointerEvent& Input); // Function Engine.KismetInputLibrary.PointerEvent_GetCursorDelta
	bool Key_IsVectorAxis(struct FKey& Key); // Function Engine.KismetInputLibrary.Key_IsVectorAxis
	bool Key_IsValid(struct FKey& Key); // Function Engine.KismetInputLibrary.Key_IsValid
	bool Key_IsMouseButton(struct FKey& Key); // Function Engine.KismetInputLibrary.Key_IsMouseButton
	bool Key_IsModifierKey(struct FKey& Key); // Function Engine.KismetInputLibrary.Key_IsModifierKey
	bool Key_IsKeyboardKey(struct FKey& Key); // Function Engine.KismetInputLibrary.Key_IsKeyboardKey
	bool Key_IsGamepadKey(struct FKey& Key); // Function Engine.KismetInputLibrary.Key_IsGamepadKey
	bool Key_IsDigital(struct FKey& Key); // Function Engine.KismetInputLibrary.Key_IsDigital
	bool Key_IsButtonAxis(struct FKey& Key); // Function Engine.KismetInputLibrary.Key_IsButtonAxis
	bool Key_IsAxis3D(struct FKey& Key); // Function Engine.KismetInputLibrary.Key_IsAxis3D
	bool Key_IsAxis2D(struct FKey& Key); // Function Engine.KismetInputLibrary.Key_IsAxis2D
	bool Key_IsAxis1D(struct FKey& Key); // Function Engine.KismetInputLibrary.Key_IsAxis1D
	bool Key_IsAnalog(struct FKey& Key); // Function Engine.KismetInputLibrary.Key_IsAnalog
	enum class EUINavigation Key_GetNavigationDirectionFromKey(struct FKeyEvent& InKeyEvent); // Function Engine.KismetInputLibrary.Key_GetNavigationDirectionFromKey
	enum class EUINavigation Key_GetNavigationDirectionFromAnalog(struct FAnalogInputEvent& InAnalogEvent); // Function Engine.KismetInputLibrary.Key_GetNavigationDirectionFromAnalog
	enum class EUINavigationAction Key_GetNavigationActionFromKey(struct FKeyEvent& InKeyEvent); // Function Engine.KismetInputLibrary.Key_GetNavigationActionFromKey
	enum class EUINavigationAction Key_GetNavigationAction(struct FKey& InKey); // Function Engine.KismetInputLibrary.Key_GetNavigationAction
	struct FText Key_GetDisplayName(struct FKey& Key); // Function Engine.KismetInputLibrary.Key_GetDisplayName
	bool InputEvent_IsShiftDown(struct FInputEvent& Input); // Function Engine.KismetInputLibrary.InputEvent_IsShiftDown
	bool InputEvent_IsRightShiftDown(struct FInputEvent& Input); // Function Engine.KismetInputLibrary.InputEvent_IsRightShiftDown
	bool InputEvent_IsRightControlDown(struct FInputEvent& Input); // Function Engine.KismetInputLibrary.InputEvent_IsRightControlDown
	bool InputEvent_IsRightCommandDown(struct FInputEvent& Input); // Function Engine.KismetInputLibrary.InputEvent_IsRightCommandDown
	bool InputEvent_IsRightAltDown(struct FInputEvent& Input); // Function Engine.KismetInputLibrary.InputEvent_IsRightAltDown
	bool InputEvent_IsRepeat(struct FInputEvent& Input); // Function Engine.KismetInputLibrary.InputEvent_IsRepeat
	bool InputEvent_IsLeftShiftDown(struct FInputEvent& Input); // Function Engine.KismetInputLibrary.InputEvent_IsLeftShiftDown
	bool InputEvent_IsLeftControlDown(struct FInputEvent& Input); // Function Engine.KismetInputLibrary.InputEvent_IsLeftControlDown
	bool InputEvent_IsLeftCommandDown(struct FInputEvent& Input); // Function Engine.KismetInputLibrary.InputEvent_IsLeftCommandDown
	bool InputEvent_IsLeftAltDown(struct FInputEvent& Input); // Function Engine.KismetInputLibrary.InputEvent_IsLeftAltDown
	bool InputEvent_IsControlDown(struct FInputEvent& Input); // Function Engine.KismetInputLibrary.InputEvent_IsControlDown
	bool InputEvent_IsCommandDown(struct FInputEvent& Input); // Function Engine.KismetInputLibrary.InputEvent_IsCommandDown
	bool InputEvent_IsAltDown(struct FInputEvent& Input); // Function Engine.KismetInputLibrary.InputEvent_IsAltDown
	struct FText InputChord_GetDisplayName(struct FInputChord& Key); // Function Engine.KismetInputLibrary.InputChord_GetDisplayName
	int32_t GetUserIndex(struct FKeyEvent& Input); // Function Engine.KismetInputLibrary.GetUserIndex
	struct FKey GetKey(struct FKeyEvent& Input); // Function Engine.KismetInputLibrary.GetKey
	float GetAnalogValue(struct FAnalogInputEvent& Input); // Function Engine.KismetInputLibrary.GetAnalogValue
	bool EqualEqual_KeyKey(struct FKey A, struct FKey B); // Function Engine.KismetInputLibrary.EqualEqual_KeyKey
	bool EqualEqual_InputChordInputChord(struct FInputChord A, struct FInputChord B); // Function Engine.KismetInputLibrary.EqualEqual_InputChordInputChord
	void CalibrateTilt(); // Function Engine.KismetInputLibrary.CalibrateTilt
}; 
 
 


//Class Engine.KismetMathLibrary Size 40
// Inherited 40 bytes 
class UKismetMathLibrary : public UBlueprintFunctionLibrary
{

 public: 



 // Functions 
 public:
	int32_t Xor_IntInt(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.Xor_IntInt
	int64_t Xor_Int64Int64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.Xor_Int64Int64
	int32_t Wrap(int32_t Value, int32_t Min, int32_t Max); // Function Engine.KismetMathLibrary.Wrap
	struct FVector WeightedMovingAverage_FVector(struct FVector CurrentSample, struct FVector PreviousSample, float weight); // Function Engine.KismetMathLibrary.WeightedMovingAverage_FVector
	struct FRotator WeightedMovingAverage_FRotator(struct FRotator CurrentSample, struct FRotator PreviousSample, float weight); // Function Engine.KismetMathLibrary.WeightedMovingAverage_FRotator
	float WeightedMovingAverage_Float(float CurrentSample, float PreviousSample, float weight); // Function Engine.KismetMathLibrary.WeightedMovingAverage_Float
	float VSizeXYSquared(struct FVector A); // Function Engine.KismetMathLibrary.VSizeXYSquared
	float VSizeXY(struct FVector A); // Function Engine.KismetMathLibrary.VSizeXY
	float VSizeSquared(struct FVector A); // Function Engine.KismetMathLibrary.VSizeSquared
	float VSize2DSquared(struct FVector2D A); // Function Engine.KismetMathLibrary.VSize2DSquared
	float VSize2D(struct FVector2D A); // Function Engine.KismetMathLibrary.VSize2D
	float VSize(struct FVector A); // Function Engine.KismetMathLibrary.VSize
	struct FVector VLerp(struct FVector A, struct FVector B, float Alpha); // Function Engine.KismetMathLibrary.VLerp
	struct FVector VInterpTo_Constant(struct FVector Current, struct FVector Target, float DeltaTime, float InterpSpeed); // Function Engine.KismetMathLibrary.VInterpTo_Constant
	struct FVector VInterpTo(struct FVector Current, struct FVector Target, float DeltaTime, float InterpSpeed); // Function Engine.KismetMathLibrary.VInterpTo
	struct FVector VectorSpringInterp(struct FVector Current, struct FVector Target, struct FVectorSpringState& SpringState, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass); // Function Engine.KismetMathLibrary.VectorSpringInterp
	struct FVector Vector_Zero(); // Function Engine.KismetMathLibrary.Vector_Zero
	struct FVector Vector_Up(); // Function Engine.KismetMathLibrary.Vector_Up
	void Vector_UnwindEuler(struct FVector& A); // Function Engine.KismetMathLibrary.Vector_UnwindEuler
	struct FVector2D Vector_UnitCartesianToSpherical(struct FVector A); // Function Engine.KismetMathLibrary.Vector_UnitCartesianToSpherical
	struct FVector Vector_ToRadians(struct FVector A); // Function Engine.KismetMathLibrary.Vector_ToRadians
	struct FVector Vector_ToDegrees(struct FVector A); // Function Engine.KismetMathLibrary.Vector_ToDegrees
	struct FVector Vector_SnappedToGrid(struct FVector InVect, float InGridSize); // Function Engine.KismetMathLibrary.Vector_SnappedToGrid
	void Vector_Set(struct FVector& A, float X, float Y, float Z); // Function Engine.KismetMathLibrary.Vector_Set
	struct FVector Vector_Right(); // Function Engine.KismetMathLibrary.Vector_Right
	struct FVector Vector_Reciprocal(struct FVector& A); // Function Engine.KismetMathLibrary.Vector_Reciprocal
	struct FVector Vector_ProjectOnToNormal(struct FVector V, struct FVector InNormal); // Function Engine.KismetMathLibrary.Vector_ProjectOnToNormal
	struct FVector Vector_One(); // Function Engine.KismetMathLibrary.Vector_One
	struct FVector Vector_NormalUnsafe(struct FVector& A); // Function Engine.KismetMathLibrary.Vector_NormalUnsafe
	void Vector_Normalize(struct FVector& A, float Tolerance); // Function Engine.KismetMathLibrary.Vector_Normalize
	struct FVector Vector_Normal2D(struct FVector A, float Tolerance); // Function Engine.KismetMathLibrary.Vector_Normal2D
	struct FVector Vector_MirrorByPlane(struct FVector A, struct FPlane& InPlane); // Function Engine.KismetMathLibrary.Vector_MirrorByPlane
	struct FVector Vector_Left(); // Function Engine.KismetMathLibrary.Vector_Left
	bool Vector_IsZero(struct FVector& A); // Function Engine.KismetMathLibrary.Vector_IsZero
	bool Vector_IsUnit(struct FVector& A, float SquaredLenthTolerance); // Function Engine.KismetMathLibrary.Vector_IsUnit
	bool Vector_IsUniform(struct FVector& A, float Tolerance); // Function Engine.KismetMathLibrary.Vector_IsUniform
	bool Vector_IsNormal(struct FVector& A); // Function Engine.KismetMathLibrary.Vector_IsNormal
	bool Vector_IsNearlyZero(struct FVector& A, float Tolerance); // Function Engine.KismetMathLibrary.Vector_IsNearlyZero
	bool Vector_IsNAN(struct FVector& A); // Function Engine.KismetMathLibrary.Vector_IsNAN
	float Vector_HeadingAngle(struct FVector A); // Function Engine.KismetMathLibrary.Vector_HeadingAngle
	struct FVector Vector_GetSignVector(struct FVector A); // Function Engine.KismetMathLibrary.Vector_GetSignVector
	struct FVector Vector_GetProjection(struct FVector A); // Function Engine.KismetMathLibrary.Vector_GetProjection
	float Vector_GetAbsMin(struct FVector A); // Function Engine.KismetMathLibrary.Vector_GetAbsMin
	float Vector_GetAbsMax(struct FVector A); // Function Engine.KismetMathLibrary.Vector_GetAbsMax
	struct FVector Vector_GetAbs(struct FVector A); // Function Engine.KismetMathLibrary.Vector_GetAbs
	struct FVector Vector_Forward(); // Function Engine.KismetMathLibrary.Vector_Forward
	struct FVector Vector_Down(); // Function Engine.KismetMathLibrary.Vector_Down
	float Vector_DistanceSquared(struct FVector v1, struct FVector v2); // Function Engine.KismetMathLibrary.Vector_DistanceSquared
	float Vector_Distance2DSquared(struct FVector v1, struct FVector v2); // Function Engine.KismetMathLibrary.Vector_Distance2DSquared
	float Vector_Distance2D(struct FVector v1, struct FVector v2); // Function Engine.KismetMathLibrary.Vector_Distance2D
	float Vector_Distance(struct FVector v1, struct FVector v2); // Function Engine.KismetMathLibrary.Vector_Distance
	float Vector_CosineAngle2D(struct FVector A, struct FVector B); // Function Engine.KismetMathLibrary.Vector_CosineAngle2D
	struct FVector Vector_ComponentMin(struct FVector A, struct FVector B); // Function Engine.KismetMathLibrary.Vector_ComponentMin
	struct FVector Vector_ComponentMax(struct FVector A, struct FVector B); // Function Engine.KismetMathLibrary.Vector_ComponentMax
	struct FVector Vector_ClampSizeMax2D(struct FVector A, float Max); // Function Engine.KismetMathLibrary.Vector_ClampSizeMax2D
	struct FVector Vector_ClampSizeMax(struct FVector A, float Max); // Function Engine.KismetMathLibrary.Vector_ClampSizeMax
	struct FVector Vector_ClampSize2D(struct FVector A, float Min, float Max); // Function Engine.KismetMathLibrary.Vector_ClampSize2D
	struct FVector Vector_BoundedToCube(struct FVector InVect, float InRadius); // Function Engine.KismetMathLibrary.Vector_BoundedToCube
	struct FVector Vector_BoundedToBox(struct FVector InVect, struct FVector InBoxMin, struct FVector InBoxMax); // Function Engine.KismetMathLibrary.Vector_BoundedToBox
	struct FVector Vector_Backward(); // Function Engine.KismetMathLibrary.Vector_Backward
	void Vector_Assign(struct FVector& A, struct FVector& InVector); // Function Engine.KismetMathLibrary.Vector_Assign
	void Vector_AddBounded(struct FVector& A, struct FVector InAddVect, float InRadius); // Function Engine.KismetMathLibrary.Vector_AddBounded
	struct FVector4 Vector4_Zero(); // Function Engine.KismetMathLibrary.Vector4_Zero
	float Vector4_SizeSquared3(struct FVector4& A); // Function Engine.KismetMathLibrary.Vector4_SizeSquared3
	float Vector4_SizeSquared(struct FVector4& A); // Function Engine.KismetMathLibrary.Vector4_SizeSquared
	float Vector4_Size3(struct FVector4& A); // Function Engine.KismetMathLibrary.Vector4_Size3
	float Vector4_Size(struct FVector4& A); // Function Engine.KismetMathLibrary.Vector4_Size
	void Vector4_Set(struct FVector4& A, float X, float Y, float Z, float W); // Function Engine.KismetMathLibrary.Vector4_Set
	struct FVector4 Vector4_NormalUnsafe3(struct FVector4& A); // Function Engine.KismetMathLibrary.Vector4_NormalUnsafe3
	void Vector4_Normalize3(struct FVector4& A, float Tolerance); // Function Engine.KismetMathLibrary.Vector4_Normalize3
	struct FVector4 Vector4_Normal3(struct FVector4& A, float Tolerance); // Function Engine.KismetMathLibrary.Vector4_Normal3
	struct FVector4 Vector4_Negated(struct FVector4& A); // Function Engine.KismetMathLibrary.Vector4_Negated
	struct FVector4 Vector4_MirrorByVector3(struct FVector4& Direction, struct FVector4& SurfaceNormal); // Function Engine.KismetMathLibrary.Vector4_MirrorByVector3
	bool Vector4_IsZero(struct FVector4& A); // Function Engine.KismetMathLibrary.Vector4_IsZero
	bool Vector4_IsUnit3(struct FVector4& A, float SquaredLenthTolerance); // Function Engine.KismetMathLibrary.Vector4_IsUnit3
	bool Vector4_IsNormal3(struct FVector4& A); // Function Engine.KismetMathLibrary.Vector4_IsNormal3
	bool Vector4_IsNearlyZero3(struct FVector4& A, float Tolerance); // Function Engine.KismetMathLibrary.Vector4_IsNearlyZero3
	bool Vector4_IsNAN(struct FVector4& A); // Function Engine.KismetMathLibrary.Vector4_IsNAN
	float Vector4_DotProduct3(struct FVector4& A, struct FVector4& B); // Function Engine.KismetMathLibrary.Vector4_DotProduct3
	float Vector4_DotProduct(struct FVector4& A, struct FVector4& B); // Function Engine.KismetMathLibrary.Vector4_DotProduct
	struct FVector4 Vector4_CrossProduct3(struct FVector4& A, struct FVector4& B); // Function Engine.KismetMathLibrary.Vector4_CrossProduct3
	void Vector4_Assign(struct FVector4& A, struct FVector4& InVector); // Function Engine.KismetMathLibrary.Vector4_Assign
	struct FVector2D Vector2DInterpTo_Constant(struct FVector2D Current, struct FVector2D Target, float DeltaTime, float InterpSpeed); // Function Engine.KismetMathLibrary.Vector2DInterpTo_Constant
	struct FVector2D Vector2DInterpTo(struct FVector2D Current, struct FVector2D Target, float DeltaTime, float InterpSpeed); // Function Engine.KismetMathLibrary.Vector2DInterpTo
	struct FVector2D Vector2D_Zero(); // Function Engine.KismetMathLibrary.Vector2D_Zero
	struct FVector2D Vector2D_Unit45Deg(); // Function Engine.KismetMathLibrary.Vector2D_Unit45Deg
	struct FVector2D Vector2D_One(); // Function Engine.KismetMathLibrary.Vector2D_One
	struct FVector VEase(struct FVector A, struct FVector B, float Alpha, enum class EEasingFunc EasingFunc, float BlendExp, int32_t steps); // Function Engine.KismetMathLibrary.VEase
	struct FDateTime UtcNow(); // Function Engine.KismetMathLibrary.UtcNow
	struct FVector4 TransformVector4(struct FMatrix& Matrix, struct FVector4& Vec4); // Function Engine.KismetMathLibrary.TransformVector4
	struct FRotator TransformRotation(struct FTransform& T, struct FRotator Rotation); // Function Engine.KismetMathLibrary.TransformRotation
	struct FVector TransformLocation(struct FTransform& T, struct FVector Location); // Function Engine.KismetMathLibrary.TransformLocation
	struct FVector TransformDirection(struct FTransform& T, struct FVector Direction); // Function Engine.KismetMathLibrary.TransformDirection
	float Transform_Determinant(struct FTransform& Transform); // Function Engine.KismetMathLibrary.Transform_Determinant
	struct FVector2D ToSign2D(struct FVector2D A); // Function Engine.KismetMathLibrary.ToSign2D
	struct FVector2D ToRounded2D(struct FVector2D A); // Function Engine.KismetMathLibrary.ToRounded2D
	void ToDirectionAndLength2D(struct FVector2D A, struct FVector2D& OutDir, float& OutLength); // Function Engine.KismetMathLibrary.ToDirectionAndLength2D
	struct FDateTime Today(); // Function Engine.KismetMathLibrary.Today
	struct FTransform TLerp(struct FTransform& A, struct FTransform& B, float Alpha, enum class ELerpInterpolationMode InterpMode); // Function Engine.KismetMathLibrary.TLerp
	struct FTransform TInterpTo(struct FTransform& Current, struct FTransform& Target, float DeltaTime, float InterpSpeed); // Function Engine.KismetMathLibrary.TInterpTo
	struct FTimespan TimespanZeroValue(); // Function Engine.KismetMathLibrary.TimespanZeroValue
	float TimespanRatio(struct FTimespan A, struct FTimespan B); // Function Engine.KismetMathLibrary.TimespanRatio
	struct FTimespan TimespanMinValue(); // Function Engine.KismetMathLibrary.TimespanMinValue
	struct FTimespan TimespanMaxValue(); // Function Engine.KismetMathLibrary.TimespanMaxValue
	bool TimespanFromString(struct FString TimespanString, struct FTimespan& Result); // Function Engine.KismetMathLibrary.TimespanFromString
	struct FTransform TEase(struct FTransform& A, struct FTransform& B, float Alpha, enum class EEasingFunc EasingFunc, float BlendExp, int32_t steps); // Function Engine.KismetMathLibrary.TEase
	float Tan(float A); // Function Engine.KismetMathLibrary.Tan
	struct FVector Subtract_VectorVector(struct FVector A, struct FVector B); // Function Engine.KismetMathLibrary.Subtract_VectorVector
	struct FVector Subtract_VectorInt(struct FVector A, int32_t B); // Function Engine.KismetMathLibrary.Subtract_VectorInt
	struct FVector Subtract_VectorFloat(struct FVector A, float B); // Function Engine.KismetMathLibrary.Subtract_VectorFloat
	struct FVector4 Subtract_Vector4Vector4(struct FVector4& A, struct FVector4& B); // Function Engine.KismetMathLibrary.Subtract_Vector4Vector4
	struct FVector2D Subtract_Vector2DVector2D(struct FVector2D A, struct FVector2D B); // Function Engine.KismetMathLibrary.Subtract_Vector2DVector2D
	struct FVector2D Subtract_Vector2DFloat(struct FVector2D A, float B); // Function Engine.KismetMathLibrary.Subtract_Vector2DFloat
	struct FTimespan Subtract_TimespanTimespan(struct FTimespan A, struct FTimespan B); // Function Engine.KismetMathLibrary.Subtract_TimespanTimespan
	struct FQuat Subtract_QuatQuat(struct FQuat& A, struct FQuat& B); // Function Engine.KismetMathLibrary.Subtract_QuatQuat
	struct FLinearColor Subtract_LinearColorLinearColor(struct FLinearColor A, struct FLinearColor B); // Function Engine.KismetMathLibrary.Subtract_LinearColorLinearColor
	struct FIntPoint Subtract_IntPointIntPoint(struct FIntPoint A, struct FIntPoint B); // Function Engine.KismetMathLibrary.Subtract_IntPointIntPoint
	struct FIntPoint Subtract_IntPointInt(struct FIntPoint A, int32_t B); // Function Engine.KismetMathLibrary.Subtract_IntPointInt
	int32_t Subtract_IntInt(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.Subtract_IntInt
	int64_t Subtract_Int64Int64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.Subtract_Int64Int64
	float Subtract_FloatFloat(float A, float B); // Function Engine.KismetMathLibrary.Subtract_FloatFloat
	struct FDateTime Subtract_DateTimeTimespan(struct FDateTime A, struct FTimespan B); // Function Engine.KismetMathLibrary.Subtract_DateTimeTimespan
	struct FTimespan Subtract_DateTimeDateTime(struct FDateTime A, struct FDateTime B); // Function Engine.KismetMathLibrary.Subtract_DateTimeDateTime
	char Subtract_ByteByte(char A, char B); // Function Engine.KismetMathLibrary.Subtract_ByteByte
	float Square(float A); // Function Engine.KismetMathLibrary.Square
	float Sqrt(float A); // Function Engine.KismetMathLibrary.Sqrt
	struct FVector Spherical2DToUnitCartesian(struct FVector2D A); // Function Engine.KismetMathLibrary.Spherical2DToUnitCartesian
	float Sin(float A); // Function Engine.KismetMathLibrary.Sin
	int64_t SignOfInteger64(int64_t A); // Function Engine.KismetMathLibrary.SignOfInteger64
	int32_t SignOfInteger(int32_t A); // Function Engine.KismetMathLibrary.SignOfInteger
	float SignOfFloat(float A); // Function Engine.KismetMathLibrary.SignOfFloat
	void SetRandomStreamSeed(struct FRandomStream& Stream, int32_t NewSeed); // Function Engine.KismetMathLibrary.SetRandomStreamSeed
	void Set2D(struct FVector2D& A, float X, float Y); // Function Engine.KismetMathLibrary.Set2D
	struct FVector SelectVector(struct FVector A, struct FVector B, bool bPickA); // Function Engine.KismetMathLibrary.SelectVector
	struct FTransform SelectTransform(struct FTransform& A, struct FTransform& B, bool bPickA); // Function Engine.KismetMathLibrary.SelectTransform
	struct FString SelectString(struct FString A, struct FString B, bool bPickA); // Function Engine.KismetMathLibrary.SelectString
	struct FRotator SelectRotator(struct FRotator A, struct FRotator B, bool bPickA); // Function Engine.KismetMathLibrary.SelectRotator
	struct UObject* SelectObject(struct UObject* A, struct UObject* B, bool bSelectA); // Function Engine.KismetMathLibrary.SelectObject
	int32_t SelectInt(int32_t A, int32_t B, bool bPickA); // Function Engine.KismetMathLibrary.SelectInt
	float SelectFloat(float A, float B, bool bPickA); // Function Engine.KismetMathLibrary.SelectFloat
	struct FLinearColor SelectColor(struct FLinearColor A, struct FLinearColor B, bool bPickA); // Function Engine.KismetMathLibrary.SelectColor
	UObject* SelectClass(UObject* A, UObject* B, bool bSelectA); // Function Engine.KismetMathLibrary.SelectClass
	void SeedRandomStream(struct FRandomStream& Stream); // Function Engine.KismetMathLibrary.SeedRandomStream
	float SafeDivide(float A, float B); // Function Engine.KismetMathLibrary.SafeDivide
	int64_t Round64(float A); // Function Engine.KismetMathLibrary.Round64
	int32_t Round(float A); // Function Engine.KismetMathLibrary.Round
	struct FRotator RotatorFromAxisAndAngle(struct FVector Axis, float Angle); // Function Engine.KismetMathLibrary.RotatorFromAxisAndAngle
	struct FVector RotateAngleAxis(struct FVector InVect, float AngleDeg, struct FVector Axis); // Function Engine.KismetMathLibrary.RotateAngleAxis
	struct FRotator RLerp(struct FRotator A, struct FRotator B, float Alpha, bool bShortestPath); // Function Engine.KismetMathLibrary.RLerp
	struct FRotator RInterpTo_Constant(struct FRotator Current, struct FRotator Target, float DeltaTime, float InterpSpeed); // Function Engine.KismetMathLibrary.RInterpTo_Constant
	struct FRotator RInterpTo(struct FRotator Current, struct FRotator Target, float DeltaTime, float InterpSpeed); // Function Engine.KismetMathLibrary.RInterpTo
	void RGBToHSV_Vector(struct FLinearColor RGB, struct FLinearColor& HSV); // Function Engine.KismetMathLibrary.RGBToHSV_Vector
	void RGBToHSV(struct FLinearColor InColor, float& H, float& S, float& V, float& A); // Function Engine.KismetMathLibrary.RGBToHSV
	struct FLinearColor RGBLinearToHSV(struct FLinearColor RGB); // Function Engine.KismetMathLibrary.RGBLinearToHSV
	void ResetVectorSpringState(struct FVectorSpringState& SpringState); // Function Engine.KismetMathLibrary.ResetVectorSpringState
	void ResetRandomStream(struct FRandomStream& Stream); // Function Engine.KismetMathLibrary.ResetRandomStream
	void ResetFloatSpringState(struct FFloatSpringState& SpringState); // Function Engine.KismetMathLibrary.ResetFloatSpringState
	struct FRotator REase(struct FRotator A, struct FRotator B, float Alpha, bool bShortestPath, enum class EEasingFunc EasingFunc, float BlendExp, int32_t steps); // Function Engine.KismetMathLibrary.REase
	struct FVector RandomUnitVectorInEllipticalConeInRadiansFromStream(struct FVector& ConeDir, float MaxYawInRadians, float MaxPitchInRadians, struct FRandomStream& Stream); // Function Engine.KismetMathLibrary.RandomUnitVectorInEllipticalConeInRadiansFromStream
	struct FVector RandomUnitVectorInEllipticalConeInRadians(struct FVector ConeDir, float MaxYawInRadians, float MaxPitchInRadians); // Function Engine.KismetMathLibrary.RandomUnitVectorInEllipticalConeInRadians
	struct FVector RandomUnitVectorInEllipticalConeInDegreesFromStream(struct FVector& ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees, struct FRandomStream& Stream); // Function Engine.KismetMathLibrary.RandomUnitVectorInEllipticalConeInDegreesFromStream
	struct FVector RandomUnitVectorInEllipticalConeInDegrees(struct FVector ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees); // Function Engine.KismetMathLibrary.RandomUnitVectorInEllipticalConeInDegrees
	struct FVector RandomUnitVectorInConeInRadiansFromStream(struct FVector& ConeDir, float ConeHalfAngleInRadians, struct FRandomStream& Stream); // Function Engine.KismetMathLibrary.RandomUnitVectorInConeInRadiansFromStream
	struct FVector RandomUnitVectorInConeInRadians(struct FVector ConeDir, float ConeHalfAngleInRadians); // Function Engine.KismetMathLibrary.RandomUnitVectorInConeInRadians
	struct FVector RandomUnitVectorInConeInDegreesFromStream(struct FVector& ConeDir, float ConeHalfAngleInDegrees, struct FRandomStream& Stream); // Function Engine.KismetMathLibrary.RandomUnitVectorInConeInDegreesFromStream
	struct FVector RandomUnitVectorInConeInDegrees(struct FVector ConeDir, float ConeHalfAngleInDegrees); // Function Engine.KismetMathLibrary.RandomUnitVectorInConeInDegrees
	struct FVector RandomUnitVectorFromStream(struct FRandomStream& Stream); // Function Engine.KismetMathLibrary.RandomUnitVectorFromStream
	struct FVector RandomUnitVector(); // Function Engine.KismetMathLibrary.RandomUnitVector
	struct FRotator RandomRotatorFromStream(bool bRoll, struct FRandomStream& Stream); // Function Engine.KismetMathLibrary.RandomRotatorFromStream
	struct FRotator RandomRotator(bool bRoll); // Function Engine.KismetMathLibrary.RandomRotator
	struct FVector RandomPointInBoundingBox(struct FVector Origin, struct FVector BoxExtent); // Function Engine.KismetMathLibrary.RandomPointInBoundingBox
	int32_t RandomIntegerInRangeFromStream(int32_t Min, int32_t Max, struct FRandomStream& Stream); // Function Engine.KismetMathLibrary.RandomIntegerInRangeFromStream
	int32_t RandomIntegerInRange(int32_t Min, int32_t Max); // Function Engine.KismetMathLibrary.RandomIntegerInRange
	int32_t RandomIntegerFromStream(int32_t Max, struct FRandomStream& Stream); // Function Engine.KismetMathLibrary.RandomIntegerFromStream
	int64_t RandomInteger64InRange(int64_t Min, int64_t Max); // Function Engine.KismetMathLibrary.RandomInteger64InRange
	int64_t RandomInteger64(int64_t Max); // Function Engine.KismetMathLibrary.RandomInteger64
	int32_t RandomInteger(int32_t Max); // Function Engine.KismetMathLibrary.RandomInteger
	float RandomFloatInRangeFromStream(float Min, float Max, struct FRandomStream& Stream); // Function Engine.KismetMathLibrary.RandomFloatInRangeFromStream
	float RandomFloatInRange(float Min, float Max); // Function Engine.KismetMathLibrary.RandomFloatInRange
	float RandomFloatFromStream(struct FRandomStream& Stream); // Function Engine.KismetMathLibrary.RandomFloatFromStream
	float RandomFloat(); // Function Engine.KismetMathLibrary.RandomFloat
	bool RandomBoolWithWeightFromStream(float weight, struct FRandomStream& RandomStream); // Function Engine.KismetMathLibrary.RandomBoolWithWeightFromStream
	bool RandomBoolWithWeight(float weight); // Function Engine.KismetMathLibrary.RandomBoolWithWeight
	bool RandomBoolFromStream(struct FRandomStream& Stream); // Function Engine.KismetMathLibrary.RandomBoolFromStream
	bool RandomBool(); // Function Engine.KismetMathLibrary.RandomBool
	float RadiansToDegrees(float A); // Function Engine.KismetMathLibrary.RadiansToDegrees
	struct FVector Quat_VectorUp(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_VectorUp
	struct FVector Quat_VectorRight(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_VectorRight
	struct FVector Quat_VectorForward(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_VectorForward
	struct FVector Quat_UnrotateVector(struct FQuat& Q, struct FVector& V); // Function Engine.KismetMathLibrary.Quat_UnrotateVector
	float Quat_SizeSquared(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_SizeSquared
	float Quat_Size(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_Size
	void Quat_SetFromEuler(struct FQuat& Q, struct FVector& Euler); // Function Engine.KismetMathLibrary.Quat_SetFromEuler
	void Quat_SetComponents(struct FQuat& Q, float X, float Y, float Z, float W); // Function Engine.KismetMathLibrary.Quat_SetComponents
	struct FRotator Quat_Rotator(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_Rotator
	struct FVector Quat_RotateVector(struct FQuat& Q, struct FVector& V); // Function Engine.KismetMathLibrary.Quat_RotateVector
	struct FQuat Quat_Normalized(struct FQuat& Q, float Tolerance); // Function Engine.KismetMathLibrary.Quat_Normalized
	void Quat_Normalize(struct FQuat& Q, float Tolerance); // Function Engine.KismetMathLibrary.Quat_Normalize
	struct FQuat Quat_MakeFromEuler(struct FVector& Euler); // Function Engine.KismetMathLibrary.Quat_MakeFromEuler
	struct FQuat Quat_Log(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_Log
	bool Quat_IsNormalized(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_IsNormalized
	bool Quat_IsNonFinite(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_IsNonFinite
	bool Quat_IsIdentity(struct FQuat& Q, float Tolerance); // Function Engine.KismetMathLibrary.Quat_IsIdentity
	bool Quat_IsFinite(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_IsFinite
	struct FQuat Quat_Inversed(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_Inversed
	struct FQuat Quat_Identity(); // Function Engine.KismetMathLibrary.Quat_Identity
	struct FVector Quat_GetRotationAxis(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_GetRotationAxis
	struct FVector Quat_GetAxisZ(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_GetAxisZ
	struct FVector Quat_GetAxisY(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_GetAxisY
	struct FVector Quat_GetAxisX(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_GetAxisX
	float Quat_GetAngle(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_GetAngle
	struct FQuat Quat_Exp(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_Exp
	struct FVector Quat_Euler(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_Euler
	void Quat_EnforceShortestArcWith(struct FQuat& A, struct FQuat& B); // Function Engine.KismetMathLibrary.Quat_EnforceShortestArcWith
	float Quat_AngularDistance(struct FQuat& A, struct FQuat& B); // Function Engine.KismetMathLibrary.Quat_AngularDistance
	struct FVector ProjectVectorOnToVector(struct FVector V, struct FVector Target); // Function Engine.KismetMathLibrary.ProjectVectorOnToVector
	struct FVector ProjectVectorOnToPlane(struct FVector V, struct FVector PlaneNormal); // Function Engine.KismetMathLibrary.ProjectVectorOnToPlane
	struct FVector ProjectPointOnToPlane(struct FVector Point, struct FVector PlaneBase, struct FVector PlaneNormal); // Function Engine.KismetMathLibrary.ProjectPointOnToPlane
	bool PointsAreCoplanar(struct TArray<struct FVector>& Points, float Tolerance); // Function Engine.KismetMathLibrary.PointsAreCoplanar
	float PerlinNoise1D(float Value); // Function Engine.KismetMathLibrary.PerlinNoise1D
	int32_t Percent_IntInt(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.Percent_IntInt
	float Percent_FloatFloat(float A, float B); // Function Engine.KismetMathLibrary.Percent_FloatFloat
	char Percent_ByteByte(char A, char B); // Function Engine.KismetMathLibrary.Percent_ByteByte
	int32_t Or_IntInt(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.Or_IntInt
	int64_t Or_Int64Int64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.Or_Int64Int64
	struct FDateTime Now(); // Function Engine.KismetMathLibrary.Now
	bool NotEqualExactly_VectorVector(struct FVector A, struct FVector B); // Function Engine.KismetMathLibrary.NotEqualExactly_VectorVector
	bool NotEqualExactly_Vector4Vector4(struct FVector4& A, struct FVector4& B); // Function Engine.KismetMathLibrary.NotEqualExactly_Vector4Vector4
	bool NotEqualExactly_Vector2DVector2D(struct FVector2D A, struct FVector2D B); // Function Engine.KismetMathLibrary.NotEqualExactly_Vector2DVector2D
	bool NotEqual_VectorVector(struct FVector A, struct FVector B, float ErrorTolerance); // Function Engine.KismetMathLibrary.NotEqual_VectorVector
	bool NotEqual_Vector4Vector4(struct FVector4& A, struct FVector4& B, float ErrorTolerance); // Function Engine.KismetMathLibrary.NotEqual_Vector4Vector4
	bool NotEqual_Vector2DVector2D(struct FVector2D A, struct FVector2D B, float ErrorTolerance); // Function Engine.KismetMathLibrary.NotEqual_Vector2DVector2D
	bool NotEqual_TimespanTimespan(struct FTimespan A, struct FTimespan B); // Function Engine.KismetMathLibrary.NotEqual_TimespanTimespan
	bool NotEqual_RotatorRotator(struct FRotator A, struct FRotator B, float ErrorTolerance); // Function Engine.KismetMathLibrary.NotEqual_RotatorRotator
	bool NotEqual_QuatQuat(struct FQuat& A, struct FQuat& B, float ErrorTolerance); // Function Engine.KismetMathLibrary.NotEqual_QuatQuat
	bool NotEqual_ObjectObject(struct UObject* A, struct UObject* B); // Function Engine.KismetMathLibrary.NotEqual_ObjectObject
	bool NotEqual_NameName(struct FName A, struct FName B); // Function Engine.KismetMathLibrary.NotEqual_NameName
	bool NotEqual_MatrixMatrix(struct FMatrix& A, struct FMatrix& B, float Tolerance); // Function Engine.KismetMathLibrary.NotEqual_MatrixMatrix
	bool NotEqual_LinearColorLinearColor(struct FLinearColor A, struct FLinearColor B); // Function Engine.KismetMathLibrary.NotEqual_LinearColorLinearColor
	bool NotEqual_IntPointIntPoint(struct FIntPoint A, struct FIntPoint B); // Function Engine.KismetMathLibrary.NotEqual_IntPointIntPoint
	bool NotEqual_IntInt(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.NotEqual_IntInt
	bool NotEqual_Int64Int64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.NotEqual_Int64Int64
	bool NotEqual_FloatFloat(float A, float B); // Function Engine.KismetMathLibrary.NotEqual_FloatFloat
	bool NotEqual_DateTimeDateTime(struct FDateTime A, struct FDateTime B); // Function Engine.KismetMathLibrary.NotEqual_DateTimeDateTime
	bool NotEqual_ClassClass(UObject* A, UObject* B); // Function Engine.KismetMathLibrary.NotEqual_ClassClass
	bool NotEqual_ByteByte(char A, char B); // Function Engine.KismetMathLibrary.NotEqual_ByteByte
	bool NotEqual_BoolBool(bool A, bool B); // Function Engine.KismetMathLibrary.NotEqual_BoolBool
	bool Not_PreBool(bool A); // Function Engine.KismetMathLibrary.Not_PreBool
	int64_t Not_Int64(int64_t A); // Function Engine.KismetMathLibrary.Not_Int64
	int32_t Not_Int(int32_t A); // Function Engine.KismetMathLibrary.Not_Int
	struct FVector2D NormalSafe2D(struct FVector2D A, float Tolerance); // Function Engine.KismetMathLibrary.NormalSafe2D
	float NormalizeToRange(float Value, float RangeMin, float RangeMax); // Function Engine.KismetMathLibrary.NormalizeToRange
	struct FRotator NormalizedDeltaRotator(struct FRotator A, struct FRotator B); // Function Engine.KismetMathLibrary.NormalizedDeltaRotator
	float NormalizeAxis(float Angle); // Function Engine.KismetMathLibrary.NormalizeAxis
	void Normalize2D(struct FVector2D& A, float Tolerance); // Function Engine.KismetMathLibrary.Normalize2D
	struct FVector2D Normal2D(struct FVector2D A); // Function Engine.KismetMathLibrary.Normal2D
	struct FVector Normal(struct FVector A, float Tolerance); // Function Engine.KismetMathLibrary.Normal
	struct FVector NegateVector(struct FVector A); // Function Engine.KismetMathLibrary.NegateVector
	struct FRotator NegateRotator(struct FRotator A); // Function Engine.KismetMathLibrary.NegateRotator
	struct FVector2D Negated2D(struct FVector2D& A); // Function Engine.KismetMathLibrary.Negated2D
	bool NearlyEqual_TransformTransform(struct FTransform& A, struct FTransform& B, float LocationTolerance, float RotationTolerance, float Scale3DTolerance); // Function Engine.KismetMathLibrary.NearlyEqual_TransformTransform
	bool NearlyEqual_FloatFloat(float A, float B, float ErrorTolerance); // Function Engine.KismetMathLibrary.NearlyEqual_FloatFloat
	float MultiplyMultiply_FloatFloat(float Base, float Exp); // Function Engine.KismetMathLibrary.MultiplyMultiply_FloatFloat
	float MultiplyByPi(float Value); // Function Engine.KismetMathLibrary.MultiplyByPi
	struct FVector Multiply_VectorVector(struct FVector A, struct FVector B); // Function Engine.KismetMathLibrary.Multiply_VectorVector
	struct FVector Multiply_VectorInt(struct FVector A, int32_t B); // Function Engine.KismetMathLibrary.Multiply_VectorInt
	struct FVector Multiply_VectorFloat(struct FVector A, float B); // Function Engine.KismetMathLibrary.Multiply_VectorFloat
	struct FVector4 Multiply_Vector4Vector4(struct FVector4& A, struct FVector4& B); // Function Engine.KismetMathLibrary.Multiply_Vector4Vector4
	struct FVector2D Multiply_Vector2DVector2D(struct FVector2D A, struct FVector2D B); // Function Engine.KismetMathLibrary.Multiply_Vector2DVector2D
	struct FVector2D Multiply_Vector2DFloat(struct FVector2D A, float B); // Function Engine.KismetMathLibrary.Multiply_Vector2DFloat
	struct FTimespan Multiply_TimespanFloat(struct FTimespan A, float Scalar); // Function Engine.KismetMathLibrary.Multiply_TimespanFloat
	struct FRotator Multiply_RotatorInt(struct FRotator A, int32_t B); // Function Engine.KismetMathLibrary.Multiply_RotatorInt
	struct FRotator Multiply_RotatorFloat(struct FRotator A, float B); // Function Engine.KismetMathLibrary.Multiply_RotatorFloat
	struct FQuat Multiply_QuatQuat(struct FQuat& A, struct FQuat& B); // Function Engine.KismetMathLibrary.Multiply_QuatQuat
	struct FMatrix Multiply_MatrixMatrix(struct FMatrix& A, struct FMatrix& B); // Function Engine.KismetMathLibrary.Multiply_MatrixMatrix
	struct FMatrix Multiply_MatrixFloat(struct FMatrix& A, float B); // Function Engine.KismetMathLibrary.Multiply_MatrixFloat
	struct FLinearColor Multiply_LinearColorLinearColor(struct FLinearColor A, struct FLinearColor B); // Function Engine.KismetMathLibrary.Multiply_LinearColorLinearColor
	struct FLinearColor Multiply_LinearColorFloat(struct FLinearColor A, float B); // Function Engine.KismetMathLibrary.Multiply_LinearColorFloat
	struct FIntPoint Multiply_IntPointIntPoint(struct FIntPoint A, struct FIntPoint B); // Function Engine.KismetMathLibrary.Multiply_IntPointIntPoint
	struct FIntPoint Multiply_IntPointInt(struct FIntPoint A, int32_t B); // Function Engine.KismetMathLibrary.Multiply_IntPointInt
	int32_t Multiply_IntInt(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.Multiply_IntInt
	float Multiply_IntFloat(int32_t A, float B); // Function Engine.KismetMathLibrary.Multiply_IntFloat
	int64_t Multiply_Int64Int64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.Multiply_Int64Int64
	float Multiply_FloatFloat(float A, float B); // Function Engine.KismetMathLibrary.Multiply_FloatFloat
	char Multiply_ByteByte(char A, char B); // Function Engine.KismetMathLibrary.Multiply_ByteByte
	struct FVector MirrorVectorByNormal(struct FVector InVect, struct FVector InNormal); // Function Engine.KismetMathLibrary.MirrorVectorByNormal
	void MinOfIntArray(struct TArray<int32_t>& IntArray, int32_t& IndexOfMinValue, int32_t& MinValue); // Function Engine.KismetMathLibrary.MinOfIntArray
	void MinOfFloatArray(struct TArray<float>& FloatArray, int32_t& IndexOfMinValue, float& MinValue); // Function Engine.KismetMathLibrary.MinOfFloatArray
	void MinOfByteArray(struct TArray<char>& ByteArray, int32_t& IndexOfMinValue, char& MinValue); // Function Engine.KismetMathLibrary.MinOfByteArray
	int64_t MinInt64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.MinInt64
	void MinimumAreaRectangle(struct UObject* WorldContextObject, struct TArray<struct FVector>& InVerts, struct FVector& SampleSurfaceNormal, struct FVector& OutRectCenter, struct FRotator& OutRectRotation, float& OutSideLengthX, float& OutSideLengthY, bool bDebugDraw); // Function Engine.KismetMathLibrary.MinimumAreaRectangle
	int32_t Min(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.Min
	void MaxOfIntArray(struct TArray<int32_t>& IntArray, int32_t& IndexOfMaxValue, int32_t& MaxValue); // Function Engine.KismetMathLibrary.MaxOfIntArray
	void MaxOfFloatArray(struct TArray<float>& FloatArray, int32_t& IndexOfMaxValue, float& MaxValue); // Function Engine.KismetMathLibrary.MaxOfFloatArray
	void MaxOfByteArray(struct TArray<char>& ByteArray, int32_t& IndexOfMaxValue, char& MaxValue); // Function Engine.KismetMathLibrary.MaxOfByteArray
	int64_t MaxInt64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.MaxInt64
	int32_t Max(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.Max
	struct FVector4 Matrix_TransformVector4(struct FMatrix& M, struct FVector4 V); // Function Engine.KismetMathLibrary.Matrix_TransformVector4
	struct FVector4 Matrix_TransformVector(struct FMatrix& M, struct FVector V); // Function Engine.KismetMathLibrary.Matrix_TransformVector
	struct FVector4 Matrix_TransformPosition(struct FMatrix& M, struct FVector V); // Function Engine.KismetMathLibrary.Matrix_TransformPosition
	struct FQuat Matrix_ToQuat(struct FMatrix& M); // Function Engine.KismetMathLibrary.Matrix_ToQuat
	void Matrix_SetOrigin(struct FMatrix& M, struct FVector NewOrigin); // Function Engine.KismetMathLibrary.Matrix_SetOrigin
	void Matrix_SetColumn(struct FMatrix& M, enum class EMatrixColumns Column, struct FVector Value); // Function Engine.KismetMathLibrary.Matrix_SetColumn
	void Matrix_SetAxis(struct FMatrix& M, enum class EAxis Axis, struct FVector AxisVector); // Function Engine.KismetMathLibrary.Matrix_SetAxis
	struct FMatrix Matrix_ScaleTranslation(struct FMatrix& M, struct FVector Scale3D); // Function Engine.KismetMathLibrary.Matrix_ScaleTranslation
	struct FMatrix Matrix_RemoveTranslation(struct FMatrix& M); // Function Engine.KismetMathLibrary.Matrix_RemoveTranslation
	void Matrix_RemoveScaling(struct FMatrix& M, float Tolerance); // Function Engine.KismetMathLibrary.Matrix_RemoveScaling
	struct FMatrix Matrix_Mirror(struct FMatrix& M, enum class EAxis MirrorAxis, enum class EAxis FlipAxis); // Function Engine.KismetMathLibrary.Matrix_Mirror
	struct FVector Matrix_InverseTransformVector(struct FMatrix& M, struct FVector V); // Function Engine.KismetMathLibrary.Matrix_InverseTransformVector
	struct FVector Matrix_InverseTransformPosition(struct FMatrix& M, struct FVector V); // Function Engine.KismetMathLibrary.Matrix_InverseTransformPosition
	struct FMatrix Matrix_Identity(); // Function Engine.KismetMathLibrary.Matrix_Identity
	struct FVector Matrix_GetUnitAxis(struct FMatrix& M, enum class EAxis Axis); // Function Engine.KismetMathLibrary.Matrix_GetUnitAxis
	void Matrix_GetUnitAxes(struct FMatrix& M, struct FVector& X, struct FVector& Y, struct FVector& Z); // Function Engine.KismetMathLibrary.Matrix_GetUnitAxes
	struct FMatrix Matrix_GetTransposed(struct FMatrix& M); // Function Engine.KismetMathLibrary.Matrix_GetTransposed
	struct FMatrix Matrix_GetTransposeAdjoint(struct FMatrix& M); // Function Engine.KismetMathLibrary.Matrix_GetTransposeAdjoint
	struct FVector Matrix_GetScaleVector(struct FMatrix& M, float Tolerance); // Function Engine.KismetMathLibrary.Matrix_GetScaleVector
	struct FVector Matrix_GetScaledAxis(struct FMatrix& M, enum class EAxis Axis); // Function Engine.KismetMathLibrary.Matrix_GetScaledAxis
	void Matrix_GetScaledAxes(struct FMatrix& M, struct FVector& X, struct FVector& Y, struct FVector& Z); // Function Engine.KismetMathLibrary.Matrix_GetScaledAxes
	float Matrix_GetRotDeterminant(struct FMatrix& M); // Function Engine.KismetMathLibrary.Matrix_GetRotDeterminant
	struct FRotator Matrix_GetRotator(struct FMatrix& M); // Function Engine.KismetMathLibrary.Matrix_GetRotator
	struct FVector Matrix_GetOrigin(struct FMatrix& InMatrix); // Function Engine.KismetMathLibrary.Matrix_GetOrigin
	float Matrix_GetMaximumAxisScale(struct FMatrix& M); // Function Engine.KismetMathLibrary.Matrix_GetMaximumAxisScale
	struct FMatrix Matrix_GetMatrixWithoutScale(struct FMatrix& M, float Tolerance); // Function Engine.KismetMathLibrary.Matrix_GetMatrixWithoutScale
	struct FMatrix Matrix_GetInverse(struct FMatrix& M); // Function Engine.KismetMathLibrary.Matrix_GetInverse
	bool Matrix_GetFrustumTopPlane(struct FMatrix& M, struct FPlane& OutPlane); // Function Engine.KismetMathLibrary.Matrix_GetFrustumTopPlane
	bool Matrix_GetFrustumRightPlane(struct FMatrix& M, struct FPlane& OutPlane); // Function Engine.KismetMathLibrary.Matrix_GetFrustumRightPlane
	bool Matrix_GetFrustumNearPlane(struct FMatrix& M, struct FPlane& OutPlane); // Function Engine.KismetMathLibrary.Matrix_GetFrustumNearPlane
	bool Matrix_GetFrustumLeftPlane(struct FMatrix& M, struct FPlane& OutPlane); // Function Engine.KismetMathLibrary.Matrix_GetFrustumLeftPlane
	bool Matrix_GetFrustumFarPlane(struct FMatrix& M, struct FPlane& OutPlane); // Function Engine.KismetMathLibrary.Matrix_GetFrustumFarPlane
	bool Matrix_GetFrustumBottomPlane(struct FMatrix& M, struct FPlane& OutPlane); // Function Engine.KismetMathLibrary.Matrix_GetFrustumBottomPlane
	float Matrix_GetDeterminant(struct FMatrix& M); // Function Engine.KismetMathLibrary.Matrix_GetDeterminant
	struct FVector Matrix_GetColumn(struct FMatrix& M, enum class EMatrixColumns Column); // Function Engine.KismetMathLibrary.Matrix_GetColumn
	bool Matrix_ContainsNaN(struct FMatrix& M); // Function Engine.KismetMathLibrary.Matrix_ContainsNaN
	struct FMatrix Matrix_ConcatenateTranslation(struct FMatrix& M, struct FVector Translation); // Function Engine.KismetMathLibrary.Matrix_ConcatenateTranslation
	struct FMatrix Matrix_ApplyScale(struct FMatrix& M, float Scale); // Function Engine.KismetMathLibrary.Matrix_ApplyScale
	float MapRangeUnclamped(float Value, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB); // Function Engine.KismetMathLibrary.MapRangeUnclamped
	float MapRangeClamped(float Value, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB); // Function Engine.KismetMathLibrary.MapRangeClamped
	struct FVector4 MakeVector4(float X, float Y, float Z, float W); // Function Engine.KismetMathLibrary.MakeVector4
	struct FVector2D MakeVector2D(float X, float Y); // Function Engine.KismetMathLibrary.MakeVector2D
	struct FVector MakeVector(float X, float Y, float Z); // Function Engine.KismetMathLibrary.MakeVector
	struct FTransform MakeTransform(struct FVector Location, struct FRotator Rotation, struct FVector Scale); // Function Engine.KismetMathLibrary.MakeTransform
	struct FTimespan MakeTimespan2(int32_t Days, int32_t Hours, int32_t Minutes, int32_t Seconds, int32_t FractionNano); // Function Engine.KismetMathLibrary.MakeTimespan2
	struct FTimespan MakeTimespan(int32_t Days, int32_t Hours, int32_t Minutes, int32_t Seconds, int32_t Milliseconds); // Function Engine.KismetMathLibrary.MakeTimespan
	struct FRotator MakeRotFromZY(struct FVector& Z, struct FVector& Y); // Function Engine.KismetMathLibrary.MakeRotFromZY
	struct FRotator MakeRotFromZX(struct FVector& Z, struct FVector& X); // Function Engine.KismetMathLibrary.MakeRotFromZX
	struct FRotator MakeRotFromZ(struct FVector& Z); // Function Engine.KismetMathLibrary.MakeRotFromZ
	struct FRotator MakeRotFromYZ(struct FVector& Y, struct FVector& Z); // Function Engine.KismetMathLibrary.MakeRotFromYZ
	struct FRotator MakeRotFromYX(struct FVector& Y, struct FVector& X); // Function Engine.KismetMathLibrary.MakeRotFromYX
	struct FRotator MakeRotFromY(struct FVector& Y); // Function Engine.KismetMathLibrary.MakeRotFromY
	struct FRotator MakeRotFromXZ(struct FVector& X, struct FVector& Z); // Function Engine.KismetMathLibrary.MakeRotFromXZ
	struct FRotator MakeRotFromXY(struct FVector& X, struct FVector& Y); // Function Engine.KismetMathLibrary.MakeRotFromXY
	struct FRotator MakeRotFromX(struct FVector& X); // Function Engine.KismetMathLibrary.MakeRotFromX
	struct FRotator MakeRotator(float Roll, float Pitch, float Yaw); // Function Engine.KismetMathLibrary.MakeRotator
	struct FRotator MakeRotationFromAxes(struct FVector Forward, struct FVector Right, struct FVector Up); // Function Engine.KismetMathLibrary.MakeRotationFromAxes
	struct FTransform MakeRelativeTransform(struct FTransform& A, struct FTransform& RelativeTo); // Function Engine.KismetMathLibrary.MakeRelativeTransform
	struct FRandomStream MakeRandomStream(int32_t InitialSeed); // Function Engine.KismetMathLibrary.MakeRandomStream
	struct FQualifiedFrameTime MakeQualifiedFrameTime(struct FFrameNumber Frame, struct FFrameRate FrameRate, float SubFrame); // Function Engine.KismetMathLibrary.MakeQualifiedFrameTime
	float MakePulsatingValue(float InCurrentTime, float InPulsesPerSecond, float InPhase); // Function Engine.KismetMathLibrary.MakePulsatingValue
	struct FPlane MakePlaneFromPointAndNormal(struct FVector Point, struct FVector Normal); // Function Engine.KismetMathLibrary.MakePlaneFromPointAndNormal
	struct FFrameRate MakeFrameRate(int32_t Numerator, int32_t Denominator); // Function Engine.KismetMathLibrary.MakeFrameRate
	struct FDateTime MakeDateTime(int32_t Year, int32_t Month, int32_t Day, int32_t Hour, int32_t Minute, int32_t Second, int32_t Millisecond); // Function Engine.KismetMathLibrary.MakeDateTime
	struct FLinearColor MakeColor(float R, float G, float B, float A); // Function Engine.KismetMathLibrary.MakeColor
	struct FBox2D MakeBox2D(struct FVector2D Min, struct FVector2D Max); // Function Engine.KismetMathLibrary.MakeBox2D
	struct FBox MakeBox(struct FVector Min, struct FVector Max); // Function Engine.KismetMathLibrary.MakeBox
	float Loge(float A); // Function Engine.KismetMathLibrary.Loge
	float Log(float A, float Base); // Function Engine.KismetMathLibrary.Log
	bool LinePlaneIntersection_OriginNormal(struct FVector& LineStart, struct FVector& LineEnd, struct FVector PlaneOrigin, struct FVector PlaneNormal, float& T, struct FVector& Intersection); // Function Engine.KismetMathLibrary.LinePlaneIntersection_OriginNormal
	bool LinePlaneIntersection(struct FVector& LineStart, struct FVector& LineEnd, struct FPlane& APlane, float& T, struct FVector& Intersection); // Function Engine.KismetMathLibrary.LinePlaneIntersection
	struct FLinearColor LinearColorLerpUsingHSV(struct FLinearColor A, struct FLinearColor B, float Alpha); // Function Engine.KismetMathLibrary.LinearColorLerpUsingHSV
	struct FLinearColor LinearColorLerp(struct FLinearColor A, struct FLinearColor B, float Alpha); // Function Engine.KismetMathLibrary.LinearColorLerp
	struct FLinearColor LinearColor_Yellow(); // Function Engine.KismetMathLibrary.LinearColor_Yellow
	struct FLinearColor LinearColor_White(); // Function Engine.KismetMathLibrary.LinearColor_White
	struct FLinearColor LinearColor_Transparent(); // Function Engine.KismetMathLibrary.LinearColor_Transparent
	struct FColor LinearColor_ToRGBE(struct FLinearColor InLinearColor); // Function Engine.KismetMathLibrary.LinearColor_ToRGBE
	struct FLinearColor LinearColor_ToNewOpacity(struct FLinearColor InColor, float InOpacity); // Function Engine.KismetMathLibrary.LinearColor_ToNewOpacity
	void LinearColor_SetTemperature(struct FLinearColor& InOutColor, float InTemperature); // Function Engine.KismetMathLibrary.LinearColor_SetTemperature
	void LinearColor_SetRGBA(struct FLinearColor& InOutColor, float R, float G, float B, float A); // Function Engine.KismetMathLibrary.LinearColor_SetRGBA
	void LinearColor_SetRandomHue(struct FLinearColor& InOutColor); // Function Engine.KismetMathLibrary.LinearColor_SetRandomHue
	void LinearColor_SetFromSRGB(struct FLinearColor& InOutColor, struct FColor& InSRGB); // Function Engine.KismetMathLibrary.LinearColor_SetFromSRGB
	void LinearColor_SetFromPow22(struct FLinearColor& InOutColor, struct FColor& InColor); // Function Engine.KismetMathLibrary.LinearColor_SetFromPow22
	void LinearColor_SetFromHSV(struct FLinearColor& InOutColor, float H, float S, float V, float A); // Function Engine.KismetMathLibrary.LinearColor_SetFromHSV
	void LinearColor_Set(struct FLinearColor& InOutColor, struct FLinearColor InColor); // Function Engine.KismetMathLibrary.LinearColor_Set
	struct FLinearColor LinearColor_Red(); // Function Engine.KismetMathLibrary.LinearColor_Red
	struct FColor LinearColor_QuantizeRound(struct FLinearColor InColor); // Function Engine.KismetMathLibrary.LinearColor_QuantizeRound
	struct FColor LinearColor_Quantize(struct FLinearColor InColor); // Function Engine.KismetMathLibrary.LinearColor_Quantize
	bool LinearColor_IsNearEqual(struct FLinearColor A, struct FLinearColor B, float Tolerance); // Function Engine.KismetMathLibrary.LinearColor_IsNearEqual
	struct FLinearColor LinearColor_Green(); // Function Engine.KismetMathLibrary.LinearColor_Green
	struct FLinearColor LinearColor_Gray(); // Function Engine.KismetMathLibrary.LinearColor_Gray
	float LinearColor_GetMin(struct FLinearColor InColor); // Function Engine.KismetMathLibrary.LinearColor_GetMin
	float LinearColor_GetMax(struct FLinearColor InColor); // Function Engine.KismetMathLibrary.LinearColor_GetMax
	float LinearColor_GetLuminance(struct FLinearColor InColor); // Function Engine.KismetMathLibrary.LinearColor_GetLuminance
	float LinearColor_Distance(struct FLinearColor C1, struct FLinearColor C2); // Function Engine.KismetMathLibrary.LinearColor_Distance
	struct FLinearColor LinearColor_Desaturated(struct FLinearColor InColor, float InDesaturation); // Function Engine.KismetMathLibrary.LinearColor_Desaturated
	struct FLinearColor LinearColor_Blue(); // Function Engine.KismetMathLibrary.LinearColor_Blue
	struct FLinearColor LinearColor_Black(); // Function Engine.KismetMathLibrary.LinearColor_Black
	struct FVector LessLess_VectorRotator(struct FVector A, struct FRotator B); // Function Engine.KismetMathLibrary.LessLess_VectorRotator
	bool LessEqual_TimespanTimespan(struct FTimespan A, struct FTimespan B); // Function Engine.KismetMathLibrary.LessEqual_TimespanTimespan
	bool LessEqual_IntInt(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.LessEqual_IntInt
	bool LessEqual_Int64Int64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.LessEqual_Int64Int64
	bool LessEqual_FloatFloat(float A, float B); // Function Engine.KismetMathLibrary.LessEqual_FloatFloat
	bool LessEqual_DateTimeDateTime(struct FDateTime A, struct FDateTime B); // Function Engine.KismetMathLibrary.LessEqual_DateTimeDateTime
	bool LessEqual_ByteByte(char A, char B); // Function Engine.KismetMathLibrary.LessEqual_ByteByte
	bool Less_TimespanTimespan(struct FTimespan A, struct FTimespan B); // Function Engine.KismetMathLibrary.Less_TimespanTimespan
	bool Less_IntInt(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.Less_IntInt
	bool Less_Int64Int64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.Less_Int64Int64
	bool Less_FloatFloat(float A, float B); // Function Engine.KismetMathLibrary.Less_FloatFloat
	bool Less_DateTimeDateTime(struct FDateTime A, struct FDateTime B); // Function Engine.KismetMathLibrary.Less_DateTimeDateTime
	bool Less_ByteByte(char A, char B); // Function Engine.KismetMathLibrary.Less_ByteByte
	float Lerp(float A, float B, float Alpha); // Function Engine.KismetMathLibrary.Lerp
	bool IsZero2D(struct FVector2D& A); // Function Engine.KismetMathLibrary.IsZero2D
	bool IsPointInBoxWithTransform(struct FVector Point, struct FTransform& BoxWorldTransform, struct FVector BoxExtent); // Function Engine.KismetMathLibrary.IsPointInBoxWithTransform
	bool IsPointInBox(struct FVector Point, struct FVector BoxOrigin, struct FVector BoxExtent); // Function Engine.KismetMathLibrary.IsPointInBox
	bool IsNearlyZero2D(struct FVector2D& A, float Tolerance); // Function Engine.KismetMathLibrary.IsNearlyZero2D
	bool IsMorning(struct FDateTime A); // Function Engine.KismetMathLibrary.IsMorning
	bool IsLeapYear(int32_t Year); // Function Engine.KismetMathLibrary.IsLeapYear
	bool IsAfternoon(struct FDateTime A); // Function Engine.KismetMathLibrary.IsAfternoon
	struct FTransform InvertTransform(struct FTransform& T); // Function Engine.KismetMathLibrary.InvertTransform
	struct FRotator InverseTransformRotation(struct FTransform& T, struct FRotator Rotation); // Function Engine.KismetMathLibrary.InverseTransformRotation
	struct FVector InverseTransformLocation(struct FTransform& T, struct FVector Location); // Function Engine.KismetMathLibrary.InverseTransformLocation
	struct FVector InverseTransformDirection(struct FTransform& T, struct FVector Direction); // Function Engine.KismetMathLibrary.InverseTransformDirection
	struct FIntPoint IntPoint_Zero(); // Function Engine.KismetMathLibrary.IntPoint_Zero
	struct FIntPoint IntPoint_Up(); // Function Engine.KismetMathLibrary.IntPoint_Up
	struct FIntPoint IntPoint_Right(); // Function Engine.KismetMathLibrary.IntPoint_Right
	struct FIntPoint IntPoint_One(); // Function Engine.KismetMathLibrary.IntPoint_One
	struct FIntPoint IntPoint_Left(); // Function Engine.KismetMathLibrary.IntPoint_Left
	struct FIntPoint IntPoint_Down(); // Function Engine.KismetMathLibrary.IntPoint_Down
	bool InRange_IntInt(int32_t Value, int32_t Min, int32_t Max, bool InclusiveMin, bool InclusiveMax); // Function Engine.KismetMathLibrary.InRange_IntInt
	bool InRange_Int64Int64(int64_t Value, int64_t Min, int64_t Max, bool InclusiveMin, bool InclusiveMax); // Function Engine.KismetMathLibrary.InRange_Int64Int64
	bool InRange_FloatFloat(float Value, float Min, float Max, bool InclusiveMin, bool InclusiveMax); // Function Engine.KismetMathLibrary.InRange_FloatFloat
	float Hypotenuse(float Width, float Height); // Function Engine.KismetMathLibrary.Hypotenuse
	struct FLinearColor HSVToRGBLinear(struct FLinearColor HSV); // Function Engine.KismetMathLibrary.HSVToRGBLinear
	void HSVToRGB_Vector(struct FLinearColor HSV, struct FLinearColor& RGB); // Function Engine.KismetMathLibrary.HSVToRGB_Vector
	struct FLinearColor HSVToRGB(float H, float S, float V, float A); // Function Engine.KismetMathLibrary.HSVToRGB
	float GridSnap_Float(float Location, float GridSize); // Function Engine.KismetMathLibrary.GridSnap_Float
	struct FVector GreaterGreater_VectorRotator(struct FVector A, struct FRotator B); // Function Engine.KismetMathLibrary.GreaterGreater_VectorRotator
	bool GreaterEqual_TimespanTimespan(struct FTimespan A, struct FTimespan B); // Function Engine.KismetMathLibrary.GreaterEqual_TimespanTimespan
	bool GreaterEqual_IntInt(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.GreaterEqual_IntInt
	bool GreaterEqual_Int64Int64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.GreaterEqual_Int64Int64
	bool GreaterEqual_FloatFloat(float A, float B); // Function Engine.KismetMathLibrary.GreaterEqual_FloatFloat
	bool GreaterEqual_DateTimeDateTime(struct FDateTime A, struct FDateTime B); // Function Engine.KismetMathLibrary.GreaterEqual_DateTimeDateTime
	bool GreaterEqual_ByteByte(char A, char B); // Function Engine.KismetMathLibrary.GreaterEqual_ByteByte
	bool Greater_TimespanTimespan(struct FTimespan A, struct FTimespan B); // Function Engine.KismetMathLibrary.Greater_TimespanTimespan
	bool Greater_IntInt(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.Greater_IntInt
	bool Greater_Int64Int64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.Greater_Int64Int64
	bool Greater_FloatFloat(float A, float B); // Function Engine.KismetMathLibrary.Greater_FloatFloat
	bool Greater_DateTimeDateTime(struct FDateTime A, struct FDateTime B); // Function Engine.KismetMathLibrary.Greater_DateTimeDateTime
	bool Greater_ByteByte(char A, char B); // Function Engine.KismetMathLibrary.Greater_ByteByte
	int32_t GetYear(struct FDateTime A); // Function Engine.KismetMathLibrary.GetYear
	void GetYawPitchFromVector(struct FVector InVec, float& Yaw, float& Pitch); // Function Engine.KismetMathLibrary.GetYawPitchFromVector
	struct FVector GetVectorArrayAverage(struct TArray<struct FVector>& Vectors); // Function Engine.KismetMathLibrary.GetVectorArrayAverage
	struct FVector GetUpVector(struct FRotator InRot); // Function Engine.KismetMathLibrary.GetUpVector
	float GetTotalSeconds(struct FTimespan A); // Function Engine.KismetMathLibrary.GetTotalSeconds
	float GetTotalMinutes(struct FTimespan A); // Function Engine.KismetMathLibrary.GetTotalMinutes
	float GetTotalMilliseconds(struct FTimespan A); // Function Engine.KismetMathLibrary.GetTotalMilliseconds
	float GetTotalHours(struct FTimespan A); // Function Engine.KismetMathLibrary.GetTotalHours
	float GetTotalDays(struct FTimespan A); // Function Engine.KismetMathLibrary.GetTotalDays
	struct FTimespan GetTimeOfDay(struct FDateTime A); // Function Engine.KismetMathLibrary.GetTimeOfDay
	float GetTAU(); // Function Engine.KismetMathLibrary.GetTAU
	void GetSlopeDegreeAngles(struct FVector& MyRightYAxis, struct FVector& FloorNormal, struct FVector& UpVector, float& OutSlopePitchDegreeAngle, float& OutSlopeRollDegreeAngle); // Function Engine.KismetMathLibrary.GetSlopeDegreeAngles
	int32_t GetSeconds(struct FTimespan A); // Function Engine.KismetMathLibrary.GetSeconds
	int32_t GetSecond(struct FDateTime A); // Function Engine.KismetMathLibrary.GetSecond
	struct FVector2D GetRotated2D(struct FVector2D A, float AngleDeg); // Function Engine.KismetMathLibrary.GetRotated2D
	struct FVector GetRightVector(struct FRotator InRot); // Function Engine.KismetMathLibrary.GetRightVector
	struct FVector GetReflectionVector(struct FVector Direction, struct FVector SurfaceNormal); // Function Engine.KismetMathLibrary.GetReflectionVector
	float GetPointDistanceToSegment(struct FVector Point, struct FVector SegmentStart, struct FVector SegmentEnd); // Function Engine.KismetMathLibrary.GetPointDistanceToSegment
	float GetPointDistanceToLine(struct FVector Point, struct FVector LineOrigin, struct FVector LineDirection); // Function Engine.KismetMathLibrary.GetPointDistanceToLine
	float GetPI(); // Function Engine.KismetMathLibrary.GetPI
	int32_t GetMonth(struct FDateTime A); // Function Engine.KismetMathLibrary.GetMonth
	int32_t GetMinutes(struct FTimespan A); // Function Engine.KismetMathLibrary.GetMinutes
	int32_t GetMinute(struct FDateTime A); // Function Engine.KismetMathLibrary.GetMinute
	float GetMinElement(struct FVector A); // Function Engine.KismetMathLibrary.GetMinElement
	float GetMin2D(struct FVector2D A); // Function Engine.KismetMathLibrary.GetMin2D
	int32_t GetMilliseconds(struct FTimespan A); // Function Engine.KismetMathLibrary.GetMilliseconds
	int32_t GetMillisecond(struct FDateTime A); // Function Engine.KismetMathLibrary.GetMillisecond
	float GetMaxElement(struct FVector A); // Function Engine.KismetMathLibrary.GetMaxElement
	float GetMax2D(struct FVector2D A); // Function Engine.KismetMathLibrary.GetMax2D
	int32_t GetHours(struct FTimespan A); // Function Engine.KismetMathLibrary.GetHours
	int32_t GetHour12(struct FDateTime A); // Function Engine.KismetMathLibrary.GetHour12
	int32_t GetHour(struct FDateTime A); // Function Engine.KismetMathLibrary.GetHour
	struct FVector GetForwardVector(struct FRotator InRot); // Function Engine.KismetMathLibrary.GetForwardVector
	struct FTimespan GetDuration(struct FTimespan A); // Function Engine.KismetMathLibrary.GetDuration
	struct FVector GetDirectionUnitVector(struct FVector From, struct FVector To); // Function Engine.KismetMathLibrary.GetDirectionUnitVector
	int32_t GetDays(struct FTimespan A); // Function Engine.KismetMathLibrary.GetDays
	int32_t GetDayOfYear(struct FDateTime A); // Function Engine.KismetMathLibrary.GetDayOfYear
	int32_t GetDay(struct FDateTime A); // Function Engine.KismetMathLibrary.GetDay
	struct FDateTime GetDate(struct FDateTime A); // Function Engine.KismetMathLibrary.GetDate
	void GetAzimuthAndElevation(struct FVector InDirection, struct FTransform& ReferenceFrame, float& Azimuth, float& Elevation); // Function Engine.KismetMathLibrary.GetAzimuthAndElevation
	void GetAxes(struct FRotator A, struct FVector& X, struct FVector& Y, struct FVector& Z); // Function Engine.KismetMathLibrary.GetAxes
	float GetAbsMax2D(struct FVector2D A); // Function Engine.KismetMathLibrary.GetAbsMax2D
	struct FVector2D GetAbs2D(struct FVector2D A); // Function Engine.KismetMathLibrary.GetAbs2D
	float FWrap(float Value, float Min, float Max); // Function Engine.KismetMathLibrary.FWrap
	struct FIntVector FTruncVector(struct FVector& InVector); // Function Engine.KismetMathLibrary.FTruncVector
	int64_t FTrunc64(float A); // Function Engine.KismetMathLibrary.FTrunc64
	int32_t FTrunc(float A); // Function Engine.KismetMathLibrary.FTrunc
	struct FTimespan FromSeconds(float Seconds); // Function Engine.KismetMathLibrary.FromSeconds
	struct FTimespan FromMinutes(float Minutes); // Function Engine.KismetMathLibrary.FromMinutes
	struct FTimespan FromMilliseconds(float Milliseconds); // Function Engine.KismetMathLibrary.FromMilliseconds
	struct FTimespan FromHours(float Hours); // Function Engine.KismetMathLibrary.FromHours
	struct FTimespan FromDays(float Days); // Function Engine.KismetMathLibrary.FromDays
	float Fraction(float A); // Function Engine.KismetMathLibrary.Fraction
	int32_t FMod(float Dividend, float Divisor, float& Remainder); // Function Engine.KismetMathLibrary.FMod
	float FMin(float A, float B); // Function Engine.KismetMathLibrary.FMin
	float FMax(float A, float B); // Function Engine.KismetMathLibrary.FMax
	float FloatSpringInterp(float Current, float Target, struct FFloatSpringState& SpringState, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass); // Function Engine.KismetMathLibrary.FloatSpringInterp
	float FixedTurn(float InCurrent, float InDesired, float InDeltaRate); // Function Engine.KismetMathLibrary.FixedTurn
	float FInterpTo_Constant(float Current, float Target, float DeltaTime, float InterpSpeed); // Function Engine.KismetMathLibrary.FInterpTo_Constant
	float FInterpTo(float Current, float Target, float DeltaTime, float InterpSpeed); // Function Engine.KismetMathLibrary.FInterpTo
	float FInterpEaseInOut(float A, float B, float Alpha, float Exponent); // Function Engine.KismetMathLibrary.FInterpEaseInOut
	void FindNearestPointsOnLineSegments(struct FVector Segment1Start, struct FVector Segment1End, struct FVector Segment2Start, struct FVector Segment2End, struct FVector& Segment1Point, struct FVector& Segment2Point); // Function Engine.KismetMathLibrary.FindNearestPointsOnLineSegments
	struct FRotator FindLookAtRotation(struct FVector& Start, struct FVector& Target); // Function Engine.KismetMathLibrary.FindLookAtRotation
	struct FVector FindClosestPointOnSegment(struct FVector Point, struct FVector SegmentStart, struct FVector SegmentEnd); // Function Engine.KismetMathLibrary.FindClosestPointOnSegment
	struct FVector FindClosestPointOnLine(struct FVector Point, struct FVector LineOrigin, struct FVector LineDirection); // Function Engine.KismetMathLibrary.FindClosestPointOnLine
	int64_t FFloor64(float A); // Function Engine.KismetMathLibrary.FFloor64
	int32_t FFloor(float A); // Function Engine.KismetMathLibrary.FFloor
	float FClamp(float Value, float Min, float Max); // Function Engine.KismetMathLibrary.FClamp
	int64_t FCeil64(float A); // Function Engine.KismetMathLibrary.FCeil64
	int32_t FCeil(float A); // Function Engine.KismetMathLibrary.FCeil
	float Exp(float A); // Function Engine.KismetMathLibrary.Exp
	bool EqualExactly_VectorVector(struct FVector A, struct FVector B); // Function Engine.KismetMathLibrary.EqualExactly_VectorVector
	bool EqualExactly_Vector4Vector4(struct FVector4& A, struct FVector4& B); // Function Engine.KismetMathLibrary.EqualExactly_Vector4Vector4
	bool EqualExactly_Vector2DVector2D(struct FVector2D A, struct FVector2D B); // Function Engine.KismetMathLibrary.EqualExactly_Vector2DVector2D
	bool EqualEqual_VectorVector(struct FVector A, struct FVector B, float ErrorTolerance); // Function Engine.KismetMathLibrary.EqualEqual_VectorVector
	bool EqualEqual_Vector4Vector4(struct FVector4& A, struct FVector4& B, float ErrorTolerance); // Function Engine.KismetMathLibrary.EqualEqual_Vector4Vector4
	bool EqualEqual_Vector2DVector2D(struct FVector2D A, struct FVector2D B, float ErrorTolerance); // Function Engine.KismetMathLibrary.EqualEqual_Vector2DVector2D
	bool EqualEqual_TransformTransform(struct FTransform& A, struct FTransform& B); // Function Engine.KismetMathLibrary.EqualEqual_TransformTransform
	bool EqualEqual_TimespanTimespan(struct FTimespan A, struct FTimespan B); // Function Engine.KismetMathLibrary.EqualEqual_TimespanTimespan
	bool EqualEqual_RotatorRotator(struct FRotator A, struct FRotator B, float ErrorTolerance); // Function Engine.KismetMathLibrary.EqualEqual_RotatorRotator
	bool EqualEqual_QuatQuat(struct FQuat& A, struct FQuat& B, float Tolerance); // Function Engine.KismetMathLibrary.EqualEqual_QuatQuat
	bool EqualEqual_ObjectObject(struct UObject* A, struct UObject* B); // Function Engine.KismetMathLibrary.EqualEqual_ObjectObject
	bool EqualEqual_NameName(struct FName A, struct FName B); // Function Engine.KismetMathLibrary.EqualEqual_NameName
	bool EqualEqual_MatrixMatrix(struct FMatrix& A, struct FMatrix& B, float Tolerance); // Function Engine.KismetMathLibrary.EqualEqual_MatrixMatrix
	bool EqualEqual_LinearColorLinearColor(struct FLinearColor A, struct FLinearColor B); // Function Engine.KismetMathLibrary.EqualEqual_LinearColorLinearColor
	bool EqualEqual_IntInt(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.EqualEqual_IntInt
	bool EqualEqual_Int64Int64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.EqualEqual_Int64Int64
	bool EqualEqual_FloatFloat(float A, float B); // Function Engine.KismetMathLibrary.EqualEqual_FloatFloat
	bool EqualEqual_DateTimeDateTime(struct FDateTime A, struct FDateTime B); // Function Engine.KismetMathLibrary.EqualEqual_DateTimeDateTime
	bool EqualEqual_ClassClass(UObject* A, UObject* B); // Function Engine.KismetMathLibrary.EqualEqual_ClassClass
	bool EqualEqual_ByteByte(char A, char B); // Function Engine.KismetMathLibrary.EqualEqual_ByteByte
	bool EqualEqual_BoolBool(bool A, bool B); // Function Engine.KismetMathLibrary.EqualEqual_BoolBool
	bool Equal_IntPointIntPoint(struct FIntPoint A, struct FIntPoint B); // Function Engine.KismetMathLibrary.Equal_IntPointIntPoint
	float Ease(float A, float B, float Alpha, enum class EEasingFunc EasingFunc, float BlendExp, int32_t steps); // Function Engine.KismetMathLibrary.Ease
	struct FVector DynamicWeightedMovingAverage_FVector(struct FVector CurrentSample, struct FVector PreviousSample, float MaxDistance, float MinWeight, float MaxWeight); // Function Engine.KismetMathLibrary.DynamicWeightedMovingAverage_FVector
	struct FRotator DynamicWeightedMovingAverage_FRotator(struct FRotator CurrentSample, struct FRotator PreviousSample, float MaxDistance, float MinWeight, float MaxWeight); // Function Engine.KismetMathLibrary.DynamicWeightedMovingAverage_FRotator
	float DynamicWeightedMovingAverage_Float(float CurrentSample, float PreviousSample, float MaxDistance, float MinWeight, float MaxWeight); // Function Engine.KismetMathLibrary.DynamicWeightedMovingAverage_Float
	float DotProduct2D(struct FVector2D A, struct FVector2D B); // Function Engine.KismetMathLibrary.DotProduct2D
	float Dot_VectorVector(struct FVector A, struct FVector B); // Function Engine.KismetMathLibrary.Dot_VectorVector
	struct FVector Divide_VectorVector(struct FVector A, struct FVector B); // Function Engine.KismetMathLibrary.Divide_VectorVector
	struct FVector Divide_VectorInt(struct FVector A, int32_t B); // Function Engine.KismetMathLibrary.Divide_VectorInt
	struct FVector Divide_VectorFloat(struct FVector A, float B); // Function Engine.KismetMathLibrary.Divide_VectorFloat
	struct FVector4 Divide_Vector4Vector4(struct FVector4& A, struct FVector4& B); // Function Engine.KismetMathLibrary.Divide_Vector4Vector4
	struct FVector2D Divide_Vector2DVector2D(struct FVector2D A, struct FVector2D B); // Function Engine.KismetMathLibrary.Divide_Vector2DVector2D
	struct FVector2D Divide_Vector2DFloat(struct FVector2D A, float B); // Function Engine.KismetMathLibrary.Divide_Vector2DFloat
	struct FTimespan Divide_TimespanFloat(struct FTimespan A, float Scalar); // Function Engine.KismetMathLibrary.Divide_TimespanFloat
	struct FLinearColor Divide_LinearColorLinearColor(struct FLinearColor A, struct FLinearColor B); // Function Engine.KismetMathLibrary.Divide_LinearColorLinearColor
	struct FIntPoint Divide_IntPointIntPoint(struct FIntPoint A, struct FIntPoint B); // Function Engine.KismetMathLibrary.Divide_IntPointIntPoint
	struct FIntPoint Divide_IntPointInt(struct FIntPoint A, int32_t B); // Function Engine.KismetMathLibrary.Divide_IntPointInt
	int32_t Divide_IntInt(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.Divide_IntInt
	int64_t Divide_Int64Int64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.Divide_Int64Int64
	float Divide_FloatFloat(float A, float B); // Function Engine.KismetMathLibrary.Divide_FloatFloat
	char Divide_ByteByte(char A, char B); // Function Engine.KismetMathLibrary.Divide_ByteByte
	float DistanceSquared2D(struct FVector2D v1, struct FVector2D v2); // Function Engine.KismetMathLibrary.DistanceSquared2D
	float Distance2D(struct FVector2D v1, struct FVector2D v2); // Function Engine.KismetMathLibrary.Distance2D
	float DegTan(float A); // Function Engine.KismetMathLibrary.DegTan
	float DegSin(float A); // Function Engine.KismetMathLibrary.DegSin
	float DegreesToRadians(float A); // Function Engine.KismetMathLibrary.DegreesToRadians
	float DegCos(float A); // Function Engine.KismetMathLibrary.DegCos
	float DegAtan2(float Y, float X); // Function Engine.KismetMathLibrary.DegAtan2
	float DegAtan(float A); // Function Engine.KismetMathLibrary.DegAtan
	float DegAsin(float A); // Function Engine.KismetMathLibrary.DegAsin
	float DegAcos(float A); // Function Engine.KismetMathLibrary.DegAcos
	int32_t DaysInYear(int32_t Year); // Function Engine.KismetMathLibrary.DaysInYear
	int32_t DaysInMonth(int32_t Year, int32_t Month); // Function Engine.KismetMathLibrary.DaysInMonth
	struct FDateTime DateTimeMinValue(); // Function Engine.KismetMathLibrary.DateTimeMinValue
	struct FDateTime DateTimeMaxValue(); // Function Engine.KismetMathLibrary.DateTimeMaxValue
	bool DateTimeFromString(struct FString DateTimeString, struct FDateTime& Result); // Function Engine.KismetMathLibrary.DateTimeFromString
	bool DateTimeFromIsoString(struct FString IsoString, struct FDateTime& Result); // Function Engine.KismetMathLibrary.DateTimeFromIsoString
	float CrossProduct2D(struct FVector2D A, struct FVector2D B); // Function Engine.KismetMathLibrary.CrossProduct2D
	struct FVector Cross_VectorVector(struct FVector A, struct FVector B); // Function Engine.KismetMathLibrary.Cross_VectorVector
	struct FVector CreateVectorFromYawPitch(float Yaw, float Pitch, float Length); // Function Engine.KismetMathLibrary.CreateVectorFromYawPitch
	float Cos(float A); // Function Engine.KismetMathLibrary.Cos
	struct FTransform ConvertTransformToRelative(struct FTransform& Transform, struct FTransform& ParentTransform); // Function Engine.KismetMathLibrary.ConvertTransformToRelative
	struct FVector2D Conv_VectorToVector2D(struct FVector InVector); // Function Engine.KismetMathLibrary.Conv_VectorToVector2D
	struct FTransform Conv_VectorToTransform(struct FVector InLocation); // Function Engine.KismetMathLibrary.Conv_VectorToTransform
	struct FRotator Conv_VectorToRotator(struct FVector InVec); // Function Engine.KismetMathLibrary.Conv_VectorToRotator
	struct FQuat Conv_VectorToQuaternion(struct FVector InVec); // Function Engine.KismetMathLibrary.Conv_VectorToQuaternion
	struct FLinearColor Conv_VectorToLinearColor(struct FVector InVec); // Function Engine.KismetMathLibrary.Conv_VectorToLinearColor
	struct FVector Conv_Vector4ToVector(struct FVector4& InVector4); // Function Engine.KismetMathLibrary.Conv_Vector4ToVector
	struct FRotator Conv_Vector4ToRotator(struct FVector4& InVec); // Function Engine.KismetMathLibrary.Conv_Vector4ToRotator
	struct FQuat Conv_Vector4ToQuaternion(struct FVector4& InVec); // Function Engine.KismetMathLibrary.Conv_Vector4ToQuaternion
	struct FVector Conv_Vector2DToVector(struct FVector2D InVector2D, float Z); // Function Engine.KismetMathLibrary.Conv_Vector2DToVector
	struct FIntPoint Conv_Vector2DToIntPoint(struct FVector2D InVector2D); // Function Engine.KismetMathLibrary.Conv_Vector2DToIntPoint
	struct FMatrix Conv_TransformToMatrix(struct FTransform& Transform); // Function Engine.KismetMathLibrary.Conv_TransformToMatrix
	struct FVector Conv_RotatorToVector(struct FRotator InRot); // Function Engine.KismetMathLibrary.Conv_RotatorToVector
	struct FTransform Conv_RotatorToTransform(struct FRotator& InRotator); // Function Engine.KismetMathLibrary.Conv_RotatorToTransform
	struct FTransform Conv_MatrixToTransform(struct FMatrix& InMatrix); // Function Engine.KismetMathLibrary.Conv_MatrixToTransform
	struct FRotator Conv_MatrixToRotator(struct FMatrix& InMatrix); // Function Engine.KismetMathLibrary.Conv_MatrixToRotator
	struct FVector Conv_LinearColorToVector(struct FLinearColor InLinearColor); // Function Engine.KismetMathLibrary.Conv_LinearColorToVector
	struct FColor Conv_LinearColorToColor(struct FLinearColor InLinearColor, bool InUseSRGB); // Function Engine.KismetMathLibrary.Conv_LinearColorToColor
	struct FVector Conv_IntVectorToVector(struct FIntVector& InIntVector); // Function Engine.KismetMathLibrary.Conv_IntVectorToVector
	struct FIntVector Conv_IntToIntVector(int32_t inInt); // Function Engine.KismetMathLibrary.Conv_IntToIntVector
	int64_t Conv_IntToInt64(int32_t inInt); // Function Engine.KismetMathLibrary.Conv_IntToInt64
	float Conv_IntToFloat(int32_t inInt); // Function Engine.KismetMathLibrary.Conv_IntToFloat
	char Conv_IntToByte(int32_t inInt); // Function Engine.KismetMathLibrary.Conv_IntToByte
	bool Conv_IntToBool(int32_t inInt); // Function Engine.KismetMathLibrary.Conv_IntToBool
	struct FVector2D Conv_IntPointToVector2D(struct FIntPoint InIntPoint); // Function Engine.KismetMathLibrary.Conv_IntPointToVector2D
	int32_t Conv_Int64ToInt(int64_t inInt); // Function Engine.KismetMathLibrary.Conv_Int64ToInt
	char Conv_Int64ToByte(int64_t inInt); // Function Engine.KismetMathLibrary.Conv_Int64ToByte
	struct FVector Conv_FloatToVector(float InFloat); // Function Engine.KismetMathLibrary.Conv_FloatToVector
	struct FLinearColor Conv_FloatToLinearColor(float InFloat); // Function Engine.KismetMathLibrary.Conv_FloatToLinearColor
	struct FLinearColor Conv_ColorToLinearColor(struct FColor InColor); // Function Engine.KismetMathLibrary.Conv_ColorToLinearColor
	int32_t Conv_ByteToInt(char InByte); // Function Engine.KismetMathLibrary.Conv_ByteToInt
	float Conv_ByteToFloat(char InByte); // Function Engine.KismetMathLibrary.Conv_ByteToFloat
	int32_t Conv_BoolToInt(bool InBool); // Function Engine.KismetMathLibrary.Conv_BoolToInt
	float Conv_BoolToFloat(bool InBool); // Function Engine.KismetMathLibrary.Conv_BoolToFloat
	char Conv_BoolToByte(bool InBool); // Function Engine.KismetMathLibrary.Conv_BoolToByte
	struct FTransform ComposeTransforms(struct FTransform& A, struct FTransform& B); // Function Engine.KismetMathLibrary.ComposeTransforms
	struct FRotator ComposeRotators(struct FRotator A, struct FRotator B); // Function Engine.KismetMathLibrary.ComposeRotators
	bool ClassIsChildOf(UObject* TestClass, UObject* ParentClass); // Function Engine.KismetMathLibrary.ClassIsChildOf
	struct FVector ClampVectorSize(struct FVector A, float Min, float Max); // Function Engine.KismetMathLibrary.ClampVectorSize
	int64_t ClampInt64(int64_t Value, int64_t Min, int64_t Max); // Function Engine.KismetMathLibrary.ClampInt64
	float ClampAxis(float Angle); // Function Engine.KismetMathLibrary.ClampAxis
	struct FVector2D ClampAxes2D(struct FVector2D A, float MinAxisVal, float MaxAxisVal); // Function Engine.KismetMathLibrary.ClampAxes2D
	float ClampAngle(float AngleDegrees, float MinAngleDegrees, float MaxAngleDegrees); // Function Engine.KismetMathLibrary.ClampAngle
	int32_t Clamp(int32_t Value, int32_t Min, int32_t Max); // Function Engine.KismetMathLibrary.Clamp
	struct FLinearColor CInterpTo(struct FLinearColor Current, struct FLinearColor Target, float DeltaTime, float InterpSpeed); // Function Engine.KismetMathLibrary.CInterpTo
	void BreakVector4(struct FVector4& InVec, float& X, float& Y, float& Z, float& W); // Function Engine.KismetMathLibrary.BreakVector4
	void BreakVector2D(struct FVector2D InVec, float& X, float& Y); // Function Engine.KismetMathLibrary.BreakVector2D
	void BreakVector(struct FVector InVec, float& X, float& Y, float& Z); // Function Engine.KismetMathLibrary.BreakVector
	void BreakTransform(struct FTransform& InTransform, struct FVector& Location, struct FRotator& Rotation, struct FVector& Scale); // Function Engine.KismetMathLibrary.BreakTransform
	void BreakTimespan2(struct FTimespan InTimespan, int32_t& Days, int32_t& Hours, int32_t& Minutes, int32_t& Seconds, int32_t& FractionNano); // Function Engine.KismetMathLibrary.BreakTimespan2
	void BreakTimespan(struct FTimespan InTimespan, int32_t& Days, int32_t& Hours, int32_t& Minutes, int32_t& Seconds, int32_t& Milliseconds); // Function Engine.KismetMathLibrary.BreakTimespan
	void BreakRotIntoAxes(struct FRotator& InRot, struct FVector& X, struct FVector& Y, struct FVector& Z); // Function Engine.KismetMathLibrary.BreakRotIntoAxes
	void BreakRotator(struct FRotator InRot, float& Roll, float& Pitch, float& Yaw); // Function Engine.KismetMathLibrary.BreakRotator
	void BreakRandomStream(struct FRandomStream& InRandomStream, int32_t& InitialSeed); // Function Engine.KismetMathLibrary.BreakRandomStream
	void BreakQualifiedFrameTime(struct FQualifiedFrameTime& InFrameTime, struct FFrameNumber& Frame, struct FFrameRate& FrameRate, float& SubFrame); // Function Engine.KismetMathLibrary.BreakQualifiedFrameTime
	void BreakFrameRate(struct FFrameRate& InFrameRate, int32_t& Numerator, int32_t& Denominator); // Function Engine.KismetMathLibrary.BreakFrameRate
	void BreakDateTime(struct FDateTime InDateTime, int32_t& Year, int32_t& Month, int32_t& Day, int32_t& Hour, int32_t& Minute, int32_t& Second, int32_t& Millisecond); // Function Engine.KismetMathLibrary.BreakDateTime
	void BreakColor(struct FLinearColor InColor, float& R, float& G, float& B, float& A); // Function Engine.KismetMathLibrary.BreakColor
	bool BooleanXOR(bool A, bool B); // Function Engine.KismetMathLibrary.BooleanXOR
	bool BooleanOR(bool A, bool B); // Function Engine.KismetMathLibrary.BooleanOR
	bool BooleanNOR(bool A, bool B); // Function Engine.KismetMathLibrary.BooleanNOR
	bool BooleanNAND(bool A, bool B); // Function Engine.KismetMathLibrary.BooleanNAND
	bool BooleanAND(bool A, bool B); // Function Engine.KismetMathLibrary.BooleanAND
	char BMin(char A, char B); // Function Engine.KismetMathLibrary.BMin
	char BMax(char A, char B); // Function Engine.KismetMathLibrary.BMax
	float Atan2(float Y, float X); // Function Engine.KismetMathLibrary.Atan2
	float Atan(float A); // Function Engine.KismetMathLibrary.Atan
	float Asin(float A); // Function Engine.KismetMathLibrary.Asin
	int32_t And_IntInt(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.And_IntInt
	int64_t And_Int64Int64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.And_Int64Int64
	struct FVector Add_VectorVector(struct FVector A, struct FVector B); // Function Engine.KismetMathLibrary.Add_VectorVector
	struct FVector Add_VectorInt(struct FVector A, int32_t B); // Function Engine.KismetMathLibrary.Add_VectorInt
	struct FVector Add_VectorFloat(struct FVector A, float B); // Function Engine.KismetMathLibrary.Add_VectorFloat
	struct FVector4 Add_Vector4Vector4(struct FVector4& A, struct FVector4& B); // Function Engine.KismetMathLibrary.Add_Vector4Vector4
	struct FVector2D Add_Vector2DVector2D(struct FVector2D A, struct FVector2D B); // Function Engine.KismetMathLibrary.Add_Vector2DVector2D
	struct FVector2D Add_Vector2DFloat(struct FVector2D A, float B); // Function Engine.KismetMathLibrary.Add_Vector2DFloat
	struct FTimespan Add_TimespanTimespan(struct FTimespan A, struct FTimespan B); // Function Engine.KismetMathLibrary.Add_TimespanTimespan
	struct FQuat Add_QuatQuat(struct FQuat& A, struct FQuat& B); // Function Engine.KismetMathLibrary.Add_QuatQuat
	struct FMatrix Add_MatrixMatrix(struct FMatrix& A, struct FMatrix& B); // Function Engine.KismetMathLibrary.Add_MatrixMatrix
	struct FLinearColor Add_LinearColorLinearColor(struct FLinearColor A, struct FLinearColor B); // Function Engine.KismetMathLibrary.Add_LinearColorLinearColor
	struct FIntPoint Add_IntPointIntPoint(struct FIntPoint A, struct FIntPoint B); // Function Engine.KismetMathLibrary.Add_IntPointIntPoint
	struct FIntPoint Add_IntPointInt(struct FIntPoint A, int32_t B); // Function Engine.KismetMathLibrary.Add_IntPointInt
	int32_t Add_IntInt(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.Add_IntInt
	int64_t Add_Int64Int64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.Add_Int64Int64
	float Add_FloatFloat(float A, float B); // Function Engine.KismetMathLibrary.Add_FloatFloat
	struct FDateTime Add_DateTimeTimespan(struct FDateTime A, struct FTimespan B); // Function Engine.KismetMathLibrary.Add_DateTimeTimespan
	struct FDateTime Add_DateTimeDateTime(struct FDateTime A, struct FDateTime B); // Function Engine.KismetMathLibrary.Add_DateTimeDateTime
	char Add_ByteByte(char A, char B); // Function Engine.KismetMathLibrary.Add_ByteByte
	float Acos(float A); // Function Engine.KismetMathLibrary.Acos
	int64_t Abs_Int64(int64_t A); // Function Engine.KismetMathLibrary.Abs_Int64
	int32_t Abs_Int(int32_t A); // Function Engine.KismetMathLibrary.Abs_Int
	float Abs(float A); // Function Engine.KismetMathLibrary.Abs
}; 
 
 


//Class Engine.MaterialExpressionDeriveNormalZ Size 88
// Inherited 64 bytes 
class UMaterialExpressionDeriveNormalZ : public UMaterialExpression
{

 public: 
	struct FExpressionInput InXY;  // Offset: 64 Size: 20
	char pad_84[4];  // Offset: 84 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.KismetNodeHelperLibrary Size 40
// Inherited 40 bytes 
class UKismetNodeHelperLibrary : public UBlueprintFunctionLibrary
{

 public: 



 // Functions 
 public:
	void MarkBit(int32_t& Data, int32_t Index); // Function Engine.KismetNodeHelperLibrary.MarkBit
	bool HasUnmarkedBit(int32_t Data, int32_t NumBits); // Function Engine.KismetNodeHelperLibrary.HasUnmarkedBit
	bool HasMarkedBit(int32_t Data, int32_t NumBits); // Function Engine.KismetNodeHelperLibrary.HasMarkedBit
	char GetValidValue(struct UEnum* Enum, char EnumeratorValue); // Function Engine.KismetNodeHelperLibrary.GetValidValue
	int32_t GetUnmarkedBit(int32_t Data, int32_t StartIdx, int32_t NumBits, bool bRandom); // Function Engine.KismetNodeHelperLibrary.GetUnmarkedBit
	int32_t GetRandomUnmarkedBit(int32_t Data, int32_t StartIdx, int32_t NumBits); // Function Engine.KismetNodeHelperLibrary.GetRandomUnmarkedBit
	int32_t GetFirstUnmarkedBit(int32_t Data, int32_t StartIdx, int32_t NumBits); // Function Engine.KismetNodeHelperLibrary.GetFirstUnmarkedBit
	char GetEnumeratorValueFromIndex(struct UEnum* Enum, char EnumeratorIndex); // Function Engine.KismetNodeHelperLibrary.GetEnumeratorValueFromIndex
	struct FString GetEnumeratorUserFriendlyName(struct UEnum* Enum, char EnumeratorValue); // Function Engine.KismetNodeHelperLibrary.GetEnumeratorUserFriendlyName
	struct FName GetEnumeratorName(struct UEnum* Enum, char EnumeratorValue); // Function Engine.KismetNodeHelperLibrary.GetEnumeratorName
	void ClearBit(int32_t& Data, int32_t Index); // Function Engine.KismetNodeHelperLibrary.ClearBit
	void ClearAllBits(int32_t& Data); // Function Engine.KismetNodeHelperLibrary.ClearAllBits
	bool BitIsMarked(int32_t Data, int32_t Index); // Function Engine.KismetNodeHelperLibrary.BitIsMarked
}; 
 
 


//Class Engine.PointLight Size 568
// Inherited 560 bytes 
class APointLight : public ALight
{

 public: 
	struct UPointLightComponent* PointLightComponent;  // Offset: 560 Size: 8



 // Functions 
 public:
	void SetRadius(float NewRadius); // Function Engine.PointLight.SetRadius
	void SetLightFalloffExponent(float NewLightFalloffExponent); // Function Engine.PointLight.SetLightFalloffExponent
}; 
 
 


//Class Engine.ParticleModuleTypeDataMesh Size 152
// Inherited 48 bytes 
class UParticleModuleTypeDataMesh : public UParticleModuleTypeDataBase
{

 public: 
	struct UStaticMesh* Mesh;  // Offset: 48 Size: 8
	char pad_56[8];  // Offset: 56 Size: 8
	float LODSizeScale;  // Offset: 64 Size: 4
	char bUseStaticMeshLODs : 1;  // Offset: 68 Size: 1
	char CastShadows : 1;  // Offset: 68 Size: 1
	char DoCollisions : 1;  // Offset: 68 Size: 1
	char pad_68_1 : 5;  // Offset: 68 Size: 1
	enum class EMeshScreenAlignment MeshAlignment;  // Offset: 69 Size: 1
	char bOverrideMaterial : 1;  // Offset: 70 Size: 1
	char bOverrideDefaultMotionBlurSettings : 1;  // Offset: 70 Size: 1
	char bEnableMotionBlur : 1;  // Offset: 70 Size: 1
	char pad_70_1 : 5;  // Offset: 70 Size: 1
	char pad_71[2];  // Offset: 71 Size: 2
	struct FRawDistributionVector RollPitchYawRange;  // Offset: 72 Size: 72
	enum class EParticleAxisLock AxisLockOption;  // Offset: 144 Size: 1
	char bCameraFacing : 1;  // Offset: 145 Size: 1
	char pad_145_1 : 7;  // Offset: 145 Size: 1
	enum class EMeshCameraFacingUpAxis CameraFacingUpAxisOption;  // Offset: 146 Size: 1
	enum class EMeshCameraFacingOptions CameraFacingOption;  // Offset: 147 Size: 1
	char bApplyParticleRotationAsSpin : 1;  // Offset: 148 Size: 1
	char bFaceCameraDirectionRatherThanPosition : 1;  // Offset: 148 Size: 1
	char bCollisionsConsiderPartilceSize : 1;  // Offset: 148 Size: 1
	char pad_148_1 : 5;  // Offset: 148 Size: 1
	char pad_149[4];  // Offset: 149 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.KismetStringLibrary Size 40
// Inherited 40 bytes 
class UKismetStringLibrary : public UBlueprintFunctionLibrary
{

 public: 



 // Functions 
 public:
	struct FString TrimTrailing(struct FString SourceString); // Function Engine.KismetStringLibrary.TrimTrailing
	struct FString Trim(struct FString SourceString); // Function Engine.KismetStringLibrary.Trim
	struct FString ToUpper(struct FString SourceString); // Function Engine.KismetStringLibrary.ToUpper
	struct FString ToLower(struct FString SourceString); // Function Engine.KismetStringLibrary.ToLower
	struct FString TimeSecondsToString(float InSeconds); // Function Engine.KismetStringLibrary.TimeSecondsToString
	bool StartsWith(struct FString SourceString, struct FString InPrefix, enum class ESearchCase SearchCase); // Function Engine.KismetStringLibrary.StartsWith
	bool Split(struct FString SourceString, struct FString InStr, struct FString& LeftS, struct FString& RightS, enum class ESearchCase SearchCase, enum class ESearchDir SearchDir); // Function Engine.KismetStringLibrary.Split
	struct FString RightPad(struct FString SourceString, int32_t ChCount); // Function Engine.KismetStringLibrary.RightPad
	struct FString RightChop(struct FString SourceString, int32_t Count); // Function Engine.KismetStringLibrary.RightChop
	struct FString Right(struct FString SourceString, int32_t Count); // Function Engine.KismetStringLibrary.Right
	struct FString Reverse(struct FString SourceString); // Function Engine.KismetStringLibrary.Reverse
	int32_t ReplaceInline(struct FString& SourceString, struct FString SearchText, struct FString ReplacementText, enum class ESearchCase SearchCase); // Function Engine.KismetStringLibrary.ReplaceInline
	struct FString Replace(struct FString SourceString, struct FString From, struct FString To, enum class ESearchCase SearchCase); // Function Engine.KismetStringLibrary.Replace
	struct TArray<struct FString> ParseIntoArray(struct FString SourceString, struct FString Delimiter, bool CullEmptyStrings); // Function Engine.KismetStringLibrary.ParseIntoArray
	bool NotEqual_StrStr(struct FString A, struct FString B); // Function Engine.KismetStringLibrary.NotEqual_StrStr
	bool NotEqual_StriStri(struct FString A, struct FString B); // Function Engine.KismetStringLibrary.NotEqual_StriStri
	struct FString Mid(struct FString SourceString, int32_t Start, int32_t Count); // Function Engine.KismetStringLibrary.Mid
	bool MatchesWildcard(struct FString SourceString, struct FString Wildcard, enum class ESearchCase SearchCase); // Function Engine.KismetStringLibrary.MatchesWildcard
	int32_t Len(struct FString S); // Function Engine.KismetStringLibrary.Len
	struct FString LeftPad(struct FString SourceString, int32_t ChCount); // Function Engine.KismetStringLibrary.LeftPad
	struct FString LeftChop(struct FString SourceString, int32_t Count); // Function Engine.KismetStringLibrary.LeftChop
	struct FString Left(struct FString SourceString, int32_t Count); // Function Engine.KismetStringLibrary.Left
	struct FString JoinStringArray(struct TArray<struct FString>& SourceArray, struct FString Separator); // Function Engine.KismetStringLibrary.JoinStringArray
	bool IsNumeric(struct FString SourceString); // Function Engine.KismetStringLibrary.IsNumeric
	bool IsEmpty(struct FString inString); // Function Engine.KismetStringLibrary.IsEmpty
	struct FString GetSubstring(struct FString SourceString, int32_t StartIndex, int32_t Length); // Function Engine.KismetStringLibrary.GetSubstring
	int32_t GetCharacterAsNumber(struct FString SourceString, int32_t Index); // Function Engine.KismetStringLibrary.GetCharacterAsNumber
	struct TArray<struct FString> GetCharacterArrayFromString(struct FString SourceString); // Function Engine.KismetStringLibrary.GetCharacterArrayFromString
	int32_t FindSubstring(struct FString SearchIn, struct FString Substring, bool bUseCase, bool bSearchFromEnd, int32_t StartPosition); // Function Engine.KismetStringLibrary.FindSubstring
	bool EqualEqual_StrStr(struct FString A, struct FString B); // Function Engine.KismetStringLibrary.EqualEqual_StrStr
	bool EqualEqual_StriStri(struct FString A, struct FString B); // Function Engine.KismetStringLibrary.EqualEqual_StriStri
	bool EndsWith(struct FString SourceString, struct FString InSuffix, enum class ESearchCase SearchCase); // Function Engine.KismetStringLibrary.EndsWith
	int32_t CullArray(struct FString SourceString, struct TArray<struct FString>& inArray); // Function Engine.KismetStringLibrary.CullArray
	struct FString Conv_VectorToString(struct FVector InVec); // Function Engine.KismetStringLibrary.Conv_VectorToString
	struct FString Conv_Vector2dToString(struct FVector2D InVec); // Function Engine.KismetStringLibrary.Conv_Vector2dToString
	struct FString Conv_TransformToString(struct FTransform& InTrans); // Function Engine.KismetStringLibrary.Conv_TransformToString
	void Conv_StringToVector2D(struct FString inString, struct FVector2D& OutConvertedVector2D, bool& OutIsValid); // Function Engine.KismetStringLibrary.Conv_StringToVector2D
	void Conv_StringToVector(struct FString inString, struct FVector& OutConvertedVector, bool& OutIsValid); // Function Engine.KismetStringLibrary.Conv_StringToVector
	void Conv_StringToRotator(struct FString inString, struct FRotator& OutConvertedRotator, bool& OutIsValid); // Function Engine.KismetStringLibrary.Conv_StringToRotator
	struct FName Conv_StringToName(struct FString inString); // Function Engine.KismetStringLibrary.Conv_StringToName
	int32_t Conv_StringToInt(struct FString inString); // Function Engine.KismetStringLibrary.Conv_StringToInt
	float Conv_StringToFloat(struct FString inString); // Function Engine.KismetStringLibrary.Conv_StringToFloat
	void Conv_StringToColor(struct FString inString, struct FLinearColor& OutConvertedColor, bool& OutIsValid); // Function Engine.KismetStringLibrary.Conv_StringToColor
	struct FString Conv_RotatorToString(struct FRotator InRot); // Function Engine.KismetStringLibrary.Conv_RotatorToString
	struct FString Conv_ObjectToString(struct UObject* InObj); // Function Engine.KismetStringLibrary.Conv_ObjectToString
	struct FString Conv_NameToString(struct FName InName); // Function Engine.KismetStringLibrary.Conv_NameToString
	struct FString Conv_MatrixToString(struct FMatrix& InMatrix); // Function Engine.KismetStringLibrary.Conv_MatrixToString
	struct FString Conv_IntVectorToString(struct FIntVector InIntVec); // Function Engine.KismetStringLibrary.Conv_IntVectorToString
	struct FString Conv_IntToString(int32_t inInt); // Function Engine.KismetStringLibrary.Conv_IntToString
	struct FString Conv_IntPointToString(struct FIntPoint InIntPoint); // Function Engine.KismetStringLibrary.Conv_IntPointToString
	struct FString Conv_FloatToString(float InFloat); // Function Engine.KismetStringLibrary.Conv_FloatToString
	struct FString Conv_ColorToString(struct FLinearColor InColor); // Function Engine.KismetStringLibrary.Conv_ColorToString
	struct FString Conv_ByteToString(char InByte); // Function Engine.KismetStringLibrary.Conv_ByteToString
	struct FString Conv_BoolToString(bool InBool); // Function Engine.KismetStringLibrary.Conv_BoolToString
	bool Contains(struct FString SearchIn, struct FString Substring, bool bUseCase, bool bSearchFromEnd); // Function Engine.KismetStringLibrary.Contains
	struct FString Concat_StrStr(struct FString A, struct FString B); // Function Engine.KismetStringLibrary.Concat_StrStr
	struct FString BuildString_Vector2d(struct FString AppendTo, struct FString Prefix, struct FVector2D InVector2D, struct FString Suffix); // Function Engine.KismetStringLibrary.BuildString_Vector2d
	struct FString BuildString_Vector(struct FString AppendTo, struct FString Prefix, struct FVector InVector, struct FString Suffix); // Function Engine.KismetStringLibrary.BuildString_Vector
	struct FString BuildString_Rotator(struct FString AppendTo, struct FString Prefix, struct FRotator InRot, struct FString Suffix); // Function Engine.KismetStringLibrary.BuildString_Rotator
	struct FString BuildString_Object(struct FString AppendTo, struct FString Prefix, struct UObject* InObj, struct FString Suffix); // Function Engine.KismetStringLibrary.BuildString_Object
	struct FString BuildString_Name(struct FString AppendTo, struct FString Prefix, struct FName InName, struct FString Suffix); // Function Engine.KismetStringLibrary.BuildString_Name
	struct FString BuildString_IntVector(struct FString AppendTo, struct FString Prefix, struct FIntVector InIntVector, struct FString Suffix); // Function Engine.KismetStringLibrary.BuildString_IntVector
	struct FString BuildString_Int(struct FString AppendTo, struct FString Prefix, int32_t inInt, struct FString Suffix); // Function Engine.KismetStringLibrary.BuildString_Int
	struct FString BuildString_Float(struct FString AppendTo, struct FString Prefix, float InFloat, struct FString Suffix); // Function Engine.KismetStringLibrary.BuildString_Float
	struct FString BuildString_Color(struct FString AppendTo, struct FString Prefix, struct FLinearColor InColor, struct FString Suffix); // Function Engine.KismetStringLibrary.BuildString_Color
	struct FString BuildString_Bool(struct FString AppendTo, struct FString Prefix, bool InBool, struct FString Suffix); // Function Engine.KismetStringLibrary.BuildString_Bool
}; 
 
 


//Class Engine.Note Size 544
// Inherited 544 bytes 
class ANote : public AActor
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.Level Size 672
// Inherited 40 bytes 
class ULevel : public UObject
{

 public: 
	char pad_40[144];  // Offset: 40 Size: 144
	struct UWorld* OwningWorld;  // Offset: 184 Size: 8
	struct UModel* Model;  // Offset: 192 Size: 8
	struct TArray<struct UModelComponent*> ModelComponents;  // Offset: 200 Size: 16
	struct ULevelActorContainer* ActorCluster;  // Offset: 216 Size: 8
	int32_t NumTextureStreamingUnbuiltComponents;  // Offset: 224 Size: 4
	int32_t NumTextureStreamingDirtyResources;  // Offset: 228 Size: 4
	struct ALevelScriptActor* LevelScriptActor;  // Offset: 232 Size: 8
	struct ANavigationObjectBase* NavListStart;  // Offset: 240 Size: 8
	struct ANavigationObjectBase* NavListEnd;  // Offset: 248 Size: 8
	struct TArray<struct UNavigationDataChunk*> NavDataChunks;  // Offset: 256 Size: 16
	float LightmapTotalSize;  // Offset: 272 Size: 4
	float ShadowmapTotalSize;  // Offset: 276 Size: 4
	struct TArray<struct FVector> StaticNavigableGeometry;  // Offset: 280 Size: 16
	struct TArray<struct FGuid> StreamingTextureGuids;  // Offset: 296 Size: 16
	char pad_312[152];  // Offset: 312 Size: 152
	struct FGuid LevelBuildDataId;  // Offset: 464 Size: 16
	struct UMapBuildDataRegistry* MapBuildData;  // Offset: 480 Size: 8
	struct FIntVector LightBuildLevelOffset;  // Offset: 488 Size: 12
	char bIsLightingScenario : 1;  // Offset: 500 Size: 1
	char pad_500_1 : 2;  // Offset: 500 Size: 1
	char bTextureStreamingRotationChanged : 1;  // Offset: 500 Size: 1
	char bStaticComponentsRegisteredInStreamingManager : 1;  // Offset: 500 Size: 1
	char bIsVisible : 1;  // Offset: 500 Size: 1
	char pad_500_2 : 2;  // Offset: 500 Size: 1
	char pad_501[100];  // Offset: 501 Size: 100
	struct AWorldSettings* WorldSettings;  // Offset: 600 Size: 8
	char pad_608[8];  // Offset: 608 Size: 8
	enum class ELightMapCooking LightMapCooking;  // Offset: 616 Size: 1
	char pad_617[7];  // Offset: 617 Size: 7
	struct TArray<struct UAssetUserData*> AssetUserData;  // Offset: 624 Size: 16
	char pad_640[16];  // Offset: 640 Size: 16
	struct TArray<struct FReplicatedStaticActorDestructionInfo> DestroyedReplicatedStaticActors;  // Offset: 656 Size: 16



 // Functions 
 public:
}; 
 
 


//Class Engine.LightmappedSurfaceCollection Size 64
// Inherited 40 bytes 
class ULightmappedSurfaceCollection : public UObject
{

 public: 
	struct UModel* SourceModel;  // Offset: 40 Size: 8
	struct TArray<int32_t> Surfaces;  // Offset: 48 Size: 16



 // Functions 
 public:
}; 
 
 


//Class Engine.LevelActorContainer Size 56
// Inherited 40 bytes 
class ULevelActorContainer : public UObject
{

 public: 
	struct TArray<struct AActor*> Actors;  // Offset: 40 Size: 16



 // Functions 
 public:
}; 
 
 


//Class Engine.LevelScriptBlueprint Size 160
// Inherited 160 bytes 
class ULevelScriptBlueprint : public UBlueprint
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.LevelStreamingDynamic Size 352
// Inherited 336 bytes 
class ULevelStreamingDynamic : public ULevelStreaming
{

 public: 
	char bInitiallyLoaded : 1;  // Offset: 336 Size: 1
	char bInitiallyVisible : 1;  // Offset: 336 Size: 1
	char pad_336_1 : 6;  // Offset: 336 Size: 1
	char pad_337[16];  // Offset: 337 Size: 16



 // Functions 
 public:
	struct ULevelStreamingDynamic* LoadLevelInstanceBySoftObjectPtr(struct UObject* WorldContextObject, struct TSoftObjectPtr<UWorld> Level, struct FVector Location, struct FRotator Rotation, bool& bOutSuccess, struct FString OptionalLevelNameOverride); // Function Engine.LevelStreamingDynamic.LoadLevelInstanceBySoftObjectPtr
	struct ULevelStreamingDynamic* LoadLevelInstance(struct UObject* WorldContextObject, struct FString LevelName, struct FVector Location, struct FRotator Rotation, bool& bOutSuccess, struct FString OptionalLevelNameOverride); // Function Engine.LevelStreamingDynamic.LoadLevelInstance
}; 
 
 


//Class Engine.MaterialExpressionSceneTexture Size 88
// Inherited 64 bytes 
class UMaterialExpressionSceneTexture : public UMaterialExpression
{

 public: 
	struct FExpressionInput Coordinates;  // Offset: 64 Size: 20
	enum class ESceneTextureId SceneTextureId;  // Offset: 84 Size: 1
	char pad_85_1 : 7;  // Offset: 85 Size: 1
	bool bFiltered : 1;  // Offset: 85 Size: 1
	char pad_86[2];  // Offset: 86 Size: 2



 // Functions 
 public:
}; 
 
 


//Class Engine.VolumetricCloudComponent Size 592
// Inherited 528 bytes 
class UVolumetricCloudComponent : public USceneComponent
{

 public: 
	float LayerBottomAltitude;  // Offset: 520 Size: 4
	float LayerHeight;  // Offset: 524 Size: 4
	float TracingStartMaxDistance;  // Offset: 528 Size: 4
	float TracingMaxDistance;  // Offset: 532 Size: 4
	float PlanetRadius;  // Offset: 536 Size: 4
	struct FColor GroundAlbedo;  // Offset: 540 Size: 4
	struct UMaterialInterface* Material;  // Offset: 544 Size: 8
	char bUsePerSampleAtmosphericLightTransmittance : 1;  // Offset: 552 Size: 1
	float SkyLightCloudBottomOcclusion;  // Offset: 556 Size: 4
	float ViewSampleCountScale;  // Offset: 560 Size: 4
	float ReflectionSampleCountScale;  // Offset: 564 Size: 4
	float ShadowViewSampleCountScale;  // Offset: 568 Size: 4
	float ShadowReflectionSampleCountScale;  // Offset: 572 Size: 4
	float ShadowTracingDistance;  // Offset: 576 Size: 4
	float StopTracingTransmittanceThreshold;  // Offset: 580 Size: 4
	char pad_588_1 : 7;  // Offset: 588 Size: 1
	char pad_589[4];  // Offset: 589 Size: 4



 // Functions 
 public:
	void SetViewSampleCountScale(float NewValue); // Function Engine.VolumetricCloudComponent.SetViewSampleCountScale
	void SetTracingStartMaxDistance(float NewValue); // Function Engine.VolumetricCloudComponent.SetTracingStartMaxDistance
	void SetTracingMaxDistance(float NewValue); // Function Engine.VolumetricCloudComponent.SetTracingMaxDistance
	void SetStopTracingTransmittanceThreshold(float NewValue); // Function Engine.VolumetricCloudComponent.SetStopTracingTransmittanceThreshold
	void SetSkyLightCloudBottomOcclusion(float NewValue); // Function Engine.VolumetricCloudComponent.SetSkyLightCloudBottomOcclusion
	void SetShadowViewSampleCountScale(float NewValue); // Function Engine.VolumetricCloudComponent.SetShadowViewSampleCountScale
	void SetShadowTracingDistance(float NewValue); // Function Engine.VolumetricCloudComponent.SetShadowTracingDistance
	void SetShadowReflectionSampleCountScale(float NewValue); // Function Engine.VolumetricCloudComponent.SetShadowReflectionSampleCountScale
	void SetReflectionSampleCountScale(float NewValue); // Function Engine.VolumetricCloudComponent.SetReflectionSampleCountScale
	void SetPlanetRadius(float NewValue); // Function Engine.VolumetricCloudComponent.SetPlanetRadius
	void SetMaterial(struct UMaterialInterface* NewValue); // Function Engine.VolumetricCloudComponent.SetMaterial
	void SetLayerHeight(float NewValue); // Function Engine.VolumetricCloudComponent.SetLayerHeight
	void SetLayerBottomAltitude(float NewValue); // Function Engine.VolumetricCloudComponent.SetLayerBottomAltitude
	void SetGroundAlbedo(struct FColor NewValue); // Function Engine.VolumetricCloudComponent.SetGroundAlbedo
	void SetbUsePerSampleAtmosphericLightTransmittance(bool NewValue); // Function Engine.VolumetricCloudComponent.SetbUsePerSampleAtmosphericLightTransmittance
}; 
 
 


//Class Engine.LevelStreamingPersistent Size 336
// Inherited 336 bytes 
class ULevelStreamingPersistent : public ULevelStreaming
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.LightMapTexture2D Size 432
// Inherited 416 bytes 
class ULightMapTexture2D : public UTexture2D
{

 public: 
	char pad_416[16];  // Offset: 416 Size: 16



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleKillBox Size 200
// Inherited 48 bytes 
class UParticleModuleKillBox : public UParticleModuleKillBase
{

 public: 
	struct FRawDistributionVector LowerLeftCorner;  // Offset: 48 Size: 72
	struct FRawDistributionVector UpperRightCorner;  // Offset: 120 Size: 72
	char bAbsolute : 1;  // Offset: 192 Size: 1
	char bKillInside : 1;  // Offset: 192 Size: 1
	char bAxisAlignedAndFixedSize : 1;  // Offset: 192 Size: 1
	char pad_192_1 : 5;  // Offset: 192 Size: 1
	char pad_193[8];  // Offset: 193 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.LightMapVirtualTexture2D Size 448
// Inherited 416 bytes 
class ULightMapVirtualTexture2D : public UTexture2D
{

 public: 
	struct TArray<int8_t> TypeToLayer;  // Offset: 416 Size: 16
	char pad_432[16];  // Offset: 432 Size: 16



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionClearCoatNormalCustomOutput Size 88
// Inherited 64 bytes 
class UMaterialExpressionClearCoatNormalCustomOutput : public UMaterialExpressionCustomOutput
{

 public: 
	struct FExpressionInput Input;  // Offset: 64 Size: 20
	char pad_84[4];  // Offset: 84 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.LightmassImportanceVolume Size 600
// Inherited 600 bytes 
class ALightmassImportanceVolume : public AVolume
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.LightmassMobileNoShadowProbeVolume Size 608
// Inherited 600 bytes 
class ALightmassMobileNoShadowProbeVolume : public AVolume
{

 public: 
	float ShadowMask;  // Offset: 600 Size: 4
	float ShadowBlend;  // Offset: 604 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.SceneCapture Size 560
// Inherited 544 bytes 
class ASceneCapture : public AActor
{

 public: 
	struct UStaticMeshComponent* MeshComp;  // Offset: 544 Size: 8
	struct USceneComponent* SceneComponent;  // Offset: 552 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.LightmassPortal Size 552
// Inherited 544 bytes 
class ALightmassPortal : public AActor
{

 public: 
	struct ULightmassPortalComponent* PortalComponent;  // Offset: 544 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionRuntimeVirtualTextureSample Size 144
// Inherited 64 bytes 
class UMaterialExpressionRuntimeVirtualTextureSample : public UMaterialExpression
{

 public: 
	struct FExpressionInput Coordinates;  // Offset: 64 Size: 20
	struct FExpressionInput WorldPosition;  // Offset: 84 Size: 20
	struct FExpressionInput MipValue;  // Offset: 104 Size: 20
	char pad_124[4];  // Offset: 124 Size: 4
	struct URuntimeVirtualTexture* VirtualTexture;  // Offset: 128 Size: 8
	enum class ERuntimeVirtualTextureMaterialType MaterialType;  // Offset: 136 Size: 1
	char pad_137_1 : 7;  // Offset: 137 Size: 1
	bool bSinglePhysicalSpace : 1;  // Offset: 137 Size: 1
	char pad_138_1 : 7;  // Offset: 138 Size: 1
	bool bAdaptive : 1;  // Offset: 138 Size: 1
	enum class ERuntimeVirtualTextureMipValueMode MipValueMode;  // Offset: 139 Size: 1
	enum class ERuntimeVirtualTextureTextureAddressMode TextureAddressMode;  // Offset: 140 Size: 1
	char pad_141[3];  // Offset: 141 Size: 3



 // Functions 
 public:
}; 
 
 


//Class Engine.LODSyncInterface Size 40
// Inherited 40 bytes 
class ULODSyncInterface : public UInterface
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.MapBuildDataRegistry Size 568
// Inherited 40 bytes 
class UMapBuildDataRegistry : public UObject
{

 public: 
	enum class ELightingBuildQuality LevelLightingQuality;  // Offset: 40 Size: 1
	char pad_41[527];  // Offset: 41 Size: 527



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionActorPositionWS Size 64
// Inherited 64 bytes 
class UMaterialExpressionActorPositionWS : public UMaterialExpression
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionAdd Size 112
// Inherited 64 bytes 
class UMaterialExpressionAdd : public UMaterialExpression
{

 public: 
	struct FExpressionInput A;  // Offset: 64 Size: 20
	struct FExpressionInput B;  // Offset: 84 Size: 20
	float ConstA;  // Offset: 104 Size: 4
	float ConstB;  // Offset: 108 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionArctangent2Fast Size 104
// Inherited 64 bytes 
class UMaterialExpressionArctangent2Fast : public UMaterialExpression
{

 public: 
	struct FExpressionInput Y;  // Offset: 64 Size: 20
	struct FExpressionInput X;  // Offset: 84 Size: 20



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionAntialiasedTextureMask Size 136
// Inherited 128 bytes 
class UMaterialExpressionAntialiasedTextureMask : public UMaterialExpressionTextureSampleParameter2D
{

 public: 
	float Threshold;  // Offset: 128 Size: 4
	enum class ETextureColorChannel Channel;  // Offset: 132 Size: 1
	char pad_133[3];  // Offset: 133 Size: 3



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionFmod Size 104
// Inherited 64 bytes 
class UMaterialExpressionFmod : public UMaterialExpression
{

 public: 
	struct FExpressionInput A;  // Offset: 64 Size: 20
	struct FExpressionInput B;  // Offset: 84 Size: 20



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionArccosine Size 88
// Inherited 64 bytes 
class UMaterialExpressionArccosine : public UMaterialExpression
{

 public: 
	struct FExpressionInput Input;  // Offset: 64 Size: 20
	char pad_84[4];  // Offset: 84 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionArcsineFast Size 88
// Inherited 64 bytes 
class UMaterialExpressionArcsineFast : public UMaterialExpression
{

 public: 
	struct FExpressionInput Input;  // Offset: 64 Size: 20
	char pad_84[4];  // Offset: 84 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionTransformPosition Size 88
// Inherited 64 bytes 
class UMaterialExpressionTransformPosition : public UMaterialExpression
{

 public: 
	struct FExpressionInput Input;  // Offset: 64 Size: 20
	enum class EMaterialPositionTransformSource TransformSourceType;  // Offset: 84 Size: 1
	enum class EMaterialPositionTransformSource TransformType;  // Offset: 85 Size: 1
	char pad_86[2];  // Offset: 86 Size: 2



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionArctangent Size 88
// Inherited 64 bytes 
class UMaterialExpressionArctangent : public UMaterialExpression
{

 public: 
	struct FExpressionInput Input;  // Offset: 64 Size: 20
	char pad_84[4];  // Offset: 84 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionAtmosphericFogColor Size 88
// Inherited 64 bytes 
class UMaterialExpressionAtmosphericFogColor : public UMaterialExpression
{

 public: 
	struct FExpressionInput WorldPosition;  // Offset: 64 Size: 20
	char pad_84[4];  // Offset: 84 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionLightmassReplace Size 104
// Inherited 64 bytes 
class UMaterialExpressionLightmassReplace : public UMaterialExpression
{

 public: 
	struct FExpressionInput Realtime;  // Offset: 64 Size: 20
	struct FExpressionInput Lightmass;  // Offset: 84 Size: 20



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionAtmosphericLightVector Size 64
// Inherited 64 bytes 
class UMaterialExpressionAtmosphericLightVector : public UMaterialExpression
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionBentNormalCustomOutput Size 88
// Inherited 64 bytes 
class UMaterialExpressionBentNormalCustomOutput : public UMaterialExpressionCustomOutput
{

 public: 
	struct FExpressionInput Input;  // Offset: 64 Size: 20
	char pad_84[4];  // Offset: 84 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.TriggerCapsule Size 552
// Inherited 552 bytes 
class ATriggerCapsule : public ATriggerBase
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.NavigationDataChunk Size 48
// Inherited 40 bytes 
class UNavigationDataChunk : public UObject
{

 public: 
	struct FName NavigationDataName;  // Offset: 40 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleLocationPrimitiveCylinder_Seeded Size 320
// Inherited 288 bytes 
class UParticleModuleLocationPrimitiveCylinder_Seeded : public UParticleModuleLocationPrimitiveCylinder
{

 public: 
	struct FParticleRandomSeedInfo RandomSeedInfo;  // Offset: 288 Size: 32



 // Functions 
 public:
}; 
 
 


//Class Engine.PostProcessVolume Size 2112
// Inherited 600 bytes 
class APostProcessVolume : public AVolume
{

 public: 
	char pad_600[8];  // Offset: 600 Size: 8
	struct FPostProcessSettings Settings;  // Offset: 608 Size: 1488
	float Priority;  // Offset: 2096 Size: 4
	float BlendRadius;  // Offset: 2100 Size: 4
	float BlendWeight;  // Offset: 2104 Size: 4
	char bEnabled : 1;  // Offset: 2108 Size: 1
	char bUnbound : 1;  // Offset: 2108 Size: 1
	char pad_2108_1 : 6;  // Offset: 2108 Size: 1
	char pad_2109[4];  // Offset: 2109 Size: 4



 // Functions 
 public:
	void AddOrUpdateBlendable(struct TScriptInterface<IBlendableInterface> InBlendableObject, float InWeight); // Function Engine.PostProcessVolume.AddOrUpdateBlendable
}; 
 
 


//Class Engine.MaterialExpressionBlackBody Size 88
// Inherited 64 bytes 
class UMaterialExpressionBlackBody : public UMaterialExpression
{

 public: 
	struct FExpressionInput Temp;  // Offset: 64 Size: 20
	char pad_84[4];  // Offset: 84 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleColorOverLife Size 176
// Inherited 48 bytes 
class UParticleModuleColorOverLife : public UParticleModuleColorBase
{

 public: 
	struct FRawDistributionVector ColorOverLife;  // Offset: 48 Size: 72
	struct FRawDistributionFloat AlphaOverLife;  // Offset: 120 Size: 48
	char bClampAlpha : 1;  // Offset: 168 Size: 1
	char pad_168_1 : 7;  // Offset: 168 Size: 1
	char pad_169[8];  // Offset: 169 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionBlendMaterialAttributes Size 136
// Inherited 64 bytes 
class UMaterialExpressionBlendMaterialAttributes : public UMaterialExpression
{

 public: 
	struct FMaterialAttributesInput A;  // Offset: 64 Size: 24
	struct FMaterialAttributesInput B;  // Offset: 88 Size: 24
	struct FExpressionInput Alpha;  // Offset: 112 Size: 20
	enum class EMaterialAttributeBlend PixelAttributeBlendType;  // Offset: 132 Size: 1
	enum class EMaterialAttributeBlend VertexAttributeBlendType;  // Offset: 133 Size: 1
	char pad_134[2];  // Offset: 134 Size: 2



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionBreakMaterialAttributes Size 88
// Inherited 64 bytes 
class UMaterialExpressionBreakMaterialAttributes : public UMaterialExpression
{

 public: 
	struct FMaterialAttributesInput MaterialAttributes;  // Offset: 64 Size: 24



 // Functions 
 public:
}; 
 
 


//Class Engine.PlanarReflection Size 576
// Inherited 560 bytes 
class APlanarReflection : public ASceneCapture
{

 public: 
	struct UPlanarReflectionComponent* PlanarReflectionComponent;  // Offset: 560 Size: 8
	char pad_568_1 : 7;  // Offset: 568 Size: 1
	bool bShowPreviewPlane : 1;  // Offset: 568 Size: 1
	char pad_569[7];  // Offset: 569 Size: 7



 // Functions 
 public:
	void OnInterpToggle(bool bEnable); // Function Engine.PlanarReflection.OnInterpToggle
}; 
 
 


//Class Engine.MaterialExpressionCeil Size 88
// Inherited 64 bytes 
class UMaterialExpressionCeil : public UMaterialExpression
{

 public: 
	struct FExpressionInput Input;  // Offset: 64 Size: 20
	char pad_84[4];  // Offset: 84 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.ProxyLODMeshSimplificationSettings Size 64
// Inherited 56 bytes 
class UProxyLODMeshSimplificationSettings : public UDeveloperSettings
{

 public: 
	struct FName ProxyLODMeshReductionModuleName;  // Offset: 56 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionParameter Size 88
// Inherited 64 bytes 
class UMaterialExpressionParameter : public UMaterialExpression
{

 public: 
	struct FName ParameterName;  // Offset: 64 Size: 8
	struct FGuid ExpressionGUID;  // Offset: 72 Size: 16



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionSaturate Size 88
// Inherited 64 bytes 
class UMaterialExpressionSaturate : public UMaterialExpression
{

 public: 
	struct FExpressionInput Input;  // Offset: 64 Size: 20
	char pad_84[4];  // Offset: 84 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionChannelMaskParameter Size 120
// Inherited 112 bytes 
class UMaterialExpressionChannelMaskParameter : public UMaterialExpressionVectorParameter
{

 public: 
	enum class EChannelMaskParameterColor MaskChannel;  // Offset: 112 Size: 1
	char pad_113[7];  // Offset: 113 Size: 7



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionConstant Size 72
// Inherited 64 bytes 
class UMaterialExpressionConstant : public UMaterialExpression
{

 public: 
	float R;  // Offset: 64 Size: 4
	char pad_68[4];  // Offset: 68 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionConstant2Vector Size 72
// Inherited 64 bytes 
class UMaterialExpressionConstant2Vector : public UMaterialExpression
{

 public: 
	float R;  // Offset: 64 Size: 4
	float G;  // Offset: 68 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionConstantBiasScale Size 96
// Inherited 64 bytes 
class UMaterialExpressionConstantBiasScale : public UMaterialExpression
{

 public: 
	struct FExpressionInput Input;  // Offset: 64 Size: 20
	float Bias;  // Offset: 84 Size: 4
	float Scale;  // Offset: 88 Size: 4
	char pad_92[4];  // Offset: 92 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionClearCoatReflectionOutput Size 88
// Inherited 64 bytes 
class UMaterialExpressionClearCoatReflectionOutput : public UMaterialExpressionCustomOutput
{

 public: 
	struct FExpressionInput Input;  // Offset: 64 Size: 20
	char pad_84[4];  // Offset: 84 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionTwoSidedSign Size 64
// Inherited 64 bytes 
class UMaterialExpressionTwoSidedSign : public UMaterialExpression
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionScalarParameter Size 96
// Inherited 88 bytes 
class UMaterialExpressionScalarParameter : public UMaterialExpressionParameter
{

 public: 
	float DefaultValue;  // Offset: 88 Size: 4
	char pad_92_1 : 7;  // Offset: 92 Size: 1
	bool bUseCustomPrimitiveData : 1;  // Offset: 92 Size: 1
	char PrimitiveDataIndex;  // Offset: 93 Size: 1
	char pad_94[2];  // Offset: 94 Size: 2



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionDDY Size 88
// Inherited 64 bytes 
class UMaterialExpressionDDY : public UMaterialExpression
{

 public: 
	struct FExpressionInput Value;  // Offset: 64 Size: 20
	char pad_84[4];  // Offset: 84 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionDecalMipmapLevel Size 96
// Inherited 64 bytes 
class UMaterialExpressionDecalMipmapLevel : public UMaterialExpression
{

 public: 
	struct FExpressionInput TextureSize;  // Offset: 64 Size: 20
	float ConstWidth;  // Offset: 84 Size: 4
	float ConstHeight;  // Offset: 88 Size: 4
	char pad_92[4];  // Offset: 92 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionDeltaTime Size 64
// Inherited 64 bytes 
class UMaterialExpressionDeltaTime : public UMaterialExpression
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleAccelerationDragScaleOverLife Size 112
// Inherited 56 bytes 
class UParticleModuleAccelerationDragScaleOverLife : public UParticleModuleAccelerationBase
{

 public: 
	struct UDistributionFloat* DragScale;  // Offset: 56 Size: 8
	struct FRawDistributionFloat DragScaleRaw;  // Offset: 64 Size: 48



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionDepthFade Size 112
// Inherited 64 bytes 
class UMaterialExpressionDepthFade : public UMaterialExpression
{

 public: 
	struct FExpressionInput InOpacity;  // Offset: 64 Size: 20
	struct FExpressionInput FadeDistance;  // Offset: 84 Size: 20
	float OpacityDefault;  // Offset: 104 Size: 4
	float FadeDistanceDefault;  // Offset: 108 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionDesaturation Size 120
// Inherited 64 bytes 
class UMaterialExpressionDesaturation : public UMaterialExpression
{

 public: 
	struct FExpressionInput Input;  // Offset: 64 Size: 20
	struct FExpressionInput Fraction;  // Offset: 84 Size: 20
	struct FLinearColor LuminanceFactors;  // Offset: 104 Size: 16



 // Functions 
 public:
}; 
 
 


//Class Engine.PlatformEventsComponent Size 208
// Inherited 176 bytes 
class UPlatformEventsComponent : public UActorComponent
{

 public: 
	struct FMulticastInlineDelegate PlatformChangedToLaptopModeDelegate;  // Offset: 176 Size: 16
	struct FMulticastInlineDelegate PlatformChangedToTabletModeDelegate;  // Offset: 192 Size: 16



 // Functions 
 public:
	bool SupportsConvertibleLaptops(); // Function Engine.PlatformEventsComponent.SupportsConvertibleLaptops
	void PlatformEventDelegate__DelegateSignature(); // DelegateFunction Engine.PlatformEventsComponent.PlatformEventDelegate__DelegateSignature
	bool IsInTabletMode(); // Function Engine.PlatformEventsComponent.IsInTabletMode
	bool IsInLaptopMode(); // Function Engine.PlatformEventsComponent.IsInLaptopMode
}; 
 
 


//Class Engine.MaterialExpressionDistance Size 104
// Inherited 64 bytes 
class UMaterialExpressionDistance : public UMaterialExpression
{

 public: 
	struct FExpressionInput A;  // Offset: 64 Size: 20
	struct FExpressionInput B;  // Offset: 84 Size: 20



 // Functions 
 public:
}; 
 
 


//Class Engine.RendererOverrideSettings Size 64
// Inherited 56 bytes 
class URendererOverrideSettings : public UDeveloperSettings
{

 public: 
	char bSupportAllShaderPermutations : 1;  // Offset: 56 Size: 1
	char bForceRecomputeTangents : 1;  // Offset: 56 Size: 1
	char pad_56_1 : 6;  // Offset: 56 Size: 1
	char pad_57[8];  // Offset: 57 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionDistanceCullFade Size 64
// Inherited 64 bytes 
class UMaterialExpressionDistanceCullFade : public UMaterialExpression
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionWorldPosition Size 72
// Inherited 64 bytes 
class UMaterialExpressionWorldPosition : public UMaterialExpression
{

 public: 
	enum class EWorldPositionIncludedOffsets WorldPositionShaderOffset;  // Offset: 64 Size: 1
	char pad_65[7];  // Offset: 65 Size: 7



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionDistanceFieldsRenderingSwitch Size 104
// Inherited 64 bytes 
class UMaterialExpressionDistanceFieldsRenderingSwitch : public UMaterialExpression
{

 public: 
	struct FExpressionInput No;  // Offset: 64 Size: 20
	struct FExpressionInput Yes;  // Offset: 84 Size: 20



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionDistanceToNearestSurface Size 88
// Inherited 64 bytes 
class UMaterialExpressionDistanceToNearestSurface : public UMaterialExpression
{

 public: 
	struct FExpressionInput position;  // Offset: 64 Size: 20
	char pad_84[4];  // Offset: 84 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionDynamicParameter Size 104
// Inherited 64 bytes 
class UMaterialExpressionDynamicParameter : public UMaterialExpression
{

 public: 
	struct TArray<struct FString> ParamNames;  // Offset: 64 Size: 16
	struct FLinearColor DefaultValue;  // Offset: 80 Size: 16
	uint32_t ParameterIndex;  // Offset: 96 Size: 4
	char pad_100[4];  // Offset: 100 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionEyeAdaptation Size 64
// Inherited 64 bytes 
class UMaterialExpressionEyeAdaptation : public UMaterialExpression
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionFeatureLevelSwitch Size 88
// Inherited 64 bytes 
class UMaterialExpressionFeatureLevelSwitch : public UMaterialExpression
{

 public: 
	struct FExpressionInput Default;  // Offset: 64 Size: 20
	char pad_84[4];  // Offset: 84 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionFontSample Size 80
// Inherited 64 bytes 
class UMaterialExpressionFontSample : public UMaterialExpression
{

 public: 
	struct UFont* Font;  // Offset: 64 Size: 8
	int32_t FontTexturePage;  // Offset: 72 Size: 4
	char pad_76[4];  // Offset: 76 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleSpriteEmitter Size 440
// Inherited 440 bytes 
class UParticleSpriteEmitter : public UParticleEmitter
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.VirtualTexturePoolConfig Size 64
// Inherited 40 bytes 
class UVirtualTexturePoolConfig : public UObject
{

 public: 
	int32_t DefaultSizeInMegabyte;  // Offset: 40 Size: 4
	char pad_44[4];  // Offset: 44 Size: 4
	struct TArray<struct FVirtualTextureSpacePoolConfig> Pools;  // Offset: 48 Size: 16



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionFresnel Size 136
// Inherited 64 bytes 
class UMaterialExpressionFresnel : public UMaterialExpression
{

 public: 
	struct FExpressionInput ExponentIn;  // Offset: 64 Size: 20
	float Exponent;  // Offset: 84 Size: 4
	struct FExpressionInput BaseReflectFractionIn;  // Offset: 88 Size: 20
	float BaseReflectFraction;  // Offset: 108 Size: 4
	struct FExpressionInput Normal;  // Offset: 112 Size: 20
	char pad_132[4];  // Offset: 132 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionFunctionOutput Size 136
// Inherited 64 bytes 
class UMaterialExpressionFunctionOutput : public UMaterialExpression
{

 public: 
	struct FName OutputName;  // Offset: 64 Size: 8
	struct FString Description;  // Offset: 72 Size: 16
	int32_t SortPriority;  // Offset: 88 Size: 4
	struct FExpressionInput A;  // Offset: 92 Size: 20
	char bLastPreviewed : 1;  // Offset: 112 Size: 1
	char pad_112_1 : 7;  // Offset: 112 Size: 1
	char pad_113[4];  // Offset: 113 Size: 4
	struct FGuid ID;  // Offset: 116 Size: 16
	char pad_132[4];  // Offset: 132 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.VectorFieldComponent Size 1184
// Inherited 1136 bytes 
class UVectorFieldComponent : public UPrimitiveComponent
{

 public: 
	struct UVectorField* VectorField;  // Offset: 1136 Size: 8
	float Intensity;  // Offset: 1144 Size: 4
	float Tightness;  // Offset: 1148 Size: 4
	char bPreviewVectorField : 1;  // Offset: 1152 Size: 1
	char pad_1152_1 : 7;  // Offset: 1152 Size: 1
	char pad_1153[32];  // Offset: 1153 Size: 32



 // Functions 
 public:
	void SetIntensity(float NewIntensity); // Function Engine.VectorFieldComponent.SetIntensity
}; 
 
 


//Class Engine.MaterialExpressionGetMaterialAttributes Size 104
// Inherited 64 bytes 
class UMaterialExpressionGetMaterialAttributes : public UMaterialExpression
{

 public: 
	struct FMaterialAttributesInput MaterialAttributes;  // Offset: 64 Size: 24
	struct TArray<struct FGuid> AttributeGetTypes;  // Offset: 88 Size: 16



 // Functions 
 public:
}; 
 
 


//Class Engine.SceneCaptureComponent Size 720
// Inherited 528 bytes 
class USceneCaptureComponent : public USceneComponent
{

 public: 
	enum class ESceneCapturePrimitiveRenderMode PrimitiveRenderMode;  // Offset: 520 Size: 1
	enum class ESceneCaptureSource CaptureSource;  // Offset: 521 Size: 1
	char bCaptureEveryFrame : 1;  // Offset: 522 Size: 1
	char bCaptureOnMovement : 1;  // Offset: 522 Size: 1
	char pad_530_1 : 5;  // Offset: 530 Size: 1
	bool bAlwaysPersistRenderingState : 1;  // Offset: 523 Size: 1
	struct TArray<struct TWeakObjectPtr<UPrimitiveComponent>> HiddenComponents;  // Offset: 528 Size: 16
	struct TArray<struct AActor*> HiddenActors;  // Offset: 544 Size: 16
	struct TArray<struct TWeakObjectPtr<UPrimitiveComponent>> ShowOnlyComponents;  // Offset: 560 Size: 16
	struct TArray<struct AActor*> ShowOnlyActors;  // Offset: 576 Size: 16
	float LODDistanceFactor;  // Offset: 592 Size: 4
	float MaxViewDistanceOverride;  // Offset: 596 Size: 4
	int32_t CaptureSortPriority;  // Offset: 600 Size: 4
	char pad_607_1 : 7;  // Offset: 607 Size: 1
	bool bUseRayTracingIfEnabled : 1;  // Offset: 604 Size: 1
	struct TArray<struct FEngineShowFlagsSetting> ShowFlagSettings;  // Offset: 608 Size: 16
	char pad_624[48];  // Offset: 624 Size: 48
	struct FString ProfilingEventName;  // Offset: 672 Size: 16
	char pad_688[32];  // Offset: 688 Size: 32



 // Functions 
 public:
	void ShowOnlyComponent(struct UPrimitiveComponent* InComponent); // Function Engine.SceneCaptureComponent.ShowOnlyComponent
	void ShowOnlyActorComponents(struct AActor* InActor, bool bIncludeFromChildActors); // Function Engine.SceneCaptureComponent.ShowOnlyActorComponents
	void SetCaptureSortPriority(int32_t NewCaptureSortPriority); // Function Engine.SceneCaptureComponent.SetCaptureSortPriority
	void RemoveShowOnlyComponent(struct UPrimitiveComponent* InComponent); // Function Engine.SceneCaptureComponent.RemoveShowOnlyComponent
	void RemoveShowOnlyActorComponents(struct AActor* InActor, bool bIncludeFromChildActors); // Function Engine.SceneCaptureComponent.RemoveShowOnlyActorComponents
	void HideComponent(struct UPrimitiveComponent* InComponent); // Function Engine.SceneCaptureComponent.HideComponent
	void HideActorComponents(struct AActor* InActor, bool bIncludeFromChildActors); // Function Engine.SceneCaptureComponent.HideActorComponents
	void ClearShowOnlyComponents(); // Function Engine.SceneCaptureComponent.ClearShowOnlyComponents
	void ClearHiddenComponents(); // Function Engine.SceneCaptureComponent.ClearHiddenComponents
}; 
 
 


//Class Engine.MaterialExpressionGIReplace Size 128
// Inherited 64 bytes 
class UMaterialExpressionGIReplace : public UMaterialExpression
{

 public: 
	struct FExpressionInput Default;  // Offset: 64 Size: 20
	struct FExpressionInput StaticIndirect;  // Offset: 84 Size: 20
	struct FExpressionInput DynamicIndirect;  // Offset: 104 Size: 20
	char pad_124[4];  // Offset: 124 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionParticleDirection Size 64
// Inherited 64 bytes 
class UMaterialExpressionParticleDirection : public UMaterialExpression
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionHairColor Size 128
// Inherited 64 bytes 
class UMaterialExpressionHairColor : public UMaterialExpression
{

 public: 
	struct FExpressionInput Melanin;  // Offset: 64 Size: 20
	struct FExpressionInput Redness;  // Offset: 84 Size: 20
	struct FExpressionInput DyeColor;  // Offset: 104 Size: 20
	char pad_124[4];  // Offset: 124 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionIf Size 176
// Inherited 64 bytes 
class UMaterialExpressionIf : public UMaterialExpression
{

 public: 
	struct FExpressionInput A;  // Offset: 64 Size: 20
	struct FExpressionInput B;  // Offset: 84 Size: 20
	struct FExpressionInput AGreaterThanB;  // Offset: 104 Size: 20
	struct FExpressionInput AEqualsB;  // Offset: 124 Size: 20
	struct FExpressionInput ALessThanB;  // Offset: 144 Size: 20
	float EqualsThreshold;  // Offset: 164 Size: 4
	float ConstB;  // Offset: 168 Size: 4
	float ConstAEqualsB;  // Offset: 172 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.StereoLayerShapeEquirect Size 112
// Inherited 40 bytes 
class UStereoLayerShapeEquirect : public UStereoLayerShape
{

 public: 
	struct FBox2D LeftUVRect;  // Offset: 40 Size: 20
	struct FBox2D RightUVRect;  // Offset: 60 Size: 20
	struct FVector2D LeftScale;  // Offset: 80 Size: 8
	struct FVector2D RightScale;  // Offset: 88 Size: 8
	struct FVector2D LeftBias;  // Offset: 96 Size: 8
	struct FVector2D RightBias;  // Offset: 104 Size: 8



 // Functions 
 public:
	void SetEquirectProps(struct FEquirectProps InScaleBiases); // Function Engine.StereoLayerShapeEquirect.SetEquirectProps
}; 
 
 


//Class Engine.MaterialExpressionCurvatureOutput Size 88
// Inherited 64 bytes 
class UMaterialExpressionCurvatureOutput : public UMaterialExpressionCustomOutput
{

 public: 
	struct FExpressionInput Input;  // Offset: 64 Size: 20
	char pad_84[4];  // Offset: 84 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionSheenOutput Size 88
// Inherited 64 bytes 
class UMaterialExpressionSheenOutput : public UMaterialExpressionCustomOutput
{

 public: 
	struct FExpressionInput Input;  // Offset: 64 Size: 20
	char pad_84[4];  // Offset: 84 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleSubUVMovie Size 176
// Inherited 112 bytes 
class UParticleModuleSubUVMovie : public UParticleModuleSubUV
{

 public: 
	char bUseEmitterTime : 1;  // Offset: 112 Size: 1
	char pad_112_1 : 7;  // Offset: 112 Size: 1
	char pad_113[8];  // Offset: 113 Size: 8
	struct FRawDistributionFloat FrameRate;  // Offset: 120 Size: 48
	int32_t StartingFrame;  // Offset: 168 Size: 4
	char pad_172[4];  // Offset: 172 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionClearCoatOutput Size 88
// Inherited 64 bytes 
class UMaterialExpressionClearCoatOutput : public UMaterialExpressionCustomOutput
{

 public: 
	struct FExpressionInput Input;  // Offset: 64 Size: 20
	char pad_84[4];  // Offset: 84 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.NavRelevantInterface Size 40
// Inherited 40 bytes 
class UNavRelevantInterface : public UInterface
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.PhysicsConstraintComponent Size 1056
// Inherited 528 bytes 
class UPhysicsConstraintComponent : public USceneComponent
{

 public: 
	struct AActor* ConstraintActor1;  // Offset: 520 Size: 8
	struct FConstrainComponentPropName ComponentName1;  // Offset: 528 Size: 8
	struct AActor* ConstraintActor2;  // Offset: 536 Size: 8
	struct FConstrainComponentPropName ComponentName2;  // Offset: 544 Size: 8
	char pad_560[8];  // Offset: 560 Size: 8
	struct UPhysicsConstraintTemplate* ConstraintSetup;  // Offset: 568 Size: 8
	struct FMulticastInlineDelegate OnConstraintBroken;  // Offset: 576 Size: 16
	struct FConstraintInstance ConstraintInstance;  // Offset: 592 Size: 456
	char pad_1048[8];  // Offset: 1048 Size: 8



 // Functions 
 public:
	void SetOrientationDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive); // Function Engine.PhysicsConstraintComponent.SetOrientationDriveTwistAndSwing
	void SetOrientationDriveSLERP(bool bEnableSLERP); // Function Engine.PhysicsConstraintComponent.SetOrientationDriveSLERP
	void SetLinearZLimit(enum class ELinearConstraintMotion ConstraintType, float LimitSize); // Function Engine.PhysicsConstraintComponent.SetLinearZLimit
	void SetLinearYLimit(enum class ELinearConstraintMotion ConstraintType, float LimitSize); // Function Engine.PhysicsConstraintComponent.SetLinearYLimit
	void SetLinearXLimit(enum class ELinearConstraintMotion ConstraintType, float LimitSize); // Function Engine.PhysicsConstraintComponent.SetLinearXLimit
	void SetLinearVelocityTarget(struct FVector& InVelTarget); // Function Engine.PhysicsConstraintComponent.SetLinearVelocityTarget
	void SetLinearVelocityDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ); // Function Engine.PhysicsConstraintComponent.SetLinearVelocityDrive
	void SetLinearPositionTarget(struct FVector& InPosTarget); // Function Engine.PhysicsConstraintComponent.SetLinearPositionTarget
	void SetLinearPositionDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ); // Function Engine.PhysicsConstraintComponent.SetLinearPositionDrive
	void SetLinearPlasticity(bool bLinearPlasticity, float LinearPlasticityThreshold); // Function Engine.PhysicsConstraintComponent.SetLinearPlasticity
	void SetLinearDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit); // Function Engine.PhysicsConstraintComponent.SetLinearDriveParams
	void SetLinearBreakable(bool bLinearBreakable, float LinearBreakThreshold); // Function Engine.PhysicsConstraintComponent.SetLinearBreakable
	void SetDisableCollision(bool bDisableCollision); // Function Engine.PhysicsConstraintComponent.SetDisableCollision
	void SetConstraintReferencePosition(enum class EConstraintFrame Frame, struct FVector& RefPosition); // Function Engine.PhysicsConstraintComponent.SetConstraintReferencePosition
	void SetConstraintReferenceOrientation(enum class EConstraintFrame Frame, struct FVector& PriAxis, struct FVector& SecAxis); // Function Engine.PhysicsConstraintComponent.SetConstraintReferenceOrientation
	void SetConstraintReferenceFrame(enum class EConstraintFrame Frame, struct FTransform& RefFrame); // Function Engine.PhysicsConstraintComponent.SetConstraintReferenceFrame
	void SetConstrainedComponents(struct UPrimitiveComponent* Component1, struct FName BoneName1, struct UPrimitiveComponent* Component2, struct FName BoneName2); // Function Engine.PhysicsConstraintComponent.SetConstrainedComponents
	void SetAngularVelocityTarget(struct FVector& InVelTarget); // Function Engine.PhysicsConstraintComponent.SetAngularVelocityTarget
	void SetAngularVelocityDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive); // Function Engine.PhysicsConstraintComponent.SetAngularVelocityDriveTwistAndSwing
	void SetAngularVelocityDriveSLERP(bool bEnableSLERP); // Function Engine.PhysicsConstraintComponent.SetAngularVelocityDriveSLERP
	void SetAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive); // Function Engine.PhysicsConstraintComponent.SetAngularVelocityDrive
	void SetAngularTwistLimit(enum class EAngularConstraintMotion ConstraintType, float TwistLimitAngle); // Function Engine.PhysicsConstraintComponent.SetAngularTwistLimit
	void SetAngularSwing2Limit(enum class EAngularConstraintMotion MotionType, float Swing2LimitAngle); // Function Engine.PhysicsConstraintComponent.SetAngularSwing2Limit
	void SetAngularSwing1Limit(enum class EAngularConstraintMotion MotionType, float Swing1LimitAngle); // Function Engine.PhysicsConstraintComponent.SetAngularSwing1Limit
	void SetAngularPlasticity(bool bAngularPlasticity, float AngularPlasticityThreshold); // Function Engine.PhysicsConstraintComponent.SetAngularPlasticity
	void SetAngularOrientationTarget(struct FRotator& InPosTarget); // Function Engine.PhysicsConstraintComponent.SetAngularOrientationTarget
	void SetAngularOrientationDrive(bool bEnableSwingDrive, bool bEnableTwistDrive); // Function Engine.PhysicsConstraintComponent.SetAngularOrientationDrive
	void SetAngularDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit); // Function Engine.PhysicsConstraintComponent.SetAngularDriveParams
	void SetAngularDriveMode(enum class EAngularDriveMode DriveMode); // Function Engine.PhysicsConstraintComponent.SetAngularDriveMode
	void SetAngularBreakable(bool bAngularBreakable, float AngularBreakThreshold); // Function Engine.PhysicsConstraintComponent.SetAngularBreakable
	bool IsBroken(); // Function Engine.PhysicsConstraintComponent.IsBroken
	float GetCurrentTwist(); // Function Engine.PhysicsConstraintComponent.GetCurrentTwist
	float GetCurrentSwing2(); // Function Engine.PhysicsConstraintComponent.GetCurrentSwing2
	float GetCurrentSwing1(); // Function Engine.PhysicsConstraintComponent.GetCurrentSwing1
	void GetConstraintForce(struct FVector& OutLinearForce, struct FVector& OutAngularForce); // Function Engine.PhysicsConstraintComponent.GetConstraintForce
	void BreakConstraint(); // Function Engine.PhysicsConstraintComponent.BreakConstraint
}; 
 
 


//Class Engine.MaterialExpressionClearCoatTintOutput Size 88
// Inherited 64 bytes 
class UMaterialExpressionClearCoatTintOutput : public UMaterialExpressionCustomOutput
{

 public: 
	struct FExpressionInput Input;  // Offset: 64 Size: 20
	char pad_84[4];  // Offset: 84 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.MicroTransactionBase Size 104
// Inherited 56 bytes 
class UMicroTransactionBase : public UPlatformInterfaceBase
{

 public: 
	struct TArray<struct FPurchaseInfo> AvailableProducts;  // Offset: 56 Size: 16
	struct FString LastError;  // Offset: 72 Size: 16
	struct FString LastErrorSolution;  // Offset: 88 Size: 16



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionClearCoatNormalOutput Size 88
// Inherited 64 bytes 
class UMaterialExpressionClearCoatNormalOutput : public UMaterialExpressionCustomOutput
{

 public: 
	struct FExpressionInput Input;  // Offset: 64 Size: 20
	char pad_84[4];  // Offset: 84 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionStaticBoolParameter Size 96
// Inherited 88 bytes 
class UMaterialExpressionStaticBoolParameter : public UMaterialExpressionParameter
{

 public: 
	char DefaultValue : 1;  // Offset: 88 Size: 1
	char pad_88_1 : 7;  // Offset: 88 Size: 1
	char pad_89[8];  // Offset: 89 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionTranslucentParamOutput Size 88
// Inherited 64 bytes 
class UMaterialExpressionTranslucentParamOutput : public UMaterialExpressionCustomOutput
{

 public: 
	struct FExpressionInput Input;  // Offset: 64 Size: 20
	char pad_84[4];  // Offset: 84 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionTranslucentColorOutput Size 88
// Inherited 64 bytes 
class UMaterialExpressionTranslucentColorOutput : public UMaterialExpressionCustomOutput
{

 public: 
	struct FExpressionInput Input;  // Offset: 64 Size: 20
	char pad_84[4];  // Offset: 84 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.SoundSubmix Size 192
// Inherited 64 bytes 
class USoundSubmix : public USoundSubmixWithParentBase
{

 public: 
	char bMuteWhenBackgrounded : 1;  // Offset: 64 Size: 1
	char pad_64_1 : 7;  // Offset: 64 Size: 1
	char pad_65[8];  // Offset: 65 Size: 8
	struct TArray<struct USoundEffectSubmixPreset*> SubmixEffectChain;  // Offset: 72 Size: 16
	struct USoundfieldEncodingSettingsBase* AmbisonicsPluginSettings;  // Offset: 88 Size: 8
	int32_t EnvelopeFollowerAttackTime;  // Offset: 96 Size: 4
	int32_t EnvelopeFollowerReleaseTime;  // Offset: 100 Size: 4
	enum class EGainParamMode GainMode;  // Offset: 104 Size: 1
	char pad_105[3];  // Offset: 105 Size: 3
	float OutputVolume;  // Offset: 108 Size: 4
	float WetLevel;  // Offset: 112 Size: 4
	float DryLevel;  // Offset: 116 Size: 4
	struct FSoundModulationDestinationSettings OutputVolumeModulation;  // Offset: 120 Size: 16
	struct FSoundModulationDestinationSettings WetLevelModulation;  // Offset: 136 Size: 16
	struct FSoundModulationDestinationSettings DryLevelModulation;  // Offset: 152 Size: 16
	struct FMulticastInlineDelegate OnSubmixRecordedFileDone;  // Offset: 168 Size: 16
	char pad_184[8];  // Offset: 184 Size: 8



 // Functions 
 public:
	void StopSpectralAnalysis(struct UObject* WorldContextObject); // Function Engine.SoundSubmix.StopSpectralAnalysis
	void StopRecordingOutput(struct UObject* WorldContextObject, enum class EAudioRecordingExportType ExportType, struct FString Name, struct FString Path, struct USoundWave* ExistingSoundWaveToOverwrite); // Function Engine.SoundSubmix.StopRecordingOutput
	void StopEnvelopeFollowing(struct UObject* WorldContextObject); // Function Engine.SoundSubmix.StopEnvelopeFollowing
	void StartSpectralAnalysis(struct UObject* WorldContextObject, enum class EFFTSize FFTSize, enum class EFFTPeakInterpolationMethod InterpolationMethod, enum class EFFTWindowType WindowType, float HopSize, enum class EAudioSpectrumType SpectrumType); // Function Engine.SoundSubmix.StartSpectralAnalysis
	void StartRecordingOutput(struct UObject* WorldContextObject, float ExpectedDuration); // Function Engine.SoundSubmix.StartRecordingOutput
	void StartEnvelopeFollowing(struct UObject* WorldContextObject); // Function Engine.SoundSubmix.StartEnvelopeFollowing
	void SetSubmixOutputVolume(struct UObject* WorldContextObject, float InOutputVolume); // Function Engine.SoundSubmix.SetSubmixOutputVolume
	void RemoveSpectralAnalysisDelegate(struct UObject* WorldContextObject, struct FDelegate& OnSubmixSpectralAnalysisBP); // Function Engine.SoundSubmix.RemoveSpectralAnalysisDelegate
	void AddSpectralAnalysisDelegate(struct UObject* WorldContextObject, struct TArray<struct FSoundSubmixSpectralAnalysisBandSettings>& InBandSettings, struct FDelegate& OnSubmixSpectralAnalysisBP, float UpdateRate, float DecibelNoiseFloor, bool bDoNormalize, bool bDoAutoRange, float AutoRangeAttackTime, float AutoRangeReleaseTime); // Function Engine.SoundSubmix.AddSpectralAnalysisDelegate
	void AddEnvelopeFollowerDelegate(struct UObject* WorldContextObject, struct FDelegate& OnSubmixEnvelopeBP); // Function Engine.SoundSubmix.AddEnvelopeFollowerDelegate
}; 
 
 


//Class Engine.MaterialExpressionNoEnvmapOutput Size 88
// Inherited 64 bytes 
class UMaterialExpressionNoEnvmapOutput : public UMaterialExpressionCustomOutput
{

 public: 
	struct FExpressionInput Input;  // Offset: 64 Size: 20
	char pad_84[4];  // Offset: 84 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionMobileShadowMaskOutput Size 88
// Inherited 64 bytes 
class UMaterialExpressionMobileShadowMaskOutput : public UMaterialExpressionCustomOutput
{

 public: 
	struct FExpressionInput Input;  // Offset: 64 Size: 20
	char pad_84[4];  // Offset: 84 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.Texture2DDynamic Size 400
// Inherited 384 bytes 
class UTexture2DDynamic : public UTexture
{

 public: 
	enum class EPixelFormat Format;  // Offset: 384 Size: 1
	char pad_385[15];  // Offset: 385 Size: 15



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionSSRMaxRoughnessOutput Size 88
// Inherited 64 bytes 
class UMaterialExpressionSSRMaxRoughnessOutput : public UMaterialExpressionCustomOutput
{

 public: 
	struct FExpressionInput Input;  // Offset: 64 Size: 20
	char pad_84[4];  // Offset: 84 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionSSRNormalWarpOutput Size 88
// Inherited 64 bytes 
class UMaterialExpressionSSRNormalWarpOutput : public UMaterialExpressionCustomOutput
{

 public: 
	struct FExpressionInput Input;  // Offset: 64 Size: 20
	char pad_84[4];  // Offset: 84 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionSSAOWeightOutput Size 88
// Inherited 64 bytes 
class UMaterialExpressionSSAOWeightOutput : public UMaterialExpressionCustomOutput
{

 public: 
	struct FExpressionInput Input;  // Offset: 64 Size: 20
	char pad_84[4];  // Offset: 84 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.NodeMappingProviderInterface Size 40
// Inherited 40 bytes 
class UNodeMappingProviderInterface : public UInterface
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionCustomSpecularIBLOutput Size 88
// Inherited 64 bytes 
class UMaterialExpressionCustomSpecularIBLOutput : public UMaterialExpressionCustomOutput
{

 public: 
	struct FExpressionInput Input;  // Offset: 64 Size: 20
	char pad_84[4];  // Offset: 84 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionLinearInterpolate Size 136
// Inherited 64 bytes 
class UMaterialExpressionLinearInterpolate : public UMaterialExpression
{

 public: 
	struct FExpressionInput A;  // Offset: 64 Size: 20
	struct FExpressionInput B;  // Offset: 84 Size: 20
	struct FExpressionInput Alpha;  // Offset: 104 Size: 20
	float ConstA;  // Offset: 124 Size: 4
	float ConstB;  // Offset: 128 Size: 4
	float ConstAlpha;  // Offset: 132 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionLogarithm10 Size 88
// Inherited 64 bytes 
class UMaterialExpressionLogarithm10 : public UMaterialExpression
{

 public: 
	struct FExpressionInput X;  // Offset: 64 Size: 20
	char pad_84[4];  // Offset: 84 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionMakeMaterialAttributes Size 624
// Inherited 64 bytes 
class UMaterialExpressionMakeMaterialAttributes : public UMaterialExpression
{

 public: 
	struct FExpressionInput BaseColor;  // Offset: 64 Size: 20
	struct FExpressionInput Metallic;  // Offset: 84 Size: 20
	struct FExpressionInput Specular;  // Offset: 104 Size: 20
	struct FExpressionInput Roughness;  // Offset: 124 Size: 20
	struct FExpressionInput Anisotropy;  // Offset: 144 Size: 20
	struct FExpressionInput EmissiveColor;  // Offset: 164 Size: 20
	struct FExpressionInput Opacity;  // Offset: 184 Size: 20
	struct FExpressionInput OpacityMask;  // Offset: 204 Size: 20
	struct FExpressionInput Normal;  // Offset: 224 Size: 20
	struct FExpressionInput Tangent;  // Offset: 244 Size: 20
	struct FExpressionInput WorldPositionOffset;  // Offset: 264 Size: 20
	struct FExpressionInput WorldDisplacement;  // Offset: 284 Size: 20
	struct FExpressionInput TessellationMultiplier;  // Offset: 304 Size: 20
	struct FExpressionInput SubsurfaceColor;  // Offset: 324 Size: 20
	struct FExpressionInput ClearCoat;  // Offset: 344 Size: 20
	struct FExpressionInput ClearCoatRoughness;  // Offset: 364 Size: 20
	struct FExpressionInput AmbientOcclusion;  // Offset: 384 Size: 20
	struct FExpressionInput Refraction;  // Offset: 404 Size: 20
	struct FExpressionInput CustomizedUVs[8];  // Offset: 424 Size: 160
	struct FExpressionInput PixelDepthOffset;  // Offset: 584 Size: 20
	struct FExpressionInput ShadingModel;  // Offset: 604 Size: 20



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionSign Size 88
// Inherited 64 bytes 
class UMaterialExpressionSign : public UMaterialExpression
{

 public: 
	struct FExpressionInput Input;  // Offset: 64 Size: 20
	char pad_84[4];  // Offset: 84 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionSobol Size 136
// Inherited 64 bytes 
class UMaterialExpressionSobol : public UMaterialExpression
{

 public: 
	struct FExpressionInput Cell;  // Offset: 64 Size: 20
	struct FExpressionInput Index;  // Offset: 84 Size: 20
	struct FExpressionInput Seed;  // Offset: 104 Size: 20
	uint32_t ConstIndex;  // Offset: 124 Size: 4
	struct FVector2D ConstSeed;  // Offset: 128 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionMapARPassthroughCameraUV Size 88
// Inherited 64 bytes 
class UMaterialExpressionMapARPassthroughCameraUV : public UMaterialExpression
{

 public: 
	struct FExpressionInput Coordinates;  // Offset: 64 Size: 20
	char pad_84[4];  // Offset: 84 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionMaterialAttributeLayers Size 232
// Inherited 64 bytes 
class UMaterialExpressionMaterialAttributeLayers : public UMaterialExpression
{

 public: 
	struct FName ParameterName;  // Offset: 64 Size: 8
	struct FGuid ExpressionGUID;  // Offset: 72 Size: 16
	struct FMaterialAttributesInput Input;  // Offset: 88 Size: 24
	struct FMaterialLayersFunctions DefaultLayers;  // Offset: 112 Size: 64
	struct TArray<struct UMaterialExpressionMaterialFunctionCall*> LayerCallers;  // Offset: 176 Size: 16
	int32_t NumActiveLayerCallers;  // Offset: 192 Size: 4
	char pad_196[4];  // Offset: 196 Size: 4
	struct TArray<struct UMaterialExpressionMaterialFunctionCall*> BlendCallers;  // Offset: 200 Size: 16
	int32_t NumActiveBlendCallers;  // Offset: 216 Size: 4
	char pad_220_1 : 7;  // Offset: 220 Size: 1
	bool bIsLayerGraphBuilt : 1;  // Offset: 220 Size: 1
	char pad_221[11];  // Offset: 221 Size: 11



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionMaterialFunctionCall Size 88
// Inherited 64 bytes 
class UMaterialExpressionMaterialFunctionCall : public UMaterialExpression
{

 public: 
	struct UMaterialFunctionInterface* MaterialFunction;  // Offset: 64 Size: 8
	struct FMaterialParameterInfo FunctionParameterInfo;  // Offset: 72 Size: 16



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionMaterialLayerOutput Size 136
// Inherited 136 bytes 
class UMaterialExpressionMaterialLayerOutput : public UMaterialExpressionFunctionOutput
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionStep Size 112
// Inherited 64 bytes 
class UMaterialExpressionStep : public UMaterialExpression
{

 public: 
	struct FExpressionInput Y;  // Offset: 64 Size: 20
	struct FExpressionInput X;  // Offset: 84 Size: 20
	float ConstY;  // Offset: 104 Size: 4
	float ConstX;  // Offset: 108 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionMax Size 112
// Inherited 64 bytes 
class UMaterialExpressionMax : public UMaterialExpression
{

 public: 
	struct FExpressionInput A;  // Offset: 64 Size: 20
	struct FExpressionInput B;  // Offset: 84 Size: 20
	float ConstA;  // Offset: 104 Size: 4
	float ConstB;  // Offset: 108 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionMin Size 112
// Inherited 64 bytes 
class UMaterialExpressionMin : public UMaterialExpression
{

 public: 
	struct FExpressionInput A;  // Offset: 64 Size: 20
	struct FExpressionInput B;  // Offset: 84 Size: 20
	float ConstA;  // Offset: 104 Size: 4
	float ConstB;  // Offset: 108 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionMultiply Size 112
// Inherited 64 bytes 
class UMaterialExpressionMultiply : public UMaterialExpression
{

 public: 
	struct FExpressionInput A;  // Offset: 64 Size: 20
	struct FExpressionInput B;  // Offset: 84 Size: 20
	float ConstA;  // Offset: 104 Size: 4
	float ConstB;  // Offset: 108 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionNamedRerouteUsage Size 88
// Inherited 64 bytes 
class UMaterialExpressionNamedRerouteUsage : public UMaterialExpressionNamedRerouteBase
{

 public: 
	struct UMaterialExpressionNamedRerouteDeclaration* Declaration;  // Offset: 64 Size: 8
	struct FGuid DeclarationGuid;  // Offset: 72 Size: 16



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionNoise Size 144
// Inherited 64 bytes 
class UMaterialExpressionNoise : public UMaterialExpression
{

 public: 
	struct FExpressionInput position;  // Offset: 64 Size: 20
	struct FExpressionInput FilterWidth;  // Offset: 84 Size: 20
	float Scale;  // Offset: 104 Size: 4
	int32_t Quality;  // Offset: 108 Size: 4
	enum class ENoiseFunction NoiseFunction;  // Offset: 112 Size: 1
	char pad_113[3];  // Offset: 113 Size: 3
	char bTurbulence : 1;  // Offset: 116 Size: 1
	char pad_116_1 : 7;  // Offset: 116 Size: 1
	char pad_117[4];  // Offset: 117 Size: 4
	int32_t Levels;  // Offset: 120 Size: 4
	float OutputMin;  // Offset: 124 Size: 4
	float OutputMax;  // Offset: 128 Size: 4
	float LevelScale;  // Offset: 132 Size: 4
	char bTiling : 1;  // Offset: 136 Size: 1
	char pad_136_1 : 7;  // Offset: 136 Size: 1
	char pad_137[4];  // Offset: 137 Size: 4
	uint32_t RepeatSize;  // Offset: 140 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionNormalize Size 88
// Inherited 64 bytes 
class UMaterialExpressionNormalize : public UMaterialExpression
{

 public: 
	struct FExpressionInput VectorInput;  // Offset: 64 Size: 20
	char pad_84[4];  // Offset: 84 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionObjectOrientation Size 64
// Inherited 64 bytes 
class UMaterialExpressionObjectOrientation : public UMaterialExpression
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionObjectPositionWS Size 64
// Inherited 64 bytes 
class UMaterialExpressionObjectPositionWS : public UMaterialExpression
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.VOIPTalker Size 232
// Inherited 176 bytes 
class UVOIPTalker : public UActorComponent
{

 public: 
	struct FVoiceSettings Settings;  // Offset: 176 Size: 24
	char pad_200[32];  // Offset: 200 Size: 32



 // Functions 
 public:
	void RegisterWithPlayerState(struct APlayerState* OwningState); // Function Engine.VOIPTalker.RegisterWithPlayerState
	float GetVoiceLevel(); // Function Engine.VOIPTalker.GetVoiceLevel
	struct UVOIPTalker* CreateTalkerForPlayer(struct APlayerState* OwningState); // Function Engine.VOIPTalker.CreateTalkerForPlayer
	void BPOnTalkingEnd(); // Function Engine.VOIPTalker.BPOnTalkingEnd
	void BPOnTalkingBegin(struct UAudioComponent* AudioComponent); // Function Engine.VOIPTalker.BPOnTalkingBegin
}; 
 
 


//Class Engine.MaterialExpressionObjectRadius Size 64
// Inherited 64 bytes 
class UMaterialExpressionObjectRadius : public UMaterialExpression
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionSceneDepth Size 120
// Inherited 64 bytes 
class UMaterialExpressionSceneDepth : public UMaterialExpression
{

 public: 
	enum class EMaterialSceneAttributeInputMode InputMode;  // Offset: 64 Size: 1
	char pad_65[3];  // Offset: 65 Size: 3
	struct FExpressionInput Input;  // Offset: 68 Size: 20
	struct FExpressionInput Coordinates;  // Offset: 88 Size: 20
	struct FVector2D ConstInput;  // Offset: 108 Size: 8
	char pad_116[4];  // Offset: 116 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionOneMinus Size 88
// Inherited 64 bytes 
class UMaterialExpressionOneMinus : public UMaterialExpression
{

 public: 
	struct FExpressionInput Input;  // Offset: 64 Size: 20
	char pad_84[4];  // Offset: 84 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionParticleColor Size 64
// Inherited 64 bytes 
class UMaterialExpressionParticleColor : public UMaterialExpression
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.SkyAtmosphereComponent Size 736
// Inherited 528 bytes 
class USkyAtmosphereComponent : public USceneComponent
{

 public: 
	enum class ESkyAtmosphereTransformMode TransformMode;  // Offset: 520 Size: 1
	float BottomRadius;  // Offset: 524 Size: 4
	struct FColor GroundAlbedo;  // Offset: 528 Size: 4
	float AtmosphereHeight;  // Offset: 532 Size: 4
	float MultiScatteringFactor;  // Offset: 536 Size: 4
	float TraceSampleCountScale;  // Offset: 540 Size: 4
	float RayleighScatteringScale;  // Offset: 544 Size: 4
	struct FLinearColor RayleighScattering;  // Offset: 548 Size: 16
	float RayleighExponentialDistribution;  // Offset: 564 Size: 4
	float MieScatteringScale;  // Offset: 568 Size: 4
	struct FLinearColor MieScattering;  // Offset: 572 Size: 16
	float MieAbsorptionScale;  // Offset: 588 Size: 4
	struct FLinearColor MieAbsorption;  // Offset: 592 Size: 16
	float MieAnisotropy;  // Offset: 608 Size: 4
	float MieExponentialDistribution;  // Offset: 612 Size: 4
	float OtherAbsorptionScale;  // Offset: 616 Size: 4
	struct FLinearColor OtherAbsorption;  // Offset: 620 Size: 16
	struct FTentDistribution OtherTentDistribution;  // Offset: 636 Size: 12
	struct FLinearColor SkyLuminanceFactor;  // Offset: 648 Size: 16
	float AerialPespectiveViewDistanceScale;  // Offset: 664 Size: 4
	float HeightFogContribution;  // Offset: 668 Size: 4
	float TransmittanceMinLightElevationAngle;  // Offset: 672 Size: 4
	float AerialPerspectiveStartDepth;  // Offset: 676 Size: 4
	char pad_685[31];  // Offset: 685 Size: 31
	struct FGuid bStaticLightingBuiltGUID;  // Offset: 716 Size: 16
	char pad_732[4];  // Offset: 732 Size: 4



 // Functions 
 public:
	void SetSkyLuminanceFactor(struct FLinearColor NewValue); // Function Engine.SkyAtmosphereComponent.SetSkyLuminanceFactor
	void SetRayleighScatteringScale(float NewValue); // Function Engine.SkyAtmosphereComponent.SetRayleighScatteringScale
	void SetRayleighScattering(struct FLinearColor NewValue); // Function Engine.SkyAtmosphereComponent.SetRayleighScattering
	void SetRayleighExponentialDistribution(float NewValue); // Function Engine.SkyAtmosphereComponent.SetRayleighExponentialDistribution
	void SetOtherAbsorptionScale(float NewValue); // Function Engine.SkyAtmosphereComponent.SetOtherAbsorptionScale
	void SetOtherAbsorption(struct FLinearColor NewValue); // Function Engine.SkyAtmosphereComponent.SetOtherAbsorption
	void SetMultiScatteringFactor(float NewValue); // Function Engine.SkyAtmosphereComponent.SetMultiScatteringFactor
	void SetMieScatteringScale(float NewValue); // Function Engine.SkyAtmosphereComponent.SetMieScatteringScale
	void SetMieScattering(struct FLinearColor NewValue); // Function Engine.SkyAtmosphereComponent.SetMieScattering
	void SetMieExponentialDistribution(float NewValue); // Function Engine.SkyAtmosphereComponent.SetMieExponentialDistribution
	void SetMieAnisotropy(float NewValue); // Function Engine.SkyAtmosphereComponent.SetMieAnisotropy
	void SetMieAbsorptionScale(float NewValue); // Function Engine.SkyAtmosphereComponent.SetMieAbsorptionScale
	void SetMieAbsorption(struct FLinearColor NewValue); // Function Engine.SkyAtmosphereComponent.SetMieAbsorption
	void SetHeightFogContribution(float NewValue); // Function Engine.SkyAtmosphereComponent.SetHeightFogContribution
	void SetAtmosphereHeight(float NewValue); // Function Engine.SkyAtmosphereComponent.SetAtmosphereHeight
	void SetAerialPespectiveViewDistanceScale(float NewValue); // Function Engine.SkyAtmosphereComponent.SetAerialPespectiveViewDistanceScale
	void OverrideAtmosphereLightDirection(int32_t AtmosphereLightIndex, struct FVector& LightDirection); // Function Engine.SkyAtmosphereComponent.OverrideAtmosphereLightDirection
	struct FLinearColor GetAtmosphereTransmitanceOnGroundAtPlanetTop(struct UDirectionalLightComponent* DirectionalLight); // Function Engine.SkyAtmosphereComponent.GetAtmosphereTransmitanceOnGroundAtPlanetTop
}; 
 
 


//Class Engine.VisualLoggerAutomationTests Size 40
// Inherited 40 bytes 
class UVisualLoggerAutomationTests : public UObject
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionParticleMacroUV Size 64
// Inherited 64 bytes 
class UMaterialExpressionParticleMacroUV : public UMaterialExpression
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.TireType Size 56
// Inherited 48 bytes 
class UTireType : public UDataAsset
{

 public: 
	float FrictionScale;  // Offset: 48 Size: 4
	char pad_52[4];  // Offset: 52 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionParticleRadius Size 64
// Inherited 64 bytes 
class UMaterialExpressionParticleRadius : public UMaterialExpression
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.ObjectTraceWorldSubsystem Size 56
// Inherited 48 bytes 
class UObjectTraceWorldSubsystem : public UWorldSubsystem
{

 public: 
	char pad_48[8];  // Offset: 48 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionParticleRelativeTime Size 64
// Inherited 64 bytes 
class UMaterialExpressionParticleRelativeTime : public UMaterialExpression
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleRotationRateBase Size 48
// Inherited 48 bytes 
class UParticleModuleRotationRateBase : public UParticleModule
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionParticleSize Size 64
// Inherited 64 bytes 
class UMaterialExpressionParticleSize : public UMaterialExpression
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionParticleSpeed Size 64
// Inherited 64 bytes 
class UMaterialExpressionParticleSpeed : public UMaterialExpression
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionParticleSubUV Size 104
// Inherited 96 bytes 
class UMaterialExpressionParticleSubUV : public UMaterialExpressionTextureSample
{

 public: 
	char bBlend : 1;  // Offset: 96 Size: 1
	char pad_96_1 : 7;  // Offset: 96 Size: 1
	char pad_97[8];  // Offset: 97 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.SoundNodeDoppler Size 88
// Inherited 72 bytes 
class USoundNodeDoppler : public USoundNode
{

 public: 
	float DopplerIntensity;  // Offset: 72 Size: 4
	char pad_76_1 : 7;  // Offset: 76 Size: 1
	bool bUseSmoothing : 1;  // Offset: 76 Size: 1
	char pad_77[3];  // Offset: 77 Size: 3
	float SmoothingInterpSpeed;  // Offset: 80 Size: 4
	char pad_84[4];  // Offset: 84 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionParticleSubUVProperties Size 64
// Inherited 64 bytes 
class UMaterialExpressionParticleSubUVProperties : public UMaterialExpression
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionPerInstanceCustomData Size 96
// Inherited 64 bytes 
class UMaterialExpressionPerInstanceCustomData : public UMaterialExpression
{

 public: 
	struct FExpressionInput DefaultValue;  // Offset: 64 Size: 20
	float ConstDefaultValue;  // Offset: 84 Size: 4
	uint32_t DataIndex;  // Offset: 88 Size: 4
	char pad_92[4];  // Offset: 92 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionPerInstanceFadeAmount Size 64
// Inherited 64 bytes 
class UMaterialExpressionPerInstanceFadeAmount : public UMaterialExpression
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionSamplePhysicsVectorField Size 88
// Inherited 64 bytes 
class UMaterialExpressionSamplePhysicsVectorField : public UMaterialExpression
{

 public: 
	struct FExpressionInput WorldPosition;  // Offset: 64 Size: 20
	enum class EFieldVectorType FieldTarget;  // Offset: 84 Size: 1
	char pad_85[3];  // Offset: 85 Size: 3



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleLocation_Seeded Size 160
// Inherited 128 bytes 
class UParticleModuleLocation_Seeded : public UParticleModuleLocation
{

 public: 
	struct FParticleRandomSeedInfo RandomSeedInfo;  // Offset: 128 Size: 32



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionPower Size 112
// Inherited 64 bytes 
class UMaterialExpressionPower : public UMaterialExpression
{

 public: 
	struct FExpressionInput Base;  // Offset: 64 Size: 20
	struct FExpressionInput Exponent;  // Offset: 84 Size: 20
	float ConstExponent;  // Offset: 104 Size: 4
	char pad_108[4];  // Offset: 108 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionPreSkinnedLocalBounds Size 64
// Inherited 64 bytes 
class UMaterialExpressionPreSkinnedLocalBounds : public UMaterialExpression
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionPreSkinnedNormal Size 64
// Inherited 64 bytes 
class UMaterialExpressionPreSkinnedNormal : public UMaterialExpression
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionPreviousFrameSwitch Size 104
// Inherited 64 bytes 
class UMaterialExpressionPreviousFrameSwitch : public UMaterialExpression
{

 public: 
	struct FExpressionInput CurrentFrame;  // Offset: 64 Size: 20
	struct FExpressionInput PreviousFrame;  // Offset: 84 Size: 20



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionReflectionVectorWS Size 88
// Inherited 64 bytes 
class UMaterialExpressionReflectionVectorWS : public UMaterialExpression
{

 public: 
	struct FExpressionInput CustomWorldNormal;  // Offset: 64 Size: 20
	char bNormalizeCustomWorldNormal : 1;  // Offset: 84 Size: 1
	char pad_84_1 : 7;  // Offset: 84 Size: 1
	char pad_85[4];  // Offset: 85 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleMeshRotation Size 128
// Inherited 48 bytes 
class UParticleModuleMeshRotation : public UParticleModuleRotationBase
{

 public: 
	struct FRawDistributionVector StartRotation;  // Offset: 48 Size: 72
	char bInheritParent : 1;  // Offset: 120 Size: 1
	char pad_120_1 : 7;  // Offset: 120 Size: 1
	char pad_121[8];  // Offset: 121 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionReroute Size 88
// Inherited 64 bytes 
class UMaterialExpressionReroute : public UMaterialExpressionRerouteBase
{

 public: 
	struct FExpressionInput Input;  // Offset: 64 Size: 20
	char pad_84[4];  // Offset: 84 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionRotateAboutAxis Size 152
// Inherited 64 bytes 
class UMaterialExpressionRotateAboutAxis : public UMaterialExpression
{

 public: 
	struct FExpressionInput NormalizedRotationAxis;  // Offset: 64 Size: 20
	struct FExpressionInput RotationAngle;  // Offset: 84 Size: 20
	struct FExpressionInput PivotPoint;  // Offset: 104 Size: 20
	struct FExpressionInput position;  // Offset: 124 Size: 20
	float Period;  // Offset: 144 Size: 4
	char pad_148[4];  // Offset: 148 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionShaderStageSwitch Size 104
// Inherited 64 bytes 
class UMaterialExpressionShaderStageSwitch : public UMaterialExpression
{

 public: 
	struct FExpressionInput PixelShader;  // Offset: 64 Size: 20
	struct FExpressionInput VertexShader;  // Offset: 84 Size: 20



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionRuntimeVirtualTextureSampleParameter Size 176
// Inherited 144 bytes 
class UMaterialExpressionRuntimeVirtualTextureSampleParameter : public UMaterialExpressionRuntimeVirtualTextureSample
{

 public: 
	struct FName ParameterName;  // Offset: 144 Size: 8
	struct FGuid ExpressionGUID;  // Offset: 152 Size: 16
	struct FName Group;  // Offset: 168 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionSamplePhysicsScalarField Size 88
// Inherited 64 bytes 
class UMaterialExpressionSamplePhysicsScalarField : public UMaterialExpression
{

 public: 
	struct FExpressionInput WorldPosition;  // Offset: 64 Size: 20
	enum class EFieldScalarType FieldTarget;  // Offset: 84 Size: 1
	char pad_85[3];  // Offset: 85 Size: 3



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionSamplePhysicsIntegerField Size 88
// Inherited 64 bytes 
class UMaterialExpressionSamplePhysicsIntegerField : public UMaterialExpression
{

 public: 
	struct FExpressionInput WorldPosition;  // Offset: 64 Size: 20
	enum class EFieldIntegerType FieldTarget;  // Offset: 84 Size: 1
	char pad_85[3];  // Offset: 85 Size: 3



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionSceneColor Size 120
// Inherited 64 bytes 
class UMaterialExpressionSceneColor : public UMaterialExpression
{

 public: 
	enum class EMaterialSceneAttributeInputMode InputMode;  // Offset: 64 Size: 1
	char pad_65[3];  // Offset: 65 Size: 3
	struct FExpressionInput Input;  // Offset: 68 Size: 20
	struct FExpressionInput OffsetFraction;  // Offset: 88 Size: 20
	struct FVector2D ConstInput;  // Offset: 108 Size: 8
	char pad_116[4];  // Offset: 116 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.ReplicationDriver Size 40
// Inherited 40 bytes 
class UReplicationDriver : public UObject
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionSceneTexelSize Size 64
// Inherited 64 bytes 
class UMaterialExpressionSceneTexelSize : public UMaterialExpression
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionFakeSceneTexture Size 88
// Inherited 64 bytes 
class UMaterialExpressionFakeSceneTexture : public UMaterialExpression
{

 public: 
	struct FExpressionInput Coordinates;  // Offset: 64 Size: 20
	enum class ESceneTextureId SceneTextureId;  // Offset: 84 Size: 1
	char pad_85_1 : 7;  // Offset: 85 Size: 1
	bool bFiltered : 1;  // Offset: 85 Size: 1
	char pad_86[2];  // Offset: 86 Size: 2



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionSkyAtmosphereLightIlluminance Size 88
// Inherited 64 bytes 
class UMaterialExpressionSkyAtmosphereLightIlluminance : public UMaterialExpression
{

 public: 
	int32_t LightIndex;  // Offset: 64 Size: 4
	struct FExpressionInput WorldPosition;  // Offset: 68 Size: 20



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionSetMaterialAttributes Size 96
// Inherited 64 bytes 
class UMaterialExpressionSetMaterialAttributes : public UMaterialExpression
{

 public: 
	struct TArray<struct FExpressionInput> Inputs;  // Offset: 64 Size: 16
	struct TArray<struct FGuid> AttributeSetTypes;  // Offset: 80 Size: 16



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionSine Size 88
// Inherited 64 bytes 
class UMaterialExpressionSine : public UMaterialExpression
{

 public: 
	struct FExpressionInput Input;  // Offset: 64 Size: 20
	float Period;  // Offset: 84 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionSingleLayerWaterMaterialOutput Size 144
// Inherited 64 bytes 
class UMaterialExpressionSingleLayerWaterMaterialOutput : public UMaterialExpressionCustomOutput
{

 public: 
	struct FExpressionInput ScatteringCoefficients;  // Offset: 64 Size: 20
	struct FExpressionInput AbsorptionCoefficients;  // Offset: 84 Size: 20
	struct FExpressionInput PhaseG;  // Offset: 104 Size: 20
	struct FExpressionInput ColorScaleBehindWater;  // Offset: 124 Size: 20



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionSkyAtmosphereLightDiskLuminance Size 72
// Inherited 64 bytes 
class UMaterialExpressionSkyAtmosphereLightDiskLuminance : public UMaterialExpression
{

 public: 
	int32_t LightIndex;  // Offset: 64 Size: 4
	char pad_68[4];  // Offset: 68 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionSkyAtmosphereAerialPerspective Size 88
// Inherited 64 bytes 
class UMaterialExpressionSkyAtmosphereAerialPerspective : public UMaterialExpression
{

 public: 
	struct FExpressionInput WorldPosition;  // Offset: 64 Size: 20
	char pad_84[4];  // Offset: 84 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionSkyAtmosphereDistantLightScatteredLuminance Size 64
// Inherited 64 bytes 
class UMaterialExpressionSkyAtmosphereDistantLightScatteredLuminance : public UMaterialExpression
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.SpringArmComponent Size 656
// Inherited 528 bytes 
class USpringArmComponent : public USceneComponent
{

 public: 
	float TargetArmLength;  // Offset: 520 Size: 4
	struct FVector SocketOffset;  // Offset: 524 Size: 12
	struct FVector TargetOffset;  // Offset: 536 Size: 12
	float ProbeSize;  // Offset: 548 Size: 4
	enum class ECollisionChannel ProbeChannel;  // Offset: 552 Size: 1
	char bDoCollisionTest : 1;  // Offset: 556 Size: 1
	char bUsePawnControlRotation : 1;  // Offset: 556 Size: 1
	char bInheritPitch : 1;  // Offset: 556 Size: 1
	char bInheritYaw : 1;  // Offset: 556 Size: 1
	char bInheritRoll : 1;  // Offset: 556 Size: 1
	char bEnableCameraLag : 1;  // Offset: 556 Size: 1
	char bEnableCameraRotationLag : 1;  // Offset: 556 Size: 1
	char bUseCameraLagSubstepping : 1;  // Offset: 556 Size: 1
	char bDrawDebugLagMarkers : 1;  // Offset: 557 Size: 1
	float CameraLagSpeed;  // Offset: 560 Size: 4
	float CameraRotationLagSpeed;  // Offset: 564 Size: 4
	float CameraLagMaxTimeStep;  // Offset: 568 Size: 4
	float CameraLagMaxDistance;  // Offset: 572 Size: 4
	char pad_578_1 : 7;  // Offset: 578 Size: 1
	char pad_579[78];  // Offset: 579 Size: 78



 // Functions 
 public:
	bool IsCollisionFixApplied(); // Function Engine.SpringArmComponent.IsCollisionFixApplied
	struct FVector GetUnfixedCameraPosition(); // Function Engine.SpringArmComponent.GetUnfixedCameraPosition
	struct FRotator GetTargetRotation(); // Function Engine.SpringArmComponent.GetTargetRotation
}; 
 
 


//Class Engine.MaterialExpressionSmoothStep Size 136
// Inherited 64 bytes 
class UMaterialExpressionSmoothStep : public UMaterialExpression
{

 public: 
	struct FExpressionInput Min;  // Offset: 64 Size: 20
	struct FExpressionInput Max;  // Offset: 84 Size: 20
	struct FExpressionInput Value;  // Offset: 104 Size: 20
	float ConstMin;  // Offset: 124 Size: 4
	float ConstMax;  // Offset: 128 Size: 4
	float ConstValue;  // Offset: 132 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionSpeedTree Size 160
// Inherited 64 bytes 
class UMaterialExpressionSpeedTree : public UMaterialExpression
{

 public: 
	struct FExpressionInput GeometryInput;  // Offset: 64 Size: 20
	struct FExpressionInput WindInput;  // Offset: 84 Size: 20
	struct FExpressionInput LODInput;  // Offset: 104 Size: 20
	struct FExpressionInput ExtraBendWS;  // Offset: 124 Size: 20
	enum class ESpeedTreeGeometryType GeometryType;  // Offset: 144 Size: 1
	enum class ESpeedTreeWindType WindType;  // Offset: 145 Size: 1
	enum class ESpeedTreeLODType LODType;  // Offset: 146 Size: 1
	char pad_147[1];  // Offset: 147 Size: 1
	float BillboardThreshold;  // Offset: 148 Size: 4
	char pad_152_1 : 7;  // Offset: 152 Size: 1
	bool bAccurateWindVelocities : 1;  // Offset: 152 Size: 1
	char pad_153[7];  // Offset: 153 Size: 7



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionSphereMask Size 152
// Inherited 64 bytes 
class UMaterialExpressionSphereMask : public UMaterialExpression
{

 public: 
	struct FExpressionInput A;  // Offset: 64 Size: 20
	struct FExpressionInput B;  // Offset: 84 Size: 20
	struct FExpressionInput Radius;  // Offset: 104 Size: 20
	struct FExpressionInput Hardness;  // Offset: 124 Size: 20
	float AttenuationRadius;  // Offset: 144 Size: 4
	float HardnessPercent;  // Offset: 148 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionSphericalParticleOpacity Size 88
// Inherited 64 bytes 
class UMaterialExpressionSphericalParticleOpacity : public UMaterialExpression
{

 public: 
	struct FExpressionInput Density;  // Offset: 64 Size: 20
	float ConstantDensity;  // Offset: 84 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.NodeMappingContainer Size 360
// Inherited 40 bytes 
class UNodeMappingContainer : public UObject
{

 public: 
	struct TMap<struct FName, struct FNodeItem> SourceItems;  // Offset: 40 Size: 80
	struct TMap<struct FName, struct FNodeItem> TargetItems;  // Offset: 120 Size: 80
	struct TMap<struct FName, struct FName> SourceToTarget;  // Offset: 200 Size: 80
	struct TSoftObjectPtr<UObject> SourceAsset;  // Offset: 280 Size: 40
	struct TSoftObjectPtr<UObject> TargetAsset;  // Offset: 320 Size: 40



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionSquareRoot Size 88
// Inherited 64 bytes 
class UMaterialExpressionSquareRoot : public UMaterialExpression
{

 public: 
	struct FExpressionInput Input;  // Offset: 64 Size: 20
	char pad_84[4];  // Offset: 84 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionStaticBool Size 72
// Inherited 64 bytes 
class UMaterialExpressionStaticBool : public UMaterialExpression
{

 public: 
	char Value : 1;  // Offset: 64 Size: 1
	char pad_64_1 : 7;  // Offset: 64 Size: 1
	char pad_65[8];  // Offset: 65 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionStaticComponentMaskParameter Size 96
// Inherited 88 bytes 
class UMaterialExpressionStaticComponentMaskParameter : public UMaterialExpressionParameter
{

 public: 
	char DefaultR : 1;  // Offset: 88 Size: 1
	char DefaultG : 1;  // Offset: 88 Size: 1
	char DefaultB : 1;  // Offset: 88 Size: 1
	char DefaultA : 1;  // Offset: 88 Size: 1
	char pad_88_1 : 4;  // Offset: 88 Size: 1
	char pad_89[8];  // Offset: 89 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionStaticSwitch Size 128
// Inherited 64 bytes 
class UMaterialExpressionStaticSwitch : public UMaterialExpression
{

 public: 
	char DefaultValue : 1;  // Offset: 64 Size: 1
	char pad_64_1 : 7;  // Offset: 64 Size: 1
	char pad_65[4];  // Offset: 65 Size: 4
	struct FExpressionInput A;  // Offset: 68 Size: 20
	struct FExpressionInput B;  // Offset: 88 Size: 20
	struct FExpressionInput Value;  // Offset: 108 Size: 20



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionStaticSwitchParameter Size 96
// Inherited 96 bytes 
class UMaterialExpressionStaticSwitchParameter : public UMaterialExpressionStaticBoolParameter
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionSubtract Size 112
// Inherited 64 bytes 
class UMaterialExpressionSubtract : public UMaterialExpression
{

 public: 
	struct FExpressionInput A;  // Offset: 64 Size: 20
	struct FExpressionInput B;  // Offset: 84 Size: 20
	float ConstA;  // Offset: 104 Size: 4
	float ConstB;  // Offset: 108 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionTangent Size 88
// Inherited 64 bytes 
class UMaterialExpressionTangent : public UMaterialExpression
{

 public: 
	struct FExpressionInput Input;  // Offset: 64 Size: 20
	float Period;  // Offset: 84 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionTemporalSobol Size 120
// Inherited 64 bytes 
class UMaterialExpressionTemporalSobol : public UMaterialExpression
{

 public: 
	struct FExpressionInput Index;  // Offset: 64 Size: 20
	struct FExpressionInput Seed;  // Offset: 84 Size: 20
	uint32_t ConstIndex;  // Offset: 104 Size: 4
	struct FVector2D ConstSeed;  // Offset: 108 Size: 8
	char pad_116[4];  // Offset: 116 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionTextureCoordinate Size 80
// Inherited 64 bytes 
class UMaterialExpressionTextureCoordinate : public UMaterialExpression
{

 public: 
	int32_t CoordinateIndex;  // Offset: 64 Size: 4
	float UTiling;  // Offset: 68 Size: 4
	float VTiling;  // Offset: 72 Size: 4
	char UnMirrorU : 1;  // Offset: 76 Size: 1
	char UnMirrorV : 1;  // Offset: 76 Size: 1
	char pad_76_1 : 6;  // Offset: 76 Size: 1
	char pad_77[4];  // Offset: 77 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleOrbitBase Size 56
// Inherited 48 bytes 
class UParticleModuleOrbitBase : public UParticleModule
{

 public: 
	char bUseEmitterTime : 1;  // Offset: 48 Size: 1
	char pad_48_1 : 7;  // Offset: 48 Size: 1
	char pad_49[8];  // Offset: 49 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionTextureObject Size 72
// Inherited 72 bytes 
class UMaterialExpressionTextureObject : public UMaterialExpressionTextureBase
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionTextureProperty Size 88
// Inherited 64 bytes 
class UMaterialExpressionTextureProperty : public UMaterialExpression
{

 public: 
	struct FExpressionInput TextureObject;  // Offset: 64 Size: 20
	enum class EMaterialExposedTextureProperty Property;  // Offset: 84 Size: 1
	char pad_85[3];  // Offset: 85 Size: 3



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleCameraBase Size 48
// Inherited 48 bytes 
class UParticleModuleCameraBase : public UParticleModule
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionTextureSampleParameterCube Size 128
// Inherited 128 bytes 
class UMaterialExpressionTextureSampleParameterCube : public UMaterialExpressionTextureSampleParameter
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.SoundNodeQualityLevel Size 80
// Inherited 72 bytes 
class USoundNodeQualityLevel : public USoundNode
{

 public: 
	int32_t CookedQualityLevelIndex;  // Offset: 72 Size: 4
	char pad_76[4];  // Offset: 76 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleMeshMaterial Size 64
// Inherited 48 bytes 
class UParticleModuleMeshMaterial : public UParticleModuleMaterialBase
{

 public: 
	struct TArray<struct UMaterialInterface*> MeshMaterials;  // Offset: 48 Size: 16



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionTextureSampleParameterVolume Size 128
// Inherited 128 bytes 
class UMaterialExpressionTextureSampleParameterVolume : public UMaterialExpressionTextureSampleParameter
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionThinTranslucentMaterialOutput Size 88
// Inherited 64 bytes 
class UMaterialExpressionThinTranslucentMaterialOutput : public UMaterialExpressionCustomOutput
{

 public: 
	struct FExpressionInput TransmittanceColor;  // Offset: 64 Size: 20
	char pad_84[4];  // Offset: 84 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionTime Size 96
// Inherited 64 bytes 
class UMaterialExpressionTime : public UMaterialExpression
{

 public: 
	char bIgnorePause : 1;  // Offset: 64 Size: 1
	char bOverride_Period : 1;  // Offset: 64 Size: 1
	char pad_64_1 : 6;  // Offset: 64 Size: 1
	char pad_65[4];  // Offset: 65 Size: 4
	float Period;  // Offset: 68 Size: 4
	struct FExpressionInput PeriodInput;  // Offset: 72 Size: 20
	char pad_92[4];  // Offset: 92 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionTransform Size 88
// Inherited 64 bytes 
class UMaterialExpressionTransform : public UMaterialExpression
{

 public: 
	struct FExpressionInput Input;  // Offset: 64 Size: 20
	enum class EMaterialVectorCoordTransformSource TransformSourceType;  // Offset: 84 Size: 1
	enum class EMaterialVectorCoordTransform TransformType;  // Offset: 85 Size: 1
	char pad_86[2];  // Offset: 86 Size: 2



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionTruncate Size 88
// Inherited 64 bytes 
class UMaterialExpressionTruncate : public UMaterialExpression
{

 public: 
	struct FExpressionInput Input;  // Offset: 64 Size: 20
	char pad_84[4];  // Offset: 84 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionVectorNoise Size 104
// Inherited 64 bytes 
class UMaterialExpressionVectorNoise : public UMaterialExpression
{

 public: 
	struct FExpressionInput position;  // Offset: 64 Size: 20
	enum class EVectorNoiseFunction NoiseFunction;  // Offset: 84 Size: 1
	char pad_85[3];  // Offset: 85 Size: 3
	int32_t Quality;  // Offset: 88 Size: 4
	char bTiling : 1;  // Offset: 92 Size: 1
	char pad_92_1 : 7;  // Offset: 92 Size: 1
	char pad_93[4];  // Offset: 93 Size: 4
	uint32_t TileSize;  // Offset: 96 Size: 4
	char pad_100[4];  // Offset: 100 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.RadialForceActor Size 552
// Inherited 544 bytes 
class ARadialForceActor : public ARigidBodyBase
{

 public: 
	struct URadialForceComponent* ForceComponent;  // Offset: 544 Size: 8



 // Functions 
 public:
	void ToggleForce(); // Function Engine.RadialForceActor.ToggleForce
	void FireImpulse(); // Function Engine.RadialForceActor.FireImpulse
	void EnableForce(); // Function Engine.RadialForceActor.EnableForce
	void DisableForce(); // Function Engine.RadialForceActor.DisableForce
}; 
 
 


//Class Engine.PhysicsFieldComponent Size 640
// Inherited 528 bytes 
class UPhysicsFieldComponent : public USceneComponent
{

 public: 
	char pad_528[112];  // Offset: 528 Size: 112



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionVertexColor Size 64
// Inherited 64 bytes 
class UMaterialExpressionVertexColor : public UMaterialExpression
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.TextureRenderTarget2DArray Size 416
// Inherited 384 bytes 
class UTextureRenderTarget2DArray : public UTextureRenderTarget
{

 public: 
	int32_t SizeX;  // Offset: 384 Size: 4
	int32_t SizeY;  // Offset: 388 Size: 4
	int32_t Slices;  // Offset: 392 Size: 4
	struct FLinearColor ClearColor;  // Offset: 396 Size: 16
	enum class EPixelFormat OverrideFormat;  // Offset: 412 Size: 1
	char bHDR : 1;  // Offset: 413 Size: 1
	char bForceLinearGamma : 1;  // Offset: 413 Size: 1
	char pad_413_1 : 6;  // Offset: 413 Size: 1
	char pad_414[3];  // Offset: 414 Size: 3



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionVertexTangentWS Size 64
// Inherited 64 bytes 
class UMaterialExpressionVertexTangentWS : public UMaterialExpression
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionViewSize Size 64
// Inherited 64 bytes 
class UMaterialExpressionViewSize : public UMaterialExpression
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.SoundCue Size 1352
// Inherited 368 bytes 
class USoundCue : public USoundBase
{

 public: 
	char bPrimeOnLoad : 1;  // Offset: 368 Size: 1
	char pad_368_1 : 7;  // Offset: 368 Size: 1
	char pad_369[8];  // Offset: 369 Size: 8
	struct USoundNode* FirstNode;  // Offset: 376 Size: 8
	float VolumeMultiplier;  // Offset: 384 Size: 4
	float PitchMultiplier;  // Offset: 388 Size: 4
	struct FSoundAttenuationSettings AttenuationOverrides;  // Offset: 392 Size: 928
	float SubtitlePriority;  // Offset: 1320 Size: 4
	char pad_1324[4];  // Offset: 1324 Size: 4
	char bOverrideAttenuation : 1;  // Offset: 1328 Size: 1
	char bExcludeFromRandomNodeBranchCulling : 1;  // Offset: 1328 Size: 1
	char pad_1328_1 : 6;  // Offset: 1328 Size: 1
	char pad_1329[4];  // Offset: 1329 Size: 4
	int32_t CookedQualityIndex;  // Offset: 1332 Size: 4
	char bHasPlayWhenSilent : 1;  // Offset: 1336 Size: 1
	char pad_1336_1 : 7;  // Offset: 1336 Size: 1
	char pad_1337[16];  // Offset: 1337 Size: 16



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionVirtualTextureFeatureSwitch Size 104
// Inherited 64 bytes 
class UMaterialExpressionVirtualTextureFeatureSwitch : public UMaterialExpression
{

 public: 
	struct FExpressionInput No;  // Offset: 64 Size: 20
	struct FExpressionInput Yes;  // Offset: 84 Size: 20



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialExpressionVolumetricAdvancedMaterialOutput Size 240
// Inherited 64 bytes 
class UMaterialExpressionVolumetricAdvancedMaterialOutput : public UMaterialExpressionCustomOutput
{

 public: 
	struct FExpressionInput PhaseG;  // Offset: 64 Size: 20
	struct FExpressionInput PhaseG2;  // Offset: 84 Size: 20
	struct FExpressionInput PhaseBlend;  // Offset: 104 Size: 20
	struct FExpressionInput MultiScatteringContribution;  // Offset: 124 Size: 20
	struct FExpressionInput MultiScatteringOcclusion;  // Offset: 144 Size: 20
	struct FExpressionInput MultiScatteringEccentricity;  // Offset: 164 Size: 20
	struct FExpressionInput ConservativeDensity;  // Offset: 184 Size: 20
	float ConstPhaseG;  // Offset: 204 Size: 4
	float ConstPhaseG2;  // Offset: 208 Size: 4
	float ConstPhaseBlend;  // Offset: 212 Size: 4
	char pad_216_1 : 7;  // Offset: 216 Size: 1
	bool PerSamplePhaseEvaluation : 1;  // Offset: 216 Size: 1
	char pad_217[3];  // Offset: 217 Size: 3
	uint32_t MultiScatteringApproximationOctaveCount;  // Offset: 220 Size: 4
	float ConstMultiScatteringContribution;  // Offset: 224 Size: 4
	float ConstMultiScatteringOcclusion;  // Offset: 228 Size: 4
	float ConstMultiScatteringEccentricity;  // Offset: 232 Size: 4
	char pad_236_1 : 7;  // Offset: 236 Size: 1
	bool bGroundContribution : 1;  // Offset: 236 Size: 1
	char pad_237_1 : 7;  // Offset: 237 Size: 1
	bool bGrayScaleMaterial : 1;  // Offset: 237 Size: 1
	char pad_238_1 : 7;  // Offset: 238 Size: 1
	bool bRayMarchVolumeShadow : 1;  // Offset: 238 Size: 1
	char pad_239[1];  // Offset: 239 Size: 1



 // Functions 
 public:
}; 
 
 


//Class Engine.MeshSimplificationSettings Size 64
// Inherited 56 bytes 
class UMeshSimplificationSettings : public UDeveloperSettings
{

 public: 
	struct FName MeshReductionModuleName;  // Offset: 56 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialFunctionInstance Size 192
// Inherited 64 bytes 
class UMaterialFunctionInstance : public UMaterialFunctionInterface
{

 public: 
	struct UMaterialFunctionInterface* Parent;  // Offset: 64 Size: 8
	struct UMaterialFunctionInterface* Base;  // Offset: 72 Size: 8
	struct TArray<struct FScalarParameterValue> ScalarParameterValues;  // Offset: 80 Size: 16
	struct TArray<struct FVectorParameterValue> VectorParameterValues;  // Offset: 96 Size: 16
	struct TArray<struct FTextureParameterValue> TextureParameterValues;  // Offset: 112 Size: 16
	struct TArray<struct FFontParameterValue> FontParameterValues;  // Offset: 128 Size: 16
	struct TArray<struct FStaticSwitchParameter> StaticSwitchParameterValues;  // Offset: 144 Size: 16
	struct TArray<struct FStaticComponentMaskParameter> StaticComponentMaskParameterValues;  // Offset: 160 Size: 16
	struct TArray<struct FRuntimeVirtualTextureParameterValue> RuntimeVirtualTextureParameterValues;  // Offset: 176 Size: 16



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialFunctionMaterialLayerInstance Size 192
// Inherited 192 bytes 
class UMaterialFunctionMaterialLayerInstance : public UMaterialFunctionInstance
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialFunctionMaterialLayerBlendInstance Size 192
// Inherited 192 bytes 
class UMaterialFunctionMaterialLayerBlendInstance : public UMaterialFunctionInstance
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialInstanceDynamic Size 888
// Inherited 808 bytes 
class UMaterialInstanceDynamic : public UMaterialInstance
{

 public: 
	char pad_808[80];  // Offset: 808 Size: 80



 // Functions 
 public:
	void SetVectorParameterValueByInfo(struct FMaterialParameterInfo& ParameterInfo, struct FLinearColor Value); // Function Engine.MaterialInstanceDynamic.SetVectorParameterValueByInfo
	void SetVectorParameterValue(struct FName ParameterName, struct FLinearColor Value); // Function Engine.MaterialInstanceDynamic.SetVectorParameterValue
	void SetTextureParameterValueByInfo(struct FMaterialParameterInfo& ParameterInfo, struct UTexture* Value); // Function Engine.MaterialInstanceDynamic.SetTextureParameterValueByInfo
	void SetTextureParameterValue(struct FName ParameterName, struct UTexture* Value); // Function Engine.MaterialInstanceDynamic.SetTextureParameterValue
	void SetScalarParameterValueByInfo(struct FMaterialParameterInfo& ParameterInfo, float Value); // Function Engine.MaterialInstanceDynamic.SetScalarParameterValueByInfo
	void SetScalarParameterValue(struct FName ParameterName, float Value); // Function Engine.MaterialInstanceDynamic.SetScalarParameterValue
	void K2_InterpolateMaterialInstanceParams(struct UMaterialInstance* SourceA, struct UMaterialInstance* SourceB, float Alpha); // Function Engine.MaterialInstanceDynamic.K2_InterpolateMaterialInstanceParams
	struct FLinearColor K2_GetVectorParameterValueByInfo(struct FMaterialParameterInfo& ParameterInfo); // Function Engine.MaterialInstanceDynamic.K2_GetVectorParameterValueByInfo
	struct FLinearColor K2_GetVectorParameterValue(struct FName ParameterName); // Function Engine.MaterialInstanceDynamic.K2_GetVectorParameterValue
	struct UTexture* K2_GetTextureParameterValueByInfo(struct FMaterialParameterInfo& ParameterInfo); // Function Engine.MaterialInstanceDynamic.K2_GetTextureParameterValueByInfo
	struct UTexture* K2_GetTextureParameterValue(struct FName ParameterName); // Function Engine.MaterialInstanceDynamic.K2_GetTextureParameterValue
	float K2_GetScalarParameterValueByInfo(struct FMaterialParameterInfo& ParameterInfo); // Function Engine.MaterialInstanceDynamic.K2_GetScalarParameterValueByInfo
	float K2_GetScalarParameterValue(struct FName ParameterName); // Function Engine.MaterialInstanceDynamic.K2_GetScalarParameterValue
	void K2_CopyMaterialInstanceParameters(struct UMaterialInterface* Source, bool bQuickParametersOnly); // Function Engine.MaterialInstanceDynamic.K2_CopyMaterialInstanceParameters
	void CopyParameterOverrides(struct UMaterialInstance* MaterialInstance); // Function Engine.MaterialInstanceDynamic.CopyParameterOverrides
	void CopyInterpParameters(struct UMaterialInstance* Source); // Function Engine.MaterialInstanceDynamic.CopyInterpParameters
}; 
 
 


//Class Engine.MaterialInstanceActor Size 560
// Inherited 544 bytes 
class AMaterialInstanceActor : public AActor
{

 public: 
	struct TArray<struct AActor*> TargetActors;  // Offset: 544 Size: 16



 // Functions 
 public:
}; 
 
 


//Class Engine.MaterialParameterCollectionInstance Size 288
// Inherited 40 bytes 
class UMaterialParameterCollectionInstance : public UObject
{

 public: 
	char pad_40[8];  // Offset: 40 Size: 8
	struct UMaterialParameterCollection* Collection;  // Offset: 48 Size: 8
	char pad_56[232];  // Offset: 56 Size: 232



 // Functions 
 public:
}; 
 
 


//Class Engine.MatineeActor Size 712
// Inherited 544 bytes 
class AMatineeActor : public AActor
{

 public: 
	struct UInterpData* MatineeData;  // Offset: 544 Size: 8
	struct FName MatineeControllerName;  // Offset: 552 Size: 8
	float PlayRate;  // Offset: 560 Size: 4
	char bPlayOnLevelLoad : 1;  // Offset: 564 Size: 1
	char bForceStartPos : 1;  // Offset: 564 Size: 1
	char pad_564_1 : 6;  // Offset: 564 Size: 1
	char pad_565[4];  // Offset: 565 Size: 4
	float ForceStartPosition;  // Offset: 568 Size: 4
	char bLooping : 1;  // Offset: 572 Size: 1
	char bRewindOnPlay : 1;  // Offset: 572 Size: 1
	char bNoResetOnRewind : 1;  // Offset: 572 Size: 1
	char bRewindIfAlreadyPlaying : 1;  // Offset: 572 Size: 1
	char bDisableRadioFilter : 1;  // Offset: 572 Size: 1
	char bClientSideOnly : 1;  // Offset: 572 Size: 1
	char bSkipUpdateIfNotVisible : 1;  // Offset: 572 Size: 1
	char bIsSkippable : 1;  // Offset: 572 Size: 1
	char pad_573[3];  // Offset: 573 Size: 3
	int32_t PreferredSplitScreenNum;  // Offset: 576 Size: 4
	char bDisableMovementInput : 1;  // Offset: 580 Size: 1
	char bDisableLookAtInput : 1;  // Offset: 580 Size: 1
	char bHidePlayer : 1;  // Offset: 580 Size: 1
	char bHideHud : 1;  // Offset: 580 Size: 1
	char pad_580_1 : 4;  // Offset: 580 Size: 1
	char pad_581[4];  // Offset: 581 Size: 4
	struct TArray<struct FInterpGroupActorInfo> GroupActorInfos;  // Offset: 584 Size: 16
	char bShouldShowGore : 1;  // Offset: 600 Size: 1
	char pad_600_1 : 7;  // Offset: 600 Size: 1
	char pad_601[8];  // Offset: 601 Size: 8
	struct TArray<struct UInterpGroupInst*> GroupInst;  // Offset: 608 Size: 16
	struct TArray<struct FCameraCutInfo> CameraCuts;  // Offset: 624 Size: 16
	char bIsPlaying : 1;  // Offset: 640 Size: 1
	char bReversePlayback : 1;  // Offset: 640 Size: 1
	char bPaused : 1;  // Offset: 640 Size: 1
	char bPendingStop : 1;  // Offset: 640 Size: 1
	char pad_640_1 : 4;  // Offset: 640 Size: 1
	char pad_641[4];  // Offset: 641 Size: 4
	float InterpPosition;  // Offset: 644 Size: 4
	char pad_648[4];  // Offset: 648 Size: 4
	char ReplicationForceIsPlaying;  // Offset: 652 Size: 1
	char pad_653[3];  // Offset: 653 Size: 3
	struct FMulticastInlineDelegate OnPlay;  // Offset: 656 Size: 16
	struct FMulticastInlineDelegate OnStop;  // Offset: 672 Size: 16
	struct FMulticastInlineDelegate OnPause;  // Offset: 688 Size: 16
	char pad_704[8];  // Offset: 704 Size: 8



 // Functions 
 public:
	void Stop(); // Function Engine.MatineeActor.Stop
	void SetPosition(float NewPosition, bool bJump); // Function Engine.MatineeActor.SetPosition
	void SetLoopingState(bool bNewLooping); // Function Engine.MatineeActor.SetLoopingState
	void Reverse(); // Function Engine.MatineeActor.Reverse
	void Play(); // Function Engine.MatineeActor.Play
	void Pause(); // Function Engine.MatineeActor.Pause
	void EnableGroupByName(struct FString GroupName, bool bEnable); // Function Engine.MatineeActor.EnableGroupByName
	void ChangePlaybackDirection(); // Function Engine.MatineeActor.ChangePlaybackDirection
}; 
 
 


//Class Engine.MatineeActorCameraAnim Size 720
// Inherited 712 bytes 
class AMatineeActorCameraAnim : public AMatineeActor
{

 public: 
	struct UCameraAnim* CameraAnim;  // Offset: 712 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleAttractorLine Size 168
// Inherited 48 bytes 
class UParticleModuleAttractorLine : public UParticleModuleAttractorBase
{

 public: 
	struct FVector EndPoint0;  // Offset: 48 Size: 12
	struct FVector EndPoint1;  // Offset: 60 Size: 12
	struct FRawDistributionFloat Range;  // Offset: 72 Size: 48
	struct FRawDistributionFloat Strength;  // Offset: 120 Size: 48



 // Functions 
 public:
}; 
 
 


//Class Engine.ViewportStatsSubsystem Size 80
// Inherited 48 bytes 
class UViewportStatsSubsystem : public UWorldSubsystem
{

 public: 
	char pad_48[32];  // Offset: 48 Size: 32



 // Functions 
 public:
	void RemoveDisplayDelegate(int32_t IndexToRemove); // Function Engine.ViewportStatsSubsystem.RemoveDisplayDelegate
	void AddTimedDisplay(struct FText Text, struct FLinearColor Color, float Duration); // Function Engine.ViewportStatsSubsystem.AddTimedDisplay
	int32_t AddDisplayDelegate(struct FDelegate& Delegate); // Function Engine.ViewportStatsSubsystem.AddDisplayDelegate
}; 
 
 


//Class Engine.MeshMergeCullingVolume Size 600
// Inherited 600 bytes 
class AMeshMergeCullingVolume : public AVolume
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.MeshVertexPainterKismetLibrary Size 40
// Inherited 40 bytes 
class UMeshVertexPainterKismetLibrary : public UBlueprintFunctionLibrary
{

 public: 



 // Functions 
 public:
	void RemovePaintedVertices(struct UStaticMeshComponent* StaticMeshComponent); // Function Engine.MeshVertexPainterKismetLibrary.RemovePaintedVertices
	void PaintVerticesSingleColor(struct UStaticMeshComponent* StaticMeshComponent, struct FLinearColor& FillColor, bool bConvertToSRGB); // Function Engine.MeshVertexPainterKismetLibrary.PaintVerticesSingleColor
	void PaintVerticesLerpAlongAxis(struct UStaticMeshComponent* StaticMeshComponent, struct FLinearColor& StartColor, struct FLinearColor& EndColor, enum class EVertexPaintAxis Axis, bool bConvertToSRGB); // Function Engine.MeshVertexPainterKismetLibrary.PaintVerticesLerpAlongAxis
}; 
 
 


//Class Engine.ModelComponent Size 1200
// Inherited 1136 bytes 
class UModelComponent : public UPrimitiveComponent
{

 public: 
	char pad_1136[24];  // Offset: 1136 Size: 24
	struct UBodySetup* ModelBodySetup;  // Offset: 1160 Size: 8
	char pad_1168[32];  // Offset: 1168 Size: 32



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleAccelerationOverLifetime Size 128
// Inherited 56 bytes 
class UParticleModuleAccelerationOverLifetime : public UParticleModuleAccelerationBase
{

 public: 
	struct FRawDistributionVector AccelOverLife;  // Offset: 56 Size: 72



 // Functions 
 public:
}; 
 
 


//Class Engine.MorphTarget Size 64
// Inherited 40 bytes 
class UMorphTarget : public UObject
{

 public: 
	struct USkeletalMesh* BaseSkelMesh;  // Offset: 40 Size: 8
	char pad_48[16];  // Offset: 48 Size: 16



 // Functions 
 public:
}; 
 
 


//Class Engine.NavAgentInterface Size 40
// Inherited 40 bytes 
class UNavAgentInterface : public UInterface
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.NavCollisionBase Size 112
// Inherited 40 bytes 
class UNavCollisionBase : public UObject
{

 public: 
	char bIsDynamicObstacle : 1;  // Offset: 40 Size: 1
	char pad_40_1 : 7;  // Offset: 40 Size: 1
	char pad_41[72];  // Offset: 41 Size: 72



 // Functions 
 public:
}; 
 
 


//Class Engine.NavEdgeProviderInterface Size 40
// Inherited 40 bytes 
class UNavEdgeProviderInterface : public UInterface
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.PawnNoiseEmitterComponent Size 216
// Inherited 176 bytes 
class UPawnNoiseEmitterComponent : public UActorComponent
{

 public: 
	char bAIPerceptionSystemCompatibilityMode : 1;  // Offset: 176 Size: 1
	char pad_176_1 : 7;  // Offset: 176 Size: 1
	char pad_177[4];  // Offset: 177 Size: 4
	struct FVector LastRemoteNoisePosition;  // Offset: 180 Size: 12
	float NoiseLifetime;  // Offset: 192 Size: 4
	float LastRemoteNoiseVolume;  // Offset: 196 Size: 4
	float LastRemoteNoiseTime;  // Offset: 200 Size: 4
	float LastLocalNoiseVolume;  // Offset: 204 Size: 4
	float LastLocalNoiseTime;  // Offset: 208 Size: 4
	char pad_212[4];  // Offset: 212 Size: 4



 // Functions 
 public:
	void MakeNoise(struct AActor* NoiseMaker, float Loudness, struct FVector& NoiseLocation); // Function Engine.PawnNoiseEmitterComponent.MakeNoise
}; 
 
 


//Class Engine.ParticleModuleLifetimeBase Size 48
// Inherited 48 bytes 
class UParticleModuleLifetimeBase : public UParticleModule
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.NavigationDataInterface Size 40
// Inherited 40 bytes 
class UNavigationDataInterface : public UInterface
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.NavigationObjectBase Size 584
// Inherited 544 bytes 
class ANavigationObjectBase : public AActor
{

 public: 
	char pad_544[8];  // Offset: 544 Size: 8
	struct UCapsuleComponent* CapsuleComponent;  // Offset: 552 Size: 8
	struct UBillboardComponent* GoodSprite;  // Offset: 560 Size: 8
	struct UBillboardComponent* BadSprite;  // Offset: 568 Size: 8
	char bIsPIEPlayerStart : 1;  // Offset: 576 Size: 1
	char pad_576_1 : 7;  // Offset: 576 Size: 1
	char pad_577[8];  // Offset: 577 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.NavigationSystemBase Size 40
// Inherited 40 bytes 
class UNavigationSystemBase : public UObject
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.NavigationSystemConfig Size 80
// Inherited 40 bytes 
class UNavigationSystemConfig : public UObject
{

 public: 
	struct FSoftClassPath NavigationSystemClass;  // Offset: 40 Size: 24
	struct FNavAgentSelector SupportedAgentsMask;  // Offset: 64 Size: 4
	struct FName DefaultAgentName;  // Offset: 68 Size: 8
	char bIsOverriden : 1;  // Offset: 76 Size: 1
	char pad_76_1 : 7;  // Offset: 76 Size: 1
	char pad_77[4];  // Offset: 77 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.NavLinkDefinition Size 80
// Inherited 40 bytes 
class UNavLinkDefinition : public UObject
{

 public: 
	struct TArray<struct FNavigationLink> Links;  // Offset: 40 Size: 16
	struct TArray<struct FNavigationSegmentLink> SegmentLinks;  // Offset: 56 Size: 16
	char pad_72[8];  // Offset: 72 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.SimulatedClientNetConnection Size 7080
// Inherited 7080 bytes 
class USimulatedClientNetConnection : public UNetConnection
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.NetPushModelHelpers Size 40
// Inherited 40 bytes 
class UNetPushModelHelpers : public UBlueprintFunctionLibrary
{

 public: 



 // Functions 
 public:
	void MarkPropertyDirtyFromRepIndex(struct UObject* Object, int32_t RepIndex, struct FName PropertyName); // Function Engine.NetPushModelHelpers.MarkPropertyDirtyFromRepIndex
	void MarkPropertyDirty(struct UObject* Object, struct FName PropertyName); // Function Engine.NetPushModelHelpers.MarkPropertyDirty
}; 
 
 


//Class Engine.NetworkSettings Size 88
// Inherited 56 bytes 
class UNetworkSettings : public UDeveloperSettings
{

 public: 
	char bVerifyPeer : 1;  // Offset: 56 Size: 1
	char bEnableMultiplayerWorldOriginRebasing : 1;  // Offset: 56 Size: 1
	char pad_56_1 : 6;  // Offset: 56 Size: 1
	char pad_57[4];  // Offset: 57 Size: 4
	int32_t MaxRepArraySize;  // Offset: 60 Size: 4
	int32_t MaxRepArrayMemory;  // Offset: 64 Size: 4
	char pad_68[4];  // Offset: 68 Size: 4
	struct TArray<struct FNetworkEmulationProfileDescription> NetworkEmulationProfiles;  // Offset: 72 Size: 16



 // Functions 
 public:
}; 
 
 


//Class Engine.ObjectLibrary Size 168
// Inherited 40 bytes 
class UObjectLibrary : public UObject
{

 public: 
	UObject* ObjectBaseClass;  // Offset: 40 Size: 8
	char pad_48_1 : 7;  // Offset: 48 Size: 1
	bool bHasBlueprintClasses : 1;  // Offset: 48 Size: 1
	char pad_49[7];  // Offset: 49 Size: 7
	struct TArray<struct UObject*> Objects;  // Offset: 56 Size: 16
	struct TArray<struct TWeakObjectPtr<UObject>> WeakObjects;  // Offset: 72 Size: 16
	char pad_88_1 : 7;  // Offset: 88 Size: 1
	bool bUseWeakReferences : 1;  // Offset: 88 Size: 1
	char pad_89_1 : 7;  // Offset: 89 Size: 1
	bool bIsFullyLoaded : 1;  // Offset: 89 Size: 1
	char pad_90[78];  // Offset: 90 Size: 78



 // Functions 
 public:
}; 
 
 


//Class Engine.StereoLayerShapeQuad Size 40
// Inherited 40 bytes 
class UStereoLayerShapeQuad : public UStereoLayerShape
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleEmitter Size 440
// Inherited 40 bytes 
class UParticleEmitter : public UObject
{

 public: 
	struct FName EmitterName;  // Offset: 40 Size: 8
	int32_t SubUVDataOffset;  // Offset: 48 Size: 4
	enum class EEmitterRenderMode EmitterRenderMode;  // Offset: 52 Size: 1
	enum class EParticleSignificanceLevel SignificanceLevel;  // Offset: 53 Size: 1
	char pad_54[1];  // Offset: 54 Size: 1
	char bUseLegacySpawningBehavior : 1;  // Offset: 55 Size: 1
	char pad_55_1 : 3;  // Offset: 55 Size: 1
	char ConvertedModules : 1;  // Offset: 55 Size: 1
	char bIsSoloing : 1;  // Offset: 55 Size: 1
	char bCookedOut : 1;  // Offset: 55 Size: 1
	char bDisabledLODsKeepEmitterAlive : 1;  // Offset: 55 Size: 1
	char bDisableWhenInsignficant : 1;  // Offset: 56 Size: 1
	char pad_56_1 : 7;  // Offset: 56 Size: 1
	char pad_57[8];  // Offset: 57 Size: 8
	struct TArray<struct UParticleLODLevel*> LODLevels;  // Offset: 64 Size: 16
	int32_t PeakActiveParticles;  // Offset: 80 Size: 4
	int32_t InitialAllocationCount;  // Offset: 84 Size: 4
	float QualityLevelSpawnRateScale;  // Offset: 88 Size: 4
	uint32_t DetailModeBitmask;  // Offset: 92 Size: 4
	char pad_96[344];  // Offset: 96 Size: 344



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleEventManager Size 544
// Inherited 544 bytes 
class AParticleEventManager : public AActor
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleAccelerationConstant Size 72
// Inherited 56 bytes 
class UParticleModuleAccelerationConstant : public UParticleModuleAccelerationBase
{

 public: 
	struct FVector Acceleration;  // Offset: 56 Size: 12
	char pad_68[4];  // Offset: 68 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleAttractorPoint Size 224
// Inherited 48 bytes 
class UParticleModuleAttractorPoint : public UParticleModuleAttractorBase
{

 public: 
	struct FRawDistributionVector position;  // Offset: 48 Size: 72
	struct FRawDistributionFloat Range;  // Offset: 120 Size: 48
	struct FRawDistributionFloat Strength;  // Offset: 168 Size: 48
	char StrengthByDistance : 1;  // Offset: 216 Size: 1
	char bAffectBaseVelocity : 1;  // Offset: 216 Size: 1
	char bOverrideVelocity : 1;  // Offset: 216 Size: 1
	char bUseWorldSpacePosition : 1;  // Offset: 216 Size: 1
	char Positive_X : 1;  // Offset: 216 Size: 1
	char Positive_Y : 1;  // Offset: 216 Size: 1
	char Positive_Z : 1;  // Offset: 216 Size: 1
	char Negative_X : 1;  // Offset: 216 Size: 1
	char Negative_Y : 1;  // Offset: 217 Size: 1
	char Negative_Z : 1;  // Offset: 217 Size: 1
	char pad_217_1 : 6;  // Offset: 217 Size: 1
	char pad_218[7];  // Offset: 218 Size: 7



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleBeamTarget Size 288
// Inherited 48 bytes 
class UParticleModuleBeamTarget : public UParticleModuleBeamBase
{

 public: 
	enum class Beam2SourceTargetMethod TargetMethod;  // Offset: 48 Size: 1
	char pad_49[3];  // Offset: 49 Size: 3
	struct FName TargetName;  // Offset: 52 Size: 8
	char pad_60[4];  // Offset: 60 Size: 4
	struct FRawDistributionVector Target;  // Offset: 64 Size: 72
	char bTargetAbsolute : 1;  // Offset: 136 Size: 1
	char bLockTarget : 1;  // Offset: 136 Size: 1
	char pad_136_1 : 6;  // Offset: 136 Size: 1
	char pad_137[4];  // Offset: 137 Size: 4
	enum class Beam2SourceTargetTangentMethod TargetTangentMethod;  // Offset: 140 Size: 1
	char pad_141[3];  // Offset: 141 Size: 3
	struct FRawDistributionVector TargetTangent;  // Offset: 144 Size: 72
	char bLockTargetTangent : 1;  // Offset: 216 Size: 1
	char pad_216_1 : 7;  // Offset: 216 Size: 1
	char pad_217[8];  // Offset: 217 Size: 8
	struct FRawDistributionFloat TargetStrength;  // Offset: 224 Size: 48
	char bLockTargetStength : 1;  // Offset: 272 Size: 1
	char pad_272_1 : 7;  // Offset: 272 Size: 1
	char pad_273[4];  // Offset: 273 Size: 4
	float LockRadius;  // Offset: 276 Size: 4
	char pad_280[8];  // Offset: 280 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleCameraOffset Size 104
// Inherited 48 bytes 
class UParticleModuleCameraOffset : public UParticleModuleCameraBase
{

 public: 
	struct FRawDistributionFloat CameraOffset;  // Offset: 48 Size: 48
	char bSpawnTimeOnly : 1;  // Offset: 96 Size: 1
	char pad_96_1 : 7;  // Offset: 96 Size: 1
	char pad_97[4];  // Offset: 97 Size: 4
	enum class EParticleCameraOffsetUpdateMethod UpdateMethod;  // Offset: 100 Size: 1
	char pad_101[3];  // Offset: 101 Size: 3



 // Functions 
 public:
}; 
 
 


//Class Engine.ReplaySubsystem Size 64
// Inherited 48 bytes 
class UReplaySubsystem : public UGameInstanceSubsystem
{

 public: 
	char pad_48_1 : 7;  // Offset: 48 Size: 1
	bool bLoadDefaultMapOnStop : 1;  // Offset: 48 Size: 1
	char pad_49[15];  // Offset: 49 Size: 15



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleCollision Size 400
// Inherited 48 bytes 
class UParticleModuleCollision : public UParticleModuleCollisionBase
{

 public: 
	struct FRawDistributionVector DampingFactor;  // Offset: 48 Size: 72
	struct FRawDistributionVector DampingFactorRotation;  // Offset: 120 Size: 72
	struct FRawDistributionFloat MaxCollisions;  // Offset: 192 Size: 48
	enum class EParticleCollisionComplete CollisionCompletionOption;  // Offset: 240 Size: 1
	char pad_241[7];  // Offset: 241 Size: 7
	struct TArray<enum class EObjectTypeQuery> CollisionTypes;  // Offset: 248 Size: 16
	char pad_264[8];  // Offset: 264 Size: 8
	char bApplyPhysics : 1;  // Offset: 272 Size: 1
	char bIgnoreTriggerVolumes : 1;  // Offset: 272 Size: 1
	char pad_272_1 : 6;  // Offset: 272 Size: 1
	char pad_273[8];  // Offset: 273 Size: 8
	struct FRawDistributionFloat ParticleMass;  // Offset: 280 Size: 48
	float DirScalar;  // Offset: 328 Size: 4
	char bPawnsDoNotDecrementCount : 1;  // Offset: 332 Size: 1
	char bOnlyVerticalNormalsDecrementCount : 1;  // Offset: 332 Size: 1
	char pad_332_1 : 6;  // Offset: 332 Size: 1
	char pad_333[4];  // Offset: 333 Size: 4
	float VerticalFudgeFactor;  // Offset: 336 Size: 4
	char pad_340[4];  // Offset: 340 Size: 4
	struct FRawDistributionFloat DelayAmount;  // Offset: 344 Size: 48
	char bDropDetail : 1;  // Offset: 392 Size: 1
	char bCollideOnlyIfVisible : 1;  // Offset: 392 Size: 1
	char bIgnoreSourceActor : 1;  // Offset: 392 Size: 1
	char pad_392_1 : 5;  // Offset: 392 Size: 1
	char pad_393[4];  // Offset: 393 Size: 4
	float MaxCollisionDistance;  // Offset: 396 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleColorBase Size 48
// Inherited 48 bytes 
class UParticleModuleColorBase : public UParticleModule
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleEventBase Size 48
// Inherited 48 bytes 
class UParticleModuleEventBase : public UParticleModule
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.StereoLayerShape Size 40
// Inherited 40 bytes 
class UStereoLayerShape : public UObject
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleEventReceiverBase Size 64
// Inherited 48 bytes 
class UParticleModuleEventReceiverBase : public UParticleModuleEventBase
{

 public: 
	enum class EParticleEventType EventGeneratorType;  // Offset: 48 Size: 1
	char pad_49[3];  // Offset: 49 Size: 3
	struct FName EventName;  // Offset: 52 Size: 8
	char pad_60[4];  // Offset: 60 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleEventReceiverKillParticles Size 72
// Inherited 64 bytes 
class UParticleModuleEventReceiverKillParticles : public UParticleModuleEventReceiverBase
{

 public: 
	char bStopSpawning : 1;  // Offset: 64 Size: 1
	char pad_64_1 : 7;  // Offset: 64 Size: 1
	char pad_65[8];  // Offset: 65 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleEventSendToGame Size 40
// Inherited 40 bytes 
class UParticleModuleEventSendToGame : public UObject
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.SceneCapture2D Size 568
// Inherited 560 bytes 
class ASceneCapture2D : public ASceneCapture
{

 public: 
	struct USceneCaptureComponent2D* CaptureComponent2D;  // Offset: 560 Size: 8



 // Functions 
 public:
	void OnInterpToggle(bool bEnable); // Function Engine.SceneCapture2D.OnInterpToggle
}; 
 
 


//Class Engine.ParticleModuleLifetime_Seeded Size 128
// Inherited 96 bytes 
class UParticleModuleLifetime_Seeded : public UParticleModuleLifetime
{

 public: 
	struct FParticleRandomSeedInfo RandomSeedInfo;  // Offset: 96 Size: 32



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleLightBase Size 48
// Inherited 48 bytes 
class UParticleModuleLightBase : public UParticleModule
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleLocationPrimitiveSphere_Seeded Size 256
// Inherited 224 bytes 
class UParticleModuleLocationPrimitiveSphere_Seeded : public UParticleModuleLocationPrimitiveSphere
{

 public: 
	struct FParticleRandomSeedInfo RandomSeedInfo;  // Offset: 224 Size: 32



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleLight Size 288
// Inherited 48 bytes 
class UParticleModuleLight : public UParticleModuleLightBase
{

 public: 
	char pad_48_1 : 7;  // Offset: 48 Size: 1
	bool bUseInverseSquaredFalloff : 1;  // Offset: 48 Size: 1
	char pad_49_1 : 7;  // Offset: 49 Size: 1
	bool bAffectsTranslucency : 1;  // Offset: 49 Size: 1
	char pad_50_1 : 7;  // Offset: 50 Size: 1
	bool bPreviewLightRadius : 1;  // Offset: 50 Size: 1
	char pad_51[1];  // Offset: 51 Size: 1
	float SpawnFraction;  // Offset: 52 Size: 4
	struct FRawDistributionVector ColorScaleOverLife;  // Offset: 56 Size: 72
	struct FRawDistributionFloat BrightnessOverLife;  // Offset: 128 Size: 48
	struct FRawDistributionFloat RadiusScale;  // Offset: 176 Size: 48
	struct FRawDistributionFloat LightExponent;  // Offset: 224 Size: 48
	struct FLightingChannels LightingChannels;  // Offset: 272 Size: 1
	char pad_273[3];  // Offset: 273 Size: 3
	float VolumetricScatteringIntensity;  // Offset: 276 Size: 4
	char pad_280_1 : 7;  // Offset: 280 Size: 1
	bool bHighQualityLights : 1;  // Offset: 280 Size: 1
	char pad_281_1 : 7;  // Offset: 281 Size: 1
	bool bShadowCastingLights : 1;  // Offset: 281 Size: 1
	char pad_282[6];  // Offset: 282 Size: 6



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleLocationBase Size 48
// Inherited 48 bytes 
class UParticleModuleLocationBase : public UParticleModule
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.PlayerInput Size 952
// Inherited 40 bytes 
class UPlayerInput : public UObject
{

 public: 
	char pad_40[248];  // Offset: 40 Size: 248
	struct TArray<struct FKeyBind> DebugExecBindings;  // Offset: 288 Size: 16
	char pad_304[48];  // Offset: 304 Size: 48
	struct TArray<struct FName> InvertedAxis;  // Offset: 352 Size: 16
	char pad_368[584];  // Offset: 368 Size: 584



 // Functions 
 public:
	void SetMouseSensitivity(float Sensitivity); // Function Engine.PlayerInput.SetMouseSensitivity
	void SetBind(struct FName BindName, struct FString Command); // Function Engine.PlayerInput.SetBind
	void InvertAxisKey(struct FKey AxisKey); // Function Engine.PlayerInput.InvertAxisKey
	void InvertAxis(struct FName AxisName); // Function Engine.PlayerInput.InvertAxis
	void ClearSmoothing(); // Function Engine.PlayerInput.ClearSmoothing
}; 
 
 


//Class Engine.ParticleModuleLocation Size 128
// Inherited 48 bytes 
class UParticleModuleLocation : public UParticleModuleLocationBase
{

 public: 
	struct FRawDistributionVector StartLocation;  // Offset: 48 Size: 72
	float DistributeOverNPoints;  // Offset: 120 Size: 4
	float DistributeThreshold;  // Offset: 124 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleLocationBoneSocket Size 112
// Inherited 48 bytes 
class UParticleModuleLocationBoneSocket : public UParticleModuleLocationBase
{

 public: 
	enum class ELocationBoneSocketSource SourceType;  // Offset: 48 Size: 1
	char pad_49[3];  // Offset: 49 Size: 3
	struct FVector UniversalOffset;  // Offset: 52 Size: 12
	struct TArray<struct FLocationBoneSocketInfo> SourceLocations;  // Offset: 64 Size: 16
	enum class ELocationBoneSocketSelectionMethod SelectionMethod;  // Offset: 80 Size: 1
	char pad_81[3];  // Offset: 81 Size: 3
	char bUpdatePositionEachFrame : 1;  // Offset: 84 Size: 1
	char bOrientMeshEmitters : 1;  // Offset: 84 Size: 1
	char bInheritBoneVelocity : 1;  // Offset: 84 Size: 1
	char pad_84_1 : 5;  // Offset: 84 Size: 1
	char pad_85[4];  // Offset: 85 Size: 4
	float InheritVelocityScale;  // Offset: 88 Size: 4
	struct FName SkelMeshActorParamName;  // Offset: 92 Size: 8
	int32_t NumPreSelectedIndices;  // Offset: 100 Size: 4
	char pad_104[8];  // Offset: 104 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleLocationDirect Size 336
// Inherited 48 bytes 
class UParticleModuleLocationDirect : public UParticleModuleLocationBase
{

 public: 
	struct FRawDistributionVector Location;  // Offset: 48 Size: 72
	struct FRawDistributionVector LocationOffset;  // Offset: 120 Size: 72
	struct FRawDistributionVector ScaleFactor;  // Offset: 192 Size: 72
	struct FRawDistributionVector Direction;  // Offset: 264 Size: 72



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleLocationEmitter Size 80
// Inherited 48 bytes 
class UParticleModuleLocationEmitter : public UParticleModuleLocationBase
{

 public: 
	struct FName EmitterName;  // Offset: 48 Size: 8
	enum class ELocationEmitterSelectionMethod SelectionMethod;  // Offset: 56 Size: 1
	char pad_57[3];  // Offset: 57 Size: 3
	char InheritSourceVelocity : 1;  // Offset: 60 Size: 1
	char pad_60_1 : 7;  // Offset: 60 Size: 1
	char pad_61[4];  // Offset: 61 Size: 4
	float InheritSourceVelocityScale;  // Offset: 64 Size: 4
	char bInheritSourceRotation : 1;  // Offset: 68 Size: 1
	char pad_68_1 : 7;  // Offset: 68 Size: 1
	char pad_69[4];  // Offset: 69 Size: 4
	float InheritSourceRotationScale;  // Offset: 72 Size: 4
	char pad_76[4];  // Offset: 76 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleLocationEmitterDirect Size 56
// Inherited 48 bytes 
class UParticleModuleLocationEmitterDirect : public UParticleModuleLocationBase
{

 public: 
	struct FName EmitterName;  // Offset: 48 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleLocationPrimitiveSphere Size 224
// Inherited 176 bytes 
class UParticleModuleLocationPrimitiveSphere : public UParticleModuleLocationPrimitiveBase
{

 public: 
	struct FRawDistributionFloat StartRadius;  // Offset: 176 Size: 48



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleLocationSkelVertSurface Size 144
// Inherited 48 bytes 
class UParticleModuleLocationSkelVertSurface : public UParticleModuleLocationBase
{

 public: 
	enum class ELocationSkelVertSurfaceSource SourceType;  // Offset: 48 Size: 1
	char pad_49[3];  // Offset: 49 Size: 3
	struct FVector UniversalOffset;  // Offset: 52 Size: 12
	char bUpdatePositionEachFrame : 1;  // Offset: 64 Size: 1
	char bOrientMeshEmitters : 1;  // Offset: 64 Size: 1
	char bInheritBoneVelocity : 1;  // Offset: 64 Size: 1
	char pad_64_1 : 5;  // Offset: 64 Size: 1
	char pad_65[4];  // Offset: 65 Size: 4
	float InheritVelocityScale;  // Offset: 68 Size: 4
	struct FName SkelMeshActorParamName;  // Offset: 72 Size: 8
	struct TArray<struct FName> ValidAssociatedBones;  // Offset: 80 Size: 16
	char bEnforceNormalCheck : 1;  // Offset: 96 Size: 1
	char pad_96_1 : 7;  // Offset: 96 Size: 1
	char pad_97[4];  // Offset: 97 Size: 4
	struct FVector NormalToCompare;  // Offset: 100 Size: 12
	float NormalCheckToleranceDegrees;  // Offset: 112 Size: 4
	float NormalCheckTolerance;  // Offset: 116 Size: 4
	struct TArray<int32_t> ValidMaterialIndices;  // Offset: 120 Size: 16
	char bInheritVertexColor : 1;  // Offset: 136 Size: 1
	char bInheritUV : 1;  // Offset: 136 Size: 1
	char pad_136_1 : 6;  // Offset: 136 Size: 1
	char pad_137[4];  // Offset: 137 Size: 4
	uint32_t InheritUVChannel;  // Offset: 140 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleLocationWorldOffset Size 128
// Inherited 128 bytes 
class UParticleModuleLocationWorldOffset : public UParticleModuleLocation
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleLocationWorldOffset_Seeded Size 160
// Inherited 128 bytes 
class UParticleModuleLocationWorldOffset_Seeded : public UParticleModuleLocationWorldOffset
{

 public: 
	struct FParticleRandomSeedInfo RandomSeedInfo;  // Offset: 128 Size: 32



 // Functions 
 public:
}; 
 
 


//Class Engine.VirtualTexture Size 40
// Inherited 40 bytes 
class UVirtualTexture : public UObject
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleRotationBase Size 48
// Inherited 48 bytes 
class UParticleModuleRotationBase : public UParticleModule
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleMeshRotation_Seeded Size 160
// Inherited 128 bytes 
class UParticleModuleMeshRotation_Seeded : public UParticleModuleMeshRotation
{

 public: 
	struct FParticleRandomSeedInfo RandomSeedInfo;  // Offset: 128 Size: 32



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleMeshRotationRateOverLife Size 128
// Inherited 48 bytes 
class UParticleModuleMeshRotationRateOverLife : public UParticleModuleRotationRateBase
{

 public: 
	struct FRawDistributionVector RotRate;  // Offset: 48 Size: 72
	char bScaleRotRate : 1;  // Offset: 120 Size: 1
	char pad_120_1 : 7;  // Offset: 120 Size: 1
	char pad_121[8];  // Offset: 121 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleMeshRotationRate Size 120
// Inherited 48 bytes 
class UParticleModuleMeshRotationRate : public UParticleModuleRotationRateBase
{

 public: 
	struct FRawDistributionVector StartRotationRate;  // Offset: 48 Size: 72



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleMeshRotationRate_Seeded Size 152
// Inherited 120 bytes 
class UParticleModuleMeshRotationRate_Seeded : public UParticleModuleMeshRotationRate
{

 public: 
	struct FParticleRandomSeedInfo RandomSeedInfo;  // Offset: 120 Size: 32



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleParameterDynamic_Seeded Size 104
// Inherited 72 bytes 
class UParticleModuleParameterDynamic_Seeded : public UParticleModuleParameterDynamic
{

 public: 
	struct FParticleRandomSeedInfo RandomSeedInfo;  // Offset: 72 Size: 32



 // Functions 
 public:
}; 
 
 


//Class Engine.StaticMesh Size 336
// Inherited 96 bytes 
class UStaticMesh : public UStreamableRenderAsset
{

 public: 
	char pad_96[32];  // Offset: 96 Size: 32
	struct FPerPlatformInt MinLOD;  // Offset: 128 Size: 4
	float LpvBiasMultiplier;  // Offset: 132 Size: 4
	struct TArray<struct FStaticMaterial> StaticMaterials;  // Offset: 136 Size: 16
	float LightmapUVDensity;  // Offset: 152 Size: 4
	int32_t LightMapResolution;  // Offset: 156 Size: 4
	int32_t LightMapCoordinateIndex;  // Offset: 160 Size: 4
	float DistanceFieldSelfShadowBias;  // Offset: 164 Size: 4
	struct UBodySetup* BodySetup;  // Offset: 168 Size: 8
	int32_t LODForCollision;  // Offset: 176 Size: 4
	char bGenerateMeshDistanceField : 1;  // Offset: 180 Size: 1
	char bStripComplexCollisionForConsole : 1;  // Offset: 180 Size: 1
	char bHasNavigationData : 1;  // Offset: 180 Size: 1
	char bSupportUniformlyDistributedSampling : 1;  // Offset: 180 Size: 1
	char bSupportPhysicalMaterialMasks : 1;  // Offset: 180 Size: 1
	char bSupportRayTracing : 1;  // Offset: 180 Size: 1
	char bIsBuiltAtRuntime : 1;  // Offset: 180 Size: 1
	char pad_180_1 : 1;  // Offset: 180 Size: 1
	char bAllowCPUAccess : 1;  // Offset: 181 Size: 1
	char bSupportGpuUniformlyDistributedSampling : 1;  // Offset: 181 Size: 1
	char pad_181_1 : 6;  // Offset: 181 Size: 1
	char pad_182[35];  // Offset: 182 Size: 35
	struct TArray<struct UStaticMeshSocket*> Sockets;  // Offset: 216 Size: 16
	char pad_232[16];  // Offset: 232 Size: 16
	struct FVector PositiveBoundsExtension;  // Offset: 248 Size: 12
	struct FVector NegativeBoundsExtension;  // Offset: 260 Size: 12
	struct FBoxSphereBounds ExtendedBounds;  // Offset: 272 Size: 28
	int32_t ElementToIgnoreForTexFactor;  // Offset: 300 Size: 4
	struct TArray<struct UAssetUserData*> AssetUserData;  // Offset: 304 Size: 16
	struct UObject* EditableMesh;  // Offset: 320 Size: 8
	struct UNavCollisionBase* NavCollision;  // Offset: 328 Size: 8



 // Functions 
 public:
	void SetStaticMaterials(struct TArray<struct FStaticMaterial>& InStaticMaterials); // Function Engine.StaticMesh.SetStaticMaterials
	void RemoveSocket(struct UStaticMeshSocket* Socket); // Function Engine.StaticMesh.RemoveSocket
	struct TArray<struct FStaticMaterial> GetStaticMaterials(); // Function Engine.StaticMesh.GetStaticMaterials
	int32_t GetNumSections(int32_t InLOD); // Function Engine.StaticMesh.GetNumSections
	int32_t GetNumLODs(); // Function Engine.StaticMesh.GetNumLODs
	void GetMinimumLODForPlatforms(struct TMap<struct FName, int32_t>& PlatformMinimumLODs); // Function Engine.StaticMesh.GetMinimumLODForPlatforms
	int32_t GetMinimumLODForPlatform(struct FName& PlatformName); // Function Engine.StaticMesh.GetMinimumLODForPlatform
	int32_t GetMaterialIndex(struct FName MaterialSlotName); // Function Engine.StaticMesh.GetMaterialIndex
	struct UMaterialInterface* GetMaterial(int32_t MaterialIndex); // Function Engine.StaticMesh.GetMaterial
	struct FBoxSphereBounds GetBounds(); // Function Engine.StaticMesh.GetBounds
	struct FBox GetBoundingBox(); // Function Engine.StaticMesh.GetBoundingBox
	struct UStaticMeshSocket* FindSocket(struct FName InSocketName); // Function Engine.StaticMesh.FindSocket
	struct UStaticMeshDescription* CreateStaticMeshDescription(struct UObject* Outer); // Function Engine.StaticMesh.CreateStaticMeshDescription
	void BuildFromStaticMeshDescriptions(struct TArray<struct UStaticMeshDescription*>& StaticMeshDescriptions, bool bBuildSimpleCollision); // Function Engine.StaticMesh.BuildFromStaticMeshDescriptions
	void AddSocket(struct UStaticMeshSocket* Socket); // Function Engine.StaticMesh.AddSocket
	struct FName AddMaterial(struct UMaterialInterface* Material); // Function Engine.StaticMesh.AddMaterial
}; 
 
 


//Class Engine.ParticleModuleMeshRotationRateMultiplyLife Size 120
// Inherited 48 bytes 
class UParticleModuleMeshRotationRateMultiplyLife : public UParticleModuleRotationRateBase
{

 public: 
	struct FRawDistributionVector LifeMultiplier;  // Offset: 48 Size: 72



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleVectorFieldBase Size 48
// Inherited 48 bytes 
class UParticleModuleVectorFieldBase : public UParticleModule
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleParameterBase Size 48
// Inherited 48 bytes 
class UParticleModuleParameterBase : public UParticleModule
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleRequired Size 320
// Inherited 48 bytes 
class UParticleModuleRequired : public UParticleModule
{

 public: 
	struct UMaterialInterface* Material;  // Offset: 48 Size: 8
	float MinFacingCameraBlendDistance;  // Offset: 56 Size: 4
	float MaxFacingCameraBlendDistance;  // Offset: 60 Size: 4
	struct FVector EmitterOrigin;  // Offset: 64 Size: 12
	struct FRotator EmitterRotation;  // Offset: 76 Size: 12
	enum class EParticleScreenAlignment ScreenAlignment;  // Offset: 88 Size: 1
	char bUseLocalSpace : 1;  // Offset: 89 Size: 1
	char bKillOnDeactivate : 1;  // Offset: 89 Size: 1
	char bKillOnCompleted : 1;  // Offset: 89 Size: 1
	char pad_89_1 : 5;  // Offset: 89 Size: 1
	enum class EParticleSortMode SortMode;  // Offset: 90 Size: 1
	char bUseLegacyEmitterTime : 1;  // Offset: 91 Size: 1
	char bRemoveHMDRoll : 1;  // Offset: 91 Size: 1
	char bEmitterDurationUseRange : 1;  // Offset: 91 Size: 1
	char pad_91_1 : 5;  // Offset: 91 Size: 1
	float EmitterDuration;  // Offset: 92 Size: 4
	struct FRawDistributionFloat SpawnRate;  // Offset: 96 Size: 48
	struct TArray<struct FParticleBurst> BurstList;  // Offset: 144 Size: 16
	float EmitterDelay;  // Offset: 160 Size: 4
	float EmitterDelayLow;  // Offset: 164 Size: 4
	char bDelayFirstLoopOnly : 1;  // Offset: 168 Size: 1
	char pad_168_1 : 7;  // Offset: 168 Size: 1
	enum class EParticleSubUVInterpMethod InterpolationMethod;  // Offset: 169 Size: 1
	char bScaleUV : 1;  // Offset: 170 Size: 1
	char bEmitterDelayUseRange : 1;  // Offset: 170 Size: 1
	char pad_170_1 : 6;  // Offset: 170 Size: 1
	enum class EParticleBurstMethod ParticleBurstMethod;  // Offset: 171 Size: 1
	char bOverrideSystemMacroUV : 1;  // Offset: 172 Size: 1
	char bUseMaxDrawCount : 1;  // Offset: 172 Size: 1
	char pad_172_1 : 6;  // Offset: 172 Size: 1
	enum class EOpacitySourceMode OpacitySourceMode;  // Offset: 173 Size: 1
	enum class EEmitterNormalsMode EmitterNormalsMode;  // Offset: 174 Size: 1
	char bOrbitModuleAffectsVelocityAlignment : 1;  // Offset: 175 Size: 1
	char pad_175_1 : 7;  // Offset: 175 Size: 1
	int32_t SubImages_Horizontal;  // Offset: 176 Size: 4
	int32_t SubImages_Vertical;  // Offset: 180 Size: 4
	float RandomImageTime;  // Offset: 184 Size: 4
	int32_t RandomImageChanges;  // Offset: 188 Size: 4
	struct FVector MacroUVPosition;  // Offset: 192 Size: 12
	float MacroUVRadius;  // Offset: 204 Size: 4
	enum class EParticleUVFlipMode UVFlippingMode;  // Offset: 208 Size: 1
	enum class ESubUVBoundingVertexCount BoundingMode;  // Offset: 209 Size: 1
	char bDurationRecalcEachLoop : 1;  // Offset: 210 Size: 1
	char pad_210_1 : 7;  // Offset: 210 Size: 1
	char pad_211[2];  // Offset: 211 Size: 2
	struct FVector NormalsSphereCenter;  // Offset: 212 Size: 12
	float AlphaThreshold;  // Offset: 224 Size: 4
	int32_t EmitterLoops;  // Offset: 228 Size: 4
	struct UTexture2D* CutoutTexture;  // Offset: 232 Size: 8
	int32_t MaxDrawCount;  // Offset: 240 Size: 4
	float EmitterDurationLow;  // Offset: 244 Size: 4
	struct FVector NormalsCylinderDirection;  // Offset: 248 Size: 12
	char pad_260[4];  // Offset: 260 Size: 4
	struct TArray<struct FName> NamedMaterialOverrides;  // Offset: 264 Size: 16
	char pad_280[40];  // Offset: 280 Size: 40



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleRotation Size 96
// Inherited 48 bytes 
class UParticleModuleRotation : public UParticleModuleRotationBase
{

 public: 
	struct FRawDistributionFloat StartRotation;  // Offset: 48 Size: 48



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleRotationOverLifetime Size 104
// Inherited 48 bytes 
class UParticleModuleRotationOverLifetime : public UParticleModuleRotationBase
{

 public: 
	struct FRawDistributionFloat RotationOverLife;  // Offset: 48 Size: 48
	char Scale : 1;  // Offset: 96 Size: 1
	char pad_96_1 : 7;  // Offset: 96 Size: 1
	char pad_97[8];  // Offset: 97 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleRotationRate Size 96
// Inherited 48 bytes 
class UParticleModuleRotationRate : public UParticleModuleRotationRateBase
{

 public: 
	struct FRawDistributionFloat StartRotationRate;  // Offset: 48 Size: 48



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleRotationRate_Seeded Size 128
// Inherited 96 bytes 
class UParticleModuleRotationRate_Seeded : public UParticleModuleRotationRate
{

 public: 
	struct FParticleRandomSeedInfo RandomSeedInfo;  // Offset: 96 Size: 32



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleRotationRateMultiplyLife Size 96
// Inherited 48 bytes 
class UParticleModuleRotationRateMultiplyLife : public UParticleModuleRotationRateBase
{

 public: 
	struct FRawDistributionFloat LifeMultiplier;  // Offset: 48 Size: 48



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleSize Size 120
// Inherited 48 bytes 
class UParticleModuleSize : public UParticleModuleSizeBase
{

 public: 
	struct FRawDistributionVector StartSize;  // Offset: 48 Size: 72



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleSize_Seeded Size 152
// Inherited 120 bytes 
class UParticleModuleSize_Seeded : public UParticleModuleSize
{

 public: 
	struct FParticleRandomSeedInfo RandomSeedInfo;  // Offset: 120 Size: 32



 // Functions 
 public:
}; 
 
 


//Class Engine.TwitterIntegrationBase Size 56
// Inherited 56 bytes 
class UTwitterIntegrationBase : public UPlatformInterfaceBase
{

 public: 



 // Functions 
 public:
	bool TwitterRequest(struct FString URL, struct TArray<struct FString>& ParamKeysAndValues, enum class ETwitterRequestMethod RequestMethod, int32_t AccountIndex); // Function Engine.TwitterIntegrationBase.TwitterRequest
	bool ShowTweetUI(struct FString InitialMessage, struct FString URL, struct FString Picture); // Function Engine.TwitterIntegrationBase.ShowTweetUI
	void Init(); // Function Engine.TwitterIntegrationBase.Init
	int32_t GetNumAccounts(); // Function Engine.TwitterIntegrationBase.GetNumAccounts
	struct FString GetAccountName(int32_t AccountIndex); // Function Engine.TwitterIntegrationBase.GetAccountName
	bool CanShowTweetUI(); // Function Engine.TwitterIntegrationBase.CanShowTweetUI
	bool AuthorizeAccounts(); // Function Engine.TwitterIntegrationBase.AuthorizeAccounts
}; 
 
 


//Class Engine.ParticleModuleSizeMultiplyLife Size 128
// Inherited 48 bytes 
class UParticleModuleSizeMultiplyLife : public UParticleModuleSizeBase
{

 public: 
	struct FRawDistributionVector LifeMultiplier;  // Offset: 48 Size: 72
	char MultiplyX : 1;  // Offset: 120 Size: 1
	char MultiplyY : 1;  // Offset: 120 Size: 1
	char MultiplyZ : 1;  // Offset: 120 Size: 1
	char pad_120_1 : 5;  // Offset: 120 Size: 1
	char pad_121[8];  // Offset: 121 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.PostProcessComponent Size 2032
// Inherited 528 bytes 
class UPostProcessComponent : public USceneComponent
{

 public: 
	struct FPostProcessSettings Settings;  // Offset: 528 Size: 1488
	float Priority;  // Offset: 2016 Size: 4
	float BlendRadius;  // Offset: 2020 Size: 4
	float BlendWeight;  // Offset: 2024 Size: 4
	char bEnabled : 1;  // Offset: 2028 Size: 1
	char bUnbound : 1;  // Offset: 2028 Size: 1
	char pad_2028_1 : 6;  // Offset: 2028 Size: 1
	char pad_2029[4];  // Offset: 2029 Size: 4



 // Functions 
 public:
	void AddOrUpdateBlendable(struct TScriptInterface<IBlendableInterface> InBlendableObject, float InWeight); // Function Engine.PostProcessComponent.AddOrUpdateBlendable
}; 
 
 


//Class Engine.ParticleModuleSizeScaleBySpeed Size 64
// Inherited 48 bytes 
class UParticleModuleSizeScaleBySpeed : public UParticleModuleSizeBase
{

 public: 
	struct FVector2D SpeedScale;  // Offset: 48 Size: 8
	struct FVector2D MaxScale;  // Offset: 56 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleSourceMovement Size 120
// Inherited 48 bytes 
class UParticleModuleSourceMovement : public UParticleModuleLocationBase
{

 public: 
	struct FRawDistributionVector SourceMovementScale;  // Offset: 48 Size: 72



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleSpawnBase Size 56
// Inherited 48 bytes 
class UParticleModuleSpawnBase : public UParticleModule
{

 public: 
	char bProcessSpawnRate : 1;  // Offset: 48 Size: 1
	char bProcessBurstList : 1;  // Offset: 48 Size: 1
	char pad_48_1 : 6;  // Offset: 48 Size: 1
	char pad_49[8];  // Offset: 49 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleSpawnPerUnit Size 120
// Inherited 56 bytes 
class UParticleModuleSpawnPerUnit : public UParticleModuleSpawnBase
{

 public: 
	float UnitScalar;  // Offset: 56 Size: 4
	float MovementTolerance;  // Offset: 60 Size: 4
	struct FRawDistributionFloat SpawnPerUnit;  // Offset: 64 Size: 48
	float MaxFrameDistance;  // Offset: 112 Size: 4
	char bIgnoreSpawnRateWhenMoving : 1;  // Offset: 116 Size: 1
	char bIgnoreMovementAlongX : 1;  // Offset: 116 Size: 1
	char bIgnoreMovementAlongY : 1;  // Offset: 116 Size: 1
	char bIgnoreMovementAlongZ : 1;  // Offset: 116 Size: 1
	char pad_116_1 : 4;  // Offset: 116 Size: 1
	char pad_117[4];  // Offset: 117 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleSubUVBase Size 48
// Inherited 48 bytes 
class UParticleModuleSubUVBase : public UParticleModule
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleSubUV Size 112
// Inherited 48 bytes 
class UParticleModuleSubUV : public UParticleModuleSubUVBase
{

 public: 
	struct USubUVAnimation* Animation;  // Offset: 48 Size: 8
	struct FRawDistributionFloat SubImageIndex;  // Offset: 56 Size: 48
	char bUseRealTime : 1;  // Offset: 104 Size: 1
	char pad_104_1 : 7;  // Offset: 104 Size: 1
	char pad_105[8];  // Offset: 105 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.SoundSubmixBase Size 56
// Inherited 40 bytes 
class USoundSubmixBase : public UObject
{

 public: 
	struct TArray<struct USoundSubmixBase*> ChildSubmixes;  // Offset: 40 Size: 16



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleTrailSource Size 144
// Inherited 48 bytes 
class UParticleModuleTrailSource : public UParticleModuleTrailBase
{

 public: 
	enum class ETrail2SourceMethod SourceMethod;  // Offset: 48 Size: 1
	char pad_49[3];  // Offset: 49 Size: 3
	struct FName SourceName;  // Offset: 52 Size: 8
	char pad_60[4];  // Offset: 60 Size: 4
	struct FRawDistributionFloat SourceStrength;  // Offset: 64 Size: 48
	char bLockSourceStength : 1;  // Offset: 112 Size: 1
	char pad_112_1 : 7;  // Offset: 112 Size: 1
	char pad_113[4];  // Offset: 113 Size: 4
	int32_t SourceOffsetCount;  // Offset: 116 Size: 4
	struct TArray<struct FVector> SourceOffsetDefaults;  // Offset: 120 Size: 16
	enum class EParticleSourceSelectionMethod SelectionMethod;  // Offset: 136 Size: 1
	char pad_137[3];  // Offset: 137 Size: 3
	char bInheritRotation : 1;  // Offset: 140 Size: 1
	char pad_140_1 : 7;  // Offset: 140 Size: 1
	char pad_141[4];  // Offset: 141 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleSystemComponent Size 1744
// Inherited 1136 bytes 
class UParticleSystemComponent : public UFXSystemComponent
{

 public: 
	struct UParticleSystem* Template;  // Offset: 1136 Size: 8
	struct TArray<struct UMaterialInterface*> EmitterMaterials;  // Offset: 1144 Size: 16
	struct TArray<struct USkeletalMeshComponent*> SkelMeshComponents;  // Offset: 1160 Size: 16
	char pad_1176[1];  // Offset: 1176 Size: 1
	char bResetOnDetach : 1;  // Offset: 1177 Size: 1
	char bUpdateOnDedicatedServer : 1;  // Offset: 1177 Size: 1
	char pad_1177_1 : 2;  // Offset: 1177 Size: 1
	char bAllowRecycling : 1;  // Offset: 1177 Size: 1
	char bAutoManageAttachment : 1;  // Offset: 1177 Size: 1
	char bAutoAttachWeldSimulatedBodies : 1;  // Offset: 1177 Size: 1
	char pad_1177_2 : 1;  // Offset: 1177 Size: 1
	char pad_1178_1 : 1;  // Offset: 1178 Size: 1
	char bWarmingUp : 1;  // Offset: 1178 Size: 1
	char bOverrideLODMethod : 1;  // Offset: 1178 Size: 1
	char bSkipUpdateDynamicDataDuringTick : 1;  // Offset: 1178 Size: 1
	char pad_1178_2 : 4;  // Offset: 1178 Size: 1
	char pad_1179[11];  // Offset: 1179 Size: 11
	enum class ParticleSystemLODMethod LODMethod;  // Offset: 1189 Size: 1
	enum class EParticleSignificanceLevel RequiredSignificance;  // Offset: 1190 Size: 1
	char pad_1191[1];  // Offset: 1191 Size: 1
	struct TArray<struct FParticleSysParam> InstanceParameters;  // Offset: 1192 Size: 16
	struct FMulticastInlineDelegate OnParticleSpawn;  // Offset: 1208 Size: 16
	struct FMulticastInlineDelegate OnParticleBurst;  // Offset: 1224 Size: 16
	struct FMulticastInlineDelegate OnParticleDeath;  // Offset: 1240 Size: 16
	struct FMulticastInlineDelegate OnParticleCollide;  // Offset: 1256 Size: 16
	char pad_1272_1 : 7;  // Offset: 1272 Size: 1
	bool bOldPositionValid : 1;  // Offset: 1272 Size: 1
	char pad_1273[3];  // Offset: 1273 Size: 3
	struct FVector OldPosition;  // Offset: 1276 Size: 12
	struct FVector PartSysVelocity;  // Offset: 1288 Size: 12
	float WarmupTime;  // Offset: 1300 Size: 4
	float WarmupTickRate;  // Offset: 1304 Size: 4
	char pad_1308[4];  // Offset: 1308 Size: 4
	float SecondsBeforeInactive;  // Offset: 1312 Size: 4
	char pad_1316[4];  // Offset: 1316 Size: 4
	float MaxTimeBeforeForceUpdateTransform;  // Offset: 1320 Size: 4
	char pad_1324[28];  // Offset: 1324 Size: 28
	struct TArray<struct UParticleSystemReplay*> ReplayClips;  // Offset: 1352 Size: 16
	char pad_1368[8];  // Offset: 1368 Size: 8
	float CustomTimeDilation;  // Offset: 1376 Size: 4
	char pad_1380[84];  // Offset: 1380 Size: 84
	struct TWeakObjectPtr<USceneComponent> AutoAttachParent;  // Offset: 1464 Size: 8
	struct FName AutoAttachSocketName;  // Offset: 1472 Size: 8
	enum class EAttachmentRule AutoAttachLocationRule;  // Offset: 1480 Size: 1
	enum class EAttachmentRule AutoAttachRotationRule;  // Offset: 1481 Size: 1
	enum class EAttachmentRule AutoAttachScaleRule;  // Offset: 1482 Size: 1
	char pad_1483[45];  // Offset: 1483 Size: 45
	struct FMulticastInlineDelegate OnSystemFinished;  // Offset: 1528 Size: 16
	char pad_1544[200];  // Offset: 1544 Size: 200



 // Functions 
 public:
	void SetTrailSourceData(struct FName InFirstSocketName, struct FName InSecondSocketName, enum class ETrailWidthMode InWidthMode, float InWidth); // Function Engine.ParticleSystemComponent.SetTrailSourceData
	void SetTemplate(struct UParticleSystem* NewTemplate); // Function Engine.ParticleSystemComponent.SetTemplate
	void SetMaterialParameter(struct FName ParameterName, struct UMaterialInterface* Param); // Function Engine.ParticleSystemComponent.SetMaterialParameter
	void SetBeamTargetTangent(int32_t EmitterIndex, struct FVector NewTangentPoint, int32_t TargetIndex); // Function Engine.ParticleSystemComponent.SetBeamTargetTangent
	void SetBeamTargetStrength(int32_t EmitterIndex, float NewTargetStrength, int32_t TargetIndex); // Function Engine.ParticleSystemComponent.SetBeamTargetStrength
	void SetBeamTargetPoint(int32_t EmitterIndex, struct FVector NewTargetPoint, int32_t TargetIndex); // Function Engine.ParticleSystemComponent.SetBeamTargetPoint
	void SetBeamSourceTangent(int32_t EmitterIndex, struct FVector NewTangentPoint, int32_t SourceIndex); // Function Engine.ParticleSystemComponent.SetBeamSourceTangent
	void SetBeamSourceStrength(int32_t EmitterIndex, float NewSourceStrength, int32_t SourceIndex); // Function Engine.ParticleSystemComponent.SetBeamSourceStrength
	void SetBeamSourcePoint(int32_t EmitterIndex, struct FVector NewSourcePoint, int32_t SourceIndex); // Function Engine.ParticleSystemComponent.SetBeamSourcePoint
	void SetBeamEndPoint(int32_t EmitterIndex, struct FVector NewEndPoint); // Function Engine.ParticleSystemComponent.SetBeamEndPoint
	void SetAutoAttachParams(struct USceneComponent* Parent, struct FName SocketName, enum class EAttachLocation LocationType); // Function Engine.ParticleSystemComponent.SetAutoAttachParams
	int32_t GetNumActiveParticles(); // Function Engine.ParticleSystemComponent.GetNumActiveParticles
	struct UMaterialInterface* GetNamedMaterial(struct FName InName); // Function Engine.ParticleSystemComponent.GetNamedMaterial
	bool GetBeamTargetTangent(int32_t EmitterIndex, int32_t TargetIndex, struct FVector& OutTangentPoint); // Function Engine.ParticleSystemComponent.GetBeamTargetTangent
	bool GetBeamTargetStrength(int32_t EmitterIndex, int32_t TargetIndex, float& OutTargetStrength); // Function Engine.ParticleSystemComponent.GetBeamTargetStrength
	bool GetBeamTargetPoint(int32_t EmitterIndex, int32_t TargetIndex, struct FVector& OutTargetPoint); // Function Engine.ParticleSystemComponent.GetBeamTargetPoint
	bool GetBeamSourceTangent(int32_t EmitterIndex, int32_t SourceIndex, struct FVector& OutTangentPoint); // Function Engine.ParticleSystemComponent.GetBeamSourceTangent
	bool GetBeamSourceStrength(int32_t EmitterIndex, int32_t SourceIndex, float& OutSourceStrength); // Function Engine.ParticleSystemComponent.GetBeamSourceStrength
	bool GetBeamSourcePoint(int32_t EmitterIndex, int32_t SourceIndex, struct FVector& OutSourcePoint); // Function Engine.ParticleSystemComponent.GetBeamSourcePoint
	bool GetBeamEndPoint(int32_t EmitterIndex, struct FVector& OutEndPoint); // Function Engine.ParticleSystemComponent.GetBeamEndPoint
	void GenerateParticleEvent(struct FName InEventName, float InEmitterTime, struct FVector InLocation, struct FVector InDirection, struct FVector InVelocity); // Function Engine.ParticleSystemComponent.GenerateParticleEvent
	void EndTrails(); // Function Engine.ParticleSystemComponent.EndTrails
	struct UMaterialInstanceDynamic* CreateNamedDynamicMaterialInstance(struct FName InName, struct UMaterialInterface* SourceMaterial); // Function Engine.ParticleSystemComponent.CreateNamedDynamicMaterialInstance
	void BeginTrails(struct FName InFirstSocketName, struct FName InSecondSocketName, enum class ETrailWidthMode InWidthMode, float InWidth); // Function Engine.ParticleSystemComponent.BeginTrails
}; 
 
 


//Class Engine.ReporterBase Size 48
// Inherited 40 bytes 
class UReporterBase : public UObject
{

 public: 
	char pad_40[8];  // Offset: 40 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleTypeDataBase Size 48
// Inherited 48 bytes 
class UParticleModuleTypeDataBase : public UParticleModule
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleTypeDataAnimTrail Size 72
// Inherited 48 bytes 
class UParticleModuleTypeDataAnimTrail : public UParticleModuleTypeDataBase
{

 public: 
	char bDeadTrailsOnDeactivate : 1;  // Offset: 48 Size: 1
	char bEnablePreviousTangentRecalculation : 1;  // Offset: 48 Size: 1
	char bTangentRecalculationEveryFrame : 1;  // Offset: 48 Size: 1
	char pad_48_1 : 5;  // Offset: 48 Size: 1
	char pad_49[4];  // Offset: 49 Size: 4
	float TilingDistance;  // Offset: 52 Size: 4
	float DistanceTessellationStepSize;  // Offset: 56 Size: 4
	float TangentTessellationStepSize;  // Offset: 60 Size: 4
	float WidthTessellationStepSize;  // Offset: 64 Size: 4
	char pad_68[4];  // Offset: 68 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleTypeDataGpu Size 1056
// Inherited 48 bytes 
class UParticleModuleTypeDataGpu : public UParticleModuleTypeDataBase
{

 public: 
	struct FGPUSpriteEmitterInfo EmitterInfo;  // Offset: 48 Size: 640
	struct FGPUSpriteResourceData ResourceData;  // Offset: 688 Size: 352
	float CameraMotionBlurAmount;  // Offset: 1040 Size: 4
	char bClearExistingParticlesOnInit : 1;  // Offset: 1044 Size: 1
	char pad_1044_1 : 7;  // Offset: 1044 Size: 1
	char pad_1045[12];  // Offset: 1045 Size: 12



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleVectorFieldGlobal Size 64
// Inherited 48 bytes 
class UParticleModuleVectorFieldGlobal : public UParticleModuleVectorFieldBase
{

 public: 
	char bOverrideGlobalVectorFieldTightness : 1;  // Offset: 48 Size: 1
	char pad_48_1 : 7;  // Offset: 48 Size: 1
	char pad_49[4];  // Offset: 49 Size: 4
	float GlobalVectorFieldScale;  // Offset: 52 Size: 4
	float GlobalVectorFieldTightness;  // Offset: 56 Size: 4
	char pad_60[4];  // Offset: 60 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleVectorFieldRotation Size 72
// Inherited 48 bytes 
class UParticleModuleVectorFieldRotation : public UParticleModuleVectorFieldBase
{

 public: 
	struct FVector MinInitialRotation;  // Offset: 48 Size: 12
	struct FVector MaxInitialRotation;  // Offset: 60 Size: 12



 // Functions 
 public:
}; 
 
 


//Class Engine.SoundNodeRandom Size 120
// Inherited 72 bytes 
class USoundNodeRandom : public USoundNode
{

 public: 
	struct TArray<float> Weights;  // Offset: 72 Size: 16
	struct TArray<bool> HasBeenUsed;  // Offset: 88 Size: 16
	int32_t NumRandomUsed;  // Offset: 104 Size: 4
	int32_t PreselectAtLevelLoad;  // Offset: 108 Size: 4
	char bShouldExcludeFromBranchCulling : 1;  // Offset: 112 Size: 1
	char bSoundCueExcludedFromBranchCulling : 1;  // Offset: 112 Size: 1
	char bRandomizeWithoutReplacement : 1;  // Offset: 112 Size: 1
	char pad_112_1 : 5;  // Offset: 112 Size: 1
	char pad_113[8];  // Offset: 113 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleVelocityBase Size 56
// Inherited 48 bytes 
class UParticleModuleVelocityBase : public UParticleModule
{

 public: 
	char bInWorldSpace : 1;  // Offset: 48 Size: 1
	char bApplyOwnerScale : 1;  // Offset: 48 Size: 1
	char pad_48_1 : 6;  // Offset: 48 Size: 1
	char pad_49[8];  // Offset: 49 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleVelocity Size 176
// Inherited 56 bytes 
class UParticleModuleVelocity : public UParticleModuleVelocityBase
{

 public: 
	struct FRawDistributionVector StartVelocity;  // Offset: 56 Size: 72
	struct FRawDistributionFloat StartVelocityRadial;  // Offset: 128 Size: 48



 // Functions 
 public:
}; 
 
 


//Class Engine.ParticleModuleVelocityInheritParent Size 128
// Inherited 56 bytes 
class UParticleModuleVelocityInheritParent : public UParticleModuleVelocityBase
{

 public: 
	struct FRawDistributionVector Scale;  // Offset: 56 Size: 72



 // Functions 
 public:
}; 
 
 


//Class Engine.PhysicalAnimationComponent Size 240
// Inherited 176 bytes 
class UPhysicalAnimationComponent : public UActorComponent
{

 public: 
	float StrengthMultiplyer;  // Offset: 176 Size: 4
	char pad_180[4];  // Offset: 180 Size: 4
	struct USkeletalMeshComponent* SkeletalMeshComponent;  // Offset: 184 Size: 8
	char pad_192[48];  // Offset: 192 Size: 48



 // Functions 
 public:
	void SetStrengthMultiplyer(float InStrengthMultiplyer); // Function Engine.PhysicalAnimationComponent.SetStrengthMultiplyer
	void SetSkeletalMeshComponent(struct USkeletalMeshComponent* InSkeletalMeshComponent); // Function Engine.PhysicalAnimationComponent.SetSkeletalMeshComponent
	struct FTransform GetBodyTargetTransform(struct FName BodyName); // Function Engine.PhysicalAnimationComponent.GetBodyTargetTransform
	void ApplyPhysicalAnimationSettingsBelow(struct FName BodyName, struct FPhysicalAnimationData& PhysicalAnimationData, bool bIncludeSelf); // Function Engine.PhysicalAnimationComponent.ApplyPhysicalAnimationSettingsBelow
	void ApplyPhysicalAnimationSettings(struct FName BodyName, struct FPhysicalAnimationData& PhysicalAnimationData); // Function Engine.PhysicalAnimationComponent.ApplyPhysicalAnimationSettings
	void ApplyPhysicalAnimationProfileBelow(struct FName BodyName, struct FName ProfileName, bool bIncludeSelf, bool bClearNotFound); // Function Engine.PhysicalAnimationComponent.ApplyPhysicalAnimationProfileBelow
}; 
 
 


//Class Engine.PhysicalMaterialMask Size 48
// Inherited 40 bytes 
class UPhysicalMaterialMask : public UObject
{

 public: 
	int32_t UVChannelIndex;  // Offset: 40 Size: 4
	enum class TextureAddress AddressX;  // Offset: 44 Size: 1
	enum class TextureAddress AddressY;  // Offset: 45 Size: 1
	char pad_46[2];  // Offset: 46 Size: 2



 // Functions 
 public:
}; 
 
 


//Class Engine.SkeletalBodySetup Size 696
// Inherited 672 bytes 
class USkeletalBodySetup : public UBodySetup
{

 public: 
	char pad_672_1 : 7;  // Offset: 672 Size: 1
	bool bSkipScaleFromAnimation : 1;  // Offset: 672 Size: 1
	char pad_673[7];  // Offset: 673 Size: 7
	struct TArray<struct FPhysicalAnimationProfile> PhysicalAnimationData;  // Offset: 680 Size: 16



 // Functions 
 public:
}; 
 
 


//Class Engine.SoundNodeWavePlayer Size 136
// Inherited 72 bytes 
class USoundNodeWavePlayer : public USoundNodeAssetReferencer
{

 public: 
	struct TSoftObjectPtr<USoundWave> SoundWaveAssetPtr;  // Offset: 72 Size: 40
	struct USoundWave* SoundWave;  // Offset: 112 Size: 8
	char pad_120[8];  // Offset: 120 Size: 8
	char bLooping : 1;  // Offset: 128 Size: 1
	char pad_128_1 : 7;  // Offset: 128 Size: 1
	char pad_129[8];  // Offset: 129 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.SkeletalMeshLODSettings Size 80
// Inherited 48 bytes 
class USkeletalMeshLODSettings : public UDataAsset
{

 public: 
	struct FPerPlatformInt MinLOD;  // Offset: 48 Size: 4
	struct FPerPlatformBool DisableBelowMinLodStripping;  // Offset: 52 Size: 1
	char pad_53_1 : 7;  // Offset: 53 Size: 1
	bool bOverrideLODStreamingSettings : 1;  // Offset: 53 Size: 1
	struct FPerPlatformBool bSupportLODStreaming;  // Offset: 54 Size: 1
	char pad_55[1];  // Offset: 55 Size: 1
	struct FPerPlatformInt MaxNumStreamedLODs;  // Offset: 56 Size: 4
	struct FPerPlatformInt MaxNumOptionalLODs;  // Offset: 60 Size: 4
	struct TArray<struct FSkeletalMeshLODGroupSettings> LODGroups;  // Offset: 64 Size: 16



 // Functions 
 public:
}; 
 
 


//Class Engine.PhysicsCollisionHandler Size 64
// Inherited 40 bytes 
class UPhysicsCollisionHandler : public UObject
{

 public: 
	float ImpactThreshold;  // Offset: 40 Size: 4
	float ImpactReFireDelay;  // Offset: 44 Size: 4
	struct USoundBase* DefaultImpactSound;  // Offset: 48 Size: 8
	float LastImpactSoundTime;  // Offset: 56 Size: 4
	char pad_60[4];  // Offset: 60 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.RigidBodyBase Size 544
// Inherited 544 bytes 
class ARigidBodyBase : public AActor
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.PhysicsConstraintTemplate Size 792
// Inherited 40 bytes 
class UPhysicsConstraintTemplate : public UObject
{

 public: 
	struct FConstraintInstance DefaultInstance;  // Offset: 40 Size: 456
	struct TArray<struct FPhysicsConstraintProfileHandle> ProfileHandles;  // Offset: 496 Size: 16
	struct FConstraintProfileProperties DefaultProfile;  // Offset: 512 Size: 276
	char pad_788[4];  // Offset: 788 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.PhysicsHandleComponent Size 352
// Inherited 176 bytes 
class UPhysicsHandleComponent : public UActorComponent
{

 public: 
	struct UPrimitiveComponent* GrabbedComponent;  // Offset: 176 Size: 8
	char pad_184[8];  // Offset: 184 Size: 8
	char pad_192_1 : 1;  // Offset: 192 Size: 1
	char bSoftAngularConstraint : 1;  // Offset: 192 Size: 1
	char bSoftLinearConstraint : 1;  // Offset: 192 Size: 1
	char bInterpolateTarget : 1;  // Offset: 192 Size: 1
	char pad_192_2 : 4;  // Offset: 192 Size: 1
	char pad_193[4];  // Offset: 193 Size: 4
	float LinearDamping;  // Offset: 196 Size: 4
	float LinearStiffness;  // Offset: 200 Size: 4
	float AngularDamping;  // Offset: 204 Size: 4
	float AngularStiffness;  // Offset: 208 Size: 4
	char pad_212[108];  // Offset: 212 Size: 108
	float InterpolationSpeed;  // Offset: 320 Size: 4
	char pad_324[28];  // Offset: 324 Size: 28



 // Functions 
 public:
	void SetTargetRotation(struct FRotator NewRotation); // Function Engine.PhysicsHandleComponent.SetTargetRotation
	void SetTargetLocationAndRotation(struct FVector NewLocation, struct FRotator NewRotation); // Function Engine.PhysicsHandleComponent.SetTargetLocationAndRotation
	void SetTargetLocation(struct FVector NewLocation); // Function Engine.PhysicsHandleComponent.SetTargetLocation
	void SetLinearStiffness(float NewLinearStiffness); // Function Engine.PhysicsHandleComponent.SetLinearStiffness
	void SetLinearDamping(float NewLinearDamping); // Function Engine.PhysicsHandleComponent.SetLinearDamping
	void SetInterpolationSpeed(float NewInterpolationSpeed); // Function Engine.PhysicsHandleComponent.SetInterpolationSpeed
	void SetAngularStiffness(float NewAngularStiffness); // Function Engine.PhysicsHandleComponent.SetAngularStiffness
	void SetAngularDamping(float NewAngularDamping); // Function Engine.PhysicsHandleComponent.SetAngularDamping
	void ReleaseComponent(); // Function Engine.PhysicsHandleComponent.ReleaseComponent
	void GrabComponentAtLocationWithRotation(struct UPrimitiveComponent* Component, struct FName InBoneName, struct FVector Location, struct FRotator Rotation); // Function Engine.PhysicsHandleComponent.GrabComponentAtLocationWithRotation
	void GrabComponentAtLocation(struct UPrimitiveComponent* Component, struct FName InBoneName, struct FVector GrabLocation); // Function Engine.PhysicsHandleComponent.GrabComponentAtLocation
	void GrabComponent(struct UPrimitiveComponent* Component, struct FName InBoneName, struct FVector GrabLocation, bool bConstrainRotation); // Function Engine.PhysicsHandleComponent.GrabComponent
	void GetTargetLocationAndRotation(struct FVector& TargetLocation, struct FRotator& TargetRotation); // Function Engine.PhysicsHandleComponent.GetTargetLocationAndRotation
	struct UPrimitiveComponent* GetGrabbedComponent(); // Function Engine.PhysicsHandleComponent.GetGrabbedComponent
}; 
 
 


//Class Engine.PhysicsSettings Size 416
// Inherited 224 bytes 
class UPhysicsSettings : public UPhysicsSettingsCore
{

 public: 
	struct FRigidBodyErrorCorrection PhysicErrorCorrection;  // Offset: 224 Size: 52
	enum class ESettingsLockedAxis LockedAxis;  // Offset: 276 Size: 1
	enum class ESettingsDOF DefaultDegreesOfFreedom;  // Offset: 277 Size: 1
	char pad_278_1 : 7;  // Offset: 278 Size: 1
	bool bSuppressFaceRemapTable : 1;  // Offset: 278 Size: 1
	char pad_279_1 : 7;  // Offset: 279 Size: 1
	bool bSupportUVFromHitResults : 1;  // Offset: 279 Size: 1
	char pad_280_1 : 7;  // Offset: 280 Size: 1
	bool bDisableActiveActors : 1;  // Offset: 280 Size: 1
	char pad_281_1 : 7;  // Offset: 281 Size: 1
	bool bDisableKinematicStaticPairs : 1;  // Offset: 281 Size: 1
	char pad_282_1 : 7;  // Offset: 282 Size: 1
	bool bDisableKinematicKinematicPairs : 1;  // Offset: 282 Size: 1
	char pad_283_1 : 7;  // Offset: 283 Size: 1
	bool bDisableCCD : 1;  // Offset: 283 Size: 1
	char pad_284_1 : 7;  // Offset: 284 Size: 1
	bool bEnableEnhancedDeterminism : 1;  // Offset: 284 Size: 1
	char pad_285[3];  // Offset: 285 Size: 3
	float AnimPhysicsMinDeltaTime;  // Offset: 288 Size: 4
	char pad_292_1 : 7;  // Offset: 292 Size: 1
	bool bSimulateAnimPhysicsAfterReset : 1;  // Offset: 292 Size: 1
	char pad_293[3];  // Offset: 293 Size: 3
	float MaxPhysicsDeltaTime;  // Offset: 296 Size: 4
	char pad_300_1 : 7;  // Offset: 300 Size: 1
	bool bSubstepping : 1;  // Offset: 300 Size: 1
	char pad_301_1 : 7;  // Offset: 301 Size: 1
	bool bSubsteppingAsync : 1;  // Offset: 301 Size: 1
	char pad_302[2];  // Offset: 302 Size: 2
	float MaxSubstepDeltaTime;  // Offset: 304 Size: 4
	int32_t MaxSubsteps;  // Offset: 308 Size: 4
	float SyncSceneSmoothingFactor;  // Offset: 312 Size: 4
	float InitialAverageFrameRate;  // Offset: 316 Size: 4
	int32_t PhysXTreeRebuildRate;  // Offset: 320 Size: 4
	char pad_324[4];  // Offset: 324 Size: 4
	struct TArray<struct FPhysicalSurfaceName> PhysicalSurfaces;  // Offset: 328 Size: 16
	struct FBroadphaseSettings DefaultBroadphaseSettings;  // Offset: 344 Size: 64
	float MinDeltaVelocityForHitEvents;  // Offset: 408 Size: 4
	struct FChaosPhysicsSettings ChaosSettings;  // Offset: 412 Size: 3
	char pad_415[1];  // Offset: 415 Size: 1



 // Functions 
 public:
}; 
 
 


//Class Engine.PhysicsThruster Size 552
// Inherited 544 bytes 
class APhysicsThruster : public ARigidBodyBase
{

 public: 
	struct UPhysicsThrusterComponent* ThrusterComponent;  // Offset: 544 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.PhysicsThrusterComponent Size 528
// Inherited 528 bytes 
class UPhysicsThrusterComponent : public USceneComponent
{

 public: 
	float ThrustStrength;  // Offset: 520 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.PlanarReflectionComponent Size 944
// Inherited 720 bytes 
class UPlanarReflectionComponent : public USceneCaptureComponent
{

 public: 
	struct UBoxComponent* PreviewBox;  // Offset: 712 Size: 8
	float NormalDistortionStrength;  // Offset: 720 Size: 4
	float PrefilterRoughness;  // Offset: 724 Size: 4
	float PrefilterRoughnessDistance;  // Offset: 728 Size: 4
	int32_t ScreenPercentage;  // Offset: 732 Size: 4
	float ExtraFOV;  // Offset: 736 Size: 4
	float DistanceFromPlaneFadeStart;  // Offset: 740 Size: 4
	float DistanceFromPlaneFadeEnd;  // Offset: 744 Size: 4
	float DistanceFromPlaneFadeoutStart;  // Offset: 748 Size: 4
	float DistanceFromPlaneFadeoutEnd;  // Offset: 752 Size: 4
	float AngleFromPlaneFadeStart;  // Offset: 756 Size: 4
	float AngleFromPlaneFadeEnd;  // Offset: 760 Size: 4
	char pad_772_1 : 7;  // Offset: 772 Size: 1
	bool bShowPreviewPlane : 1;  // Offset: 764 Size: 1
	char pad_773_1 : 7;  // Offset: 773 Size: 1
	bool bRenderSceneTwoSided : 1;  // Offset: 765 Size: 1
	char pad_774[170];  // Offset: 774 Size: 170



 // Functions 
 public:
}; 
 
 


//Class Engine.PlaneReflectionCapture Size 552
// Inherited 552 bytes 
class APlaneReflectionCapture : public AReflectionCapture
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.PlaneReflectionCaptureComponent Size 784
// Inherited 752 bytes 
class UPlaneReflectionCaptureComponent : public UReflectionCaptureComponent
{

 public: 
	float InfluenceRadiusScale;  // Offset: 752 Size: 4
	char pad_756[4];  // Offset: 756 Size: 4
	struct UDrawSphereComponent* PreviewInfluenceRadius;  // Offset: 760 Size: 8
	struct UBoxComponent* PreviewCaptureBox;  // Offset: 768 Size: 8
	char pad_776[8];  // Offset: 776 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.SoundNode Size 72
// Inherited 40 bytes 
class USoundNode : public UObject
{

 public: 
	struct TArray<struct USoundNode*> ChildNodes;  // Offset: 40 Size: 16
	char pad_56[16];  // Offset: 56 Size: 16



 // Functions 
 public:
}; 
 
 


//Class Engine.PlayerCameraManager Size 11024
// Inherited 544 bytes 
class APlayerCameraManager : public AActor
{

 public: 
	struct APlayerController* PCOwner;  // Offset: 544 Size: 8
	struct USceneComponent* TransformComponent;  // Offset: 552 Size: 8
	char pad_560[8];  // Offset: 560 Size: 8
	float DefaultFOV;  // Offset: 568 Size: 4
	char pad_572[4];  // Offset: 572 Size: 4
	float DefaultOrthoWidth;  // Offset: 576 Size: 4
	char pad_580[4];  // Offset: 580 Size: 4
	float DefaultAspectRatio;  // Offset: 584 Size: 4
	char pad_588[68];  // Offset: 588 Size: 68
	struct FCameraCacheEntry CameraCache;  // Offset: 656 Size: 1664
	struct FCameraCacheEntry LastFrameCameraCache;  // Offset: 2320 Size: 1664
	struct FTViewTarget ViewTarget;  // Offset: 3984 Size: 1680
	struct FTViewTarget PendingViewTarget;  // Offset: 5664 Size: 1680
	char pad_7344[48];  // Offset: 7344 Size: 48
	struct FCameraCacheEntry CameraCachePrivate;  // Offset: 7392 Size: 1664
	struct FCameraCacheEntry LastFrameCameraCachePrivate;  // Offset: 9056 Size: 1664
	struct TArray<struct UCameraModifier*> ModifierList;  // Offset: 10720 Size: 16
	struct TArray<UCameraModifier*> DefaultModifiers;  // Offset: 10736 Size: 16
	float FreeCamDistance;  // Offset: 10752 Size: 4
	struct FVector FreeCamOffset;  // Offset: 10756 Size: 12
	struct FVector ViewTargetOffset;  // Offset: 10768 Size: 12
	char pad_10780[4];  // Offset: 10780 Size: 4
	struct FMulticastInlineDelegate OnAudioFadeChangeEvent;  // Offset: 10784 Size: 16
	char pad_10800[16];  // Offset: 10800 Size: 16
	struct TArray<struct AEmitterCameraLensEffectBase*> CameraLensEffects;  // Offset: 10816 Size: 16
	struct UCameraModifier_CameraShake* CachedCameraShakeMod;  // Offset: 10832 Size: 8
	struct UCameraAnimInst* AnimInstPool[8];  // Offset: 10840 Size: 64
	struct TArray<struct FPostProcessSettings> PostProcessBlendCache;  // Offset: 10904 Size: 16
	char pad_10920[16];  // Offset: 10920 Size: 16
	struct TArray<struct UCameraAnimInst*> ActiveAnims;  // Offset: 10936 Size: 16
	struct TArray<struct UCameraAnimInst*> FreeAnims;  // Offset: 10952 Size: 16
	struct ACameraActor* AnimCameraActor;  // Offset: 10968 Size: 8
	char bIsOrthographic : 1;  // Offset: 10976 Size: 1
	char bDefaultConstrainAspectRatio : 1;  // Offset: 10976 Size: 1
	char pad_10976_1 : 4;  // Offset: 10976 Size: 1
	char bClientSimulatingViewTarget : 1;  // Offset: 10976 Size: 1
	char bUseClientSideCameraUpdates : 1;  // Offset: 10976 Size: 1
	char pad_10977_1 : 2;  // Offset: 10977 Size: 1
	char bGameCameraCutThisFrame : 1;  // Offset: 10977 Size: 1
	char pad_10977_2 : 5;  // Offset: 10977 Size: 1
	char pad_10978[3];  // Offset: 10978 Size: 3
	float ViewPitchMin;  // Offset: 10980 Size: 4
	float ViewPitchMax;  // Offset: 10984 Size: 4
	float ViewYawMin;  // Offset: 10988 Size: 4
	float ViewYawMax;  // Offset: 10992 Size: 4
	float ViewRollMin;  // Offset: 10996 Size: 4
	float ViewRollMax;  // Offset: 11000 Size: 4
	char pad_11004[4];  // Offset: 11004 Size: 4
	float ServerUpdateCameraTimeout;  // Offset: 11008 Size: 4
	char pad_11012[12];  // Offset: 11012 Size: 12



 // Functions 
 public:
	void SwapPendingViewTargetWhenUsingClientSideCameraUpdates(); // Function Engine.PlayerCameraManager.SwapPendingViewTargetWhenUsingClientSideCameraUpdates
	void StopCameraShake(struct UCameraShakeBase* ShakeInstance, bool bImmediately); // Function Engine.PlayerCameraManager.StopCameraShake
	void StopCameraFade(); // Function Engine.PlayerCameraManager.StopCameraFade
	void StopCameraAnimInst(struct UCameraAnimInst* AnimInst, bool bImmediate); // Function Engine.PlayerCameraManager.StopCameraAnimInst
	void StopAllInstancesOfCameraShakeFromSource(UCameraShakeBase* Shake, struct UCameraShakeSourceComponent* SourceComponent, bool bImmediately); // Function Engine.PlayerCameraManager.StopAllInstancesOfCameraShakeFromSource
	void StopAllInstancesOfCameraShake(UCameraShakeBase* Shake, bool bImmediately); // Function Engine.PlayerCameraManager.StopAllInstancesOfCameraShake
	void StopAllInstancesOfCameraAnim(struct UCameraAnim* Anim, bool bImmediate); // Function Engine.PlayerCameraManager.StopAllInstancesOfCameraAnim
	void StopAllCameraShakesFromSource(struct UCameraShakeSourceComponent* SourceComponent, bool bImmediately); // Function Engine.PlayerCameraManager.StopAllCameraShakesFromSource
	void StopAllCameraShakes(bool bImmediately); // Function Engine.PlayerCameraManager.StopAllCameraShakes
	void StopAllCameraAnims(bool bImmediate); // Function Engine.PlayerCameraManager.StopAllCameraAnims
	struct UCameraShakeBase* StartCameraShakeFromSource(UCameraShakeBase* ShakeClass, struct UCameraShakeSourceComponent* SourceComponent, float Scale, enum class ECameraShakePlaySpace PlaySpace, struct FRotator UserPlaySpaceRot); // Function Engine.PlayerCameraManager.StartCameraShakeFromSource
	struct UCameraShakeBase* StartCameraShake(UCameraShakeBase* ShakeClass, float Scale, enum class ECameraShakePlaySpace PlaySpace, struct FRotator UserPlaySpaceRot); // Function Engine.PlayerCameraManager.StartCameraShake
	void StartCameraFade(float FromAlpha, float ToAlpha, float Duration, struct FLinearColor Color, bool bShouldFadeAudio, bool bHoldWhenFinished); // Function Engine.PlayerCameraManager.StartCameraFade
	void SetManualCameraFade(float InFadeAmount, struct FLinearColor Color, bool bInFadeAudio); // Function Engine.PlayerCameraManager.SetManualCameraFade
	void SetGameCameraCutThisFrame(); // Function Engine.PlayerCameraManager.SetGameCameraCutThisFrame
	bool RemoveCameraModifier(struct UCameraModifier* ModifierToRemove); // Function Engine.PlayerCameraManager.RemoveCameraModifier
	void RemoveCameraLensEffect(struct AEmitterCameraLensEffectBase* Emitter); // Function Engine.PlayerCameraManager.RemoveCameraLensEffect
	struct UCameraAnimInst* PlayCameraAnim(struct UCameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, enum class ECameraShakePlaySpace PlaySpace, struct FRotator UserPlaySpaceRot); // Function Engine.PlayerCameraManager.PlayCameraAnim
	void PhotographyCameraModify(struct FVector NewCameraLocation, struct FVector PreviousCameraLocation, struct FVector OriginalCameraLocation, struct FVector& ResultCameraLocation); // Function Engine.PlayerCameraManager.PhotographyCameraModify
	void OnPhotographySessionStart(); // Function Engine.PlayerCameraManager.OnPhotographySessionStart
	void OnPhotographySessionEnd(); // Function Engine.PlayerCameraManager.OnPhotographySessionEnd
	void OnPhotographyMultiPartCaptureStart(); // Function Engine.PlayerCameraManager.OnPhotographyMultiPartCaptureStart
	void OnPhotographyMultiPartCaptureEnd(); // Function Engine.PlayerCameraManager.OnPhotographyMultiPartCaptureEnd
	struct APlayerController* GetOwningPlayerController(); // Function Engine.PlayerCameraManager.GetOwningPlayerController
	float GetFOVAngle(); // Function Engine.PlayerCameraManager.GetFOVAngle
	struct FRotator GetCameraRotation(); // Function Engine.PlayerCameraManager.GetCameraRotation
	struct FVector GetCameraLocation(); // Function Engine.PlayerCameraManager.GetCameraLocation
	struct UCameraModifier* FindCameraModifierByClass(UCameraModifier* ModifierClass); // Function Engine.PlayerCameraManager.FindCameraModifierByClass
	void ClearCameraLensEffects(); // Function Engine.PlayerCameraManager.ClearCameraLensEffects
	bool BlueprintUpdateCamera(struct AActor* CameraTarget, struct FVector& NewCameraLocation, struct FRotator& NewCameraRotation, float& NewCameraFOV); // Function Engine.PlayerCameraManager.BlueprintUpdateCamera
	struct UCameraModifier* AddNewCameraModifier(UCameraModifier* ModifierClass); // Function Engine.PlayerCameraManager.AddNewCameraModifier
	struct AEmitterCameraLensEffectBase* AddCameraLensEffect(AEmitterCameraLensEffectBase* LensEffectEmitterClass); // Function Engine.PlayerCameraManager.AddCameraLensEffect
}; 
 
 


//Class Engine.PoseableMeshComponent Size 2112
// Inherited 1760 bytes 
class UPoseableMeshComponent : public USkinnedMeshComponent
{

 public: 
	char pad_1760[352];  // Offset: 1760 Size: 352



 // Functions 
 public:
	void SetBoneTransformByName(struct FName BoneName, struct FTransform& InTransform, enum class EBoneSpaces BoneSpace); // Function Engine.PoseableMeshComponent.SetBoneTransformByName
	void SetBoneScaleByName(struct FName BoneName, struct FVector InScale3D, enum class EBoneSpaces BoneSpace); // Function Engine.PoseableMeshComponent.SetBoneScaleByName
	void SetBoneRotationByName(struct FName BoneName, struct FRotator InRotation, enum class EBoneSpaces BoneSpace); // Function Engine.PoseableMeshComponent.SetBoneRotationByName
	void SetBoneLocationByName(struct FName BoneName, struct FVector InLocation, enum class EBoneSpaces BoneSpace); // Function Engine.PoseableMeshComponent.SetBoneLocationByName
	void ResetBoneTransformByName(struct FName BoneName); // Function Engine.PoseableMeshComponent.ResetBoneTransformByName
	struct FTransform GetBoneTransformByName(struct FName BoneName, enum class EBoneSpaces BoneSpace); // Function Engine.PoseableMeshComponent.GetBoneTransformByName
	struct FVector GetBoneScaleByName(struct FName BoneName, enum class EBoneSpaces BoneSpace); // Function Engine.PoseableMeshComponent.GetBoneScaleByName
	struct FRotator GetBoneRotationByName(struct FName BoneName, enum class EBoneSpaces BoneSpace); // Function Engine.PoseableMeshComponent.GetBoneRotationByName
	struct FVector GetBoneLocationByName(struct FName BoneName, enum class EBoneSpaces BoneSpace); // Function Engine.PoseableMeshComponent.GetBoneLocationByName
	void CopyPoseFromSkeletalComponent(struct USkeletalMeshComponent* InComponentToCopy); // Function Engine.PoseableMeshComponent.CopyPoseFromSkeletalComponent
}; 
 
 


//Class Engine.PoseAsset Size 304
// Inherited 128 bytes 
class UPoseAsset : public UAnimationAsset
{

 public: 
	struct FPoseDataContainer PoseContainer;  // Offset: 128 Size: 144
	char pad_272_1 : 7;  // Offset: 272 Size: 1
	bool bAdditivePose : 1;  // Offset: 272 Size: 1
	char pad_273[3];  // Offset: 273 Size: 3
	int32_t BasePoseIndex;  // Offset: 276 Size: 4
	struct FName RetargetSource;  // Offset: 280 Size: 8
	struct TArray<struct FTransform> RetargetSourceAssetReferencePose;  // Offset: 288 Size: 16



 // Functions 
 public:
}; 
 
 


//Class Engine.PoseWatch Size 56
// Inherited 40 bytes 
class UPoseWatch : public UObject
{

 public: 
	struct UEdGraphNode* Node;  // Offset: 40 Size: 8
	struct FColor PoseWatchColour;  // Offset: 48 Size: 4
	char pad_52[4];  // Offset: 52 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.PrecomputedVisibilityVolume Size 600
// Inherited 600 bytes 
class APrecomputedVisibilityVolume : public AVolume
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.PreviewCollectionInterface Size 40
// Inherited 40 bytes 
class UPreviewCollectionInterface : public UInterface
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.RectLight Size 568
// Inherited 560 bytes 
class ARectLight : public ALight
{

 public: 
	struct URectLightComponent* RectLightComponent;  // Offset: 560 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.RendererSettings Size 328
// Inherited 56 bytes 
class URendererSettings : public UDeveloperSettings
{

 public: 
	char bMobileDisableVertexFog : 1;  // Offset: 56 Size: 1
	char pad_56_1 : 7;  // Offset: 56 Size: 1
	char pad_57[4];  // Offset: 57 Size: 4
	int32_t MaxMobileCascades;  // Offset: 60 Size: 4
	enum class EMobileMSAASampleCount MobileMSAASampleCount;  // Offset: 64 Size: 1
	char pad_65[3];  // Offset: 65 Size: 3
	char bMobileAllowDitheredLODTransition : 1;  // Offset: 68 Size: 1
	char bMobileAllowSoftwareOcclusionCulling : 1;  // Offset: 68 Size: 1
	char bMobileVirtualTextures : 1;  // Offset: 68 Size: 1
	char bDiscardUnusedQualityLevels : 1;  // Offset: 68 Size: 1
	char bOcclusionCulling : 1;  // Offset: 68 Size: 1
	char pad_68_1 : 3;  // Offset: 68 Size: 1
	char pad_69[4];  // Offset: 69 Size: 4
	float MinScreenRadiusForLights;  // Offset: 72 Size: 4
	float MinScreenRadiusForEarlyZPass;  // Offset: 76 Size: 4
	float MinScreenRadiusForCSMdepth;  // Offset: 80 Size: 4
	char bPrecomputedVisibilityWarning : 1;  // Offset: 84 Size: 1
	char bTextureStreaming : 1;  // Offset: 84 Size: 1
	char bUseDXT5NormalMaps : 1;  // Offset: 84 Size: 1
	char bVirtualTextures : 1;  // Offset: 84 Size: 1
	char bVirtualTextureEnableAutoImport : 1;  // Offset: 84 Size: 1
	char bVirtualTexturedLightmaps : 1;  // Offset: 84 Size: 1
	char pad_84_1 : 2;  // Offset: 84 Size: 1
	char pad_85[4];  // Offset: 85 Size: 4
	uint32_t VirtualTextureTileSize;  // Offset: 88 Size: 4
	uint32_t VirtualTextureTileBorderSize;  // Offset: 92 Size: 4
	uint32_t VirtualTextureFeedbackFactor;  // Offset: 96 Size: 4
	char bVirtualTextureEnableCompressZlib : 1;  // Offset: 100 Size: 1
	char bVirtualTextureEnableCompressCrunch : 1;  // Offset: 100 Size: 1
	char bClearCoatEnableSecondNormal : 1;  // Offset: 100 Size: 1
	char pad_100_1 : 5;  // Offset: 100 Size: 1
	char pad_101[4];  // Offset: 101 Size: 4
	int32_t ReflectionCaptureResolution;  // Offset: 104 Size: 4
	char bReflectionCaptureCompression : 1;  // Offset: 108 Size: 1
	char ReflectionEnvironmentLightmapMixBasedOnRoughness : 1;  // Offset: 108 Size: 1
	char ReflectionEncodeRGBM_SM5 : 1;  // Offset: 108 Size: 1
	char bForwardShading : 1;  // Offset: 108 Size: 1
	char bVertexFoggingForOpaque : 1;  // Offset: 108 Size: 1
	char bAllowStaticLighting : 1;  // Offset: 108 Size: 1
	char bUseNormalMapsForStaticLighting : 1;  // Offset: 108 Size: 1
	char bGenerateMeshDistanceFields : 1;  // Offset: 108 Size: 1
	char bEightBitMeshDistanceFields : 1;  // Offset: 109 Size: 1
	char bGenerateLandscapeGIData : 1;  // Offset: 109 Size: 1
	char bCompressMeshDistanceFields : 1;  // Offset: 109 Size: 1
	char pad_109_1 : 5;  // Offset: 109 Size: 1
	char pad_110[3];  // Offset: 110 Size: 3
	float TessellationAdaptivePixelsPerTriangle;  // Offset: 112 Size: 4
	char bSeparateTranslucency : 1;  // Offset: 116 Size: 1
	char pad_116_1 : 7;  // Offset: 116 Size: 1
	char pad_117[4];  // Offset: 117 Size: 4
	enum class ETranslucentSortPolicy TranslucentSortPolicy;  // Offset: 120 Size: 1
	char pad_121[3];  // Offset: 121 Size: 3
	struct FVector TranslucentSortAxis;  // Offset: 124 Size: 12
	enum class EFixedFoveationLevels HMDFixedFoveationLevel;  // Offset: 136 Size: 1
	enum class ECustomDepthStencil CustomDepthStencil;  // Offset: 137 Size: 1
	char pad_138[2];  // Offset: 138 Size: 2
	char bCustomDepthTaaJitter : 1;  // Offset: 140 Size: 1
	char pad_140_1 : 7;  // Offset: 140 Size: 1
	char pad_141[4];  // Offset: 141 Size: 4
	enum class EAlphaChannelMode bEnableAlphaChannelInPostProcessing;  // Offset: 144 Size: 1
	char pad_145[3];  // Offset: 145 Size: 3
	char bDefaultFeatureBloom : 1;  // Offset: 148 Size: 1
	char bDefaultFeatureAmbientOcclusion : 1;  // Offset: 148 Size: 1
	char bDefaultFeatureAmbientOcclusionStaticFraction : 1;  // Offset: 148 Size: 1
	char bDefaultFeatureAutoExposure : 1;  // Offset: 148 Size: 1
	char pad_148_1 : 4;  // Offset: 148 Size: 1
	char pad_149[4];  // Offset: 149 Size: 4
	enum class EAutoExposureMethodUI DefaultFeatureAutoExposure;  // Offset: 152 Size: 1
	char pad_153[3];  // Offset: 153 Size: 3
	float DefaultFeatureAutoExposureBias;  // Offset: 156 Size: 4
	char bExtendDefaultLuminanceRangeInAutoExposureSettings : 1;  // Offset: 160 Size: 1
	char bUsePreExposure : 1;  // Offset: 160 Size: 1
	char bEnablePreExposureOnlyInTheEditor : 1;  // Offset: 160 Size: 1
	char bDefaultFeatureMotionBlur : 1;  // Offset: 160 Size: 1
	char bDefaultFeatureLensFlare : 1;  // Offset: 160 Size: 1
	char bTemporalUpsampling : 1;  // Offset: 160 Size: 1
	char bSSGI : 1;  // Offset: 160 Size: 1
	char pad_160_1 : 1;  // Offset: 160 Size: 1
	char pad_161[4];  // Offset: 161 Size: 4
	enum class EAntiAliasingMethod DefaultFeatureAntiAliasing;  // Offset: 164 Size: 1
	enum class ELightUnits DefaultLightUnits;  // Offset: 165 Size: 1
	enum class EDefaultBackBufferPixelFormat DefaultBackBufferPixelFormat;  // Offset: 166 Size: 1
	char pad_167[1];  // Offset: 167 Size: 1
	char bRenderUnbuiltPreviewShadowsInGame : 1;  // Offset: 168 Size: 1
	char bStencilForLODDither : 1;  // Offset: 168 Size: 1
	char pad_168_1 : 6;  // Offset: 168 Size: 1
	char pad_169[4];  // Offset: 169 Size: 4
	enum class EEarlyZPass EarlyZPass;  // Offset: 172 Size: 1
	char pad_173[3];  // Offset: 173 Size: 3
	char bEarlyZPassOnlyMaterialMasking : 1;  // Offset: 176 Size: 1
	char bDBuffer : 1;  // Offset: 176 Size: 1
	char pad_176_1 : 6;  // Offset: 176 Size: 1
	char pad_177[4];  // Offset: 177 Size: 4
	enum class EClearSceneOptions ClearSceneMethod;  // Offset: 180 Size: 1
	char pad_181[3];  // Offset: 181 Size: 3
	char bBasePassOutputsVelocity : 1;  // Offset: 184 Size: 1
	char bVertexDeformationOutputsVelocity : 1;  // Offset: 184 Size: 1
	char bSelectiveBasePassOutputs : 1;  // Offset: 184 Size: 1
	char bDefaultParticleCutouts : 1;  // Offset: 184 Size: 1
	char pad_184_1 : 4;  // Offset: 184 Size: 1
	char pad_185[4];  // Offset: 185 Size: 4
	int32_t GPUSimulationTextureSizeX;  // Offset: 188 Size: 4
	int32_t GPUSimulationTextureSizeY;  // Offset: 192 Size: 4
	char bGlobalClipPlane : 1;  // Offset: 196 Size: 1
	char pad_196_1 : 7;  // Offset: 196 Size: 1
	char pad_197[4];  // Offset: 197 Size: 4
	enum class EGBufferFormat GBufferFormat;  // Offset: 200 Size: 1
	char pad_201[3];  // Offset: 201 Size: 3
	char bUseGPUMorphTargets : 1;  // Offset: 204 Size: 1
	char bNvidiaAftermathEnabled : 1;  // Offset: 204 Size: 1
	char bMultiView : 1;  // Offset: 204 Size: 1
	char bMobilePostProcessing : 1;  // Offset: 204 Size: 1
	char bMobileMultiView : 1;  // Offset: 204 Size: 1
	char bMobileUseHWsRGBEncoding : 1;  // Offset: 204 Size: 1
	char bRoundRobinOcclusion : 1;  // Offset: 204 Size: 1
	char bODSCapture : 1;  // Offset: 204 Size: 1
	char bMeshStreaming : 1;  // Offset: 205 Size: 1
	char pad_205_1 : 7;  // Offset: 205 Size: 1
	char pad_206[3];  // Offset: 206 Size: 3
	float WireframeCullThreshold;  // Offset: 208 Size: 4
	char bEnableRayTracing : 1;  // Offset: 212 Size: 1
	char bEnableRayTracingTextureLOD : 1;  // Offset: 212 Size: 1
	char bSupportStationarySkylight : 1;  // Offset: 212 Size: 1
	char bSupportLowQualityLightmaps : 1;  // Offset: 212 Size: 1
	char bSupportPointLightWholeSceneShadows : 1;  // Offset: 212 Size: 1
	char bSupportAtmosphericFog : 1;  // Offset: 212 Size: 1
	char bSupportSkyAtmosphere : 1;  // Offset: 212 Size: 1
	char bSupportSkyAtmosphereAffectsHeightFog : 1;  // Offset: 212 Size: 1
	char bSupportSkinCacheShaders : 1;  // Offset: 213 Size: 1
	char pad_213_1 : 7;  // Offset: 213 Size: 1
	char pad_214[3];  // Offset: 214 Size: 3
	enum class ESkinCacheDefaultBehavior DefaultSkinCacheBehavior;  // Offset: 216 Size: 1
	char pad_217[3];  // Offset: 217 Size: 3
	float SkinCacheSceneMemoryLimitInMB;  // Offset: 220 Size: 4
	char bMobileEnableStaticAndCSMShadowReceivers : 1;  // Offset: 224 Size: 1
	char bMobileEnableMovableLightCSMShaderCulling : 1;  // Offset: 224 Size: 1
	char bMobileAllowDistanceFieldShadows : 1;  // Offset: 224 Size: 1
	char bMobileAllowMovableDirectionalLights : 1;  // Offset: 224 Size: 1
	char pad_224_1 : 4;  // Offset: 224 Size: 1
	char pad_225[4];  // Offset: 225 Size: 4
	uint32_t MobileNumDynamicPointLights;  // Offset: 228 Size: 4
	char bMobileDynamicPointLightsUseStaticBranch : 1;  // Offset: 232 Size: 1
	char bMobileAllowMovableSpotlights : 1;  // Offset: 232 Size: 1
	char bMobileAllowMovableSpotlightShadows : 1;  // Offset: 232 Size: 1
	char bSupport16BitBoneIndex : 1;  // Offset: 232 Size: 1
	char bGPUSkinLimit2BoneInfluences : 1;  // Offset: 232 Size: 1
	char bSupportDepthOnlyIndexBuffers : 1;  // Offset: 232 Size: 1
	char bSupportReversedIndexBuffers : 1;  // Offset: 232 Size: 1
	char bLPV : 1;  // Offset: 232 Size: 1
	char bMobileAmbientOcclusion : 1;  // Offset: 233 Size: 1
	char bUseUnlimitedBoneInfluences : 1;  // Offset: 233 Size: 1
	char pad_233_1 : 6;  // Offset: 233 Size: 1
	char pad_234[3];  // Offset: 234 Size: 3
	int32_t UnlimitedBonInfluencesThreshold;  // Offset: 236 Size: 4
	struct FPerPlatformInt MaxSkinBones;  // Offset: 240 Size: 4
	enum class EMobilePlanarReflectionMode MobilePlanarReflectionMode;  // Offset: 244 Size: 1
	char pad_245[3];  // Offset: 245 Size: 3
	char bMobileSupportsGen4TAA : 1;  // Offset: 248 Size: 1
	char pad_248_1 : 7;  // Offset: 248 Size: 1
	char pad_249[4];  // Offset: 249 Size: 4
	struct FPerPlatformBool bStreamSkeletalMeshLODs;  // Offset: 252 Size: 1
	struct FPerPlatformBool bDiscardSkeletalMeshOptionalLODs;  // Offset: 253 Size: 1
	char pad_254[2];  // Offset: 254 Size: 2
	struct FSoftObjectPath VisualizeCalibrationColorMaterialPath;  // Offset: 256 Size: 24
	struct FSoftObjectPath VisualizeCalibrationCustomMaterialPath;  // Offset: 280 Size: 24
	struct FSoftObjectPath VisualizeCalibrationGrayscaleMaterialPath;  // Offset: 304 Size: 24



 // Functions 
 public:
}; 
 
 


//Class Engine.ReplayNetConnection Size 9128
// Inherited 7080 bytes 
class UReplayNetConnection : public UNetConnection
{

 public: 
	char pad_7080[2048];  // Offset: 7080 Size: 2048



 // Functions 
 public:
}; 
 
 


//Class Engine.ReplicationConnectionDriver Size 40
// Inherited 40 bytes 
class UReplicationConnectionDriver : public UObject
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.Rig Size 80
// Inherited 40 bytes 
class URig : public UObject
{

 public: 
	char pad_40[8];  // Offset: 40 Size: 8
	struct TArray<struct FTransformBase> TransformBases;  // Offset: 48 Size: 16
	struct TArray<struct FNode> nodes;  // Offset: 64 Size: 16



 // Functions 
 public:
}; 
 
 


//Class Engine.RotatingMovementComponent Size 272
// Inherited 240 bytes 
class URotatingMovementComponent : public UMovementComponent
{

 public: 
	struct FRotator RotationRate;  // Offset: 240 Size: 12
	struct FVector PivotTranslation;  // Offset: 252 Size: 12
	char bRotationInLocalSpace : 1;  // Offset: 264 Size: 1
	char pad_264_1 : 7;  // Offset: 264 Size: 1
	char pad_265[8];  // Offset: 265 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.RuntimeOptionsBase Size 56
// Inherited 40 bytes 
class URuntimeOptionsBase : public UObject
{

 public: 
	char pad_40[16];  // Offset: 40 Size: 16



 // Functions 
 public:
}; 
 
 


//Class Engine.RuntimeVirtualTextureComponent Size 640
// Inherited 528 bytes 
class URuntimeVirtualTextureComponent : public USceneComponent
{

 public: 
	struct TSoftObjectPtr<AActor> BoundsAlignActor;  // Offset: 520 Size: 40
	char pad_568_1 : 7;  // Offset: 568 Size: 1
	bool bSetBoundsButton : 1;  // Offset: 560 Size: 1
	char pad_569_1 : 7;  // Offset: 569 Size: 1
	bool bSnapBoundsToLandscape : 1;  // Offset: 561 Size: 1
	struct URuntimeVirtualTexture* VirtualTexture;  // Offset: 568 Size: 8
	char pad_578_1 : 7;  // Offset: 578 Size: 1
	bool bEnableScalability : 1;  // Offset: 576 Size: 1
	char pad_579[1];  // Offset: 579 Size: 1
	uint32_t ScalabilityGroup;  // Offset: 580 Size: 4
	char pad_584_1 : 7;  // Offset: 584 Size: 1
	bool bHidePrimitives : 1;  // Offset: 584 Size: 1
	char pad_585[7];  // Offset: 585 Size: 7
	struct UVirtualTextureBuilder* StreamingTexture;  // Offset: 592 Size: 8
	int32_t StreamLowMips;  // Offset: 600 Size: 4
	char pad_604_1 : 7;  // Offset: 604 Size: 1
	bool bBuildStreamingMipsButton : 1;  // Offset: 604 Size: 1
	char pad_605_1 : 7;  // Offset: 605 Size: 1
	bool bEnableCompressCrunch : 1;  // Offset: 605 Size: 1
	char pad_606_1 : 7;  // Offset: 606 Size: 1
	bool bUseStreamingLowMipsInEditor : 1;  // Offset: 606 Size: 1
	char pad_607_1 : 7;  // Offset: 607 Size: 1
	bool bBuildDebugStreamingMips : 1;  // Offset: 607 Size: 1
	char pad_608[32];  // Offset: 608 Size: 32



 // Functions 
 public:
	void Invalidate(struct FBoxSphereBounds& WorldBounds); // Function Engine.RuntimeVirtualTextureComponent.Invalidate
}; 
 
 


//Class Engine.RVOAvoidanceInterface Size 40
// Inherited 40 bytes 
class URVOAvoidanceInterface : public UInterface
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.Scene Size 40
// Inherited 40 bytes 
class UScene : public UObject
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.VolumetricCloud Size 552
// Inherited 544 bytes 
class AVolumetricCloud : public AInfo
{

 public: 
	struct UVolumetricCloudComponent* VolumetricCloudComponent;  // Offset: 544 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.SceneCaptureCube Size 568
// Inherited 560 bytes 
class ASceneCaptureCube : public ASceneCapture
{

 public: 
	struct USceneCaptureComponentCube* CaptureComponentCube;  // Offset: 560 Size: 8



 // Functions 
 public:
	void OnInterpToggle(bool bEnable); // Function Engine.SceneCaptureCube.OnInterpToggle
}; 
 
 


//Class Engine.ShadowMapTexture2D Size 432
// Inherited 416 bytes 
class UShadowMapTexture2D : public UTexture2D
{

 public: 
	enum class EShadowMapFlags ShadowmapFlags;  // Offset: 416 Size: 1
	char pad_417[15];  // Offset: 417 Size: 15



 // Functions 
 public:
}; 
 
 


//Class Engine.SkyAtmosphere Size 552
// Inherited 544 bytes 
class ASkyAtmosphere : public AInfo
{

 public: 
	struct USkyAtmosphereComponent* SkyAtmosphereComponent;  // Offset: 544 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.SimpleConstructionScript Size 160
// Inherited 40 bytes 
class USimpleConstructionScript : public UObject
{

 public: 
	struct TArray<struct USCS_Node*> RootNodes;  // Offset: 40 Size: 16
	struct TArray<struct USCS_Node*> AllNodes;  // Offset: 56 Size: 16
	struct USCS_Node* DefaultSceneRootNode;  // Offset: 72 Size: 8
	char pad_80[80];  // Offset: 80 Size: 80



 // Functions 
 public:
}; 
 
 


//Class Engine.SkeletalMesh Size 928
// Inherited 96 bytes 
class USkeletalMesh : public UStreamableRenderAsset
{

 public: 
	char pad_96[32];  // Offset: 96 Size: 32
	struct USkeleton* Skeleton;  // Offset: 128 Size: 8
	struct FBoxSphereBounds ImportedBounds;  // Offset: 136 Size: 28
	struct FBoxSphereBounds ExtendedBounds;  // Offset: 164 Size: 28
	struct FVector PositiveBoundsExtension;  // Offset: 192 Size: 12
	struct FVector NegativeBoundsExtension;  // Offset: 204 Size: 12
	struct TArray<struct FSkeletalMaterial> Materials;  // Offset: 216 Size: 16
	struct TArray<struct FBoneMirrorInfo> SkelMirrorTable;  // Offset: 232 Size: 16
	struct TArray<struct FSkeletalMeshLODInfo> LODInfo;  // Offset: 248 Size: 16
	char pad_264[80];  // Offset: 264 Size: 80
	struct FPerPlatformInt MinLOD;  // Offset: 344 Size: 4
	struct FPerPlatformBool DisableBelowMinLodStripping;  // Offset: 348 Size: 1
	enum class EAxis SkelMirrorAxis;  // Offset: 349 Size: 1
	enum class EAxis SkelMirrorFlipAxis;  // Offset: 350 Size: 1
	char bUseFullPrecisionUVs : 1;  // Offset: 351 Size: 1
	char bUseHighPrecisionTangentBasis : 1;  // Offset: 351 Size: 1
	char bHasBeenSimplified : 1;  // Offset: 351 Size: 1
	char bHasVertexColors : 1;  // Offset: 351 Size: 1
	char pad_351_1 : 1;  // Offset: 351 Size: 1
	char bEnablePerPolyCollision : 1;  // Offset: 351 Size: 1
	char bIgnorePhysicsAssetBounds : 1;  // Offset: 351 Size: 1
	char pad_351_2 : 1;  // Offset: 351 Size: 1
	struct UBodySetup* BodySetup;  // Offset: 352 Size: 8
	struct UPhysicsAsset* PhysicsAsset;  // Offset: 360 Size: 8
	struct UPhysicsAsset* ShadowPhysicsAsset;  // Offset: 368 Size: 8
	struct TArray<struct UNodeMappingContainer*> NodeMappingData;  // Offset: 376 Size: 16
	char bSupportRayTracing : 1;  // Offset: 392 Size: 1
	char pad_392_1 : 7;  // Offset: 392 Size: 1
	char pad_393[8];  // Offset: 393 Size: 8
	struct TArray<struct UMorphTarget*> MorphTargets;  // Offset: 400 Size: 16
	char pad_416[376];  // Offset: 416 Size: 376
	UAnimInstance* PostProcessAnimBlueprint;  // Offset: 792 Size: 8
	struct TArray<struct UClothingAssetBase*> MeshClothingAssets;  // Offset: 800 Size: 16
	struct FSkeletalMeshSamplingInfo SamplingInfo;  // Offset: 816 Size: 48
	struct TArray<struct UAssetUserData*> AssetUserData;  // Offset: 864 Size: 16
	struct TArray<struct USkeletalMeshSocket*> Sockets;  // Offset: 880 Size: 16
	char pad_896[16];  // Offset: 896 Size: 16
	struct TArray<struct FSkinWeightProfileInfo> SkinWeightProfiles;  // Offset: 912 Size: 16



 // Functions 
 public:
	void SetMorphTargets(struct TArray<struct UMorphTarget*>& InMorphTargets); // Function Engine.SkeletalMesh.SetMorphTargets
	void SetMeshClothingAssets(struct TArray<struct UClothingAssetBase*>& InMeshClothingAssets); // Function Engine.SkeletalMesh.SetMeshClothingAssets
	void SetMaterials(struct TArray<struct FSkeletalMaterial>& InMaterials); // Function Engine.SkeletalMesh.SetMaterials
	void SetLODSettings(struct USkeletalMeshLODSettings* InLODSettings); // Function Engine.SkeletalMesh.SetLODSettings
	void SetDefaultAnimatingRig(struct TSoftObjectPtr<UObject> InAnimatingRig); // Function Engine.SkeletalMesh.SetDefaultAnimatingRig
	int32_t NumSockets(); // Function Engine.SkeletalMesh.NumSockets
	struct TArray<struct FString> K2_GetAllMorphTargetNames(); // Function Engine.SkeletalMesh.K2_GetAllMorphTargetNames
	bool IsSectionUsingCloth(int32_t InSectionIndex, bool bCheckCorrespondingSections); // Function Engine.SkeletalMesh.IsSectionUsingCloth
	struct USkeletalMeshSocket* GetSocketByIndex(int32_t Index); // Function Engine.SkeletalMesh.GetSocketByIndex
	struct USkeleton* GetSkeleton(); // Function Engine.SkeletalMesh.GetSkeleton
	struct UPhysicsAsset* GetShadowPhysicsAsset(); // Function Engine.SkeletalMesh.GetShadowPhysicsAsset
	struct UPhysicsAsset* GetPhysicsAsset(); // Function Engine.SkeletalMesh.GetPhysicsAsset
	struct TArray<struct UNodeMappingContainer*> GetNodeMappingData(); // Function Engine.SkeletalMesh.GetNodeMappingData
	struct UNodeMappingContainer* GetNodeMappingContainer(struct UBlueprint* SourceAsset); // Function Engine.SkeletalMesh.GetNodeMappingContainer
	struct TArray<struct UMorphTarget*> GetMorphTargets(); // Function Engine.SkeletalMesh.GetMorphTargets
	struct TArray<struct UClothingAssetBase*> GetMeshClothingAssets(); // Function Engine.SkeletalMesh.GetMeshClothingAssets
	struct TArray<struct FSkeletalMaterial> GetMaterials(); // Function Engine.SkeletalMesh.GetMaterials
	struct USkeletalMeshLODSettings* GetLODSettings(); // Function Engine.SkeletalMesh.GetLODSettings
	struct FBoxSphereBounds GetImportedBounds(); // Function Engine.SkeletalMesh.GetImportedBounds
	struct TSoftObjectPtr<UObject> GetDefaultAnimatingRig(); // Function Engine.SkeletalMesh.GetDefaultAnimatingRig
	struct FBoxSphereBounds GetBounds(); // Function Engine.SkeletalMesh.GetBounds
	struct USkeletalMeshSocket* FindSocketInfo(struct FName InSocketName, struct FTransform& OutTransform, int32_t& OutBoneIndex, int32_t& OutIndex); // Function Engine.SkeletalMesh.FindSocketInfo
	struct USkeletalMeshSocket* FindSocketAndIndex(struct FName InSocketName, int32_t& OutIndex); // Function Engine.SkeletalMesh.FindSocketAndIndex
	struct USkeletalMeshSocket* FindSocket(struct FName InSocketName); // Function Engine.SkeletalMesh.FindSocket
}; 
 
 


//Class Engine.SkeletalMeshEditorData Size 40
// Inherited 40 bytes 
class USkeletalMeshEditorData : public UObject
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.SlateTextureAtlasInterface Size 40
// Inherited 40 bytes 
class USlateTextureAtlasInterface : public UInterface
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.SkeletalMeshSimplificationSettings Size 64
// Inherited 56 bytes 
class USkeletalMeshSimplificationSettings : public UDeveloperSettings
{

 public: 
	struct FName SkeletalMeshReductionModuleName;  // Offset: 56 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.SkeletalMeshSocket Size 96
// Inherited 40 bytes 
class USkeletalMeshSocket : public UObject
{

 public: 
	struct FName SocketName;  // Offset: 40 Size: 8
	struct FName BoneName;  // Offset: 48 Size: 8
	struct FVector RelativeLocation;  // Offset: 56 Size: 12
	struct FRotator RelativeRotation;  // Offset: 68 Size: 12
	struct FVector RelativeScale;  // Offset: 80 Size: 12
	char pad_92_1 : 7;  // Offset: 92 Size: 1
	bool bForceAlwaysAnimated : 1;  // Offset: 92 Size: 1
	char pad_93[3];  // Offset: 93 Size: 3



 // Functions 
 public:
	void InitializeSocketFromLocation(struct USkeletalMeshComponent* SkelComp, struct FVector WorldLocation, struct FVector WorldNormal); // Function Engine.SkeletalMeshSocket.InitializeSocketFromLocation
	struct FVector GetSocketLocation(struct USkeletalMeshComponent* SkelComp); // Function Engine.SkeletalMeshSocket.GetSocketLocation
}; 
 
 


//Class Engine.SkyLightComponent Size 1040
// Inherited 576 bytes 
class USkyLightComponent : public ULightComponentBase
{

 public: 
	char pad_576_1 : 7;  // Offset: 576 Size: 1
	bool bRealTimeCapture : 1;  // Offset: 568 Size: 1
	enum class ESkyLightSourceType SourceType;  // Offset: 569 Size: 1
	struct UTextureCube* Cubemap;  // Offset: 576 Size: 8
	float SourceCubemapAngle;  // Offset: 584 Size: 4
	int32_t CubemapResolution;  // Offset: 588 Size: 4
	float SkyDistanceThreshold;  // Offset: 592 Size: 4
	char pad_598_1 : 7;  // Offset: 598 Size: 1
	bool bCaptureEmissiveOnly : 1;  // Offset: 596 Size: 1
	char pad_599_1 : 7;  // Offset: 599 Size: 1
	bool bLowerHemisphereIsBlack : 1;  // Offset: 597 Size: 1
	struct FLinearColor LowerHemisphereColor;  // Offset: 600 Size: 16
	float OcclusionMaxDistance;  // Offset: 616 Size: 4
	float Contrast;  // Offset: 620 Size: 4
	float OcclusionExponent;  // Offset: 624 Size: 4
	float MinOcclusion;  // Offset: 628 Size: 4
	struct FColor OcclusionTint;  // Offset: 632 Size: 4
	char bCloudAmbientOcclusion : 1;  // Offset: 636 Size: 1
	char pad_636_1 : 7;  // Offset: 636 Size: 1
	char pad_637[4];  // Offset: 637 Size: 4
	float CloudAmbientOcclusionStrength;  // Offset: 640 Size: 4
	float CloudAmbientOcclusionExtent;  // Offset: 644 Size: 4
	float CloudAmbientOcclusionMapResolutionScale;  // Offset: 648 Size: 4
	float CloudAmbientOcclusionApertureScale;  // Offset: 652 Size: 4
	enum class EOcclusionCombineMode OcclusionCombineMode;  // Offset: 656 Size: 1
	char pad_657[167];  // Offset: 657 Size: 167
	struct UTextureCube* BlendDestinationCubemap;  // Offset: 824 Size: 8
	char pad_832[208];  // Offset: 832 Size: 208



 // Functions 
 public:
	void SetVolumetricScatteringIntensity(float NewIntensity); // Function Engine.SkyLightComponent.SetVolumetricScatteringIntensity
	void SetOcclusionTint(struct FColor& InTint); // Function Engine.SkyLightComponent.SetOcclusionTint
	void SetOcclusionExponent(float InOcclusionExponent); // Function Engine.SkyLightComponent.SetOcclusionExponent
	void SetOcclusionContrast(float InOcclusionContrast); // Function Engine.SkyLightComponent.SetOcclusionContrast
	void SetMinOcclusion(float InMinOcclusion); // Function Engine.SkyLightComponent.SetMinOcclusion
	void SetLowerHemisphereColor(struct FLinearColor& InLowerHemisphereColor); // Function Engine.SkyLightComponent.SetLowerHemisphereColor
	void SetLightColor(struct FLinearColor NewLightColor); // Function Engine.SkyLightComponent.SetLightColor
	void SetIntensity(float NewIntensity); // Function Engine.SkyLightComponent.SetIntensity
	void SetIndirectLightingIntensity(float NewIntensity); // Function Engine.SkyLightComponent.SetIndirectLightingIntensity
	void SetCubemapBlend(struct UTextureCube* SourceCubemap, struct UTextureCube* DestinationCubemap, float InBlendFraction); // Function Engine.SkyLightComponent.SetCubemapBlend
	void SetCubemap(struct UTextureCube* NewCubemap); // Function Engine.SkyLightComponent.SetCubemap
	void RecaptureSky(); // Function Engine.SkyLightComponent.RecaptureSky
}; 
 
 


//Class Engine.SlateBrushAsset Size 176
// Inherited 40 bytes 
class USlateBrushAsset : public UObject
{

 public: 
	struct FSlateBrush Brush;  // Offset: 40 Size: 136



 // Functions 
 public:
}; 
 
 


//Class Engine.SmokeTestCommandlet Size 128
// Inherited 128 bytes 
class USmokeTestCommandlet : public UCommandlet
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.SoundAttenuation Size 968
// Inherited 40 bytes 
class USoundAttenuation : public UObject
{

 public: 
	struct FSoundAttenuationSettings Attenuation;  // Offset: 40 Size: 928



 // Functions 
 public:
}; 
 
 


//Class Engine.SoundGroups Size 136
// Inherited 40 bytes 
class USoundGroups : public UObject
{

 public: 
	struct TArray<struct FSoundGroup> SoundGroupProfiles;  // Offset: 40 Size: 16
	char pad_56[80];  // Offset: 56 Size: 80



 // Functions 
 public:
}; 
 
 


//Class Engine.SoundMix Size 144
// Inherited 40 bytes 
class USoundMix : public UObject
{

 public: 
	char bApplyEQ : 1;  // Offset: 40 Size: 1
	char pad_40_1 : 7;  // Offset: 40 Size: 1
	char pad_41[4];  // Offset: 41 Size: 4
	float EQPriority;  // Offset: 44 Size: 4
	struct FAudioEQEffect EQSettings;  // Offset: 48 Size: 64
	struct TArray<struct FSoundClassAdjuster> SoundClassEffects;  // Offset: 112 Size: 16
	float InitialDelay;  // Offset: 128 Size: 4
	float FadeInTime;  // Offset: 132 Size: 4
	float Duration;  // Offset: 136 Size: 4
	float FadeOutTime;  // Offset: 140 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.SoundNodeAssetReferencer Size 72
// Inherited 72 bytes 
class USoundNodeAssetReferencer : public USoundNode
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.SoundNodeAttenuation Size 1016
// Inherited 72 bytes 
class USoundNodeAttenuation : public USoundNode
{

 public: 
	struct USoundAttenuation* AttenuationSettings;  // Offset: 72 Size: 8
	struct FSoundAttenuationSettings AttenuationOverrides;  // Offset: 80 Size: 928
	char bOverrideAttenuation : 1;  // Offset: 1008 Size: 1
	char pad_1008_1 : 7;  // Offset: 1008 Size: 1
	char pad_1009[8];  // Offset: 1009 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.SoundNodeBranch Size 80
// Inherited 72 bytes 
class USoundNodeBranch : public USoundNode
{

 public: 
	struct FName BoolParameterName;  // Offset: 72 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.SoundNodeConcatenator Size 88
// Inherited 72 bytes 
class USoundNodeConcatenator : public USoundNode
{

 public: 
	struct TArray<float> InputVolume;  // Offset: 72 Size: 16



 // Functions 
 public:
}; 
 
 


//Class Engine.SoundNodeDelay Size 80
// Inherited 72 bytes 
class USoundNodeDelay : public USoundNode
{

 public: 
	float DelayMin;  // Offset: 72 Size: 4
	float DelayMax;  // Offset: 76 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.SoundNodeDialoguePlayer Size 112
// Inherited 72 bytes 
class USoundNodeDialoguePlayer : public USoundNode
{

 public: 
	struct FDialogueWaveParameter DialogueWaveParameter;  // Offset: 72 Size: 32
	char bLooping : 1;  // Offset: 104 Size: 1
	char pad_104_1 : 7;  // Offset: 104 Size: 1
	char pad_105[8];  // Offset: 105 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.SoundNodeDistanceCrossFade Size 88
// Inherited 72 bytes 
class USoundNodeDistanceCrossFade : public USoundNode
{

 public: 
	struct TArray<struct FDistanceDatum> CrossFadeInput;  // Offset: 72 Size: 16



 // Functions 
 public:
}; 
 
 


//Class Engine.SoundNodeEnveloper Size 400
// Inherited 72 bytes 
class USoundNodeEnveloper : public USoundNode
{

 public: 
	float LoopStart;  // Offset: 72 Size: 4
	float LoopEnd;  // Offset: 76 Size: 4
	float DurationAfterLoop;  // Offset: 80 Size: 4
	int32_t LoopCount;  // Offset: 84 Size: 4
	char bLoopIndefinitely : 1;  // Offset: 88 Size: 1
	char bLoop : 1;  // Offset: 88 Size: 1
	char pad_88_1 : 6;  // Offset: 88 Size: 1
	char pad_89[8];  // Offset: 89 Size: 8
	struct UDistributionFloatConstantCurve* VolumeInterpCurve;  // Offset: 96 Size: 8
	struct UDistributionFloatConstantCurve* PitchInterpCurve;  // Offset: 104 Size: 8
	struct FRuntimeFloatCurve VolumeCurve;  // Offset: 112 Size: 136
	struct FRuntimeFloatCurve PitchCurve;  // Offset: 248 Size: 136
	float PitchMin;  // Offset: 384 Size: 4
	float PitchMax;  // Offset: 388 Size: 4
	float VolumeMin;  // Offset: 392 Size: 4
	float VolumeMax;  // Offset: 396 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.SoundNodeGroupControl Size 88
// Inherited 72 bytes 
class USoundNodeGroupControl : public USoundNode
{

 public: 
	struct TArray<int32_t> GroupSizes;  // Offset: 72 Size: 16



 // Functions 
 public:
}; 
 
 


//Class Engine.SoundNodeModulator Size 88
// Inherited 72 bytes 
class USoundNodeModulator : public USoundNode
{

 public: 
	float PitchMin;  // Offset: 72 Size: 4
	float PitchMax;  // Offset: 76 Size: 4
	float VolumeMin;  // Offset: 80 Size: 4
	float VolumeMax;  // Offset: 84 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.SoundNodeModulatorContinuous Size 136
// Inherited 72 bytes 
class USoundNodeModulatorContinuous : public USoundNode
{

 public: 
	struct FModulatorContinuousParams PitchModulationParams;  // Offset: 72 Size: 32
	struct FModulatorContinuousParams VolumeModulationParams;  // Offset: 104 Size: 32



 // Functions 
 public:
}; 
 
 


//Class Engine.SoundNodeSoundClass Size 88
// Inherited 72 bytes 
class USoundNodeSoundClass : public USoundNode
{

 public: 
	struct USoundClass* SoundClassOverride;  // Offset: 72 Size: 8
	char pad_80[8];  // Offset: 80 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.SoundNodeWaveParam Size 80
// Inherited 72 bytes 
class USoundNodeWaveParam : public USoundNode
{

 public: 
	struct FName WaveParameterName;  // Offset: 72 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.EndpointSubmix Size 80
// Inherited 56 bytes 
class UEndpointSubmix : public USoundSubmixBase
{

 public: 
	struct FName EndpointType;  // Offset: 56 Size: 8
	UAudioEndpointSettingsBase* EndpointSettingsClass;  // Offset: 64 Size: 8
	struct UAudioEndpointSettingsBase* EndpointSettings;  // Offset: 72 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.SpectatorPawnMovement Size 344
// Inherited 336 bytes 
class USpectatorPawnMovement : public UFloatingPawnMovement
{

 public: 
	char bIgnoreTimeDilation : 1;  // Offset: 336 Size: 1
	char pad_336_1 : 7;  // Offset: 336 Size: 1
	char pad_337[8];  // Offset: 337 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.StereoLayerShapeCylinder Size 56
// Inherited 40 bytes 
class UStereoLayerShapeCylinder : public UStereoLayerShape
{

 public: 
	float Radius;  // Offset: 40 Size: 4
	float OverlayArc;  // Offset: 44 Size: 4
	int32_t Height;  // Offset: 48 Size: 4
	char pad_52[4];  // Offset: 52 Size: 4



 // Functions 
 public:
	void SetRadius(float InRadius); // Function Engine.StereoLayerShapeCylinder.SetRadius
	void SetOverlayArc(float InOverlayArc); // Function Engine.StereoLayerShapeCylinder.SetOverlayArc
	void SetHeight(int32_t InHeight); // Function Engine.StereoLayerShapeCylinder.SetHeight
}; 
 
 


//Class Engine.StringTable Size 64
// Inherited 40 bytes 
class UStringTable : public UObject
{

 public: 
	char pad_40[24];  // Offset: 40 Size: 24



 // Functions 
 public:
}; 
 
 


//Class Engine.SubsurfaceProfile Size 184
// Inherited 40 bytes 
class USubsurfaceProfile : public UObject
{

 public: 
	struct FSubsurfaceProfileStruct Settings;  // Offset: 40 Size: 140
	char pad_180[4];  // Offset: 180 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.SubUVAnimation Size 104
// Inherited 40 bytes 
class USubUVAnimation : public UObject
{

 public: 
	struct UTexture2D* SubUVTexture;  // Offset: 40 Size: 8
	int32_t SubImages_Horizontal;  // Offset: 48 Size: 4
	int32_t SubImages_Vertical;  // Offset: 52 Size: 4
	enum class ESubUVBoundingVertexCount BoundingMode;  // Offset: 56 Size: 1
	enum class EOpacitySourceMode OpacitySourceMode;  // Offset: 57 Size: 1
	char pad_58[2];  // Offset: 58 Size: 2
	float AlphaThreshold;  // Offset: 60 Size: 4
	char pad_64[40];  // Offset: 64 Size: 40



 // Functions 
 public:
}; 
 
 


//Class Engine.TextPropertyTestObject Size 112
// Inherited 40 bytes 
class UTextPropertyTestObject : public UObject
{

 public: 
	struct FText DefaultedText;  // Offset: 40 Size: 24
	struct FText UndefaultedText;  // Offset: 64 Size: 24
	struct FText TransientText;  // Offset: 88 Size: 24



 // Functions 
 public:
}; 
 
 


//Class Engine.Texture2DArray Size 480
// Inherited 384 bytes 
class UTexture2DArray : public UTexture
{

 public: 
	char pad_384[80];  // Offset: 384 Size: 80
	enum class TextureAddress AddressX;  // Offset: 464 Size: 1
	enum class TextureAddress AddressY;  // Offset: 465 Size: 1
	enum class TextureAddress AddressZ;  // Offset: 466 Size: 1
	char pad_467[13];  // Offset: 467 Size: 13



 // Functions 
 public:
}; 
 
 


//Class Engine.TextureLightProfile Size 432
// Inherited 416 bytes 
class UTextureLightProfile : public UTexture2D
{

 public: 
	float Brightness;  // Offset: 416 Size: 4
	float TextureMultiplier;  // Offset: 420 Size: 4
	char pad_424[8];  // Offset: 424 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.TouchInterface Size 88
// Inherited 40 bytes 
class UTouchInterface : public UObject
{

 public: 
	struct TArray<struct FTouchInputControl> Controls;  // Offset: 40 Size: 16
	float ActiveOpacity;  // Offset: 56 Size: 4
	float InactiveOpacity;  // Offset: 60 Size: 4
	float TimeUntilDeactive;  // Offset: 64 Size: 4
	float TimeUntilReset;  // Offset: 68 Size: 4
	float ActivationDelay;  // Offset: 72 Size: 4
	char pad_76_1 : 7;  // Offset: 76 Size: 1
	bool bPreventRecenter : 1;  // Offset: 76 Size: 1
	char pad_77[3];  // Offset: 77 Size: 3
	float StartupDelay;  // Offset: 80 Size: 4
	char pad_84[4];  // Offset: 84 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.TriggerSphere Size 552
// Inherited 552 bytes 
class ATriggerSphere : public ATriggerBase
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.TriggerVolume Size 600
// Inherited 600 bytes 
class ATriggerVolume : public AVolume
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.UserDefinedEnum Size 176
// Inherited 96 bytes 
class UUserDefinedEnum : public UEnum
{

 public: 
	struct TMap<struct FName, struct FText> DisplayNameMap;  // Offset: 96 Size: 80



 // Functions 
 public:
}; 
 
 


//Class Engine.UserInterfaceSettings Size 624
// Inherited 56 bytes 
class UUserInterfaceSettings : public UDeveloperSettings
{

 public: 
	enum class ERenderFocusRule RenderFocusRule;  // Offset: 56 Size: 1
	char pad_57[7];  // Offset: 57 Size: 7
	struct TMap<enum class EMouseCursor, struct FHardwareCursorReference> HardwareCursors;  // Offset: 64 Size: 80
	struct TMap<enum class EMouseCursor, struct FSoftClassPath> SoftwareCursors;  // Offset: 144 Size: 80
	struct FSoftClassPath DefaultCursor;  // Offset: 224 Size: 24
	struct FSoftClassPath TextEditBeamCursor;  // Offset: 248 Size: 24
	struct FSoftClassPath CrosshairsCursor;  // Offset: 272 Size: 24
	struct FSoftClassPath HandCursor;  // Offset: 296 Size: 24
	struct FSoftClassPath GrabHandCursor;  // Offset: 320 Size: 24
	struct FSoftClassPath GrabHandClosedCursor;  // Offset: 344 Size: 24
	struct FSoftClassPath SlashedCircleCursor;  // Offset: 368 Size: 24
	float ApplicationScale;  // Offset: 392 Size: 4
	enum class EUIScalingRule UIScaleRule;  // Offset: 396 Size: 1
	char pad_397[3];  // Offset: 397 Size: 3
	struct FSoftClassPath CustomScalingRuleClass;  // Offset: 400 Size: 24
	struct FRuntimeFloatCurve UIScaleCurve;  // Offset: 424 Size: 136
	char pad_560_1 : 7;  // Offset: 560 Size: 1
	bool bAllowHighDPIInGameMode : 1;  // Offset: 560 Size: 1
	char pad_561[3];  // Offset: 561 Size: 3
	struct FIntPoint DesignScreenSize;  // Offset: 564 Size: 8
	char pad_572_1 : 7;  // Offset: 572 Size: 1
	bool bLoadWidgetsOnDedicatedServer : 1;  // Offset: 572 Size: 1
	char pad_573[3];  // Offset: 573 Size: 3
	struct TArray<struct UObject*> CursorClasses;  // Offset: 576 Size: 16
	UObject* CustomScalingRuleClassInstance;  // Offset: 592 Size: 8
	struct UDPICustomScalingRule* CustomScalingRule;  // Offset: 600 Size: 8
	char pad_608[16];  // Offset: 608 Size: 16



 // Functions 
 public:
}; 
 
 


//Class Engine.VectorFieldAnimated Size 136
// Inherited 72 bytes 
class UVectorFieldAnimated : public UVectorField
{

 public: 
	struct UTexture2D* Texture;  // Offset: 72 Size: 8
	enum class EVectorFieldConstructionOp ConstructionOp;  // Offset: 80 Size: 1
	char pad_81[3];  // Offset: 81 Size: 3
	int32_t VolumeSizeX;  // Offset: 84 Size: 4
	int32_t VolumeSizeY;  // Offset: 88 Size: 4
	int32_t VolumeSizeZ;  // Offset: 92 Size: 4
	int32_t SubImagesX;  // Offset: 96 Size: 4
	int32_t SubImagesY;  // Offset: 100 Size: 4
	int32_t FrameCount;  // Offset: 104 Size: 4
	float FramesPerSecond;  // Offset: 108 Size: 4
	char bLoop : 1;  // Offset: 112 Size: 1
	char pad_112_1 : 7;  // Offset: 112 Size: 1
	char pad_113[8];  // Offset: 113 Size: 8
	struct UVectorFieldStatic* NoiseField;  // Offset: 120 Size: 8
	float NoiseScale;  // Offset: 128 Size: 4
	float NoiseMax;  // Offset: 132 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.RuntimeVirtualTextureStreamingProxy Size 416
// Inherited 416 bytes 
class URuntimeVirtualTextureStreamingProxy : public UTexture2D
{

 public: 



 // Functions 
 public:
}; 
 
 


//Class Engine.VirtualTexture2D Size 432
// Inherited 416 bytes 
class UVirtualTexture2D : public UTexture2D
{

 public: 
	struct FVirtualTextureBuildSettings Settings;  // Offset: 416 Size: 12
	char pad_428_1 : 7;  // Offset: 428 Size: 1
	bool bContinuousUpdate : 1;  // Offset: 428 Size: 1
	char pad_429_1 : 7;  // Offset: 429 Size: 1
	bool bSinglePhysicalSpace : 1;  // Offset: 429 Size: 1
	char pad_430[2];  // Offset: 430 Size: 2



 // Functions 
 public:
}; 
 
 


//Class Engine.VirtualTextureBuilder Size 56
// Inherited 40 bytes 
class UVirtualTextureBuilder : public UObject
{

 public: 
	struct UVirtualTexture2D* Texture;  // Offset: 40 Size: 8
	uint64_t BuildHash;  // Offset: 48 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.VisualLoggerKismetLibrary Size 40
// Inherited 40 bytes 
class UVisualLoggerKismetLibrary : public UBlueprintFunctionLibrary
{

 public: 



 // Functions 
 public:
	void RedirectVislog(struct UObject* SourceOwner, struct UObject* DestinationOwner); // Function Engine.VisualLoggerKismetLibrary.RedirectVislog
	void LogText(struct UObject* WorldContextObject, struct FString Text, struct FName LogCategory, bool bAddToMessageLog); // Function Engine.VisualLoggerKismetLibrary.LogText
	void LogSegment(struct UObject* WorldContextObject, struct FVector SegmentStart, struct FVector SegmentEnd, struct FString Text, struct FLinearColor ObjectColor, float Thickness, struct FName CategoryName, bool bAddToMessageLog); // Function Engine.VisualLoggerKismetLibrary.LogSegment
	void LogLocation(struct UObject* WorldContextObject, struct FVector Location, struct FString Text, struct FLinearColor ObjectColor, float Radius, struct FName LogCategory, bool bAddToMessageLog); // Function Engine.VisualLoggerKismetLibrary.LogLocation
	void LogBox(struct UObject* WorldContextObject, struct FBox BoxShape, struct FString Text, struct FLinearColor ObjectColor, struct FName LogCategory, bool bAddToMessageLog); // Function Engine.VisualLoggerKismetLibrary.LogBox
	void EnableRecording(bool bEnabled); // Function Engine.VisualLoggerKismetLibrary.EnableRecording
}; 
 
 


//Class Engine.VOIPStatics Size 40
// Inherited 40 bytes 
class UVOIPStatics : public UBlueprintFunctionLibrary
{

 public: 



 // Functions 
 public:
	void SetMicThreshold(float InThreshold); // Function Engine.VOIPStatics.SetMicThreshold
}; 
 
 


//Class Engine.VolumetricLightmapDensityVolume Size 608
// Inherited 600 bytes 
class AVolumetricLightmapDensityVolume : public AVolume
{

 public: 
	struct FInt32Interval AllowedMipLevelRange;  // Offset: 600 Size: 8



 // Functions 
 public:
}; 
 
 


//Class Engine.WindDirectionalSourceComponent Size 560
// Inherited 528 bytes 
class UWindDirectionalSourceComponent : public USceneComponent
{

 public: 
	float Strength;  // Offset: 520 Size: 4
	float Speed;  // Offset: 524 Size: 4
	float MinGustAmount;  // Offset: 528 Size: 4
	float MaxGustAmount;  // Offset: 532 Size: 4
	float Radius;  // Offset: 536 Size: 4
	char bPointWind : 1;  // Offset: 540 Size: 1
	char pad_548_1 : 7;  // Offset: 548 Size: 1
	char pad_549[12];  // Offset: 549 Size: 12



 // Functions 
 public:
	void SetWindType(enum class EWindSourceType InNewType); // Function Engine.WindDirectionalSourceComponent.SetWindType
	void SetStrength(float InNewStrength); // Function Engine.WindDirectionalSourceComponent.SetStrength
	void SetSpeed(float InNewSpeed); // Function Engine.WindDirectionalSourceComponent.SetSpeed
	void SetRadius(float InNewRadius); // Function Engine.WindDirectionalSourceComponent.SetRadius
	void SetMinimumGustAmount(float InNewMinGust); // Function Engine.WindDirectionalSourceComponent.SetMinimumGustAmount
	void SetMaximumGustAmount(float InNewMaxGust); // Function Engine.WindDirectionalSourceComponent.SetMaximumGustAmount
}; 
 
 


//Class Engine.WorldComposition Size 104
// Inherited 40 bytes 
class UWorldComposition : public UObject
{

 public: 
	char pad_40[32];  // Offset: 40 Size: 32
	struct TArray<struct ULevelStreaming*> TilesStreaming;  // Offset: 72 Size: 16
	double TilesStreamingTimeThreshold;  // Offset: 88 Size: 8
	char pad_96_1 : 7;  // Offset: 96 Size: 1
	bool bLoadAllTilesDuringCinematic : 1;  // Offset: 96 Size: 1
	char pad_97_1 : 7;  // Offset: 97 Size: 1
	bool bRebaseOriginIn3DSpace : 1;  // Offset: 97 Size: 1
	char pad_98[2];  // Offset: 98 Size: 2
	float RebaseOriginDistance;  // Offset: 100 Size: 4



 // Functions 
 public:
}; 
 
 


//Class Engine.HierarchicalLODSetup Size 96
// Inherited 40 bytes 
class UHierarchicalLODSetup : public UObject
{

 public: 
	struct TArray<struct FHierarchicalSimplification> HierarchicalLODSetup;  // Offset: 40 Size: 16
	struct TSoftObjectPtr<UMaterialInterface> OverrideBaseMaterial;  // Offset: 56 Size: 40



 // Functions 
 public:
}; 
 
 


