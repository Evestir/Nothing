#pragma once 
#include <SDK_Engine_Objects.h> 
 
 
class FBlendParameter
{
public:
	FBlendParameter(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetDisplayName() {
		return memory.read<struct FString>(m_addr + 0);
	}
	float GetMin() {
		return memory.read<float>(m_addr + 16);
	}
	float GetMax() {
		return memory.read<float>(m_addr + 20);
	}
	int32_t GetGridNum() {
		return memory.read<int32_t>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FInputVectorAxisHandlerDynamicSignature__DelegateSignature
{
public:
	FInputVectorAxisHandlerDynamicSignature__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetAxisValue() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FRawDistribution
{
public:
	FRawDistribution(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDistributionLookupTable GetTable() {
		return memory.read<struct FDistributionLookupTable>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetControllerAnalogKeyState
{
public:
	FGetControllerAnalogKeyState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKey GetKey() {
		return memory.read<struct FKey>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FReceived_NotifyTick
{
public:
	FReceived_NotifyTick(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USkeletalMeshComponent GetMeshComp() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct USkeletalMeshComponent(ptr_addr);
	}
	struct UAnimSequenceBase GetAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UAnimSequenceBase(ptr_addr);
	}
	float GetFrameDeltaTime() {
		return memory.read<float>(m_addr + 16);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_SetActorLocation
{
public:
	FK2_SetActorLocation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetNewLocation() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	bool GetbSweep() {
		return memory.read<bool>(m_addr + 12);
	}
	struct FHitResult GetSweepHitResult() {
		return memory.read<struct FHitResult>(m_addr + 16);
	}
	bool GetbTeleport() {
		return memory.read<bool>(m_addr + 152);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 153);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetPrimaryAssetsWithBundleState
{
public:
	FGetPrimaryAssetsWithBundleState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FName> GetRequiredBundles() {
		return memory.read<struct TArray<struct FName>>(m_addr + 0);
	}
	struct TArray<struct FName> GetExcludedBundles() {
		return memory.read<struct TArray<struct FName>>(m_addr + 16);
	}
	struct TArray<struct FPrimaryAssetType> GetValidTypes() {
		return memory.read<struct TArray<struct FPrimaryAssetType>>(m_addr + 32);
	}
	bool GetbForceCurrentState() {
		return memory.read<bool>(m_addr + 48);
	}
	struct TArray<struct FPrimaryAssetId> GetOutPrimaryAssetIdList() {
		return memory.read<struct TArray<struct FPrimaryAssetId>>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsOverlappingComponent
{
public:
	FIsOverlappingComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPrimitiveComponent GetOtherComp() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UPrimitiveComponent(ptr_addr);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetEnableLightShaftBloom
{
public:
	FSetEnableLightShaftBloom(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbNewValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsPlayingRootMotion
{
public:
	FIsPlayingRootMotion(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetConstraintForce
{
public:
	FGetConstraintForce(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetOutLinearForce() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetOutAngularForce() {
		return memory.read<struct FVector>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetCurves
{
public:
	FGetCurves(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FNamedCurveValue> GetOutValues() {
		return memory.read<struct TArray<struct FNamedCurveValue>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FVectorRK4SpringInterpolator
{
public:
	FVectorRK4SpringInterpolator(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetStiffnessConstant() {
		return memory.read<float>(m_addr + 0);
	}
	float GetDampeningRatio() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_GetAllMorphTargetNames
{
public:
	FK2_GetAllMorphTargetNames(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FString> GetReturnValue() {
		return memory.read<struct TArray<struct FString>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FBreakVector
{
public:
	FBreakVector(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetInVec() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	float GetX() {
		return memory.read<float>(m_addr + 12);
	}
	float GetY() {
		return memory.read<float>(m_addr + 16);
	}
	float GetZ() {
		return memory.read<float>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FCanLaunchURL
{
public:
	FCanLaunchURL(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetURL() {
		return memory.read<struct FString>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FMatrix_GetFrustumRightPlane
{
public:
	FMatrix_GetFrustumRightPlane(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMatrix GetM() {
		return memory.read<struct FMatrix>(m_addr + 0);
	}
	struct FPlane GetOutPlane() {
		return memory.read<struct FPlane>(m_addr + 64);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 80);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_InvalidateTimerHandle
{
public:
	FK2_InvalidateTimerHandle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTimerHandle GetHandle() {
		return memory.read<struct FTimerHandle>(m_addr + 0);
	}
	struct FTimerHandle GetReturnValue() {
		return memory.read<struct FTimerHandle>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FParseCommandLine
{
public:
	FParseCommandLine(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetInCmdLine() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct TArray<struct FString> GetOutTokens() {
		return memory.read<struct TArray<struct FString>>(m_addr + 16);
	}
	struct TArray<struct FString> GetOutSwitches() {
		return memory.read<struct TArray<struct FString>>(m_addr + 32);
	}
	struct TMap<struct FString, struct FString> GetOutParams() {
		return memory.read<struct TMap<struct FString, struct FString>>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};class FA2Pose
{
public:
	FA2Pose(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FTransform> GetBones() {
		return memory.read<struct TArray<struct FTransform>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FDistributionLookupTable
{
public:
	FDistributionLookupTable(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetTimeScale() {
		return memory.read<float>(m_addr + 0);
	}
	float GetTimeBias() {
		return memory.read<float>(m_addr + 4);
	}
	struct TArray<float> GetValues() {
		return memory.read<struct TArray<float>>(m_addr + 8);
	}
	char GetOp() {
		return memory.read<char>(m_addr + 24);
	}
	char GetEntryCount() {
		return memory.read<char>(m_addr + 25);
	}
	char GetEntryStride() {
		return memory.read<char>(m_addr + 26);
	}
	char GetSubEntryStride() {
		return memory.read<char>(m_addr + 27);
	}
	char GetLockFlag() {
		return memory.read<char>(m_addr + 28);
	}

private:
	std::uint64_t m_addr = 0;
};class FComponentWakeSignature__DelegateSignature
{
public:
	FComponentWakeSignature__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPrimitiveComponent GetWakingComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UPrimitiveComponent(ptr_addr);
	}
	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FHitResult
{
public:
	FHitResult(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetFaceIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	float GetTime() {
		return memory.read<float>(m_addr + 4);
	}
	float GetDistance() {
		return memory.read<float>(m_addr + 8);
	}
	struct FVector_NetQuantize GetLocation() {
		return memory.read<struct FVector_NetQuantize>(m_addr + 12);
	}
	struct FVector_NetQuantize GetImpactPoint() {
		return memory.read<struct FVector_NetQuantize>(m_addr + 24);
	}
	struct FVector_NetQuantizeNormal GetNormal() {
		return memory.read<struct FVector_NetQuantizeNormal>(m_addr + 36);
	}
	struct FVector_NetQuantizeNormal GetImpactNormal() {
		return memory.read<struct FVector_NetQuantizeNormal>(m_addr + 48);
	}
	struct FVector_NetQuantize GetTraceStart() {
		return memory.read<struct FVector_NetQuantize>(m_addr + 60);
	}
	struct FVector_NetQuantize GetTraceEnd() {
		return memory.read<struct FVector_NetQuantize>(m_addr + 72);
	}
	float GetPenetrationDepth() {
		return memory.read<float>(m_addr + 84);
	}
	int32_t GetItem() {
		return memory.read<int32_t>(m_addr + 88);
	}
	char GetElementIndex() {
		return memory.read<char>(m_addr + 92);
	}
	char GetbBlockingHit() {
		return memory.read<char>(m_addr + 93);
	}
	char GetbStartPenetrating() {
		return memory.read<char>(m_addr + 93);
	}
	struct TWeakObjectPtr<UPhysicalMaterial> GetPhysMaterial() {
		return memory.read<struct TWeakObjectPtr<UPhysicalMaterial>>(m_addr + 96);
	}
	struct TWeakObjectPtr<AActor> GetActor() {
		return memory.read<struct TWeakObjectPtr<AActor>>(m_addr + 104);
	}
	struct TWeakObjectPtr<UPrimitiveComponent> GetComponent() {
		return memory.read<struct TWeakObjectPtr<UPrimitiveComponent>>(m_addr + 112);
	}
	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 120);
	}
	struct FName GetMyBoneName() {
		return memory.read<struct FName>(m_addr + 128);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_OnSwapPlayerControllers
{
public:
	FK2_OnSwapPlayerControllers(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APlayerController GetOldPC() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APlayerController(ptr_addr);
	}
	struct APlayerController GetNewPC() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct APlayerController(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetDynamicShadowDistanceStationaryLight
{
public:
	FSetDynamicShadowDistanceStationaryLight(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetObjectPropertyByName
{
public:
	FSetObjectPropertyByName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FName GetPropertyName() {
		return memory.read<struct FName>(m_addr + 8);
	}
	struct UObject GetValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UObject(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnSubmixEnvelopeBP__DelegateSignature
{
public:
	FOnSubmixEnvelopeBP__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<float> GetEnvelope() {
		return memory.read<struct TArray<float>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FResetGamepadAssignmentToController
{
public:
	FResetGamepadAssignmentToController(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetControllerId() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetMassScale
{
public:
	FGetMassScale(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FMakeMIDForMaterial
{
public:
	FMakeMIDForMaterial(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UMaterialInterface GetParent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UMaterialInterface(ptr_addr);
	}
	struct UMaterialInstanceDynamic GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UMaterialInstanceDynamic(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FFloatDistribution
{
public:
	FFloatDistribution(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDistributionLookupTable GetTable() {
		return memory.read<struct FDistributionLookupTable>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FConv_SoftObjectReferenceToString
{
public:
	FConv_SoftObjectReferenceToString(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftObjectPtr<UObject> GetSoftObjectReference() {
		return memory.read<struct TSoftObjectPtr<UObject>>(m_addr + 0);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};class FMatrix_TransformVector4
{
public:
	FMatrix_TransformVector4(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMatrix GetM() {
		return memory.read<struct FMatrix>(m_addr + 0);
	}
	struct FVector4 GetV() {
		return memory.read<struct FVector4>(m_addr + 64);
	}
	struct FVector4 GetReturnValue() {
		return memory.read<struct FVector4>(m_addr + 80);
	}

private:
	std::uint64_t m_addr = 0;
};class FVector4Distribution
{
public:
	FVector4Distribution(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDistributionLookupTable GetTable() {
		return memory.read<struct FDistributionLookupTable>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FPerPlatformInt
{
public:
	FPerPlatformInt(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetDefault() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FComponentOnInputTouchEndSignature__DelegateSignature
{
public:
	FComponentOnInputTouchEndSignature__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class ETouchIndex GetFingerIndex() {
		return memory.read<enum class ETouchIndex>(m_addr + 0);
	}
	struct UPrimitiveComponent GetTouchedComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UPrimitiveComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FRootMotionExtractionStep
{
public:
	FRootMotionExtractionStep(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimSequence GetAnimSequence() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimSequence(ptr_addr);
	}
	float GetStartPosition() {
		return memory.read<float>(m_addr + 8);
	}
	float GetEndPosition() {
		return memory.read<float>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetPhysicsAngularVelocityInRadians
{
public:
	FGetPhysicsAngularVelocityInRadians(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FActorHitSignature__DelegateSignature
{
public:
	FActorHitSignature__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetSelfActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}
	struct AActor GetOtherActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AActor(ptr_addr);
	}
	struct FVector GetNormalImpulse() {
		return memory.read<struct FVector>(m_addr + 16);
	}
	struct FHitResult GetHit() {
		return memory.read<struct FHitResult>(m_addr + 28);
	}

private:
	std::uint64_t m_addr = 0;
};class FAsTimespan_Timespan
{
public:
	FAsTimespan_Timespan(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTimespan GetInTimespan() {
		return memory.read<struct FTimespan>(m_addr + 0);
	}
	struct FText GetReturnValue() {
		return memory.read<struct FText>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FVectorDistribution
{
public:
	FVectorDistribution(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDistributionLookupTable GetTable() {
		return memory.read<struct FDistributionLookupTable>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FReadRenderTargetRawPixel
{
public:
	FReadRenderTargetRawPixel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct UTextureRenderTarget2D GetTextureRenderTarget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UTextureRenderTarget2D(ptr_addr);
	}
	int32_t GetX() {
		return memory.read<int32_t>(m_addr + 16);
	}
	int32_t GetY() {
		return memory.read<int32_t>(m_addr + 20);
	}
	struct FLinearColor GetReturnValue() {
		return memory.read<struct FLinearColor>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FTakePointDamageSignature__DelegateSignature
{
public:
	FTakePointDamageSignature__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetDamagedActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}
	float GetDamage() {
		return memory.read<float>(m_addr + 8);
	}
	struct AController GetInstigatedBy() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct AController(ptr_addr);
	}
	struct FVector GetHitLocation() {
		return memory.read<struct FVector>(m_addr + 24);
	}
	struct UPrimitiveComponent GetFHitComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct UPrimitiveComponent(ptr_addr);
	}
	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 48);
	}
	struct FVector GetShotFromDirection() {
		return memory.read<struct FVector>(m_addr + 56);
	}
	struct UDamageType GetDamageType() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return struct UDamageType(ptr_addr);
	}
	struct AActor GetDamageCauser() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 80);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FTTVectorTrack
{
public:
	FTTVectorTrack(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UCurveVector GetCurveVector() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 32);
		return struct UCurveVector(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FBooleanNOR
{
public:
	FBooleanNOR(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetA() {
		return memory.read<bool>(m_addr + 0);
	}
	bool GetB() {
		return memory.read<bool>(m_addr + 1);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 2);
	}

private:
	std::uint64_t m_addr = 0;
};class FFloatRK4SpringInterpolator
{
public:
	FFloatRK4SpringInterpolator(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetStiffnessConstant() {
		return memory.read<float>(m_addr + 0);
	}
	float GetDampeningRatio() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FBreakTimespan2
{
public:
	FBreakTimespan2(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTimespan GetInTimespan() {
		return memory.read<struct FTimespan>(m_addr + 0);
	}
	int32_t GetDays() {
		return memory.read<int32_t>(m_addr + 8);
	}
	int32_t GetHours() {
		return memory.read<int32_t>(m_addr + 12);
	}
	int32_t GetMinutes() {
		return memory.read<int32_t>(m_addr + 16);
	}
	int32_t GetSeconds() {
		return memory.read<int32_t>(m_addr + 20);
	}
	int32_t GetFractionNano() {
		return memory.read<int32_t>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnAudioMultiEnvelopeValue__DelegateSignature
{
public:
	FOnAudioMultiEnvelopeValue__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetAverageEnvelopeValue() {
		return memory.read<float>(m_addr + 0);
	}
	float GetMaxEnvelope() {
		return memory.read<float>(m_addr + 4);
	}
	int32_t GetNumWaveInstances() {
		return memory.read<int32_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnMontageEndedMCDelegate__DelegateSignature
{
public:
	FOnMontageEndedMCDelegate__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimMontage GetMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimMontage(ptr_addr);
	}
	bool GetbInterrupted() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnAudioPlaybackPercent__DelegateSignature
{
public:
	FOnAudioPlaybackPercent__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USoundWave GetPlayingSoundWave() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct USoundWave(ptr_addr);
	}
	float GetPlaybackPercent() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetPropagateNotifiesToLinkedInstances
{
public:
	FGetPropagateNotifiesToLinkedInstances(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FFindNearestActor
{
public:
	FFindNearestActor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetOrigin() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct TArray<struct AActor> GetActorsToCheck() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct TArray<struct AActor>(ptr_addr);
	}
	float GetDistance() {
		return memory.read<float>(m_addr + 32);
	}
	struct AActor GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetActorEnableCollision
{
public:
	FGetActorEnableCollision(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FFormatArgumentData
{
public:
	FFormatArgumentData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetArgumentName() {
		return memory.read<struct FString>(m_addr + 0);
	}
	enum class EFormatArgumentType GetArgumentValueType() {
		return memory.read<enum class EFormatArgumentType>(m_addr + 16);
	}
	struct FText GetArgumentValue() {
		return memory.read<struct FText>(m_addr + 24);
	}
	int32_t GetArgumentValueInt() {
		return memory.read<int32_t>(m_addr + 48);
	}
	float GetArgumentValueFloat() {
		return memory.read<float>(m_addr + 52);
	}
	enum class ETextGender GetArgumentValueGender() {
		return memory.read<enum class ETextGender>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetUserActivity
{
public:
	FSetUserActivity(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FUserActivity GetUserActivity() {
		return memory.read<struct FUserActivity>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FAddSpectralAnalysisDelegate
{
public:
	FAddSpectralAnalysisDelegate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct TArray<struct FSoundSubmixSpectralAnalysisBandSettings> GetInBandSettings() {
		return memory.read<struct TArray<struct FSoundSubmixSpectralAnalysisBandSettings>>(m_addr + 8);
	}
	struct FDelegate GetOnSubmixSpectralAnalysisBP() {
		return memory.read<struct FDelegate>(m_addr + 24);
	}
	float GetUpdateRate() {
		return memory.read<float>(m_addr + 40);
	}
	float GetDecibelNoiseFloor() {
		return memory.read<float>(m_addr + 44);
	}
	bool GetbDoNormalize() {
		return memory.read<bool>(m_addr + 48);
	}
	bool GetbDoAutoRange() {
		return memory.read<bool>(m_addr + 49);
	}
	float GetAutoRangeAttackTime() {
		return memory.read<float>(m_addr + 52);
	}
	float GetAutoRangeReleaseTime() {
		return memory.read<float>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};class FGameSourceDir
{
public:
	FGameSourceDir(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FExpressionInput
{
public:
	FExpressionInput(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetOutputIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct FName GetInputName() {
		return memory.read<struct FName>(m_addr + 4);
	}
	struct FName GetExpressionName() {
		return memory.read<struct FName>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetSubstring
{
public:
	FGetSubstring(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetSourceString() {
		return memory.read<struct FString>(m_addr + 0);
	}
	int32_t GetStartIndex() {
		return memory.read<int32_t>(m_addr + 16);
	}
	int32_t GetLength() {
		return memory.read<int32_t>(m_addr + 20);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_GetComponentsByClass
{
public:
	FK2_GetComponentsByClass(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UActorComponent GetComponentClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return UActorComponent(ptr_addr);
	}
	struct TArray<struct UActorComponent> GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct TArray<struct UActorComponent>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetFloatCurve
{
public:
	FSetFloatCurve(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UCurveFloat GetNewFloatCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UCurveFloat(ptr_addr);
	}
	struct FName GetFloatTrackName() {
		return memory.read<struct FName>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FQuat_SetFromEuler
{
public:
	FQuat_SetFromEuler(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FQuat GetQ() {
		return memory.read<struct FQuat>(m_addr + 0);
	}
	struct FVector GetEuler() {
		return memory.read<struct FVector>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnInterpToResetDelegate__DelegateSignature
{
public:
	FOnInterpToResetDelegate__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FHitResult GetImpactResult() {
		return memory.read<struct FHitResult>(m_addr + 0);
	}
	float GetTime() {
		return memory.read<float>(m_addr + 136);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetVerticalAlignment
{
public:
	FSetVerticalAlignment(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class EVerticalTextAligment GetValue() {
		return memory.read<enum class EVerticalTextAligment>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FComponentBeginCursorOverSignature__DelegateSignature
{
public:
	FComponentBeginCursorOverSignature__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPrimitiveComponent GetTouchedComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UPrimitiveComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FMaterialAttributesInput
{
public:
	FMaterialAttributesInput(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetPropertyConnectedBitmask() {
		return memory.read<int32_t>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FActorEndPlaySignature__DelegateSignature
{
public:
	FActorEndPlaySignature__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}
	enum class EEndPlayReason GetEndPlayReason() {
		return memory.read<enum class EEndPlayReason>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsStandalone
{
public:
	FIsStandalone(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FExpressionOutput
{
public:
	FExpressionOutput(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetOutputName() {
		return memory.read<struct FName>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FAnimNode_ApplyMeshSpaceAdditive
{
public:
	FAnimNode_ApplyMeshSpaceAdditive(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FPoseLink GetBase() {
		return memory.read<struct FPoseLink>(m_addr + 16);
	}
	struct FPoseLink GetAdditive() {
		return memory.read<struct FPoseLink>(m_addr + 32);
	}
	enum class EAnimAlphaInputType GetAlphaInputType() {
		return memory.read<enum class EAnimAlphaInputType>(m_addr + 48);
	}
	float GetAlpha() {
		return memory.read<float>(m_addr + 52);
	}
	char GetbAlphaBoolEnabled() {
		return memory.read<char>(m_addr + 56);
	}
	struct FInputAlphaBoolBlend GetAlphaBoolBlend() {
		return memory.read<struct FInputAlphaBoolBlend>(m_addr + 64);
	}
	struct FName GetAlphaCurveName() {
		return memory.read<struct FName>(m_addr + 136);
	}
	struct FInputScaleBias GetAlphaScaleBias() {
		return memory.read<struct FInputScaleBias>(m_addr + 144);
	}
	struct FInputScaleBiasClamp GetAlphaScaleBiasClamp() {
		return memory.read<struct FInputScaleBiasClamp>(m_addr + 152);
	}
	int32_t GetLODThreshold() {
		return memory.read<int32_t>(m_addr + 200);
	}

private:
	std::uint64_t m_addr = 0;
};class FPredictProjectilePathPointData
{
public:
	FPredictProjectilePathPointData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetVelocity() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	float GetTime() {
		return memory.read<float>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetRelevantAnimTimeFraction
{
public:
	FGetRelevantAnimTimeFraction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetMachineIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetStateIndex() {
		return memory.read<int32_t>(m_addr + 4);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FActorBeginCursorOverSignature__DelegateSignature
{
public:
	FActorBeginCursorOverSignature__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetTouchedActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FMaterialInput
{
public:
	FMaterialInput(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetOutputIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct FName GetInputName() {
		return memory.read<struct FName>(m_addr + 4);
	}
	struct FName GetExpressionName() {
		return memory.read<struct FName>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_TextSize
{
public:
	FK2_TextSize(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UFont GetRenderFont() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UFont(ptr_addr);
	}
	struct FString GetRenderText() {
		return memory.read<struct FString>(m_addr + 8);
	}
	struct FVector2D GetScale() {
		return memory.read<struct FVector2D>(m_addr + 24);
	}
	struct FVector2D GetReturnValue() {
		return memory.read<struct FVector2D>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetPlaneConstraintAxisSetting
{
public:
	FSetPlaneConstraintAxisSetting(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class EPlaneConstraintAxisSetting GetNewAxisSetting() {
		return memory.read<enum class EPlaneConstraintAxisSetting>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FActorEndTouchOverSignature__DelegateSignature
{
public:
	FActorEndTouchOverSignature__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class ETouchIndex GetFingerIndex() {
		return memory.read<enum class ETouchIndex>(m_addr + 0);
	}
	struct AActor GetTouchedActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FClientSpawnCameraLensEffect
{
public:
	FClientSpawnCameraLensEffect(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	AEmitterCameraLensEffectBase GetLensEffectEmitterClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return AEmitterCameraLensEffectBase(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FColorMaterialInput
{
public:
	FColorMaterialInput(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FInputAxisHandlerDynamicSignature__DelegateSignature
{
public:
	FInputAxisHandlerDynamicSignature__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetAxisValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetEnablePhysicsBlending
{
public:
	FSetEnablePhysicsBlending(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbNewBlendPhysics() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FComponentCollisionSettingsChangedSignature__DelegateSignature
{
public:
	FComponentCollisionSettingsChangedSignature__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPrimitiveComponent GetChangedComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UPrimitiveComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FConstraintBrokenSignature__DelegateSignature
{
public:
	FConstraintBrokenSignature__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetConstraintIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetComponentTickEnabled
{
public:
	FSetComponentTickEnabled(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbEnabled() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCapsuleTraceSingleForObjects
{
public:
	FCapsuleTraceSingleForObjects(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FVector GetStart() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	struct FVector GetEnd() {
		return memory.read<struct FVector>(m_addr + 20);
	}
	float GetRadius() {
		return memory.read<float>(m_addr + 32);
	}
	float GetHalfHeight() {
		return memory.read<float>(m_addr + 36);
	}
	struct TArray<enum class EObjectTypeQuery> GetObjectTypes() {
		return memory.read<struct TArray<enum class EObjectTypeQuery>>(m_addr + 40);
	}
	bool GetbTraceComplex() {
		return memory.read<bool>(m_addr + 56);
	}
	struct TArray<struct AActor> GetActorsToIgnore() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 64);
		return struct TArray<struct AActor>(ptr_addr);
	}
	enum class EDrawDebugTrace GetDrawDebugType() {
		return memory.read<enum class EDrawDebugTrace>(m_addr + 80);
	}
	struct FHitResult GetOutHit() {
		return memory.read<struct FHitResult>(m_addr + 84);
	}
	bool GetbIgnoreSelf() {
		return memory.read<bool>(m_addr + 220);
	}
	struct FLinearColor GetTraceColor() {
		return memory.read<struct FLinearColor>(m_addr + 224);
	}
	struct FLinearColor GetTraceHitColor() {
		return memory.read<struct FLinearColor>(m_addr + 240);
	}
	float GetDrawTime() {
		return memory.read<float>(m_addr + 256);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 260);
	}

private:
	std::uint64_t m_addr = 0;
};class FCameraShakeDuration
{
public:
	FCameraShakeDuration(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetDuration() {
		return memory.read<float>(m_addr + 0);
	}
	enum class ECameraShakeDurationType GetType() {
		return memory.read<enum class ECameraShakeDurationType>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FScalarMaterialInput
{
public:
	FScalarMaterialInput(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FBoxTraceMultiForObjects
{
public:
	FBoxTraceMultiForObjects(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FVector GetStart() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	struct FVector GetEnd() {
		return memory.read<struct FVector>(m_addr + 20);
	}
	struct FVector GetHalfSize() {
		return memory.read<struct FVector>(m_addr + 32);
	}
	struct FRotator GetOrientation() {
		return memory.read<struct FRotator>(m_addr + 44);
	}
	struct TArray<enum class EObjectTypeQuery> GetObjectTypes() {
		return memory.read<struct TArray<enum class EObjectTypeQuery>>(m_addr + 56);
	}
	bool GetbTraceComplex() {
		return memory.read<bool>(m_addr + 72);
	}
	struct TArray<struct AActor> GetActorsToIgnore() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 80);
		return struct TArray<struct AActor>(ptr_addr);
	}
	enum class EDrawDebugTrace GetDrawDebugType() {
		return memory.read<enum class EDrawDebugTrace>(m_addr + 96);
	}
	struct TArray<struct FHitResult> GetOutHits() {
		return memory.read<struct TArray<struct FHitResult>>(m_addr + 104);
	}
	bool GetbIgnoreSelf() {
		return memory.read<bool>(m_addr + 120);
	}
	struct FLinearColor GetTraceColor() {
		return memory.read<struct FLinearColor>(m_addr + 124);
	}
	struct FLinearColor GetTraceHitColor() {
		return memory.read<struct FLinearColor>(m_addr + 140);
	}
	float GetDrawTime() {
		return memory.read<float>(m_addr + 156);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 160);
	}

private:
	std::uint64_t m_addr = 0;
};class FServerChangeName
{
public:
	FServerChangeName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetS() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FShadingModelMaterialInput
{
public:
	FShadingModelMaterialInput(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FMinOfFloatArray
{
public:
	FMinOfFloatArray(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<float> GetFloatArray() {
		return memory.read<struct TArray<float>>(m_addr + 0);
	}
	int32_t GetIndexOfMinValue() {
		return memory.read<int32_t>(m_addr + 16);
	}
	float GetMinValue() {
		return memory.read<float>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FEvaluateCurveTableRow
{
public:
	FEvaluateCurveTableRow(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UCurveTable GetCurveTable() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UCurveTable(ptr_addr);
	}
	struct FName GetRowName() {
		return memory.read<struct FName>(m_addr + 8);
	}
	float GetInXY() {
		return memory.read<float>(m_addr + 16);
	}
	enum class EEvaluateCurveTableResult GetOutResult() {
		return memory.read<enum class EEvaluateCurveTableResult>(m_addr + 20);
	}
	float GetOutXY() {
		return memory.read<float>(m_addr + 24);
	}
	struct FString GetContextString() {
		return memory.read<struct FString>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FRichCurveKey
{
public:
	FRichCurveKey(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class ERichCurveInterpMode GetInterpMode() {
		return memory.read<enum class ERichCurveInterpMode>(m_addr + 0);
	}
	enum class ERichCurveTangentMode GetTangentMode() {
		return memory.read<enum class ERichCurveTangentMode>(m_addr + 1);
	}
	enum class ERichCurveTangentWeightMode GetTangentWeightMode() {
		return memory.read<enum class ERichCurveTangentWeightMode>(m_addr + 2);
	}
	float GetTime() {
		return memory.read<float>(m_addr + 4);
	}
	float GetValue() {
		return memory.read<float>(m_addr + 8);
	}
	float GetArriveTangent() {
		return memory.read<float>(m_addr + 12);
	}
	float GetArriveTangentWeight() {
		return memory.read<float>(m_addr + 16);
	}
	float GetLeaveTangent() {
		return memory.read<float>(m_addr + 20);
	}
	float GetLeaveTangentWeight() {
		return memory.read<float>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FMovementProperties
{
public:
	FMovementProperties(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	char GetbCanCrouch() {
		return memory.read<char>(m_addr + 0);
	}
	char GetbCanJump() {
		return memory.read<char>(m_addr + 0);
	}
	char GetbCanWalk() {
		return memory.read<char>(m_addr + 0);
	}
	char GetbCanSwim() {
		return memory.read<char>(m_addr + 0);
	}
	char GetbCanFly() {
		return memory.read<char>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCreateVectorFromYawPitch
{
public:
	FCreateVectorFromYawPitch(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetYaw() {
		return memory.read<float>(m_addr + 0);
	}
	float GetPitch() {
		return memory.read<float>(m_addr + 4);
	}
	float GetLength() {
		return memory.read<float>(m_addr + 8);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FBreakRotator
{
public:
	FBreakRotator(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRotator GetInRot() {
		return memory.read<struct FRotator>(m_addr + 0);
	}
	float GetRoll() {
		return memory.read<float>(m_addr + 12);
	}
	float GetPitch() {
		return memory.read<float>(m_addr + 16);
	}
	float GetYaw() {
		return memory.read<float>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetReverseCulling
{
public:
	FSetReverseCulling(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReverseCulling() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetBloomThreshold
{
public:
	FSetBloomThreshold(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FVectorMaterialInput
{
public:
	FVectorMaterialInput(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FSetAudioBusSendPreEffect
{
public:
	FSetAudioBusSendPreEffect(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAudioBus GetAudioBus() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAudioBus(ptr_addr);
	}
	float GetAudioBusSendLevel() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FPlatformInterfaceDelegateResult
{
public:
	FPlatformInterfaceDelegateResult(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbSuccessful() {
		return memory.read<bool>(m_addr + 0);
	}
	struct FPlatformInterfaceData GetData() {
		return memory.read<struct FPlatformInterfaceData>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FAnimationTransitionBetweenStates
{
public:
	FAnimationTransitionBetweenStates(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetPreviousState() {
		return memory.read<int32_t>(m_addr + 8);
	}
	int32_t GetNextState() {
		return memory.read<int32_t>(m_addr + 12);
	}
	float GetCrossfadeDuration() {
		return memory.read<float>(m_addr + 16);
	}
	int32_t GetStartNotify() {
		return memory.read<int32_t>(m_addr + 20);
	}
	int32_t GetEndNotify() {
		return memory.read<int32_t>(m_addr + 24);
	}
	int32_t GetInterruptNotify() {
		return memory.read<int32_t>(m_addr + 28);
	}
	enum class EAlphaBlendOption GetBlendMode() {
		return memory.read<enum class EAlphaBlendOption>(m_addr + 32);
	}
	struct UCurveFloat GetCustomCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct UCurveFloat(ptr_addr);
	}
	struct UBlendProfile GetBlendProfile() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct UBlendProfile(ptr_addr);
	}
	enum class ETransitionLogicType GetLogicType() {
		return memory.read<enum class ETransitionLogicType>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};class FVector2MaterialInput
{
public:
	FVector2MaterialInput(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FActorComponentActivatedSignature__DelegateSignature
{
public:
	FActorComponentActivatedSignature__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UActorComponent GetComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UActorComponent(ptr_addr);
	}
	bool GetbReset() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FRemoveTickPrerequisiteActor
{
public:
	FRemoveTickPrerequisiteActor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetPrerequisiteActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSpawnEmitterAtLocation
{
public:
	FSpawnEmitterAtLocation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct UParticleSystem GetEmitterTemplate() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UParticleSystem(ptr_addr);
	}
	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 16);
	}
	struct FRotator GetRotation() {
		return memory.read<struct FRotator>(m_addr + 28);
	}
	struct FVector GetScale() {
		return memory.read<struct FVector>(m_addr + 40);
	}
	bool GetbAutoDestroy() {
		return memory.read<bool>(m_addr + 52);
	}
	enum class EPSCPoolMethod GetPoolingMethod() {
		return memory.read<enum class EPSCPoolMethod>(m_addr + 53);
	}
	bool GetbAutoActivateSystem() {
		return memory.read<bool>(m_addr + 54);
	}
	struct UParticleSystemComponent GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct UParticleSystemComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSpawnDialogueAtLocation
{
public:
	FSpawnDialogueAtLocation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct UDialogueWave GetDialogue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UDialogueWave(ptr_addr);
	}
	struct FDialogueContext GetContext() {
		return memory.read<struct FDialogueContext>(m_addr + 16);
	}
	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 40);
	}
	struct FRotator GetRotation() {
		return memory.read<struct FRotator>(m_addr + 52);
	}
	float GetVolumeMultiplier() {
		return memory.read<float>(m_addr + 64);
	}
	float GetPitchMultiplier() {
		return memory.read<float>(m_addr + 68);
	}
	float GetStartTime() {
		return memory.read<float>(m_addr + 72);
	}
	struct USoundAttenuation GetAttenuationSettings() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 80);
		return struct USoundAttenuation(ptr_addr);
	}
	bool GetbAutoDestroy() {
		return memory.read<bool>(m_addr + 88);
	}
	struct UAudioComponent GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 96);
		return struct UAudioComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetDisplayName
{
public:
	FGetDisplayName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetUnscaledCapsuleSize
{
public:
	FGetUnscaledCapsuleSize(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetOutRadius() {
		return memory.read<float>(m_addr + 0);
	}
	float GetOutHalfHeight() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FActorComponentDeactivateSignature__DelegateSignature
{
public:
	FActorComponentDeactivateSignature__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UActorComponent GetComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UActorComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_AddWorldTransformKeepScale
{
public:
	FK2_AddWorldTransformKeepScale(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTransform GetDeltaTransform() {
		return memory.read<struct FTransform>(m_addr + 0);
	}
	bool GetbSweep() {
		return memory.read<bool>(m_addr + 48);
	}
	struct FHitResult GetSweepHitResult() {
		return memory.read<struct FHitResult>(m_addr + 52);
	}
	bool GetbTeleport() {
		return memory.read<bool>(m_addr + 188);
	}

private:
	std::uint64_t m_addr = 0;
};class FSkeletalMeshComponentClothTickFunction
{
public:
	FSkeletalMeshComponentClothTickFunction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FComponentEndTouchOverSignature__DelegateSignature
{
public:
	FComponentEndTouchOverSignature__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class ETouchIndex GetFingerIndex() {
		return memory.read<enum class ETouchIndex>(m_addr + 0);
	}
	struct UPrimitiveComponent GetTouchedComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UPrimitiveComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FEditedDocumentInfo
{
public:
	FEditedDocumentInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FSoftObjectPath GetEditedObjectPath() {
		return memory.read<struct FSoftObjectPath>(m_addr + 0);
	}
	struct FVector2D GetSavedViewOffset() {
		return memory.read<struct FVector2D>(m_addr + 24);
	}
	float GetSavedZoomAmount() {
		return memory.read<float>(m_addr + 32);
	}
	struct UObject GetEditedObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct UObject(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetWalkableSlopeOverride
{
public:
	FGetWalkableSlopeOverride(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FWalkableSlopeOverride GetReturnValue() {
		return memory.read<struct FWalkableSlopeOverride>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetComponentVelocity
{
public:
	FGetComponentVelocity(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsBoneHiddenByName
{
public:
	FIsBoneHiddenByName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FPhysicsVolumeChanged__DelegateSignature
{
public:
	FPhysicsVolumeChanged__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APhysicsVolume GetNewVolume() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APhysicsVolume(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FDisableInput
{
public:
	FDisableInput(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APlayerController GetPlayerController() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APlayerController(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetLinkedAnimLayerInstanceByGroup
{
public:
	FGetLinkedAnimLayerInstanceByGroup(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetInGroup() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct UAnimInstance GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UAnimInstance(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FAssetManagerSearchRules
{
public:
	FAssetManagerSearchRules(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FString> GetAssetScanPaths() {
		return memory.read<struct TArray<struct FString>>(m_addr + 0);
	}
	struct TArray<struct FString> GetIncludePatterns() {
		return memory.read<struct TArray<struct FString>>(m_addr + 16);
	}
	struct TArray<struct FString> GetExcludePatterns() {
		return memory.read<struct TArray<struct FString>>(m_addr + 32);
	}
	UObject GetAssetBaseClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return UObject(ptr_addr);
	}
	bool GetbHasBlueprintClasses() {
		return memory.read<bool>(m_addr + 56);
	}
	bool GetbForceSynchronousScan() {
		return memory.read<bool>(m_addr + 57);
	}
	bool GetbSkipVirtualPathExpansion() {
		return memory.read<bool>(m_addr + 58);
	}
	bool GetbSkipManagerIncludeCheck() {
		return memory.read<bool>(m_addr + 59);
	}

private:
	std::uint64_t m_addr = 0;
};class FParseParam
{
public:
	FParseParam(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetinString() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FString GetInParam() {
		return memory.read<struct FString>(m_addr + 16);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FMontage_JumpToSection
{
public:
	FMontage_JumpToSection(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetSectionName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct UAnimMontage GetMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UAnimMontage(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FPrimaryAssetRulesCustomOverride
{
public:
	FPrimaryAssetRulesCustomOverride(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FPrimaryAssetType GetPrimaryAssetType() {
		return memory.read<struct FPrimaryAssetType>(m_addr + 0);
	}
	struct FDirectoryPath GetFilterDirectory() {
		return memory.read<struct FDirectoryPath>(m_addr + 8);
	}
	struct FString GetFilterString() {
		return memory.read<struct FString>(m_addr + 24);
	}
	struct FPrimaryAssetRules GetRules() {
		return memory.read<struct FPrimaryAssetRules>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsRootComponentChanged__DelegateSignature
{
public:
	FIsRootComponentChanged__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USceneComponent GetUpdatedComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct USceneComponent(ptr_addr);
	}
	bool GetbIsRootComponent() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetFadeInStartDelay
{
public:
	FGetFadeInStartDelay(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetUpVectorAtDistanceAlongSpline
{
public:
	FGetUpVectorAtDistanceAlongSpline(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetDistance() {
		return memory.read<float>(m_addr + 0);
	}
	enum class ESplineCoordinateSpace GetCoordinateSpace() {
		return memory.read<enum class ESplineCoordinateSpace>(m_addr + 4);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnQuartzMetronomeEventBP__DelegateSignature
{
public:
	FOnQuartzMetronomeEventBP__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetClockName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	enum class EQuartzCommandQuantization GetQuantizationType() {
		return memory.read<enum class EQuartzCommandQuantization>(m_addr + 8);
	}
	int32_t GetNumBars() {
		return memory.read<int32_t>(m_addr + 12);
	}
	int32_t GetBeat() {
		return memory.read<int32_t>(m_addr + 16);
	}
	float GetBeatFraction() {
		return memory.read<float>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetHiddenInGame
{
public:
	FSetHiddenInGame(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetNewHidden() {
		return memory.read<bool>(m_addr + 0);
	}
	bool GetbPropagateToChildren() {
		return memory.read<bool>(m_addr + 1);
	}

private:
	std::uint64_t m_addr = 0;
};class FLayerActorStats
{
public:
	FLayerActorStats(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UObject GetType() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return UObject(ptr_addr);
	}
	int32_t GetTotal() {
		return memory.read<int32_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FHasBegunPlay
{
public:
	FHasBegunPlay(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FKey_GetNavigationDirectionFromAnalog
{
public:
	FKey_GetNavigationDirectionFromAnalog(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FAnalogInputEvent GetInAnalogEvent() {
		return memory.read<struct FAnalogInputEvent>(m_addr + 0);
	}
	enum class EUINavigation GetReturnValue() {
		return memory.read<enum class EUINavigation>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};class FCreateTempFilename
{
public:
	FCreateTempFilename(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetPath() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FString GetPrefix() {
		return memory.read<struct FString>(m_addr + 16);
	}
	struct FString GetExtension() {
		return memory.read<struct FString>(m_addr + 32);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetShadowBias
{
public:
	FSetShadowBias(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FTakeAnyDamageSignature__DelegateSignature
{
public:
	FTakeAnyDamageSignature__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetDamagedActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}
	float GetDamage() {
		return memory.read<float>(m_addr + 8);
	}
	struct UDamageType GetDamageType() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UDamageType(ptr_addr);
	}
	struct AController GetInstigatedBy() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 24);
		return struct AController(ptr_addr);
	}
	struct AActor GetDamageCauser() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 32);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetBandwidthLimit
{
public:
	FSetBandwidthLimit(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetAsyncIOBandwidthLimit() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FTakeRadialDamageSignature__DelegateSignature
{
public:
	FTakeRadialDamageSignature__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetDamagedActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}
	float GetDamage() {
		return memory.read<float>(m_addr + 8);
	}
	struct UDamageType GetDamageType() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UDamageType(ptr_addr);
	}
	struct FVector GetOrigin() {
		return memory.read<struct FVector>(m_addr + 24);
	}
	struct FHitResult GetHitInfo() {
		return memory.read<struct FHitResult>(m_addr + 36);
	}
	struct AController GetInstigatedBy() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 176);
		return struct AController(ptr_addr);
	}
	struct AActor GetDamageCauser() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 184);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FMinimalViewInfo
{
public:
	FMinimalViewInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FRotator GetRotation() {
		return memory.read<struct FRotator>(m_addr + 12);
	}
	float GetFOV() {
		return memory.read<float>(m_addr + 24);
	}
	float GetDesiredFOV() {
		return memory.read<float>(m_addr + 28);
	}
	float GetOrthoWidth() {
		return memory.read<float>(m_addr + 32);
	}
	float GetOrthoNearClipPlane() {
		return memory.read<float>(m_addr + 36);
	}
	float GetOrthoFarClipPlane() {
		return memory.read<float>(m_addr + 40);
	}
	float GetAspectRatio() {
		return memory.read<float>(m_addr + 44);
	}
	char GetbConstrainAspectRatio() {
		return memory.read<char>(m_addr + 48);
	}
	char GetbUseFieldOfViewForLOD() {
		return memory.read<char>(m_addr + 48);
	}
	enum class ECameraProjectionMode GetProjectionMode() {
		return memory.read<enum class ECameraProjectionMode>(m_addr + 52);
	}
	float GetPostProcessBlendWeight() {
		return memory.read<float>(m_addr + 56);
	}
	struct FPostProcessSettings GetPostProcessSettings() {
		return memory.read<struct FPostProcessSettings>(m_addr + 64);
	}
	struct FVector2D GetOffCenterProjectionOffset() {
		return memory.read<struct FVector2D>(m_addr + 1552);
	}
	char GetbSkipDepthOfFieldTAA() {
		return memory.read<char>(m_addr + 1632);
	}
	enum class ECameraMotionBlurMode GetMotionBlurMode() {
		return memory.read<enum class ECameraMotionBlurMode>(m_addr + 1636);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetPrimaryAssetIdFromSoftClassReference
{
public:
	FGetPrimaryAssetIdFromSoftClassReference(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftClassPtr<UObject> GetSoftClassReference() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 0);
	}
	struct FPrimaryAssetId GetReturnValue() {
		return memory.read<struct FPrimaryAssetId>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetColorPropertyByName
{
public:
	FSetColorPropertyByName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FName GetPropertyName() {
		return memory.read<struct FName>(m_addr + 8);
	}
	struct FColor GetValue() {
		return memory.read<struct FColor>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FDot_VectorVector
{
public:
	FDot_VectorVector(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetA() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetB() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FVector_NetQuantize
{
public:
	FVector_NetQuantize(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FGetNotifyName
{
public:
	FGetNotifyName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCreatePlayer
{
public:
	FCreatePlayer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	int32_t GetControllerId() {
		return memory.read<int32_t>(m_addr + 8);
	}
	bool GetbSpawnPlayerController() {
		return memory.read<bool>(m_addr + 12);
	}
	struct APlayerController GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct APlayerController(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FVector_NetQuantizeNormal
{
public:
	FVector_NetQuantizeNormal(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FGetScreenResolution
{
public:
	FGetScreenResolution(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FIntPoint GetReturnValue() {
		return memory.read<struct FIntPoint>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FKAggregateGeom
{
public:
	FKAggregateGeom(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FKSphereElem> GetSphereElems() {
		return memory.read<struct TArray<struct FKSphereElem>>(m_addr + 0);
	}
	struct TArray<struct FKBoxElem> GetBoxElems() {
		return memory.read<struct TArray<struct FKBoxElem>>(m_addr + 16);
	}
	struct TArray<struct FKSphylElem> GetSphylElems() {
		return memory.read<struct TArray<struct FKSphylElem>>(m_addr + 32);
	}
	struct TArray<struct FKConvexElem> GetConvexElems() {
		return memory.read<struct TArray<struct FKConvexElem>>(m_addr + 48);
	}
	struct TArray<struct FKTaperedCapsuleElem> GetTaperedCapsuleElems() {
		return memory.read<struct TArray<struct FKTaperedCapsuleElem>>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};class FComponentBeginTouchOverSignature__DelegateSignature
{
public:
	FComponentBeginTouchOverSignature__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class ETouchIndex GetFingerIndex() {
		return memory.read<enum class ETouchIndex>(m_addr + 0);
	}
	struct UPrimitiveComponent GetTouchedComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UPrimitiveComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FLensBloomSettings
{
public:
	FLensBloomSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FGaussianSumBloomSettings GetGaussianSum() {
		return memory.read<struct FGaussianSumBloomSettings>(m_addr + 0);
	}
	struct FConvolutionBloomSettings GetConvolution() {
		return memory.read<struct FConvolutionBloomSettings>(m_addr + 136);
	}
	enum class EBloomMethod GetMethod() {
		return memory.read<enum class EBloomMethod>(m_addr + 176);
	}

private:
	std::uint64_t m_addr = 0;
};class FMaterialShadingModelField
{
public:
	FMaterialShadingModelField(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint16_t GetShadingModelField() {
		return memory.read<uint16_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCInterpTo
{
public:
	FCInterpTo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLinearColor GetCurrent() {
		return memory.read<struct FLinearColor>(m_addr + 0);
	}
	struct FLinearColor GetTarget() {
		return memory.read<struct FLinearColor>(m_addr + 16);
	}
	float GetDeltaTime() {
		return memory.read<float>(m_addr + 32);
	}
	float GetInterpSpeed() {
		return memory.read<float>(m_addr + 36);
	}
	struct FLinearColor GetReturnValue() {
		return memory.read<struct FLinearColor>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};class FCreateAndSetMaterialInstanceDynamic
{
public:
	FCreateAndSetMaterialInstanceDynamic(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetElementIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct UMaterialInstanceDynamic GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UMaterialInstanceDynamic(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FCopyPoseFromSkeletalComponent
{
public:
	FCopyPoseFromSkeletalComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USkeletalMeshComponent GetInComponentToCopy() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct USkeletalMeshComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FDivide_VectorVector
{
public:
	FDivide_VectorVector(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetA() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetB() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetActorHiddenInGame
{
public:
	FSetActorHiddenInGame(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbNewHidden() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FBoxOverlapComponents
{
public:
	FBoxOverlapComponents(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FVector GetBoxPos() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	struct FVector GetExtent() {
		return memory.read<struct FVector>(m_addr + 20);
	}
	struct TArray<enum class EObjectTypeQuery> GetObjectTypes() {
		return memory.read<struct TArray<enum class EObjectTypeQuery>>(m_addr + 32);
	}
	UObject GetComponentClassFilter() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return UObject(ptr_addr);
	}
	struct TArray<struct AActor> GetActorsToIgnore() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct TArray<struct AActor>(ptr_addr);
	}
	struct TArray<struct UPrimitiveComponent> GetOutComponents() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return struct TArray<struct UPrimitiveComponent>(ptr_addr);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 88);
	}

private:
	std::uint64_t m_addr = 0;
};class FHasMarkerBeenHitThisFrame
{
public:
	FHasMarkerBeenHitThisFrame(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetSyncGroup() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FName GetMarkerName() {
		return memory.read<struct FName>(m_addr + 8);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetConstraintReferenceOrientation
{
public:
	FSetConstraintReferenceOrientation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class EConstraintFrame GetFrame() {
		return memory.read<enum class EConstraintFrame>(m_addr + 0);
	}
	struct FVector GetPriAxis() {
		return memory.read<struct FVector>(m_addr + 4);
	}
	struct FVector GetSecAxis() {
		return memory.read<struct FVector>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FActorBeginOverlapSignature__DelegateSignature
{
public:
	FActorBeginOverlapSignature__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetOverlappedActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}
	struct AActor GetOtherActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnTimelineVector__DelegateSignature
{
public:
	FOnTimelineVector__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetOutput() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FInputScaleBiasClamp
{
public:
	FInputScaleBiasClamp(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbMapRange() {
		return memory.read<bool>(m_addr + 0);
	}
	bool GetbClampResult() {
		return memory.read<bool>(m_addr + 1);
	}
	bool GetbInterpResult() {
		return memory.read<bool>(m_addr + 2);
	}
	struct FInputRange GetInRange() {
		return memory.read<struct FInputRange>(m_addr + 4);
	}
	struct FInputRange GetOutRange() {
		return memory.read<struct FInputRange>(m_addr + 12);
	}
	float GetScale() {
		return memory.read<float>(m_addr + 20);
	}
	float GetBias() {
		return memory.read<float>(m_addr + 24);
	}
	float GetClampMin() {
		return memory.read<float>(m_addr + 28);
	}
	float GetClampMax() {
		return memory.read<float>(m_addr + 32);
	}
	float GetInterpSpeedIncreasing() {
		return memory.read<float>(m_addr + 36);
	}
	float GetInterpSpeedDecreasing() {
		return memory.read<float>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};class FAddImpulseAtLocation
{
public:
	FAddImpulseAtLocation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetImpulse() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FVector_ClampSizeMax2D
{
public:
	FVector_ClampSizeMax2D(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetA() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	float GetMax() {
		return memory.read<float>(m_addr + 12);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FBlueprintComponentDelegateBinding
{
public:
	FBlueprintComponentDelegateBinding(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetComponentPropertyName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FName GetDelegatePropertyName() {
		return memory.read<struct FName>(m_addr + 8);
	}
	struct FName GetFunctionNameToBind() {
		return memory.read<struct FName>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FActorEndOverlapSignature__DelegateSignature
{
public:
	FActorEndOverlapSignature__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetOverlappedActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}
	struct AActor GetOtherActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FMontage_GetPlayRate
{
public:
	FMontage_GetPlayRate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimMontage GetMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimMontage(ptr_addr);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSpawnSound2D
{
public:
	FSpawnSound2D(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct USoundBase GetSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct USoundBase(ptr_addr);
	}
	float GetVolumeMultiplier() {
		return memory.read<float>(m_addr + 16);
	}
	float GetPitchMultiplier() {
		return memory.read<float>(m_addr + 20);
	}
	float GetStartTime() {
		return memory.read<float>(m_addr + 24);
	}
	struct USoundConcurrency GetConcurrencySettings() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 32);
		return struct USoundConcurrency(ptr_addr);
	}
	bool GetbPersistAcrossLevelTransition() {
		return memory.read<bool>(m_addr + 40);
	}
	bool GetbAutoDestroy() {
		return memory.read<bool>(m_addr + 41);
	}
	struct UAudioComponent GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct UAudioComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FBlueprintUpdateAnimation
{
public:
	FBlueprintUpdateAnimation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetDeltaTimeX() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetPropertyNameLocalizationPaths
{
public:
	FGetPropertyNameLocalizationPaths(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FString> GetReturnValue() {
		return memory.read<struct TArray<struct FString>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FBatchedPoint
{
public:
	FBatchedPoint(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector Getposition() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FLinearColor GetColor() {
		return memory.read<struct FLinearColor>(m_addr + 12);
	}
	float GetPointSize() {
		return memory.read<float>(m_addr + 28);
	}
	float GetRemainingLifeTime() {
		return memory.read<float>(m_addr + 32);
	}
	char GetDepthPriority() {
		return memory.read<char>(m_addr + 36);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnLowPowerModeDelegate__DelegateSignature
{
public:
	FOnLowPowerModeDelegate__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbInLowPowerMode() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FActorEndCursorOverSignature__DelegateSignature
{
public:
	FActorEndCursorOverSignature__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetTouchedActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FWalkableSlopeOverride
{
public:
	FWalkableSlopeOverride(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class EWalkableSlopeBehavior GetWalkableSlopeBehavior() {
		return memory.read<enum class EWalkableSlopeBehavior>(m_addr + 0);
	}
	float GetWalkableSlopeAngle() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FDrawDebugBox
{
public:
	FDrawDebugBox(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FVector GetCenter() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	struct FVector GetExtent() {
		return memory.read<struct FVector>(m_addr + 20);
	}
	struct FLinearColor GetLineColor() {
		return memory.read<struct FLinearColor>(m_addr + 32);
	}
	struct FRotator GetRotation() {
		return memory.read<struct FRotator>(m_addr + 48);
	}
	float GetDuration() {
		return memory.read<float>(m_addr + 60);
	}
	float GetThickness() {
		return memory.read<float>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};class FClientPlaySound
{
public:
	FClientPlaySound(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USoundBase GetSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct USoundBase(ptr_addr);
	}
	float GetVolumeMultiplier() {
		return memory.read<float>(m_addr + 8);
	}
	float GetPitchMultiplier() {
		return memory.read<float>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FActorOnClickedSignature__DelegateSignature
{
public:
	FActorOnClickedSignature__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetTouchedActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}
	struct FKey GetButtonPressed() {
		return memory.read<struct FKey>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSphereOverlapComponents
{
public:
	FSphereOverlapComponents(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FVector GetSpherePos() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	float GetSphereRadius() {
		return memory.read<float>(m_addr + 20);
	}
	struct TArray<enum class EObjectTypeQuery> GetObjectTypes() {
		return memory.read<struct TArray<enum class EObjectTypeQuery>>(m_addr + 24);
	}
	UObject GetComponentClassFilter() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return UObject(ptr_addr);
	}
	struct TArray<struct AActor> GetActorsToIgnore() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct TArray<struct AActor>(ptr_addr);
	}
	struct TArray<struct UPrimitiveComponent> GetOutComponents() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 64);
		return struct TArray<struct UPrimitiveComponent>(ptr_addr);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 80);
	}

private:
	std::uint64_t m_addr = 0;
};class FPossess
{
public:
	FPossess(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APawn GetInPawn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APawn(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FActorOnReleasedSignature__DelegateSignature
{
public:
	FActorOnReleasedSignature__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetTouchedActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}
	struct FKey GetButtonReleased() {
		return memory.read<struct FKey>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetTemperature
{
public:
	FSetTemperature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewTemperature() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FLoadAsset
{
public:
	FLoadAsset(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct TSoftObjectPtr<UObject> GetAsset() {
		return memory.read<struct TSoftObjectPtr<UObject>>(m_addr + 8);
	}
	struct FDelegate GetOnLoaded() {
		return memory.read<struct FDelegate>(m_addr + 48);
	}
	struct FLatentActionInfo GetLatentInfo() {
		return memory.read<struct FLatentActionInfo>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};class FRichCurve
{
public:
	FRichCurve(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FRichCurveKey> GetKeys() {
		return memory.read<struct TArray<struct FRichCurveKey>>(m_addr + 112);
	}

private:
	std::uint64_t m_addr = 0;
};class FActorOnInputTouchEndSignature__DelegateSignature
{
public:
	FActorOnInputTouchEndSignature__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class ETouchIndex GetFingerIndex() {
		return memory.read<enum class ETouchIndex>(m_addr + 0);
	}
	struct AActor GetTouchedActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetGameMode
{
public:
	FGetGameMode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct AGameModeBase GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AGameModeBase(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetSquaredHorizontalDistanceTo
{
public:
	FGetSquaredHorizontalDistanceTo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetOtherActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FCapsuleTouched
{
public:
	FCapsuleTouched(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPrimitiveComponent GetOverlappedComp() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UPrimitiveComponent(ptr_addr);
	}
	struct AActor GetOther() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AActor(ptr_addr);
	}
	struct UPrimitiveComponent GetOtherComp() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UPrimitiveComponent(ptr_addr);
	}
	int32_t GetOtherBodyIndex() {
		return memory.read<int32_t>(m_addr + 24);
	}
	bool GetbFromSweep() {
		return memory.read<bool>(m_addr + 28);
	}
	struct FHitResult GetSweepResult() {
		return memory.read<struct FHitResult>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FVector_Normalize
{
public:
	FVector_Normalize(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetA() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	float GetTolerance() {
		return memory.read<float>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FActorOnInputTouchBeginSignature__DelegateSignature
{
public:
	FActorOnInputTouchBeginSignature__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class ETouchIndex GetFingerIndex() {
		return memory.read<enum class ETouchIndex>(m_addr + 0);
	}
	struct AActor GetTouchedActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FConv_VectorToTransform
{
public:
	FConv_VectorToTransform(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetInLocation() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FTransform GetReturnValue() {
		return memory.read<struct FTransform>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FStaticMaterial
{
public:
	FStaticMaterial(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UMaterialInterface GetMaterialInterface() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UMaterialInterface(ptr_addr);
	}
	struct FName GetMaterialSlotName() {
		return memory.read<struct FName>(m_addr + 8);
	}
	struct FName GetImportedMaterialSlotName() {
		return memory.read<struct FName>(m_addr + 16);
	}
	struct FMeshUVChannelInfo GetUVChannelData() {
		return memory.read<struct FMeshUVChannelInfo>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FBatchUpdateInstancesTransform
{
public:
	FBatchUpdateInstancesTransform(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetStartInstanceIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetNumInstances() {
		return memory.read<int32_t>(m_addr + 4);
	}
	struct FTransform GetNewInstancesTransform() {
		return memory.read<struct FTransform>(m_addr + 16);
	}
	bool GetbWorldSpace() {
		return memory.read<bool>(m_addr + 64);
	}
	bool GetbMarkRenderStateDirty() {
		return memory.read<bool>(m_addr + 65);
	}
	bool GetbTeleport() {
		return memory.read<bool>(m_addr + 66);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 67);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetMaterialIndex
{
public:
	FGetMaterialIndex(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetMaterialSlotName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FMaxOfFloatArray
{
public:
	FMaxOfFloatArray(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<float> GetFloatArray() {
		return memory.read<struct TArray<float>>(m_addr + 0);
	}
	int32_t GetIndexOfMaxValue() {
		return memory.read<int32_t>(m_addr + 16);
	}
	float GetMaxValue() {
		return memory.read<float>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetReplicates
{
public:
	FSetReplicates(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbInReplicates() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FActorBeginTouchOverSignature__DelegateSignature
{
public:
	FActorBeginTouchOverSignature__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class ETouchIndex GetFingerIndex() {
		return memory.read<enum class ETouchIndex>(m_addr + 0);
	}
	struct AActor GetTouchedActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FPlatformInterfaceDelegate__DelegateSignature
{
public:
	FPlatformInterfaceDelegate__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FPlatformInterfaceDelegateResult GetResult() {
		return memory.read<struct FPlatformInterfaceDelegateResult>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FMaterialTextureInfo
{
public:
	FMaterialTextureInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetSamplingScale() {
		return memory.read<float>(m_addr + 0);
	}
	int32_t GetUVChannelIndex() {
		return memory.read<int32_t>(m_addr + 4);
	}
	struct FName GetTextureName() {
		return memory.read<struct FName>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSoundWaveSpectralDataEntry
{
public:
	FSoundWaveSpectralDataEntry(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetMagnitude() {
		return memory.read<float>(m_addr + 0);
	}
	float GetNormalizedMagnitude() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetAudioListenerOverride
{
public:
	FSetAudioListenerOverride(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USceneComponent GetAttachToComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct USceneComponent(ptr_addr);
	}
	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	struct FRotator GetRotation() {
		return memory.read<struct FRotator>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FSet_ToArray
{
public:
	FSet_ToArray(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSet<int32_t> GetA() {
		return memory.read<struct TSet<int32_t>>(m_addr + 0);
	}
	struct TArray<int32_t> GetResult() {
		return memory.read<struct TArray<int32_t>>(m_addr + 80);
	}

private:
	std::uint64_t m_addr = 0;
};class FCollectionReference
{
public:
	FCollectionReference(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetCollectionName() {
		return memory.read<struct FName>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FVector_ComponentMin
{
public:
	FVector_ComponentMin(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetA() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetB() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FRGBToHSV
{
public:
	FRGBToHSV(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLinearColor GetInColor() {
		return memory.read<struct FLinearColor>(m_addr + 0);
	}
	float GetH() {
		return memory.read<float>(m_addr + 16);
	}
	float GetS() {
		return memory.read<float>(m_addr + 20);
	}
	float GetV() {
		return memory.read<float>(m_addr + 24);
	}
	float GetA() {
		return memory.read<float>(m_addr + 28);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetMaterial
{
public:
	FGetMaterial(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetMaterialIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct UMaterialInterface GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UMaterialInterface(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetPlaneConstraintOrigin
{
public:
	FGetPlaneConstraintOrigin(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FParticleReplayTrackKey
{
public:
	FParticleReplayTrackKey(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetTime() {
		return memory.read<float>(m_addr + 0);
	}
	float GetDuration() {
		return memory.read<float>(m_addr + 4);
	}
	int32_t GetClipIDNumber() {
		return memory.read<int32_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FMatrix_InverseTransformPosition
{
public:
	FMatrix_InverseTransformPosition(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMatrix GetM() {
		return memory.read<struct FMatrix>(m_addr + 0);
	}
	struct FVector GetV() {
		return memory.read<struct FVector>(m_addr + 64);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 76);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetSocketQuaternion
{
public:
	FGetSocketQuaternion(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetInSocketName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FQuat GetReturnValue() {
		return memory.read<struct FQuat>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FActorDestroyedSignature__DelegateSignature
{
public:
	FActorDestroyedSignature__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetDestroyedActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetServerWorldTimeSeconds
{
public:
	FGetServerWorldTimeSeconds(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetFrameRate
{
public:
	FGetFrameRate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FFrameRate GetReturnValue() {
		return memory.read<struct FFrameRate>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnPawnControllerChanged__DelegateSignature
{
public:
	FOnPawnControllerChanged__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APawn GetPawn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APawn(ptr_addr);
	}
	struct AController GetController() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AController(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FRandomInteger64
{
public:
	FRandomInteger64(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int64_t GetMax() {
		return memory.read<int64_t>(m_addr + 0);
	}
	int64_t GetReturnValue() {
		return memory.read<int64_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FComponentHitSignature__DelegateSignature
{
public:
	FComponentHitSignature__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPrimitiveComponent GetHitComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UPrimitiveComponent(ptr_addr);
	}
	struct AActor GetOtherActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AActor(ptr_addr);
	}
	struct UPrimitiveComponent GetOtherComp() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UPrimitiveComponent(ptr_addr);
	}
	struct FVector GetNormalImpulse() {
		return memory.read<struct FVector>(m_addr + 24);
	}
	struct FHitResult GetHit() {
		return memory.read<struct FHitResult>(m_addr + 36);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetGameName
{
public:
	FGetGameName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FVSizeXY
{
public:
	FVSizeXY(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetA() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnMontageBlendingOutStartedMCDelegate__DelegateSignature
{
public:
	FOnMontageBlendingOutStartedMCDelegate__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimMontage GetMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimMontage(ptr_addr);
	}
	bool GetbInterrupted() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetDistanceAlongSplineAtSplineInputKey
{
public:
	FGetDistanceAlongSplineAtSplineInputKey(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetInKey() {
		return memory.read<float>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FInertializationPoseDiff
{
public:
	FInertializationPoseDiff(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FComponentBeginOverlapSignature__DelegateSignature
{
public:
	FComponentBeginOverlapSignature__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPrimitiveComponent GetOverlappedComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UPrimitiveComponent(ptr_addr);
	}
	struct AActor GetOtherActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AActor(ptr_addr);
	}
	struct UPrimitiveComponent GetOtherComp() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UPrimitiveComponent(ptr_addr);
	}
	int32_t GetOtherBodyIndex() {
		return memory.read<int32_t>(m_addr + 24);
	}
	bool GetbFromSweep() {
		return memory.read<bool>(m_addr + 28);
	}
	struct FHitResult GetSweepResult() {
		return memory.read<struct FHitResult>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FComponentEndOverlapSignature__DelegateSignature
{
public:
	FComponentEndOverlapSignature__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPrimitiveComponent GetOverlappedComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UPrimitiveComponent(ptr_addr);
	}
	struct AActor GetOtherActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AActor(ptr_addr);
	}
	struct UPrimitiveComponent GetOtherComp() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UPrimitiveComponent(ptr_addr);
	}
	int32_t GetOtherBodyIndex() {
		return memory.read<int32_t>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FSkeletalMeshOptimizationSettings
{
public:
	FSkeletalMeshOptimizationSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class SkeletalMeshTerminationCriterion GetTerminationCriterion() {
		return memory.read<enum class SkeletalMeshTerminationCriterion>(m_addr + 0);
	}
	float GetNumOfTrianglesPercentage() {
		return memory.read<float>(m_addr + 4);
	}
	float GetNumOfVertPercentage() {
		return memory.read<float>(m_addr + 8);
	}
	uint32_t GetMaxNumOfTriangles() {
		return memory.read<uint32_t>(m_addr + 12);
	}
	uint32_t GetMaxNumOfVerts() {
		return memory.read<uint32_t>(m_addr + 16);
	}
	float GetMaxDeviationPercentage() {
		return memory.read<float>(m_addr + 20);
	}
	enum class SkeletalMeshOptimizationType GetReductionMethod() {
		return memory.read<enum class SkeletalMeshOptimizationType>(m_addr + 24);
	}
	enum class SkeletalMeshOptimizationImportance GetSilhouetteImportance() {
		return memory.read<enum class SkeletalMeshOptimizationImportance>(m_addr + 25);
	}
	enum class SkeletalMeshOptimizationImportance GetTextureImportance() {
		return memory.read<enum class SkeletalMeshOptimizationImportance>(m_addr + 26);
	}
	enum class SkeletalMeshOptimizationImportance GetShadingImportance() {
		return memory.read<enum class SkeletalMeshOptimizationImportance>(m_addr + 27);
	}
	enum class SkeletalMeshOptimizationImportance GetSkinningImportance() {
		return memory.read<enum class SkeletalMeshOptimizationImportance>(m_addr + 28);
	}
	char GetbRemapMorphTargets() {
		return memory.read<char>(m_addr + 29);
	}
	char GetbRecalcNormals() {
		return memory.read<char>(m_addr + 29);
	}
	float GetWeldingThreshold() {
		return memory.read<float>(m_addr + 32);
	}
	float GetNormalsThreshold() {
		return memory.read<float>(m_addr + 36);
	}
	int32_t GetMaxBonesPerVertex() {
		return memory.read<int32_t>(m_addr + 40);
	}
	char GetbEnforceBoneBoundaries() {
		return memory.read<char>(m_addr + 44);
	}
	float GetVolumeImportance() {
		return memory.read<float>(m_addr + 48);
	}
	char GetbLockEdges() {
		return memory.read<char>(m_addr + 52);
	}
	char GetbLockColorBounaries() {
		return memory.read<char>(m_addr + 52);
	}
	int32_t GetBaseLOD() {
		return memory.read<int32_t>(m_addr + 56);
	}
	char GetbUseOptimizationForEachSection() {
		return memory.read<char>(m_addr + 60);
	}
	struct TArray<float> GetSectionWeights() {
		return memory.read<struct TArray<float>>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};class FClientIgnoreMoveInput
{
public:
	FClientIgnoreMoveInput(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbIgnore() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FVector4_SizeSquared
{
public:
	FVector4_SizeSquared(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector4 GetA() {
		return memory.read<struct FVector4>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetNewAvoidanceUID
{
public:
	FGetNewAvoidanceUID(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FDrawDebugString
{
public:
	FDrawDebugString(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FVector GetTextLocation() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	struct FString GetText() {
		return memory.read<struct FString>(m_addr + 24);
	}
	struct AActor GetTestBaseActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct AActor(ptr_addr);
	}
	struct FLinearColor GetTextColor() {
		return memory.read<struct FLinearColor>(m_addr + 48);
	}
	float GetDuration() {
		return memory.read<float>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_AddActorWorldOffset
{
public:
	FK2_AddActorWorldOffset(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetDeltaLocation() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	bool GetbSweep() {
		return memory.read<bool>(m_addr + 12);
	}
	struct FHitResult GetSweepHitResult() {
		return memory.read<struct FHitResult>(m_addr + 16);
	}
	bool GetbTeleport() {
		return memory.read<bool>(m_addr + 152);
	}

private:
	std::uint64_t m_addr = 0;
};class FKBoxElem
{
public:
	FKBoxElem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetCenter() {
		return memory.read<struct FVector>(m_addr + 48);
	}
	struct FRotator GetRotation() {
		return memory.read<struct FRotator>(m_addr + 60);
	}
	float GetX() {
		return memory.read<float>(m_addr + 72);
	}
	float GetY() {
		return memory.read<float>(m_addr + 76);
	}
	float GetZ() {
		return memory.read<float>(m_addr + 80);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_IsTimerPaused
{
public:
	FK2_IsTimerPaused(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FString GetFunctionName() {
		return memory.read<struct FString>(m_addr + 8);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FEnginePluginsDir
{
public:
	FEnginePluginsDir(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FA2CSPose
{
public:
	FA2CSPose(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<char> GetComponentSpaceFlags() {
		return memory.read<struct TArray<char>>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FComponentSleepSignature__DelegateSignature
{
public:
	FComponentSleepSignature__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPrimitiveComponent GetSleepingComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UPrimitiveComponent(ptr_addr);
	}
	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetPosition
{
public:
	FSetPosition(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewPosition() {
		return memory.read<float>(m_addr + 0);
	}
	bool GetbJump() {
		return memory.read<bool>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FKeyHandleLookupTable
{
public:
	FKeyHandleLookupTable(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FComponentEndCursorOverSignature__DelegateSignature
{
public:
	FComponentEndCursorOverSignature__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPrimitiveComponent GetTouchedComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UPrimitiveComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FTextureSourceBlock
{
public:
	FTextureSourceBlock(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetBlockX() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetBlockY() {
		return memory.read<int32_t>(m_addr + 4);
	}
	int32_t GetSizeX() {
		return memory.read<int32_t>(m_addr + 8);
	}
	int32_t GetSizeY() {
		return memory.read<int32_t>(m_addr + 12);
	}
	int32_t GetNumSlices() {
		return memory.read<int32_t>(m_addr + 16);
	}
	int32_t GetNumMips() {
		return memory.read<int32_t>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FComponentOnClickedSignature__DelegateSignature
{
public:
	FComponentOnClickedSignature__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPrimitiveComponent GetTouchedComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UPrimitiveComponent(ptr_addr);
	}
	struct FKey GetButtonPressed() {
		return memory.read<struct FKey>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_AddLocalTransform
{
public:
	FK2_AddLocalTransform(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTransform GetDeltaTransform() {
		return memory.read<struct FTransform>(m_addr + 0);
	}
	bool GetbSweep() {
		return memory.read<bool>(m_addr + 48);
	}
	struct FHitResult GetSweepHitResult() {
		return memory.read<struct FHitResult>(m_addr + 52);
	}
	bool GetbTeleport() {
		return memory.read<bool>(m_addr + 188);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsGamePaused
{
public:
	FIsGamePaused(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FComponentOnReleasedSignature__DelegateSignature
{
public:
	FComponentOnReleasedSignature__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPrimitiveComponent GetTouchedComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UPrimitiveComponent(ptr_addr);
	}
	struct FKey GetButtonReleased() {
		return memory.read<struct FKey>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetLastMovementInputVector
{
public:
	FGetLastMovementInputVector(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsAnySimulatingPhysics
{
public:
	FIsAnySimulatingPhysics(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetGameBundleId
{
public:
	FGetGameBundleId(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FConvertFromSandboxPath
{
public:
	FConvertFromSandboxPath(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetInPath() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FString GetInSandboxName() {
		return memory.read<struct FString>(m_addr + 16);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FBPInterfaceDescription
{
public:
	FBPInterfaceDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UInterface GetInterface() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return UInterface(ptr_addr);
	}
	struct TArray<struct UEdGraph> GetGraphs() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct TArray<struct UEdGraph>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FRawAnimSequenceTrack
{
public:
	FRawAnimSequenceTrack(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FVector> GetPosKeys() {
		return memory.read<struct TArray<struct FVector>>(m_addr + 0);
	}
	struct TArray<struct FQuat> GetRotKeys() {
		return memory.read<struct TArray<struct FQuat>>(m_addr + 16);
	}
	struct TArray<struct FVector> GetScaleKeys() {
		return memory.read<struct TArray<struct FVector>>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FComponentOnInputTouchBeginSignature__DelegateSignature
{
public:
	FComponentOnInputTouchBeginSignature__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class ETouchIndex GetFingerIndex() {
		return memory.read<enum class ETouchIndex>(m_addr + 0);
	}
	struct UPrimitiveComponent GetTouchedComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UPrimitiveComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FReceiveActorOnInputTouchEnd
{
public:
	FReceiveActorOnInputTouchEnd(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class ETouchIndex GetFingerIndex() {
		return memory.read<enum class ETouchIndex>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FConstrainLocationToPlane
{
public:
	FConstrainLocationToPlane(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnMontageStartedMCDelegate__DelegateSignature
{
public:
	FOnMontageStartedMCDelegate__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimMontage GetMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimMontage(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FPlayMontageAnimNotifyDelegate__DelegateSignature
{
public:
	FPlayMontageAnimNotifyDelegate__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetNotifyName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FBranchingPointNotifyPayload GetBranchingPointPayload() {
		return memory.read<struct FBranchingPointNotifyPayload>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FComponentHasTag
{
public:
	FComponentHasTag(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetTag() {
		return memory.read<struct FName>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FBranchingPointNotifyPayload
{
public:
	FBranchingPointNotifyPayload(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FSnapTo
{
public:
	FSnapTo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USceneComponent GetInParent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct USceneComponent(ptr_addr);
	}
	struct FName GetInSocketName() {
		return memory.read<struct FName>(m_addr + 8);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_InterpolateMaterialInstanceParams
{
public:
	FK2_InterpolateMaterialInstanceParams(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UMaterialInstance GetSourceA() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UMaterialInstance(ptr_addr);
	}
	struct UMaterialInstance GetSourceB() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UMaterialInstance(ptr_addr);
	}
	float GetAlpha() {
		return memory.read<float>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_ClearTimerDelegate
{
public:
	FK2_ClearTimerDelegate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDelegate GetDelegate() {
		return memory.read<struct FDelegate>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetOnlyOwnerSee
{
public:
	FSetOnlyOwnerSee(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbNewOnlyOwnerSee() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsActive
{
public:
	FIsActive(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCameraShakeUpdateParams
{
public:
	FCameraShakeUpdateParams(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetDeltaTime() {
		return memory.read<float>(m_addr + 0);
	}
	float GetShakeScale() {
		return memory.read<float>(m_addr + 4);
	}
	float GetDynamicScale() {
		return memory.read<float>(m_addr + 8);
	}
	float GetBlendingWeight() {
		return memory.read<float>(m_addr + 12);
	}
	struct FMinimalViewInfo GetPOV() {
		return memory.read<struct FMinimalViewInfo>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FAnimNotifyEvent
{
public:
	FAnimNotifyEvent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetDisplayTime() {
		return memory.read<float>(m_addr + 48);
	}
	float GetTriggerTimeOffset() {
		return memory.read<float>(m_addr + 52);
	}
	float GetEndTriggerTimeOffset() {
		return memory.read<float>(m_addr + 56);
	}
	float GetTriggerWeightThreshold() {
		return memory.read<float>(m_addr + 60);
	}
	struct FName GetNotifyName() {
		return memory.read<struct FName>(m_addr + 64);
	}
	struct UAnimNotify GetNotify() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return struct UAnimNotify(ptr_addr);
	}
	struct UAnimNotifyState GetNotifyStateClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 80);
		return struct UAnimNotifyState(ptr_addr);
	}
	float GetDuration() {
		return memory.read<float>(m_addr + 88);
	}
	struct FAnimLinkableElement GetEndLink() {
		return memory.read<struct FAnimLinkableElement>(m_addr + 96);
	}
	bool GetbConvertedFromBranchingPoint() {
		return memory.read<bool>(m_addr + 144);
	}
	enum class EMontageNotifyTickType GetMontageTickType() {
		return memory.read<enum class EMontageNotifyTickType>(m_addr + 145);
	}
	float GetNotifyTriggerChance() {
		return memory.read<float>(m_addr + 148);
	}
	enum class ENotifyFilterType GetNotifyFilterType() {
		return memory.read<enum class ENotifyFilterType>(m_addr + 152);
	}
	int32_t GetNotifyFilterLOD() {
		return memory.read<int32_t>(m_addr + 156);
	}
	bool GetbTriggerOnDedicatedServer() {
		return memory.read<bool>(m_addr + 160);
	}
	bool GetbTriggerOnFollower() {
		return memory.read<bool>(m_addr + 161);
	}
	int32_t GetTrackIndex() {
		return memory.read<int32_t>(m_addr + 164);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetLinearZLimit
{
public:
	FSetLinearZLimit(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class ELinearConstraintMotion GetConstraintType() {
		return memory.read<enum class ELinearConstraintMotion>(m_addr + 0);
	}
	float GetLimitSize() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FAnimNode_StateMachine
{
public:
	FAnimNode_StateMachine(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetStateMachineIndexInClass() {
		return memory.read<int32_t>(m_addr + 16);
	}
	int32_t GetMaxTransitionsPerFrame() {
		return memory.read<int32_t>(m_addr + 20);
	}
	bool GetbSkipFirstUpdateTransition() {
		return memory.read<bool>(m_addr + 24);
	}
	bool GetbReinitializeOnBecomingRelevant() {
		return memory.read<bool>(m_addr + 25);
	}

private:
	std::uint64_t m_addr = 0;
};class FPlaySlotAnimation
{
public:
	FPlaySlotAnimation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimSequenceBase GetAsset() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct FName GetSlotNodeName() {
		return memory.read<struct FName>(m_addr + 8);
	}
	float GetBlendInTime() {
		return memory.read<float>(m_addr + 16);
	}
	float GetBlendOutTime() {
		return memory.read<float>(m_addr + 20);
	}
	float GetInPlayRate() {
		return memory.read<float>(m_addr + 24);
	}
	int32_t GetLoopCount() {
		return memory.read<int32_t>(m_addr + 28);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_DetachFromActor
{
public:
	FK2_DetachFromActor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class EDetachmentRule GetLocationRule() {
		return memory.read<enum class EDetachmentRule>(m_addr + 0);
	}
	enum class EDetachmentRule GetRotationRule() {
		return memory.read<enum class EDetachmentRule>(m_addr + 1);
	}
	enum class EDetachmentRule GetScaleRule() {
		return memory.read<enum class EDetachmentRule>(m_addr + 2);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnAudioFadeChangeSignature__DelegateSignature
{
public:
	FOnAudioFadeChangeSignature__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbFadeOut() {
		return memory.read<bool>(m_addr + 0);
	}
	float GetFadeTime() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FActivate
{
public:
	FActivate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbReset() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetAllMassScale
{
public:
	FSetAllMassScale(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetInMassScale() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_IsTimerActive
{
public:
	FK2_IsTimerActive(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FString GetFunctionName() {
		return memory.read<struct FString>(m_addr + 8);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FUnloadPrimaryAsset
{
public:
	FUnloadPrimaryAsset(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FPrimaryAssetId GetPrimaryAssetId() {
		return memory.read<struct FPrimaryAssetId>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FAddTickPrerequisiteActor
{
public:
	FAddTickPrerequisiteActor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetPrerequisiteActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetWorldDirectionAtDistanceAlongSpline
{
public:
	FGetWorldDirectionAtDistanceAlongSpline(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetDistance() {
		return memory.read<float>(m_addr + 0);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FAddTickPrerequisiteComponent
{
public:
	FAddTickPrerequisiteComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UActorComponent GetPrerequisiteComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UActorComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsVSyncDirty
{
public:
	FIsVSyncDirty(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSoundSubmixSendInfo
{
public:
	FSoundSubmixSendInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class ESendLevelControlMethod GetSendLevelControlMethod() {
		return memory.read<enum class ESendLevelControlMethod>(m_addr + 0);
	}
	enum class ESubmixSendStage GetSendStage() {
		return memory.read<enum class ESubmixSendStage>(m_addr + 1);
	}
	struct USoundSubmixBase GetSoundSubmix() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct USoundSubmixBase(ptr_addr);
	}
	float GetSendLevel() {
		return memory.read<float>(m_addr + 16);
	}
	float GetMinSendLevel() {
		return memory.read<float>(m_addr + 20);
	}
	float GetMaxSendLevel() {
		return memory.read<float>(m_addr + 24);
	}
	float GetMinSendDistance() {
		return memory.read<float>(m_addr + 28);
	}
	float GetMaxSendDistance() {
		return memory.read<float>(m_addr + 32);
	}
	struct FRuntimeFloatCurve GetCustomSendLevelCurve() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetMassOverrideInKg
{
public:
	FSetMassOverrideInKg(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	float GetMassInKg() {
		return memory.read<float>(m_addr + 8);
	}
	bool GetbOverrideMass() {
		return memory.read<bool>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetComponentTickInterval
{
public:
	FGetComponentTickInterval(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetLocationAtDistanceAlongSpline
{
public:
	FGetLocationAtDistanceAlongSpline(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetDistance() {
		return memory.read<float>(m_addr + 0);
	}
	enum class ESplineCoordinateSpace GetCoordinateSpace() {
		return memory.read<enum class ESplineCoordinateSpace>(m_addr + 4);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FFromSeconds
{
public:
	FFromSeconds(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetSeconds() {
		return memory.read<float>(m_addr + 0);
	}
	struct FTimespan GetReturnValue() {
		return memory.read<struct FTimespan>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetOwner
{
public:
	FGetOwner(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetDefaultCustomPrimitiveDataVector2
{
public:
	FSetDefaultCustomPrimitiveDataVector2(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetDataIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct FVector2D GetValue() {
		return memory.read<struct FVector2D>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FBoxOverlapActors
{
public:
	FBoxOverlapActors(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FVector GetBoxPos() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	struct FVector GetBoxExtent() {
		return memory.read<struct FVector>(m_addr + 20);
	}
	struct TArray<enum class EObjectTypeQuery> GetObjectTypes() {
		return memory.read<struct TArray<enum class EObjectTypeQuery>>(m_addr + 32);
	}
	UObject GetActorClassFilter() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return UObject(ptr_addr);
	}
	struct TArray<struct AActor> GetActorsToIgnore() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct TArray<struct AActor>(ptr_addr);
	}
	struct TArray<struct AActor> GetOutActors() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return struct TArray<struct AActor>(ptr_addr);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 88);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetPlaneConstraintNormal
{
public:
	FSetPlaneConstraintNormal(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetPlaneNormal() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FProjectWorldToScreen
{
public:
	FProjectWorldToScreen(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APlayerController GetPlayer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APlayerController(ptr_addr);
	}
	struct FVector GetWorldPosition() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	struct FVector2D GetScreenPosition() {
		return memory.read<struct FVector2D>(m_addr + 20);
	}
	bool GetbPlayerViewportRelative() {
		return memory.read<bool>(m_addr + 28);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 29);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsBeingDestroyed
{
public:
	FIsBeingDestroyed(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FPlay
{
public:
	FPlay(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetStartTime() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetCustomPrimitiveDataVector4
{
public:
	FSetCustomPrimitiveDataVector4(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetDataIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct FVector4 GetValue() {
		return memory.read<struct FVector4>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetAbsolute
{
public:
	FSetAbsolute(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbNewAbsoluteLocation() {
		return memory.read<bool>(m_addr + 0);
	}
	bool GetbNewAbsoluteRotation() {
		return memory.read<bool>(m_addr + 1);
	}
	bool GetbNewAbsoluteScale() {
		return memory.read<bool>(m_addr + 2);
	}

private:
	std::uint64_t m_addr = 0;
};class FDivide_TimespanFloat
{
public:
	FDivide_TimespanFloat(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTimespan GetA() {
		return memory.read<struct FTimespan>(m_addr + 0);
	}
	float GetScalar() {
		return memory.read<float>(m_addr + 8);
	}
	struct FTimespan GetReturnValue() {
		return memory.read<struct FTimespan>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FReceiveOnActivate
{
public:
	FReceiveOnActivate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APlayerController GetOriginalPC() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APlayerController(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsComponentTickEnabled
{
public:
	FIsComponentTickEnabled(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetBarnDoorLength
{
public:
	FSetBarnDoorLength(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_IsTimerPausedHandle
{
public:
	FK2_IsTimerPausedHandle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FTimerHandle GetHandle() {
		return memory.read<struct FTimerHandle>(m_addr + 8);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FMontage_GetIsStopped
{
public:
	FMontage_GetIsStopped(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimMontage GetMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimMontage(ptr_addr);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetPhysMaterialOverride
{
public:
	FSetPhysMaterialOverride(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPhysicalMaterial GetNewPhysMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UPhysicalMaterial(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetCollisionObjectType
{
public:
	FGetCollisionObjectType(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class ECollisionChannel GetReturnValue() {
		return memory.read<enum class ECollisionChannel>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_DestroyComponent
{
public:
	FK2_DestroyComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UActorComponent GetComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UActorComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetMieAbsorption
{
public:
	FSetMieAbsorption(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLinearColor GetNewValue() {
		return memory.read<struct FLinearColor>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FReceiveDrawHUD
{
public:
	FReceiveDrawHUD(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetSizeX() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetSizeY() {
		return memory.read<int32_t>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsInterstitialAdAvailable
{
public:
	FIsInterstitialAdAvailable(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetInstanceMachineWeight
{
public:
	FGetInstanceMachineWeight(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetMachineIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FQuat_SetComponents
{
public:
	FQuat_SetComponents(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FQuat GetQ() {
		return memory.read<struct FQuat>(m_addr + 0);
	}
	float GetX() {
		return memory.read<float>(m_addr + 16);
	}
	float GetY() {
		return memory.read<float>(m_addr + 20);
	}
	float GetZ() {
		return memory.read<float>(m_addr + 24);
	}
	float GetW() {
		return memory.read<float>(m_addr + 28);
	}

private:
	std::uint64_t m_addr = 0;
};class FReceiveEndPlay
{
public:
	FReceiveEndPlay(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class EEndPlayReason GetEndPlayReason() {
		return memory.read<enum class EEndPlayReason>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FRandomUnitVectorInEllipticalConeInRadiansFromStream
{
public:
	FRandomUnitVectorInEllipticalConeInRadiansFromStream(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetConeDir() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	float GetMaxYawInRadians() {
		return memory.read<float>(m_addr + 12);
	}
	float GetMaxPitchInRadians() {
		return memory.read<float>(m_addr + 16);
	}
	struct FRandomStream GetStream() {
		return memory.read<struct FRandomStream>(m_addr + 20);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 28);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnQuartzCommandEventBP__DelegateSignature
{
public:
	FOnQuartzCommandEventBP__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class EQuartzCommandDelegateSubType GetEventType() {
		return memory.read<enum class EQuartzCommandDelegateSubType>(m_addr + 0);
	}
	struct FName GetName() {
		return memory.read<struct FName>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetActionMappingByName
{
public:
	FGetActionMappingByName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetInActionName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct TArray<struct FInputActionKeyMapping> GetOutMappings() {
		return memory.read<struct TArray<struct FInputActionKeyMapping>>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FReceiveTick
{
public:
	FReceiveTick(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetDeltaSeconds() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetReflectionVector
{
public:
	FGetReflectionVector(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetDirection() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetSurfaceNormal() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FPlatformInterfaceData
{
public:
	FPlatformInterfaceData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetDataName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	enum class EPlatformInterfaceDataType GetType() {
		return memory.read<enum class EPlatformInterfaceDataType>(m_addr + 8);
	}
	int32_t GetIntValue() {
		return memory.read<int32_t>(m_addr + 12);
	}
	float GetFloatValue() {
		return memory.read<float>(m_addr + 16);
	}
	struct FString GetStringValue() {
		return memory.read<struct FString>(m_addr + 24);
	}
	struct UObject GetObjectValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct UObject(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FRemoveTickPrerequisiteComponent
{
public:
	FRemoveTickPrerequisiteComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UActorComponent GetPrerequisiteComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UActorComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FConv_IntPointToString
{
public:
	FConv_IntPointToString(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FIntPoint GetInIntPoint() {
		return memory.read<struct FIntPoint>(m_addr + 0);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FLessEqual_DateTimeDateTime
{
public:
	FLessEqual_DateTimeDateTime(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDateTime GetA() {
		return memory.read<struct FDateTime>(m_addr + 0);
	}
	struct FDateTime GetB() {
		return memory.read<struct FDateTime>(m_addr + 8);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetWalkableSlopeOverride
{
public:
	FSetWalkableSlopeOverride(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FWalkableSlopeOverride GetNewOverride() {
		return memory.read<struct FWalkableSlopeOverride>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsZero2D
{
public:
	FIsZero2D(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector2D GetA() {
		return memory.read<struct FVector2D>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FParticleEmitterReplayFrame
{
public:
	FParticleEmitterReplayFrame(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FGetActorBounds
{
public:
	FGetActorBounds(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbOnlyCollidingComponents() {
		return memory.read<bool>(m_addr + 0);
	}
	struct FVector GetOrigin() {
		return memory.read<struct FVector>(m_addr + 4);
	}
	struct FVector GetBoxExtent() {
		return memory.read<struct FVector>(m_addr + 16);
	}
	bool GetbIncludeFromChildActors() {
		return memory.read<bool>(m_addr + 28);
	}

private:
	std::uint64_t m_addr = 0;
};class FAnimNode_Inertialization
{
public:
	FAnimNode_Inertialization(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FPoseLink GetSource() {
		return memory.read<struct FPoseLink>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetActive
{
public:
	FSetActive(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbNewActive() {
		return memory.read<bool>(m_addr + 0);
	}
	bool GetbReset() {
		return memory.read<bool>(m_addr + 1);
	}

private:
	std::uint64_t m_addr = 0;
};class FMatrix_GetColumn
{
public:
	FMatrix_GetColumn(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMatrix GetM() {
		return memory.read<struct FMatrix>(m_addr + 0);
	}
	enum class EMatrixColumns GetColumn() {
		return memory.read<enum class EMatrixColumns>(m_addr + 64);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 68);
	}

private:
	std::uint64_t m_addr = 0;
};class FBandwidthTestItem
{
public:
	FBandwidthTestItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<char> GetKilobyte() {
		return memory.read<struct TArray<char>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetAutoActivate
{
public:
	FSetAutoActivate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbNewAutoActivate() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSoundWaveSpectralData
{
public:
	FSoundWaveSpectralData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetFrequencyHz() {
		return memory.read<float>(m_addr + 0);
	}
	float GetMagnitude() {
		return memory.read<float>(m_addr + 4);
	}
	float GetNormalizedMagnitude() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FCreateTalkerForPlayer
{
public:
	FCreateTalkerForPlayer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APlayerState GetOwningState() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APlayerState(ptr_addr);
	}
	struct UVOIPTalker GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UVOIPTalker(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetSourceLength
{
public:
	FSetSourceLength(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetConvenientWindowedResolutions
{
public:
	FGetConvenientWindowedResolutions(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FIntPoint> GetResolutions() {
		return memory.read<struct TArray<struct FIntPoint>>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FAnimationFrameSnapshot
{
public:
	FAnimationFrameSnapshot(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FInterpControlPoint
{
public:
	FInterpControlPoint(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetPositionControlPoint() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	bool GetbPositionIsRelative() {
		return memory.read<bool>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FNavDataConfig
{
public:
	FNavDataConfig(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetName() {
		return memory.read<struct FName>(m_addr + 48);
	}
	struct FColor GetColor() {
		return memory.read<struct FColor>(m_addr + 56);
	}
	struct FVector GetDefaultQueryExtent() {
		return memory.read<struct FVector>(m_addr + 60);
	}
	AActor GetNavigationDataClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return AActor(ptr_addr);
	}
	struct TSoftClassPtr<UObject> GetNavDataClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 80);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetComponentTickInterval
{
public:
	FSetComponentTickInterval(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetTickInterval() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetNumChildrenComponents
{
public:
	FGetNumChildrenComponents(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetComponentTickIntervalAndCooldown
{
public:
	FSetComponentTickIntervalAndCooldown(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetTickInterval() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetCurrentCulture
{
public:
	FGetCurrentCulture(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsSplitscreenForceDisabled
{
public:
	FIsSplitscreenForceDisabled(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetCollisionEnabled
{
public:
	FGetCollisionEnabled(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class ECollisionEnabled GetReturnValue() {
		return memory.read<enum class ECollisionEnabled>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FStreamingRenderAssetPrimitiveInfo
{
public:
	FStreamingRenderAssetPrimitiveInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UStreamableRenderAsset GetRenderAsset() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UStreamableRenderAsset(ptr_addr);
	}
	struct FBoxSphereBounds GetBounds() {
		return memory.read<struct FBoxSphereBounds>(m_addr + 8);
	}
	float GetTexelFactor() {
		return memory.read<float>(m_addr + 36);
	}
	uint32_t GetPackedRelativeBox() {
		return memory.read<uint32_t>(m_addr + 40);
	}
	char GetbAllowInvalidTexelFactorWhenUnregistered() {
		return memory.read<char>(m_addr + 44);
	}

private:
	std::uint64_t m_addr = 0;
};class FClientTravel
{
public:
	FClientTravel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetURL() {
		return memory.read<struct FString>(m_addr + 0);
	}
	enum class ETravelType GetTravelType() {
		return memory.read<enum class ETravelType>(m_addr + 16);
	}
	bool GetbSeamless() {
		return memory.read<bool>(m_addr + 17);
	}
	struct FGuid GetMapPackageGuid() {
		return memory.read<struct FGuid>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FExportRenderTarget
{
public:
	FExportRenderTarget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct UTextureRenderTarget2D GetTextureRenderTarget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UTextureRenderTarget2D(ptr_addr);
	}
	struct FString GetFilePath() {
		return memory.read<struct FString>(m_addr + 16);
	}
	struct FString GetFilename() {
		return memory.read<struct FString>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetIsReplicated
{
public:
	FSetIsReplicated(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetShouldReplicate() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FStaticMeshComponentLODInfo
{
public:
	FStaticMeshComponentLODInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FFilePath
{
public:
	FFilePath(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetFilePath() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsMaterialSectionShown
{
public:
	FIsMaterialSectionShown(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetMaterialID() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetLODIndex() {
		return memory.read<int32_t>(m_addr + 4);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetTickableWhenPaused
{
public:
	FSetTickableWhenPaused(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbTickableWhenPaused() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetTickGroup
{
public:
	FSetTickGroup(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class ETickingGroup GetNewTickGroup() {
		return memory.read<enum class ETickingGroup>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_GetComponentToWorld
{
public:
	FK2_GetComponentToWorld(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTransform GetReturnValue() {
		return memory.read<struct FTransform>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FExponentialHeightFogData
{
public:
	FExponentialHeightFogData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetFogDensity() {
		return memory.read<float>(m_addr + 0);
	}
	float GetFogHeightFalloff() {
		return memory.read<float>(m_addr + 4);
	}
	float GetFogHeightOffset() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FServerViewSelf
{
public:
	FServerViewSelf(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FViewTargetTransitionParams GetTransitionParams() {
		return memory.read<struct FViewTargetTransitionParams>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FLogSegment
{
public:
	FLogSegment(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FVector GetSegmentStart() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	struct FVector GetSegmentEnd() {
		return memory.read<struct FVector>(m_addr + 20);
	}
	struct FString GetText() {
		return memory.read<struct FString>(m_addr + 32);
	}
	struct FLinearColor GetObjectColor() {
		return memory.read<struct FLinearColor>(m_addr + 48);
	}
	float GetThickness() {
		return memory.read<float>(m_addr + 64);
	}
	struct FName GetCategoryName() {
		return memory.read<struct FName>(m_addr + 68);
	}
	bool GetbAddToMessageLog() {
		return memory.read<bool>(m_addr + 76);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_GetActorRotation
{
public:
	FK2_GetActorRotation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRotator GetReturnValue() {
		return memory.read<struct FRotator>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FLoadInterstitialAd
{
public:
	FLoadInterstitialAd(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetAdIdIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FFilmStockSettings
{
public:
	FFilmStockSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetSlope() {
		return memory.read<float>(m_addr + 0);
	}
	float GetToe() {
		return memory.read<float>(m_addr + 4);
	}
	float GetShoulder() {
		return memory.read<float>(m_addr + 8);
	}
	float GetBlackClip() {
		return memory.read<float>(m_addr + 12);
	}
	float GetWhiteClip() {
		return memory.read<float>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSimpleMemberReference
{
public:
	FSimpleMemberReference(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetMemberParent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FName GetMemberName() {
		return memory.read<struct FName>(m_addr + 8);
	}
	struct FGuid GetMemberGuid() {
		return memory.read<struct FGuid>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FTickFunction
{
public:
	FTickFunction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class ETickingGroup GetTickGroup() {
		return memory.read<enum class ETickingGroup>(m_addr + 8);
	}
	enum class ETickingGroup GetEndTickGroup() {
		return memory.read<enum class ETickingGroup>(m_addr + 9);
	}
	char GetbTickEvenWhenPaused() {
		return memory.read<char>(m_addr + 10);
	}
	char GetbCanEverTick() {
		return memory.read<char>(m_addr + 10);
	}
	char GetbStartWithTickEnabled() {
		return memory.read<char>(m_addr + 10);
	}
	char GetbAllowTickOnDedicatedServer() {
		return memory.read<char>(m_addr + 10);
	}
	float GetTickInterval() {
		return memory.read<float>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FCollectionVectorParameter
{
public:
	FCollectionVectorParameter(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLinearColor GetDefaultValue() {
		return memory.read<struct FLinearColor>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FMatrix_ScaleTranslation
{
public:
	FMatrix_ScaleTranslation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMatrix GetM() {
		return memory.read<struct FMatrix>(m_addr + 0);
	}
	struct FVector GetScale3D() {
		return memory.read<struct FVector>(m_addr + 64);
	}
	struct FMatrix GetReturnValue() {
		return memory.read<struct FMatrix>(m_addr + 80);
	}

private:
	std::uint64_t m_addr = 0;
};class FActorComponentTickFunction
{
public:
	FActorComponentTickFunction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FBakedStringCustomAttribute
{
public:
	FBakedStringCustomAttribute(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetAttributeName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FStringCurve GetStringCurve() {
		return memory.read<struct FStringCurve>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetRandomUnmarkedBit
{
public:
	FGetRandomUnmarkedBit(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetData() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetStartIdx() {
		return memory.read<int32_t>(m_addr + 4);
	}
	int32_t GetNumBits() {
		return memory.read<int32_t>(m_addr + 8);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnTemperatureChangeDelegate__DelegateSignature
{
public:
	FOnTemperatureChangeDelegate__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class ETemperatureSeverityType GetSeverity() {
		return memory.read<enum class ETemperatureSeverityType>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FApplicationStartupArgumentsDelegate__DelegateSignature
{
public:
	FApplicationStartupArgumentsDelegate__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FString> GetStartupArguments() {
		return memory.read<struct TArray<struct FString>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FClientSetForceMipLevelsToBeResident
{
public:
	FClientSetForceMipLevelsToBeResident(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UMaterialInterface GetMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UMaterialInterface(ptr_addr);
	}
	float GetForceDuration() {
		return memory.read<float>(m_addr + 8);
	}
	int32_t GetCinematicTextureGroups() {
		return memory.read<int32_t>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_MoveUpdatedComponent
{
public:
	FK2_MoveUpdatedComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetDelta() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FRotator GetNewRotation() {
		return memory.read<struct FRotator>(m_addr + 12);
	}
	struct FHitResult GetOutHit() {
		return memory.read<struct FHitResult>(m_addr + 24);
	}
	bool GetbSweep() {
		return memory.read<bool>(m_addr + 160);
	}
	bool GetbTeleport() {
		return memory.read<bool>(m_addr + 161);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 162);
	}

private:
	std::uint64_t m_addr = 0;
};class FBoxTraceSingleForObjects
{
public:
	FBoxTraceSingleForObjects(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FVector GetStart() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	struct FVector GetEnd() {
		return memory.read<struct FVector>(m_addr + 20);
	}
	struct FVector GetHalfSize() {
		return memory.read<struct FVector>(m_addr + 32);
	}
	struct FRotator GetOrientation() {
		return memory.read<struct FRotator>(m_addr + 44);
	}
	struct TArray<enum class EObjectTypeQuery> GetObjectTypes() {
		return memory.read<struct TArray<enum class EObjectTypeQuery>>(m_addr + 56);
	}
	bool GetbTraceComplex() {
		return memory.read<bool>(m_addr + 72);
	}
	struct TArray<struct AActor> GetActorsToIgnore() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 80);
		return struct TArray<struct AActor>(ptr_addr);
	}
	enum class EDrawDebugTrace GetDrawDebugType() {
		return memory.read<enum class EDrawDebugTrace>(m_addr + 96);
	}
	struct FHitResult GetOutHit() {
		return memory.read<struct FHitResult>(m_addr + 100);
	}
	bool GetbIgnoreSelf() {
		return memory.read<bool>(m_addr + 236);
	}
	struct FLinearColor GetTraceColor() {
		return memory.read<struct FLinearColor>(m_addr + 240);
	}
	struct FLinearColor GetTraceHitColor() {
		return memory.read<struct FLinearColor>(m_addr + 256);
	}
	float GetDrawTime() {
		return memory.read<float>(m_addr + 272);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 276);
	}

private:
	std::uint64_t m_addr = 0;
};class FHLODISMComponentDesc
{
public:
	FHLODISMComponentDesc(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UStaticMesh GetStaticMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UStaticMesh(ptr_addr);
	}
	struct UMaterialInterface GetMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UMaterialInterface(ptr_addr);
	}
	struct TArray<struct FTransform> GetInstances() {
		return memory.read<struct TArray<struct FTransform>>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsProjectFilePathSet
{
public:
	FIsProjectFilePathSet(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnSubmixSpectralAnalysisBP__DelegateSignature
{
public:
	FOnSubmixSpectralAnalysisBP__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<float> GetMagnitude() {
		return memory.read<struct TArray<float>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FVector4_IsNAN
{
public:
	FVector4_IsNAN(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector4 GetA() {
		return memory.read<struct FVector4>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FNavAvoidanceMask
{
public:
	FNavAvoidanceMask(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	char GetbGroup0() {
		return memory.read<char>(m_addr + 0);
	}
	char GetbGroup1() {
		return memory.read<char>(m_addr + 0);
	}
	char GetbGroup2() {
		return memory.read<char>(m_addr + 0);
	}
	char GetbGroup3() {
		return memory.read<char>(m_addr + 0);
	}
	char GetbGroup4() {
		return memory.read<char>(m_addr + 0);
	}
	char GetbGroup5() {
		return memory.read<char>(m_addr + 0);
	}
	char GetbGroup6() {
		return memory.read<char>(m_addr + 0);
	}
	char GetbGroup7() {
		return memory.read<char>(m_addr + 0);
	}
	char GetbGroup8() {
		return memory.read<char>(m_addr + 1);
	}
	char GetbGroup9() {
		return memory.read<char>(m_addr + 1);
	}
	char GetbGroup10() {
		return memory.read<char>(m_addr + 1);
	}
	char GetbGroup11() {
		return memory.read<char>(m_addr + 1);
	}
	char GetbGroup12() {
		return memory.read<char>(m_addr + 1);
	}
	char GetbGroup13() {
		return memory.read<char>(m_addr + 1);
	}
	char GetbGroup14() {
		return memory.read<char>(m_addr + 1);
	}
	char GetbGroup15() {
		return memory.read<char>(m_addr + 1);
	}
	char GetbGroup16() {
		return memory.read<char>(m_addr + 2);
	}
	char GetbGroup17() {
		return memory.read<char>(m_addr + 2);
	}
	char GetbGroup18() {
		return memory.read<char>(m_addr + 2);
	}
	char GetbGroup19() {
		return memory.read<char>(m_addr + 2);
	}
	char GetbGroup20() {
		return memory.read<char>(m_addr + 2);
	}
	char GetbGroup21() {
		return memory.read<char>(m_addr + 2);
	}
	char GetbGroup22() {
		return memory.read<char>(m_addr + 2);
	}
	char GetbGroup23() {
		return memory.read<char>(m_addr + 2);
	}
	char GetbGroup24() {
		return memory.read<char>(m_addr + 3);
	}
	char GetbGroup25() {
		return memory.read<char>(m_addr + 3);
	}
	char GetbGroup26() {
		return memory.read<char>(m_addr + 3);
	}
	char GetbGroup27() {
		return memory.read<char>(m_addr + 3);
	}
	char GetbGroup28() {
		return memory.read<char>(m_addr + 3);
	}
	char GetbGroup29() {
		return memory.read<char>(m_addr + 3);
	}
	char GetbGroup30() {
		return memory.read<char>(m_addr + 3);
	}
	char GetbGroup31() {
		return memory.read<char>(m_addr + 3);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnQuartzMetronomeEvent__DelegateSignature
{
public:
	FOnQuartzMetronomeEvent__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetClockName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	enum class EQuartzCommandQuantization GetQuantizationType() {
		return memory.read<enum class EQuartzCommandQuantization>(m_addr + 8);
	}
	int32_t GetNumBars() {
		return memory.read<int32_t>(m_addr + 12);
	}
	int32_t GetBeat() {
		return memory.read<int32_t>(m_addr + 16);
	}
	float GetBeatFraction() {
		return memory.read<float>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FSupportedSubTrackInfo
{
public:
	FSupportedSubTrackInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UInterpTrack GetSupportedClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return UInterpTrack(ptr_addr);
	}
	struct FString GetSubTrackName() {
		return memory.read<struct FString>(m_addr + 8);
	}
	int32_t GetGroupIndex() {
		return memory.read<int32_t>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_SetRelativeLocation
{
public:
	FK2_SetRelativeLocation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetNewLocation() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	bool GetbSweep() {
		return memory.read<bool>(m_addr + 12);
	}
	struct FHitResult GetSweepHitResult() {
		return memory.read<struct FHitResult>(m_addr + 16);
	}
	bool GetbTeleport() {
		return memory.read<bool>(m_addr + 152);
	}

private:
	std::uint64_t m_addr = 0;
};class FImportanceSample
{
public:
	FImportanceSample(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FImportanceTexture GetTexture() {
		return memory.read<struct FImportanceTexture>(m_addr + 0);
	}
	struct FVector2D GetRand() {
		return memory.read<struct FVector2D>(m_addr + 80);
	}
	int32_t GetSamples() {
		return memory.read<int32_t>(m_addr + 88);
	}
	float GetIntensity() {
		return memory.read<float>(m_addr + 92);
	}
	struct FVector2D GetSamplePosition() {
		return memory.read<struct FVector2D>(m_addr + 96);
	}
	struct FLinearColor GetSampleColor() {
		return memory.read<struct FLinearColor>(m_addr + 104);
	}
	float GetSampleIntensity() {
		return memory.read<float>(m_addr + 120);
	}
	float GetSampleSize() {
		return memory.read<float>(m_addr + 124);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnQuartzCommandEvent__DelegateSignature
{
public:
	FOnQuartzCommandEvent__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class EQuartzCommandDelegateSubType GetEventType() {
		return memory.read<enum class EQuartzCommandDelegateSubType>(m_addr + 0);
	}
	struct FName GetName() {
		return memory.read<struct FName>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FBlendProfileBoneEntry
{
public:
	FBlendProfileBoneEntry(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FBoneReference GetBoneReference() {
		return memory.read<struct FBoneReference>(m_addr + 0);
	}
	float GetBlendScale() {
		return memory.read<float>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FRadialDamageEvent
{
public:
	FRadialDamageEvent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRadialDamageParams GetParams() {
		return memory.read<struct FRadialDamageParams>(m_addr + 16);
	}
	struct FVector GetOrigin() {
		return memory.read<struct FVector>(m_addr + 36);
	}
	struct TArray<struct FHitResult> GetComponentHits() {
		return memory.read<struct TArray<struct FHitResult>>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetIntOption
{
public:
	FGetIntOption(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetOptions() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FString GetKey() {
		return memory.read<struct FString>(m_addr + 16);
	}
	int32_t GetDefaultValue() {
		return memory.read<int32_t>(m_addr + 32);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 36);
	}

private:
	std::uint64_t m_addr = 0;
};class FLatentActionInfo
{
public:
	FLatentActionInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetLinkage() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetUUID() {
		return memory.read<int32_t>(m_addr + 4);
	}
	struct FName GetExecutionFunction() {
		return memory.read<struct FName>(m_addr + 8);
	}
	struct UObject GetCallbackTarget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UObject(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetCullDistances
{
public:
	FSetCullDistances(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetStartCullDistance() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetEndCullDistance() {
		return memory.read<int32_t>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnQueueSubtitles__DelegateSignature
{
public:
	FOnQueueSubtitles__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FSubtitleCue> GetSubtitles() {
		return memory.read<struct TArray<struct FSubtitleCue>>(m_addr + 0);
	}
	float GetCueDuration() {
		return memory.read<float>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSubtitleCue
{
public:
	FSubtitleCue(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetText() {
		return memory.read<struct FText>(m_addr + 0);
	}
	float GetTime() {
		return memory.read<float>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetRelativeScale3D
{
public:
	FSetRelativeScale3D(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetNewScale3D() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FHasValidAnimationInstance
{
public:
	FHasValidAnimationInstance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnAudioPlayStateChanged__DelegateSignature
{
public:
	FOnAudioPlayStateChanged__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class EAudioComponentPlayState GetPlayState() {
		return memory.read<enum class EAudioComponentPlayState>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnAudioVirtualizationChanged__DelegateSignature
{
public:
	FOnAudioVirtualizationChanged__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbIsVirtualized() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetRightVectorAtDistanceAlongSpline
{
public:
	FGetRightVectorAtDistanceAlongSpline(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetDistance() {
		return memory.read<float>(m_addr + 0);
	}
	enum class ESplineCoordinateSpace GetCoordinateSpace() {
		return memory.read<enum class ESplineCoordinateSpace>(m_addr + 4);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FClamp
{
public:
	FClamp(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetValue() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetMin() {
		return memory.read<int32_t>(m_addr + 4);
	}
	int32_t GetMax() {
		return memory.read<int32_t>(m_addr + 8);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnAudioSingleEnvelopeValue__DelegateSignature
{
public:
	FOnAudioSingleEnvelopeValue__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USoundWave GetPlayingSoundWave() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct USoundWave(ptr_addr);
	}
	float GetEnvelopeValue() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FFontCharacter
{
public:
	FFontCharacter(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetStartU() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetStartV() {
		return memory.read<int32_t>(m_addr + 4);
	}
	int32_t GetUSize() {
		return memory.read<int32_t>(m_addr + 8);
	}
	int32_t GetVSize() {
		return memory.read<int32_t>(m_addr + 12);
	}
	char GetTextureIndex() {
		return memory.read<char>(m_addr + 16);
	}
	int32_t GetVerticalOffset() {
		return memory.read<int32_t>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FLoadAsset_Blocking
{
public:
	FLoadAsset_Blocking(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftObjectPtr<UObject> GetAsset() {
		return memory.read<struct TSoftObjectPtr<UObject>>(m_addr + 0);
	}
	struct UObject GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct UObject(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FRandomRotatorFromStream
{
public:
	FRandomRotatorFromStream(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbRoll() {
		return memory.read<bool>(m_addr + 0);
	}
	struct FRandomStream GetStream() {
		return memory.read<struct FRandomStream>(m_addr + 4);
	}
	struct FRotator GetReturnValue() {
		return memory.read<struct FRotator>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnForceFeedbackFinished__DelegateSignature
{
public:
	FOnForceFeedbackFinished__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UForceFeedbackComponent GetForceFeedbackComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UForceFeedbackComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FInputActionHandlerDynamicSignature__DelegateSignature
{
public:
	FInputActionHandlerDynamicSignature__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKey GetKey() {
		return memory.read<struct FKey>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FDepthFieldGlowInfo
{
public:
	FDepthFieldGlowInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	char GetbEnableGlow() {
		return memory.read<char>(m_addr + 0);
	}
	struct FLinearColor GetGlowColor() {
		return memory.read<struct FLinearColor>(m_addr + 4);
	}
	struct FVector2D GetGlowOuterRadius() {
		return memory.read<struct FVector2D>(m_addr + 20);
	}
	struct FVector2D GetGlowInnerRadius() {
		return memory.read<struct FVector2D>(m_addr + 28);
	}

private:
	std::uint64_t m_addr = 0;
};class FInputTouchHandlerDynamicSignature__DelegateSignature
{
public:
	FInputTouchHandlerDynamicSignature__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class ETouchIndex GetFingerIndex() {
		return memory.read<enum class ETouchIndex>(m_addr + 0);
	}
	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetPI
{
public:
	FGetPI(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FArray_RandomFromStream
{
public:
	FArray_RandomFromStream(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<int32_t> GetTargetArray() {
		return memory.read<struct TArray<int32_t>>(m_addr + 0);
	}
	struct FRandomStream GetRandomStream() {
		return memory.read<struct FRandomStream>(m_addr + 16);
	}
	int32_t GetOutItem() {
		return memory.read<int32_t>(m_addr + 24);
	}
	int32_t GetOutIndex() {
		return memory.read<int32_t>(m_addr + 28);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetInputVectorAxisValue
{
public:
	FGetInputVectorAxisValue(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKey GetInputAxisKey() {
		return memory.read<struct FKey>(m_addr + 0);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FInputGestureHandlerDynamicSignature__DelegateSignature
{
public:
	FInputGestureHandlerDynamicSignature__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetSocketRotation
{
public:
	FGetSocketRotation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetInSocketName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FRotator GetReturnValue() {
		return memory.read<struct FRotator>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetVolumeButtonsHandledBySystem
{
public:
	FGetVolumeButtonsHandledBySystem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetCurrentSwing2
{
public:
	FGetCurrentSwing2(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FConstrainDirectionToPlane
{
public:
	FConstrainDirectionToPlane(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetDirection() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetSplinePointType
{
public:
	FSetSplinePointType(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetPointIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	enum class ESplinePointType GetType() {
		return memory.read<enum class ESplinePointType>(m_addr + 4);
	}
	bool GetbUpdateSpline() {
		return memory.read<bool>(m_addr + 5);
	}

private:
	std::uint64_t m_addr = 0;
};class FConstrainNormalToPlane
{
public:
	FConstrainNormalToPlane(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetNormal() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetGravityZ
{
public:
	FGetGravityZ(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FStaticTerrainLayerWeightParameter
{
public:
	FStaticTerrainLayerWeightParameter(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetWeightmapIndex() {
		return memory.read<int32_t>(m_addr + 36);
	}
	bool GetbWeightBasedBlend() {
		return memory.read<bool>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};class FCachedPoseIndices
{
public:
	FCachedPoseIndices(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<int32_t> GetOrderedSavedPoseNodeIndices() {
		return memory.read<struct TArray<int32_t>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FClampVectorSize
{
public:
	FClampVectorSize(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetA() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	float GetMin() {
		return memory.read<float>(m_addr + 12);
	}
	float GetMax() {
		return memory.read<float>(m_addr + 16);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetMaxSpeed
{
public:
	FGetMaxSpeed(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FConvertToRelativePath
{
public:
	FConvertToRelativePath(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetFilename() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetSkinWeightOverride
{
public:
	FSetSkinWeightOverride(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetLODIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct TArray<struct FSkelMeshSkinWeightInfo> GetSkinWeights() {
		return memory.read<struct TArray<struct FSkelMeshSkinWeightInfo>>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetTexture
{
public:
	FSetTexture(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTexture GetInTexture() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UTexture(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetHiddenInSceneCapture
{
public:
	FSetHiddenInSceneCapture(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetLocationAtSplinePoint
{
public:
	FGetLocationAtSplinePoint(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetPointIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	enum class ESplineCoordinateSpace GetCoordinateSpace() {
		return memory.read<enum class ESplineCoordinateSpace>(m_addr + 4);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FLinearColor_ToNewOpacity
{
public:
	FLinearColor_ToNewOpacity(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLinearColor GetInColor() {
		return memory.read<struct FLinearColor>(m_addr + 0);
	}
	float GetInOpacity() {
		return memory.read<float>(m_addr + 16);
	}
	struct FLinearColor GetReturnValue() {
		return memory.read<struct FLinearColor>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetGenerateOverlapEvents
{
public:
	FGetGenerateOverlapEvents(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetSocketTransform
{
public:
	FGetSocketTransform(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetInSocketName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	enum class ERelativeTransformSpace GetTransformSpace() {
		return memory.read<enum class ERelativeTransformSpace>(m_addr + 8);
	}
	struct FTransform GetReturnValue() {
		return memory.read<struct FTransform>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FCompilerNativizationOptions
{
public:
	FCompilerNativizationOptions(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetPlatformName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	bool GetServerOnlyPlatform() {
		return memory.read<bool>(m_addr + 8);
	}
	bool GetClientOnlyPlatform() {
		return memory.read<bool>(m_addr + 9);
	}
	bool GetbExcludeMonolithicHeaders() {
		return memory.read<bool>(m_addr + 10);
	}
	struct TArray<struct FName> GetExcludedModules() {
		return memory.read<struct TArray<struct FName>>(m_addr + 16);
	}
	struct TSet<struct FSoftObjectPath> GetExcludedAssets() {
		return memory.read<struct TSet<struct FSoftObjectPath>>(m_addr + 32);
	}
	struct TArray<struct FString> GetExcludedFolderPaths() {
		return memory.read<struct TArray<struct FString>>(m_addr + 112);
	}

private:
	std::uint64_t m_addr = 0;
};class FApplyPhysicalAnimationSettingsBelow
{
public:
	FApplyPhysicalAnimationSettingsBelow(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetBodyName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FPhysicalAnimationData GetPhysicalAnimationData() {
		return memory.read<struct FPhysicalAnimationData>(m_addr + 8);
	}
	bool GetbIncludeSelf() {
		return memory.read<bool>(m_addr + 44);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetPhysicsVolume
{
public:
	FGetPhysicsVolume(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APhysicsVolume GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APhysicsVolume(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FTransformToBoneSpace
{
public:
	FTransformToBoneSpace(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FVector GetInPosition() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	struct FRotator GetInRotation() {
		return memory.read<struct FRotator>(m_addr + 20);
	}
	struct FVector GetOutPosition() {
		return memory.read<struct FVector>(m_addr + 32);
	}
	struct FRotator GetOutRotation() {
		return memory.read<struct FRotator>(m_addr + 44);
	}

private:
	std::uint64_t m_addr = 0;
};class FEqualEqual_DateTimeDateTime
{
public:
	FEqualEqual_DateTimeDateTime(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDateTime GetA() {
		return memory.read<struct FDateTime>(m_addr + 0);
	}
	struct FDateTime GetB() {
		return memory.read<struct FDateTime>(m_addr + 8);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FLODSoloTrack
{
public:
	FLODSoloTrack(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<char> GetSoloEnableSetting() {
		return memory.read<struct TArray<char>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetPlaneConstraintAxisSetting
{
public:
	FGetPlaneConstraintAxisSetting(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class EPlaneConstraintAxisSetting GetReturnValue() {
		return memory.read<enum class EPlaneConstraintAxisSetting>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FShowPlatformSpecificAchievementsScreen
{
public:
	FShowPlatformSpecificAchievementsScreen(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APlayerController GetSpecificPlayer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APlayerController(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FConv_Vector2dToText
{
public:
	FConv_Vector2dToText(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector2D GetInVec() {
		return memory.read<struct FVector2D>(m_addr + 0);
	}
	struct FText GetReturnValue() {
		return memory.read<struct FText>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FRotatorFromAxisAndAngle
{
public:
	FRotatorFromAxisAndAngle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetAxis() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	float GetAngle() {
		return memory.read<float>(m_addr + 12);
	}
	struct FRotator GetReturnValue() {
		return memory.read<struct FRotator>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FBreakSoftClassPath
{
public:
	FBreakSoftClassPath(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FSoftClassPath GetInSoftClassPath() {
		return memory.read<struct FSoftClassPath>(m_addr + 0);
	}
	struct FString GetPathString() {
		return memory.read<struct FString>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FNotEqualExactly_Vector2DVector2D
{
public:
	FNotEqualExactly_Vector2DVector2D(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector2D GetA() {
		return memory.read<struct FVector2D>(m_addr + 0);
	}
	struct FVector2D GetB() {
		return memory.read<struct FVector2D>(m_addr + 8);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FScheduleLocalNotificationBadgeAtTime
{
public:
	FScheduleLocalNotificationBadgeAtTime(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDateTime GetFireDateTime() {
		return memory.read<struct FDateTime>(m_addr + 0);
	}
	bool GetLocalTime() {
		return memory.read<bool>(m_addr + 8);
	}
	struct FString GetActivationEvent() {
		return memory.read<struct FString>(m_addr + 16);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetPlaneConstraintNormal
{
public:
	FGetPlaneConstraintNormal(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_GetRootComponent
{
public:
	FK2_GetRootComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USceneComponent GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct USceneComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FColorGradePerRangeSettings
{
public:
	FColorGradePerRangeSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector4 GetSaturation() {
		return memory.read<struct FVector4>(m_addr + 0);
	}
	struct FVector4 GetContrast() {
		return memory.read<struct FVector4>(m_addr + 16);
	}
	struct FVector4 GetGamma() {
		return memory.read<struct FVector4>(m_addr + 32);
	}
	struct FVector4 GetGain() {
		return memory.read<struct FVector4>(m_addr + 48);
	}
	struct FVector4 GetOffset() {
		return memory.read<struct FVector4>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetAngularVelocityDriveTwistAndSwing
{
public:
	FSetAngularVelocityDriveTwistAndSwing(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbEnableTwistDrive() {
		return memory.read<bool>(m_addr + 0);
	}
	bool GetbEnableSwingDrive() {
		return memory.read<bool>(m_addr + 1);
	}

private:
	std::uint64_t m_addr = 0;
};class FVector_NetQuantize100
{
public:
	FVector_NetQuantize100(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FIsExceedingMaxSpeed
{
public:
	FIsExceedingMaxSpeed(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetMaxSpeed() {
		return memory.read<float>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_SetRelativeLocationAndRotation
{
public:
	FK2_SetRelativeLocationAndRotation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetNewLocation() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FRotator GetNewRotation() {
		return memory.read<struct FRotator>(m_addr + 12);
	}
	bool GetbSweep() {
		return memory.read<bool>(m_addr + 24);
	}
	struct FHitResult GetSweepHitResult() {
		return memory.read<struct FHitResult>(m_addr + 28);
	}
	bool GetbTeleport() {
		return memory.read<bool>(m_addr + 164);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetGlobalTimeDilation
{
public:
	FGetGlobalTimeDilation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_GetMaxSpeedModifier
{
public:
	FK2_GetMaxSpeedModifier(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_GetModifiedMaxSpeed
{
public:
	FK2_GetModifiedMaxSpeed(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FPlayQuantized
{
public:
	FPlayQuantized(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct UQuartzClockHandle GetInClockHandle() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UQuartzClockHandle(ptr_addr);
	}
	struct FQuartzQuantizationBoundary GetInQuantizationBoundary() {
		return memory.read<struct FQuartzQuantizationBoundary>(m_addr + 16);
	}
	struct FDelegate GetInDelegate() {
		return memory.read<struct FDelegate>(m_addr + 28);
	}
	float GetInStartTime() {
		return memory.read<float>(m_addr + 44);
	}
	float GetInFadeInDuration() {
		return memory.read<float>(m_addr + 48);
	}
	float GetInFadeVolumeLevel() {
		return memory.read<float>(m_addr + 52);
	}
	enum class EAudioFaderCurve GetInFadeCurve() {
		return memory.read<enum class EAudioFaderCurve>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_SetTimer
{
public:
	FK2_SetTimer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FString GetFunctionName() {
		return memory.read<struct FString>(m_addr + 8);
	}
	float GetTime() {
		return memory.read<float>(m_addr + 24);
	}
	bool GetbLooping() {
		return memory.read<bool>(m_addr + 28);
	}
	float GetInitialStartDelay() {
		return memory.read<float>(m_addr + 32);
	}
	float GetInitialStartDelayVariance() {
		return memory.read<float>(m_addr + 36);
	}
	struct FTimerHandle GetReturnValue() {
		return memory.read<struct FTimerHandle>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};class FCreateDynamicMaterialInstance
{
public:
	FCreateDynamicMaterialInstance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct UMaterialInterface GetParent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UMaterialInterface(ptr_addr);
	}
	struct FName GetOptionalName() {
		return memory.read<struct FName>(m_addr + 16);
	}
	enum class EMIDCreationFlags GetCreationFlags() {
		return memory.read<enum class EMIDCreationFlags>(m_addr + 24);
	}
	struct UMaterialInstanceDynamic GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 32);
		return struct UMaterialInstanceDynamic(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FDirectorTrackCut
{
public:
	FDirectorTrackCut(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetTime() {
		return memory.read<float>(m_addr + 0);
	}
	float GetTransitionTime() {
		return memory.read<float>(m_addr + 4);
	}
	struct FName GetTargetCamGroup() {
		return memory.read<struct FName>(m_addr + 8);
	}
	int32_t GetShotNumber() {
		return memory.read<int32_t>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetLinkedAnimLayerInstancesByGroup
{
public:
	FGetLinkedAnimLayerInstancesByGroup(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetInGroup() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct TArray<struct UAnimInstance> GetOutLinkedInstances() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct TArray<struct UAnimInstance>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetAllowedAnimCurveEvaluate
{
public:
	FGetAllowedAnimCurveEvaluate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FLeft
{
public:
	FLeft(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetSourceString() {
		return memory.read<struct FString>(m_addr + 0);
	}
	int32_t GetCount() {
		return memory.read<int32_t>(m_addr + 16);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FSoundAttenuationSettings
{
public:
	FSoundAttenuationSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	char GetbAttenuate() {
		return memory.read<char>(m_addr + 176);
	}
	char GetbSpatialize() {
		return memory.read<char>(m_addr + 176);
	}
	char GetbAttenuateWithLPF() {
		return memory.read<char>(m_addr + 176);
	}
	char GetbEnableListenerFocus() {
		return memory.read<char>(m_addr + 176);
	}
	char GetbEnableFocusInterpolation() {
		return memory.read<char>(m_addr + 176);
	}
	char GetbEnableOcclusion() {
		return memory.read<char>(m_addr + 176);
	}
	char GetbUseComplexCollisionForOcclusion() {
		return memory.read<char>(m_addr + 176);
	}
	char GetbEnableReverbSend() {
		return memory.read<char>(m_addr + 176);
	}
	char GetbEnablePriorityAttenuation() {
		return memory.read<char>(m_addr + 177);
	}
	char GetbApplyNormalizationToStereoSounds() {
		return memory.read<char>(m_addr + 177);
	}
	char GetbEnableLogFrequencyScaling() {
		return memory.read<char>(m_addr + 177);
	}
	char GetbEnableSubmixSends() {
		return memory.read<char>(m_addr + 177);
	}
	enum class ESoundSpatializationAlgorithm GetSpatializationAlgorithm() {
		return memory.read<enum class ESoundSpatializationAlgorithm>(m_addr + 178);
	}
	float GetBinauralRadius() {
		return memory.read<float>(m_addr + 180);
	}
	enum class EAirAbsorptionMethod GetAbsorptionMethod() {
		return memory.read<enum class EAirAbsorptionMethod>(m_addr + 184);
	}
	enum class ECollisionChannel GetOcclusionTraceChannel() {
		return memory.read<enum class ECollisionChannel>(m_addr + 185);
	}
	enum class EReverbSendMethod GetReverbSendMethod() {
		return memory.read<enum class EReverbSendMethod>(m_addr + 186);
	}
	enum class EPriorityAttenuationMethod GetPriorityAttenuationMethod() {
		return memory.read<enum class EPriorityAttenuationMethod>(m_addr + 187);
	}
	float GetOmniRadius() {
		return memory.read<float>(m_addr + 188);
	}
	float GetStereoSpread() {
		return memory.read<float>(m_addr + 192);
	}
	float GetLPFRadiusMin() {
		return memory.read<float>(m_addr + 196);
	}
	float GetLPFRadiusMax() {
		return memory.read<float>(m_addr + 200);
	}
	struct FRuntimeFloatCurve GetCustomLowpassAirAbsorptionCurve() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 208);
	}
	struct FRuntimeFloatCurve GetCustomHighpassAirAbsorptionCurve() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 344);
	}
	float GetLPFFrequencyAtMin() {
		return memory.read<float>(m_addr + 480);
	}
	float GetLPFFrequencyAtMax() {
		return memory.read<float>(m_addr + 484);
	}
	float GetHPFFrequencyAtMin() {
		return memory.read<float>(m_addr + 488);
	}
	float GetHPFFrequencyAtMax() {
		return memory.read<float>(m_addr + 492);
	}
	float GetFocusAzimuth() {
		return memory.read<float>(m_addr + 496);
	}
	float GetNonFocusAzimuth() {
		return memory.read<float>(m_addr + 500);
	}
	float GetFocusDistanceScale() {
		return memory.read<float>(m_addr + 504);
	}
	float GetNonFocusDistanceScale() {
		return memory.read<float>(m_addr + 508);
	}
	float GetFocusPriorityScale() {
		return memory.read<float>(m_addr + 512);
	}
	float GetNonFocusPriorityScale() {
		return memory.read<float>(m_addr + 516);
	}
	float GetFocusVolumeAttenuation() {
		return memory.read<float>(m_addr + 520);
	}
	float GetNonFocusVolumeAttenuation() {
		return memory.read<float>(m_addr + 524);
	}
	float GetFocusAttackInterpSpeed() {
		return memory.read<float>(m_addr + 528);
	}
	float GetFocusReleaseInterpSpeed() {
		return memory.read<float>(m_addr + 532);
	}
	float GetOcclusionLowPassFilterFrequency() {
		return memory.read<float>(m_addr + 536);
	}
	float GetOcclusionVolumeAttenuation() {
		return memory.read<float>(m_addr + 540);
	}
	float GetOcclusionInterpolationTime() {
		return memory.read<float>(m_addr + 544);
	}
	float GetReverbWetLevelMin() {
		return memory.read<float>(m_addr + 548);
	}
	float GetReverbWetLevelMax() {
		return memory.read<float>(m_addr + 552);
	}
	float GetReverbDistanceMin() {
		return memory.read<float>(m_addr + 556);
	}
	float GetReverbDistanceMax() {
		return memory.read<float>(m_addr + 560);
	}
	float GetManualReverbSendLevel() {
		return memory.read<float>(m_addr + 564);
	}
	struct FRuntimeFloatCurve GetCustomReverbSendCurve() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 568);
	}
	struct TArray<struct FAttenuationSubmixSendSettings> GetSubmixSendSettings() {
		return memory.read<struct TArray<struct FAttenuationSubmixSendSettings>>(m_addr + 704);
	}
	float GetPriorityAttenuationMin() {
		return memory.read<float>(m_addr + 720);
	}
	float GetPriorityAttenuationMax() {
		return memory.read<float>(m_addr + 724);
	}
	float GetPriorityAttenuationDistanceMin() {
		return memory.read<float>(m_addr + 728);
	}
	float GetPriorityAttenuationDistanceMax() {
		return memory.read<float>(m_addr + 732);
	}
	float GetManualPriorityAttenuation() {
		return memory.read<float>(m_addr + 736);
	}
	struct FRuntimeFloatCurve GetCustomPriorityAttenuationCurve() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 744);
	}
	struct FSoundAttenuationPluginSettings GetPluginSettings() {
		return memory.read<struct FSoundAttenuationPluginSettings>(m_addr + 880);
	}

private:
	std::uint64_t m_addr = 0;
};class FBuildString_Name
{
public:
	FBuildString_Name(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetAppendTo() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FString GetPrefix() {
		return memory.read<struct FString>(m_addr + 16);
	}
	struct FName GetInName() {
		return memory.read<struct FName>(m_addr + 32);
	}
	struct FString GetSuffix() {
		return memory.read<struct FString>(m_addr + 40);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};class FPhysicsVolumeChanged
{
public:
	FPhysicsVolumeChanged(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APhysicsVolume GetNewVolume() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APhysicsVolume(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSceneViewExtensionIsActiveFunctor
{
public:
	FSceneViewExtensionIsActiveFunctor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FDivide_IntPointInt
{
public:
	FDivide_IntPointInt(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FIntPoint GetA() {
		return memory.read<struct FIntPoint>(m_addr + 0);
	}
	int32_t GetB() {
		return memory.read<int32_t>(m_addr + 8);
	}
	struct FIntPoint GetReturnValue() {
		return memory.read<struct FIntPoint>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetNetDormancy
{
public:
	FSetNetDormancy(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class ENetDormancy GetNewDormancy() {
		return memory.read<enum class ENetDormancy>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetPlaneConstraintEnabled
{
public:
	FSetPlaneConstraintEnabled(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbEnabled() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FParameterChannelNames
{
public:
	FParameterChannelNames(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetR() {
		return memory.read<struct FText>(m_addr + 0);
	}
	struct FText GetG() {
		return memory.read<struct FText>(m_addr + 24);
	}
	struct FText GetB() {
		return memory.read<struct FText>(m_addr + 48);
	}
	struct FText GetA() {
		return memory.read<struct FText>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetInstanceAssetPlayerLength
{
public:
	FGetInstanceAssetPlayerLength(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetAssetPlayerIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FAnimationTransitionRule
{
public:
	FAnimationTransitionRule(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetRuleToExecute() {
		return memory.read<struct FName>(m_addr + 0);
	}
	bool GetTransitionReturnVal() {
		return memory.read<bool>(m_addr + 8);
	}
	int32_t GetTransitionIndex() {
		return memory.read<int32_t>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetUseFieldOfViewForLOD
{
public:
	FSetUseFieldOfViewForLOD(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbInUseFieldOfViewForLOD() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIgnoreComponentWhenMoving
{
public:
	FIgnoreComponentWhenMoving(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPrimitiveComponent GetComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UPrimitiveComponent(ptr_addr);
	}
	bool GetbShouldIgnore() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetPlaneConstraintFromVectors
{
public:
	FSetPlaneConstraintFromVectors(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetForward() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetUp() {
		return memory.read<struct FVector>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FCurveEdTab
{
public:
	FCurveEdTab(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetTabName() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct TArray<struct FCurveEdEntry> GetCurves() {
		return memory.read<struct TArray<struct FCurveEdEntry>>(m_addr + 16);
	}
	float GetViewStartInput() {
		return memory.read<float>(m_addr + 32);
	}
	float GetViewEndInput() {
		return memory.read<float>(m_addr + 36);
	}
	float GetViewStartOutput() {
		return memory.read<float>(m_addr + 40);
	}
	float GetViewEndOutput() {
		return memory.read<float>(m_addr + 44);
	}

private:
	std::uint64_t m_addr = 0;
};class FSoundModulationDefaultSettings
{
public:
	FSoundModulationDefaultSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FSoundModulationDestinationSettings GetVolumeModulationDestination() {
		return memory.read<struct FSoundModulationDestinationSettings>(m_addr + 0);
	}
	struct FSoundModulationDestinationSettings GetPitchModulationDestination() {
		return memory.read<struct FSoundModulationDestinationSettings>(m_addr + 16);
	}
	struct FSoundModulationDestinationSettings GetHighpassModulationDestination() {
		return memory.read<struct FSoundModulationDestinationSettings>(m_addr + 32);
	}
	struct FSoundModulationDestinationSettings GetLowpassModulationDestination() {
		return memory.read<struct FSoundModulationDestinationSettings>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};class FCameraShakeStartParams
{
public:
	FCameraShakeStartParams(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbIsRestarting() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FClientAdjustPosition
{
public:
	FClientAdjustPosition(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetTimestamp() {
		return memory.read<float>(m_addr + 0);
	}
	struct FVector GetNewLoc() {
		return memory.read<struct FVector>(m_addr + 4);
	}
	struct FVector GetNewVel() {
		return memory.read<struct FVector>(m_addr + 16);
	}
	struct UPrimitiveComponent GetNewBase() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 32);
		return struct UPrimitiveComponent(ptr_addr);
	}
	struct FName GetNewBaseBoneName() {
		return memory.read<struct FName>(m_addr + 40);
	}
	bool GetbHasBase() {
		return memory.read<bool>(m_addr + 48);
	}
	bool GetbBaseRelativePosition() {
		return memory.read<bool>(m_addr + 49);
	}
	char GetServerMovementMode() {
		return memory.read<char>(m_addr + 50);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetPlaneConstraintOrigin
{
public:
	FSetPlaneConstraintOrigin(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetPlaneOrigin() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetUpdatedComponent
{
public:
	FSetUpdatedComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USceneComponent GetNewUpdatedComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct USceneComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetActorEnableCollision
{
public:
	FSetActorEnableCollision(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbNewActorEnableCollision() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetGameInstanceSubsystem
{
public:
	FGetGameInstanceSubsystem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	UGameInstanceSubsystem GetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return UGameInstanceSubsystem(ptr_addr);
	}
	struct UGameInstanceSubsystem GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UGameInstanceSubsystem(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FClientPlaySoundAtLocation
{
public:
	FClientPlaySoundAtLocation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USoundBase GetSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct USoundBase(ptr_addr);
	}
	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	float GetVolumeMultiplier() {
		return memory.read<float>(m_addr + 20);
	}
	float GetPitchMultiplier() {
		return memory.read<float>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetViewportMouseCaptureMode
{
public:
	FSetViewportMouseCaptureMode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	enum class EMouseCaptureMode GetMouseCaptureMode() {
		return memory.read<enum class EMouseCaptureMode>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetSupportedFullscreenResolutions
{
public:
	FGetSupportedFullscreenResolutions(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FIntPoint> GetResolutions() {
		return memory.read<struct TArray<struct FIntPoint>>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FDrawDebugCone
{
public:
	FDrawDebugCone(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FVector GetOrigin() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	struct FVector GetDirection() {
		return memory.read<struct FVector>(m_addr + 20);
	}
	float GetLength() {
		return memory.read<float>(m_addr + 32);
	}
	float GetAngleWidth() {
		return memory.read<float>(m_addr + 36);
	}
	float GetAngleHeight() {
		return memory.read<float>(m_addr + 40);
	}
	int32_t GetNumSides() {
		return memory.read<int32_t>(m_addr + 44);
	}
	struct FLinearColor GetLineColor() {
		return memory.read<struct FLinearColor>(m_addr + 48);
	}
	float GetDuration() {
		return memory.read<float>(m_addr + 64);
	}
	float GetThickness() {
		return memory.read<float>(m_addr + 68);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetDirectionAtSplinePoint
{
public:
	FGetDirectionAtSplinePoint(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetPointIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	enum class ESplineCoordinateSpace GetCoordinateSpace() {
		return memory.read<enum class ESplineCoordinateSpace>(m_addr + 4);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FAddControlPointPosition
{
public:
	FAddControlPointPosition(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetPos() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	bool GetbPositionIsRelative() {
		return memory.read<bool>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FMax
{
public:
	FMax(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetA() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetB() {
		return memory.read<int32_t>(m_addr + 4);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnInterpToReverseDelegate__DelegateSignature
{
public:
	FOnInterpToReverseDelegate__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FHitResult GetImpactResult() {
		return memory.read<struct FHitResult>(m_addr + 0);
	}
	float GetTime() {
		return memory.read<float>(m_addr + 136);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_GetComponentLocation
{
public:
	FK2_GetComponentLocation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetForceNoCastShadowOnMobile
{
public:
	FSetForceNoCastShadowOnMobile(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetNewNoCastShadow() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetBeamEndPoint
{
public:
	FSetBeamEndPoint(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetEmitterIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct FVector GetNewEndPoint() {
		return memory.read<struct FVector>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FMatrix_GetInverse
{
public:
	FMatrix_GetInverse(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMatrix GetM() {
		return memory.read<struct FMatrix>(m_addr + 0);
	}
	struct FMatrix GetReturnValue() {
		return memory.read<struct FMatrix>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnInterpToStopDelegate__DelegateSignature
{
public:
	FOnInterpToStopDelegate__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FHitResult GetImpactResult() {
		return memory.read<struct FHitResult>(m_addr + 0);
	}
	float GetTime() {
		return memory.read<float>(m_addr + 136);
	}

private:
	std::uint64_t m_addr = 0;
};class FPostProcessSettings
{
public:
	FPostProcessSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	char GetbOverride_TemperatureType() {
		return memory.read<char>(m_addr + 0);
	}
	char GetbOverride_WhiteTemp() {
		return memory.read<char>(m_addr + 0);
	}
	char GetbOverride_WhiteTint() {
		return memory.read<char>(m_addr + 0);
	}
	char GetbOverride_ColorSaturation() {
		return memory.read<char>(m_addr + 0);
	}
	char GetbOverride_ColorContrast() {
		return memory.read<char>(m_addr + 0);
	}
	char GetbOverride_ColorGamma() {
		return memory.read<char>(m_addr + 0);
	}
	char GetbOverride_ColorGain() {
		return memory.read<char>(m_addr + 0);
	}
	char GetbOverride_ColorOffset() {
		return memory.read<char>(m_addr + 0);
	}
	char GetbOverride_ColorSaturationShadows() {
		return memory.read<char>(m_addr + 1);
	}
	char GetbOverride_ColorContrastShadows() {
		return memory.read<char>(m_addr + 1);
	}
	char GetbOverride_ColorGammaShadows() {
		return memory.read<char>(m_addr + 1);
	}
	char GetbOverride_ColorGainShadows() {
		return memory.read<char>(m_addr + 1);
	}
	char GetbOverride_ColorOffsetShadows() {
		return memory.read<char>(m_addr + 1);
	}
	char GetbOverride_ColorSaturationMidtones() {
		return memory.read<char>(m_addr + 1);
	}
	char GetbOverride_ColorContrastMidtones() {
		return memory.read<char>(m_addr + 1);
	}
	char GetbOverride_ColorGammaMidtones() {
		return memory.read<char>(m_addr + 1);
	}
	char GetbOverride_ColorGainMidtones() {
		return memory.read<char>(m_addr + 2);
	}
	char GetbOverride_ColorOffsetMidtones() {
		return memory.read<char>(m_addr + 2);
	}
	char GetbOverride_ColorSaturationHighlights() {
		return memory.read<char>(m_addr + 2);
	}
	char GetbOverride_ColorContrastHighlights() {
		return memory.read<char>(m_addr + 2);
	}
	char GetbOverride_ColorGammaHighlights() {
		return memory.read<char>(m_addr + 2);
	}
	char GetbOverride_ColorGainHighlights() {
		return memory.read<char>(m_addr + 2);
	}
	char GetbOverride_ColorOffsetHighlights() {
		return memory.read<char>(m_addr + 2);
	}
	char GetbOverride_ColorCorrectionShadowsMax() {
		return memory.read<char>(m_addr + 2);
	}
	char GetbOverride_ColorCorrectionHighlightsMin() {
		return memory.read<char>(m_addr + 3);
	}
	char GetbOverride_BlueCorrection() {
		return memory.read<char>(m_addr + 3);
	}
	char GetbOverride_ExpandGamut() {
		return memory.read<char>(m_addr + 3);
	}
	char GetbOverride_ToneCurveAmount() {
		return memory.read<char>(m_addr + 3);
	}
	char GetbOverride_FilmWhitePoint() {
		return memory.read<char>(m_addr + 3);
	}
	char GetbOverride_FilmSaturation() {
		return memory.read<char>(m_addr + 3);
	}
	char GetbOverride_FilmChannelMixerRed() {
		return memory.read<char>(m_addr + 3);
	}
	char GetbOverride_FilmChannelMixerGreen() {
		return memory.read<char>(m_addr + 3);
	}
	char GetbOverride_FilmChannelMixerBlue() {
		return memory.read<char>(m_addr + 4);
	}
	char GetbOverride_FilmContrast() {
		return memory.read<char>(m_addr + 4);
	}
	char GetbOverride_FilmDynamicRange() {
		return memory.read<char>(m_addr + 4);
	}
	char GetbOverride_FilmHealAmount() {
		return memory.read<char>(m_addr + 4);
	}
	char GetbOverride_FilmToeAmount() {
		return memory.read<char>(m_addr + 4);
	}
	char GetbOverride_FilmShadowTint() {
		return memory.read<char>(m_addr + 4);
	}
	char GetbOverride_FilmShadowTintBlend() {
		return memory.read<char>(m_addr + 4);
	}
	char GetbOverride_FilmShadowTintAmount() {
		return memory.read<char>(m_addr + 4);
	}
	char GetbOverride_FilmSlope() {
		return memory.read<char>(m_addr + 5);
	}
	char GetbOverride_FilmToe() {
		return memory.read<char>(m_addr + 5);
	}
	char GetbOverride_FilmShoulder() {
		return memory.read<char>(m_addr + 5);
	}
	char GetbOverride_FilmBlackClip() {
		return memory.read<char>(m_addr + 5);
	}
	char GetbOverride_FilmWhiteClip() {
		return memory.read<char>(m_addr + 5);
	}
	char GetbOverride_OutlineWeight() {
		return memory.read<char>(m_addr + 5);
	}
	char GetbOverride_OutlineColor1() {
		return memory.read<char>(m_addr + 5);
	}
	char GetbOverride_OutlineColor2() {
		return memory.read<char>(m_addr + 5);
	}
	char GetbOverride_OutlineColor3() {
		return memory.read<char>(m_addr + 6);
	}
	char GetbOverride_OutlineColor4() {
		return memory.read<char>(m_addr + 6);
	}
	char GetbOverride_OutlineColor5() {
		return memory.read<char>(m_addr + 6);
	}
	char GetbOverride_OutlineColor6() {
		return memory.read<char>(m_addr + 6);
	}
	char GetbOverride_OutlineColor7() {
		return memory.read<char>(m_addr + 6);
	}
	char GetbOverride_SceneColorTint() {
		return memory.read<char>(m_addr + 6);
	}
	char GetbOverride_SceneFringeIntensity() {
		return memory.read<char>(m_addr + 6);
	}
	char GetbOverride_ChromaticAberrationStartOffset() {
		return memory.read<char>(m_addr + 6);
	}
	char GetbOverride_AmbientCubemapTint() {
		return memory.read<char>(m_addr + 7);
	}
	char GetbOverride_AmbientCubemapIntensity() {
		return memory.read<char>(m_addr + 7);
	}
	char GetbOverride_BloomMethod() {
		return memory.read<char>(m_addr + 7);
	}
	char GetbOverride_BloomIntensity() {
		return memory.read<char>(m_addr + 7);
	}
	char GetbOverride_BloomThreshold() {
		return memory.read<char>(m_addr + 7);
	}
	char GetbOverride_Bloom1Tint() {
		return memory.read<char>(m_addr + 7);
	}
	char GetbOverride_Bloom1Size() {
		return memory.read<char>(m_addr + 7);
	}
	char GetbOverride_Bloom2Size() {
		return memory.read<char>(m_addr + 7);
	}
	char GetbOverride_Bloom2Tint() {
		return memory.read<char>(m_addr + 8);
	}
	char GetbOverride_Bloom3Tint() {
		return memory.read<char>(m_addr + 8);
	}
	char GetbOverride_Bloom3Size() {
		return memory.read<char>(m_addr + 8);
	}
	char GetbOverride_Bloom4Tint() {
		return memory.read<char>(m_addr + 8);
	}
	char GetbOverride_Bloom4Size() {
		return memory.read<char>(m_addr + 8);
	}
	char GetbOverride_Bloom5Tint() {
		return memory.read<char>(m_addr + 8);
	}
	char GetbOverride_Bloom5Size() {
		return memory.read<char>(m_addr + 8);
	}
	char GetbOverride_Bloom6Tint() {
		return memory.read<char>(m_addr + 8);
	}
	char GetbOverride_Bloom6Size() {
		return memory.read<char>(m_addr + 9);
	}
	char GetbOverride_BloomSizeScale() {
		return memory.read<char>(m_addr + 9);
	}
	char GetbOverride_BloomConvolutionTexture() {
		return memory.read<char>(m_addr + 9);
	}
	char GetbOverride_BloomConvolutionSize() {
		return memory.read<char>(m_addr + 9);
	}
	char GetbOverride_BloomConvolutionCenterUV() {
		return memory.read<char>(m_addr + 9);
	}
	char GetbOverride_BloomConvolutionPreFilter() {
		return memory.read<char>(m_addr + 9);
	}
	char GetbOverride_BloomConvolutionPreFilterMin() {
		return memory.read<char>(m_addr + 9);
	}
	char GetbOverride_BloomConvolutionPreFilterMax() {
		return memory.read<char>(m_addr + 9);
	}
	char GetbOverride_BloomConvolutionPreFilterMult() {
		return memory.read<char>(m_addr + 10);
	}
	char GetbOverride_BloomConvolutionBufferScale() {
		return memory.read<char>(m_addr + 10);
	}
	char GetbOverride_BloomDirtMaskIntensity() {
		return memory.read<char>(m_addr + 10);
	}
	char GetbOverride_BloomDirtMaskTint() {
		return memory.read<char>(m_addr + 10);
	}
	char GetbOverride_BloomDirtMask() {
		return memory.read<char>(m_addr + 10);
	}
	char GetbOverride_CameraShutterSpeed() {
		return memory.read<char>(m_addr + 10);
	}
	char GetbOverride_CameraISO() {
		return memory.read<char>(m_addr + 10);
	}
	char GetbOverride_AutoExposureMethod() {
		return memory.read<char>(m_addr + 10);
	}
	char GetbOverride_AutoExposureLowPercent() {
		return memory.read<char>(m_addr + 11);
	}
	char GetbOverride_AutoExposureHighPercent() {
		return memory.read<char>(m_addr + 11);
	}
	char GetbOverride_AutoExposureMinBrightness() {
		return memory.read<char>(m_addr + 11);
	}
	char GetbOverride_AutoExposureMaxBrightness() {
		return memory.read<char>(m_addr + 11);
	}
	char GetbOverride_AutoExposureCalibrationConstant() {
		return memory.read<char>(m_addr + 11);
	}
	char GetbOverride_AutoExposureSpeedUp() {
		return memory.read<char>(m_addr + 11);
	}
	char GetbOverride_AutoExposureSpeedDown() {
		return memory.read<char>(m_addr + 11);
	}
	char GetbOverride_AutoExposureBias() {
		return memory.read<char>(m_addr + 11);
	}
	char GetbOverride_AutoExposureBiasCurve() {
		return memory.read<char>(m_addr + 12);
	}
	char GetbOverride_AutoExposureMeterMask() {
		return memory.read<char>(m_addr + 12);
	}
	char GetbOverride_AutoExposureApplyPhysicalCameraExposure() {
		return memory.read<char>(m_addr + 12);
	}
	char GetbOverride_HistogramLogMin() {
		return memory.read<char>(m_addr + 12);
	}
	char GetbOverride_HistogramLogMax() {
		return memory.read<char>(m_addr + 12);
	}
	char GetbOverride_LensFlareIntensity() {
		return memory.read<char>(m_addr + 12);
	}
	char GetbOverride_LensFlareTint() {
		return memory.read<char>(m_addr + 12);
	}
	char GetbOverride_LensFlareTints() {
		return memory.read<char>(m_addr + 12);
	}
	char GetbOverride_LensFlareBokehSize() {
		return memory.read<char>(m_addr + 13);
	}
	char GetbOverride_LensFlareBokehShape() {
		return memory.read<char>(m_addr + 13);
	}
	char GetbOverride_LensFlareThreshold() {
		return memory.read<char>(m_addr + 13);
	}
	char GetbOverride_VignetteIntensity() {
		return memory.read<char>(m_addr + 13);
	}
	char GetbOverride_GrainIntensity() {
		return memory.read<char>(m_addr + 13);
	}
	char GetbOverride_GrainJitter() {
		return memory.read<char>(m_addr + 13);
	}
	char GetbOverride_AmbientOcclusionIntensity() {
		return memory.read<char>(m_addr + 13);
	}
	char GetbOverride_AmbientOcclusionStaticFraction() {
		return memory.read<char>(m_addr + 13);
	}
	char GetbOverride_AmbientOcclusionRadius() {
		return memory.read<char>(m_addr + 14);
	}
	char GetbOverride_AmbientOcclusionFadeDistance() {
		return memory.read<char>(m_addr + 14);
	}
	char GetbOverride_AmbientOcclusionFadeRadius() {
		return memory.read<char>(m_addr + 14);
	}
	char GetbOverride_AmbientOcclusionDistance() {
		return memory.read<char>(m_addr + 14);
	}
	char GetbOverride_AmbientOcclusionRadiusInWS() {
		return memory.read<char>(m_addr + 14);
	}
	char GetbOverride_AmbientOcclusionPower() {
		return memory.read<char>(m_addr + 14);
	}
	char GetbOverride_AmbientOcclusionBias() {
		return memory.read<char>(m_addr + 14);
	}
	char GetbOverride_AmbientOcclusionQuality() {
		return memory.read<char>(m_addr + 14);
	}
	char GetbOverride_AmbientOcclusionMipBlend() {
		return memory.read<char>(m_addr + 15);
	}
	char GetbOverride_AmbientOcclusionMipScale() {
		return memory.read<char>(m_addr + 15);
	}
	char GetbOverride_AmbientOcclusionMipThreshold() {
		return memory.read<char>(m_addr + 15);
	}
	char GetbOverride_AmbientOcclusionTemporalBlendWeight() {
		return memory.read<char>(m_addr + 15);
	}
	char GetbOverride_RayTracingAO() {
		return memory.read<char>(m_addr + 16);
	}
	char GetbOverride_RayTracingAOSamplesPerPixel() {
		return memory.read<char>(m_addr + 16);
	}
	char GetbOverride_RayTracingAOIntensity() {
		return memory.read<char>(m_addr + 16);
	}
	char GetbOverride_RayTracingAORadius() {
		return memory.read<char>(m_addr + 16);
	}
	char GetbOverride_LPVIntensity() {
		return memory.read<char>(m_addr + 20);
	}
	char GetbOverride_LPVDirectionalOcclusionIntensity() {
		return memory.read<char>(m_addr + 20);
	}
	char GetbOverride_LPVDirectionalOcclusionRadius() {
		return memory.read<char>(m_addr + 20);
	}
	char GetbOverride_LPVDiffuseOcclusionExponent() {
		return memory.read<char>(m_addr + 20);
	}
	char GetbOverride_LPVSpecularOcclusionExponent() {
		return memory.read<char>(m_addr + 20);
	}
	char GetbOverride_LPVDiffuseOcclusionIntensity() {
		return memory.read<char>(m_addr + 20);
	}
	char GetbOverride_LPVSpecularOcclusionIntensity() {
		return memory.read<char>(m_addr + 20);
	}
	char GetbOverride_LPVSize() {
		return memory.read<char>(m_addr + 20);
	}
	char GetbOverride_LPVSecondaryOcclusionIntensity() {
		return memory.read<char>(m_addr + 21);
	}
	char GetbOverride_LPVSecondaryBounceIntensity() {
		return memory.read<char>(m_addr + 21);
	}
	char GetbOverride_LPVGeometryVolumeBias() {
		return memory.read<char>(m_addr + 21);
	}
	char GetbOverride_LPVVplInjectionBias() {
		return memory.read<char>(m_addr + 21);
	}
	char GetbOverride_LPVEmissiveInjectionIntensity() {
		return memory.read<char>(m_addr + 21);
	}
	char GetbOverride_LPVFadeRange() {
		return memory.read<char>(m_addr + 21);
	}
	char GetbOverride_LPVDirectionalOcclusionFadeRange() {
		return memory.read<char>(m_addr + 21);
	}
	char GetbOverride_IndirectLightingColor() {
		return memory.read<char>(m_addr + 21);
	}
	char GetbOverride_IndirectLightingIntensity() {
		return memory.read<char>(m_addr + 22);
	}
	char GetbOverride_ColorGradingIntensity() {
		return memory.read<char>(m_addr + 22);
	}
	char GetbOverride_ColorGradingLUT() {
		return memory.read<char>(m_addr + 22);
	}
	char GetbOverride_DepthOfFieldFocalDistance() {
		return memory.read<char>(m_addr + 22);
	}
	char GetbOverride_DepthOfFieldFstop() {
		return memory.read<char>(m_addr + 22);
	}
	char GetbOverride_DepthOfFieldMinFstop() {
		return memory.read<char>(m_addr + 22);
	}
	char GetbOverride_DepthOfFieldBladeCount() {
		return memory.read<char>(m_addr + 22);
	}
	char GetbOverride_DepthOfFieldSensorWidth() {
		return memory.read<char>(m_addr + 22);
	}
	char GetbOverride_DepthOfFieldDepthBlurRadius() {
		return memory.read<char>(m_addr + 23);
	}
	char GetbOverride_DepthOfFieldDepthBlurAmount() {
		return memory.read<char>(m_addr + 23);
	}
	char GetbOverride_DepthOfFieldFocalRegion() {
		return memory.read<char>(m_addr + 23);
	}
	char GetbOverride_DepthOfFieldNearTransitionRegion() {
		return memory.read<char>(m_addr + 23);
	}
	char GetbOverride_DepthOfFieldFarTransitionRegion() {
		return memory.read<char>(m_addr + 23);
	}
	char GetbOverride_DepthOfFieldScale() {
		return memory.read<char>(m_addr + 23);
	}
	char GetbOverride_DepthOfFieldNearBlurSize() {
		return memory.read<char>(m_addr + 23);
	}
	char GetbOverride_DepthOfFieldFarBlurSize() {
		return memory.read<char>(m_addr + 23);
	}
	char GetbOverride_MobileHQGaussian() {
		return memory.read<char>(m_addr + 24);
	}
	char GetbOverride_DepthOfFieldOcclusion() {
		return memory.read<char>(m_addr + 24);
	}
	char GetbOverride_DepthOfFieldSkyFocusDistance() {
		return memory.read<char>(m_addr + 24);
	}
	char GetbOverride_DepthOfFieldVignetteSize() {
		return memory.read<char>(m_addr + 24);
	}
	char GetbOverride_MotionBlurAmount() {
		return memory.read<char>(m_addr + 24);
	}
	char GetbOverride_MotionBlurMax() {
		return memory.read<char>(m_addr + 24);
	}
	char GetbOverride_MotionBlurTargetFPS() {
		return memory.read<char>(m_addr + 24);
	}
	char GetbOverride_MotionBlurPerObjectSize() {
		return memory.read<char>(m_addr + 24);
	}
	char GetbOverride_ScreenPercentage() {
		return memory.read<char>(m_addr + 25);
	}
	char GetbOverride_ScreenSpaceReflectionIntensity() {
		return memory.read<char>(m_addr + 25);
	}
	char GetbOverride_ScreenSpaceReflectionQuality() {
		return memory.read<char>(m_addr + 25);
	}
	char GetbOverride_ScreenSpaceReflectionMaxRoughness() {
		return memory.read<char>(m_addr + 25);
	}
	char GetbOverride_ScreenSpaceReflectionRoughnessScale() {
		return memory.read<char>(m_addr + 25);
	}
	char GetbOverride_ReflectionsType() {
		return memory.read<char>(m_addr + 28);
	}
	char GetbOverride_RayTracingReflectionsMaxRoughness() {
		return memory.read<char>(m_addr + 28);
	}
	char GetbOverride_RayTracingReflectionsMaxBounces() {
		return memory.read<char>(m_addr + 28);
	}
	char GetbOverride_RayTracingReflectionsSamplesPerPixel() {
		return memory.read<char>(m_addr + 28);
	}
	char GetbOverride_RayTracingReflectionsShadows() {
		return memory.read<char>(m_addr + 28);
	}
	char GetbOverride_RayTracingReflectionsTranslucency() {
		return memory.read<char>(m_addr + 28);
	}
	char GetbOverride_TranslucencyType() {
		return memory.read<char>(m_addr + 28);
	}
	char GetbOverride_RayTracingTranslucencyMaxRoughness() {
		return memory.read<char>(m_addr + 28);
	}
	char GetbOverride_RayTracingTranslucencyRefractionRays() {
		return memory.read<char>(m_addr + 29);
	}
	char GetbOverride_RayTracingTranslucencySamplesPerPixel() {
		return memory.read<char>(m_addr + 29);
	}
	char GetbOverride_RayTracingTranslucencyShadows() {
		return memory.read<char>(m_addr + 29);
	}
	char GetbOverride_RayTracingTranslucencyRefraction() {
		return memory.read<char>(m_addr + 29);
	}
	char GetbOverride_RayTracingGI() {
		return memory.read<char>(m_addr + 29);
	}
	char GetbOverride_RayTracingGIMaxBounces() {
		return memory.read<char>(m_addr + 29);
	}
	char GetbOverride_RayTracingGISamplesPerPixel() {
		return memory.read<char>(m_addr + 29);
	}
	char GetbOverride_PathTracingMaxBounces() {
		return memory.read<char>(m_addr + 29);
	}
	char GetbOverride_PathTracingSamplesPerPixel() {
		return memory.read<char>(m_addr + 30);
	}
	char GetbOverride_PathTracingFilterWidth() {
		return memory.read<char>(m_addr + 30);
	}
	char GetbOverride_PathTracingEnableEmissive() {
		return memory.read<char>(m_addr + 30);
	}
	char GetbOverride_PathTracingMaxPathExposure() {
		return memory.read<char>(m_addr + 30);
	}
	char GetbOverride_PathTracingEnableDenoiser() {
		return memory.read<char>(m_addr + 30);
	}
	char GetbMobileHQGaussian() {
		return memory.read<char>(m_addr + 32);
	}
	enum class EBloomMethod GetBloomMethod() {
		return memory.read<enum class EBloomMethod>(m_addr + 33);
	}
	enum class EAutoExposureMethod GetAutoExposureMethod() {
		return memory.read<enum class EAutoExposureMethod>(m_addr + 34);
	}
	enum class ETemperatureMethod GetTemperatureType() {
		return memory.read<enum class ETemperatureMethod>(m_addr + 35);
	}
	float GetWhiteTemp() {
		return memory.read<float>(m_addr + 36);
	}
	float GetWhiteTint() {
		return memory.read<float>(m_addr + 40);
	}
	struct FVector4 GetColorSaturation() {
		return memory.read<struct FVector4>(m_addr + 48);
	}
	struct FVector4 GetColorContrast() {
		return memory.read<struct FVector4>(m_addr + 64);
	}
	struct FVector4 GetColorGamma() {
		return memory.read<struct FVector4>(m_addr + 80);
	}
	struct FVector4 GetColorGain() {
		return memory.read<struct FVector4>(m_addr + 96);
	}
	struct FVector4 GetColorOffset() {
		return memory.read<struct FVector4>(m_addr + 112);
	}
	struct FVector4 GetColorSaturationShadows() {
		return memory.read<struct FVector4>(m_addr + 128);
	}
	struct FVector4 GetColorContrastShadows() {
		return memory.read<struct FVector4>(m_addr + 144);
	}
	struct FVector4 GetColorGammaShadows() {
		return memory.read<struct FVector4>(m_addr + 160);
	}
	struct FVector4 GetColorGainShadows() {
		return memory.read<struct FVector4>(m_addr + 176);
	}
	struct FVector4 GetColorOffsetShadows() {
		return memory.read<struct FVector4>(m_addr + 192);
	}
	struct FVector4 GetColorSaturationMidtones() {
		return memory.read<struct FVector4>(m_addr + 208);
	}
	struct FVector4 GetColorContrastMidtones() {
		return memory.read<struct FVector4>(m_addr + 224);
	}
	struct FVector4 GetColorGammaMidtones() {
		return memory.read<struct FVector4>(m_addr + 240);
	}
	struct FVector4 GetColorGainMidtones() {
		return memory.read<struct FVector4>(m_addr + 256);
	}
	struct FVector4 GetColorOffsetMidtones() {
		return memory.read<struct FVector4>(m_addr + 272);
	}
	struct FVector4 GetColorSaturationHighlights() {
		return memory.read<struct FVector4>(m_addr + 288);
	}
	struct FVector4 GetColorContrastHighlights() {
		return memory.read<struct FVector4>(m_addr + 304);
	}
	struct FVector4 GetColorGammaHighlights() {
		return memory.read<struct FVector4>(m_addr + 320);
	}
	struct FVector4 GetColorGainHighlights() {
		return memory.read<struct FVector4>(m_addr + 336);
	}
	struct FVector4 GetColorOffsetHighlights() {
		return memory.read<struct FVector4>(m_addr + 352);
	}
	float GetColorCorrectionHighlightsMin() {
		return memory.read<float>(m_addr + 368);
	}
	float GetColorCorrectionShadowsMax() {
		return memory.read<float>(m_addr + 372);
	}
	float GetBlueCorrection() {
		return memory.read<float>(m_addr + 376);
	}
	float GetExpandGamut() {
		return memory.read<float>(m_addr + 380);
	}
	float GetToneCurveAmount() {
		return memory.read<float>(m_addr + 384);
	}
	float GetFilmSlope() {
		return memory.read<float>(m_addr + 388);
	}
	float GetFilmToe() {
		return memory.read<float>(m_addr + 392);
	}
	float GetFilmShoulder() {
		return memory.read<float>(m_addr + 396);
	}
	float GetFilmBlackClip() {
		return memory.read<float>(m_addr + 400);
	}
	float GetFilmWhiteClip() {
		return memory.read<float>(m_addr + 404);
	}
	struct FLinearColor GetFilmWhitePoint() {
		return memory.read<struct FLinearColor>(m_addr + 408);
	}
	struct FLinearColor GetFilmShadowTint() {
		return memory.read<struct FLinearColor>(m_addr + 424);
	}
	float GetFilmShadowTintBlend() {
		return memory.read<float>(m_addr + 440);
	}
	float GetFilmShadowTintAmount() {
		return memory.read<float>(m_addr + 444);
	}
	float GetFilmSaturation() {
		return memory.read<float>(m_addr + 448);
	}
	struct FLinearColor GetFilmChannelMixerRed() {
		return memory.read<struct FLinearColor>(m_addr + 452);
	}
	struct FLinearColor GetFilmChannelMixerGreen() {
		return memory.read<struct FLinearColor>(m_addr + 468);
	}
	struct FLinearColor GetFilmChannelMixerBlue() {
		return memory.read<struct FLinearColor>(m_addr + 484);
	}
	float GetFilmContrast() {
		return memory.read<float>(m_addr + 500);
	}
	float GetFilmToeAmount() {
		return memory.read<float>(m_addr + 504);
	}
	float GetFilmHealAmount() {
		return memory.read<float>(m_addr + 508);
	}
	float GetFilmDynamicRange() {
		return memory.read<float>(m_addr + 512);
	}
	float GetOutlineWeight() {
		return memory.read<float>(m_addr + 516);
	}
	struct FLinearColor GetOutlineColor1() {
		return memory.read<struct FLinearColor>(m_addr + 520);
	}
	struct FLinearColor GetOutlineColor2() {
		return memory.read<struct FLinearColor>(m_addr + 536);
	}
	struct FLinearColor GetOutlineColor3() {
		return memory.read<struct FLinearColor>(m_addr + 552);
	}
	struct FLinearColor GetOutlineColor4() {
		return memory.read<struct FLinearColor>(m_addr + 568);
	}
	struct FLinearColor GetOutlineColor5() {
		return memory.read<struct FLinearColor>(m_addr + 584);
	}
	struct FLinearColor GetOutlineColor6() {
		return memory.read<struct FLinearColor>(m_addr + 600);
	}
	struct FLinearColor GetOutlineColor7() {
		return memory.read<struct FLinearColor>(m_addr + 616);
	}
	struct FLinearColor GetSceneColorTint() {
		return memory.read<struct FLinearColor>(m_addr + 632);
	}
	float GetSceneFringeIntensity() {
		return memory.read<float>(m_addr + 648);
	}
	float GetChromaticAberrationStartOffset() {
		return memory.read<float>(m_addr + 652);
	}
	float GetBloomIntensity() {
		return memory.read<float>(m_addr + 656);
	}
	float GetBloomThreshold() {
		return memory.read<float>(m_addr + 660);
	}
	float GetBloomSizeScale() {
		return memory.read<float>(m_addr + 664);
	}
	float GetBloom1Size() {
		return memory.read<float>(m_addr + 668);
	}
	float GetBloom2Size() {
		return memory.read<float>(m_addr + 672);
	}
	float GetBloom3Size() {
		return memory.read<float>(m_addr + 676);
	}
	float GetBloom4Size() {
		return memory.read<float>(m_addr + 680);
	}
	float GetBloom5Size() {
		return memory.read<float>(m_addr + 684);
	}
	float GetBloom6Size() {
		return memory.read<float>(m_addr + 688);
	}
	struct FLinearColor GetBloom1Tint() {
		return memory.read<struct FLinearColor>(m_addr + 692);
	}
	struct FLinearColor GetBloom2Tint() {
		return memory.read<struct FLinearColor>(m_addr + 708);
	}
	struct FLinearColor GetBloom3Tint() {
		return memory.read<struct FLinearColor>(m_addr + 724);
	}
	struct FLinearColor GetBloom4Tint() {
		return memory.read<struct FLinearColor>(m_addr + 740);
	}
	struct FLinearColor GetBloom5Tint() {
		return memory.read<struct FLinearColor>(m_addr + 756);
	}
	struct FLinearColor GetBloom6Tint() {
		return memory.read<struct FLinearColor>(m_addr + 772);
	}
	float GetBloomConvolutionSize() {
		return memory.read<float>(m_addr + 788);
	}
	struct UTexture2D GetBloomConvolutionTexture() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 792);
		return struct UTexture2D(ptr_addr);
	}
	struct FVector2D GetBloomConvolutionCenterUV() {
		return memory.read<struct FVector2D>(m_addr + 800);
	}
	float GetBloomConvolutionPreFilterMin() {
		return memory.read<float>(m_addr + 808);
	}
	float GetBloomConvolutionPreFilterMax() {
		return memory.read<float>(m_addr + 812);
	}
	float GetBloomConvolutionPreFilterMult() {
		return memory.read<float>(m_addr + 816);
	}
	float GetBloomConvolutionBufferScale() {
		return memory.read<float>(m_addr + 820);
	}
	struct UTexture GetBloomDirtMask() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 824);
		return struct UTexture(ptr_addr);
	}
	float GetBloomDirtMaskIntensity() {
		return memory.read<float>(m_addr + 832);
	}
	struct FLinearColor GetBloomDirtMaskTint() {
		return memory.read<struct FLinearColor>(m_addr + 836);
	}
	struct FLinearColor GetAmbientCubemapTint() {
		return memory.read<struct FLinearColor>(m_addr + 852);
	}
	float GetAmbientCubemapIntensity() {
		return memory.read<float>(m_addr + 868);
	}
	struct UTextureCube GetAmbientCubemap() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 872);
		return struct UTextureCube(ptr_addr);
	}
	float GetCameraShutterSpeed() {
		return memory.read<float>(m_addr + 880);
	}
	float GetCameraISO() {
		return memory.read<float>(m_addr + 884);
	}
	float GetDepthOfFieldFstop() {
		return memory.read<float>(m_addr + 888);
	}
	float GetDepthOfFieldMinFstop() {
		return memory.read<float>(m_addr + 892);
	}
	int32_t GetDepthOfFieldBladeCount() {
		return memory.read<int32_t>(m_addr + 896);
	}
	float GetAutoExposureBias() {
		return memory.read<float>(m_addr + 900);
	}
	float GetAutoExposureBiasBackup() {
		return memory.read<float>(m_addr + 904);
	}
	char GetbOverride_AutoExposureBiasBackup() {
		return memory.read<char>(m_addr + 908);
	}
	char GetAutoExposureApplyPhysicalCameraExposure() {
		return memory.read<char>(m_addr + 912);
	}
	struct UCurveFloat GetAutoExposureBiasCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 920);
		return struct UCurveFloat(ptr_addr);
	}
	struct UTexture GetAutoExposureMeterMask() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 928);
		return struct UTexture(ptr_addr);
	}
	float GetAutoExposureLowPercent() {
		return memory.read<float>(m_addr + 936);
	}
	float GetAutoExposureHighPercent() {
		return memory.read<float>(m_addr + 940);
	}
	float GetAutoExposureMinBrightness() {
		return memory.read<float>(m_addr + 944);
	}
	float GetAutoExposureMaxBrightness() {
		return memory.read<float>(m_addr + 948);
	}
	float GetAutoExposureSpeedUp() {
		return memory.read<float>(m_addr + 952);
	}
	float GetAutoExposureSpeedDown() {
		return memory.read<float>(m_addr + 956);
	}
	float GetHistogramLogMin() {
		return memory.read<float>(m_addr + 960);
	}
	float GetHistogramLogMax() {
		return memory.read<float>(m_addr + 964);
	}
	float GetAutoExposureCalibrationConstant() {
		return memory.read<float>(m_addr + 968);
	}
	float GetLensFlareIntensity() {
		return memory.read<float>(m_addr + 972);
	}
	struct FLinearColor GetLensFlareTint() {
		return memory.read<struct FLinearColor>(m_addr + 976);
	}
	float GetLensFlareBokehSize() {
		return memory.read<float>(m_addr + 992);
	}
	float GetLensFlareThreshold() {
		return memory.read<float>(m_addr + 996);
	}
	struct UTexture GetLensFlareBokehShape() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1000);
		return struct UTexture(ptr_addr);
	}
	struct FLinearColor GetLensFlareTints[8]() {
		return memory.read<struct FLinearColor>(m_addr + 1008);
	}
	float GetVignetteIntensity() {
		return memory.read<float>(m_addr + 1136);
	}
	float GetGrainJitter() {
		return memory.read<float>(m_addr + 1140);
	}
	float GetGrainIntensity() {
		return memory.read<float>(m_addr + 1144);
	}
	float GetAmbientOcclusionIntensity() {
		return memory.read<float>(m_addr + 1148);
	}
	float GetAmbientOcclusionStaticFraction() {
		return memory.read<float>(m_addr + 1152);
	}
	float GetAmbientOcclusionRadius() {
		return memory.read<float>(m_addr + 1156);
	}
	char GetAmbientOcclusionRadiusInWS() {
		return memory.read<char>(m_addr + 1160);
	}
	float GetAmbientOcclusionFadeDistance() {
		return memory.read<float>(m_addr + 1164);
	}
	float GetAmbientOcclusionFadeRadius() {
		return memory.read<float>(m_addr + 1168);
	}
	float GetAmbientOcclusionDistance() {
		return memory.read<float>(m_addr + 1172);
	}
	float GetAmbientOcclusionPower() {
		return memory.read<float>(m_addr + 1176);
	}
	float GetAmbientOcclusionBias() {
		return memory.read<float>(m_addr + 1180);
	}
	float GetAmbientOcclusionQuality() {
		return memory.read<float>(m_addr + 1184);
	}
	float GetAmbientOcclusionMipBlend() {
		return memory.read<float>(m_addr + 1188);
	}
	float GetAmbientOcclusionMipScale() {
		return memory.read<float>(m_addr + 1192);
	}
	float GetAmbientOcclusionMipThreshold() {
		return memory.read<float>(m_addr + 1196);
	}
	float GetAmbientOcclusionTemporalBlendWeight() {
		return memory.read<float>(m_addr + 1200);
	}
	char GetRayTracingAO() {
		return memory.read<char>(m_addr + 1204);
	}
	int32_t GetRayTracingAOSamplesPerPixel() {
		return memory.read<int32_t>(m_addr + 1208);
	}
	float GetRayTracingAOIntensity() {
		return memory.read<float>(m_addr + 1212);
	}
	float GetRayTracingAORadius() {
		return memory.read<float>(m_addr + 1216);
	}
	struct FLinearColor GetIndirectLightingColor() {
		return memory.read<struct FLinearColor>(m_addr + 1220);
	}
	float GetIndirectLightingIntensity() {
		return memory.read<float>(m_addr + 1236);
	}
	enum class ERayTracingGlobalIlluminationType GetRayTracingGIType() {
		return memory.read<enum class ERayTracingGlobalIlluminationType>(m_addr + 1240);
	}
	int32_t GetRayTracingGIMaxBounces() {
		return memory.read<int32_t>(m_addr + 1244);
	}
	int32_t GetRayTracingGISamplesPerPixel() {
		return memory.read<int32_t>(m_addr + 1248);
	}
	float GetColorGradingIntensity() {
		return memory.read<float>(m_addr + 1252);
	}
	struct UTexture GetColorGradingLUT() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1256);
		return struct UTexture(ptr_addr);
	}
	float GetDepthOfFieldSensorWidth() {
		return memory.read<float>(m_addr + 1264);
	}
	float GetDepthOfFieldFocalDistance() {
		return memory.read<float>(m_addr + 1268);
	}
	float GetDepthOfFieldDepthBlurAmount() {
		return memory.read<float>(m_addr + 1272);
	}
	float GetDepthOfFieldDepthBlurRadius() {
		return memory.read<float>(m_addr + 1276);
	}
	float GetDepthOfFieldFocalRegion() {
		return memory.read<float>(m_addr + 1280);
	}
	float GetDepthOfFieldNearTransitionRegion() {
		return memory.read<float>(m_addr + 1284);
	}
	float GetDepthOfFieldFarTransitionRegion() {
		return memory.read<float>(m_addr + 1288);
	}
	float GetDepthOfFieldScale() {
		return memory.read<float>(m_addr + 1292);
	}
	float GetDepthOfFieldNearBlurSize() {
		return memory.read<float>(m_addr + 1296);
	}
	float GetDepthOfFieldFarBlurSize() {
		return memory.read<float>(m_addr + 1300);
	}
	float GetDepthOfFieldOcclusion() {
		return memory.read<float>(m_addr + 1304);
	}
	float GetDepthOfFieldSkyFocusDistance() {
		return memory.read<float>(m_addr + 1308);
	}
	float GetDepthOfFieldVignetteSize() {
		return memory.read<float>(m_addr + 1312);
	}
	float GetMotionBlurAmount() {
		return memory.read<float>(m_addr + 1316);
	}
	float GetMotionBlurMax() {
		return memory.read<float>(m_addr + 1320);
	}
	int32_t GetMotionBlurTargetFPS() {
		return memory.read<int32_t>(m_addr + 1324);
	}
	float GetMotionBlurPerObjectSize() {
		return memory.read<float>(m_addr + 1328);
	}
	float GetLPVIntensity() {
		return memory.read<float>(m_addr + 1332);
	}
	float GetLPVVplInjectionBias() {
		return memory.read<float>(m_addr + 1336);
	}
	float GetLPVSize() {
		return memory.read<float>(m_addr + 1340);
	}
	float GetLPVSecondaryOcclusionIntensity() {
		return memory.read<float>(m_addr + 1344);
	}
	float GetLPVSecondaryBounceIntensity() {
		return memory.read<float>(m_addr + 1348);
	}
	float GetLPVGeometryVolumeBias() {
		return memory.read<float>(m_addr + 1352);
	}
	float GetLPVEmissiveInjectionIntensity() {
		return memory.read<float>(m_addr + 1356);
	}
	float GetLPVDirectionalOcclusionIntensity() {
		return memory.read<float>(m_addr + 1360);
	}
	float GetLPVDirectionalOcclusionRadius() {
		return memory.read<float>(m_addr + 1364);
	}
	float GetLPVDiffuseOcclusionExponent() {
		return memory.read<float>(m_addr + 1368);
	}
	float GetLPVSpecularOcclusionExponent() {
		return memory.read<float>(m_addr + 1372);
	}
	float GetLPVDiffuseOcclusionIntensity() {
		return memory.read<float>(m_addr + 1376);
	}
	float GetLPVSpecularOcclusionIntensity() {
		return memory.read<float>(m_addr + 1380);
	}
	enum class EReflectionsType GetReflectionsType() {
		return memory.read<enum class EReflectionsType>(m_addr + 1384);
	}
	float GetScreenSpaceReflectionIntensity() {
		return memory.read<float>(m_addr + 1388);
	}
	float GetScreenSpaceReflectionQuality() {
		return memory.read<float>(m_addr + 1392);
	}
	float GetScreenSpaceReflectionMaxRoughness() {
		return memory.read<float>(m_addr + 1396);
	}
	float GetRayTracingReflectionsMaxRoughness() {
		return memory.read<float>(m_addr + 1400);
	}
	int32_t GetRayTracingReflectionsMaxBounces() {
		return memory.read<int32_t>(m_addr + 1404);
	}
	int32_t GetRayTracingReflectionsSamplesPerPixel() {
		return memory.read<int32_t>(m_addr + 1408);
	}
	enum class EReflectedAndRefractedRayTracedShadows GetRayTracingReflectionsShadows() {
		return memory.read<enum class EReflectedAndRefractedRayTracedShadows>(m_addr + 1412);
	}
	char GetRayTracingReflectionsTranslucency() {
		return memory.read<char>(m_addr + 1413);
	}
	enum class ETranslucencyType GetTranslucencyType() {
		return memory.read<enum class ETranslucencyType>(m_addr + 1414);
	}
	float GetRayTracingTranslucencyMaxRoughness() {
		return memory.read<float>(m_addr + 1416);
	}
	int32_t GetRayTracingTranslucencyRefractionRays() {
		return memory.read<int32_t>(m_addr + 1420);
	}
	int32_t GetRayTracingTranslucencySamplesPerPixel() {
		return memory.read<int32_t>(m_addr + 1424);
	}
	enum class EReflectedAndRefractedRayTracedShadows GetRayTracingTranslucencyShadows() {
		return memory.read<enum class EReflectedAndRefractedRayTracedShadows>(m_addr + 1428);
	}
	char GetRayTracingTranslucencyRefraction() {
		return memory.read<char>(m_addr + 1429);
	}
	int32_t GetPathTracingMaxBounces() {
		return memory.read<int32_t>(m_addr + 1432);
	}
	int32_t GetPathTracingSamplesPerPixel() {
		return memory.read<int32_t>(m_addr + 1436);
	}
	float GetPathTracingFilterWidth() {
		return memory.read<float>(m_addr + 1440);
	}
	char GetPathTracingEnableEmissive() {
		return memory.read<char>(m_addr + 1444);
	}
	float GetPathTracingMaxPathExposure() {
		return memory.read<float>(m_addr + 1448);
	}
	char GetPathTracingEnableDenoiser() {
		return memory.read<char>(m_addr + 1452);
	}
	float GetLPVFadeRange() {
		return memory.read<float>(m_addr + 1456);
	}
	float GetLPVDirectionalOcclusionFadeRange() {
		return memory.read<float>(m_addr + 1460);
	}
	float GetScreenPercentage() {
		return memory.read<float>(m_addr + 1464);
	}
	struct FWeightedBlendables GetWeightedBlendables() {
		return memory.read<struct FWeightedBlendables>(m_addr + 1472);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnProjectileStopDelegate__DelegateSignature
{
public:
	FOnProjectileStopDelegate__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FHitResult GetImpactResult() {
		return memory.read<struct FHitResult>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FLoadAssetClass
{
public:
	FLoadAssetClass(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct TSoftClassPtr<UObject> GetAssetClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 8);
	}
	struct FDelegate GetOnLoaded() {
		return memory.read<struct FDelegate>(m_addr + 48);
	}
	struct FLatentActionInfo GetLatentInfo() {
		return memory.read<struct FLatentActionInfo>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetLowPassFilterEnabled
{
public:
	FSetLowPassFilterEnabled(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetInLowPassFilterEnabled() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSoundClassProperties
{
public:
	FSoundClassProperties(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetVolume() {
		return memory.read<float>(m_addr + 0);
	}
	float GetPitch() {
		return memory.read<float>(m_addr + 4);
	}
	float GetLowPassFilterFrequency() {
		return memory.read<float>(m_addr + 8);
	}
	float GetAttenuationDistanceScale() {
		return memory.read<float>(m_addr + 12);
	}
	float GetLFEBleed() {
		return memory.read<float>(m_addr + 16);
	}
	float GetVoiceCenterChannelVolume() {
		return memory.read<float>(m_addr + 20);
	}
	float GetRadioFilterVolume() {
		return memory.read<float>(m_addr + 24);
	}
	float GetRadioFilterVolumeThreshold() {
		return memory.read<float>(m_addr + 28);
	}
	char GetbApplyEffects() {
		return memory.read<char>(m_addr + 32);
	}
	char GetbAlwaysPlay() {
		return memory.read<char>(m_addr + 32);
	}
	char GetbIsUISound() {
		return memory.read<char>(m_addr + 32);
	}
	char GetbIsMusic() {
		return memory.read<char>(m_addr + 32);
	}
	char GetbCenterChannelOnly() {
		return memory.read<char>(m_addr + 32);
	}
	char GetbApplyAmbientVolumes() {
		return memory.read<char>(m_addr + 32);
	}
	char GetbReverb() {
		return memory.read<char>(m_addr + 32);
	}
	float GetDefault2DReverbSendAmount() {
		return memory.read<float>(m_addr + 36);
	}
	struct FSoundModulationDefaultSettings GetModulationSettings() {
		return memory.read<struct FSoundModulationDefaultSettings>(m_addr + 40);
	}
	enum class EAudioOutputTarget GetOutputTarget() {
		return memory.read<enum class EAudioOutputTarget>(m_addr + 104);
	}
	enum class ESoundWaveLoadingBehavior GetLoadingBehavior() {
		return memory.read<enum class ESoundWaveLoadingBehavior>(m_addr + 105);
	}
	struct USoundSubmix GetDefaultSubmix() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 112);
		return struct USoundSubmix(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetPostProcessInstance
{
public:
	FGetPostProcessInstance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimInstance GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimInstance(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsLevelVisible
{
public:
	FIsLevelVisible(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FVector_GetAbsMin
{
public:
	FVector_GetAbsMin(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetA() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnInterpToWaitBeginDelegate__DelegateSignature
{
public:
	FOnInterpToWaitBeginDelegate__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FHitResult GetImpactResult() {
		return memory.read<struct FHitResult>(m_addr + 0);
	}
	float GetTime() {
		return memory.read<float>(m_addr + 136);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetFloatPropertyAtSplineInputKey
{
public:
	FGetFloatPropertyAtSplineInputKey(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetInKey() {
		return memory.read<float>(m_addr + 0);
	}
	struct FName GetPropertyName() {
		return memory.read<struct FName>(m_addr + 4);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnInterpToWaitEndDelegate__DelegateSignature
{
public:
	FOnInterpToWaitEndDelegate__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FHitResult GetImpactResult() {
		return memory.read<struct FHitResult>(m_addr + 0);
	}
	float GetTime() {
		return memory.read<float>(m_addr + 136);
	}

private:
	std::uint64_t m_addr = 0;
};class FSnapRootComponentTo
{
public:
	FSnapRootComponentTo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetInParentActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}
	struct FName GetInSocketName() {
		return memory.read<struct FName>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FScaleByMomentOfInertia
{
public:
	FScaleByMomentOfInertia(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetInputVector() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 12);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_AddLocalRotation
{
public:
	FK2_AddLocalRotation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRotator GetDeltaRotation() {
		return memory.read<struct FRotator>(m_addr + 0);
	}
	bool GetbSweep() {
		return memory.read<bool>(m_addr + 12);
	}
	struct FHitResult GetSweepHitResult() {
		return memory.read<struct FHitResult>(m_addr + 16);
	}
	bool GetbTeleport() {
		return memory.read<bool>(m_addr + 152);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetCurvePosition
{
public:
	FGetCurvePosition(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UCurveLinearColor GetInCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UCurveLinearColor(ptr_addr);
	}
	float Getposition() {
		return memory.read<float>(m_addr + 8);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FRestartMovement
{
public:
	FRestartMovement(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetInitialDirection() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FAdd_QuatQuat
{
public:
	FAdd_QuatQuat(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FQuat GetA() {
		return memory.read<struct FQuat>(m_addr + 0);
	}
	struct FQuat GetB() {
		return memory.read<struct FQuat>(m_addr + 16);
	}
	struct FQuat GetReturnValue() {
		return memory.read<struct FQuat>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetUpVector
{
public:
	FGetUpVector(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRotator GetInRot() {
		return memory.read<struct FRotator>(m_addr + 0);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetLinearDriveParams
{
public:
	FSetLinearDriveParams(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetPositionStrength() {
		return memory.read<float>(m_addr + 0);
	}
	float GetVelocityStrength() {
		return memory.read<float>(m_addr + 4);
	}
	float GetInForceLimit() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetCullDistance
{
public:
	FSetCullDistance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewCullDistance() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetLoopingState
{
public:
	FSetLoopingState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbNewLooping() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetDotProductTo
{
public:
	FGetDotProductTo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetOtherActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FStopSimulating
{
public:
	FStopSimulating(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FHitResult GetHitResult() {
		return memory.read<struct FHitResult>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FDrawDebugLine
{
public:
	FDrawDebugLine(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FVector GetLineStart() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	struct FVector GetLineEnd() {
		return memory.read<struct FVector>(m_addr + 20);
	}
	struct FLinearColor GetLineColor() {
		return memory.read<struct FLinearColor>(m_addr + 32);
	}
	float GetDuration() {
		return memory.read<float>(m_addr + 48);
	}
	float GetThickness() {
		return memory.read<float>(m_addr + 52);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetStaticMaterials
{
public:
	FSetStaticMaterials(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FStaticMaterial> GetInStaticMaterials() {
		return memory.read<struct TArray<struct FStaticMaterial>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FDivide_IntPointIntPoint
{
public:
	FDivide_IntPointIntPoint(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FIntPoint GetA() {
		return memory.read<struct FIntPoint>(m_addr + 0);
	}
	struct FIntPoint GetB() {
		return memory.read<struct FIntPoint>(m_addr + 8);
	}
	struct FIntPoint GetReturnValue() {
		return memory.read<struct FIntPoint>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsInLaptopMode
{
public:
	FIsInLaptopMode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FPrintString
{
public:
	FPrintString(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FString GetinString() {
		return memory.read<struct FString>(m_addr + 8);
	}
	bool GetbPrintToScreen() {
		return memory.read<bool>(m_addr + 24);
	}
	bool GetbPrintToLog() {
		return memory.read<bool>(m_addr + 25);
	}
	struct FLinearColor GetTextColor() {
		return memory.read<struct FLinearColor>(m_addr + 28);
	}
	float GetDuration() {
		return memory.read<float>(m_addr + 44);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsInTabletMode
{
public:
	FIsInTabletMode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FDebugCreatePlayer
{
public:
	FDebugCreatePlayer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetControllerId() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetBoneRotationByName
{
public:
	FGetBoneRotationByName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	enum class EBoneSpaces GetBoneSpace() {
		return memory.read<enum class EBoneSpaces>(m_addr + 8);
	}
	struct FRotator GetReturnValue() {
		return memory.read<struct FRotator>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FEnterprisePluginsDir
{
public:
	FEnterprisePluginsDir(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetAltitudeScale
{
public:
	FSetAltitudeScale(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewAltitudeScale() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSupportsConvertibleLaptops
{
public:
	FSupportsConvertibleLaptops(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FAnimGroupInstance
{
public:
	FAnimGroupInstance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FGetPrimaryAssetIdFromSoftObjectReference
{
public:
	FGetPrimaryAssetIdFromSoftObjectReference(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftObjectPtr<UObject> GetSoftObjectReference() {
		return memory.read<struct TSoftObjectPtr<UObject>>(m_addr + 0);
	}
	struct FPrimaryAssetId GetReturnValue() {
		return memory.read<struct FPrimaryAssetId>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};class FDegAsin
{
public:
	FDegAsin(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetA() {
		return memory.read<float>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FCameraCacheEntry
{
public:
	FCameraCacheEntry(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetTimestamp() {
		return memory.read<float>(m_addr + 0);
	}
	struct FMinimalViewInfo GetPOV() {
		return memory.read<struct FMinimalViewInfo>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetLinearColorCurve
{
public:
	FSetLinearColorCurve(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UCurveLinearColor GetNewLinearColorCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UCurveLinearColor(ptr_addr);
	}
	struct FName GetLinearColorTrackName() {
		return memory.read<struct FName>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_BoxOverlapComponent
{
public:
	FK2_BoxOverlapComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetInBoxCentre() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FBox GetInBox() {
		return memory.read<struct FBox>(m_addr + 12);
	}
	bool GetbTraceComplex() {
		return memory.read<bool>(m_addr + 40);
	}
	bool GetbShowTrace() {
		return memory.read<bool>(m_addr + 41);
	}
	bool GetbPersistentShowTrace() {
		return memory.read<bool>(m_addr + 42);
	}
	struct FVector GetHitLocation() {
		return memory.read<struct FVector>(m_addr + 44);
	}
	struct FVector GetHitNormal() {
		return memory.read<struct FVector>(m_addr + 56);
	}
	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 68);
	}
	struct FHitResult GetOutHit() {
		return memory.read<struct FHitResult>(m_addr + 76);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 212);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnTimelineFloat__DelegateSignature
{
public:
	FOnTimelineFloat__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetOutput() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetTextureParameterValue
{
public:
	FSetTextureParameterValue(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetParameterName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct UTexture GetValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UTexture(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSlotEvaluationPose
{
public:
	FSlotEvaluationPose(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class EAdditiveAnimationType GetAdditiveType() {
		return memory.read<enum class EAdditiveAnimationType>(m_addr + 0);
	}
	float Getweight() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetAllowAnimCurveEvaluation
{
public:
	FSetAllowAnimCurveEvaluation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbInAllow() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetLinearColorValue
{
public:
	FGetLinearColorValue(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetInTime() {
		return memory.read<float>(m_addr + 0);
	}
	struct FLinearColor GetReturnValue() {
		return memory.read<struct FLinearColor>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetSquaredDistanceTo
{
public:
	FGetSquaredDistanceTo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetOtherActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnTimelineLinearColor__DelegateSignature
{
public:
	FOnTimelineLinearColor__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLinearColor GetOutput() {
		return memory.read<struct FLinearColor>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetAnimClass
{
public:
	FSetAnimClass(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UObject GetNewClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return UObject(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnDataDrivenCVarChanged__DelegateSignature
{
public:
	FOnDataDrivenCVarChanged__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetCVarName() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_ClearTimerHandle
{
public:
	FK2_ClearTimerHandle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FTimerHandle GetHandle() {
		return memory.read<struct FTimerHandle>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FChannelDefinition
{
public:
	FChannelDefinition(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetChannelName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FName GetClassName() {
		return memory.read<struct FName>(m_addr + 8);
	}
	UObject GetChannelClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return UObject(ptr_addr);
	}
	int32_t GetStaticChannelIndex() {
		return memory.read<int32_t>(m_addr + 24);
	}
	bool GetbTickOnCreate() {
		return memory.read<bool>(m_addr + 28);
	}
	bool GetbServerOpen() {
		return memory.read<bool>(m_addr + 29);
	}
	bool GetbClientOpen() {
		return memory.read<bool>(m_addr + 30);
	}
	bool GetbInitialServer() {
		return memory.read<bool>(m_addr + 31);
	}
	bool GetbInitialClient() {
		return memory.read<bool>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FConstraintBaseParams
{
public:
	FConstraintBaseParams(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetStiffness() {
		return memory.read<float>(m_addr + 0);
	}
	float GetDamping() {
		return memory.read<float>(m_addr + 4);
	}
	float GetRestitution() {
		return memory.read<float>(m_addr + 8);
	}
	float GetContactDistance() {
		return memory.read<float>(m_addr + 12);
	}
	char GetbSoftConstraint() {
		return memory.read<char>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetMouseSensitivity
{
public:
	FSetMouseSensitivity(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetSensitivity() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FMeshInstancingSettings
{
public:
	FMeshInstancingSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	AActor GetActorClassToUse() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return AActor(ptr_addr);
	}
	int32_t GetInstanceReplacementThreshold() {
		return memory.read<int32_t>(m_addr + 8);
	}
	enum class EMeshInstancingReplacementMethod GetMeshReplacementMethod() {
		return memory.read<enum class EMeshInstancingReplacementMethod>(m_addr + 12);
	}
	bool GetbSkipMeshesWithVertexColors() {
		return memory.read<bool>(m_addr + 13);
	}
	bool GetbUseHLODVolumes() {
		return memory.read<bool>(m_addr + 14);
	}
	bool GetbUseFullPreicision() {
		return memory.read<bool>(m_addr + 15);
	}
	UInstancedStaticMeshComponent GetISMComponentToUse() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return UInstancedStaticMeshComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FPoseLink
{
public:
	FPoseLink(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FComposeRotators
{
public:
	FComposeRotators(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRotator GetA() {
		return memory.read<struct FRotator>(m_addr + 0);
	}
	struct FRotator GetB() {
		return memory.read<struct FRotator>(m_addr + 12);
	}
	struct FRotator GetReturnValue() {
		return memory.read<struct FRotator>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetConsoleVariableBoolValue
{
public:
	FGetConsoleVariableBoolValue(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetVariableName() {
		return memory.read<struct FString>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_AttachTo
{
public:
	FK2_AttachTo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USceneComponent GetInParent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct USceneComponent(ptr_addr);
	}
	struct FName GetInSocketName() {
		return memory.read<struct FName>(m_addr + 8);
	}
	enum class EAttachLocation GetAttachType() {
		return memory.read<enum class EAttachLocation>(m_addr + 16);
	}
	bool GetbWeldSimulatedBodies() {
		return memory.read<bool>(m_addr + 17);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 18);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnCanvasRenderTargetUpdate__DelegateSignature
{
public:
	FOnCanvasRenderTargetUpdate__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UCanvas GetCanvas() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UCanvas(ptr_addr);
	}
	int32_t GetWidth() {
		return memory.read<int32_t>(m_addr + 8);
	}
	int32_t GetHeight() {
		return memory.read<int32_t>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetPaused
{
public:
	FSetPaused(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbPause() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FEditorMapPerformanceTestDefinition
{
public:
	FEditorMapPerformanceTestDefinition(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FSoftObjectPath GetPerformanceTestmap() {
		return memory.read<struct FSoftObjectPath>(m_addr + 0);
	}
	int32_t GetTestTimer() {
		return memory.read<int32_t>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetActorRelativeScale3D
{
public:
	FSetActorRelativeScale3D(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetNewRelativeScale() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetStartScale
{
public:
	FSetStartScale(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector2D GetStartScale() {
		return memory.read<struct FVector2D>(m_addr + 0);
	}
	bool GetbUpdateMesh() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetUnscaledSphereRadius
{
public:
	FGetUnscaledSphereRadius(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetCastInsetShadow
{
public:
	FSetCastInsetShadow(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbInCastInsetShadow() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FMakeRotFromY
{
public:
	FMakeRotFromY(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetY() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FRotator GetReturnValue() {
		return memory.read<struct FRotator>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetLaunchNotification
{
public:
	FGetLaunchNotification(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetNotificationLaunchedApp() {
		return memory.read<bool>(m_addr + 0);
	}
	struct FString GetActivationEvent() {
		return memory.read<struct FString>(m_addr + 8);
	}
	int32_t GetFireDate() {
		return memory.read<int32_t>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FInstigatedAnyDamageSignature__DelegateSignature
{
public:
	FInstigatedAnyDamageSignature__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetDamage() {
		return memory.read<float>(m_addr + 0);
	}
	struct UDamageType GetDamageType() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UDamageType(ptr_addr);
	}
	struct AActor GetDamagedActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct AActor(ptr_addr);
	}
	struct AActor GetDamageCauser() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 24);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FEquirectProps
{
public:
	FEquirectProps(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FBox2D GetLeftUVRect() {
		return memory.read<struct FBox2D>(m_addr + 0);
	}
	struct FBox2D GetRightUVRect() {
		return memory.read<struct FBox2D>(m_addr + 20);
	}
	struct FVector2D GetLeftScale() {
		return memory.read<struct FVector2D>(m_addr + 40);
	}
	struct FVector2D GetRightScale() {
		return memory.read<struct FVector2D>(m_addr + 48);
	}
	struct FVector2D GetLeftBias() {
		return memory.read<struct FVector2D>(m_addr + 56);
	}
	struct FVector2D GetRightBias() {
		return memory.read<struct FVector2D>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};class FServerMove
{
public:
	FServerMove(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetTimestamp() {
		return memory.read<float>(m_addr + 0);
	}
	struct FVector_NetQuantize10 GetInAccel() {
		return memory.read<struct FVector_NetQuantize10>(m_addr + 4);
	}
	struct FVector_NetQuantize100 GetClientLoc() {
		return memory.read<struct FVector_NetQuantize100>(m_addr + 16);
	}
	char GetCompressedMoveFlags() {
		return memory.read<char>(m_addr + 28);
	}
	char GetClientRoll() {
		return memory.read<char>(m_addr + 29);
	}
	uint32_t GetView() {
		return memory.read<uint32_t>(m_addr + 32);
	}
	struct UPrimitiveComponent GetClientMovementBase() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct UPrimitiveComponent(ptr_addr);
	}
	struct FName GetClientBaseBoneName() {
		return memory.read<struct FName>(m_addr + 48);
	}
	char GetClientMovementMode() {
		return memory.read<char>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};class FAudioComponentParam
{
public:
	FAudioComponentParam(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetParamName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	float GetFloatParam() {
		return memory.read<float>(m_addr + 8);
	}
	bool GetBoolParam() {
		return memory.read<bool>(m_addr + 12);
	}
	int32_t GetIntParam() {
		return memory.read<int32_t>(m_addr + 16);
	}
	struct USoundWave GetSoundWaveParam() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 24);
		return struct USoundWave(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FViewportDisplayCallback__DelegateSignature
{
public:
	FViewportDisplayCallback__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetOutText() {
		return memory.read<struct FText>(m_addr + 0);
	}
	struct FLinearColor GetOutColor() {
		return memory.read<struct FLinearColor>(m_addr + 24);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetCurrentLocale
{
public:
	FSetCurrentLocale(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetCulture() {
		return memory.read<struct FString>(m_addr + 0);
	}
	bool GetSaveToConfig() {
		return memory.read<bool>(m_addr + 16);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 17);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetLinkedAnimLayerInstanceByGroupAndClass
{
public:
	FGetLinkedAnimLayerInstanceByGroupAndClass(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetInGroup() {
		return memory.read<struct FName>(m_addr + 0);
	}
	UAnimInstance GetInClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return UAnimInstance(ptr_addr);
	}
	struct UAnimInstance GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UAnimInstance(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnAsyncHandleSaveGame__DelegateSignature
{
public:
	FOnAsyncHandleSaveGame__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USaveGame GetSaveGame() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct USaveGame(ptr_addr);
	}
	bool GetbSuccess() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FMovementModeChangedSignature__DelegateSignature
{
public:
	FMovementModeChangedSignature__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ACharacter GetCharacter() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct ACharacter(ptr_addr);
	}
	enum class EMovementMode GetPrevMovementMode() {
		return memory.read<enum class EMovementMode>(m_addr + 8);
	}
	char GetPreviousCustomMode() {
		return memory.read<char>(m_addr + 9);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetTransformAtSplineInputKey
{
public:
	FGetTransformAtSplineInputKey(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetInKey() {
		return memory.read<float>(m_addr + 0);
	}
	enum class ESplineCoordinateSpace GetCoordinateSpace() {
		return memory.read<enum class ESplineCoordinateSpace>(m_addr + 4);
	}
	bool GetbUseScale() {
		return memory.read<bool>(m_addr + 5);
	}
	struct FTransform GetReturnValue() {
		return memory.read<struct FTransform>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetAspectRatio
{
public:
	FSetAspectRatio(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetInAspectRatio() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_SetWorldLocation
{
public:
	FK2_SetWorldLocation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetNewLocation() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	bool GetbSweep() {
		return memory.read<bool>(m_addr + 12);
	}
	struct FHitResult GetSweepHitResult() {
		return memory.read<struct FHitResult>(m_addr + 16);
	}
	bool GetbTeleport() {
		return memory.read<bool>(m_addr + 152);
	}

private:
	std::uint64_t m_addr = 0;
};class FVertexOffsetUsage
{
public:
	FVertexOffsetUsage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetUsage() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCharacterMovementUpdatedSignature__DelegateSignature
{
public:
	FCharacterMovementUpdatedSignature__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetDeltaSeconds() {
		return memory.read<float>(m_addr + 0);
	}
	struct FVector GetOldLocation() {
		return memory.read<struct FVector>(m_addr + 4);
	}
	struct FVector GetOldVelocity() {
		return memory.read<struct FVector>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FVector_Left
{
public:
	FVector_Left(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FMultiply_VectorInt
{
public:
	FMultiply_VectorInt(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetA() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	int32_t GetB() {
		return memory.read<int32_t>(m_addr + 12);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FLandedSignature__DelegateSignature
{
public:
	FLandedSignature__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FHitResult GetHit() {
		return memory.read<struct FHitResult>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetPlatformUserDir
{
public:
	FGetPlatformUserDir(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetRotationAtSplineInputKey
{
public:
	FGetRotationAtSplineInputKey(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetInKey() {
		return memory.read<float>(m_addr + 0);
	}
	enum class ESplineCoordinateSpace GetCoordinateSpace() {
		return memory.read<enum class ESplineCoordinateSpace>(m_addr + 4);
	}
	struct FRotator GetReturnValue() {
		return memory.read<struct FRotator>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGreaterGreater_VectorRotator
{
public:
	FGreaterGreater_VectorRotator(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetA() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FRotator GetB() {
		return memory.read<struct FRotator>(m_addr + 12);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsInterpolationComplete
{
public:
	FIsInterpolationComplete(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FPointerEvent_GetUserIndex
{
public:
	FPointerEvent_GetUserIndex(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FPointerEvent GetInput() {
		return memory.read<struct FPointerEvent>(m_addr + 0);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 112);
	}

private:
	std::uint64_t m_addr = 0;
};class FMoveComponentTo
{
public:
	FMoveComponentTo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USceneComponent GetComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct USceneComponent(ptr_addr);
	}
	struct FVector GetTargetRelativeLocation() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	struct FRotator GetTargetRelativeRotation() {
		return memory.read<struct FRotator>(m_addr + 20);
	}
	bool GetbEaseOut() {
		return memory.read<bool>(m_addr + 32);
	}
	bool GetbEaseIn() {
		return memory.read<bool>(m_addr + 33);
	}
	float GetOverTime() {
		return memory.read<float>(m_addr + 36);
	}
	bool GetbForceShortestRotationPath() {
		return memory.read<bool>(m_addr + 40);
	}
	enum class EMoveComponentAction GetMoveAction() {
		return memory.read<enum class EMoveComponentAction>(m_addr + 41);
	}
	struct FLatentActionInfo GetLatentInfo() {
		return memory.read<struct FLatentActionInfo>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsVelocityUnderSimulationThreshold
{
public:
	FIsVelocityUnderSimulationThreshold(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FBoneToReplace
{
public:
	FBoneToReplace(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FBoneReference GetTargetBone() {
		return memory.read<struct FBoneReference>(m_addr + 0);
	}
	struct FBoneReference GetReplaceBone() {
		return memory.read<struct FBoneReference>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSkeletalMeshSamplingInfo
{
public:
	FSkeletalMeshSamplingInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FSkeletalMeshSamplingRegion> GetRegions() {
		return memory.read<struct TArray<struct FSkeletalMeshSamplingRegion>>(m_addr + 0);
	}
	struct FSkeletalMeshSamplingBuiltData GetBuiltData() {
		return memory.read<struct FSkeletalMeshSamplingBuiltData>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetLayerHeight
{
public:
	FSetLayerHeight(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetPreferredLanguages
{
public:
	FGetPreferredLanguages(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FString> GetReturnValue() {
		return memory.read<struct TArray<struct FString>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FVectorCurve
{
public:
	FVectorCurve(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRichCurve GetFloatCurves[3]() {
		return memory.read<struct FRichCurve>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FHLODProxyMesh
{
public:
	FHLODProxyMesh(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	 GetLODActor() {
		return memory.read<>(m_addr + 0);
	}
	struct UStaticMesh GetStaticMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 32);
		return struct UStaticMesh(ptr_addr);
	}
	struct FName GetKey() {
		return memory.read<struct FName>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};class FMaterialLayersFunctions
{
public:
	FMaterialLayersFunctions(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct UMaterialFunctionInterface> GetLayers() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct TArray<struct UMaterialFunctionInterface>(ptr_addr);
	}
	struct TArray<struct UMaterialFunctionInterface> GetBlends() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct TArray<struct UMaterialFunctionInterface>(ptr_addr);
	}
	struct TArray<bool> GetLayerStates() {
		return memory.read<struct TArray<bool>>(m_addr + 32);
	}
	struct FString GetKeyString() {
		return memory.read<struct FString>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};class FBlueprintDebugData
{
public:
	FBlueprintDebugData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FControlScreensaver
{
public:
	FControlScreensaver(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbAllowScreenSaver() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FLimitVelocity
{
public:
	FLimitVelocity(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetNewVelocity() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FMoveInterpolationTarget
{
public:
	FMoveInterpolationTarget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetNewLocation() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FRotator GetNewRotation() {
		return memory.read<struct FRotator>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnProjectileBounceDelegate__DelegateSignature
{
public:
	FOnProjectileBounceDelegate__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FHitResult GetImpactResult() {
		return memory.read<struct FHitResult>(m_addr + 0);
	}
	struct FVector GetImpactVelocity() {
		return memory.read<struct FVector>(m_addr + 136);
	}

private:
	std::uint64_t m_addr = 0;
};class FVector_CosineAngle2D
{
public:
	FVector_CosineAngle2D(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetA() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetB() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FLineTraceMulti
{
public:
	FLineTraceMulti(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FVector GetStart() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	struct FVector GetEnd() {
		return memory.read<struct FVector>(m_addr + 20);
	}
	enum class ETraceTypeQuery GetTraceChannel() {
		return memory.read<enum class ETraceTypeQuery>(m_addr + 32);
	}
	bool GetbTraceComplex() {
		return memory.read<bool>(m_addr + 33);
	}
	struct TArray<struct AActor> GetActorsToIgnore() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct TArray<struct AActor>(ptr_addr);
	}
	enum class EDrawDebugTrace GetDrawDebugType() {
		return memory.read<enum class EDrawDebugTrace>(m_addr + 56);
	}
	struct TArray<struct FHitResult> GetOutHits() {
		return memory.read<struct TArray<struct FHitResult>>(m_addr + 64);
	}
	bool GetbIgnoreSelf() {
		return memory.read<bool>(m_addr + 80);
	}
	struct FLinearColor GetTraceColor() {
		return memory.read<struct FLinearColor>(m_addr + 84);
	}
	struct FLinearColor GetTraceHitColor() {
		return memory.read<struct FLinearColor>(m_addr + 100);
	}
	float GetDrawTime() {
		return memory.read<float>(m_addr + 116);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 120);
	}

private:
	std::uint64_t m_addr = 0;
};class FConv_MatrixToRotator
{
public:
	FConv_MatrixToRotator(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMatrix GetInMatrix() {
		return memory.read<struct FMatrix>(m_addr + 0);
	}
	struct FRotator GetReturnValue() {
		return memory.read<struct FRotator>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};class FAsyncLoadPrimaryAssetList
{
public:
	FAsyncLoadPrimaryAssetList(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct TArray<struct FPrimaryAssetId> GetPrimaryAssetList() {
		return memory.read<struct TArray<struct FPrimaryAssetId>>(m_addr + 8);
	}
	struct TArray<struct FName> GetLoadBundles() {
		return memory.read<struct TArray<struct FName>>(m_addr + 24);
	}
	struct UAsyncActionLoadPrimaryAssetList GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct UAsyncActionLoadPrimaryAssetList(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetInterpolatedComponent
{
public:
	FSetInterpolatedComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USceneComponent GetComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct USceneComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetVelocityInLocalSpace
{
public:
	FSetVelocityInLocalSpace(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetNewVelocity() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FArray_Swap
{
public:
	FArray_Swap(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<int32_t> GetTargetArray() {
		return memory.read<struct TArray<int32_t>>(m_addr + 0);
	}
	int32_t GetfirstIndex() {
		return memory.read<int32_t>(m_addr + 16);
	}
	int32_t GetSecondIndex() {
		return memory.read<int32_t>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FMakeLiteralFloat
{
public:
	FMakeLiteralFloat(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetValue() {
		return memory.read<float>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsRelative
{
public:
	FIsRelative(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetInPath() {
		return memory.read<struct FString>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetInstanceAssetPlayerTimeFromEnd
{
public:
	FGetInstanceAssetPlayerTimeFromEnd(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetAssetPlayerIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FDebugRemovePlayer
{
public:
	FDebugRemovePlayer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetControllerId() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FClientUpdateLevelStreamingStatus
{
public:
	FClientUpdateLevelStreamingStatus(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetPackageName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	bool GetbNewShouldBeLoaded() {
		return memory.read<bool>(m_addr + 8);
	}
	bool GetbNewShouldBeVisible() {
		return memory.read<bool>(m_addr + 9);
	}
	bool GetbNewShouldBlockOnLoad() {
		return memory.read<bool>(m_addr + 10);
	}
	int32_t GetLODIndex() {
		return memory.read<int32_t>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FHandleNetworkError
{
public:
	FHandleNetworkError(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class ENetworkFailure GetFailureType() {
		return memory.read<enum class ENetworkFailure>(m_addr + 0);
	}
	bool GetbIsServer() {
		return memory.read<bool>(m_addr + 1);
	}

private:
	std::uint64_t m_addr = 0;
};class FComponentOverlapComponents
{
public:
	FComponentOverlapComponents(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPrimitiveComponent GetComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UPrimitiveComponent(ptr_addr);
	}
	struct FTransform GetComponentTransform() {
		return memory.read<struct FTransform>(m_addr + 16);
	}
	struct TArray<enum class EObjectTypeQuery> GetObjectTypes() {
		return memory.read<struct TArray<enum class EObjectTypeQuery>>(m_addr + 64);
	}
	UObject GetComponentClassFilter() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 80);
		return UObject(ptr_addr);
	}
	struct TArray<struct AActor> GetActorsToIgnore() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 88);
		return struct TArray<struct AActor>(ptr_addr);
	}
	struct TArray<struct UPrimitiveComponent> GetOutComponents() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 104);
		return struct TArray<struct UPrimitiveComponent>(ptr_addr);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 120);
	}

private:
	std::uint64_t m_addr = 0;
};class FReceiveActorBeginOverlap
{
public:
	FReceiveActorBeginOverlap(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetOtherActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetScaleAtDistanceAlongSpline
{
public:
	FGetScaleAtDistanceAlongSpline(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetDistance() {
		return memory.read<float>(m_addr + 0);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FTimespanRatio
{
public:
	FTimespanRatio(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTimespan GetA() {
		return memory.read<struct FTimespan>(m_addr + 0);
	}
	struct FTimespan GetB() {
		return memory.read<struct FTimespan>(m_addr + 8);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FHandleTravelError
{
public:
	FHandleTravelError(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class ETravelFailure GetFailureType() {
		return memory.read<enum class ETravelFailure>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FStartsWith
{
public:
	FStartsWith(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetSourceString() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FString GetInPrefix() {
		return memory.read<struct FString>(m_addr + 16);
	}
	enum class ESearchCase GetSearchCase() {
		return memory.read<enum class ESearchCase>(m_addr + 32);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 33);
	}

private:
	std::uint64_t m_addr = 0;
};class FRootDir
{
public:
	FRootDir(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FBoneReference
{
public:
	FBoneReference(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FPlatformScreenOrientationChangedDelegate__DelegateSignature
{
public:
	FPlatformScreenOrientationChangedDelegate__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class EScreenOrientation GetinScreenOrientation() {
		return memory.read<enum class EScreenOrientation>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnPrimaryAssetClassLoaded__DelegateSignature
{
public:
	FOnPrimaryAssetClassLoaded__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UObject GetLoaded() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return UObject(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetWorldSubsystem
{
public:
	FGetWorldSubsystem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	UWorldSubsystem GetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return UWorldSubsystem(ptr_addr);
	}
	struct UWorldSubsystem GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UWorldSubsystem(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FFinishSpawningActor
{
public:
	FFinishSpawningActor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}
	struct FTransform GetSpawnTransform() {
		return memory.read<struct FTransform>(m_addr + 16);
	}
	struct AActor GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 64);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FDoesImplementInterface
{
public:
	FDoesImplementInterface(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetTestObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	UInterface GetInterface() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return UInterface(ptr_addr);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FPlatformReceivedLocalNotificationDelegate__DelegateSignature
{
public:
	FPlatformReceivedLocalNotificationDelegate__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetinString() {
		return memory.read<struct FString>(m_addr + 0);
	}
	int32_t GetinInt() {
		return memory.read<int32_t>(m_addr + 16);
	}
	enum class EApplicationState GetinAppState() {
		return memory.read<enum class EApplicationState>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_GetTimerElapsedTime
{
public:
	FK2_GetTimerElapsedTime(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FString GetFunctionName() {
		return memory.read<struct FString>(m_addr + 8);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FScaleTrack
{
public:
	FScaleTrack(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FVector> GetScaleKeys() {
		return memory.read<struct TArray<struct FVector>>(m_addr + 0);
	}
	struct TArray<float> GetTimes() {
		return memory.read<struct TArray<float>>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FEqualEqual_PrimaryAssetType
{
public:
	FEqualEqual_PrimaryAssetType(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FPrimaryAssetType GetA() {
		return memory.read<struct FPrimaryAssetType>(m_addr + 0);
	}
	struct FPrimaryAssetType GetB() {
		return memory.read<struct FPrimaryAssetType>(m_addr + 8);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FDivide_VectorFloat
{
public:
	FDivide_VectorFloat(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetA() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	float GetB() {
		return memory.read<float>(m_addr + 12);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FPlatformReceivedRemoteNotificationDelegate__DelegateSignature
{
public:
	FPlatformReceivedRemoteNotificationDelegate__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetinString() {
		return memory.read<struct FString>(m_addr + 0);
	}
	enum class EApplicationState GetinAppState() {
		return memory.read<enum class EApplicationState>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FPlatformFailedToRegisterForRemoteNotificationsDelegate__DelegateSignature
{
public:
	FPlatformFailedToRegisterForRemoteNotificationsDelegate__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetinString() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FMatrix_GetMaximumAxisScale
{
public:
	FMatrix_GetMaximumAxisScale(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMatrix GetM() {
		return memory.read<struct FMatrix>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_SphereTraceComponent
{
public:
	FK2_SphereTraceComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetTraceStart() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetTraceEnd() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	float GetSphereRadius() {
		return memory.read<float>(m_addr + 24);
	}
	bool GetbTraceComplex() {
		return memory.read<bool>(m_addr + 28);
	}
	bool GetbShowTrace() {
		return memory.read<bool>(m_addr + 29);
	}
	bool GetbPersistentShowTrace() {
		return memory.read<bool>(m_addr + 30);
	}
	struct FVector GetHitLocation() {
		return memory.read<struct FVector>(m_addr + 32);
	}
	struct FVector GetHitNormal() {
		return memory.read<struct FVector>(m_addr + 44);
	}
	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 56);
	}
	struct FHitResult GetOutHit() {
		return memory.read<struct FHitResult>(m_addr + 64);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 200);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetSingleSampleShadowFromStationaryLights
{
public:
	FSetSingleSampleShadowFromStationaryLights(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbNewSingleSampleShadowFromStationaryLights() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FMultiplyMultiply_FloatFloat
{
public:
	FMultiplyMultiply_FloatFloat(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetBase() {
		return memory.read<float>(m_addr + 0);
	}
	float GetExp() {
		return memory.read<float>(m_addr + 4);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FParticleCurvePair
{
public:
	FParticleCurvePair(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetCurveName() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct UObject GetCurveObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UObject(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetLocationAtSplinePoint
{
public:
	FSetLocationAtSplinePoint(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetPointIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct FVector GetInLocation() {
		return memory.read<struct FVector>(m_addr + 4);
	}
	enum class ESplineCoordinateSpace GetCoordinateSpace() {
		return memory.read<enum class ESplineCoordinateSpace>(m_addr + 16);
	}
	bool GetbUpdateSpline() {
		return memory.read<bool>(m_addr + 17);
	}

private:
	std::uint64_t m_addr = 0;
};class FInputEvent_IsShiftDown
{
public:
	FInputEvent_IsShiftDown(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FInputEvent GetInput() {
		return memory.read<struct FInputEvent>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FEndTransaction
{
public:
	FEndTransaction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FURL
{
public:
	FURL(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetProtocol() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FString GetHost() {
		return memory.read<struct FString>(m_addr + 16);
	}
	int32_t GetPort() {
		return memory.read<int32_t>(m_addr + 32);
	}
	int32_t GetValid() {
		return memory.read<int32_t>(m_addr + 36);
	}
	struct FString GetMap() {
		return memory.read<struct FString>(m_addr + 40);
	}
	struct FString GetRedirectURL() {
		return memory.read<struct FString>(m_addr + 56);
	}
	struct TArray<struct FString> GetOp() {
		return memory.read<struct TArray<struct FString>>(m_addr + 72);
	}
	struct FString GetPortal() {
		return memory.read<struct FString>(m_addr + 88);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetCameraRotation
{
public:
	FGetCameraRotation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRotator GetReturnValue() {
		return memory.read<struct FRotator>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FPlatformRegisteredForUserNotificationsDelegate__DelegateSignature
{
public:
	FPlatformRegisteredForUserNotificationsDelegate__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetinInt() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCanvasUVTri
{
public:
	FCanvasUVTri(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector2D GetV0_Pos() {
		return memory.read<struct FVector2D>(m_addr + 0);
	}
	struct FVector2D GetV0_UV() {
		return memory.read<struct FVector2D>(m_addr + 8);
	}
	struct FLinearColor GetV0_Color() {
		return memory.read<struct FLinearColor>(m_addr + 16);
	}
	struct FVector2D GetV1_Pos() {
		return memory.read<struct FVector2D>(m_addr + 32);
	}
	struct FVector2D GetV1_UV() {
		return memory.read<struct FVector2D>(m_addr + 40);
	}
	struct FLinearColor GetV1_Color() {
		return memory.read<struct FLinearColor>(m_addr + 48);
	}
	struct FVector2D GetV2_Pos() {
		return memory.read<struct FVector2D>(m_addr + 64);
	}
	struct FVector2D GetV2_UV() {
		return memory.read<struct FVector2D>(m_addr + 72);
	}
	struct FLinearColor GetV2_Color() {
		return memory.read<struct FLinearColor>(m_addr + 80);
	}

private:
	std::uint64_t m_addr = 0;
};class FCapsuleTraceMultiForObjects
{
public:
	FCapsuleTraceMultiForObjects(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FVector GetStart() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	struct FVector GetEnd() {
		return memory.read<struct FVector>(m_addr + 20);
	}
	float GetRadius() {
		return memory.read<float>(m_addr + 32);
	}
	float GetHalfHeight() {
		return memory.read<float>(m_addr + 36);
	}
	struct TArray<enum class EObjectTypeQuery> GetObjectTypes() {
		return memory.read<struct TArray<enum class EObjectTypeQuery>>(m_addr + 40);
	}
	bool GetbTraceComplex() {
		return memory.read<bool>(m_addr + 56);
	}
	struct TArray<struct AActor> GetActorsToIgnore() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 64);
		return struct TArray<struct AActor>(ptr_addr);
	}
	enum class EDrawDebugTrace GetDrawDebugType() {
		return memory.read<enum class EDrawDebugTrace>(m_addr + 80);
	}
	struct TArray<struct FHitResult> GetOutHits() {
		return memory.read<struct TArray<struct FHitResult>>(m_addr + 88);
	}
	bool GetbIgnoreSelf() {
		return memory.read<bool>(m_addr + 104);
	}
	struct FLinearColor GetTraceColor() {
		return memory.read<struct FLinearColor>(m_addr + 108);
	}
	struct FLinearColor GetTraceHitColor() {
		return memory.read<struct FLinearColor>(m_addr + 124);
	}
	float GetDrawTime() {
		return memory.read<float>(m_addr + 140);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 144);
	}

private:
	std::uint64_t m_addr = 0;
};class FLaunchURL
{
public:
	FLaunchURL(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetURL() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetMassScale
{
public:
	FSetMassScale(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	float GetInMassScale() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FPlatformRegisteredForRemoteNotificationsDelegate__DelegateSignature
{
public:
	FPlatformRegisteredForRemoteNotificationsDelegate__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<char> GetinArray() {
		return memory.read<struct TArray<char>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FBreakConstraint
{
public:
	FBreakConstraint(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetImpulse() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetHitLocation() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	struct FName GetInBoneName() {
		return memory.read<struct FName>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FAddTimedDisplay
{
public:
	FAddTimedDisplay(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetText() {
		return memory.read<struct FText>(m_addr + 0);
	}
	struct FLinearColor GetColor() {
		return memory.read<struct FLinearColor>(m_addr + 24);
	}
	float GetDuration() {
		return memory.read<float>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};class FNotEqual_NameName
{
public:
	FNotEqual_NameName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetA() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FName GetB() {
		return memory.read<struct FName>(m_addr + 8);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FCustomAttributePerBoneData
{
public:
	FCustomAttributePerBoneData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetBoneTreeIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct TArray<struct FCustomAttribute> GetAttributes() {
		return memory.read<struct TArray<struct FCustomAttribute>>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FPlatformStartupArgumentsDelegate__DelegateSignature
{
public:
	FPlatformStartupArgumentsDelegate__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FString> GetStartupArguments() {
		return memory.read<struct TArray<struct FString>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FBookmarkJumpToSettings
{
public:
	FBookmarkJumpToSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FAudioVolumeSubmixSendSettings
{
public:
	FAudioVolumeSubmixSendSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class EAudioVolumeLocationState GetListenerLocationState() {
		return memory.read<enum class EAudioVolumeLocationState>(m_addr + 0);
	}
	enum class EAudioVolumeLocationState GetSourceLocationState() {
		return memory.read<enum class EAudioVolumeLocationState>(m_addr + 1);
	}
	struct TArray<struct FSoundSubmixSendInfo> GetSubmixSends() {
		return memory.read<struct TArray<struct FSoundSubmixSendInfo>>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSplineCurves
{
public:
	FSplineCurves(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FInterpCurveVector Getposition() {
		return memory.read<struct FInterpCurveVector>(m_addr + 0);
	}
	struct FInterpCurveQuat GetRotation() {
		return memory.read<struct FInterpCurveQuat>(m_addr + 24);
	}
	struct FInterpCurveVector GetScale() {
		return memory.read<struct FInterpCurveVector>(m_addr + 48);
	}
	struct FInterpCurveFloat GetReparamTable() {
		return memory.read<struct FInterpCurveFloat>(m_addr + 72);
	}
	struct USplineMetadata GetMetaData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 96);
		return struct USplineMetadata(ptr_addr);
	}
	uint32_t GetVersion() {
		return memory.read<uint32_t>(m_addr + 104);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_ComputeFloorDist
{
public:
	FK2_ComputeFloorDist(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetCapsuleLocation() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	float GetLineDistance() {
		return memory.read<float>(m_addr + 12);
	}
	float GetSweepDistance() {
		return memory.read<float>(m_addr + 16);
	}
	float GetSweepRadius() {
		return memory.read<float>(m_addr + 20);
	}
	struct FFindFloorResult GetFloorResult() {
		return memory.read<struct FFindFloorResult>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FAnimNotifyQueue
{
public:
	FAnimNotifyQueue(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FAnimNotifyEventReference> GetAnimNotifies() {
		return memory.read<struct TArray<struct FAnimNotifyEventReference>>(m_addr + 16);
	}
	struct TMap<struct FName, struct FAnimNotifyArray> GetUnfilteredMontageAnimNotifies() {
		return memory.read<struct TMap<struct FName, struct FAnimNotifyArray>>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FRootMotionSource_JumpForce
{
public:
	FRootMotionSource_JumpForce(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRotator GetRotation() {
		return memory.read<struct FRotator>(m_addr + 152);
	}
	float GetDistance() {
		return memory.read<float>(m_addr + 164);
	}
	float GetHeight() {
		return memory.read<float>(m_addr + 168);
	}
	bool GetbDisableTimeout() {
		return memory.read<bool>(m_addr + 172);
	}
	struct UCurveVector GetPathOffsetCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 176);
		return struct UCurveVector(ptr_addr);
	}
	struct UCurveFloat GetTimeMappingCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 184);
		return struct UCurveFloat(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FAddFloatHistorySample
{
public:
	FAddFloatHistorySample(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetValue() {
		return memory.read<float>(m_addr + 0);
	}
	struct FDebugFloatHistory GetFloatHistory() {
		return memory.read<struct FDebugFloatHistory>(m_addr + 8);
	}
	struct FDebugFloatHistory GetReturnValue() {
		return memory.read<struct FDebugFloatHistory>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};class FPerBoneBlendWeights
{
public:
	FPerBoneBlendWeights(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FPerBoneBlendWeight> GetBoneBlendWeights() {
		return memory.read<struct TArray<struct FPerBoneBlendWeight>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FDebugFloatHistory
{
public:
	FDebugFloatHistory(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<float> GetSamples() {
		return memory.read<struct TArray<float>>(m_addr + 0);
	}
	float GetMaxSamples() {
		return memory.read<float>(m_addr + 16);
	}
	float GetMinValue() {
		return memory.read<float>(m_addr + 20);
	}
	float GetMaxValue() {
		return memory.read<float>(m_addr + 24);
	}
	bool GetbAutoAdjustMinMax() {
		return memory.read<bool>(m_addr + 28);
	}

private:
	std::uint64_t m_addr = 0;
};class FParseParamValue
{
public:
	FParseParamValue(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetinString() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FString GetInParam() {
		return memory.read<struct FString>(m_addr + 16);
	}
	struct FString GetOutValue() {
		return memory.read<struct FString>(m_addr + 32);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};class FBeginTransaction
{
public:
	FBeginTransaction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetContext() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FText GetDescription() {
		return memory.read<struct FText>(m_addr + 16);
	}
	struct UObject GetPrimaryObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct UObject(ptr_addr);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetParentComponent
{
public:
	FGetParentComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UChildActorComponent GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UChildActorComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetPhysicsLinearVelocity
{
public:
	FGetPhysicsLinearVelocity(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FParticleSystemReplayFrame
{
public:
	FParticleSystemReplayFrame(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FCharacterMovementComponentPostPhysicsTickFunction
{
public:
	FCharacterMovementComponentPostPhysicsTickFunction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FK2_GetTimerElapsedTimeDelegate
{
public:
	FK2_GetTimerElapsedTimeDelegate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDelegate GetDelegate() {
		return memory.read<struct FDelegate>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FBoxTraceMulti
{
public:
	FBoxTraceMulti(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FVector GetStart() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	struct FVector GetEnd() {
		return memory.read<struct FVector>(m_addr + 20);
	}
	struct FVector GetHalfSize() {
		return memory.read<struct FVector>(m_addr + 32);
	}
	struct FRotator GetOrientation() {
		return memory.read<struct FRotator>(m_addr + 44);
	}
	enum class ETraceTypeQuery GetTraceChannel() {
		return memory.read<enum class ETraceTypeQuery>(m_addr + 56);
	}
	bool GetbTraceComplex() {
		return memory.read<bool>(m_addr + 57);
	}
	struct TArray<struct AActor> GetActorsToIgnore() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 64);
		return struct TArray<struct AActor>(ptr_addr);
	}
	enum class EDrawDebugTrace GetDrawDebugType() {
		return memory.read<enum class EDrawDebugTrace>(m_addr + 80);
	}
	struct TArray<struct FHitResult> GetOutHits() {
		return memory.read<struct TArray<struct FHitResult>>(m_addr + 88);
	}
	bool GetbIgnoreSelf() {
		return memory.read<bool>(m_addr + 104);
	}
	struct FLinearColor GetTraceColor() {
		return memory.read<struct FLinearColor>(m_addr + 108);
	}
	struct FLinearColor GetTraceHitColor() {
		return memory.read<struct FLinearColor>(m_addr + 124);
	}
	float GetDrawTime() {
		return memory.read<float>(m_addr + 140);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 144);
	}

private:
	std::uint64_t m_addr = 0;
};class FMakeTimespan
{
public:
	FMakeTimespan(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetDays() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetHours() {
		return memory.read<int32_t>(m_addr + 4);
	}
	int32_t GetMinutes() {
		return memory.read<int32_t>(m_addr + 8);
	}
	int32_t GetSeconds() {
		return memory.read<int32_t>(m_addr + 12);
	}
	int32_t GetMilliseconds() {
		return memory.read<int32_t>(m_addr + 16);
	}
	struct FTimespan GetReturnValue() {
		return memory.read<struct FTimespan>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FBoxTraceMultiByProfile
{
public:
	FBoxTraceMultiByProfile(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FVector GetStart() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	struct FVector GetEnd() {
		return memory.read<struct FVector>(m_addr + 20);
	}
	struct FVector GetHalfSize() {
		return memory.read<struct FVector>(m_addr + 32);
	}
	struct FRotator GetOrientation() {
		return memory.read<struct FRotator>(m_addr + 44);
	}
	struct FName GetProfileName() {
		return memory.read<struct FName>(m_addr + 56);
	}
	bool GetbTraceComplex() {
		return memory.read<bool>(m_addr + 64);
	}
	struct TArray<struct AActor> GetActorsToIgnore() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return struct TArray<struct AActor>(ptr_addr);
	}
	enum class EDrawDebugTrace GetDrawDebugType() {
		return memory.read<enum class EDrawDebugTrace>(m_addr + 88);
	}
	struct TArray<struct FHitResult> GetOutHits() {
		return memory.read<struct TArray<struct FHitResult>>(m_addr + 96);
	}
	bool GetbIgnoreSelf() {
		return memory.read<bool>(m_addr + 112);
	}
	struct FLinearColor GetTraceColor() {
		return memory.read<struct FLinearColor>(m_addr + 116);
	}
	struct FLinearColor GetTraceHitColor() {
		return memory.read<struct FLinearColor>(m_addr + 132);
	}
	float GetDrawTime() {
		return memory.read<float>(m_addr + 148);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 152);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetWorldDirectionAtTime
{
public:
	FGetWorldDirectionAtTime(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetTime() {
		return memory.read<float>(m_addr + 0);
	}
	bool GetbUseConstantVelocity() {
		return memory.read<bool>(m_addr + 4);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetControllerKeyTimeDown
{
public:
	FGetControllerKeyTimeDown(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKey GetKey() {
		return memory.read<struct FKey>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FBakedIntegerCustomAttribute
{
public:
	FBakedIntegerCustomAttribute(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetAttributeName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FIntegralCurve GetIntCurve() {
		return memory.read<struct FIntegralCurve>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FCreateRenderTarget2DArray
{
public:
	FCreateRenderTarget2DArray(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	int32_t GetWidth() {
		return memory.read<int32_t>(m_addr + 8);
	}
	int32_t GetHeight() {
		return memory.read<int32_t>(m_addr + 12);
	}
	int32_t GetSlices() {
		return memory.read<int32_t>(m_addr + 16);
	}
	enum class ETextureRenderTargetFormat GetFormat() {
		return memory.read<enum class ETextureRenderTargetFormat>(m_addr + 20);
	}
	struct FLinearColor GetClearColor() {
		return memory.read<struct FLinearColor>(m_addr + 24);
	}
	bool GetbAutoGenerateMipMaps() {
		return memory.read<bool>(m_addr + 40);
	}
	struct UTextureRenderTarget2DArray GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct UTextureRenderTarget2DArray(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FVector_ProjectOnToNormal
{
public:
	FVector_ProjectOnToNormal(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetV() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetInNormal() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FBakedFloatCustomAttribute
{
public:
	FBakedFloatCustomAttribute(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetAttributeName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FSimpleCurve GetFloatCurve() {
		return memory.read<struct FSimpleCurve>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FBoxTraceSingle
{
public:
	FBoxTraceSingle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FVector GetStart() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	struct FVector GetEnd() {
		return memory.read<struct FVector>(m_addr + 20);
	}
	struct FVector GetHalfSize() {
		return memory.read<struct FVector>(m_addr + 32);
	}
	struct FRotator GetOrientation() {
		return memory.read<struct FRotator>(m_addr + 44);
	}
	enum class ETraceTypeQuery GetTraceChannel() {
		return memory.read<enum class ETraceTypeQuery>(m_addr + 56);
	}
	bool GetbTraceComplex() {
		return memory.read<bool>(m_addr + 57);
	}
	struct TArray<struct AActor> GetActorsToIgnore() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 64);
		return struct TArray<struct AActor>(ptr_addr);
	}
	enum class EDrawDebugTrace GetDrawDebugType() {
		return memory.read<enum class EDrawDebugTrace>(m_addr + 80);
	}
	struct FHitResult GetOutHit() {
		return memory.read<struct FHitResult>(m_addr + 84);
	}
	bool GetbIgnoreSelf() {
		return memory.read<bool>(m_addr + 220);
	}
	struct FLinearColor GetTraceColor() {
		return memory.read<struct FLinearColor>(m_addr + 224);
	}
	struct FLinearColor GetTraceHitColor() {
		return memory.read<struct FLinearColor>(m_addr + 240);
	}
	float GetDrawTime() {
		return memory.read<float>(m_addr + 256);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 260);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetPlayerStartTime
{
public:
	FGetPlayerStartTime(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AController GetController() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AController(ptr_addr);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetSamplesPerPixel
{
public:
	FSetSamplesPerPixel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetNewValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FBranchFilter
{
public:
	FBranchFilter(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	int32_t GetBlendDepth() {
		return memory.read<int32_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FBoxTraceSingleByProfile
{
public:
	FBoxTraceSingleByProfile(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FVector GetStart() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	struct FVector GetEnd() {
		return memory.read<struct FVector>(m_addr + 20);
	}
	struct FVector GetHalfSize() {
		return memory.read<struct FVector>(m_addr + 32);
	}
	struct FRotator GetOrientation() {
		return memory.read<struct FRotator>(m_addr + 44);
	}
	struct FName GetProfileName() {
		return memory.read<struct FName>(m_addr + 56);
	}
	bool GetbTraceComplex() {
		return memory.read<bool>(m_addr + 64);
	}
	struct TArray<struct AActor> GetActorsToIgnore() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return struct TArray<struct AActor>(ptr_addr);
	}
	enum class EDrawDebugTrace GetDrawDebugType() {
		return memory.read<enum class EDrawDebugTrace>(m_addr + 88);
	}
	struct FHitResult GetOutHit() {
		return memory.read<struct FHitResult>(m_addr + 92);
	}
	bool GetbIgnoreSelf() {
		return memory.read<bool>(m_addr + 228);
	}
	struct FLinearColor GetTraceColor() {
		return memory.read<struct FLinearColor>(m_addr + 232);
	}
	struct FLinearColor GetTraceHitColor() {
		return memory.read<struct FLinearColor>(m_addr + 248);
	}
	float GetDrawTime() {
		return memory.read<float>(m_addr + 264);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 268);
	}

private:
	std::uint64_t m_addr = 0;
};class FBreakSoftObjectPath
{
public:
	FBreakSoftObjectPath(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FSoftObjectPath GetInSoftObjectPath() {
		return memory.read<struct FSoftObjectPath>(m_addr + 0);
	}
	struct FString GetPathString() {
		return memory.read<struct FString>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FFindSocketAndIndex
{
public:
	FFindSocketAndIndex(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetInSocketName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	int32_t GetOutIndex() {
		return memory.read<int32_t>(m_addr + 8);
	}
	struct USkeletalMeshSocket GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct USkeletalMeshSocket(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FVector_BoundedToCube
{
public:
	FVector_BoundedToCube(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetInVect() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	float GetInRadius() {
		return memory.read<float>(m_addr + 12);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetName
{
public:
	FSetName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetS() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsValidSoftClassReference
{
public:
	FIsValidSoftClassReference(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftClassPtr<UObject> GetSoftClassReference() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};class FHapticFeedbackDetails_Curve
{
public:
	FHapticFeedbackDetails_Curve(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRuntimeFloatCurve GetFrequency() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 0);
	}
	struct FRuntimeFloatCurve GetAmplitude() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 136);
	}

private:
	std::uint64_t m_addr = 0;
};class FNotEqual_PrimaryAssetType
{
public:
	FNotEqual_PrimaryAssetType(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FPrimaryAssetType GetA() {
		return memory.read<struct FPrimaryAssetType>(m_addr + 0);
	}
	struct FPrimaryAssetType GetB() {
		return memory.read<struct FPrimaryAssetType>(m_addr + 8);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FCancelTransaction
{
public:
	FCancelTransaction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetDataTableRowNames
{
public:
	FGetDataTableRowNames(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UDataTable GetTable() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UDataTable(ptr_addr);
	}
	struct TArray<struct FName> GetOutRowNames() {
		return memory.read<struct TArray<struct FName>>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FBuildPromotionOpenAssetSettings
{
public:
	FBuildPromotionOpenAssetSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FFilePath GetBlueprintAsset() {
		return memory.read<struct FFilePath>(m_addr + 0);
	}
	struct FFilePath GetMaterialAsset() {
		return memory.read<struct FFilePath>(m_addr + 16);
	}
	struct FFilePath GetParticleSystemAsset() {
		return memory.read<struct FFilePath>(m_addr + 32);
	}
	struct FFilePath GetSkeletalMeshAsset() {
		return memory.read<struct FFilePath>(m_addr + 48);
	}
	struct FFilePath GetStaticMeshAsset() {
		return memory.read<struct FFilePath>(m_addr + 64);
	}
	struct FFilePath GetTextureAsset() {
		return memory.read<struct FFilePath>(m_addr + 80);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetPhysicsMaxAngularVelocityInDegrees
{
public:
	FSetPhysicsMaxAngularVelocityInDegrees(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewMaxAngVel() {
		return memory.read<float>(m_addr + 0);
	}
	bool GetbAddToCurrent() {
		return memory.read<bool>(m_addr + 4);
	}
	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FCapsuleOverlapActors
{
public:
	FCapsuleOverlapActors(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FVector GetCapsulePos() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	float GetRadius() {
		return memory.read<float>(m_addr + 20);
	}
	float GetHalfHeight() {
		return memory.read<float>(m_addr + 24);
	}
	struct TArray<enum class EObjectTypeQuery> GetObjectTypes() {
		return memory.read<struct TArray<enum class EObjectTypeQuery>>(m_addr + 32);
	}
	UObject GetActorClassFilter() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return UObject(ptr_addr);
	}
	struct TArray<struct AActor> GetActorsToIgnore() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct TArray<struct AActor>(ptr_addr);
	}
	struct TArray<struct AActor> GetOutActors() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return struct TArray<struct AActor>(ptr_addr);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 88);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetConstraintProfileForAll
{
public:
	FSetConstraintProfileForAll(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetProfileName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	bool GetbDefaultIfNotFound() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetScale
{
public:
	FSetScale(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewDuration() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsValidSoftObjectReference
{
public:
	FIsValidSoftObjectReference(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftObjectPtr<UObject> GetSoftObjectReference() {
		return memory.read<struct TSoftObjectPtr<UObject>>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetNumSpectators
{
public:
	FGetNumSpectators(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FStopCameraAnimInst
{
public:
	FStopCameraAnimInst(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UCameraAnimInst GetAnimInst() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UCameraAnimInst(ptr_addr);
	}
	bool GetbImmediate() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FCapsuleOverlapComponents
{
public:
	FCapsuleOverlapComponents(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FVector GetCapsulePos() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	float GetRadius() {
		return memory.read<float>(m_addr + 20);
	}
	float GetHalfHeight() {
		return memory.read<float>(m_addr + 24);
	}
	struct TArray<enum class EObjectTypeQuery> GetObjectTypes() {
		return memory.read<struct TArray<enum class EObjectTypeQuery>>(m_addr + 32);
	}
	UObject GetComponentClassFilter() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return UObject(ptr_addr);
	}
	struct TArray<struct AActor> GetActorsToIgnore() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct TArray<struct AActor>(ptr_addr);
	}
	struct TArray<struct UPrimitiveComponent> GetOutComponents() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return struct TArray<struct UPrimitiveComponent>(ptr_addr);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 88);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetLinkedAnimGraphInstancesByTag
{
public:
	FGetLinkedAnimGraphInstancesByTag(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetInTag() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct TArray<struct UAnimInstance> GetOutLinkedInstances() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct TArray<struct UAnimInstance>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FCapsuleTraceMulti
{
public:
	FCapsuleTraceMulti(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FVector GetStart() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	struct FVector GetEnd() {
		return memory.read<struct FVector>(m_addr + 20);
	}
	float GetRadius() {
		return memory.read<float>(m_addr + 32);
	}
	float GetHalfHeight() {
		return memory.read<float>(m_addr + 36);
	}
	enum class ETraceTypeQuery GetTraceChannel() {
		return memory.read<enum class ETraceTypeQuery>(m_addr + 40);
	}
	bool GetbTraceComplex() {
		return memory.read<bool>(m_addr + 41);
	}
	struct TArray<struct AActor> GetActorsToIgnore() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct TArray<struct AActor>(ptr_addr);
	}
	enum class EDrawDebugTrace GetDrawDebugType() {
		return memory.read<enum class EDrawDebugTrace>(m_addr + 64);
	}
	struct TArray<struct FHitResult> GetOutHits() {
		return memory.read<struct TArray<struct FHitResult>>(m_addr + 72);
	}
	bool GetbIgnoreSelf() {
		return memory.read<bool>(m_addr + 88);
	}
	struct FLinearColor GetTraceColor() {
		return memory.read<struct FLinearColor>(m_addr + 92);
	}
	struct FLinearColor GetTraceHitColor() {
		return memory.read<struct FLinearColor>(m_addr + 108);
	}
	float GetDrawTime() {
		return memory.read<float>(m_addr + 124);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 128);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetAtmosphereTransmitanceOnGroundAtPlanetTop
{
public:
	FGetAtmosphereTransmitanceOnGroundAtPlanetTop(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UDirectionalLightComponent GetDirectionalLight() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UDirectionalLightComponent(ptr_addr);
	}
	struct FLinearColor GetReturnValue() {
		return memory.read<struct FLinearColor>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FCapsuleTraceMultiByProfile
{
public:
	FCapsuleTraceMultiByProfile(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FVector GetStart() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	struct FVector GetEnd() {
		return memory.read<struct FVector>(m_addr + 20);
	}
	float GetRadius() {
		return memory.read<float>(m_addr + 32);
	}
	float GetHalfHeight() {
		return memory.read<float>(m_addr + 36);
	}
	struct FName GetProfileName() {
		return memory.read<struct FName>(m_addr + 40);
	}
	bool GetbTraceComplex() {
		return memory.read<bool>(m_addr + 48);
	}
	struct TArray<struct AActor> GetActorsToIgnore() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct TArray<struct AActor>(ptr_addr);
	}
	enum class EDrawDebugTrace GetDrawDebugType() {
		return memory.read<enum class EDrawDebugTrace>(m_addr + 72);
	}
	struct TArray<struct FHitResult> GetOutHits() {
		return memory.read<struct TArray<struct FHitResult>>(m_addr + 80);
	}
	bool GetbIgnoreSelf() {
		return memory.read<bool>(m_addr + 96);
	}
	struct FLinearColor GetTraceColor() {
		return memory.read<struct FLinearColor>(m_addr + 100);
	}
	struct FLinearColor GetTraceHitColor() {
		return memory.read<struct FLinearColor>(m_addr + 116);
	}
	float GetDrawTime() {
		return memory.read<float>(m_addr + 132);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 136);
	}

private:
	std::uint64_t m_addr = 0;
};class FRootMotionSource_ConstantForce
{
public:
	FRootMotionSource_ConstantForce(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetForce() {
		return memory.read<struct FVector>(m_addr + 152);
	}
	struct UCurveFloat GetStrengthOverTime() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 168);
		return struct UCurveFloat(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSoundWaveEnvelopeTimeData
{
public:
	FSoundWaveEnvelopeTimeData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetAmplitude() {
		return memory.read<float>(m_addr + 0);
	}
	float GetTimeSec() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FWeightedMovingAverage_Float
{
public:
	FWeightedMovingAverage_Float(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetCurrentSample() {
		return memory.read<float>(m_addr + 0);
	}
	float GetPreviousSample() {
		return memory.read<float>(m_addr + 4);
	}
	float Getweight() {
		return memory.read<float>(m_addr + 8);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FInputAxisConfigEntry
{
public:
	FInputAxisConfigEntry(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetAxisKeyName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FInputAxisProperties GetAxisProperties() {
		return memory.read<struct FInputAxisProperties>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FDrawDebugPoint
{
public:
	FDrawDebugPoint(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FVector Getposition() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	float GetSize() {
		return memory.read<float>(m_addr + 20);
	}
	struct FLinearColor GetPointColor() {
		return memory.read<struct FLinearColor>(m_addr + 24);
	}
	float GetDuration() {
		return memory.read<float>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};class FDummySpacerCameraTypes
{
public:
	FDummySpacerCameraTypes(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FCapsuleTraceSingle
{
public:
	FCapsuleTraceSingle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FVector GetStart() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	struct FVector GetEnd() {
		return memory.read<struct FVector>(m_addr + 20);
	}
	float GetRadius() {
		return memory.read<float>(m_addr + 32);
	}
	float GetHalfHeight() {
		return memory.read<float>(m_addr + 36);
	}
	enum class ETraceTypeQuery GetTraceChannel() {
		return memory.read<enum class ETraceTypeQuery>(m_addr + 40);
	}
	bool GetbTraceComplex() {
		return memory.read<bool>(m_addr + 41);
	}
	struct TArray<struct AActor> GetActorsToIgnore() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct TArray<struct AActor>(ptr_addr);
	}
	enum class EDrawDebugTrace GetDrawDebugType() {
		return memory.read<enum class EDrawDebugTrace>(m_addr + 64);
	}
	struct FHitResult GetOutHit() {
		return memory.read<struct FHitResult>(m_addr + 68);
	}
	bool GetbIgnoreSelf() {
		return memory.read<bool>(m_addr + 204);
	}
	struct FLinearColor GetTraceColor() {
		return memory.read<struct FLinearColor>(m_addr + 208);
	}
	struct FLinearColor GetTraceHitColor() {
		return memory.read<struct FLinearColor>(m_addr + 224);
	}
	float GetDrawTime() {
		return memory.read<float>(m_addr + 240);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 244);
	}

private:
	std::uint64_t m_addr = 0;
};class FCustomDefine
{
public:
	FCustomDefine(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetDefineName() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FString GetDefineValue() {
		return memory.read<struct FString>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetLinearBreakable
{
public:
	FSetLinearBreakable(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbLinearBreakable() {
		return memory.read<bool>(m_addr + 0);
	}
	float GetLinearBreakThreshold() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FBaseAttenuationSettings
{
public:
	FBaseAttenuationSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class EAttenuationDistanceModel GetDistanceAlgorithm() {
		return memory.read<enum class EAttenuationDistanceModel>(m_addr + 8);
	}
	enum class EAttenuationShape GetAttenuationShape() {
		return memory.read<enum class EAttenuationShape>(m_addr + 9);
	}
	float GetdBAttenuationAtMax() {
		return memory.read<float>(m_addr + 12);
	}
	enum class ENaturalSoundFalloffMode GetFalloffMode() {
		return memory.read<enum class ENaturalSoundFalloffMode>(m_addr + 16);
	}
	struct FVector GetAttenuationShapeExtents() {
		return memory.read<struct FVector>(m_addr + 20);
	}
	float GetConeOffset() {
		return memory.read<float>(m_addr + 32);
	}
	float GetFalloffDistance() {
		return memory.read<float>(m_addr + 36);
	}
	struct FRuntimeFloatCurve GetCustomAttenuationCurve() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};class FConv_SoftClassReferenceToString
{
public:
	FConv_SoftClassReferenceToString(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftClassPtr<UObject> GetSoftClassReference() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 0);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetTeleportRotationThreshold
{
public:
	FSetTeleportRotationThreshold(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetThreshold() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FBreakSkinWeightInfo
{
public:
	FBreakSkinWeightInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FSkelMeshSkinWeightInfo GetInWeight() {
		return memory.read<struct FSkelMeshSkinWeightInfo>(m_addr + 0);
	}
	int32_t GetBone0() {
		return memory.read<int32_t>(m_addr + 60);
	}
	char GetWeight0() {
		return memory.read<char>(m_addr + 64);
	}
	int32_t GetBone1() {
		return memory.read<int32_t>(m_addr + 68);
	}
	char GetWeight1() {
		return memory.read<char>(m_addr + 72);
	}
	int32_t GetBone2() {
		return memory.read<int32_t>(m_addr + 76);
	}
	char GetWeight2() {
		return memory.read<char>(m_addr + 80);
	}
	int32_t GetBone3() {
		return memory.read<int32_t>(m_addr + 84);
	}
	char GetWeight3() {
		return memory.read<char>(m_addr + 88);
	}

private:
	std::uint64_t m_addr = 0;
};class FCapsuleTraceSingleByProfile
{
public:
	FCapsuleTraceSingleByProfile(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FVector GetStart() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	struct FVector GetEnd() {
		return memory.read<struct FVector>(m_addr + 20);
	}
	float GetRadius() {
		return memory.read<float>(m_addr + 32);
	}
	float GetHalfHeight() {
		return memory.read<float>(m_addr + 36);
	}
	struct FName GetProfileName() {
		return memory.read<struct FName>(m_addr + 40);
	}
	bool GetbTraceComplex() {
		return memory.read<bool>(m_addr + 48);
	}
	struct TArray<struct AActor> GetActorsToIgnore() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct TArray<struct AActor>(ptr_addr);
	}
	enum class EDrawDebugTrace GetDrawDebugType() {
		return memory.read<enum class EDrawDebugTrace>(m_addr + 72);
	}
	struct FHitResult GetOutHit() {
		return memory.read<struct FHitResult>(m_addr + 76);
	}
	bool GetbIgnoreSelf() {
		return memory.read<bool>(m_addr + 212);
	}
	struct FLinearColor GetTraceColor() {
		return memory.read<struct FLinearColor>(m_addr + 216);
	}
	struct FLinearColor GetTraceHitColor() {
		return memory.read<struct FLinearColor>(m_addr + 232);
	}
	float GetDrawTime() {
		return memory.read<float>(m_addr + 248);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 252);
	}

private:
	std::uint64_t m_addr = 0;
};class FComponentOverlapActors
{
public:
	FComponentOverlapActors(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPrimitiveComponent GetComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UPrimitiveComponent(ptr_addr);
	}
	struct FTransform GetComponentTransform() {
		return memory.read<struct FTransform>(m_addr + 16);
	}
	struct TArray<enum class EObjectTypeQuery> GetObjectTypes() {
		return memory.read<struct TArray<enum class EObjectTypeQuery>>(m_addr + 64);
	}
	UObject GetActorClassFilter() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 80);
		return UObject(ptr_addr);
	}
	struct TArray<struct AActor> GetActorsToIgnore() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 88);
		return struct TArray<struct AActor>(ptr_addr);
	}
	struct TArray<struct AActor> GetOutActors() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 104);
		return struct TArray<struct AActor>(ptr_addr);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 120);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_OnBecomeViewTarget
{
public:
	FK2_OnBecomeViewTarget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APlayerController GetPC() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APlayerController(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetAngularVelocityDrive
{
public:
	FSetAngularVelocityDrive(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbEnableSwingDrive() {
		return memory.read<bool>(m_addr + 0);
	}
	bool GetbEnableTwistDrive() {
		return memory.read<bool>(m_addr + 1);
	}

private:
	std::uint64_t m_addr = 0;
};class FMakeImportanceTexture
{
public:
	FMakeImportanceTexture(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTexture2D GetTexture() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UTexture2D(ptr_addr);
	}
	enum class EImportanceWeight GetWeightingFunc() {
		return memory.read<enum class EImportanceWeight>(m_addr + 8);
	}
	struct FImportanceTexture GetReturnValue() {
		return memory.read<struct FImportanceTexture>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetRightVector
{
public:
	FGetRightVector(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRotator GetInRot() {
		return memory.read<struct FRotator>(m_addr + 0);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetGroupsToIgnoreMask
{
public:
	FSetGroupsToIgnoreMask(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FNavAvoidanceMask GetGroupMask() {
		return memory.read<struct FNavAvoidanceMask>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetAnimationMode
{
public:
	FGetAnimationMode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class EAnimationMode GetReturnValue() {
		return memory.read<enum class EAnimationMode>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FConv_ClassToSoftClassReference
{
public:
	FConv_ClassToSoftClassReference(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UObject GetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return UObject(ptr_addr);
	}
	struct TSoftClassPtr<UObject> GetReturnValue() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetTotalDays
{
public:
	FGetTotalDays(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTimespan GetA() {
		return memory.read<struct FTimespan>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnRep_Visibility
{
public:
	FOnRep_Visibility(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetOldValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FPlayDynamicForceFeedback
{
public:
	FPlayDynamicForceFeedback(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetIntensity() {
		return memory.read<float>(m_addr + 0);
	}
	float GetDuration() {
		return memory.read<float>(m_addr + 4);
	}
	bool GetbAffectsLeftLarge() {
		return memory.read<bool>(m_addr + 8);
	}
	bool GetbAffectsLeftSmall() {
		return memory.read<bool>(m_addr + 9);
	}
	bool GetbAffectsRightLarge() {
		return memory.read<bool>(m_addr + 10);
	}
	bool GetbAffectsRightSmall() {
		return memory.read<bool>(m_addr + 11);
	}
	enum class EDynamicForceFeedbackAction GetAction() {
		return memory.read<enum class EDynamicForceFeedbackAction>(m_addr + 12);
	}
	struct FLatentActionInfo GetLatentInfo() {
		return memory.read<struct FLatentActionInfo>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FVector_One
{
public:
	FVector_One(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetCurrentBundleState
{
public:
	FGetCurrentBundleState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FPrimaryAssetId GetPrimaryAssetId() {
		return memory.read<struct FPrimaryAssetId>(m_addr + 0);
	}
	bool GetbForceCurrentState() {
		return memory.read<bool>(m_addr + 16);
	}
	struct TArray<struct FName> GetOutBundles() {
		return memory.read<struct TArray<struct FName>>(m_addr + 24);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};class FCopyArrayOfMoveIgnoreActors
{
public:
	FCopyArrayOfMoveIgnoreActors(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct AActor> GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct TArray<struct AActor>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FClientStopCameraShake
{
public:
	FClientStopCameraShake(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UCameraShakeBase GetShake() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return UCameraShakeBase(ptr_addr);
	}
	bool GetbImmediately() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FConv_InterfaceToObject
{
public:
	FConv_InterfaceToObject(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TScriptInterface<IInterface> GetInterface() {
		return memory.read<struct TScriptInterface<IInterface>>(m_addr + 0);
	}
	struct UObject GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UObject(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FConv_ObjectToSoftObjectReference
{
public:
	FConv_ObjectToSoftObjectReference(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct TSoftObjectPtr<UObject> GetReturnValue() {
		return memory.read<struct TSoftObjectPtr<UObject>>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetMobility
{
public:
	FSetMobility(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class EComponentMobility GetInMobility() {
		return memory.read<enum class EComponentMobility>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSlomo
{
public:
	FSlomo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewTimeDilation() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FConv_PrimaryAssetIdToString
{
public:
	FConv_PrimaryAssetIdToString(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FPrimaryAssetId GetPrimaryAssetId() {
		return memory.read<struct FPrimaryAssetId>(m_addr + 0);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FParticleCollisionSignature__DelegateSignature
{
public:
	FParticleCollisionSignature__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetEventName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	float GetEmitterTime() {
		return memory.read<float>(m_addr + 8);
	}
	int32_t GetParticleTime() {
		return memory.read<int32_t>(m_addr + 12);
	}
	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 16);
	}
	struct FVector GetVelocity() {
		return memory.read<struct FVector>(m_addr + 28);
	}
	struct FVector GetDirection() {
		return memory.read<struct FVector>(m_addr + 40);
	}
	struct FVector GetNormal() {
		return memory.read<struct FVector>(m_addr + 52);
	}
	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 64);
	}
	struct UPhysicalMaterial GetPhysMat() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return struct UPhysicalMaterial(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetTangentAtDistanceAlongSpline
{
public:
	FGetTangentAtDistanceAlongSpline(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetDistance() {
		return memory.read<float>(m_addr + 0);
	}
	enum class ESplineCoordinateSpace GetCoordinateSpace() {
		return memory.read<enum class ESplineCoordinateSpace>(m_addr + 4);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetSourceBusSendPreEffect
{
public:
	FSetSourceBusSendPreEffect(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USoundSourceBus GetSoundSourceBus() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct USoundSourceBus(ptr_addr);
	}
	float GetSourceBusSendLevel() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FConv_PrimaryAssetTypeToString
{
public:
	FConv_PrimaryAssetTypeToString(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FPrimaryAssetType GetPrimaryAssetType() {
		return memory.read<struct FPrimaryAssetType>(m_addr + 0);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSoundTrackKey
{
public:
	FSoundTrackKey(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetTime() {
		return memory.read<float>(m_addr + 0);
	}
	float GetVolume() {
		return memory.read<float>(m_addr + 4);
	}
	float GetPitch() {
		return memory.read<float>(m_addr + 8);
	}
	struct USoundBase GetSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct USoundBase(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FTimespanZeroValue
{
public:
	FTimespanZeroValue(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTimespan GetReturnValue() {
		return memory.read<struct FTimespan>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetUnscaledBoxExtent
{
public:
	FGetUnscaledBoxExtent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FConv_SoftClassPathToSoftClassRef
{
public:
	FConv_SoftClassPathToSoftClassRef(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FSoftClassPath GetSoftClassPath() {
		return memory.read<struct FSoftClassPath>(m_addr + 0);
	}
	struct TSoftClassPtr<UObject> GetReturnValue() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FConv_SoftClassReferenceToClass
{
public:
	FConv_SoftClassReferenceToClass(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftClassPtr<UObject> GetSoftClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 0);
	}
	UObject GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return UObject(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FLinearColor_SetFromPow22
{
public:
	FLinearColor_SetFromPow22(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLinearColor GetInOutColor() {
		return memory.read<struct FLinearColor>(m_addr + 0);
	}
	struct FColor GetInColor() {
		return memory.read<struct FColor>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FKConvexElem
{
public:
	FKConvexElem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FVector> GetVertexData() {
		return memory.read<struct TArray<struct FVector>>(m_addr + 48);
	}
	struct TArray<int32_t> GetIndexData() {
		return memory.read<struct TArray<int32_t>>(m_addr + 64);
	}
	struct FBox GetElemBox() {
		return memory.read<struct FBox>(m_addr + 80);
	}
	struct FTransform GetTransform() {
		return memory.read<struct FTransform>(m_addr + 112);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetClassDisplayName
{
public:
	FGetClassDisplayName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UObject GetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return UObject(ptr_addr);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FConv_SoftObjectReferenceToObject
{
public:
	FConv_SoftObjectReferenceToObject(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftObjectPtr<UObject> GetSoftObject() {
		return memory.read<struct TSoftObjectPtr<UObject>>(m_addr + 0);
	}
	struct UObject GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct UObject(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_TimerExists
{
public:
	FK2_TimerExists(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FString GetFunctionName() {
		return memory.read<struct FString>(m_addr + 8);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetConsoleVariableIntValue
{
public:
	FGetConsoleVariableIntValue(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetVariableName() {
		return memory.read<struct FString>(m_addr + 0);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FDotProduct2D
{
public:
	FDotProduct2D(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector2D GetA() {
		return memory.read<struct FVector2D>(m_addr + 0);
	}
	struct FVector2D GetB() {
		return memory.read<struct FVector2D>(m_addr + 8);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FConv_SoftObjPathToSoftObjRef
{
public:
	FConv_SoftObjPathToSoftObjRef(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FSoftObjectPath GetSoftObjectPath() {
		return memory.read<struct FSoftObjectPath>(m_addr + 0);
	}
	struct TSoftObjectPtr<UObject> GetReturnValue() {
		return memory.read<struct TSoftObjectPtr<UObject>>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FHideBoneByName
{
public:
	FHideBoneByName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	enum class EPhysBodyOp GetPhysBodyOption() {
		return memory.read<enum class EPhysBodyOp>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FConvertToAbsolutePath
{
public:
	FConvertToAbsolutePath(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetFilename() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetClosestPointOnCollision
{
public:
	FGetClosestPointOnCollision(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetPoint() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetOutPointOnBody() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 24);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FClientRepObjRef
{
public:
	FClientRepObjRef(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FMatrix_ApplyScale
{
public:
	FMatrix_ApplyScale(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMatrix GetM() {
		return memory.read<struct FMatrix>(m_addr + 0);
	}
	float GetScale() {
		return memory.read<float>(m_addr + 64);
	}
	struct FMatrix GetReturnValue() {
		return memory.read<struct FMatrix>(m_addr + 80);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetInstanceTransitionCrossfadeDuration
{
public:
	FGetInstanceTransitionCrossfadeDuration(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetMachineIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetTransitionIndex() {
		return memory.read<int32_t>(m_addr + 4);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_OnChangeName
{
public:
	FK2_OnChangeName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AController GetOther() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AController(ptr_addr);
	}
	struct FString GetNewName() {
		return memory.read<struct FString>(m_addr + 8);
	}
	bool GetbNameChange() {
		return memory.read<bool>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetReflectionSampleCountScale
{
public:
	FSetReflectionSampleCountScale(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCreateCopyForUndoBuffer
{
public:
	FCreateCopyForUndoBuffer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetObjectToModify() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_GetWalkableFloorAngle
{
public:
	FK2_GetWalkableFloorAngle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_GetTimerElapsedTimeHandle
{
public:
	FK2_GetTimerElapsedTimeHandle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FTimerHandle GetHandle() {
		return memory.read<struct FTimerHandle>(m_addr + 8);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetActorListFromComponentList
{
public:
	FGetActorListFromComponentList(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct UPrimitiveComponent> GetComponentList() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct TArray<struct UPrimitiveComponent>(ptr_addr);
	}
	UObject GetActorClassFilter() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return UObject(ptr_addr);
	}
	struct TArray<struct AActor> GetOutActorList() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 24);
		return struct TArray<struct AActor>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FDelay
{
public:
	FDelay(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	float GetDuration() {
		return memory.read<float>(m_addr + 8);
	}
	struct FLatentActionInfo GetLatentInfo() {
		return memory.read<struct FLatentActionInfo>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSphereTraceMultiByProfile
{
public:
	FSphereTraceMultiByProfile(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FVector GetStart() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	struct FVector GetEnd() {
		return memory.read<struct FVector>(m_addr + 20);
	}
	float GetRadius() {
		return memory.read<float>(m_addr + 32);
	}
	struct FName GetProfileName() {
		return memory.read<struct FName>(m_addr + 36);
	}
	bool GetbTraceComplex() {
		return memory.read<bool>(m_addr + 44);
	}
	struct TArray<struct AActor> GetActorsToIgnore() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct TArray<struct AActor>(ptr_addr);
	}
	enum class EDrawDebugTrace GetDrawDebugType() {
		return memory.read<enum class EDrawDebugTrace>(m_addr + 64);
	}
	struct TArray<struct FHitResult> GetOutHits() {
		return memory.read<struct TArray<struct FHitResult>>(m_addr + 72);
	}
	bool GetbIgnoreSelf() {
		return memory.read<bool>(m_addr + 88);
	}
	struct FLinearColor GetTraceColor() {
		return memory.read<struct FLinearColor>(m_addr + 92);
	}
	struct FLinearColor GetTraceHitColor() {
		return memory.read<struct FLinearColor>(m_addr + 108);
	}
	float GetDrawTime() {
		return memory.read<float>(m_addr + 124);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 128);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetActorOfClass
{
public:
	FGetActorOfClass(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	AActor GetActorClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return AActor(ptr_addr);
	}
	struct AActor GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetDistanceOffset
{
public:
	FSetDistanceOffset(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewDistanceOffset() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FDrawDebugArrow
{
public:
	FDrawDebugArrow(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FVector GetLineStart() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	struct FVector GetLineEnd() {
		return memory.read<struct FVector>(m_addr + 20);
	}
	float GetArrowSize() {
		return memory.read<float>(m_addr + 32);
	}
	struct FLinearColor GetLineColor() {
		return memory.read<struct FLinearColor>(m_addr + 36);
	}
	float GetDuration() {
		return memory.read<float>(m_addr + 52);
	}
	float GetThickness() {
		return memory.read<float>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};class FFastArraySerializerItem
{
public:
	FFastArraySerializerItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReplicationID() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetReplicationKey() {
		return memory.read<int32_t>(m_addr + 4);
	}
	int32_t GetMostRecentArrayReplicationKey() {
		return memory.read<int32_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FUpdateInstanceTransform
{
public:
	FUpdateInstanceTransform(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetInstanceIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct FTransform GetNewInstanceTransform() {
		return memory.read<struct FTransform>(m_addr + 16);
	}
	bool GetbWorldSpace() {
		return memory.read<bool>(m_addr + 64);
	}
	bool GetbMarkRenderStateDirty() {
		return memory.read<bool>(m_addr + 65);
	}
	bool GetbTeleport() {
		return memory.read<bool>(m_addr + 66);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 67);
	}

private:
	std::uint64_t m_addr = 0;
};class FDrawDebugCamera
{
public:
	FDrawDebugCamera(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ACameraActor GetCameraActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct ACameraActor(ptr_addr);
	}
	struct FLinearColor GetCameraColor() {
		return memory.read<struct FLinearColor>(m_addr + 8);
	}
	float GetDuration() {
		return memory.read<float>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FKTaperedCapsuleElem
{
public:
	FKTaperedCapsuleElem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetCenter() {
		return memory.read<struct FVector>(m_addr + 48);
	}
	struct FRotator GetRotation() {
		return memory.read<struct FRotator>(m_addr + 60);
	}
	float GetRadius0() {
		return memory.read<float>(m_addr + 72);
	}
	float GetRadius1() {
		return memory.read<float>(m_addr + 76);
	}
	float GetLength() {
		return memory.read<float>(m_addr + 80);
	}

private:
	std::uint64_t m_addr = 0;
};class FReceiveHitBoxEndCursorOver
{
public:
	FReceiveHitBoxEndCursorOver(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetBoxName() {
		return memory.read<struct FName>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetResolutionScaleInformation
{
public:
	FGetResolutionScaleInformation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetCurrentScaleNormalized() {
		return memory.read<float>(m_addr + 0);
	}
	int32_t GetCurrentScaleValue() {
		return memory.read<int32_t>(m_addr + 4);
	}
	int32_t GetMinScaleValue() {
		return memory.read<int32_t>(m_addr + 8);
	}
	int32_t GetMaxScaleValue() {
		return memory.read<int32_t>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FRealCurve
{
public:
	FRealCurve(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetDefaultValue() {
		return memory.read<float>(m_addr + 104);
	}
	enum class ERichCurveExtrapolation GetPreInfinityExtrap() {
		return memory.read<enum class ERichCurveExtrapolation>(m_addr + 108);
	}
	enum class ERichCurveExtrapolation GetPostInfinityExtrap() {
		return memory.read<enum class ERichCurveExtrapolation>(m_addr + 109);
	}

private:
	std::uint64_t m_addr = 0;
};class FRootMotionSourceGroup
{
public:
	FRootMotionSourceGroup(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	char GetbHasAdditiveSources() {
		return memory.read<char>(m_addr + 40);
	}
	char GetbHasOverrideSources() {
		return memory.read<char>(m_addr + 40);
	}
	char GetbHasOverrideSourcesWithIgnoreZAccumulate() {
		return memory.read<char>(m_addr + 40);
	}
	char GetbIsAdditiveVelocityApplied() {
		return memory.read<char>(m_addr + 40);
	}
	struct FRootMotionSourceSettings GetLastAccumulatedSettings() {
		return memory.read<struct FRootMotionSourceSettings>(m_addr + 41);
	}
	struct FVector_NetQuantize10 GetLastPreAdditiveVelocity() {
		return memory.read<struct FVector_NetQuantize10>(m_addr + 44);
	}

private:
	std::uint64_t m_addr = 0;
};class FDrawDebugCapsule
{
public:
	FDrawDebugCapsule(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FVector GetCenter() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	float GetHalfHeight() {
		return memory.read<float>(m_addr + 20);
	}
	float GetRadius() {
		return memory.read<float>(m_addr + 24);
	}
	struct FRotator GetRotation() {
		return memory.read<struct FRotator>(m_addr + 28);
	}
	struct FLinearColor GetLineColor() {
		return memory.read<struct FLinearColor>(m_addr + 40);
	}
	float GetDuration() {
		return memory.read<float>(m_addr + 56);
	}
	float GetThickness() {
		return memory.read<float>(m_addr + 60);
	}

private:
	std::uint64_t m_addr = 0;
};class FSphereTraceSingle
{
public:
	FSphereTraceSingle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FVector GetStart() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	struct FVector GetEnd() {
		return memory.read<struct FVector>(m_addr + 20);
	}
	float GetRadius() {
		return memory.read<float>(m_addr + 32);
	}
	enum class ETraceTypeQuery GetTraceChannel() {
		return memory.read<enum class ETraceTypeQuery>(m_addr + 36);
	}
	bool GetbTraceComplex() {
		return memory.read<bool>(m_addr + 37);
	}
	struct TArray<struct AActor> GetActorsToIgnore() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct TArray<struct AActor>(ptr_addr);
	}
	enum class EDrawDebugTrace GetDrawDebugType() {
		return memory.read<enum class EDrawDebugTrace>(m_addr + 56);
	}
	struct FHitResult GetOutHit() {
		return memory.read<struct FHitResult>(m_addr + 60);
	}
	bool GetbIgnoreSelf() {
		return memory.read<bool>(m_addr + 196);
	}
	struct FLinearColor GetTraceColor() {
		return memory.read<struct FLinearColor>(m_addr + 200);
	}
	struct FLinearColor GetTraceHitColor() {
		return memory.read<struct FLinearColor>(m_addr + 216);
	}
	float GetDrawTime() {
		return memory.read<float>(m_addr + 232);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 236);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetPlayerName
{
public:
	FGetPlayerName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetPostProcessBlendWeight
{
public:
	FSetPostProcessBlendWeight(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetInPostProcessBlendWeight() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetRotationAtTime
{
public:
	FGetRotationAtTime(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetTime() {
		return memory.read<float>(m_addr + 0);
	}
	enum class ESplineCoordinateSpace GetCoordinateSpace() {
		return memory.read<enum class ESplineCoordinateSpace>(m_addr + 4);
	}
	bool GetbUseConstantVelocity() {
		return memory.read<bool>(m_addr + 5);
	}
	struct FRotator GetReturnValue() {
		return memory.read<struct FRotator>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FFadeOut
{
public:
	FFadeOut(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetFadeOutDuration() {
		return memory.read<float>(m_addr + 0);
	}
	float GetFadeVolumeLevel() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FDrawDebugCircle
{
public:
	FDrawDebugCircle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FVector GetCenter() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	float GetRadius() {
		return memory.read<float>(m_addr + 20);
	}
	int32_t GetNumSegments() {
		return memory.read<int32_t>(m_addr + 24);
	}
	struct FLinearColor GetLineColor() {
		return memory.read<struct FLinearColor>(m_addr + 28);
	}
	float GetDuration() {
		return memory.read<float>(m_addr + 44);
	}
	float GetThickness() {
		return memory.read<float>(m_addr + 48);
	}
	struct FVector GetYAxis() {
		return memory.read<struct FVector>(m_addr + 52);
	}
	struct FVector GetZAxis() {
		return memory.read<struct FVector>(m_addr + 64);
	}
	bool GetbDrawAxis() {
		return memory.read<bool>(m_addr + 76);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetDecalOverDecal
{
public:
	FSetDecalOverDecal(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbNewValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSkeletonToMeshLinkup
{
public:
	FSkeletonToMeshLinkup(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<int32_t> GetSkeletonToMeshTable() {
		return memory.read<struct TArray<int32_t>>(m_addr + 0);
	}
	struct TArray<int32_t> GetMeshToSkeletonTable() {
		return memory.read<struct TArray<int32_t>>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FDrawDebugConeInDegrees
{
public:
	FDrawDebugConeInDegrees(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FVector GetOrigin() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	struct FVector GetDirection() {
		return memory.read<struct FVector>(m_addr + 20);
	}
	float GetLength() {
		return memory.read<float>(m_addr + 32);
	}
	float GetAngleWidth() {
		return memory.read<float>(m_addr + 36);
	}
	float GetAngleHeight() {
		return memory.read<float>(m_addr + 40);
	}
	int32_t GetNumSides() {
		return memory.read<int32_t>(m_addr + 44);
	}
	struct FLinearColor GetLineColor() {
		return memory.read<struct FLinearColor>(m_addr + 48);
	}
	float GetDuration() {
		return memory.read<float>(m_addr + 64);
	}
	float GetThickness() {
		return memory.read<float>(m_addr + 68);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetStructurePropertyByName
{
public:
	FSetStructurePropertyByName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FName GetPropertyName() {
		return memory.read<struct FName>(m_addr + 8);
	}
	struct FGenericStruct GetValue() {
		return memory.read<struct FGenericStruct>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FEnableGroupByName
{
public:
	FEnableGroupByName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetGroupName() {
		return memory.read<struct FString>(m_addr + 0);
	}
	bool GetbEnable() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FTimespanMaxValue
{
public:
	FTimespanMaxValue(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTimespan GetReturnValue() {
		return memory.read<struct FTimespan>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetUniqueDeviceId
{
public:
	FGetUniqueDeviceId(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FReceiveHit
{
public:
	FReceiveHit(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPrimitiveComponent GetMyComp() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UPrimitiveComponent(ptr_addr);
	}
	struct AActor GetOther() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AActor(ptr_addr);
	}
	struct UPrimitiveComponent GetOtherComp() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UPrimitiveComponent(ptr_addr);
	}
	bool GetbSelfMoved() {
		return memory.read<bool>(m_addr + 24);
	}
	struct FVector GetHitLocation() {
		return memory.read<struct FVector>(m_addr + 28);
	}
	struct FVector GetHitNormal() {
		return memory.read<struct FVector>(m_addr + 40);
	}
	struct FVector GetNormalImpulse() {
		return memory.read<struct FVector>(m_addr + 52);
	}
	struct FHitResult GetHit() {
		return memory.read<struct FHitResult>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};class FDegSin
{
public:
	FDegSin(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetA() {
		return memory.read<float>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FConv_BoolToByte
{
public:
	FConv_BoolToByte(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetInBool() {
		return memory.read<bool>(m_addr + 0);
	}
	char GetReturnValue() {
		return memory.read<char>(m_addr + 1);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsControllerAssignedToGamepad
{
public:
	FIsControllerAssignedToGamepad(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetControllerId() {
		return memory.read<int32_t>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FDivide_ByteByte
{
public:
	FDivide_ByteByte(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	char GetA() {
		return memory.read<char>(m_addr + 0);
	}
	char GetB() {
		return memory.read<char>(m_addr + 1);
	}
	char GetReturnValue() {
		return memory.read<char>(m_addr + 2);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_TimerExistsDelegate
{
public:
	FK2_TimerExistsDelegate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDelegate GetDelegate() {
		return memory.read<struct FDelegate>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FMap_Find
{
public:
	FMap_Find(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<int32_t, int32_t> GetTargetMap() {
		return memory.read<struct TMap<int32_t, int32_t>>(m_addr + 0);
	}
	int32_t GetKey() {
		return memory.read<int32_t>(m_addr + 80);
	}
	int32_t GetValue() {
		return memory.read<int32_t>(m_addr + 84);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 88);
	}

private:
	std::uint64_t m_addr = 0;
};class FDrawDebugCoordinateSystem
{
public:
	FDrawDebugCoordinateSystem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FVector GetAxisLoc() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	struct FRotator GetAxisRot() {
		return memory.read<struct FRotator>(m_addr + 20);
	}
	float GetScale() {
		return memory.read<float>(m_addr + 32);
	}
	float GetDuration() {
		return memory.read<float>(m_addr + 36);
	}
	float GetThickness() {
		return memory.read<float>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};class FGaussianSumBloomSettings
{
public:
	FGaussianSumBloomSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetIntensity() {
		return memory.read<float>(m_addr + 0);
	}
	float GetThreshold() {
		return memory.read<float>(m_addr + 4);
	}
	float GetSizeScale() {
		return memory.read<float>(m_addr + 8);
	}
	float GetFilter1Size() {
		return memory.read<float>(m_addr + 12);
	}
	float GetFilter2Size() {
		return memory.read<float>(m_addr + 16);
	}
	float GetFilter3Size() {
		return memory.read<float>(m_addr + 20);
	}
	float GetFilter4Size() {
		return memory.read<float>(m_addr + 24);
	}
	float GetFilter5Size() {
		return memory.read<float>(m_addr + 28);
	}
	float GetFilter6Size() {
		return memory.read<float>(m_addr + 32);
	}
	struct FLinearColor GetFilter1Tint() {
		return memory.read<struct FLinearColor>(m_addr + 36);
	}
	struct FLinearColor GetFilter2Tint() {
		return memory.read<struct FLinearColor>(m_addr + 52);
	}
	struct FLinearColor GetFilter3Tint() {
		return memory.read<struct FLinearColor>(m_addr + 68);
	}
	struct FLinearColor GetFilter4Tint() {
		return memory.read<struct FLinearColor>(m_addr + 84);
	}
	struct FLinearColor GetFilter5Tint() {
		return memory.read<struct FLinearColor>(m_addr + 100);
	}
	struct FLinearColor GetFilter6Tint() {
		return memory.read<struct FLinearColor>(m_addr + 116);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetAngularVelocityDriveSLERP
{
public:
	FSetAngularVelocityDriveSLERP(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbEnableSLERP() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FConv_Int64ToByte
{
public:
	FConv_Int64ToByte(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int64_t GetinInt() {
		return memory.read<int64_t>(m_addr + 0);
	}
	char GetReturnValue() {
		return memory.read<char>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FDrawDebugCylinder
{
public:
	FDrawDebugCylinder(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FVector GetStart() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	struct FVector GetEnd() {
		return memory.read<struct FVector>(m_addr + 20);
	}
	float GetRadius() {
		return memory.read<float>(m_addr + 32);
	}
	int32_t GetSegments() {
		return memory.read<int32_t>(m_addr + 36);
	}
	struct FLinearColor GetLineColor() {
		return memory.read<struct FLinearColor>(m_addr + 40);
	}
	float GetDuration() {
		return memory.read<float>(m_addr + 56);
	}
	float GetThickness() {
		return memory.read<float>(m_addr + 60);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetCapsuleIndirectShadowMinVisibility
{
public:
	FSetCapsuleIndirectShadowMinVisibility(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FStopAllInstancesOfCameraAnim
{
public:
	FStopAllInstancesOfCameraAnim(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UCameraAnim GetAnim() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UCameraAnim(ptr_addr);
	}
	bool GetbImmediate() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetProjectDirectory
{
public:
	FGetProjectDirectory(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FLessEqual_Int64Int64
{
public:
	FLessEqual_Int64Int64(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int64_t GetA() {
		return memory.read<int64_t>(m_addr + 0);
	}
	int64_t GetB() {
		return memory.read<int64_t>(m_addr + 8);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetNotifyRigidBodyCollision
{
public:
	FSetNotifyRigidBodyCollision(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbNewNotifyRigidBodyCollision() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_IsPhysicsCollisionEnabled
{
public:
	FK2_IsPhysicsCollisionEnabled(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FDrawDebugFloatHistoryLocation
{
public:
	FDrawDebugFloatHistoryLocation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FDebugFloatHistory GetFloatHistory() {
		return memory.read<struct FDebugFloatHistory>(m_addr + 8);
	}
	struct FVector GetDrawLocation() {
		return memory.read<struct FVector>(m_addr + 40);
	}
	struct FVector2D GetDrawSize() {
		return memory.read<struct FVector2D>(m_addr + 52);
	}
	struct FLinearColor GetDrawColor() {
		return memory.read<struct FLinearColor>(m_addr + 60);
	}
	float GetDuration() {
		return memory.read<float>(m_addr + 76);
	}

private:
	std::uint64_t m_addr = 0;
};class FTexturePlatformData
{
public:
	FTexturePlatformData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FNavAvoidanceData
{
public:
	FNavAvoidanceData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FConsumeInputVector
{
public:
	FConsumeInputVector(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FDrawDebugFloatHistoryTransform
{
public:
	FDrawDebugFloatHistoryTransform(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FDebugFloatHistory GetFloatHistory() {
		return memory.read<struct FDebugFloatHistory>(m_addr + 8);
	}
	struct FTransform GetDrawTransform() {
		return memory.read<struct FTransform>(m_addr + 48);
	}
	struct FVector2D GetDrawSize() {
		return memory.read<struct FVector2D>(m_addr + 96);
	}
	struct FLinearColor GetDrawColor() {
		return memory.read<struct FLinearColor>(m_addr + 104);
	}
	float GetDuration() {
		return memory.read<float>(m_addr + 120);
	}

private:
	std::uint64_t m_addr = 0;
};class FConv_ByteToText
{
public:
	FConv_ByteToText(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	char GetValue() {
		return memory.read<char>(m_addr + 0);
	}
	struct FText GetReturnValue() {
		return memory.read<struct FText>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FParticleDeathSignature__DelegateSignature
{
public:
	FParticleDeathSignature__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetEventName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	float GetEmitterTime() {
		return memory.read<float>(m_addr + 8);
	}
	int32_t GetParticleTime() {
		return memory.read<int32_t>(m_addr + 12);
	}
	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 16);
	}
	struct FVector GetVelocity() {
		return memory.read<struct FVector>(m_addr + 28);
	}
	struct FVector GetDirection() {
		return memory.read<struct FVector>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};class FDrawDebugFrustum
{
public:
	FDrawDebugFrustum(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FTransform GetFrustumTransform() {
		return memory.read<struct FTransform>(m_addr + 16);
	}
	struct FLinearColor GetFrustumColor() {
		return memory.read<struct FLinearColor>(m_addr + 64);
	}
	float GetDuration() {
		return memory.read<float>(m_addr + 80);
	}
	float GetThickness() {
		return memory.read<float>(m_addr + 84);
	}

private:
	std::uint64_t m_addr = 0;
};class FAddAngularImpulseInRadians
{
public:
	FAddAngularImpulseInRadians(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetImpulse() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 12);
	}
	bool GetbVelChange() {
		return memory.read<bool>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FRawCurveTracks
{
public:
	FRawCurveTracks(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FFloatCurve> GetFloatCurves() {
		return memory.read<struct TArray<struct FFloatCurve>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetIgnoreMoveInput
{
public:
	FSetIgnoreMoveInput(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbNewMoveInput() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FVector_ComponentMax
{
public:
	FVector_ComponentMax(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetA() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetB() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FDrawDebugPlane
{
public:
	FDrawDebugPlane(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FPlane GetPlaneCoordinates() {
		return memory.read<struct FPlane>(m_addr + 16);
	}
	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 32);
	}
	float GetSize() {
		return memory.read<float>(m_addr + 44);
	}
	struct FLinearColor GetPlaneColor() {
		return memory.read<struct FLinearColor>(m_addr + 48);
	}
	float GetDuration() {
		return memory.read<float>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};class FMakeRotFromXY
{
public:
	FMakeRotFromXY(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetX() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetY() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	struct FRotator GetReturnValue() {
		return memory.read<struct FRotator>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FDrawDebugSphere
{
public:
	FDrawDebugSphere(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FVector GetCenter() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	float GetRadius() {
		return memory.read<float>(m_addr + 20);
	}
	int32_t GetSegments() {
		return memory.read<int32_t>(m_addr + 24);
	}
	struct FLinearColor GetLineColor() {
		return memory.read<struct FLinearColor>(m_addr + 28);
	}
	float GetDuration() {
		return memory.read<float>(m_addr + 44);
	}
	float GetThickness() {
		return memory.read<float>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};class FIndexedCurve
{
public:
	FIndexedCurve(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKeyHandleMap GetKeyHandlesToIndices() {
		return memory.read<struct FKeyHandleMap>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FEqualEqual_PrimaryAssetId
{
public:
	FEqualEqual_PrimaryAssetId(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FPrimaryAssetId GetA() {
		return memory.read<struct FPrimaryAssetId>(m_addr + 0);
	}
	struct FPrimaryAssetId GetB() {
		return memory.read<struct FPrimaryAssetId>(m_addr + 16);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FWasRecentlyRendered
{
public:
	FWasRecentlyRendered(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetTolerance() {
		return memory.read<float>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetObjectName
{
public:
	FGetObjectName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FLinearColor_ToRGBE
{
public:
	FLinearColor_ToRGBE(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLinearColor GetInLinearColor() {
		return memory.read<struct FLinearColor>(m_addr + 0);
	}
	struct FColor GetReturnValue() {
		return memory.read<struct FColor>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FEqualEqual_SoftClassReference
{
public:
	FEqualEqual_SoftClassReference(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftClassPtr<UObject> GetA() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 0);
	}
	struct TSoftClassPtr<UObject> GetB() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 40);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 80);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetRayleighScatteringScale
{
public:
	FSetRayleighScatteringScale(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FEqualEqual_SoftObjectReference
{
public:
	FEqualEqual_SoftObjectReference(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftObjectPtr<UObject> GetA() {
		return memory.read<struct TSoftObjectPtr<UObject>>(m_addr + 0);
	}
	struct TSoftObjectPtr<UObject> GetB() {
		return memory.read<struct TSoftObjectPtr<UObject>>(m_addr + 40);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 80);
	}

private:
	std::uint64_t m_addr = 0;
};class FExecuteConsoleCommand
{
public:
	FExecuteConsoleCommand(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FString GetCommand() {
		return memory.read<struct FString>(m_addr + 8);
	}
	struct APlayerController GetSpecificPlayer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 24);
		return struct APlayerController(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetProjectSavedDirectory
{
public:
	FGetProjectSavedDirectory(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsValidPrimaryAssetId
{
public:
	FIsValidPrimaryAssetId(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FPrimaryAssetId GetPrimaryAssetId() {
		return memory.read<struct FPrimaryAssetId>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FFlushDebugStrings
{
public:
	FFlushDebugStrings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FFlushPersistentDebugLines
{
public:
	FFlushPersistentDebugLines(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FAddTorque
{
public:
	FAddTorque(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetTorque() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 12);
	}
	bool GetbAccelChange() {
		return memory.read<bool>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetAllBodiesBelowSimulatePhysics
{
public:
	FSetAllBodiesBelowSimulatePhysics(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetInBoneName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	bool GetbNewSimulate() {
		return memory.read<bool>(m_addr + 8);
	}
	bool GetbIncludeSelf() {
		return memory.read<bool>(m_addr + 9);
	}

private:
	std::uint64_t m_addr = 0;
};class FNameCurve
{
public:
	FNameCurve(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FNameCurveKey> GetKeys() {
		return memory.read<struct TArray<struct FNameCurveKey>>(m_addr + 104);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetChildComponent
{
public:
	FGetChildComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetChildIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct USceneComponent GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct USceneComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetComponentsByTag
{
public:
	FGetComponentsByTag(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UActorComponent GetComponentClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return UActorComponent(ptr_addr);
	}
	struct FName GetTag() {
		return memory.read<struct FName>(m_addr + 8);
	}
	struct TArray<struct UActorComponent> GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct TArray<struct UActorComponent>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetClassPropertyByName
{
public:
	FSetClassPropertyByName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FName GetPropertyName() {
		return memory.read<struct FName>(m_addr + 8);
	}
	UObject GetValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return UObject(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetTransformPropertyByName
{
public:
	FSetTransformPropertyByName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FName GetPropertyName() {
		return memory.read<struct FName>(m_addr + 8);
	}
	struct FTransform GetValue() {
		return memory.read<struct FTransform>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_GetClosestPointOnPhysicsAsset
{
public:
	FK2_GetClosestPointOnPhysicsAsset(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetWorldPosition() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetClosestWorldPosition() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	struct FVector GetNormal() {
		return memory.read<struct FVector>(m_addr + 24);
	}
	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 36);
	}
	float GetDistance() {
		return memory.read<float>(m_addr + 44);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetClassFromPrimaryAssetId
{
public:
	FGetClassFromPrimaryAssetId(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FPrimaryAssetId GetPrimaryAssetId() {
		return memory.read<struct FPrimaryAssetId>(m_addr + 0);
	}
	UObject GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return UObject(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsGravityEnabled
{
public:
	FIsGravityEnabled(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FBlueprintInputActionDelegateBinding
{
public:
	FBlueprintInputActionDelegateBinding(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetInputActionName() {
		return memory.read<struct FName>(m_addr + 4);
	}
	enum class EInputEvent GetInputKeyEvent() {
		return memory.read<enum class EInputEvent>(m_addr + 12);
	}
	struct FName GetFunctionNameToBind() {
		return memory.read<struct FName>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetAdIDCount
{
public:
	FGetAdIDCount(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FEqualEqual_ByteByte
{
public:
	FEqualEqual_ByteByte(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	char GetA() {
		return memory.read<char>(m_addr + 0);
	}
	char GetB() {
		return memory.read<char>(m_addr + 1);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 2);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetFullyDirectionalInscatteringColorDistance
{
public:
	FSetFullyDirectionalInscatteringColorDistance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetCommandLine
{
public:
	FGetCommandLine(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetComponentBounds
{
public:
	FGetComponentBounds(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USceneComponent GetComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct USceneComponent(ptr_addr);
	}
	struct FVector GetOrigin() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	struct FVector GetBoxExtent() {
		return memory.read<struct FVector>(m_addr + 20);
	}
	float GetSphereRadius() {
		return memory.read<float>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FReceiveUnPossess
{
public:
	FReceiveUnPossess(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APawn GetUnpossessedPawn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APawn(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsSplitScreen
{
public:
	FIsSplitScreen(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetConsoleVariableFloatValue
{
public:
	FGetConsoleVariableFloatValue(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetVariableName() {
		return memory.read<struct FString>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetDefaultLanguage
{
public:
	FGetDefaultLanguage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSkeletalMeshSamplingRegion
{
public:
	FSkeletalMeshSamplingRegion(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	int32_t GetLODIndex() {
		return memory.read<int32_t>(m_addr + 8);
	}
	char GetbSupportUniformlyDistributedSampling() {
		return memory.read<char>(m_addr + 12);
	}
	struct TArray<struct FSkeletalMeshSamplingRegionMaterialFilter> GetMaterialFilters() {
		return memory.read<struct TArray<struct FSkeletalMeshSamplingRegionMaterialFilter>>(m_addr + 16);
	}
	struct TArray<struct FSkeletalMeshSamplingRegionBoneFilter> GetBoneFilters() {
		return memory.read<struct TArray<struct FSkeletalMeshSamplingRegionBoneFilter>>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FDynamicWeightedMovingAverage_FVector
{
public:
	FDynamicWeightedMovingAverage_FVector(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetCurrentSample() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetPreviousSample() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	float GetMaxDistance() {
		return memory.read<float>(m_addr + 24);
	}
	float GetMinWeight() {
		return memory.read<float>(m_addr + 28);
	}
	float GetMaxWeight() {
		return memory.read<float>(m_addr + 32);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 36);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetInputMouseDelta
{
public:
	FGetInputMouseDelta(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetDeltaX() {
		return memory.read<float>(m_addr + 0);
	}
	float GetDeltaY() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FConv_IntToByte
{
public:
	FConv_IntToByte(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetinInt() {
		return memory.read<int32_t>(m_addr + 0);
	}
	char GetReturnValue() {
		return memory.read<char>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetSoftClassPropertyByName
{
public:
	FSetSoftClassPropertyByName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FName GetPropertyName() {
		return memory.read<struct FName>(m_addr + 8);
	}
	struct TSoftClassPtr<UObject> GetValue() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FKey_GetNavigationActionFromKey
{
public:
	FKey_GetNavigationActionFromKey(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKeyEvent GetInKeyEvent() {
		return memory.read<struct FKeyEvent>(m_addr + 0);
	}
	enum class EUINavigationAction GetReturnValue() {
		return memory.read<enum class EUINavigationAction>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetDefaultLocale
{
public:
	FGetDefaultLocale(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FAddPoint
{
public:
	FAddPoint(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FSplinePoint GetPoint() {
		return memory.read<struct FSplinePoint>(m_addr + 0);
	}
	bool GetbUpdateSpline() {
		return memory.read<bool>(m_addr + 68);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetCookedEnvelopeData
{
public:
	FGetCookedEnvelopeData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetOutEnvelopeData() {
		return memory.read<float>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetCookedEnvelopeDataForAllPlayingSounds
{
public:
	FGetCookedEnvelopeDataForAllPlayingSounds(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FSoundWaveEnvelopeDataPerSound> GetOutEnvelopeData() {
		return memory.read<struct TArray<struct FSoundWaveEnvelopeDataPerSound>>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetHorizontalDotProductTo
{
public:
	FGetHorizontalDotProductTo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetOtherActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetPlatformUserName
{
public:
	FGetPlatformUserName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FReadRenderTargetPixel
{
public:
	FReadRenderTargetPixel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct UTextureRenderTarget2D GetTextureRenderTarget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UTextureRenderTarget2D(ptr_addr);
	}
	int32_t GetX() {
		return memory.read<int32_t>(m_addr + 16);
	}
	int32_t GetY() {
		return memory.read<int32_t>(m_addr + 20);
	}
	struct FColor GetReturnValue() {
		return memory.read<struct FColor>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetDeviceId
{
public:
	FGetDeviceId(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FDebugTextInfo
{
public:
	FDebugTextInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetSrcActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}
	struct FVector GetSrcActorOffset() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	struct FVector GetSrcActorDesiredOffset() {
		return memory.read<struct FVector>(m_addr + 20);
	}
	struct FString GetDebugText() {
		return memory.read<struct FString>(m_addr + 32);
	}
	float GetTimeRemaining() {
		return memory.read<float>(m_addr + 48);
	}
	float GetDuration() {
		return memory.read<float>(m_addr + 52);
	}
	struct FColor GetTextColor() {
		return memory.read<struct FColor>(m_addr + 56);
	}
	char GetbAbsoluteLocation() {
		return memory.read<char>(m_addr + 60);
	}
	char GetbKeepAttachedToActor() {
		return memory.read<char>(m_addr + 60);
	}
	char GetbDrawShadow() {
		return memory.read<char>(m_addr + 60);
	}
	struct FVector GetOrigActorLocation() {
		return memory.read<struct FVector>(m_addr + 64);
	}
	struct UFont GetFont() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 80);
		return struct UFont(ptr_addr);
	}
	float GetFontScale() {
		return memory.read<float>(m_addr + 88);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetAllBodiesBelowPhysicsBlendWeight
{
public:
	FSetAllBodiesBelowPhysicsBlendWeight(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetInBoneName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	float GetPhysicsBlendWeight() {
		return memory.read<float>(m_addr + 8);
	}
	bool GetbSkipCustomPhysicsType() {
		return memory.read<bool>(m_addr + 12);
	}
	bool GetbIncludeSelf() {
		return memory.read<bool>(m_addr + 13);
	}

private:
	std::uint64_t m_addr = 0;
};class FCollisionResponseContainer
{
public:
	FCollisionResponseContainer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class ECollisionResponse GetWorldStatic() {
		return memory.read<enum class ECollisionResponse>(m_addr + 0);
	}
	enum class ECollisionResponse GetWorldDynamic() {
		return memory.read<enum class ECollisionResponse>(m_addr + 1);
	}
	enum class ECollisionResponse GetPawn() {
		return memory.read<enum class ECollisionResponse>(m_addr + 2);
	}
	enum class ECollisionResponse GetVisibility() {
		return memory.read<enum class ECollisionResponse>(m_addr + 3);
	}
	enum class ECollisionResponse GetCamera() {
		return memory.read<enum class ECollisionResponse>(m_addr + 4);
	}
	enum class ECollisionResponse GetPhysicsBody() {
		return memory.read<enum class ECollisionResponse>(m_addr + 5);
	}
	enum class ECollisionResponse GetVehicle() {
		return memory.read<enum class ECollisionResponse>(m_addr + 6);
	}
	enum class ECollisionResponse GetDestructible() {
		return memory.read<enum class ECollisionResponse>(m_addr + 7);
	}
	enum class ECollisionResponse GetEngineTraceChannel1() {
		return memory.read<enum class ECollisionResponse>(m_addr + 8);
	}
	enum class ECollisionResponse GetEngineTraceChannel2() {
		return memory.read<enum class ECollisionResponse>(m_addr + 9);
	}
	enum class ECollisionResponse GetEngineTraceChannel3() {
		return memory.read<enum class ECollisionResponse>(m_addr + 10);
	}
	enum class ECollisionResponse GetEngineTraceChannel4() {
		return memory.read<enum class ECollisionResponse>(m_addr + 11);
	}
	enum class ECollisionResponse GetEngineTraceChannel5() {
		return memory.read<enum class ECollisionResponse>(m_addr + 12);
	}
	enum class ECollisionResponse GetEngineTraceChannel6() {
		return memory.read<enum class ECollisionResponse>(m_addr + 13);
	}
	enum class ECollisionResponse GetGameTraceChannel1() {
		return memory.read<enum class ECollisionResponse>(m_addr + 14);
	}
	enum class ECollisionResponse GetGameTraceChannel2() {
		return memory.read<enum class ECollisionResponse>(m_addr + 15);
	}
	enum class ECollisionResponse GetGameTraceChannel3() {
		return memory.read<enum class ECollisionResponse>(m_addr + 16);
	}
	enum class ECollisionResponse GetGameTraceChannel4() {
		return memory.read<enum class ECollisionResponse>(m_addr + 17);
	}
	enum class ECollisionResponse GetGameTraceChannel5() {
		return memory.read<enum class ECollisionResponse>(m_addr + 18);
	}
	enum class ECollisionResponse GetGameTraceChannel6() {
		return memory.read<enum class ECollisionResponse>(m_addr + 19);
	}
	enum class ECollisionResponse GetGameTraceChannel7() {
		return memory.read<enum class ECollisionResponse>(m_addr + 20);
	}
	enum class ECollisionResponse GetGameTraceChannel8() {
		return memory.read<enum class ECollisionResponse>(m_addr + 21);
	}
	enum class ECollisionResponse GetGameTraceChannel9() {
		return memory.read<enum class ECollisionResponse>(m_addr + 22);
	}
	enum class ECollisionResponse GetGameTraceChannel10() {
		return memory.read<enum class ECollisionResponse>(m_addr + 23);
	}
	enum class ECollisionResponse GetGameTraceChannel11() {
		return memory.read<enum class ECollisionResponse>(m_addr + 24);
	}
	enum class ECollisionResponse GetGameTraceChannel12() {
		return memory.read<enum class ECollisionResponse>(m_addr + 25);
	}
	enum class ECollisionResponse GetGameTraceChannel13() {
		return memory.read<enum class ECollisionResponse>(m_addr + 26);
	}
	enum class ECollisionResponse GetGameTraceChannel14() {
		return memory.read<enum class ECollisionResponse>(m_addr + 27);
	}
	enum class ECollisionResponse GetGameTraceChannel15() {
		return memory.read<enum class ECollisionResponse>(m_addr + 28);
	}
	enum class ECollisionResponse GetGameTraceChannel16() {
		return memory.read<enum class ECollisionResponse>(m_addr + 29);
	}
	enum class ECollisionResponse GetGameTraceChannel17() {
		return memory.read<enum class ECollisionResponse>(m_addr + 30);
	}
	enum class ECollisionResponse GetGameTraceChannel18() {
		return memory.read<enum class ECollisionResponse>(m_addr + 31);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetEngineVersion
{
public:
	FGetEngineVersion(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetFrameCount
{
public:
	FGetFrameCount(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int64_t GetReturnValue() {
		return memory.read<int64_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FToggleTrackKey
{
public:
	FToggleTrackKey(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetTime() {
		return memory.read<float>(m_addr + 0);
	}
	enum class ETrackToggleAction GetToggleAction() {
		return memory.read<enum class ETrackToggleAction>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetDelayedTimecode
{
public:
	FGetDelayedTimecode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTimecode GetReturnValue() {
		return memory.read<struct FTimecode>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsValidPrimaryAssetType
{
public:
	FIsValidPrimaryAssetType(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FPrimaryAssetType GetPrimaryAssetType() {
		return memory.read<struct FPrimaryAssetType>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetShouldUpdatePhysicsVolume
{
public:
	FSetShouldUpdatePhysicsVolume(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbInShouldUpdatePhysicsVolume() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetGlobalPitchModulation
{
public:
	FSetGlobalPitchModulation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	float GetPitchModulation() {
		return memory.read<float>(m_addr + 8);
	}
	float GetTimeSec() {
		return memory.read<float>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FUniqueNetIdRepl
{
public:
	FUniqueNetIdRepl(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<char> GetReplicationBytes() {
		return memory.read<struct TArray<char>>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetGamepadButtonGlyph
{
public:
	FGetGamepadButtonGlyph(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetButtonKey() {
		return memory.read<struct FString>(m_addr + 0);
	}
	int32_t GetControllerIndex() {
		return memory.read<int32_t>(m_addr + 16);
	}
	struct UTexture2D GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 24);
		return struct UTexture2D(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FTrackToSkeletonMap
{
public:
	FTrackToSkeletonMap(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetBoneTreeIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FNotEqual_SoftObjectReference
{
public:
	FNotEqual_SoftObjectReference(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftObjectPtr<UObject> GetA() {
		return memory.read<struct TSoftObjectPtr<UObject>>(m_addr + 0);
	}
	struct TSoftObjectPtr<UObject> GetB() {
		return memory.read<struct TSoftObjectPtr<UObject>>(m_addr + 40);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 80);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetNumLODs
{
public:
	FGetNumLODs(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetFieldOfView
{
public:
	FSetFieldOfView(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetInFieldOfView() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_GetTimerRemainingTime
{
public:
	FK2_GetTimerRemainingTime(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FString GetFunctionName() {
		return memory.read<struct FString>(m_addr + 8);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetGamepadControllerName
{
public:
	FGetGamepadControllerName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetControllerId() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetPath
{
public:
	FGetPath(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetInPath() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetGameTimeInSeconds
{
public:
	FGetGameTimeInSeconds(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FIntegralKey
{
public:
	FIntegralKey(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetTime() {
		return memory.read<float>(m_addr + 0);
	}
	int32_t GetValue() {
		return memory.read<int32_t>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetLocalCurrencyCode
{
public:
	FGetLocalCurrencyCode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetChildrenComponents
{
public:
	FGetChildrenComponents(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbIncludeAllDescendants() {
		return memory.read<bool>(m_addr + 0);
	}
	struct TArray<struct USceneComponent> GetChildren() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct TArray<struct USceneComponent>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FMatrix_TransformPosition
{
public:
	FMatrix_TransformPosition(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMatrix GetM() {
		return memory.read<struct FMatrix>(m_addr + 0);
	}
	struct FVector GetV() {
		return memory.read<struct FVector>(m_addr + 64);
	}
	struct FVector4 GetReturnValue() {
		return memory.read<struct FVector4>(m_addr + 80);
	}

private:
	std::uint64_t m_addr = 0;
};class FGrassOverlappingSphereCount
{
public:
	FGrassOverlappingSphereCount(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct UStaticMesh GetStaticMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UStaticMesh(ptr_addr);
	}
	struct FVector GetCenterPosition() {
		return memory.read<struct FVector>(m_addr + 16);
	}
	float GetRadius() {
		return memory.read<float>(m_addr + 28);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FAudioReverbEffect
{
public:
	FAudioReverbEffect(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FGetPrimaryAssetIdFromClass
{
public:
	FGetPrimaryAssetIdFromClass(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UObject GetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return UObject(ptr_addr);
	}
	struct FPrimaryAssetId GetReturnValue() {
		return memory.read<struct FPrimaryAssetId>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetTransform
{
public:
	FGetTransform(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTransform GetReturnValue() {
		return memory.read<struct FTransform>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetLocalCurrencySymbol
{
public:
	FGetLocalCurrencySymbol(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FAddForceAtLocation
{
public:
	FAddForceAtLocation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetForce() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetMinYResolutionFor3DView
{
public:
	FGetMinYResolutionFor3DView(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetCenterOfMass
{
public:
	FGetCenterOfMass(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FClientPrestreamTextures
{
public:
	FClientPrestreamTextures(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetForcedActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}
	float GetForceDuration() {
		return memory.read<float>(m_addr + 8);
	}
	bool GetbEnableStreaming() {
		return memory.read<bool>(m_addr + 12);
	}
	int32_t GetCinematicTextureGroups() {
		return memory.read<int32_t>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetAngularDamping
{
public:
	FGetAngularDamping(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FMeshSectionInfo
{
public:
	FMeshSectionInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetMaterialIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	bool GetbEnableCollision() {
		return memory.read<bool>(m_addr + 4);
	}
	bool GetbCastShadow() {
		return memory.read<bool>(m_addr + 5);
	}
	bool GetbVisibleInRayTracing() {
		return memory.read<bool>(m_addr + 6);
	}
	bool GetbForceOpaque() {
		return memory.read<bool>(m_addr + 7);
	}

private:
	std::uint64_t m_addr = 0;
};class FLess_IntInt
{
public:
	FLess_IntInt(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetA() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetB() {
		return memory.read<int32_t>(m_addr + 4);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetMinYResolutionForUI
{
public:
	FGetMinYResolutionForUI(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FAnimNode_UseCachedPose
{
public:
	FAnimNode_UseCachedPose(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FPoseLink GetLinkToCachingNode() {
		return memory.read<struct FPoseLink>(m_addr + 16);
	}
	struct FName GetCachePoseName() {
		return memory.read<struct FName>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FFInterpTo_Constant
{
public:
	FFInterpTo_Constant(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetCurrent() {
		return memory.read<float>(m_addr + 0);
	}
	float GetTarget() {
		return memory.read<float>(m_addr + 4);
	}
	float GetDeltaTime() {
		return memory.read<float>(m_addr + 8);
	}
	float GetInterpSpeed() {
		return memory.read<float>(m_addr + 12);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetParentComponents
{
public:
	FGetParentComponents(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct USceneComponent> GetParents() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct TArray<struct USceneComponent>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FFFloor64
{
public:
	FFFloor64(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetA() {
		return memory.read<float>(m_addr + 0);
	}
	int64_t GetReturnValue() {
		return memory.read<int64_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FAnimBlueprintFunctionData
{
public:
	FAnimBlueprintFunctionData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TFieldPath<FNone> GetOutputPoseNodeProperty() {
		return memory.read<struct TFieldPath<FNone>>(m_addr + 0);
	}
	struct TArray<struct TFieldPath<FNone>> GetInputPoseNodeProperties() {
		return memory.read<struct TArray<struct TFieldPath<FNone>>>(m_addr + 32);
	}
	struct TArray<struct TFieldPath<FNone>> GetInputProperties() {
		return memory.read<struct TArray<struct TFieldPath<FNone>>>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetDisablePostProcessBlueprint
{
public:
	FGetDisablePostProcessBlueprint(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetObjectFromPrimaryAssetId
{
public:
	FGetObjectFromPrimaryAssetId(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FPrimaryAssetId GetPrimaryAssetId() {
		return memory.read<struct FPrimaryAssetId>(m_addr + 0);
	}
	struct UObject GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UObject(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetWindowTitle
{
public:
	FSetWindowTitle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetTitle() {
		return memory.read<struct FText>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetOuterObject
{
public:
	FGetOuterObject(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct UObject GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UObject(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FScreenMessageString
{
public:
	FScreenMessageString(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint64_t GetKey() {
		return memory.read<uint64_t>(m_addr + 0);
	}
	struct FString GetScreenMessage() {
		return memory.read<struct FString>(m_addr + 8);
	}
	struct FColor GetDisplayColor() {
		return memory.read<struct FColor>(m_addr + 24);
	}
	float GetTimeToDisplay() {
		return memory.read<float>(m_addr + 28);
	}
	float GetCurrentTimeDisplayed() {
		return memory.read<float>(m_addr + 32);
	}
	struct FVector2D GetTextScale() {
		return memory.read<struct FVector2D>(m_addr + 36);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetBeamSourcePoint
{
public:
	FGetBeamSourcePoint(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetEmitterIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetSourceIndex() {
		return memory.read<int32_t>(m_addr + 4);
	}
	struct FVector GetOutSourcePoint() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FAtmospherePrecomputeInstanceData
{
public:
	FAtmospherePrecomputeInstanceData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FVector4_Zero
{
public:
	FVector4_Zero(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector4 GetReturnValue() {
		return memory.read<struct FVector4>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetLifeSpan
{
public:
	FGetLifeSpan(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetPathName
{
public:
	FGetPathName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FClearSkinWeightOverride
{
public:
	FClearSkinWeightOverride(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetLODIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FPointerEvent_GetTouchpadIndex
{
public:
	FPointerEvent_GetTouchpadIndex(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FPointerEvent GetInput() {
		return memory.read<struct FPointerEvent>(m_addr + 0);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 112);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_AddWorldOffset
{
public:
	FK2_AddWorldOffset(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetDeltaLocation() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	bool GetbSweep() {
		return memory.read<bool>(m_addr + 12);
	}
	struct FHitResult GetSweepHitResult() {
		return memory.read<struct FHitResult>(m_addr + 16);
	}
	bool GetbTeleport() {
		return memory.read<bool>(m_addr + 152);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetAllMotorsAngularVelocityDrive
{
public:
	FSetAllMotorsAngularVelocityDrive(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbEnableSwingDrive() {
		return memory.read<bool>(m_addr + 0);
	}
	bool GetbEnableTwistDrive() {
		return memory.read<bool>(m_addr + 1);
	}
	bool GetbSkipCustomPhysicsType() {
		return memory.read<bool>(m_addr + 2);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_AddActorLocalOffset
{
public:
	FK2_AddActorLocalOffset(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetDeltaLocation() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	bool GetbSweep() {
		return memory.read<bool>(m_addr + 12);
	}
	struct FHitResult GetSweepHitResult() {
		return memory.read<struct FHitResult>(m_addr + 16);
	}
	bool GetbTeleport() {
		return memory.read<bool>(m_addr + 152);
	}

private:
	std::uint64_t m_addr = 0;
};class FCopyArrayOfMoveIgnoreComponents
{
public:
	FCopyArrayOfMoveIgnoreComponents(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct UPrimitiveComponent> GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct TArray<struct UPrimitiveComponent>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetPrimaryAssetIdFromObject
{
public:
	FGetPrimaryAssetIdFromObject(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FPrimaryAssetId GetReturnValue() {
		return memory.read<struct FPrimaryAssetId>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetSuppressViewportTransitionMessage
{
public:
	FSetSuppressViewportTransitionMessage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	bool GetbState() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetAccurateRealTime
{
public:
	FGetAccurateRealTime(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetSeconds() {
		return memory.read<int32_t>(m_addr + 0);
	}
	float GetPartialSeconds() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetWorldLocationAtSplinePoint
{
public:
	FGetWorldLocationAtSplinePoint(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetPointIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetPlayerPawn
{
public:
	FGetPlayerPawn(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	int32_t GetPlayerIndex() {
		return memory.read<int32_t>(m_addr + 8);
	}
	struct APawn GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct APawn(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetPositionWithPreviousTime
{
public:
	FSetPositionWithPreviousTime(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetInPosition() {
		return memory.read<float>(m_addr + 0);
	}
	float GetInPreviousTime() {
		return memory.read<float>(m_addr + 4);
	}
	bool GetbFireNotifies() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetCustomPrimitiveDataVector2
{
public:
	FSetCustomPrimitiveDataVector2(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetDataIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct FVector2D GetValue() {
		return memory.read<struct FVector2D>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetPrimaryAssetIdList
{
public:
	FGetPrimaryAssetIdList(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FPrimaryAssetType GetPrimaryAssetType() {
		return memory.read<struct FPrimaryAssetType>(m_addr + 0);
	}
	struct TArray<struct FPrimaryAssetId> GetOutPrimaryAssetIdList() {
		return memory.read<struct TArray<struct FPrimaryAssetId>>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FServerAcknowledgePossession
{
public:
	FServerAcknowledgePossession(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APawn GetP() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APawn(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FComponentSpacePoseLink
{
public:
	FComponentSpacePoseLink(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FGetProjectContentDirectory
{
public:
	FGetProjectContentDirectory(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetRenderingDetailMode
{
public:
	FGetRenderingDetailMode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetAllSocketNames
{
public:
	FGetAllSocketNames(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FName> GetReturnValue() {
		return memory.read<struct TArray<struct FName>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetRenderingMaterialQualityLevel
{
public:
	FGetRenderingMaterialQualityLevel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetSoftClassReferenceFromPrimaryAssetId
{
public:
	FGetSoftClassReferenceFromPrimaryAssetId(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FPrimaryAssetId GetPrimaryAssetId() {
		return memory.read<struct FPrimaryAssetId>(m_addr + 0);
	}
	struct TSoftClassPtr<UObject> GetReturnValue() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetAudioQualityLevel
{
public:
	FSetAudioQualityLevel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetQualityLevel() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetSoftObjectReferenceFromPrimaryAssetId
{
public:
	FGetSoftObjectReferenceFromPrimaryAssetId(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FPrimaryAssetId GetPrimaryAssetId() {
		return memory.read<struct FPrimaryAssetId>(m_addr + 0);
	}
	struct TSoftObjectPtr<UObject> GetReturnValue() {
		return memory.read<struct TSoftObjectPtr<UObject>>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FLinearColor_White
{
public:
	FLinearColor_White(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLinearColor GetReturnValue() {
		return memory.read<struct FLinearColor>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSoundDebugEntry
{
public:
	FSoundDebugEntry(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetDebugName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FSoftObjectPath GetSound() {
		return memory.read<struct FSoftObjectPath>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetSystemPath
{
public:
	FGetSystemPath(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FRootMotionDebugClientPrintOnScreen
{
public:
	FRootMotionDebugClientPrintOnScreen(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetinString() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetParentBone
{
public:
	FGetParentBone(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FName GetReturnValue() {
		return memory.read<struct FName>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FDialogueWaveParameter
{
public:
	FDialogueWaveParameter(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UDialogueWave GetDialogueWave() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UDialogueWave(ptr_addr);
	}
	struct FDialogueContext GetContext() {
		return memory.read<struct FDialogueContext>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FCachedAnimRelevancyData
{
public:
	FCachedAnimRelevancyData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetStateMachineName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FName GetStateName() {
		return memory.read<struct FName>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FExposureSettings
{
public:
	FExposureSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetFixedEV100() {
		return memory.read<float>(m_addr + 0);
	}
	bool GetbFixed() {
		return memory.read<bool>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsDedicatedServer
{
public:
	FIsDedicatedServer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsPackagedForDistribution
{
public:
	FIsPackagedForDistribution(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FWorldOriginLocationChanged
{
public:
	FWorldOriginLocationChanged(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FIntVector GetOldOriginLocation() {
		return memory.read<struct FIntVector>(m_addr + 0);
	}
	struct FIntVector GetNewOriginLocation() {
		return memory.read<struct FIntVector>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FFloatCurve
{
public:
	FFloatCurve(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRichCurve GetFloatCurve() {
		return memory.read<struct FRichCurve>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsInterstitialAdRequested
{
public:
	FIsInterstitialAdRequested(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsLoggedIn
{
public:
	FIsLoggedIn(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APlayerController GetSpecificPlayer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APlayerController(ptr_addr);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FMakeRotFromYZ
{
public:
	FMakeRotFromYZ(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetY() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetZ() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	struct FRotator GetReturnValue() {
		return memory.read<struct FRotator>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsScreensaverEnabled
{
public:
	FIsScreensaverEnabled(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FWasInputKeyJustPressed
{
public:
	FWasInputKeyJustPressed(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKey GetKey() {
		return memory.read<struct FKey>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FClampAxes2D
{
public:
	FClampAxes2D(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector2D GetA() {
		return memory.read<struct FVector2D>(m_addr + 0);
	}
	float GetMinAxisVal() {
		return memory.read<float>(m_addr + 8);
	}
	float GetMaxAxisVal() {
		return memory.read<float>(m_addr + 12);
	}
	struct FVector2D GetReturnValue() {
		return memory.read<struct FVector2D>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetActorParameter
{
public:
	FSetActorParameter(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetParameterName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct AActor GetParam() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetMinute
{
public:
	FGetMinute(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDateTime GetA() {
		return memory.read<struct FDateTime>(m_addr + 0);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetRotatorPropertyByName
{
public:
	FSetRotatorPropertyByName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FName GetPropertyName() {
		return memory.read<struct FName>(m_addr + 8);
	}
	struct FRotator GetValue() {
		return memory.read<struct FRotator>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FFindNearestPointsOnLineSegments
{
public:
	FFindNearestPointsOnLineSegments(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetSegment1Start() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetSegment1End() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	struct FVector GetSegment2Start() {
		return memory.read<struct FVector>(m_addr + 24);
	}
	struct FVector GetSegment2End() {
		return memory.read<struct FVector>(m_addr + 36);
	}
	struct FVector GetSegment1Point() {
		return memory.read<struct FVector>(m_addr + 48);
	}
	struct FVector GetSegment2Point() {
		return memory.read<struct FVector>(m_addr + 60);
	}

private:
	std::uint64_t m_addr = 0;
};class FDialogueContext
{
public:
	FDialogueContext(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UDialogueVoice GetSpeaker() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UDialogueVoice(ptr_addr);
	}
	struct TArray<struct UDialogueVoice> GetTargets() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct TArray<struct UDialogueVoice>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetAllowedAnimCurvesEvaluation
{
public:
	FSetAllowedAnimCurvesEvaluation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FName> Getlist() {
		return memory.read<struct TArray<struct FName>>(m_addr + 0);
	}
	bool GetbAllow() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FAddRadialForce
{
public:
	FAddRadialForce(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetOrigin() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	float GetRadius() {
		return memory.read<float>(m_addr + 12);
	}
	float GetStrength() {
		return memory.read<float>(m_addr + 16);
	}
	enum class ERadialImpulseFalloff GetFalloff() {
		return memory.read<enum class ERadialImpulseFalloff>(m_addr + 20);
	}
	bool GetbAccelChange() {
		return memory.read<bool>(m_addr + 21);
	}

private:
	std::uint64_t m_addr = 0;
};class FSkelMeshSkinWeightInfo
{
public:
	FSkelMeshSkinWeightInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetBones[c]() {
		return memory.read<int32_t>(m_addr + 0);
	}
	char GetWeights[c]() {
		return memory.read<char>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetScaledSphereRadius
{
public:
	FGetScaledSphereRadius(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FDrawMaterialTriangle
{
public:
	FDrawMaterialTriangle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UMaterialInterface GetMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UMaterialInterface(ptr_addr);
	}
	struct FVector2D GetV0_Pos() {
		return memory.read<struct FVector2D>(m_addr + 8);
	}
	struct FVector2D GetV1_Pos() {
		return memory.read<struct FVector2D>(m_addr + 16);
	}
	struct FVector2D GetV2_Pos() {
		return memory.read<struct FVector2D>(m_addr + 24);
	}
	struct FVector2D GetV0_UV() {
		return memory.read<struct FVector2D>(m_addr + 32);
	}
	struct FVector2D GetV1_UV() {
		return memory.read<struct FVector2D>(m_addr + 40);
	}
	struct FVector2D GetV2_UV() {
		return memory.read<struct FVector2D>(m_addr + 48);
	}
	struct FLinearColor GetV0_Color() {
		return memory.read<struct FLinearColor>(m_addr + 56);
	}
	struct FLinearColor GetV1_Color() {
		return memory.read<struct FLinearColor>(m_addr + 72);
	}
	struct FLinearColor GetV2_Color() {
		return memory.read<struct FLinearColor>(m_addr + 88);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsServer
{
public:
	FIsServer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetMorphTargets
{
public:
	FGetMorphTargets(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct UMorphTarget> GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct TArray<struct UMorphTarget>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FFeaturePackDir
{
public:
	FFeaturePackDir(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_SetTimerDelegate
{
public:
	FK2_SetTimerDelegate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDelegate GetDelegate() {
		return memory.read<struct FDelegate>(m_addr + 0);
	}
	float GetTime() {
		return memory.read<float>(m_addr + 16);
	}
	bool GetbLooping() {
		return memory.read<bool>(m_addr + 20);
	}
	float GetInitialStartDelay() {
		return memory.read<float>(m_addr + 24);
	}
	float GetInitialStartDelayVariance() {
		return memory.read<float>(m_addr + 28);
	}
	struct FTimerHandle GetReturnValue() {
		return memory.read<struct FTimerHandle>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FVector_UnwindEuler
{
public:
	FVector_UnwindEuler(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetA() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetAbs2D
{
public:
	FGetAbs2D(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector2D GetA() {
		return memory.read<struct FVector2D>(m_addr + 0);
	}
	struct FVector2D GetReturnValue() {
		return memory.read<struct FVector2D>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FAddImpulse
{
public:
	FAddImpulse(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetImpulse() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	bool GetbVelocityChange() {
		return memory.read<bool>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FConv_VectorToVector2D
{
public:
	FConv_VectorToVector2D(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetInVector() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector2D GetReturnValue() {
		return memory.read<struct FVector2D>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsUnattended
{
public:
	FIsUnattended(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FAddAngularImpulseInDegrees
{
public:
	FAddAngularImpulseInDegrees(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetImpulse() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 12);
	}
	bool GetbVelChange() {
		return memory.read<bool>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetIntegerAttribute_Ref
{
public:
	FGetIntegerAttribute_Ref(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FName GetAttributeName() {
		return memory.read<struct FName>(m_addr + 8);
	}
	int32_t GetOutValue() {
		return memory.read<int32_t>(m_addr + 16);
	}
	enum class ECustomBoneAttributeLookup GetLookupType() {
		return memory.read<enum class ECustomBoneAttributeLookup>(m_addr + 20);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 21);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsValid
{
public:
	FIsValid(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetRelativeTransform
{
public:
	FGetRelativeTransform(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTransform GetReturnValue() {
		return memory.read<struct FTransform>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsValidClass
{
public:
	FIsValidClass(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UObject GetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return UObject(ptr_addr);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FFindScaleClosestToWorldLocation
{
public:
	FFindScaleClosestToWorldLocation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetWorldLocation() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_ClearAndInvalidateTimerHandle
{
public:
	FK2_ClearAndInvalidateTimerHandle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FTimerHandle GetHandle() {
		return memory.read<struct FTimerHandle>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FTimerHandle
{
public:
	FTimerHandle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint64_t GetHandle() {
		return memory.read<uint64_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FQuat_Inversed
{
public:
	FQuat_Inversed(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FQuat GetQ() {
		return memory.read<struct FQuat>(m_addr + 0);
	}
	struct FQuat GetReturnValue() {
		return memory.read<struct FQuat>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FMirrorVectorByNormal
{
public:
	FMirrorVectorByNormal(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetInVect() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetInNormal() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FPrimaryAssetTypeInfo
{
public:
	FPrimaryAssetTypeInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetPrimaryAssetType() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct TSoftClassPtr<UObject> GetAssetBaseClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 8);
	}
	UObject GetAssetBaseClassLoaded() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return UObject(ptr_addr);
	}
	bool GetbHasBlueprintClasses() {
		return memory.read<bool>(m_addr + 56);
	}
	bool GetbIsEditorOnly() {
		return memory.read<bool>(m_addr + 57);
	}
	struct TArray<struct FDirectoryPath> GetDirectories() {
		return memory.read<struct TArray<struct FDirectoryPath>>(m_addr + 64);
	}
	struct TArray<struct FSoftObjectPath> GetSpecificAssets() {
		return memory.read<struct TArray<struct FSoftObjectPath>>(m_addr + 80);
	}
	struct FPrimaryAssetRules GetRules() {
		return memory.read<struct FPrimaryAssetRules>(m_addr + 96);
	}
	struct TArray<struct FString> GetAssetScanPaths() {
		return memory.read<struct TArray<struct FString>>(m_addr + 112);
	}
	bool GetbIsDynamicAsset() {
		return memory.read<bool>(m_addr + 128);
	}
	int32_t GetNumberOfAssets() {
		return memory.read<int32_t>(m_addr + 132);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetMaterials
{
public:
	FSetMaterials(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FSkeletalMaterial> GetInMaterials() {
		return memory.read<struct TArray<struct FSkeletalMaterial>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_ClearTimer
{
public:
	FK2_ClearTimer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FString GetFunctionName() {
		return memory.read<struct FString>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetOverlappingComponents
{
public:
	FGetOverlappingComponents(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct UPrimitiveComponent> GetOverlappingComponents() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct TArray<struct UPrimitiveComponent>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetCharacterArrayFromString
{
public:
	FGetCharacterArrayFromString(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetSourceString() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct TArray<struct FString> GetReturnValue() {
		return memory.read<struct TArray<struct FString>>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_GetTimerRemainingTimeDelegate
{
public:
	FK2_GetTimerRemainingTimeDelegate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDelegate GetDelegate() {
		return memory.read<struct FDelegate>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_GetTimerRemainingTimeHandle
{
public:
	FK2_GetTimerRemainingTimeHandle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FTimerHandle GetHandle() {
		return memory.read<struct FTimerHandle>(m_addr + 8);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FKey_IsModifierKey
{
public:
	FKey_IsModifierKey(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKey GetKey() {
		return memory.read<struct FKey>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FLocalSpacePose
{
public:
	FLocalSpacePose(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FTransform> GetTransforms() {
		return memory.read<struct TArray<struct FTransform>>(m_addr + 0);
	}
	struct TArray<struct FName> GetNames() {
		return memory.read<struct TArray<struct FName>>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FClientStopCameraShakesFromSource
{
public:
	FClientStopCameraShakesFromSource(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UCameraShakeSourceComponent GetSourceComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UCameraShakeSourceComponent(ptr_addr);
	}
	bool GetbImmediately() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FAbs
{
public:
	FAbs(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetA() {
		return memory.read<float>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_IsTimerActiveDelegate
{
public:
	FK2_IsTimerActiveDelegate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDelegate GetDelegate() {
		return memory.read<struct FDelegate>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetTableEntryMetaData
{
public:
	FGetTableEntryMetaData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetTableId() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FString GetKey() {
		return memory.read<struct FString>(m_addr + 8);
	}
	struct FName GetMetaDataId() {
		return memory.read<struct FName>(m_addr + 24);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FRightPad
{
public:
	FRightPad(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetSourceString() {
		return memory.read<struct FString>(m_addr + 0);
	}
	int32_t GetChCount() {
		return memory.read<int32_t>(m_addr + 16);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FEnableInput
{
public:
	FEnableInput(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APlayerController GetPlayerController() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APlayerController(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_IsTimerActiveHandle
{
public:
	FK2_IsTimerActiveHandle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FTimerHandle GetHandle() {
		return memory.read<struct FTimerHandle>(m_addr + 8);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetUpdateAnimationInEditor
{
public:
	FSetUpdateAnimationInEditor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetNewUpdateState() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_IsTimerPausedDelegate
{
public:
	FK2_IsTimerPausedDelegate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDelegate GetDelegate() {
		return memory.read<struct FDelegate>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FLessEqual_IntInt
{
public:
	FLessEqual_IntInt(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetA() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetB() {
		return memory.read<int32_t>(m_addr + 4);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetInstigatorController
{
public:
	FGetInstigatorController(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AController GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AController(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_IsValidTimerHandle
{
public:
	FK2_IsValidTimerHandle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTimerHandle GetHandle() {
		return memory.read<struct FTimerHandle>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FArray_Identical
{
public:
	FArray_Identical(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<int32_t> GetArrayA() {
		return memory.read<struct TArray<int32_t>>(m_addr + 0);
	}
	struct TArray<int32_t> GetArrayB() {
		return memory.read<struct TArray<int32_t>>(m_addr + 16);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FServerNotifyLoadedWorld
{
public:
	FServerNotifyLoadedWorld(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetWorldPackageName() {
		return memory.read<struct FName>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetAttachParent
{
public:
	FGetAttachParent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USceneComponent GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct USceneComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FNormalize2D
{
public:
	FNormalize2D(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector2D GetA() {
		return memory.read<struct FVector2D>(m_addr + 0);
	}
	float GetTolerance() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_PauseTimer
{
public:
	FK2_PauseTimer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FString GetFunctionName() {
		return memory.read<struct FString>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FXor_Int64Int64
{
public:
	FXor_Int64Int64(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int64_t GetA() {
		return memory.read<int64_t>(m_addr + 0);
	}
	int64_t GetB() {
		return memory.read<int64_t>(m_addr + 8);
	}
	int64_t GetReturnValue() {
		return memory.read<int64_t>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetVectorPropertyAtSplinePoint
{
public:
	FGetVectorPropertyAtSplinePoint(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct FName GetPropertyName() {
		return memory.read<struct FName>(m_addr + 4);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetInputTouchState
{
public:
	FGetInputTouchState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class ETouchIndex GetFingerIndex() {
		return memory.read<enum class ETouchIndex>(m_addr + 0);
	}
	float GetLocationX() {
		return memory.read<float>(m_addr + 4);
	}
	float GetLocationY() {
		return memory.read<float>(m_addr + 8);
	}
	bool GetbIsCurrentlyPressed() {
		return memory.read<bool>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_PauseTimerDelegate
{
public:
	FK2_PauseTimerDelegate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDelegate GetDelegate() {
		return memory.read<struct FDelegate>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetAnalogValue
{
public:
	FGetAnalogValue(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FAnalogInputEvent GetInput() {
		return memory.read<struct FAnalogInputEvent>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_PauseTimerHandle
{
public:
	FK2_PauseTimerHandle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FTimerHandle GetHandle() {
		return memory.read<struct FTimerHandle>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetDrawDebug
{
public:
	FSetDrawDebug(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbShow() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSphereTraceSingleForObjects
{
public:
	FSphereTraceSingleForObjects(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FVector GetStart() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	struct FVector GetEnd() {
		return memory.read<struct FVector>(m_addr + 20);
	}
	float GetRadius() {
		return memory.read<float>(m_addr + 32);
	}
	struct TArray<enum class EObjectTypeQuery> GetObjectTypes() {
		return memory.read<struct TArray<enum class EObjectTypeQuery>>(m_addr + 40);
	}
	bool GetbTraceComplex() {
		return memory.read<bool>(m_addr + 56);
	}
	struct TArray<struct AActor> GetActorsToIgnore() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 64);
		return struct TArray<struct AActor>(ptr_addr);
	}
	enum class EDrawDebugTrace GetDrawDebugType() {
		return memory.read<enum class EDrawDebugTrace>(m_addr + 80);
	}
	struct FHitResult GetOutHit() {
		return memory.read<struct FHitResult>(m_addr + 84);
	}
	bool GetbIgnoreSelf() {
		return memory.read<bool>(m_addr + 220);
	}
	struct FLinearColor GetTraceColor() {
		return memory.read<struct FLinearColor>(m_addr + 224);
	}
	struct FLinearColor GetTraceHitColor() {
		return memory.read<struct FLinearColor>(m_addr + 240);
	}
	float GetDrawTime() {
		return memory.read<float>(m_addr + 256);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 260);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_PostLogin
{
public:
	FK2_PostLogin(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APlayerController GetNewPlayer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APlayerController(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FBakedAnimationStateMachine
{
public:
	FBakedAnimationStateMachine(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetMachineName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	int32_t GetInitialState() {
		return memory.read<int32_t>(m_addr + 8);
	}
	struct TArray<struct FBakedAnimationState> GetStates() {
		return memory.read<struct TArray<struct FBakedAnimationState>>(m_addr + 16);
	}
	struct TArray<struct FAnimationTransitionBetweenStates> GetTransitions() {
		return memory.read<struct TArray<struct FAnimationTransitionBetweenStates>>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_TimerExistsHandle
{
public:
	FK2_TimerExistsHandle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FTimerHandle GetHandle() {
		return memory.read<struct FTimerHandle>(m_addr + 8);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FLeftPad
{
public:
	FLeftPad(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetSourceString() {
		return memory.read<struct FString>(m_addr + 0);
	}
	int32_t GetChCount() {
		return memory.read<int32_t>(m_addr + 16);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FSourceConfigDir
{
public:
	FSourceConfigDir(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FDrawRect
{
public:
	FDrawRect(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLinearColor GetRectColor() {
		return memory.read<struct FLinearColor>(m_addr + 0);
	}
	float GetScreenX() {
		return memory.read<float>(m_addr + 16);
	}
	float GetScreenY() {
		return memory.read<float>(m_addr + 20);
	}
	float GetScreenW() {
		return memory.read<float>(m_addr + 24);
	}
	float GetScreenH() {
		return memory.read<float>(m_addr + 28);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_DetachFromComponent
{
public:
	FK2_DetachFromComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class EDetachmentRule GetLocationRule() {
		return memory.read<enum class EDetachmentRule>(m_addr + 0);
	}
	enum class EDetachmentRule GetRotationRule() {
		return memory.read<enum class EDetachmentRule>(m_addr + 1);
	}
	enum class EDetachmentRule GetScaleRule() {
		return memory.read<enum class EDetachmentRule>(m_addr + 2);
	}
	bool GetbCallModify() {
		return memory.read<bool>(m_addr + 3);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetForcedLOD
{
public:
	FSetForcedLOD(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetInNewForcedLOD() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_UnPauseTimer
{
public:
	FK2_UnPauseTimer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FString GetFunctionName() {
		return memory.read<struct FString>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetCurrentMontage
{
public:
	FGetCurrentMontage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimMontage GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimMontage(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetOutlineStencilValue
{
public:
	FSetOutlineStencilValue(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_UnPauseTimerDelegate
{
public:
	FK2_UnPauseTimerDelegate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDelegate GetDelegate() {
		return memory.read<struct FDelegate>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetRefPosePosition
{
public:
	FGetRefPosePosition(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetBoneIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FSimulatedRootMotionReplicatedMove
{
public:
	FSimulatedRootMotionReplicatedMove(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetTime() {
		return memory.read<float>(m_addr + 0);
	}
	struct FRepRootMotionMontage GetRootMotion() {
		return memory.read<struct FRepRootMotionMontage>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_UnPauseTimerHandle
{
public:
	FK2_UnPauseTimerHandle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FTimerHandle GetHandle() {
		return memory.read<struct FTimerHandle>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FDefaultAudioBusSettings
{
public:
	FDefaultAudioBusSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FSoftObjectPath GetAudioBus() {
		return memory.read<struct FSoftObjectPath>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FLineTraceMultiByProfile
{
public:
	FLineTraceMultiByProfile(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FVector GetStart() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	struct FVector GetEnd() {
		return memory.read<struct FVector>(m_addr + 20);
	}
	struct FName GetProfileName() {
		return memory.read<struct FName>(m_addr + 32);
	}
	bool GetbTraceComplex() {
		return memory.read<bool>(m_addr + 40);
	}
	struct TArray<struct AActor> GetActorsToIgnore() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct TArray<struct AActor>(ptr_addr);
	}
	enum class EDrawDebugTrace GetDrawDebugType() {
		return memory.read<enum class EDrawDebugTrace>(m_addr + 64);
	}
	struct TArray<struct FHitResult> GetOutHits() {
		return memory.read<struct TArray<struct FHitResult>>(m_addr + 72);
	}
	bool GetbIgnoreSelf() {
		return memory.read<bool>(m_addr + 88);
	}
	struct FLinearColor GetTraceColor() {
		return memory.read<struct FLinearColor>(m_addr + 92);
	}
	struct FLinearColor GetTraceHitColor() {
		return memory.read<struct FLinearColor>(m_addr + 108);
	}
	float GetDrawTime() {
		return memory.read<float>(m_addr + 124);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 128);
	}

private:
	std::uint64_t m_addr = 0;
};class FBeginSpawningActorFromClass
{
public:
	FBeginSpawningActorFromClass(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	AActor GetActorClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return AActor(ptr_addr);
	}
	struct FTransform GetSpawnTransform() {
		return memory.read<struct FTransform>(m_addr + 16);
	}
	bool GetbNoCollisionFail() {
		return memory.read<bool>(m_addr + 64);
	}
	struct AActor GetOwner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return struct AActor(ptr_addr);
	}
	struct AActor GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 80);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FLineTraceMultiForObjects
{
public:
	FLineTraceMultiForObjects(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FVector GetStart() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	struct FVector GetEnd() {
		return memory.read<struct FVector>(m_addr + 20);
	}
	struct TArray<enum class EObjectTypeQuery> GetObjectTypes() {
		return memory.read<struct TArray<enum class EObjectTypeQuery>>(m_addr + 32);
	}
	bool GetbTraceComplex() {
		return memory.read<bool>(m_addr + 48);
	}
	struct TArray<struct AActor> GetActorsToIgnore() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct TArray<struct AActor>(ptr_addr);
	}
	enum class EDrawDebugTrace GetDrawDebugType() {
		return memory.read<enum class EDrawDebugTrace>(m_addr + 72);
	}
	struct TArray<struct FHitResult> GetOutHits() {
		return memory.read<struct TArray<struct FHitResult>>(m_addr + 80);
	}
	bool GetbIgnoreSelf() {
		return memory.read<bool>(m_addr + 96);
	}
	struct FLinearColor GetTraceColor() {
		return memory.read<struct FLinearColor>(m_addr + 100);
	}
	struct FLinearColor GetTraceHitColor() {
		return memory.read<struct FLinearColor>(m_addr + 116);
	}
	float GetDrawTime() {
		return memory.read<float>(m_addr + 132);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 136);
	}

private:
	std::uint64_t m_addr = 0;
};class FSpriteCategoryInfo
{
public:
	FSpriteCategoryInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetCategory() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FText GetDisplayName() {
		return memory.read<struct FText>(m_addr + 8);
	}
	struct FText GetDescription() {
		return memory.read<struct FText>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FLineTraceSingle
{
public:
	FLineTraceSingle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FVector GetStart() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	struct FVector GetEnd() {
		return memory.read<struct FVector>(m_addr + 20);
	}
	enum class ETraceTypeQuery GetTraceChannel() {
		return memory.read<enum class ETraceTypeQuery>(m_addr + 32);
	}
	bool GetbTraceComplex() {
		return memory.read<bool>(m_addr + 33);
	}
	struct TArray<struct AActor> GetActorsToIgnore() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct TArray<struct AActor>(ptr_addr);
	}
	enum class EDrawDebugTrace GetDrawDebugType() {
		return memory.read<enum class EDrawDebugTrace>(m_addr + 56);
	}
	struct FHitResult GetOutHit() {
		return memory.read<struct FHitResult>(m_addr + 60);
	}
	bool GetbIgnoreSelf() {
		return memory.read<bool>(m_addr + 196);
	}
	struct FLinearColor GetTraceColor() {
		return memory.read<struct FLinearColor>(m_addr + 200);
	}
	struct FLinearColor GetTraceHitColor() {
		return memory.read<struct FLinearColor>(m_addr + 216);
	}
	float GetDrawTime() {
		return memory.read<float>(m_addr + 232);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 236);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetUVRect
{
public:
	FGetUVRect(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FBox2D GetReturnValue() {
		return memory.read<struct FBox2D>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FLineTraceSingleByProfile
{
public:
	FLineTraceSingleByProfile(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FVector GetStart() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	struct FVector GetEnd() {
		return memory.read<struct FVector>(m_addr + 20);
	}
	struct FName GetProfileName() {
		return memory.read<struct FName>(m_addr + 32);
	}
	bool GetbTraceComplex() {
		return memory.read<bool>(m_addr + 40);
	}
	struct TArray<struct AActor> GetActorsToIgnore() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct TArray<struct AActor>(ptr_addr);
	}
	enum class EDrawDebugTrace GetDrawDebugType() {
		return memory.read<enum class EDrawDebugTrace>(m_addr + 64);
	}
	struct FHitResult GetOutHit() {
		return memory.read<struct FHitResult>(m_addr + 68);
	}
	bool GetbIgnoreSelf() {
		return memory.read<bool>(m_addr + 204);
	}
	struct FLinearColor GetTraceColor() {
		return memory.read<struct FLinearColor>(m_addr + 208);
	}
	struct FLinearColor GetTraceHitColor() {
		return memory.read<struct FLinearColor>(m_addr + 224);
	}
	float GetDrawTime() {
		return memory.read<float>(m_addr + 240);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 244);
	}

private:
	std::uint64_t m_addr = 0;
};class FLineTraceSingleForObjects
{
public:
	FLineTraceSingleForObjects(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FVector GetStart() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	struct FVector GetEnd() {
		return memory.read<struct FVector>(m_addr + 20);
	}
	struct TArray<enum class EObjectTypeQuery> GetObjectTypes() {
		return memory.read<struct TArray<enum class EObjectTypeQuery>>(m_addr + 32);
	}
	bool GetbTraceComplex() {
		return memory.read<bool>(m_addr + 48);
	}
	struct TArray<struct AActor> GetActorsToIgnore() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct TArray<struct AActor>(ptr_addr);
	}
	enum class EDrawDebugTrace GetDrawDebugType() {
		return memory.read<enum class EDrawDebugTrace>(m_addr + 72);
	}
	struct FHitResult GetOutHit() {
		return memory.read<struct FHitResult>(m_addr + 76);
	}
	bool GetbIgnoreSelf() {
		return memory.read<bool>(m_addr + 212);
	}
	struct FLinearColor GetTraceColor() {
		return memory.read<struct FLinearColor>(m_addr + 216);
	}
	struct FLinearColor GetTraceHitColor() {
		return memory.read<struct FLinearColor>(m_addr + 232);
	}
	float GetDrawTime() {
		return memory.read<float>(m_addr + 248);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 252);
	}

private:
	std::uint64_t m_addr = 0;
};class FDetachFromParent
{
public:
	FDetachFromParent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbMaintainWorldPosition() {
		return memory.read<bool>(m_addr + 0);
	}
	bool GetbCallModify() {
		return memory.read<bool>(m_addr + 1);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnAssetLoaded__DelegateSignature
{
public:
	FOnAssetLoaded__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetLoaded() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetDistanceScale
{
public:
	FSetDistanceScale(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewDistanceScale() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnAssetClassLoaded__DelegateSignature
{
public:
	FOnAssetClassLoaded__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UObject GetLoaded() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return UObject(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetControllerAnalogStickState
{
public:
	FGetControllerAnalogStickState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class EControllerAnalogStick GetWhichStick() {
		return memory.read<enum class EControllerAnalogStick>(m_addr + 0);
	}
	float GetStickX() {
		return memory.read<float>(m_addr + 4);
	}
	float GetStickY() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FStateMachineDebugData
{
public:
	FStateMachineDebugData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FEnableRecording
{
public:
	FEnableRecording(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbEnabled() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FFMax
{
public:
	FFMax(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetA() {
		return memory.read<float>(m_addr + 0);
	}
	float GetB() {
		return memory.read<float>(m_addr + 4);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FLoadClassAsset_Blocking
{
public:
	FLoadClassAsset_Blocking(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftClassPtr<UObject> GetAssetClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 0);
	}
	UObject GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return UObject(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetBoneRotationByName
{
public:
	FSetBoneRotationByName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FRotator GetInRotation() {
		return memory.read<struct FRotator>(m_addr + 8);
	}
	enum class EBoneSpaces GetBoneSpace() {
		return memory.read<enum class EBoneSpaces>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetBoneTransformByName
{
public:
	FGetBoneTransformByName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	enum class EBoneSpaces GetBoneSpace() {
		return memory.read<enum class EBoneSpaces>(m_addr + 8);
	}
	struct FTransform GetReturnValue() {
		return memory.read<struct FTransform>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FRepAttachment
{
public:
	FRepAttachment(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetAttachParent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}
	struct FVector_NetQuantize100 GetLocationOffset() {
		return memory.read<struct FVector_NetQuantize100>(m_addr + 8);
	}
	struct FVector_NetQuantize100 GetRelativeScale3D() {
		return memory.read<struct FVector_NetQuantize100>(m_addr + 20);
	}
	struct FRotator GetRotationOffset() {
		return memory.read<struct FRotator>(m_addr + 32);
	}
	struct FName GetAttachSocket() {
		return memory.read<struct FName>(m_addr + 44);
	}
	struct USceneComponent GetAttachComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct USceneComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FDrawToRenderTargetContext
{
public:
	FDrawToRenderTargetContext(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTextureRenderTarget2D GetRenderTarget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UTextureRenderTarget2D(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FMakeLiteralBool
{
public:
	FMakeLiteralBool(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetValue() {
		return memory.read<bool>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 1);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetSourceRadius
{
public:
	FSetSourceRadius(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetbNewValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FQuitGame
{
public:
	FQuitGame(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct APlayerController GetSpecificPlayer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct APlayerController(ptr_addr);
	}
	enum class EQuitPreference GetQuitPreference() {
		return memory.read<enum class EQuitPreference>(m_addr + 16);
	}
	bool GetbIgnorePlatformRestrictions() {
		return memory.read<bool>(m_addr + 17);
	}

private:
	std::uint64_t m_addr = 0;
};class FMakeLiteralByte
{
public:
	FMakeLiteralByte(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	char GetValue() {
		return memory.read<char>(m_addr + 0);
	}
	char GetReturnValue() {
		return memory.read<char>(m_addr + 1);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetRelevantAnimTimeRemainingFraction
{
public:
	FGetRelevantAnimTimeRemainingFraction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetMachineIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetStateIndex() {
		return memory.read<int32_t>(m_addr + 4);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FRepRootMotionMontage
{
public:
	FRepRootMotionMontage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbIsActive() {
		return memory.read<bool>(m_addr + 0);
	}
	struct UAnimMontage GetAnimMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UAnimMontage(ptr_addr);
	}
	float Getposition() {
		return memory.read<float>(m_addr + 16);
	}
	struct FVector_NetQuantize100 GetLocation() {
		return memory.read<struct FVector_NetQuantize100>(m_addr + 20);
	}
	struct FRotator GetRotation() {
		return memory.read<struct FRotator>(m_addr + 32);
	}
	struct UPrimitiveComponent GetMovementBase() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct UPrimitiveComponent(ptr_addr);
	}
	struct FName GetMovementBaseBoneName() {
		return memory.read<struct FName>(m_addr + 56);
	}
	bool GetbRelativePosition() {
		return memory.read<bool>(m_addr + 64);
	}
	bool GetbRelativeRotation() {
		return memory.read<bool>(m_addr + 65);
	}
	struct FRootMotionSourceGroup GetAuthoritativeRootMotion() {
		return memory.read<struct FRootMotionSourceGroup>(m_addr + 72);
	}
	struct FVector_NetQuantize10 GetAcceleration() {
		return memory.read<struct FVector_NetQuantize10>(m_addr + 128);
	}
	struct FVector_NetQuantize10 GetLinearVelocity() {
		return memory.read<struct FVector_NetQuantize10>(m_addr + 140);
	}

private:
	std::uint64_t m_addr = 0;
};class FDivide_Int64Int64
{
public:
	FDivide_Int64Int64(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int64_t GetA() {
		return memory.read<int64_t>(m_addr + 0);
	}
	int64_t GetB() {
		return memory.read<int64_t>(m_addr + 8);
	}
	int64_t GetReturnValue() {
		return memory.read<int64_t>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnSubmixSpectralAnalysis__DelegateSignature
{
public:
	FOnSubmixSpectralAnalysis__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<float> GetMagnitudes() {
		return memory.read<struct TArray<float>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetAllMotorsAngularPositionDrive
{
public:
	FSetAllMotorsAngularPositionDrive(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbEnableSwingDrive() {
		return memory.read<bool>(m_addr + 0);
	}
	bool GetbEnableTwistDrive() {
		return memory.read<bool>(m_addr + 1);
	}
	bool GetbSkipCustomPhysicsType() {
		return memory.read<bool>(m_addr + 2);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetGameTimeSinceCreation
{
public:
	FGetGameTimeSinceCreation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FMakeLiteralInt
{
public:
	FMakeLiteralInt(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetValue() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FBlueprintMacroCosmeticInfo
{
public:
	FBlueprintMacroCosmeticInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FMakeLiteralName
{
public:
	FMakeLiteralName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetValue() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FName GetReturnValue() {
		return memory.read<struct FName>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FClearSoundMixClassOverride
{
public:
	FClearSoundMixClassOverride(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct USoundMix GetInSoundMixModifier() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct USoundMix(ptr_addr);
	}
	struct USoundClass GetInSoundClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct USoundClass(ptr_addr);
	}
	float GetFadeOutTime() {
		return memory.read<float>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FAudioQualitySettings
{
public:
	FAudioQualitySettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetDisplayName() {
		return memory.read<struct FText>(m_addr + 0);
	}
	int32_t GetMaxChannels() {
		return memory.read<int32_t>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FUserActivity
{
public:
	FUserActivity(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetActionName() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FMakeLiteralString
{
public:
	FMakeLiteralString(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetValue() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetSourceHeight
{
public:
	FSetSourceHeight(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FMakeLiteralText
{
public:
	FMakeLiteralText(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetValue() {
		return memory.read<struct FText>(m_addr + 0);
	}
	struct FText GetReturnValue() {
		return memory.read<struct FText>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FAddTorqueInDegrees
{
public:
	FAddTorqueInDegrees(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetTorque() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 12);
	}
	bool GetbAccelChange() {
		return memory.read<bool>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FInputActionKeyMapping
{
public:
	FInputActionKeyMapping(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetActionName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	char GetbShift() {
		return memory.read<char>(m_addr + 8);
	}
	char GetbCtrl() {
		return memory.read<char>(m_addr + 8);
	}
	char GetbAlt() {
		return memory.read<char>(m_addr + 8);
	}
	char GetbCmd() {
		return memory.read<char>(m_addr + 8);
	}
	struct FKey GetKey() {
		return memory.read<struct FKey>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FClientGotoState
{
public:
	FClientGotoState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetNewState() {
		return memory.read<struct FName>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetAffectGlobalIllumination
{
public:
	FSetAffectGlobalIllumination(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbNewValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FStreamLevelIn
{
public:
	FStreamLevelIn(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetPackageName() {
		return memory.read<struct FName>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FMakeSoftClassPath
{
public:
	FMakeSoftClassPath(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetPathString() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FSoftClassPath GetReturnValue() {
		return memory.read<struct FSoftClassPath>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FPreviewAssetAttachContainer
{
public:
	FPreviewAssetAttachContainer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FPreviewAttachedObjectPair> GetAttachedObjects() {
		return memory.read<struct TArray<struct FPreviewAttachedObjectPair>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetMin2D
{
public:
	FGetMin2D(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector2D GetA() {
		return memory.read<struct FVector2D>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_AttachRootComponentToActor
{
public:
	FK2_AttachRootComponentToActor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetInParentActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}
	struct FName GetInSocketName() {
		return memory.read<struct FName>(m_addr + 8);
	}
	enum class EAttachLocation GetAttachLocationType() {
		return memory.read<enum class EAttachLocation>(m_addr + 16);
	}
	bool GetbWeldSimulatedBodies() {
		return memory.read<bool>(m_addr + 17);
	}

private:
	std::uint64_t m_addr = 0;
};class FMakeSoftObjectPath
{
public:
	FMakeSoftObjectPath(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetPathString() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FSoftObjectPath GetReturnValue() {
		return memory.read<struct FSoftObjectPath>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FBodyInstance
{
public:
	FBodyInstance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class ECollisionChannel GetObjectType() {
		return memory.read<enum class ECollisionChannel>(m_addr + 30);
	}
	enum class ECollisionEnabled GetCollisionEnabled() {
		return memory.read<enum class ECollisionEnabled>(m_addr + 32);
	}
	enum class ESleepFamily GetSleepFamily() {
		return memory.read<enum class ESleepFamily>(m_addr + 89);
	}
	enum class EDOFMode GetDOFMode() {
		return memory.read<enum class EDOFMode>(m_addr + 90);
	}
	char GetbUseCCD() {
		return memory.read<char>(m_addr + 91);
	}
	char GetbIgnoreAnalyticCollisions() {
		return memory.read<char>(m_addr + 91);
	}
	char GetbNotifyRigidBodyCollision() {
		return memory.read<char>(m_addr + 91);
	}
	char GetbLockTranslation() {
		return memory.read<char>(m_addr + 91);
	}
	char GetbLockRotation() {
		return memory.read<char>(m_addr + 91);
	}
	char GetbLockXTranslation() {
		return memory.read<char>(m_addr + 91);
	}
	char GetbLockYTranslation() {
		return memory.read<char>(m_addr + 91);
	}
	char GetbLockZTranslation() {
		return memory.read<char>(m_addr + 92);
	}
	char GetbLockXRotation() {
		return memory.read<char>(m_addr + 92);
	}
	char GetbLockYRotation() {
		return memory.read<char>(m_addr + 92);
	}
	char GetbLockZRotation() {
		return memory.read<char>(m_addr + 92);
	}
	char GetbOverrideMaxAngularVelocity() {
		return memory.read<char>(m_addr + 92);
	}
	char GetbOverrideMaxDepenetrationVelocity() {
		return memory.read<char>(m_addr + 92);
	}
	char GetbOverrideWalkableSlopeOnInstance() {
		return memory.read<char>(m_addr + 93);
	}
	char GetbInterpolateWhenSubStepping() {
		return memory.read<char>(m_addr + 93);
	}
	struct FName GetCollisionProfileName() {
		return memory.read<struct FName>(m_addr + 108);
	}
	char GetPositionSolverIterationCount() {
		return memory.read<char>(m_addr + 116);
	}
	char GetVelocitySolverIterationCount() {
		return memory.read<char>(m_addr + 117);
	}
	struct FCollisionResponse GetCollisionResponses() {
		return memory.read<struct FCollisionResponse>(m_addr + 120);
	}
	float GetMaxDepenetrationVelocity() {
		return memory.read<float>(m_addr + 168);
	}
	float GetMassInKgOverride() {
		return memory.read<float>(m_addr + 172);
	}
	float GetLinearDamping() {
		return memory.read<float>(m_addr + 184);
	}
	float GetAngularDamping() {
		return memory.read<float>(m_addr + 188);
	}
	struct FVector GetCustomDOFPlaneNormal() {
		return memory.read<struct FVector>(m_addr + 192);
	}
	struct FVector GetCOMNudge() {
		return memory.read<struct FVector>(m_addr + 204);
	}
	float GetMassScale() {
		return memory.read<float>(m_addr + 216);
	}
	struct FVector GetInertiaTensorScale() {
		return memory.read<struct FVector>(m_addr + 220);
	}
	struct FWalkableSlopeOverride GetWalkableSlopeOverride() {
		return memory.read<struct FWalkableSlopeOverride>(m_addr + 248);
	}
	struct UPhysicalMaterial GetPhysMaterialOverride() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 264);
		return struct UPhysicalMaterial(ptr_addr);
	}
	float GetMaxAngularVelocity() {
		return memory.read<float>(m_addr + 272);
	}
	float GetCustomSleepThresholdMultiplier() {
		return memory.read<float>(m_addr + 276);
	}
	float GetStabilizationThresholdMultiplier() {
		return memory.read<float>(m_addr + 280);
	}
	float GetPhysicsBlendWeight() {
		return memory.read<float>(m_addr + 284);
	}

private:
	std::uint64_t m_addr = 0;
};class FNormalizeFilename
{
public:
	FNormalizeFilename(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetInPath() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FString GetOutPath() {
		return memory.read<struct FString>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetControllerMouseDelta
{
public:
	FGetControllerMouseDelta(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetDeltaX() {
		return memory.read<float>(m_addr + 0);
	}
	float GetDeltaY() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FNotEqual_PrimaryAssetId
{
public:
	FNotEqual_PrimaryAssetId(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FPrimaryAssetId GetA() {
		return memory.read<struct FPrimaryAssetId>(m_addr + 0);
	}
	struct FPrimaryAssetId GetB() {
		return memory.read<struct FPrimaryAssetId>(m_addr + 16);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetSkeleton
{
public:
	FGetSkeleton(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USkeleton GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct USkeleton(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetAttachParentSocketName
{
public:
	FGetAttachParentSocketName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetReturnValue() {
		return memory.read<struct FName>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FLightmassLightSettings
{
public:
	FLightmassLightSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetIndirectLightingSaturation() {
		return memory.read<float>(m_addr + 0);
	}
	float GetShadowExponent() {
		return memory.read<float>(m_addr + 4);
	}
	bool GetbUseAreaShadowsForStationaryLight() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetOverlayMaterial
{
public:
	FGetOverlayMaterial(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetElementIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetOverlayIndex() {
		return memory.read<int32_t>(m_addr + 4);
	}
	struct UMaterialInterface GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UMaterialInterface(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FDoesSocketExist
{
public:
	FDoesSocketExist(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetInSocketName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FInvertAxis
{
public:
	FInvertAxis(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetAxisName() {
		return memory.read<struct FName>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FAnimNotifyTrack
{
public:
	FAnimNotifyTrack(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetTrackName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FLinearColor GetTrackColor() {
		return memory.read<struct FLinearColor>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsAnyMontagePlaying
{
public:
	FIsAnyMontagePlaying(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetVolumeButtonsHandledBySystem
{
public:
	FSetVolumeButtonsHandledBySystem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbEnabled() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FBatchedLine
{
public:
	FBatchedLine(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetStart() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetEnd() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	struct FLinearColor GetColor() {
		return memory.read<struct FLinearColor>(m_addr + 24);
	}
	float GetThickness() {
		return memory.read<float>(m_addr + 40);
	}
	float GetRemainingLifeTime() {
		return memory.read<float>(m_addr + 44);
	}
	char GetDepthPriority() {
		return memory.read<char>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};class FClientMoveResponsePacked
{
public:
	FClientMoveResponsePacked(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FCharacterMoveResponsePackedBits GetPackedBits() {
		return memory.read<struct FCharacterMoveResponsePackedBits>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FNotEqual_SoftClassReference
{
public:
	FNotEqual_SoftClassReference(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftClassPtr<UObject> GetA() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 0);
	}
	struct TSoftClassPtr<UObject> GetB() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 40);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 80);
	}

private:
	std::uint64_t m_addr = 0;
};class FPrintText
{
public:
	FPrintText(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FText GetInText() {
		return memory.read<struct FText>(m_addr + 8);
	}
	bool GetbPrintToScreen() {
		return memory.read<bool>(m_addr + 32);
	}
	bool GetbPrintToLog() {
		return memory.read<bool>(m_addr + 33);
	}
	struct FLinearColor GetTextColor() {
		return memory.read<struct FLinearColor>(m_addr + 36);
	}
	float GetDuration() {
		return memory.read<float>(m_addr + 52);
	}

private:
	std::uint64_t m_addr = 0;
};class FLevelViewportInfo
{
public:
	FLevelViewportInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetCamPosition() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FRotator GetCamRotation() {
		return memory.read<struct FRotator>(m_addr + 12);
	}
	float GetCamOrthoZoom() {
		return memory.read<float>(m_addr + 24);
	}
	bool GetCamUpdated() {
		return memory.read<bool>(m_addr + 28);
	}

private:
	std::uint64_t m_addr = 0;
};class FCompositeSection
{
public:
	FCompositeSection(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetSectionName() {
		return memory.read<struct FName>(m_addr + 48);
	}
	float GetStartTime() {
		return memory.read<float>(m_addr + 56);
	}
	struct FName GetNextSectionName() {
		return memory.read<struct FName>(m_addr + 60);
	}
	struct TArray<struct UAnimMetaData> GetMetaData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return struct TArray<struct UAnimMetaData>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FPrintWarning
{
public:
	FPrintWarning(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetinString() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FDaysInYear
{
public:
	FDaysInYear(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetYear() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FAnimTickRecord
{
public:
	FAnimTickRecord(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimationAsset GetSourceAsset() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimationAsset(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetLocalLocationAndTangentAtSplinePoint
{
public:
	FGetLocalLocationAndTangentAtSplinePoint(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetPointIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct FVector GetLocalLocation() {
		return memory.read<struct FVector>(m_addr + 4);
	}
	struct FVector GetLocalTangent() {
		return memory.read<struct FVector>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FRetriggerableDelay
{
public:
	FRetriggerableDelay(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	float GetDuration() {
		return memory.read<float>(m_addr + 8);
	}
	struct FLatentActionInfo GetLatentInfo() {
		return memory.read<struct FLatentActionInfo>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FVector_GetProjection
{
public:
	FVector_GetProjection(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetA() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetBoolPropertyByName
{
public:
	FSetBoolPropertyByName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FName GetPropertyName() {
		return memory.read<struct FName>(m_addr + 8);
	}
	bool GetValue() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FCustomAttribute
{
public:
	FCustomAttribute(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	int32_t GetVariantType() {
		return memory.read<int32_t>(m_addr + 8);
	}
	struct TArray<float> GetTimes() {
		return memory.read<struct TArray<float>>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetBytePropertyByName
{
public:
	FSetBytePropertyByName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FName GetPropertyName() {
		return memory.read<struct FName>(m_addr + 8);
	}
	char GetValue() {
		return memory.read<char>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FReceived_Notify
{
public:
	FReceived_Notify(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USkeletalMeshComponent GetMeshComp() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct USkeletalMeshComponent(ptr_addr);
	}
	struct UAnimSequenceBase GetAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UAnimSequenceBase(ptr_addr);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetCollisionProfileNameProperty
{
public:
	FSetCollisionProfileNameProperty(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FName GetPropertyName() {
		return memory.read<struct FName>(m_addr + 8);
	}
	struct FCollisionProfileName GetValue() {
		return memory.read<struct FCollisionProfileName>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FEditorElement
{
public:
	FEditorElement(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetIndices[3]() {
		return memory.read<int32_t>(m_addr + 0);
	}
	float GetWeights[3]() {
		return memory.read<float>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FAreSubtitlesEnabled
{
public:
	FAreSubtitlesEnabled(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCollisionProfileName
{
public:
	FCollisionProfileName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetName() {
		return memory.read<struct FName>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FMaterialParameterCollectionInfo
{
public:
	FMaterialParameterCollectionInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FGuid GetStateId() {
		return memory.read<struct FGuid>(m_addr + 0);
	}
	struct UMaterialParameterCollection GetParameterCollection() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UMaterialParameterCollection(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FPerPlatformFloat
{
public:
	FPerPlatformFloat(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetDefault() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FTransformRotation
{
public:
	FTransformRotation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTransform GetT() {
		return memory.read<struct FTransform>(m_addr + 0);
	}
	struct FRotator GetRotation() {
		return memory.read<struct FRotator>(m_addr + 48);
	}
	struct FRotator GetReturnValue() {
		return memory.read<struct FRotator>(m_addr + 60);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetActorScale3D
{
public:
	FSetActorScale3D(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetNewScale3D() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FBlueprintInputTouchDelegateBinding
{
public:
	FBlueprintInputTouchDelegateBinding(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class EInputEvent GetInputKeyEvent() {
		return memory.read<enum class EInputEvent>(m_addr + 4);
	}
	struct FName GetFunctionNameToBind() {
		return memory.read<struct FName>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSimpleCurveKey
{
public:
	FSimpleCurveKey(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetTime() {
		return memory.read<float>(m_addr + 0);
	}
	float GetValue() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetFieldPathPropertyByName
{
public:
	FSetFieldPathPropertyByName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FName GetPropertyName() {
		return memory.read<struct FName>(m_addr + 8);
	}
	struct TFieldPath<FNone> GetValue() {
		return memory.read<struct TFieldPath<FNone>>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetStringAttribute_Ref
{
public:
	FGetStringAttribute_Ref(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FName GetAttributeName() {
		return memory.read<struct FName>(m_addr + 8);
	}
	struct FString GetOutValue() {
		return memory.read<struct FString>(m_addr + 16);
	}
	enum class ECustomBoneAttributeLookup GetLookupType() {
		return memory.read<enum class ECustomBoneAttributeLookup>(m_addr + 32);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 33);
	}

private:
	std::uint64_t m_addr = 0;
};class FImportFactorySettingValues
{
public:
	FImportFactorySettingValues(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetSettingName() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FString GetValue() {
		return memory.read<struct FString>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetShouldUpdatePhysicsVolume
{
public:
	FGetShouldUpdatePhysicsVolume(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FScheduleLocalNotificationAtTime
{
public:
	FScheduleLocalNotificationAtTime(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDateTime GetFireDateTime() {
		return memory.read<struct FDateTime>(m_addr + 0);
	}
	bool GetLocalTime() {
		return memory.read<bool>(m_addr + 8);
	}
	struct FText GetTitle() {
		return memory.read<struct FText>(m_addr + 16);
	}
	struct FText GetBody() {
		return memory.read<struct FText>(m_addr + 40);
	}
	struct FText GetAction() {
		return memory.read<struct FText>(m_addr + 64);
	}
	struct FString GetActivationEvent() {
		return memory.read<struct FString>(m_addr + 88);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 104);
	}

private:
	std::uint64_t m_addr = 0;
};class FInertializationBoneDiff
{
public:
	FInertializationBoneDiff(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FSetFloatPropertyByName
{
public:
	FSetFloatPropertyByName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FName GetPropertyName() {
		return memory.read<struct FName>(m_addr + 8);
	}
	float GetValue() {
		return memory.read<float>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetPlayerRespawnDelay
{
public:
	FGetPlayerRespawnDelay(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AController GetController() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AController(ptr_addr);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FResponseChannel
{
public:
	FResponseChannel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetChannel() {
		return memory.read<struct FName>(m_addr + 0);
	}
	enum class ECollisionResponse GetResponse() {
		return memory.read<enum class ECollisionResponse>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetGamepadsBlockDeviceFeedback
{
public:
	FSetGamepadsBlockDeviceFeedback(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbBlock() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FQuartzPulseOverrideStep
{
public:
	FQuartzPulseOverrideStep(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetNumberOfPulses() {
		return memory.read<int32_t>(m_addr + 0);
	}
	enum class EQuartzCommandQuantization GetPulseDuration() {
		return memory.read<enum class EQuartzCommandQuantization>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetInt64PropertyByName
{
public:
	FSetInt64PropertyByName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FName GetPropertyName() {
		return memory.read<struct FName>(m_addr + 8);
	}
	int64_t GetValue() {
		return memory.read<int64_t>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FMoveForward
{
public:
	FMoveForward(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetVal() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetInterfacePropertyByName
{
public:
	FSetInterfacePropertyByName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FName GetPropertyName() {
		return memory.read<struct FName>(m_addr + 8);
	}
	struct TScriptInterface<IInterface> GetValue() {
		return memory.read<struct TScriptInterface<IInterface>>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetTangentsAtSplinePoint
{
public:
	FSetTangentsAtSplinePoint(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetPointIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct FVector GetInArriveTangent() {
		return memory.read<struct FVector>(m_addr + 4);
	}
	struct FVector GetInLeaveTangent() {
		return memory.read<struct FVector>(m_addr + 16);
	}
	enum class ESplineCoordinateSpace GetCoordinateSpace() {
		return memory.read<enum class ESplineCoordinateSpace>(m_addr + 28);
	}
	bool GetbUpdateSpline() {
		return memory.read<bool>(m_addr + 29);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetLevelScriptActor
{
public:
	FGetLevelScriptActor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ALevelScriptActor GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct ALevelScriptActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsVisible
{
public:
	FIsVisible(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCachedAnimStateData
{
public:
	FCachedAnimStateData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetStateMachineName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FName GetStateName() {
		return memory.read<struct FName>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetEnableGravityOnAllBodiesBelow
{
public:
	FSetEnableGravityOnAllBodiesBelow(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbEnableGravity() {
		return memory.read<bool>(m_addr + 0);
	}
	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 4);
	}
	bool GetbIncludeSelf() {
		return memory.read<bool>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetIntPropertyByName
{
public:
	FSetIntPropertyByName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FName GetPropertyName() {
		return memory.read<struct FName>(m_addr + 8);
	}
	int32_t GetValue() {
		return memory.read<int32_t>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FUnlinkAnimClassLayers
{
public:
	FUnlinkAnimClassLayers(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UAnimInstance GetInClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return UAnimInstance(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetLinearColorPropertyByName
{
public:
	FSetLinearColorPropertyByName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FName GetPropertyName() {
		return memory.read<struct FName>(m_addr + 8);
	}
	struct FLinearColor GetValue() {
		return memory.read<struct FLinearColor>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FDeproject
{
public:
	FDeproject(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetScreenX() {
		return memory.read<float>(m_addr + 0);
	}
	float GetScreenY() {
		return memory.read<float>(m_addr + 4);
	}
	struct FVector GetWorldPosition() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	struct FVector GetWorldDirection() {
		return memory.read<struct FVector>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FAnimCurveType
{
public:
	FAnimCurveType(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FTimeStretchCurveInstance
{
public:
	FTimeStretchCurveInstance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbHasValidData() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetNamePropertyByName
{
public:
	FSetNamePropertyByName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FName GetPropertyName() {
		return memory.read<struct FName>(m_addr + 8);
	}
	struct FName GetValue() {
		return memory.read<struct FName>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetDisableHaptics
{
public:
	FSetDisableHaptics(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbNewDisabled() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FBuildString_Bool
{
public:
	FBuildString_Bool(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetAppendTo() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FString GetPrefix() {
		return memory.read<struct FString>(m_addr + 16);
	}
	bool GetInBool() {
		return memory.read<bool>(m_addr + 32);
	}
	struct FString GetSuffix() {
		return memory.read<struct FString>(m_addr + 40);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};class FDirectoryPath
{
public:
	FDirectoryPath(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetPath() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetMaterials
{
public:
	FGetMaterials(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FSkeletalMaterial> GetReturnValue() {
		return memory.read<struct TArray<struct FSkeletalMaterial>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetVertexColorOverride_LinearColor
{
public:
	FSetVertexColorOverride_LinearColor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetLODIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct TArray<struct FLinearColor> GetVertexColors() {
		return memory.read<struct TArray<struct FLinearColor>>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetBoneScaleByName
{
public:
	FSetBoneScaleByName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FVector GetInScale3D() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	enum class EBoneSpaces GetBoneSpace() {
		return memory.read<enum class EBoneSpaces>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetSoftObjectPropertyByName
{
public:
	FSetSoftObjectPropertyByName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FName GetPropertyName() {
		return memory.read<struct FName>(m_addr + 8);
	}
	struct TSoftObjectPtr<UObject> GetValue() {
		return memory.read<struct TSoftObjectPtr<UObject>>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetDesiredRotation
{
public:
	FGetDesiredRotation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRotator GetReturnValue() {
		return memory.read<struct FRotator>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetStringPropertyByName
{
public:
	FSetStringPropertyByName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FName GetPropertyName() {
		return memory.read<struct FName>(m_addr + 8);
	}
	struct FString GetValue() {
		return memory.read<struct FString>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FCreateNamedDynamicMaterialInstance
{
public:
	FCreateNamedDynamicMaterialInstance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetInName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct UMaterialInterface GetSourceMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UMaterialInterface(ptr_addr);
	}
	struct UMaterialInstanceDynamic GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UMaterialInstanceDynamic(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_SetRelativeRotation
{
public:
	FK2_SetRelativeRotation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRotator GetNewRotation() {
		return memory.read<struct FRotator>(m_addr + 0);
	}
	bool GetbSweep() {
		return memory.read<bool>(m_addr + 12);
	}
	struct FHitResult GetSweepHitResult() {
		return memory.read<struct FHitResult>(m_addr + 16);
	}
	bool GetbTeleport() {
		return memory.read<bool>(m_addr + 152);
	}

private:
	std::uint64_t m_addr = 0;
};class FGenericStruct
{
public:
	FGenericStruct(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetData() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetPriority
{
public:
	FGetPriority(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetTextPropertyByName
{
public:
	FSetTextPropertyByName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FName GetPropertyName() {
		return memory.read<struct FName>(m_addr + 8);
	}
	struct FText GetValue() {
		return memory.read<struct FText>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetPlayRate
{
public:
	FGetPlayRate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_SetWorldRotation
{
public:
	FK2_SetWorldRotation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRotator GetNewRotation() {
		return memory.read<struct FRotator>(m_addr + 0);
	}
	bool GetbSweep() {
		return memory.read<bool>(m_addr + 12);
	}
	struct FHitResult GetSweepHitResult() {
		return memory.read<struct FHitResult>(m_addr + 16);
	}
	bool GetbTeleport() {
		return memory.read<bool>(m_addr + 152);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetVectorPropertyByName
{
public:
	FSetVectorPropertyByName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FName GetPropertyName() {
		return memory.read<struct FName>(m_addr + 8);
	}
	struct FVector GetValue() {
		return memory.read<struct FVector>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FResetVectorSpringState
{
public:
	FResetVectorSpringState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVectorSpringState GetSpringState() {
		return memory.read<struct FVectorSpringState>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FMultiply_RotatorFloat
{
public:
	FMultiply_RotatorFloat(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRotator GetA() {
		return memory.read<struct FRotator>(m_addr + 0);
	}
	float GetB() {
		return memory.read<float>(m_addr + 12);
	}
	struct FRotator GetReturnValue() {
		return memory.read<struct FRotator>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetFloatAttribute_Ref
{
public:
	FGetFloatAttribute_Ref(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FName GetAttributeName() {
		return memory.read<struct FName>(m_addr + 8);
	}
	float GetOutValue() {
		return memory.read<float>(m_addr + 16);
	}
	enum class ECustomBoneAttributeLookup GetLookupType() {
		return memory.read<enum class ECustomBoneAttributeLookup>(m_addr + 20);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 21);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetVerticalDistanceTo
{
public:
	FGetVerticalDistanceTo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetOtherActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FMaterialParameterInfo
{
public:
	FMaterialParameterInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	enum class EMaterialParameterAssociation GetAssociation() {
		return memory.read<enum class EMaterialParameterAssociation>(m_addr + 8);
	}
	int32_t GetIndex() {
		return memory.read<int32_t>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FReceivePossessed
{
public:
	FReceivePossessed(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AController GetNewController() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AController(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FShowAdBanner
{
public:
	FShowAdBanner(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetAdIdIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	bool GetbShowOnBottomOfScreen() {
		return memory.read<bool>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetVertSpacingAdjust
{
public:
	FSetVertSpacingAdjust(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FShowPlatformSpecificLeaderboardScreen
{
public:
	FShowPlatformSpecificLeaderboardScreen(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetCategoryName() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FFindLookAtRotation
{
public:
	FFindLookAtRotation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetStart() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetTarget() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	struct FRotator GetReturnValue() {
		return memory.read<struct FRotator>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FAlphaBlend
{
public:
	FAlphaBlend(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UCurveFloat GetCustomCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UCurveFloat(ptr_addr);
	}
	float GetBlendTime() {
		return memory.read<float>(m_addr + 8);
	}
	enum class EAlphaBlendOption GetBlendOption() {
		return memory.read<enum class EAlphaBlendOption>(m_addr + 36);
	}

private:
	std::uint64_t m_addr = 0;
};class FChangeExtension
{
public:
	FChangeExtension(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetInPath() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FString GetInNewExtension() {
		return memory.read<struct FString>(m_addr + 16);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FUnHideBoneByName
{
public:
	FUnHideBoneByName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSnapshotObject
{
public:
	FSnapshotObject(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSphereOverlapActors
{
public:
	FSphereOverlapActors(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FVector GetSpherePos() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	float GetSphereRadius() {
		return memory.read<float>(m_addr + 20);
	}
	struct TArray<enum class EObjectTypeQuery> GetObjectTypes() {
		return memory.read<struct TArray<enum class EObjectTypeQuery>>(m_addr + 24);
	}
	UObject GetActorClassFilter() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return UObject(ptr_addr);
	}
	struct TArray<struct AActor> GetActorsToIgnore() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct TArray<struct AActor>(ptr_addr);
	}
	struct TArray<struct AActor> GetOutActors() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 64);
		return struct TArray<struct AActor>(ptr_addr);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 80);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetDistanceAlongSplineAtSplinePoint
{
public:
	FGetDistanceAlongSplineAtSplinePoint(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetPointIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FSphereTraceMulti
{
public:
	FSphereTraceMulti(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FVector GetStart() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	struct FVector GetEnd() {
		return memory.read<struct FVector>(m_addr + 20);
	}
	float GetRadius() {
		return memory.read<float>(m_addr + 32);
	}
	enum class ETraceTypeQuery GetTraceChannel() {
		return memory.read<enum class ETraceTypeQuery>(m_addr + 36);
	}
	bool GetbTraceComplex() {
		return memory.read<bool>(m_addr + 37);
	}
	struct TArray<struct AActor> GetActorsToIgnore() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct TArray<struct AActor>(ptr_addr);
	}
	enum class EDrawDebugTrace GetDrawDebugType() {
		return memory.read<enum class EDrawDebugTrace>(m_addr + 56);
	}
	struct TArray<struct FHitResult> GetOutHits() {
		return memory.read<struct TArray<struct FHitResult>>(m_addr + 64);
	}
	bool GetbIgnoreSelf() {
		return memory.read<bool>(m_addr + 80);
	}
	struct FLinearColor GetTraceColor() {
		return memory.read<struct FLinearColor>(m_addr + 84);
	}
	struct FLinearColor GetTraceHitColor() {
		return memory.read<struct FLinearColor>(m_addr + 100);
	}
	float GetDrawTime() {
		return memory.read<float>(m_addr + 116);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 120);
	}

private:
	std::uint64_t m_addr = 0;
};class FSphereTraceMultiForObjects
{
public:
	FSphereTraceMultiForObjects(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FVector GetStart() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	struct FVector GetEnd() {
		return memory.read<struct FVector>(m_addr + 20);
	}
	float GetRadius() {
		return memory.read<float>(m_addr + 32);
	}
	struct TArray<enum class EObjectTypeQuery> GetObjectTypes() {
		return memory.read<struct TArray<enum class EObjectTypeQuery>>(m_addr + 40);
	}
	bool GetbTraceComplex() {
		return memory.read<bool>(m_addr + 56);
	}
	struct TArray<struct AActor> GetActorsToIgnore() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 64);
		return struct TArray<struct AActor>(ptr_addr);
	}
	enum class EDrawDebugTrace GetDrawDebugType() {
		return memory.read<enum class EDrawDebugTrace>(m_addr + 80);
	}
	struct TArray<struct FHitResult> GetOutHits() {
		return memory.read<struct TArray<struct FHitResult>>(m_addr + 88);
	}
	bool GetbIgnoreSelf() {
		return memory.read<bool>(m_addr + 104);
	}
	struct FLinearColor GetTraceColor() {
		return memory.read<struct FLinearColor>(m_addr + 108);
	}
	struct FLinearColor GetTraceHitColor() {
		return memory.read<struct FLinearColor>(m_addr + 124);
	}
	float GetDrawTime() {
		return memory.read<float>(m_addr + 140);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 144);
	}

private:
	std::uint64_t m_addr = 0;
};class FAddTorqueInRadians
{
public:
	FAddTorqueInRadians(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetTorque() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 12);
	}
	bool GetbAccelChange() {
		return memory.read<bool>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FFindRotationClosestToWorldLocation
{
public:
	FFindRotationClosestToWorldLocation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetWorldLocation() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	enum class ESplineCoordinateSpace GetCoordinateSpace() {
		return memory.read<enum class ESplineCoordinateSpace>(m_addr + 12);
	}
	struct FRotator GetReturnValue() {
		return memory.read<struct FRotator>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FConv_Vector2dToString
{
public:
	FConv_Vector2dToString(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector2D GetInVec() {
		return memory.read<struct FVector2D>(m_addr + 0);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSphereTraceSingleByProfile
{
public:
	FSphereTraceSingleByProfile(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FVector GetStart() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	struct FVector GetEnd() {
		return memory.read<struct FVector>(m_addr + 20);
	}
	float GetRadius() {
		return memory.read<float>(m_addr + 32);
	}
	struct FName GetProfileName() {
		return memory.read<struct FName>(m_addr + 36);
	}
	bool GetbTraceComplex() {
		return memory.read<bool>(m_addr + 44);
	}
	struct TArray<struct AActor> GetActorsToIgnore() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct TArray<struct AActor>(ptr_addr);
	}
	enum class EDrawDebugTrace GetDrawDebugType() {
		return memory.read<enum class EDrawDebugTrace>(m_addr + 64);
	}
	struct FHitResult GetOutHit() {
		return memory.read<struct FHitResult>(m_addr + 68);
	}
	bool GetbIgnoreSelf() {
		return memory.read<bool>(m_addr + 204);
	}
	struct FLinearColor GetTraceColor() {
		return memory.read<struct FLinearColor>(m_addr + 208);
	}
	struct FLinearColor GetTraceHitColor() {
		return memory.read<struct FLinearColor>(m_addr + 224);
	}
	float GetDrawTime() {
		return memory.read<float>(m_addr + 240);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 244);
	}

private:
	std::uint64_t m_addr = 0;
};class FTransactObject
{
public:
	FTransactObject(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FDestroyAll
{
public:
	FDestroyAll(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	AActor GetaClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FCachedAnimStateArray
{
public:
	FCachedAnimStateArray(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FCachedAnimStateData> GetStates() {
		return memory.read<struct TArray<struct FCachedAnimStateData>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetParentActor
{
public:
	FGetParentActor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FMultiply_Int64Int64
{
public:
	FMultiply_Int64Int64(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int64_t GetA() {
		return memory.read<int64_t>(m_addr + 0);
	}
	int64_t GetB() {
		return memory.read<int64_t>(m_addr + 8);
	}
	int64_t GetReturnValue() {
		return memory.read<int64_t>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FUnloadPrimaryAssetList
{
public:
	FUnloadPrimaryAssetList(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FPrimaryAssetId> GetPrimaryAssetIdList() {
		return memory.read<struct TArray<struct FPrimaryAssetId>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FParticleSpawnSignature__DelegateSignature
{
public:
	FParticleSpawnSignature__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetEventName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	float GetEmitterTime() {
		return memory.read<float>(m_addr + 8);
	}
	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	struct FVector GetVelocity() {
		return memory.read<struct FVector>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FTransformCurve
{
public:
	FTransformCurve(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVectorCurve GetTranslationCurve() {
		return memory.read<struct FVectorCurve>(m_addr + 24);
	}
	struct FVectorCurve GetRotationCurve() {
		return memory.read<struct FVectorCurve>(m_addr + 432);
	}
	struct FVectorCurve GetScaleCurve() {
		return memory.read<struct FVectorCurve>(m_addr + 840);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsActorBeingDestroyed
{
public:
	FIsActorBeingDestroyed(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsSwimming
{
public:
	FIsSwimming(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FParticleBurstSignature__DelegateSignature
{
public:
	FParticleBurstSignature__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetEventName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	float GetEmitterTime() {
		return memory.read<float>(m_addr + 8);
	}
	int32_t GetParticleCount() {
		return memory.read<int32_t>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FAngularDriveConstraint
{
public:
	FAngularDriveConstraint(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FConstraintDrive GetTwistDrive() {
		return memory.read<struct FConstraintDrive>(m_addr + 0);
	}
	struct FConstraintDrive GetSwingDrive() {
		return memory.read<struct FConstraintDrive>(m_addr + 16);
	}
	struct FConstraintDrive GetSlerpDrive() {
		return memory.read<struct FConstraintDrive>(m_addr + 32);
	}
	struct FRotator GetOrientationTarget() {
		return memory.read<struct FRotator>(m_addr + 48);
	}
	struct FVector GetAngularVelocityTarget() {
		return memory.read<struct FVector>(m_addr + 60);
	}
	enum class EAngularDriveMode GetAngularDriveMode() {
		return memory.read<enum class EAngularDriveMode>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnSystemFinished__DelegateSignature
{
public:
	FOnSystemFinished__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UParticleSystemComponent GetPSystem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UParticleSystemComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FEase
{
public:
	FEase(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetA() {
		return memory.read<float>(m_addr + 0);
	}
	float GetB() {
		return memory.read<float>(m_addr + 4);
	}
	float GetAlpha() {
		return memory.read<float>(m_addr + 8);
	}
	enum class EEasingFunc GetEasingFunc() {
		return memory.read<enum class EEasingFunc>(m_addr + 12);
	}
	float GetBlendExp() {
		return memory.read<float>(m_addr + 16);
	}
	int32_t Getsteps() {
		return memory.read<int32_t>(m_addr + 20);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FLinearDriveConstraint
{
public:
	FLinearDriveConstraint(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetPositionTarget() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetVelocityTarget() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	struct FConstraintDrive GetXDrive() {
		return memory.read<struct FConstraintDrive>(m_addr + 24);
	}
	struct FConstraintDrive GetYDrive() {
		return memory.read<struct FConstraintDrive>(m_addr + 40);
	}
	struct FConstraintDrive GetZDrive() {
		return memory.read<struct FConstraintDrive>(m_addr + 56);
	}
	char GetbEnablePositionDrive() {
		return memory.read<char>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetDefaultWindowMode
{
public:
	FGetDefaultWindowMode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class EWindowMode GetReturnValue() {
		return memory.read<enum class EWindowMode>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetCustomPrimitiveDataVector3
{
public:
	FSetCustomPrimitiveDataVector3(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetDataIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct FVector GetValue() {
		return memory.read<struct FVector>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FClusterNode_DEPRECATED
{
public:
	FClusterNode_DEPRECATED(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetBoundMin() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	int32_t GetFirstChild() {
		return memory.read<int32_t>(m_addr + 12);
	}
	struct FVector GetBoundMax() {
		return memory.read<struct FVector>(m_addr + 16);
	}
	int32_t GetLastChild() {
		return memory.read<int32_t>(m_addr + 28);
	}
	int32_t GetFirstInstance() {
		return memory.read<int32_t>(m_addr + 32);
	}
	int32_t GetLastInstance() {
		return memory.read<int32_t>(m_addr + 36);
	}

private:
	std::uint64_t m_addr = 0;
};class FChoosePlayerStart
{
public:
	FChoosePlayerStart(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AController GetPlayer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AController(ptr_addr);
	}
	struct AActor GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnSubmixRecordedFileDone__DelegateSignature
{
public:
	FOnSubmixRecordedFileDone__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USoundWave GetResultingSoundWave() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct USoundWave(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnSubmixEnvelope__DelegateSignature
{
public:
	FOnSubmixEnvelope__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<float> GetEnvelope() {
		return memory.read<struct TArray<float>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetLocationAndTangentAtSplinePoint
{
public:
	FGetLocationAndTangentAtSplinePoint(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetPointIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 4);
	}
	struct FVector GetTangent() {
		return memory.read<struct FVector>(m_addr + 16);
	}
	enum class ESplineCoordinateSpace GetCoordinateSpace() {
		return memory.read<enum class ESplineCoordinateSpace>(m_addr + 28);
	}

private:
	std::uint64_t m_addr = 0;
};class FConv_TransformToMatrix
{
public:
	FConv_TransformToMatrix(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTransform GetTransform() {
		return memory.read<struct FTransform>(m_addr + 0);
	}
	struct FMatrix GetReturnValue() {
		return memory.read<struct FMatrix>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnPrimaryAssetLoaded__DelegateSignature
{
public:
	FOnPrimaryAssetLoaded__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetLoaded() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetVisibleInSceneCaptureOnly
{
public:
	FSetVisibleInSceneCaptureOnly(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetMaterialByName
{
public:
	FSetMaterialByName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetMaterialSlotName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct UMaterialInterface GetMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UMaterialInterface(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGreater_Int64Int64
{
public:
	FGreater_Int64Int64(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int64_t GetA() {
		return memory.read<int64_t>(m_addr + 0);
	}
	int64_t GetB() {
		return memory.read<int64_t>(m_addr + 8);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnPrimaryAssetListLoaded__DelegateSignature
{
public:
	FOnPrimaryAssetListLoaded__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct UObject> GetLoaded() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct TArray<struct UObject>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnPrimaryAssetClassListLoaded__DelegateSignature
{
public:
	FOnPrimaryAssetClassListLoaded__DelegateSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<UObject> GetLoaded() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct TArray<UObject>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FWasInputKeyJustReleased
{
public:
	FWasInputKeyJustReleased(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKey GetKey() {
		return memory.read<struct FKey>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FVSize
{
public:
	FVSize(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetA() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetAttachSocketName
{
public:
	FGetAttachSocketName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetReturnValue() {
		return memory.read<struct FName>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FClearSplinePoints
{
public:
	FClearSplinePoints(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbUpdateSpline() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetForwardVector
{
public:
	FGetForwardVector(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRotator GetInRot() {
		return memory.read<struct FRotator>(m_addr + 0);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_AddRelativeLocation
{
public:
	FK2_AddRelativeLocation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetDeltaLocation() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	bool GetbSweep() {
		return memory.read<bool>(m_addr + 12);
	}
	struct FHitResult GetSweepHitResult() {
		return memory.read<struct FHitResult>(m_addr + 16);
	}
	bool GetbTeleport() {
		return memory.read<bool>(m_addr + 152);
	}

private:
	std::uint64_t m_addr = 0;
};class FAnimUpdateRateParameters
{
public:
	FAnimUpdateRateParameters(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class EUpdateRateShiftBucket GetShiftBucket() {
		return memory.read<enum class EUpdateRateShiftBucket>(m_addr + 1);
	}
	char GetbInterpolateSkippedFrames() {
		return memory.read<char>(m_addr + 2);
	}
	char GetbShouldUseLodMap() {
		return memory.read<char>(m_addr + 2);
	}
	char GetbShouldUseMinLod() {
		return memory.read<char>(m_addr + 2);
	}
	char GetbSkipUpdate() {
		return memory.read<char>(m_addr + 2);
	}
	char GetbSkipEvaluation() {
		return memory.read<char>(m_addr + 2);
	}
	int32_t GetUpdateRate() {
		return memory.read<int32_t>(m_addr + 4);
	}
	int32_t GetEvaluationRate() {
		return memory.read<int32_t>(m_addr + 8);
	}
	float GetTickedPoseOffestTime() {
		return memory.read<float>(m_addr + 12);
	}
	float GetAdditionalTime() {
		return memory.read<float>(m_addr + 16);
	}
	int32_t GetBaseNonRenderedUpdateRate() {
		return memory.read<int32_t>(m_addr + 24);
	}
	int32_t GetMaxEvalRateForInterpolation() {
		return memory.read<int32_t>(m_addr + 28);
	}
	struct TArray<float> GetBaseVisibleDistanceFactorThesholds() {
		return memory.read<struct TArray<float>>(m_addr + 32);
	}
	struct TMap<int32_t, int32_t> GetLODToFrameSkipMap() {
		return memory.read<struct TMap<int32_t, int32_t>>(m_addr + 48);
	}
	int32_t GetSkippedUpdateFrames() {
		return memory.read<int32_t>(m_addr + 128);
	}
	int32_t GetSkippedEvalFrames() {
		return memory.read<int32_t>(m_addr + 132);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetFOVAngle
{
public:
	FGetFOVAngle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetSocketLocation
{
public:
	FGetSocketLocation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USkeletalMeshComponent GetSkelComp() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct USkeletalMeshComponent(ptr_addr);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsSimulatingPhysics
{
public:
	FIsSimulatingPhysics(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetAngularStiffness
{
public:
	FSetAngularStiffness(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewAngularStiffness() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetVolumetricFogAlbedo
{
public:
	FSetVolumetricFogAlbedo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FColor GetNewValue() {
		return memory.read<struct FColor>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_AddLocalOffset
{
public:
	FK2_AddLocalOffset(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetDeltaLocation() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	bool GetbSweep() {
		return memory.read<bool>(m_addr + 12);
	}
	struct FHitResult GetSweepHitResult() {
		return memory.read<struct FHitResult>(m_addr + 16);
	}
	bool GetbTeleport() {
		return memory.read<bool>(m_addr + 152);
	}

private:
	std::uint64_t m_addr = 0;
};class FPassiveSoundMixModifier
{
public:
	FPassiveSoundMixModifier(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USoundMix GetSoundMix() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct USoundMix(ptr_addr);
	}
	float GetMinVolumeThreshold() {
		return memory.read<float>(m_addr + 8);
	}
	float GetMaxVolumeThreshold() {
		return memory.read<float>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FBP_GetAttenuationSettingsToApply
{
public:
	FBP_GetAttenuationSettingsToApply(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FForceFeedbackAttenuationSettings GetOutAttenuationSettings() {
		return memory.read<struct FForceFeedbackAttenuationSettings>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 176);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetCollisionObjectType
{
public:
	FSetCollisionObjectType(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class ECollisionChannel GetChannel() {
		return memory.read<enum class ECollisionChannel>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSubtract_Vector2DVector2D
{
public:
	FSubtract_Vector2DVector2D(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector2D GetA() {
		return memory.read<struct FVector2D>(m_addr + 0);
	}
	struct FVector2D GetB() {
		return memory.read<struct FVector2D>(m_addr + 8);
	}
	struct FVector2D GetReturnValue() {
		return memory.read<struct FVector2D>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_AddRelativeRotation
{
public:
	FK2_AddRelativeRotation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRotator GetDeltaRotation() {
		return memory.read<struct FRotator>(m_addr + 0);
	}
	bool GetbSweep() {
		return memory.read<bool>(m_addr + 12);
	}
	struct FHitResult GetSweepHitResult() {
		return memory.read<struct FHitResult>(m_addr + 16);
	}
	bool GetbTeleport() {
		return memory.read<bool>(m_addr + 152);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_AddWorldRotation
{
public:
	FK2_AddWorldRotation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRotator GetDeltaRotation() {
		return memory.read<struct FRotator>(m_addr + 0);
	}
	bool GetbSweep() {
		return memory.read<bool>(m_addr + 12);
	}
	struct FHitResult GetSweepHitResult() {
		return memory.read<struct FHitResult>(m_addr + 16);
	}
	bool GetbTeleport() {
		return memory.read<bool>(m_addr + 152);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_AddActorLocalRotation
{
public:
	FK2_AddActorLocalRotation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRotator GetDeltaRotation() {
		return memory.read<struct FRotator>(m_addr + 0);
	}
	bool GetbSweep() {
		return memory.read<bool>(m_addr + 12);
	}
	struct FHitResult GetSweepHitResult() {
		return memory.read<struct FHitResult>(m_addr + 16);
	}
	bool GetbTeleport() {
		return memory.read<bool>(m_addr + 152);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_AddWorldTransform
{
public:
	FK2_AddWorldTransform(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTransform GetDeltaTransform() {
		return memory.read<struct FTransform>(m_addr + 0);
	}
	bool GetbSweep() {
		return memory.read<bool>(m_addr + 48);
	}
	struct FHitResult GetSweepHitResult() {
		return memory.read<struct FHitResult>(m_addr + 52);
	}
	bool GetbTeleport() {
		return memory.read<bool>(m_addr + 188);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_AddActorLocalTransform
{
public:
	FK2_AddActorLocalTransform(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTransform GetNewTransform() {
		return memory.read<struct FTransform>(m_addr + 0);
	}
	bool GetbSweep() {
		return memory.read<bool>(m_addr + 48);
	}
	struct FHitResult GetSweepHitResult() {
		return memory.read<struct FHitResult>(m_addr + 52);
	}
	bool GetbTeleport() {
		return memory.read<bool>(m_addr + 188);
	}

private:
	std::uint64_t m_addr = 0;
};class FClientGameEnded
{
public:
	FClientGameEnded(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetEndGameFocus() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}
	bool GetbIsWinner() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_AttachToComponent
{
public:
	FK2_AttachToComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USceneComponent GetParent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct USceneComponent(ptr_addr);
	}
	struct FName GetSocketName() {
		return memory.read<struct FName>(m_addr + 8);
	}
	enum class EAttachmentRule GetLocationRule() {
		return memory.read<enum class EAttachmentRule>(m_addr + 16);
	}
	enum class EAttachmentRule GetRotationRule() {
		return memory.read<enum class EAttachmentRule>(m_addr + 17);
	}
	enum class EAttachmentRule GetScaleRule() {
		return memory.read<enum class EAttachmentRule>(m_addr + 18);
	}
	bool GetbWeldSimulatedBodies() {
		return memory.read<bool>(m_addr + 19);
	}

private:
	std::uint64_t m_addr = 0;
};class FReceiveActorOnInputTouchLeave
{
public:
	FReceiveActorOnInputTouchLeave(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class ETouchIndex GetFingerIndex() {
		return memory.read<enum class ETouchIndex>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetTickableWhenPaused
{
public:
	FGetTickableWhenPaused(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_GetComponentRotation
{
public:
	FK2_GetComponentRotation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRotator GetReturnValue() {
		return memory.read<struct FRotator>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_GetComponentScale
{
public:
	FK2_GetComponentScale(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FLensSettings
{
public:
	FLensSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLensBloomSettings GetBloom() {
		return memory.read<struct FLensBloomSettings>(m_addr + 0);
	}
	struct FLensImperfectionSettings GetImperfections() {
		return memory.read<struct FLensImperfectionSettings>(m_addr + 184);
	}
	float GetChromaticAberration() {
		return memory.read<float>(m_addr + 216);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_SetRelativeTransform
{
public:
	FK2_SetRelativeTransform(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTransform GetNewTransform() {
		return memory.read<struct FTransform>(m_addr + 0);
	}
	bool GetbSweep() {
		return memory.read<bool>(m_addr + 48);
	}
	struct FHitResult GetSweepHitResult() {
		return memory.read<struct FHitResult>(m_addr + 52);
	}
	bool GetbTeleport() {
		return memory.read<bool>(m_addr + 188);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_SetWorldLocationAndRotation
{
public:
	FK2_SetWorldLocationAndRotation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetNewLocation() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FRotator GetNewRotation() {
		return memory.read<struct FRotator>(m_addr + 12);
	}
	bool GetbSweep() {
		return memory.read<bool>(m_addr + 24);
	}
	struct FHitResult GetSweepHitResult() {
		return memory.read<struct FHitResult>(m_addr + 28);
	}
	bool GetbTeleport() {
		return memory.read<bool>(m_addr + 164);
	}

private:
	std::uint64_t m_addr = 0;
};class FStopAnimMontage
{
public:
	FStopAnimMontage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimMontage GetAnimMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimMontage(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetAffectTranslucentLighting
{
public:
	FSetAffectTranslucentLighting(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbNewValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FProjectConfigDir
{
public:
	FProjectConfigDir(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetActorTimeDilation
{
public:
	FGetActorTimeDilation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FWeightedBlendable
{
public:
	FWeightedBlendable(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Getweight() {
		return memory.read<float>(m_addr + 0);
	}
	struct UObject GetObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UObject(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_SetWorldTransform
{
public:
	FK2_SetWorldTransform(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTransform GetNewTransform() {
		return memory.read<struct FTransform>(m_addr + 0);
	}
	bool GetbSweep() {
		return memory.read<bool>(m_addr + 48);
	}
	struct FHitResult GetSweepHitResult() {
		return memory.read<struct FHitResult>(m_addr + 52);
	}
	bool GetbTeleport() {
		return memory.read<bool>(m_addr + 188);
	}

private:
	std::uint64_t m_addr = 0;
};class FSoundWaveSpectralDataPerSound
{
public:
	FSoundWaveSpectralDataPerSound(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FSoundWaveSpectralData> GetSpectralData() {
		return memory.read<struct TArray<struct FSoundWaveSpectralData>>(m_addr + 0);
	}
	float GetPlaybackTime() {
		return memory.read<float>(m_addr + 16);
	}
	struct USoundWave GetSoundWave() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 24);
		return struct USoundWave(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FMustSpectate
{
public:
	FMustSpectate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APlayerController GetNewPlayerController() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APlayerController(ptr_addr);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetVisibility
{
public:
	FSetVisibility(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbNewVisibility() {
		return memory.read<bool>(m_addr + 0);
	}
	bool GetbPropagateToChildren() {
		return memory.read<bool>(m_addr + 1);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetRootShakePattern
{
public:
	FGetRootShakePattern(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UCameraShakePattern GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UCameraShakePattern(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FDisableSunDisk
{
public:
	FDisableSunDisk(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetNewSunDisk() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetWorldScale3D
{
public:
	FSetWorldScale3D(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetNewScale() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FPOV
{
public:
	FPOV(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FRotator GetRotation() {
		return memory.read<struct FRotator>(m_addr + 12);
	}
	float GetFOV() {
		return memory.read<float>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FAnimNode_ConvertLocalToComponentSpace
{
public:
	FAnimNode_ConvertLocalToComponentSpace(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FPoseLink GetLocalPose() {
		return memory.read<struct FPoseLink>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetUpVectorAtTime
{
public:
	FGetUpVectorAtTime(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetTime() {
		return memory.read<float>(m_addr + 0);
	}
	enum class ESplineCoordinateSpace GetCoordinateSpace() {
		return memory.read<enum class ESplineCoordinateSpace>(m_addr + 4);
	}
	bool GetbUseConstantVelocity() {
		return memory.read<bool>(m_addr + 5);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FToggleVisibility
{
public:
	FToggleVisibility(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbPropagateToChildren() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FAddAngularImpulse
{
public:
	FAddAngularImpulse(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetImpulse() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 12);
	}
	bool GetbVelChange() {
		return memory.read<bool>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FPercent_ByteByte
{
public:
	FPercent_ByteByte(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	char GetA() {
		return memory.read<char>(m_addr + 0);
	}
	char GetB() {
		return memory.read<char>(m_addr + 1);
	}
	char GetReturnValue() {
		return memory.read<char>(m_addr + 2);
	}

private:
	std::uint64_t m_addr = 0;
};class FAnimNode_AssetPlayerBase
{
public:
	FAnimNode_AssetPlayerBase(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetGroupName() {
		return memory.read<struct FName>(m_addr + 16);
	}
	enum class EAnimGroupRole GetGroupRole() {
		return memory.read<enum class EAnimGroupRole>(m_addr + 24);
	}
	enum class EAnimSyncGroupScope GetGroupScope() {
		return memory.read<enum class EAnimSyncGroupScope>(m_addr + 25);
	}
	bool GetbIgnoreForRelevancyTest() {
		return memory.read<bool>(m_addr + 26);
	}
	float GetBlendWeight() {
		return memory.read<float>(m_addr + 28);
	}
	float GetInternalTimeAccumulator() {
		return memory.read<float>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FAddForce
{
public:
	FAddForce(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetForce() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FEnterpriseFeaturePackDir
{
public:
	FEnterpriseFeaturePackDir(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FAddForceAtLocationLocal
{
public:
	FAddForceAtLocationLocal(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetForce() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FActorComponentInstanceData
{
public:
	FActorComponentInstanceData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetSourceComponentTemplate() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UObject(ptr_addr);
	}
	enum class EComponentCreationMethod GetSourceComponentCreationMethod() {
		return memory.read<enum class EComponentCreationMethod>(m_addr + 16);
	}
	int32_t GetSourceComponentTypeSerializedIndex() {
		return memory.read<int32_t>(m_addr + 20);
	}
	struct TArray<char> GetSavedProperties() {
		return memory.read<struct TArray<char>>(m_addr + 24);
	}
	struct FActorComponentDuplicatedObjectData GetUniqueTransientPackage() {
		return memory.read<struct FActorComponentDuplicatedObjectData>(m_addr + 40);
	}
	struct TArray<struct FActorComponentDuplicatedObjectData> GetDuplicatedObjects() {
		return memory.read<struct TArray<struct FActorComponentDuplicatedObjectData>>(m_addr + 56);
	}
	struct TArray<struct UObject> GetReferencedObjects() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return struct TArray<struct UObject>(ptr_addr);
	}
	struct TArray<struct FName> GetReferencedNames() {
		return memory.read<struct TArray<struct FName>>(m_addr + 88);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetDirectionAtDistanceAlongSpline
{
public:
	FGetDirectionAtDistanceAlongSpline(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetDistance() {
		return memory.read<float>(m_addr + 0);
	}
	enum class ESplineCoordinateSpace GetCoordinateSpace() {
		return memory.read<enum class ESplineCoordinateSpace>(m_addr + 4);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetNumActiveParticles
{
public:
	FGetNumActiveParticles(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FAddRadialImpulse
{
public:
	FAddRadialImpulse(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetOrigin() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	float GetRadius() {
		return memory.read<float>(m_addr + 12);
	}
	float GetStrength() {
		return memory.read<float>(m_addr + 16);
	}
	enum class ERadialImpulseFalloff GetFalloff() {
		return memory.read<enum class ERadialImpulseFalloff>(m_addr + 20);
	}
	bool GetbVelChange() {
		return memory.read<bool>(m_addr + 21);
	}

private:
	std::uint64_t m_addr = 0;
};class FCanCharacterStepUp
{
public:
	FCanCharacterStepUp(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APawn GetPawn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APawn(ptr_addr);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSoundGroup
{
public:
	FSoundGroup(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class ESoundGroup GetSoundGroup() {
		return memory.read<enum class ESoundGroup>(m_addr + 0);
	}
	struct FString GetDisplayName() {
		return memory.read<struct FString>(m_addr + 8);
	}
	char GetbAlwaysDecompressOnLoad() {
		return memory.read<char>(m_addr + 24);
	}
	float GetDecompressedDuration() {
		return memory.read<float>(m_addr + 28);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetDirectionAtSplineInputKey
{
public:
	FGetDirectionAtSplineInputKey(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetInKey() {
		return memory.read<float>(m_addr + 0);
	}
	enum class ESplineCoordinateSpace GetCoordinateSpace() {
		return memory.read<enum class ESplineCoordinateSpace>(m_addr + 4);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetRightVectorAtTime
{
public:
	FGetRightVectorAtTime(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetTime() {
		return memory.read<float>(m_addr + 0);
	}
	enum class ESplineCoordinateSpace GetCoordinateSpace() {
		return memory.read<enum class ESplineCoordinateSpace>(m_addr + 4);
	}
	bool GetbUseConstantVelocity() {
		return memory.read<bool>(m_addr + 5);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FProjectWorldLocationToScreen
{
public:
	FProjectWorldLocationToScreen(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetWorldLocation() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector2D GetScreenLocation() {
		return memory.read<struct FVector2D>(m_addr + 12);
	}
	bool GetbPlayerViewportRelative() {
		return memory.read<bool>(m_addr + 20);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 21);
	}

private:
	std::uint64_t m_addr = 0;
};class FEqualEqual_KeyKey
{
public:
	FEqualEqual_KeyKey(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKey GetA() {
		return memory.read<struct FKey>(m_addr + 0);
	}
	struct FKey GetB() {
		return memory.read<struct FKey>(m_addr + 24);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};class FCreateAndSetMaterialInstanceDynamicFromMaterial
{
public:
	FCreateAndSetMaterialInstanceDynamicFromMaterial(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetElementIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct UMaterialInterface GetParent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UMaterialInterface(ptr_addr);
	}
	struct UMaterialInstanceDynamic GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UMaterialInstanceDynamic(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FQuat_IsIdentity
{
public:
	FQuat_IsIdentity(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FQuat GetQ() {
		return memory.read<struct FQuat>(m_addr + 0);
	}
	float GetTolerance() {
		return memory.read<float>(m_addr + 16);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FActorTickFunction
{
public:
	FActorTickFunction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FGetNumMaterials
{
public:
	FGetNumMaterials(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetCollisionProfileName
{
public:
	FGetCollisionProfileName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetReturnValue() {
		return memory.read<struct FName>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_Project
{
public:
	FK2_Project(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetWorldLocation() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetCollisionResponseToChannel
{
public:
	FGetCollisionResponseToChannel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class ECollisionChannel GetChannel() {
		return memory.read<enum class ECollisionChannel>(m_addr + 0);
	}
	enum class ECollisionResponse GetReturnValue() {
		return memory.read<enum class ECollisionResponse>(m_addr + 1);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetInertiaTensor
{
public:
	FGetInertiaTensor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FEqualEqual_Vector4Vector4
{
public:
	FEqualEqual_Vector4Vector4(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector4 GetA() {
		return memory.read<struct FVector4>(m_addr + 0);
	}
	struct FVector4 GetB() {
		return memory.read<struct FVector4>(m_addr + 16);
	}
	float GetErrorTolerance() {
		return memory.read<float>(m_addr + 32);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 36);
	}

private:
	std::uint64_t m_addr = 0;
};class FAudioEffectParameters
{
public:
	FAudioEffectParameters(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FGetLinearDamping
{
public:
	FGetLinearDamping(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetMass
{
public:
	FGetMass(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FNavAgentProperties
{
public:
	FNavAgentProperties(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetAgentRadius() {
		return memory.read<float>(m_addr + 4);
	}
	float GetAgentHeight() {
		return memory.read<float>(m_addr + 8);
	}
	float GetAgentStepHeight() {
		return memory.read<float>(m_addr + 12);
	}
	float GetNavWalkingSearchHeightScale() {
		return memory.read<float>(m_addr + 16);
	}
	struct FSoftClassPath GetPreferredNavData() {
		return memory.read<struct FSoftClassPath>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetInstanceAssetPlayerTimeFromEndFraction
{
public:
	FGetInstanceAssetPlayerTimeFromEndFraction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetAssetPlayerIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FVSizeSquared
{
public:
	FVSizeSquared(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetA() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FConsoleKey
{
public:
	FConsoleKey(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKey GetKey() {
		return memory.read<struct FKey>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetMaterialFromCollisionFaceIndex
{
public:
	FGetMaterialFromCollisionFaceIndex(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetFaceIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetSectionIndex() {
		return memory.read<int32_t>(m_addr + 4);
	}
	struct UMaterialInterface GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UMaterialInterface(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FCopyParameterOverrides
{
public:
	FCopyParameterOverrides(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UMaterialInstance GetMaterialInstance() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UMaterialInstance(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FNextSobolCell3D
{
public:
	FNextSobolCell3D(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetNumCells() {
		return memory.read<int32_t>(m_addr + 4);
	}
	struct FVector GetPreviousValue() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetOverlappingActors
{
public:
	FGetOverlappingActors(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct AActor> GetOverlappingActors() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct TArray<struct AActor>(ptr_addr);
	}
	AActor GetClassFilter() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetActiveCurveNames
{
public:
	FGetActiveCurveNames(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class EAnimCurveType GetCurveType() {
		return memory.read<enum class EAnimCurveType>(m_addr + 0);
	}
	struct TArray<struct FName> GetOutNames() {
		return memory.read<struct TArray<struct FName>>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetPhysicsAngularVelocity
{
public:
	FGetPhysicsAngularVelocity(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetDecalMaterial
{
public:
	FGetDecalMaterial(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UMaterialInterface GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UMaterialInterface(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetIESBrightnessScale
{
public:
	FSetIESBrightnessScale(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FRadialDamageParams
{
public:
	FRadialDamageParams(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetBaseDamage() {
		return memory.read<float>(m_addr + 0);
	}
	float GetMinimumDamage() {
		return memory.read<float>(m_addr + 4);
	}
	float GetInnerRadius() {
		return memory.read<float>(m_addr + 8);
	}
	float GetOuterRadius() {
		return memory.read<float>(m_addr + 12);
	}
	float GetDamageFalloff() {
		return memory.read<float>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetPhysicsAngularVelocityInDegrees
{
public:
	FGetPhysicsAngularVelocityInDegrees(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetPhysicsLinearVelocityAtPoint
{
public:
	FGetPhysicsLinearVelocityAtPoint(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetPoint() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 12);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsLeapYear
{
public:
	FIsLeapYear(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetYear() {
		return memory.read<int32_t>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FMap_Keys
{
public:
	FMap_Keys(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<int32_t, int32_t> GetTargetMap() {
		return memory.read<struct TMap<int32_t, int32_t>>(m_addr + 0);
	}
	struct TArray<int32_t> GetKeys() {
		return memory.read<struct TArray<int32_t>>(m_addr + 80);
	}

private:
	std::uint64_t m_addr = 0;
};class FIgnoreActorWhenMoving
{
public:
	FIgnoreActorWhenMoving(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}
	bool GetbShouldIgnore() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FVisibilityTrackKey
{
public:
	FVisibilityTrackKey(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetTime() {
		return memory.read<float>(m_addr + 0);
	}
	enum class EVisibilityTrackAction GetAction() {
		return memory.read<enum class EVisibilityTrackAction>(m_addr + 4);
	}
	enum class EVisibilityTrackCondition GetActiveCondition() {
		return memory.read<enum class EVisibilityTrackCondition>(m_addr + 5);
	}

private:
	std::uint64_t m_addr = 0;
};class FVirtualTextureSpacePoolConfig
{
public:
	FVirtualTextureSpacePoolConfig(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetMinTileSize() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetMaxTileSize() {
		return memory.read<int32_t>(m_addr + 4);
	}
	struct TArray<enum class EPixelFormat> GetFormats() {
		return memory.read<struct TArray<enum class EPixelFormat>>(m_addr + 8);
	}
	int32_t GetSizeInMegabyte() {
		return memory.read<int32_t>(m_addr + 24);
	}
	bool GetbAllowSizeScale() {
		return memory.read<bool>(m_addr + 28);
	}
	uint32_t GetScalabilityGroup() {
		return memory.read<uint32_t>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsAnyRigidBodyAwake
{
public:
	FIsAnyRigidBodyAwake(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetNamedMaterial
{
public:
	FGetNamedMaterial(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetInName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct UMaterialInterface GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UMaterialInterface(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsLocalPlayerController
{
public:
	FIsLocalPlayerController(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetHorizontalDistanceTo
{
public:
	FGetHorizontalDistanceTo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetOtherActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsOverlappingActor
{
public:
	FIsOverlappingActor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetOther() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetCastShadows
{
public:
	FSetCastShadows(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbNewValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetCustomPrimitiveDataFloat
{
public:
	FSetCustomPrimitiveDataFloat(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetDataIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	float GetValue() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_IsCollisionEnabled
{
public:
	FK2_IsCollisionEnabled(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_IsQueryCollisionEnabled
{
public:
	FK2_IsQueryCollisionEnabled(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_LineTraceComponent
{
public:
	FK2_LineTraceComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetTraceStart() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetTraceEnd() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	bool GetbTraceComplex() {
		return memory.read<bool>(m_addr + 24);
	}
	bool GetbShowTrace() {
		return memory.read<bool>(m_addr + 25);
	}
	bool GetbPersistentShowTrace() {
		return memory.read<bool>(m_addr + 26);
	}
	struct FVector GetHitLocation() {
		return memory.read<struct FVector>(m_addr + 28);
	}
	struct FVector GetHitNormal() {
		return memory.read<struct FVector>(m_addr + 40);
	}
	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 52);
	}
	struct FHitResult GetOutHit() {
		return memory.read<struct FHitResult>(m_addr + 60);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 196);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetAngularBreakable
{
public:
	FSetAngularBreakable(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbAngularBreakable() {
		return memory.read<bool>(m_addr + 0);
	}
	float GetAngularBreakThreshold() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_SphereOverlapComponent
{
public:
	FK2_SphereOverlapComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetInSphereCentre() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	float GetInSphereRadius() {
		return memory.read<float>(m_addr + 12);
	}
	bool GetbTraceComplex() {
		return memory.read<bool>(m_addr + 16);
	}
	bool GetbShowTrace() {
		return memory.read<bool>(m_addr + 17);
	}
	bool GetbPersistentShowTrace() {
		return memory.read<bool>(m_addr + 18);
	}
	struct FVector GetHitLocation() {
		return memory.read<struct FVector>(m_addr + 20);
	}
	struct FVector GetHitNormal() {
		return memory.read<struct FVector>(m_addr + 32);
	}
	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 44);
	}
	struct FHitResult GetOutHit() {
		return memory.read<struct FHitResult>(m_addr + 52);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 188);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetGroupsToAvoid
{
public:
	FSetGroupsToAvoid(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetGroupFlags() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FPutRigidBodyToSleep
{
public:
	FPutRigidBodyToSleep(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetRenderInMainPass
{
public:
	FSetRenderInMainPass(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetAutoDestroyWhenFinished
{
public:
	FSetAutoDestroyWhenFinished(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbVal() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetOverlayMaterial
{
public:
	FSetOverlayMaterial(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetElementIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetOverlayIndex() {
		return memory.read<int32_t>(m_addr + 4);
	}
	struct UMaterialInterface GetOverlayMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UMaterialInterface(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FKeyHandleMap
{
public:
	FKeyHandleMap(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FSetAllPhysicsAngularVelocityInDegrees
{
public:
	FSetAllPhysicsAngularVelocityInDegrees(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetNewAngVel() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	bool GetbAddToCurrent() {
		return memory.read<bool>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetAllPhysicsAngularVelocityInRadians
{
public:
	FSetAllPhysicsAngularVelocityInRadians(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetNewAngVel() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	bool GetbAddToCurrent() {
		return memory.read<bool>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetAllPhysicsLinearVelocity
{
public:
	FSetAllPhysicsLinearVelocity(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetNewVel() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	bool GetbAddToCurrent() {
		return memory.read<bool>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetAllUseCCD
{
public:
	FSetAllUseCCD(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetInUseCCD() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FClientIgnoreLookInput
{
public:
	FClientIgnoreLookInput(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbIgnore() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FVEase
{
public:
	FVEase(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetA() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetB() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	float GetAlpha() {
		return memory.read<float>(m_addr + 24);
	}
	enum class EEasingFunc GetEasingFunc() {
		return memory.read<enum class EEasingFunc>(m_addr + 28);
	}
	float GetBlendExp() {
		return memory.read<float>(m_addr + 32);
	}
	int32_t Getsteps() {
		return memory.read<int32_t>(m_addr + 36);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};class FHSVToRGBLinear
{
public:
	FHSVToRGBLinear(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLinearColor GetHSV() {
		return memory.read<struct FLinearColor>(m_addr + 0);
	}
	struct FLinearColor GetReturnValue() {
		return memory.read<struct FLinearColor>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetAngularDamping
{
public:
	FSetAngularDamping(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewAngularDamping() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetTargetRotation
{
public:
	FSetTargetRotation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRotator GetNewRotation() {
		return memory.read<struct FRotator>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FPoseData
{
public:
	FPoseData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FTransform> GetLocalSpacePose() {
		return memory.read<struct TArray<struct FTransform>>(m_addr + 0);
	}
	struct TMap<int32_t, int32_t> GetTrackToBufferIndex() {
		return memory.read<struct TMap<int32_t, int32_t>>(m_addr + 16);
	}
	struct TArray<float> GetCurveData() {
		return memory.read<struct TArray<float>>(m_addr + 96);
	}

private:
	std::uint64_t m_addr = 0;
};class FBookmarkBaseJumpToSettings
{
public:
	FBookmarkBaseJumpToSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FAnimationActiveTransitionEntry
{
public:
	FAnimationActiveTransitionEntry(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UBlendProfile GetBlendProfile() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 184);
		return struct UBlendProfile(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetBoundsScale
{
public:
	FSetBoundsScale(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewBoundsScale() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetActorArrayBounds
{
public:
	FGetActorArrayBounds(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct AActor> GetActors() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct TArray<struct AActor>(ptr_addr);
	}
	bool GetbOnlyCollidingComponents() {
		return memory.read<bool>(m_addr + 16);
	}
	struct FVector GetCenter() {
		return memory.read<struct FVector>(m_addr + 20);
	}
	struct FVector GetBoxExtent() {
		return memory.read<struct FVector>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FBlueprintCookedComponentInstancingData
{
public:
	FBlueprintCookedComponentInstancingData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FBlueprintComponentChangedPropertyInfo> GetChangedPropertyList() {
		return memory.read<struct TArray<struct FBlueprintComponentChangedPropertyInfo>>(m_addr + 0);
	}
	bool GetbHasValidCookedData() {
		return memory.read<bool>(m_addr + 33);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetCurrentJointAngles
{
public:
	FGetCurrentJointAngles(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetInBoneName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	float GetSwing1Angle() {
		return memory.read<float>(m_addr + 8);
	}
	float GetTwistAngle() {
		return memory.read<float>(m_addr + 12);
	}
	float GetSwing2Angle() {
		return memory.read<float>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FLen
{
public:
	FLen(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetS() {
		return memory.read<struct FString>(m_addr + 0);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetCastHiddenShadow
{
public:
	FSetCastHiddenShadow(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetNewCastHiddenShadow() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FLinearColor_Yellow
{
public:
	FLinearColor_Yellow(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLinearColor GetReturnValue() {
		return memory.read<struct FLinearColor>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetCastShadow
{
public:
	FSetCastShadow(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetNewCastShadow() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetVoiceLevel
{
public:
	FGetVoiceLevel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FDebugCapsuleSweepComplex
{
public:
	FDebugCapsuleSweepComplex(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbTraceComplex() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_OnEndCrouch
{
public:
	FK2_OnEndCrouch(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetHalfHeightAdjust() {
		return memory.read<float>(m_addr + 0);
	}
	float GetScaledHalfHeightAdjust() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetBloomMaxBrightness
{
public:
	FSetBloomMaxBrightness(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FAsCurrency_Integer
{
public:
	FAsCurrency_Integer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetValue() {
		return memory.read<int32_t>(m_addr + 0);
	}
	enum class ERoundingMode GetRoundingMode() {
		return memory.read<enum class ERoundingMode>(m_addr + 4);
	}
	bool GetbAlwaysSign() {
		return memory.read<bool>(m_addr + 5);
	}
	bool GetbUseGrouping() {
		return memory.read<bool>(m_addr + 6);
	}
	int32_t GetMinimumIntegralDigits() {
		return memory.read<int32_t>(m_addr + 8);
	}
	int32_t GetMaximumIntegralDigits() {
		return memory.read<int32_t>(m_addr + 12);
	}
	int32_t GetMinimumFractionalDigits() {
		return memory.read<int32_t>(m_addr + 16);
	}
	int32_t GetMaximumFractionalDigits() {
		return memory.read<int32_t>(m_addr + 20);
	}
	struct FString GetCurrencyCode() {
		return memory.read<struct FString>(m_addr + 24);
	}
	struct FText GetReturnValue() {
		return memory.read<struct FText>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};class FRemoveActionMapping
{
public:
	FRemoveActionMapping(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FInputActionKeyMapping GetKeyMapping() {
		return memory.read<struct FInputActionKeyMapping>(m_addr + 0);
	}
	bool GetbForceRebuildKeymaps() {
		return memory.read<bool>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetExcludeFromLightAttachmentGroup
{
public:
	FSetExcludeFromLightAttachmentGroup(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbInExcludeFromLightAttachmentGroup() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetCenterOfMass
{
public:
	FSetCenterOfMass(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetCenterOfMassOffset() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetCollisionEnabled
{
public:
	FSetCollisionEnabled(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class ECollisionEnabled GetNewType() {
		return memory.read<enum class ECollisionEnabled>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetCollisionProfileName
{
public:
	FSetCollisionProfileName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetInCollisionProfileName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	bool GetbUpdateOverlaps() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FFindClosestBone_K2
{
public:
	FFindClosestBone_K2(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetTestLocation() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetBoneLocation() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	float GetIgnoreScale() {
		return memory.read<float>(m_addr + 24);
	}
	bool GetbRequirePhysicsAsset() {
		return memory.read<bool>(m_addr + 28);
	}
	struct FName GetReturnValue() {
		return memory.read<struct FName>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FSkeletalMeshClothBuildParams
{
public:
	FSkeletalMeshClothBuildParams(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TWeakObjectPtr<UClothingAssetBase> GetTargetAsset() {
		return memory.read<struct TWeakObjectPtr<UClothingAssetBase>>(m_addr + 0);
	}
	int32_t GetTargetLod() {
		return memory.read<int32_t>(m_addr + 8);
	}
	bool GetbRemapParameters() {
		return memory.read<bool>(m_addr + 12);
	}
	struct FString GetAssetName() {
		return memory.read<struct FString>(m_addr + 16);
	}
	int32_t GetLODIndex() {
		return memory.read<int32_t>(m_addr + 32);
	}
	int32_t GetSourceSection() {
		return memory.read<int32_t>(m_addr + 36);
	}
	bool GetbRemoveFromMesh() {
		return memory.read<bool>(m_addr + 40);
	}
	struct TSoftObjectPtr<UPhysicsAsset> GetPhysicsAsset() {
		return memory.read<struct TSoftObjectPtr<UPhysicsAsset>>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_SetActorLocationAndRotation
{
public:
	FK2_SetActorLocationAndRotation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetNewLocation() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FRotator GetNewRotation() {
		return memory.read<struct FRotator>(m_addr + 12);
	}
	bool GetbSweep() {
		return memory.read<bool>(m_addr + 24);
	}
	struct FHitResult GetSweepHitResult() {
		return memory.read<struct FHitResult>(m_addr + 28);
	}
	bool GetbTeleport() {
		return memory.read<bool>(m_addr + 164);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 165);
	}

private:
	std::uint64_t m_addr = 0;
};class FMatrix_InverseTransformVector
{
public:
	FMatrix_InverseTransformVector(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMatrix GetM() {
		return memory.read<struct FMatrix>(m_addr + 0);
	}
	struct FVector GetV() {
		return memory.read<struct FVector>(m_addr + 64);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 76);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetCollisionResponseToAllChannels
{
public:
	FSetCollisionResponseToAllChannels(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class ECollisionResponse GetNewResponse() {
		return memory.read<enum class ECollisionResponse>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetTeleportDistanceThreshold
{
public:
	FGetTeleportDistanceThreshold(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetIgnoreLookInput
{
public:
	FSetIgnoreLookInput(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbNewLookInput() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetCollisionResponseToChannel
{
public:
	FSetCollisionResponseToChannel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class ECollisionChannel GetChannel() {
		return memory.read<enum class ECollisionChannel>(m_addr + 0);
	}
	enum class ECollisionResponse GetNewResponse() {
		return memory.read<enum class ECollisionResponse>(m_addr + 1);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetFoliageQuality
{
public:
	FSetFoliageQuality(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetConstraintMode
{
public:
	FSetConstraintMode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class EDOFMode GetConstraintMode() {
		return memory.read<enum class EDOFMode>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FTwistConstraint
{
public:
	FTwistConstraint(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetTwistLimitDegrees() {
		return memory.read<float>(m_addr + 20);
	}
	enum class EAngularConstraintMotion GetTwistMotion() {
		return memory.read<enum class EAngularConstraintMotion>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetCustomDepthStencilValue
{
public:
	FSetCustomDepthStencilValue(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetDefaultUpVector
{
public:
	FSetDefaultUpVector(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetUpVector() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	enum class ESplineCoordinateSpace GetCoordinateSpace() {
		return memory.read<enum class ESplineCoordinateSpace>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FLinkAnimClassLayers
{
public:
	FLinkAnimClassLayers(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UAnimInstance GetInClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return UAnimInstance(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetLightFunctionDisabledBrightness
{
public:
	FSetLightFunctionDisabledBrightness(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetCustomDepthStencilWriteMask
{
public:
	FSetCustomDepthStencilWriteMask(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class ERendererStencilMask GetWriteMaskBit() {
		return memory.read<enum class ERendererStencilMask>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetDefaultCustomPrimitiveDataFloat
{
public:
	FSetDefaultCustomPrimitiveDataFloat(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetDataIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	float GetValue() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetDefaultCustomPrimitiveDataVector3
{
public:
	FSetDefaultCustomPrimitiveDataVector3(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetDataIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct FVector GetValue() {
		return memory.read<struct FVector>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FClientReturnToMainMenuWithTextReason
{
public:
	FClientReturnToMainMenuWithTextReason(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetReturnReason() {
		return memory.read<struct FText>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FStopAllInstancesOfCameraShake
{
public:
	FStopAllInstancesOfCameraShake(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UCameraShakeBase GetShake() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return UCameraShakeBase(ptr_addr);
	}
	bool GetbImmediately() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSlotAnimationTrack
{
public:
	FSlotAnimationTrack(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetSlotName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FAnimTrack GetAnimTrack() {
		return memory.read<struct FAnimTrack>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsDynamicResolutionEnabled
{
public:
	FIsDynamicResolutionEnabled(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FAnimInstanceProxy
{
public:
	FAnimInstanceProxy(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FNamedVector
{
public:
	FNamedVector(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetValue() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FName GetName() {
		return memory.read<struct FName>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FPerBoneBlendWeight
{
public:
	FPerBoneBlendWeight(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetSourceIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	float GetBlendWeight() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetDefaultCustomPrimitiveDataVector4
{
public:
	FSetDefaultCustomPrimitiveDataVector4(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetDataIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct FVector4 GetValue() {
		return memory.read<struct FVector4>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FProjectIntermediateDir
{
public:
	FProjectIntermediateDir(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetEnableGravity
{
public:
	FSetEnableGravity(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbGravityEnabled() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSimpleCurve
{
public:
	FSimpleCurve(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class ERichCurveInterpMode GetInterpMode() {
		return memory.read<enum class ERichCurveInterpMode>(m_addr + 112);
	}
	struct TArray<struct FSimpleCurveKey> GetKeys() {
		return memory.read<struct TArray<struct FSimpleCurveKey>>(m_addr + 120);
	}

private:
	std::uint64_t m_addr = 0;
};class FDegTan
{
public:
	FDegTan(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetA() {
		return memory.read<float>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetTranslucencySortDistanceOffset
{
public:
	FSetTranslucencySortDistanceOffset(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewTranslucencySortDistanceOffset() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetGenerateOverlapEvents
{
public:
	FSetGenerateOverlapEvents(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbInGenerateOverlapEvents() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FNavigationLinkBase
{
public:
	FNavigationLinkBase(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetLeftProjectHeight() {
		return memory.read<float>(m_addr + 0);
	}
	float GetMaxFallDownLength() {
		return memory.read<float>(m_addr + 4);
	}
	float GetSnapRadius() {
		return memory.read<float>(m_addr + 12);
	}
	float GetSnapHeight() {
		return memory.read<float>(m_addr + 16);
	}
	struct FNavAgentSelector GetSupportedAgents() {
		return memory.read<struct FNavAgentSelector>(m_addr + 20);
	}
	char GetbSupportsAgent0() {
		return memory.read<char>(m_addr + 24);
	}
	char GetbSupportsAgent1() {
		return memory.read<char>(m_addr + 24);
	}
	char GetbSupportsAgent2() {
		return memory.read<char>(m_addr + 24);
	}
	char GetbSupportsAgent3() {
		return memory.read<char>(m_addr + 24);
	}
	char GetbSupportsAgent4() {
		return memory.read<char>(m_addr + 24);
	}
	char GetbSupportsAgent5() {
		return memory.read<char>(m_addr + 24);
	}
	char GetbSupportsAgent6() {
		return memory.read<char>(m_addr + 24);
	}
	char GetbSupportsAgent7() {
		return memory.read<char>(m_addr + 24);
	}
	char GetbSupportsAgent8() {
		return memory.read<char>(m_addr + 25);
	}
	char GetbSupportsAgent9() {
		return memory.read<char>(m_addr + 25);
	}
	char GetbSupportsAgent10() {
		return memory.read<char>(m_addr + 25);
	}
	char GetbSupportsAgent11() {
		return memory.read<char>(m_addr + 25);
	}
	char GetbSupportsAgent12() {
		return memory.read<char>(m_addr + 25);
	}
	char GetbSupportsAgent13() {
		return memory.read<char>(m_addr + 25);
	}
	char GetbSupportsAgent14() {
		return memory.read<char>(m_addr + 25);
	}
	char GetbSupportsAgent15() {
		return memory.read<char>(m_addr + 25);
	}
	enum class ENavLinkDirection GetDirection() {
		return memory.read<enum class ENavLinkDirection>(m_addr + 28);
	}
	char GetbUseSnapHeight() {
		return memory.read<char>(m_addr + 29);
	}
	char GetbSnapToCheapestArea() {
		return memory.read<char>(m_addr + 29);
	}
	char GetbCustomFlag0() {
		return memory.read<char>(m_addr + 29);
	}
	char GetbCustomFlag1() {
		return memory.read<char>(m_addr + 29);
	}
	char GetbCustomFlag2() {
		return memory.read<char>(m_addr + 29);
	}
	char GetbCustomFlag3() {
		return memory.read<char>(m_addr + 29);
	}
	char GetbCustomFlag4() {
		return memory.read<char>(m_addr + 29);
	}
	char GetbCustomFlag5() {
		return memory.read<char>(m_addr + 29);
	}
	char GetbCustomFlag6() {
		return memory.read<char>(m_addr + 30);
	}
	char GetbCustomFlag7() {
		return memory.read<char>(m_addr + 30);
	}
	UNavAreaBase GetAreaClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 32);
		return UNavAreaBase(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetLightShaftOverrideDirection
{
public:
	FSetLightShaftOverrideDirection(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetNewValue() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FHardwareCursorReference
{
public:
	FHardwareCursorReference(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetCursorPath() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FVector2D GetHotSpot() {
		return memory.read<struct FVector2D>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FAnimCurveParam
{
public:
	FAnimCurveParam(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetName() {
		return memory.read<struct FName>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetBoneLocationByName
{
public:
	FSetBoneLocationByName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FVector GetInLocation() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	enum class EBoneSpaces GetBoneSpace() {
		return memory.read<enum class EBoneSpaces>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetLightAttachmentsAsGroup
{
public:
	FSetLightAttachmentsAsGroup(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbInLightAttachmentsAsGroup() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FAdjustVolume
{
public:
	FAdjustVolume(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetAdjustVolumeDuration() {
		return memory.read<float>(m_addr + 0);
	}
	float GetAdjustVolumeLevel() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetLightingChannels
{
public:
	FSetLightingChannels(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbChannel0() {
		return memory.read<bool>(m_addr + 0);
	}
	bool GetbChannel1() {
		return memory.read<bool>(m_addr + 1);
	}
	bool GetbChannel2() {
		return memory.read<bool>(m_addr + 2);
	}

private:
	std::uint64_t m_addr = 0;
};class FMemberReference
{
public:
	FMemberReference(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetMemberParent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FString GetMemberScope() {
		return memory.read<struct FString>(m_addr + 8);
	}
	struct FName GetMemberName() {
		return memory.read<struct FName>(m_addr + 24);
	}
	struct FGuid GetMemberGuid() {
		return memory.read<struct FGuid>(m_addr + 32);
	}
	bool GetbSelfContext() {
		return memory.read<bool>(m_addr + 48);
	}
	bool GetbWasDeprecated() {
		return memory.read<bool>(m_addr + 49);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetLinearDamping
{
public:
	FSetLinearDamping(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewLinearDamping() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGrabComponent
{
public:
	FGrabComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPrimitiveComponent GetComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UPrimitiveComponent(ptr_addr);
	}
	struct FName GetInBoneName() {
		return memory.read<struct FName>(m_addr + 8);
	}
	struct FVector GetGrabLocation() {
		return memory.read<struct FVector>(m_addr + 16);
	}
	bool GetbConstrainRotation() {
		return memory.read<bool>(m_addr + 28);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetMaterial
{
public:
	FSetMaterial(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UMaterialInterface GetNewValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UMaterialInterface(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetSplineLength
{
public:
	FGetSplineLength(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetAntiAliasingQuality
{
public:
	FGetAntiAliasingQuality(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetOwnerNoSee
{
public:
	FSetOwnerNoSee(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbNewOwnerNoSee() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetUpdateClothInEditor
{
public:
	FSetUpdateClothInEditor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetNewUpdateState() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FAddDisplayDelegate
{
public:
	FAddDisplayDelegate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDelegate GetDelegate() {
		return memory.read<struct FDelegate>(m_addr + 0);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetPhysicsAngularVelocity
{
public:
	FSetPhysicsAngularVelocity(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetNewAngVel() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	bool GetbAddToCurrent() {
		return memory.read<bool>(m_addr + 12);
	}
	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FConv_Vector2DToVector
{
public:
	FConv_Vector2DToVector(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector2D GetInVector2D() {
		return memory.read<struct FVector2D>(m_addr + 0);
	}
	float GetZ() {
		return memory.read<float>(m_addr + 8);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetPhysicsAngularVelocityInDegrees
{
public:
	FSetPhysicsAngularVelocityInDegrees(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetNewAngVel() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	bool GetbAddToCurrent() {
		return memory.read<bool>(m_addr + 12);
	}
	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_SetText
{
public:
	FK2_SetText(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetValue() {
		return memory.read<struct FText>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetPhysicsAngularVelocityInRadians
{
public:
	FSetPhysicsAngularVelocityInRadians(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetNewAngVel() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	bool GetbAddToCurrent() {
		return memory.read<bool>(m_addr + 12);
	}
	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetActorForwardVector
{
public:
	FGetActorForwardVector(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetPhysicsLinearVelocity
{
public:
	FSetPhysicsLinearVelocity(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetNewVel() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	bool GetbAddToCurrent() {
		return memory.read<bool>(m_addr + 12);
	}
	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FFindDirectionClosestToWorldLocation
{
public:
	FFindDirectionClosestToWorldLocation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetWorldLocation() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	enum class ESplineCoordinateSpace GetCoordinateSpace() {
		return memory.read<enum class ESplineCoordinateSpace>(m_addr + 12);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FRuntimeFloatCurve
{
public:
	FRuntimeFloatCurve(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRichCurve GetEditorCurveData() {
		return memory.read<struct FRichCurve>(m_addr + 0);
	}
	struct UCurveFloat GetExternalCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 128);
		return struct UCurveFloat(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetPhysicsMaxAngularVelocity
{
public:
	FSetPhysicsMaxAngularVelocity(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewMaxAngVel() {
		return memory.read<float>(m_addr + 0);
	}
	bool GetbAddToCurrent() {
		return memory.read<bool>(m_addr + 4);
	}
	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetPhysicsMaxAngularVelocityInRadians
{
public:
	FSetPhysicsMaxAngularVelocityInRadians(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewMaxAngVel() {
		return memory.read<float>(m_addr + 0);
	}
	bool GetbAddToCurrent() {
		return memory.read<bool>(m_addr + 4);
	}
	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetBoneScaleByName
{
public:
	FGetBoneScaleByName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	enum class EBoneSpaces GetBoneSpace() {
		return memory.read<enum class EBoneSpaces>(m_addr + 8);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetReceivesDecals
{
public:
	FSetReceivesDecals(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbNewReceivesDecals() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FBroadphaseSettings
{
public:
	FBroadphaseSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbUseMBPOnClient() {
		return memory.read<bool>(m_addr + 0);
	}
	bool GetbUseMBPOnServer() {
		return memory.read<bool>(m_addr + 1);
	}
	bool GetbUseMBPOuterBounds() {
		return memory.read<bool>(m_addr + 2);
	}
	struct FBox GetMBPBounds() {
		return memory.read<struct FBox>(m_addr + 4);
	}
	struct FBox GetMBPOuterBounds() {
		return memory.read<struct FBox>(m_addr + 32);
	}
	uint32_t GetMBPNumSubdivs() {
		return memory.read<uint32_t>(m_addr + 60);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetBaseSoundMix
{
public:
	FSetBaseSoundMix(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct USoundMix GetInSoundMix() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct USoundMix(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetVolumetricFog
{
public:
	FSetVolumetricFog(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbNewValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetRenderCustomDepth
{
public:
	FSetRenderCustomDepth(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetSimulatePhysics
{
public:
	FSetSimulatePhysics(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbSimulate() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FMontage_SetPosition
{
public:
	FMontage_SetPosition(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimMontage GetMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimMontage(ptr_addr);
	}
	float GetNewPosition() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetTranslucentSortPriority
{
public:
	FSetTranslucentSortPriority(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetNewTranslucentSortPriority() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetCapsuleHalfHeight
{
public:
	FSetCapsuleHalfHeight(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetHalfHeight() {
		return memory.read<float>(m_addr + 0);
	}
	bool GetbUpdateOverlaps() {
		return memory.read<bool>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FFinishAddComponent
{
public:
	FFinishAddComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UActorComponent GetComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UActorComponent(ptr_addr);
	}
	bool GetbManualAttachment() {
		return memory.read<bool>(m_addr + 8);
	}
	struct FTransform GetRelativeTransform() {
		return memory.read<struct FTransform>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FVLerp
{
public:
	FVLerp(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetA() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetB() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	float GetAlpha() {
		return memory.read<float>(m_addr + 24);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 28);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetUseCCD
{
public:
	FSetUseCCD(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetInUseCCD() {
		return memory.read<bool>(m_addr + 0);
	}
	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FWakeRigidBody
{
public:
	FWakeRigidBody(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCollisionResponse
{
public:
	FCollisionResponse(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FCollisionResponseContainer GetResponseToChannels() {
		return memory.read<struct FCollisionResponseContainer>(m_addr + 0);
	}
	struct TArray<struct FResponseChannel> GetResponseArray() {
		return memory.read<struct TArray<struct FResponseChannel>>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetDrawOverDecal
{
public:
	FSetDrawOverDecal(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FRootMotionMovementParams
{
public:
	FRootMotionMovementParams(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbHasRootMotion() {
		return memory.read<bool>(m_addr + 0);
	}
	float GetBlendWeight() {
		return memory.read<float>(m_addr + 4);
	}
	struct FTransform GetRootMotionTransform() {
		return memory.read<struct FTransform>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FBlueprintInputDelegateBinding
{
public:
	FBlueprintInputDelegateBinding(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	char GetbConsumeInput() {
		return memory.read<char>(m_addr + 0);
	}
	char GetbExecuteWhenPaused() {
		return memory.read<char>(m_addr + 0);
	}
	char GetbOverrideParentBinding() {
		return memory.read<char>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FEnableLiveStreaming
{
public:
	FEnableLiveStreaming(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetEnable() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetActorTickInterval
{
public:
	FGetActorTickInterval(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCustomPrimitiveData
{
public:
	FCustomPrimitiveData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<float> GetData() {
		return memory.read<struct TArray<float>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FLog
{
public:
	FLog(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetA() {
		return memory.read<float>(m_addr + 0);
	}
	float GetBase() {
		return memory.read<float>(m_addr + 4);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FLightingChannels
{
public:
	FLightingChannels(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	char GetbChannel0() {
		return memory.read<char>(m_addr + 0);
	}
	char GetbChannel1() {
		return memory.read<char>(m_addr + 0);
	}
	char GetbChannel2() {
		return memory.read<char>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FVector_NetQuantize10
{
public:
	FVector_NetQuantize10(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FProjectPersistentDownloadDir
{
public:
	FProjectPersistentDownloadDir(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FAddHitBox
{
public:
	FAddHitBox(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector2D Getposition() {
		return memory.read<struct FVector2D>(m_addr + 0);
	}
	struct FVector2D GetSize() {
		return memory.read<struct FVector2D>(m_addr + 8);
	}
	struct FName GetInName() {
		return memory.read<struct FName>(m_addr + 16);
	}
	bool GetbConsumesInput() {
		return memory.read<bool>(m_addr + 24);
	}
	int32_t GetPriority() {
		return memory.read<int32_t>(m_addr + 28);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetMaterialSlotNames
{
public:
	FGetMaterialSlotNames(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FName> GetReturnValue() {
		return memory.read<struct TArray<struct FName>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FLevelNameAndTime
{
public:
	FLevelNameAndTime(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetLevelName() {
		return memory.read<struct FString>(m_addr + 0);
	}
	uint32_t GetLevelChangeTimeInMS() {
		return memory.read<uint32_t>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetNumOverlayMaterials
{
public:
	FGetNumOverlayMaterials(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetElementIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FEndsWith
{
public:
	FEndsWith(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetSourceString() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FString GetInSuffix() {
		return memory.read<struct FString>(m_addr + 16);
	}
	enum class ESearchCase GetSearchCase() {
		return memory.read<enum class ESearchCase>(m_addr + 32);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 33);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetAttachParentActor
{
public:
	FGetAttachParentActor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsMaterialSlotNameValid
{
public:
	FIsMaterialSlotNameValid(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetMaterialSlotName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetViewportMouseCaptureMode
{
public:
	FGetViewportMouseCaptureMode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	enum class EMouseCaptureMode GetReturnValue() {
		return memory.read<enum class EMouseCaptureMode>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsUseOverlayMaterial
{
public:
	FIsUseOverlayMaterial(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetColorParameter
{
public:
	FSetColorParameter(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetParameterName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FLinearColor GetParam() {
		return memory.read<struct FLinearColor>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FPlayerMuteList
{
public:
	FPlayerMuteList(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbHasVoiceHandshakeCompleted() {
		return memory.read<bool>(m_addr + 48);
	}
	int32_t GetVoiceChannelIdx() {
		return memory.read<int32_t>(m_addr + 52);
	}

private:
	std::uint64_t m_addr = 0;
};class FPrestreamTextures
{
public:
	FPrestreamTextures(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetSeconds() {
		return memory.read<float>(m_addr + 0);
	}
	bool GetbEnableStreaming() {
		return memory.read<bool>(m_addr + 4);
	}
	int32_t GetCinematicTextureGroups() {
		return memory.read<int32_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FMeshMergingSettings
{
public:
	FMeshMergingSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetTargetLightMapResolution() {
		return memory.read<int32_t>(m_addr + 0);
	}
	enum class EUVOutput GetOutputUVs[8]() {
		return memory.read<enum class EUVOutput>(m_addr + 4);
	}
	struct FMaterialProxySettings GetMaterialSettings() {
		return memory.read<struct FMaterialProxySettings>(m_addr + 12);
	}
	int32_t GetGutterSize() {
		return memory.read<int32_t>(m_addr + 156);
	}
	int32_t GetSpecificLOD() {
		return memory.read<int32_t>(m_addr + 160);
	}
	enum class EMeshLODSelectionType GetLODSelectionType() {
		return memory.read<enum class EMeshLODSelectionType>(m_addr + 164);
	}
	char GetbGenerateLightMapUV() {
		return memory.read<char>(m_addr + 165);
	}
	char GetbComputedLightMapResolution() {
		return memory.read<char>(m_addr + 165);
	}
	char GetbPivotPointAtZero() {
		return memory.read<char>(m_addr + 165);
	}
	char GetbMergePhysicsData() {
		return memory.read<char>(m_addr + 165);
	}
	char GetbMergeMaterials() {
		return memory.read<char>(m_addr + 165);
	}
	char GetbCreateMergedMaterial() {
		return memory.read<char>(m_addr + 165);
	}
	char GetbBakeVertexDataToMesh() {
		return memory.read<char>(m_addr + 165);
	}
	char GetbUseVertexDataForBakingMaterial() {
		return memory.read<char>(m_addr + 165);
	}
	char GetbUseTextureBinning() {
		return memory.read<char>(m_addr + 166);
	}
	char GetbReuseMeshLightmapUVs() {
		return memory.read<char>(m_addr + 166);
	}
	char GetbMergeEquivalentMaterials() {
		return memory.read<char>(m_addr + 166);
	}
	char GetbUseLandscapeCulling() {
		return memory.read<char>(m_addr + 166);
	}
	char GetbIncludeImposters() {
		return memory.read<char>(m_addr + 166);
	}
	char GetbAllowDistanceField() {
		return memory.read<char>(m_addr + 166);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetMaxCascadeDynamicObjects
{
public:
	FSetMaxCascadeDynamicObjects(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetNewValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FNamedFloat
{
public:
	FNamedFloat(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetValue() {
		return memory.read<float>(m_addr + 0);
	}
	struct FName GetName() {
		return memory.read<struct FName>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetScalarParameterValueOnMaterials
{
public:
	FSetScalarParameterValueOnMaterials(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetParameterName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	float GetParameterValue() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FBoneReductionSetting
{
public:
	FBoneReductionSetting(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FName> GetBonesToRemove() {
		return memory.read<struct TArray<struct FName>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FAnimationGroupReference
{
public:
	FAnimationGroupReference(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetGroupName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	enum class EAnimGroupRole GetGroupRole() {
		return memory.read<enum class EAnimGroupRole>(m_addr + 8);
	}
	enum class EAnimSyncGroupScope GetGroupScope() {
		return memory.read<enum class EAnimSyncGroupScope>(m_addr + 9);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetVectorParameterValueOnMaterials
{
public:
	FSetVectorParameterValueOnMaterials(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetParameterName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FVector GetParameterValue() {
		return memory.read<struct FVector>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FOverayMaterialArray
{
public:
	FOverayMaterialArray(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct UMaterialInterface> GetMaterials() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct TArray<struct UMaterialInterface>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetFloatValue
{
public:
	FGetFloatValue(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetInTime() {
		return memory.read<float>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FCanJumpInternal
{
public:
	FCanJumpInternal(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FTableRowBase
{
public:
	FTableRowBase(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FKShapeElem
{
public:
	FKShapeElem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetRestOffset() {
		return memory.read<float>(m_addr + 8);
	}
	struct FName GetName() {
		return memory.read<struct FName>(m_addr + 12);
	}
	char GetbContributeToMass() {
		return memory.read<char>(m_addr + 24);
	}
	enum class ECollisionEnabled GetCollisionEnabled() {
		return memory.read<enum class ECollisionEnabled>(m_addr + 25);
	}

private:
	std::uint64_t m_addr = 0;
};class FAnimNode_Base
{
public:
	FAnimNode_Base(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FInputRange
{
public:
	FInputRange(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetMin() {
		return memory.read<float>(m_addr + 0);
	}
	float GetMax() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FMarkerSyncData
{
public:
	FMarkerSyncData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FAnimSyncMarker> GetAuthoredSyncMarkers() {
		return memory.read<struct TArray<struct FAnimSyncMarker>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FRandomPointInBoundingBox
{
public:
	FRandomPointInBoundingBox(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetOrigin() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetBoxExtent() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FInputAlphaBoolBlend
{
public:
	FInputAlphaBoolBlend(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetBlendInTime() {
		return memory.read<float>(m_addr + 0);
	}
	float GetBlendOutTime() {
		return memory.read<float>(m_addr + 4);
	}
	enum class EAlphaBlendOption GetBlendOption() {
		return memory.read<enum class EAlphaBlendOption>(m_addr + 8);
	}
	bool GetbInitialized() {
		return memory.read<bool>(m_addr + 9);
	}
	struct UCurveFloat GetCustomCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UCurveFloat(ptr_addr);
	}
	struct FAlphaBlend GetAlphaBlend() {
		return memory.read<struct FAlphaBlend>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FCreateSound2D
{
public:
	FCreateSound2D(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct USoundBase GetSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct USoundBase(ptr_addr);
	}
	float GetVolumeMultiplier() {
		return memory.read<float>(m_addr + 16);
	}
	float GetPitchMultiplier() {
		return memory.read<float>(m_addr + 20);
	}
	float GetStartTime() {
		return memory.read<float>(m_addr + 24);
	}
	struct USoundConcurrency GetConcurrencySettings() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 32);
		return struct USoundConcurrency(ptr_addr);
	}
	bool GetbPersistAcrossLevelTransition() {
		return memory.read<bool>(m_addr + 40);
	}
	bool GetbAutoDestroy() {
		return memory.read<bool>(m_addr + 41);
	}
	struct UAudioComponent GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct UAudioComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FInputScaleBias
{
public:
	FInputScaleBias(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetScale() {
		return memory.read<float>(m_addr + 0);
	}
	float GetBias() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FConv_StringToInt
{
public:
	FConv_StringToInt(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetinString() {
		return memory.read<struct FString>(m_addr + 0);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FPoseLinkBase
{
public:
	FPoseLinkBase(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetLinkID() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FPerPlatformBool
{
public:
	FPerPlatformBool(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetDefault() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FPSCPool
{
public:
	FPSCPool(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FPSCPoolElem> GetFreeElements() {
		return memory.read<struct TArray<struct FPSCPoolElem>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSoundModulationDestinationSettings
{
public:
	FSoundModulationDestinationSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetValue() {
		return memory.read<float>(m_addr + 0);
	}
	struct USoundModulatorBase GetModulator() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct USoundModulatorBase(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_DrawLine
{
public:
	FK2_DrawLine(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector2D GetScreenPositionA() {
		return memory.read<struct FVector2D>(m_addr + 0);
	}
	struct FVector2D GetScreenPositionB() {
		return memory.read<struct FVector2D>(m_addr + 8);
	}
	float GetThickness() {
		return memory.read<float>(m_addr + 16);
	}
	struct FLinearColor GetRenderColor() {
		return memory.read<struct FLinearColor>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FActorComponentDuplicatedObjectData
{
public:
	FActorComponentDuplicatedObjectData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FAnimationState
{
public:
	FAnimationState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FAnimationTransitionRule> GetTransitions() {
		return memory.read<struct TArray<struct FAnimationTransitionRule>>(m_addr + 8);
	}
	int32_t GetStateRootNodeIndex() {
		return memory.read<int32_t>(m_addr + 24);
	}
	int32_t GetStartNotify() {
		return memory.read<int32_t>(m_addr + 28);
	}
	int32_t GetEndNotify() {
		return memory.read<int32_t>(m_addr + 32);
	}
	int32_t GetFullyBlendedNotify() {
		return memory.read<int32_t>(m_addr + 36);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetNonDirectionalInscatteringColorDistance
{
public:
	FSetNonDirectionalInscatteringColorDistance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetTransformAtDistanceAlongSpline
{
public:
	FGetTransformAtDistanceAlongSpline(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetDistance() {
		return memory.read<float>(m_addr + 0);
	}
	enum class ESplineCoordinateSpace GetCoordinateSpace() {
		return memory.read<enum class ESplineCoordinateSpace>(m_addr + 4);
	}
	bool GetbUseScale() {
		return memory.read<bool>(m_addr + 5);
	}
	struct FTransform GetReturnValue() {
		return memory.read<struct FTransform>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSet2D
{
public:
	FSet2D(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector2D GetA() {
		return memory.read<struct FVector2D>(m_addr + 0);
	}
	float GetX() {
		return memory.read<float>(m_addr + 8);
	}
	float GetY() {
		return memory.read<float>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FDivide_LinearColorLinearColor
{
public:
	FDivide_LinearColorLinearColor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLinearColor GetA() {
		return memory.read<struct FLinearColor>(m_addr + 0);
	}
	struct FLinearColor GetB() {
		return memory.read<struct FLinearColor>(m_addr + 16);
	}
	struct FLinearColor GetReturnValue() {
		return memory.read<struct FLinearColor>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FSceneComponentInstanceData
{
public:
	FSceneComponentInstanceData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<struct USceneComponent, struct FTransform> GetAttachedInstanceComponents() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 104);
		return struct TMap<struct USceneComponent, struct FTransform>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FInputAxisKeyMapping
{
public:
	FInputAxisKeyMapping(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetAxisName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	float GetScale() {
		return memory.read<float>(m_addr + 8);
	}
	struct FKey GetKey() {
		return memory.read<struct FKey>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FBakedAnimationState
{
public:
	FBakedAnimationState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetStateName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct TArray<struct FBakedStateExitTransition> GetTransitions() {
		return memory.read<struct TArray<struct FBakedStateExitTransition>>(m_addr + 8);
	}
	int32_t GetStateRootNodeIndex() {
		return memory.read<int32_t>(m_addr + 24);
	}
	int32_t GetStartNotify() {
		return memory.read<int32_t>(m_addr + 28);
	}
	int32_t GetEndNotify() {
		return memory.read<int32_t>(m_addr + 32);
	}
	int32_t GetFullyBlendedNotify() {
		return memory.read<int32_t>(m_addr + 36);
	}
	bool GetbIsAConduit() {
		return memory.read<bool>(m_addr + 40);
	}
	int32_t GetEntryRuleNodeIndex() {
		return memory.read<int32_t>(m_addr + 44);
	}
	struct TArray<int32_t> GetPlayerNodeIndices() {
		return memory.read<struct TArray<int32_t>>(m_addr + 48);
	}
	struct TArray<int32_t> GetLayerNodeIndices() {
		return memory.read<struct TArray<int32_t>>(m_addr + 64);
	}
	bool GetbAlwaysResetOnEntry() {
		return memory.read<bool>(m_addr + 80);
	}

private:
	std::uint64_t m_addr = 0;
};class FInputBlendPose
{
public:
	FInputBlendPose(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FBranchFilter> GetBranchFilters() {
		return memory.read<struct TArray<struct FBranchFilter>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetTangentColor
{
public:
	FSetTangentColor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLinearColor GetTangentColor() {
		return memory.read<struct FLinearColor>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FAnimationErrorStats
{
public:
	FAnimationErrorStats(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FGetWorldLocationAtDistanceAlongSpline
{
public:
	FGetWorldLocationAtDistanceAlongSpline(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetDistance() {
		return memory.read<float>(m_addr + 0);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FPoseSnapshot
{
public:
	FPoseSnapshot(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FTransform> GetLocalTransforms() {
		return memory.read<struct TArray<struct FTransform>>(m_addr + 0);
	}
	struct TArray<struct FName> GetBoneNames() {
		return memory.read<struct TArray<struct FName>>(m_addr + 16);
	}
	struct FName GetSkeletalMeshName() {
		return memory.read<struct FName>(m_addr + 32);
	}
	struct FName GetSnapshotName() {
		return memory.read<struct FName>(m_addr + 40);
	}
	bool GetbIsValid() {
		return memory.read<bool>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};class FBlueprintInputAxisKeyDelegateBinding
{
public:
	FBlueprintInputAxisKeyDelegateBinding(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKey GetAxisKey() {
		return memory.read<struct FKey>(m_addr + 8);
	}
	struct FName GetFunctionNameToBind() {
		return memory.read<struct FName>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetActorsInSelectionRectangle
{
public:
	FGetActorsInSelectionRectangle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	AActor GetClassFilter() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return AActor(ptr_addr);
	}
	struct FVector2D GetFirstPoint() {
		return memory.read<struct FVector2D>(m_addr + 8);
	}
	struct FVector2D GetSecondPoint() {
		return memory.read<struct FVector2D>(m_addr + 16);
	}
	struct TArray<struct AActor> GetOutActors() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 24);
		return struct TArray<struct AActor>(ptr_addr);
	}
	bool GetbIncludeNonCollidingComponents() {
		return memory.read<bool>(m_addr + 40);
	}
	bool GetbActorMustBeFullyEnclosed() {
		return memory.read<bool>(m_addr + 41);
	}

private:
	std::uint64_t m_addr = 0;
};class FAnimNode_Root
{
public:
	FAnimNode_Root(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FPoseLink GetResult() {
		return memory.read<struct FPoseLink>(m_addr + 16);
	}
	struct FName GetName() {
		return memory.read<struct FName>(m_addr + 32);
	}
	struct FName GetGroup() {
		return memory.read<struct FName>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetOutputToBusOnly
{
public:
	FSetOutputToBusOnly(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbInOutputToBusOnly() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FActorHasTag
{
public:
	FActorHasTag(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetTag() {
		return memory.read<struct FName>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FAddComponent
{
public:
	FAddComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetTemplateName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	bool GetbManualAttachment() {
		return memory.read<bool>(m_addr + 8);
	}
	struct FTransform GetRelativeTransform() {
		return memory.read<struct FTransform>(m_addr + 16);
	}
	struct UObject GetComponentTemplateContext() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 64);
		return struct UObject(ptr_addr);
	}
	bool GetbDeferredFinish() {
		return memory.read<bool>(m_addr + 72);
	}
	struct UActorComponent GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 80);
		return struct UActorComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FPrecomputedSkyLightInstanceData
{
public:
	FPrecomputedSkyLightInstanceData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FGuid GetLightGuid() {
		return memory.read<struct FGuid>(m_addr + 184);
	}
	float GetAverageBrightness() {
		return memory.read<float>(m_addr + 200);
	}

private:
	std::uint64_t m_addr = 0;
};class FRotationTrack
{
public:
	FRotationTrack(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FQuat> GetRotKeys() {
		return memory.read<struct TArray<struct FQuat>>(m_addr + 0);
	}
	struct TArray<float> GetTimes() {
		return memory.read<struct TArray<float>>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FAddComponentByClass
{
public:
	FAddComponentByClass(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UActorComponent GetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return UActorComponent(ptr_addr);
	}
	bool GetbManualAttachment() {
		return memory.read<bool>(m_addr + 8);
	}
	struct FTransform GetRelativeTransform() {
		return memory.read<struct FTransform>(m_addr + 16);
	}
	bool GetbDeferredFinish() {
		return memory.read<bool>(m_addr + 64);
	}
	struct UActorComponent GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return struct UActorComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsLooping
{
public:
	FIsLooping(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FClientAdjustRootMotionSourcePosition
{
public:
	FClientAdjustRootMotionSourcePosition(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetTimestamp() {
		return memory.read<float>(m_addr + 0);
	}
	struct FRootMotionSourceGroup GetServerRootMotion() {
		return memory.read<struct FRootMotionSourceGroup>(m_addr + 8);
	}
	bool GetbHasAnimRootMotion() {
		return memory.read<bool>(m_addr + 64);
	}
	float GetServerMontageTrackPosition() {
		return memory.read<float>(m_addr + 68);
	}
	struct FVector GetServerLoc() {
		return memory.read<struct FVector>(m_addr + 72);
	}
	struct FVector_NetQuantizeNormal GetServerRotation() {
		return memory.read<struct FVector_NetQuantizeNormal>(m_addr + 84);
	}
	float GetServerVelZ() {
		return memory.read<float>(m_addr + 96);
	}
	struct UPrimitiveComponent GetServerBase() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 104);
		return struct UPrimitiveComponent(ptr_addr);
	}
	struct FName GetServerBoneName() {
		return memory.read<struct FName>(m_addr + 112);
	}
	bool GetbHasBase() {
		return memory.read<bool>(m_addr + 120);
	}
	bool GetbBaseRelativePosition() {
		return memory.read<bool>(m_addr + 121);
	}
	char GetServerMovementMode() {
		return memory.read<char>(m_addr + 122);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetFrameRateLimit
{
public:
	FGetFrameRateLimit(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FDetachRootComponentFromParent
{
public:
	FDetachRootComponentFromParent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbMaintainWorldPosition() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FFontImportOptionsData
{
public:
	FFontImportOptionsData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetFontName() {
		return memory.read<struct FString>(m_addr + 0);
	}
	float GetHeight() {
		return memory.read<float>(m_addr + 16);
	}
	char GetbEnableAntialiasing() {
		return memory.read<char>(m_addr + 20);
	}
	char GetbEnableBold() {
		return memory.read<char>(m_addr + 20);
	}
	char GetbEnableItalic() {
		return memory.read<char>(m_addr + 20);
	}
	char GetbEnableUnderline() {
		return memory.read<char>(m_addr + 20);
	}
	char GetbAlphaOnly() {
		return memory.read<char>(m_addr + 20);
	}
	enum class EFontImportCharacterSet GetCharacterSet() {
		return memory.read<enum class EFontImportCharacterSet>(m_addr + 24);
	}
	struct FString GetChars() {
		return memory.read<struct FString>(m_addr + 32);
	}
	struct FString GetUnicodeRange() {
		return memory.read<struct FString>(m_addr + 48);
	}
	struct FString GetCharsFilePath() {
		return memory.read<struct FString>(m_addr + 64);
	}
	struct FString GetCharsFileWildcard() {
		return memory.read<struct FString>(m_addr + 80);
	}
	char GetbCreatePrintableOnly() {
		return memory.read<char>(m_addr + 96);
	}
	char GetbIncludeASCIIRange() {
		return memory.read<char>(m_addr + 96);
	}
	struct FLinearColor GetForegroundColor() {
		return memory.read<struct FLinearColor>(m_addr + 100);
	}
	char GetbEnableDropShadow() {
		return memory.read<char>(m_addr + 116);
	}
	int32_t GetTexturePageWidth() {
		return memory.read<int32_t>(m_addr + 120);
	}
	int32_t GetTexturePageMaxHeight() {
		return memory.read<int32_t>(m_addr + 124);
	}
	int32_t GetXPadding() {
		return memory.read<int32_t>(m_addr + 128);
	}
	int32_t GetYPadding() {
		return memory.read<int32_t>(m_addr + 132);
	}
	int32_t GetExtendBoxTop() {
		return memory.read<int32_t>(m_addr + 136);
	}
	int32_t GetExtendBoxBottom() {
		return memory.read<int32_t>(m_addr + 140);
	}
	int32_t GetExtendBoxRight() {
		return memory.read<int32_t>(m_addr + 144);
	}
	int32_t GetExtendBoxLeft() {
		return memory.read<int32_t>(m_addr + 148);
	}
	char GetbEnableLegacyMode() {
		return memory.read<char>(m_addr + 152);
	}
	int32_t GetKerning() {
		return memory.read<int32_t>(m_addr + 156);
	}
	char GetbUseDistanceFieldAlpha() {
		return memory.read<char>(m_addr + 160);
	}
	int32_t GetDistanceFieldScaleFactor() {
		return memory.read<int32_t>(m_addr + 164);
	}
	float GetDistanceFieldScanRadiusScale() {
		return memory.read<float>(m_addr + 168);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetActorEyesViewPoint
{
public:
	FGetActorEyesViewPoint(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetOutLocation() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FRotator GetOutRotation() {
		return memory.read<struct FRotator>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FRootMotionSource_RadialForce
{
public:
	FRootMotionSource_RadialForce(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 152);
	}
	struct AActor GetLocationActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 168);
		return struct AActor(ptr_addr);
	}
	float GetRadius() {
		return memory.read<float>(m_addr + 176);
	}
	float GetStrength() {
		return memory.read<float>(m_addr + 180);
	}
	bool GetbIsPush() {
		return memory.read<bool>(m_addr + 184);
	}
	bool GetbNoZForce() {
		return memory.read<bool>(m_addr + 185);
	}
	struct UCurveFloat GetStrengthDistanceFalloff() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 192);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat GetStrengthOverTime() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 200);
		return struct UCurveFloat(ptr_addr);
	}
	bool GetbUseFixedWorldDirection() {
		return memory.read<bool>(m_addr + 208);
	}
	struct FRotator GetFixedWorldDirection() {
		return memory.read<struct FRotator>(m_addr + 212);
	}

private:
	std::uint64_t m_addr = 0;
};class FKey_IsDigital
{
public:
	FKey_IsDigital(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKey GetKey() {
		return memory.read<struct FKey>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FReceiveActorOnClicked
{
public:
	FReceiveActorOnClicked(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKey GetButtonPressed() {
		return memory.read<struct FKey>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetDistanceTo
{
public:
	FGetDistanceTo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetOtherActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FInputEvent_IsLeftShiftDown
{
public:
	FInputEvent_IsLeftShiftDown(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FInputEvent GetInput() {
		return memory.read<struct FInputEvent>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetActorRelativeScale3D
{
public:
	FGetActorRelativeScale3D(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetActorRightVector
{
public:
	FGetActorRightVector(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetActorScale3D
{
public:
	FGetActorScale3D(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsVirtualized
{
public:
	FIsVirtualized(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FNamedCurveValue
{
public:
	FNamedCurveValue(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	float GetValue() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_OnLogout
{
public:
	FK2_OnLogout(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AController GetExitingController() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AController(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetActorUpVector
{
public:
	FGetActorUpVector(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FAsTimeZoneDate_DateTime
{
public:
	FAsTimeZoneDate_DateTime(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDateTime GetInDateTime() {
		return memory.read<struct FDateTime>(m_addr + 0);
	}
	struct FString GetInTimeZone() {
		return memory.read<struct FString>(m_addr + 8);
	}
	struct FText GetReturnValue() {
		return memory.read<struct FText>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetLightFalloffExponent
{
public:
	FSetLightFalloffExponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewLightFalloffExponent() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FAssetManagerRedirect
{
public:
	FAssetManagerRedirect(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetOld() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FString GetNew() {
		return memory.read<struct FString>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetAllChildActors
{
public:
	FGetAllChildActors(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct AActor> GetChildActors() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct TArray<struct AActor>(ptr_addr);
	}
	bool GetbIncludeDescendants() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FConstraintProfileProperties
{
public:
	FConstraintProfileProperties(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetProjectionLinearTolerance() {
		return memory.read<float>(m_addr + 0);
	}
	float GetProjectionAngularTolerance() {
		return memory.read<float>(m_addr + 4);
	}
	float GetProjectionLinearAlpha() {
		return memory.read<float>(m_addr + 8);
	}
	float GetProjectionAngularAlpha() {
		return memory.read<float>(m_addr + 12);
	}
	float GetLinearBreakThreshold() {
		return memory.read<float>(m_addr + 16);
	}
	float GetLinearPlasticityThreshold() {
		return memory.read<float>(m_addr + 20);
	}
	float GetAngularBreakThreshold() {
		return memory.read<float>(m_addr + 24);
	}
	float GetAngularPlasticityThreshold() {
		return memory.read<float>(m_addr + 28);
	}
	struct FLinearConstraint GetLinearLimit() {
		return memory.read<struct FLinearConstraint>(m_addr + 32);
	}
	struct FConeConstraint GetConeLimit() {
		return memory.read<struct FConeConstraint>(m_addr + 60);
	}
	struct FTwistConstraint GetTwistLimit() {
		return memory.read<struct FTwistConstraint>(m_addr + 92);
	}
	struct FLinearDriveConstraint GetLinearDrive() {
		return memory.read<struct FLinearDriveConstraint>(m_addr + 120);
	}
	struct FAngularDriveConstraint GetAngularDrive() {
		return memory.read<struct FAngularDriveConstraint>(m_addr + 196);
	}
	char GetbDisableCollision() {
		return memory.read<char>(m_addr + 272);
	}
	char GetbParentDominates() {
		return memory.read<char>(m_addr + 272);
	}
	char GetbEnableProjection() {
		return memory.read<char>(m_addr + 272);
	}
	char GetbEnableSoftProjection() {
		return memory.read<char>(m_addr + 272);
	}
	char GetbAngularBreakable() {
		return memory.read<char>(m_addr + 272);
	}
	char GetbAngularPlasticity() {
		return memory.read<char>(m_addr + 272);
	}
	char GetbLinearBreakable() {
		return memory.read<char>(m_addr + 272);
	}
	char GetbLinearPlasticity() {
		return memory.read<char>(m_addr + 272);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetAttachedActors
{
public:
	FGetAttachedActors(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct AActor> GetOutActors() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct TArray<struct AActor>(ptr_addr);
	}
	bool GetbResetArray() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetComponentByClass
{
public:
	FGetComponentByClass(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UActorComponent GetComponentClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return UActorComponent(ptr_addr);
	}
	struct UActorComponent GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UActorComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetSubtitlesEnabled
{
public:
	FSetSubtitlesEnabled(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbEnabled() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetComponentsByInterface
{
public:
	FGetComponentsByInterface(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UInterface GetInterface() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return UInterface(ptr_addr);
	}
	struct TArray<struct UActorComponent> GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct TArray<struct UActorComponent>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetInputAxisKeyValue
{
public:
	FGetInputAxisKeyValue(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKey GetInputAxisKey() {
		return memory.read<struct FKey>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetCastVolumetricShadow
{
public:
	FSetCastVolumetricShadow(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbNewValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FNot_Int
{
public:
	FNot_Int(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetA() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FPaintedVertex
{
public:
	FPaintedVertex(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector Getposition() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FColor GetColor() {
		return memory.read<struct FColor>(m_addr + 12);
	}
	struct FVector4 GetNormal() {
		return memory.read<struct FVector4>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetFXSystemAsset
{
public:
	FGetFXSystemAsset(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UFXSystemAsset GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UFXSystemAsset(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FTextToUpper
{
public:
	FTextToUpper(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetInText() {
		return memory.read<struct FText>(m_addr + 0);
	}
	struct FText GetReturnValue() {
		return memory.read<struct FText>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetInputAxisValue
{
public:
	FGetInputAxisValue(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetInputAxisName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_GetActorLocation
{
public:
	FK2_GetActorLocation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetInstigator
{
public:
	FGetInstigator(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APawn GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APawn(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetTangentAtSplinePoint
{
public:
	FGetTangentAtSplinePoint(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetPointIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	enum class ESplineCoordinateSpace GetCoordinateSpace() {
		return memory.read<enum class ESplineCoordinateSpace>(m_addr + 4);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetLocalRole
{
public:
	FGetLocalRole(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class ENetRole GetReturnValue() {
		return memory.read<enum class ENetRole>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetRelativePathToRoot
{
public:
	FGetRelativePathToRoot(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetRemoteRole
{
public:
	FGetRemoteRole(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class ENetRole GetReturnValue() {
		return memory.read<enum class ENetRole>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetBoneMass
{
public:
	FGetBoneMass(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	bool GetbScaleMass() {
		return memory.read<bool>(m_addr + 8);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FMatrix_GetScaleVector
{
public:
	FMatrix_GetScaleVector(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMatrix GetM() {
		return memory.read<struct FMatrix>(m_addr + 0);
	}
	float GetTolerance() {
		return memory.read<float>(m_addr + 64);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 68);
	}

private:
	std::uint64_t m_addr = 0;
};class FArray_RemoveItem
{
public:
	FArray_RemoveItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<int32_t> GetTargetArray() {
		return memory.read<struct TArray<int32_t>>(m_addr + 0);
	}
	int32_t GetItem() {
		return memory.read<int32_t>(m_addr + 16);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetVelocity
{
public:
	FGetVelocity(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetGroupsToIgnore
{
public:
	FSetGroupsToIgnore(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetGroupFlags() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FAnimNode_SequencePlayer
{
public:
	FAnimNode_SequencePlayer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimSequenceBase GetSequence() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct UAnimSequenceBase(ptr_addr);
	}
	float GetPlayRateBasis() {
		return memory.read<float>(m_addr + 64);
	}
	float GetPlayRate() {
		return memory.read<float>(m_addr + 68);
	}
	struct FInputScaleBiasClamp GetPlayRateScaleBiasClamp() {
		return memory.read<struct FInputScaleBiasClamp>(m_addr + 72);
	}
	float GetStartPosition() {
		return memory.read<float>(m_addr + 120);
	}
	bool GetbLoopAnimation() {
		return memory.read<bool>(m_addr + 124);
	}

private:
	std::uint64_t m_addr = 0;
};class FClientVeryShortAdjustPosition
{
public:
	FClientVeryShortAdjustPosition(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetTimestamp() {
		return memory.read<float>(m_addr + 0);
	}
	struct FVector GetNewLoc() {
		return memory.read<struct FVector>(m_addr + 4);
	}
	struct UPrimitiveComponent GetNewBase() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UPrimitiveComponent(ptr_addr);
	}
	struct FName GetNewBaseBoneName() {
		return memory.read<struct FName>(m_addr + 24);
	}
	bool GetbHasBase() {
		return memory.read<bool>(m_addr + 32);
	}
	bool GetbBaseRelativePosition() {
		return memory.read<bool>(m_addr + 33);
	}
	char GetServerMovementMode() {
		return memory.read<char>(m_addr + 34);
	}

private:
	std::uint64_t m_addr = 0;
};class FHasAuthority
{
public:
	FHasAuthority(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsActorTickEnabled
{
public:
	FIsActorTickEnabled(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FBreakRotIntoAxes
{
public:
	FBreakRotIntoAxes(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRotator GetInRot() {
		return memory.read<struct FRotator>(m_addr + 0);
	}
	struct FVector GetX() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	struct FVector GetY() {
		return memory.read<struct FVector>(m_addr + 24);
	}
	struct FVector GetZ() {
		return memory.read<struct FVector>(m_addr + 36);
	}

private:
	std::uint64_t m_addr = 0;
};class FRemoveAxisMapping
{
public:
	FRemoveAxisMapping(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FInputAxisKeyMapping GetKeyMapping() {
		return memory.read<struct FInputAxisKeyMapping>(m_addr + 0);
	}
	bool GetbForceRebuildKeymaps() {
		return memory.read<bool>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetDataTableColumnAsString
{
public:
	FGetDataTableColumnAsString(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UDataTable GetDataTable() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UDataTable(ptr_addr);
	}
	struct FName GetPropertyName() {
		return memory.read<struct FName>(m_addr + 8);
	}
	struct TArray<struct FString> GetReturnValue() {
		return memory.read<struct TArray<struct FString>>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FVirtualBone
{
public:
	FVirtualBone(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetSourceBoneName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FName GetTargetBoneName() {
		return memory.read<struct FName>(m_addr + 8);
	}
	struct FName GetVirtualBoneName() {
		return memory.read<struct FName>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsChildActor
{
public:
	FIsChildActor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_AddActorWorldRotation
{
public:
	FK2_AddActorWorldRotation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRotator GetDeltaRotation() {
		return memory.read<struct FRotator>(m_addr + 0);
	}
	bool GetbSweep() {
		return memory.read<bool>(m_addr + 12);
	}
	struct FHitResult GetSweepHitResult() {
		return memory.read<struct FHitResult>(m_addr + 16);
	}
	bool GetbTeleport() {
		return memory.read<bool>(m_addr + 152);
	}

private:
	std::uint64_t m_addr = 0;
};class FKey_IsValid
{
public:
	FKey_IsValid(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKey GetKey() {
		return memory.read<struct FKey>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FKey_GetNavigationDirectionFromKey
{
public:
	FKey_GetNavigationDirectionFromKey(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKeyEvent GetInKeyEvent() {
		return memory.read<struct FKeyEvent>(m_addr + 0);
	}
	enum class EUINavigation GetReturnValue() {
		return memory.read<enum class EUINavigation>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetOwningPawn
{
public:
	FGetOwningPawn(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APawn GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APawn(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_AddActorWorldTransform
{
public:
	FK2_AddActorWorldTransform(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTransform GetDeltaTransform() {
		return memory.read<struct FTransform>(m_addr + 0);
	}
	bool GetbSweep() {
		return memory.read<bool>(m_addr + 48);
	}
	struct FHitResult GetSweepHitResult() {
		return memory.read<struct FHitResult>(m_addr + 52);
	}
	bool GetbTeleport() {
		return memory.read<bool>(m_addr + 188);
	}

private:
	std::uint64_t m_addr = 0;
};class FPlayerCanRestart
{
public:
	FPlayerCanRestart(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APlayerController GetPlayer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APlayerController(ptr_addr);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetEndScale
{
public:
	FSetEndScale(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector2D GetEndScale() {
		return memory.read<struct FVector2D>(m_addr + 0);
	}
	bool GetbUpdateMesh() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FClientAddTextureStreamingLoc
{
public:
	FClientAddTextureStreamingLoc(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetInLoc() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	float GetDuration() {
		return memory.read<float>(m_addr + 12);
	}
	bool GetbOverrideLocation() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FFloatSpringInterp
{
public:
	FFloatSpringInterp(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetCurrent() {
		return memory.read<float>(m_addr + 0);
	}
	float GetTarget() {
		return memory.read<float>(m_addr + 4);
	}
	struct FFloatSpringState GetSpringState() {
		return memory.read<struct FFloatSpringState>(m_addr + 8);
	}
	float GetStiffness() {
		return memory.read<float>(m_addr + 16);
	}
	float GetCriticalDampingFactor() {
		return memory.read<float>(m_addr + 20);
	}
	float GetDeltaTime() {
		return memory.read<float>(m_addr + 24);
	}
	float GetMass() {
		return memory.read<float>(m_addr + 28);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_DrawTexture
{
public:
	FK2_DrawTexture(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTexture GetRenderTexture() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UTexture(ptr_addr);
	}
	struct FVector2D GetScreenPosition() {
		return memory.read<struct FVector2D>(m_addr + 8);
	}
	struct FVector2D GetScreenSize() {
		return memory.read<struct FVector2D>(m_addr + 16);
	}
	struct FVector2D GetCoordinatePosition() {
		return memory.read<struct FVector2D>(m_addr + 24);
	}
	struct FVector2D GetCoordinateSize() {
		return memory.read<struct FVector2D>(m_addr + 32);
	}
	struct FLinearColor GetRenderColor() {
		return memory.read<struct FLinearColor>(m_addr + 40);
	}
	enum class EBlendMode GetBlendMode() {
		return memory.read<enum class EBlendMode>(m_addr + 56);
	}
	float GetRotation() {
		return memory.read<float>(m_addr + 60);
	}
	struct FVector2D GetPivotPoint() {
		return memory.read<struct FVector2D>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};class FAnimMontageInstance
{
public:
	FAnimMontageInstance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimMontage GetMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimMontage(ptr_addr);
	}
	bool GetbPlaying() {
		return memory.read<bool>(m_addr + 40);
	}
	float GetDefaultBlendTimeMultiplier() {
		return memory.read<float>(m_addr + 44);
	}
	struct TArray<int32_t> GetNextSections() {
		return memory.read<struct TArray<int32_t>>(m_addr + 232);
	}
	struct TArray<int32_t> GetPrevSections() {
		return memory.read<struct TArray<int32_t>>(m_addr + 248);
	}
	struct TArray<struct FAnimNotifyEvent> GetActiveStateBranchingPoints() {
		return memory.read<struct TArray<struct FAnimNotifyEvent>>(m_addr + 280);
	}
	float Getposition() {
		return memory.read<float>(m_addr + 296);
	}
	float GetPlayRate() {
		return memory.read<float>(m_addr + 300);
	}
	struct FAlphaBlend GetBlend() {
		return memory.read<struct FAlphaBlend>(m_addr + 304);
	}
	int32_t GetDisableRootMotionCount() {
		return memory.read<int32_t>(m_addr + 396);
	}

private:
	std::uint64_t m_addr = 0;
};class FGreater_FloatFloat
{
public:
	FGreater_FloatFloat(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetA() {
		return memory.read<float>(m_addr + 0);
	}
	float GetB() {
		return memory.read<float>(m_addr + 4);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_AddActorWorldTransformKeepScale
{
public:
	FK2_AddActorWorldTransformKeepScale(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTransform GetDeltaTransform() {
		return memory.read<struct FTransform>(m_addr + 0);
	}
	bool GetbSweep() {
		return memory.read<bool>(m_addr + 48);
	}
	struct FHitResult GetSweepHitResult() {
		return memory.read<struct FHitResult>(m_addr + 52);
	}
	bool GetbTeleport() {
		return memory.read<bool>(m_addr + 188);
	}

private:
	std::uint64_t m_addr = 0;
};class FRollbackNetStartupActorInfo
{
public:
	FRollbackNetStartupActorInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetArchetype() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UObject(ptr_addr);
	}
	struct ULevel GetLevel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct ULevel(ptr_addr);
	}
	struct TArray<struct UObject> GetObjReferences() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 160);
		return struct TArray<struct UObject>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_AttachRootComponentTo
{
public:
	FK2_AttachRootComponentTo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USceneComponent GetInParent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct USceneComponent(ptr_addr);
	}
	struct FName GetInSocketName() {
		return memory.read<struct FName>(m_addr + 8);
	}
	enum class EAttachLocation GetAttachLocationType() {
		return memory.read<enum class EAttachLocation>(m_addr + 16);
	}
	bool GetbWeldSimulatedBodies() {
		return memory.read<bool>(m_addr + 17);
	}

private:
	std::uint64_t m_addr = 0;
};class FBPVariableMetaDataEntry
{
public:
	FBPVariableMetaDataEntry(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetDataKey() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FString GetDataValue() {
		return memory.read<struct FString>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetCookedFFTDataForAllPlayingSounds
{
public:
	FGetCookedFFTDataForAllPlayingSounds(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FSoundWaveSpectralDataPerSound> GetOutSoundWaveSpectralData() {
		return memory.read<struct TArray<struct FSoundWaveSpectralDataPerSound>>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FNavigationSegmentLink
{
public:
	FNavigationSegmentLink(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetLeftStart() {
		return memory.read<struct FVector>(m_addr + 48);
	}
	struct FVector GetLeftEnd() {
		return memory.read<struct FVector>(m_addr + 60);
	}
	struct FVector GetRightStart() {
		return memory.read<struct FVector>(m_addr + 72);
	}
	struct FVector GetRightEnd() {
		return memory.read<struct FVector>(m_addr + 84);
	}

private:
	std::uint64_t m_addr = 0;
};class FRandomBoolWithWeight
{
public:
	FRandomBoolWithWeight(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Getweight() {
		return memory.read<float>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetAllBodiesPhysicsBlendWeight
{
public:
	FSetAllBodiesPhysicsBlendWeight(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetPhysicsBlendWeight() {
		return memory.read<float>(m_addr + 0);
	}
	bool GetbSkipCustomPhysicsType() {
		return memory.read<bool>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_AttachToActor
{
public:
	FK2_AttachToActor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetParentActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}
	struct FName GetSocketName() {
		return memory.read<struct FName>(m_addr + 8);
	}
	enum class EAttachmentRule GetLocationRule() {
		return memory.read<enum class EAttachmentRule>(m_addr + 16);
	}
	enum class EAttachmentRule GetRotationRule() {
		return memory.read<enum class EAttachmentRule>(m_addr + 17);
	}
	enum class EAttachmentRule GetScaleRule() {
		return memory.read<enum class EAttachmentRule>(m_addr + 18);
	}
	bool GetbWeldSimulatedBodies() {
		return memory.read<bool>(m_addr + 19);
	}

private:
	std::uint64_t m_addr = 0;
};class FVector_IsUnit
{
public:
	FVector_IsUnit(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetA() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	float GetSquaredLenthTolerance() {
		return memory.read<float>(m_addr + 12);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_OnEndViewTarget
{
public:
	FK2_OnEndViewTarget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APlayerController GetPC() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APlayerController(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetSkeletalMesh
{
public:
	FSetSkeletalMesh(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USkeletalMesh GetNewMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct USkeletalMesh(ptr_addr);
	}
	bool GetbReinitPose() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_SetActorRelativeLocation
{
public:
	FK2_SetActorRelativeLocation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetNewRelativeLocation() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	bool GetbSweep() {
		return memory.read<bool>(m_addr + 12);
	}
	struct FHitResult GetSweepHitResult() {
		return memory.read<struct FHitResult>(m_addr + 16);
	}
	bool GetbTeleport() {
		return memory.read<bool>(m_addr + 152);
	}

private:
	std::uint64_t m_addr = 0;
};class FImportanceTexture
{
public:
	FImportanceTexture(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FIntPoint GetSize() {
		return memory.read<struct FIntPoint>(m_addr + 0);
	}
	int32_t GetNumMips() {
		return memory.read<int32_t>(m_addr + 8);
	}
	struct TArray<float> GetMarginalCDF() {
		return memory.read<struct TArray<float>>(m_addr + 16);
	}
	struct TArray<float> GetConditionalCDF() {
		return memory.read<struct TArray<float>>(m_addr + 32);
	}
	struct TArray<struct FColor> GetTextureData() {
		return memory.read<struct TArray<struct FColor>>(m_addr + 48);
	}
	struct TWeakObjectPtr<UTexture2D> GetTexture() {
		return memory.read<struct TWeakObjectPtr<UTexture2D>>(m_addr + 64);
	}
	enum class EImportanceWeight GetWeighting() {
		return memory.read<enum class EImportanceWeight>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_SetActorRelativeRotation
{
public:
	FK2_SetActorRelativeRotation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRotator GetNewRelativeRotation() {
		return memory.read<struct FRotator>(m_addr + 0);
	}
	bool GetbSweep() {
		return memory.read<bool>(m_addr + 12);
	}
	struct FHitResult GetSweepHitResult() {
		return memory.read<struct FHitResult>(m_addr + 16);
	}
	bool GetbTeleport() {
		return memory.read<bool>(m_addr + 152);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_SetActorRelativeTransform
{
public:
	FK2_SetActorRelativeTransform(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTransform GetNewRelativeTransform() {
		return memory.read<struct FTransform>(m_addr + 0);
	}
	bool GetbSweep() {
		return memory.read<bool>(m_addr + 48);
	}
	struct FHitResult GetSweepHitResult() {
		return memory.read<struct FHitResult>(m_addr + 52);
	}
	bool GetbTeleport() {
		return memory.read<bool>(m_addr + 188);
	}

private:
	std::uint64_t m_addr = 0;
};class FInstancedStaticMeshLightMapInstanceData
{
public:
	FInstancedStaticMeshLightMapInstanceData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTransform GetTransform() {
		return memory.read<struct FTransform>(m_addr + 0);
	}
	struct TArray<struct FGuid> GetMapBuildDataIds() {
		return memory.read<struct TArray<struct FGuid>>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetSynchronizationState
{
public:
	FGetSynchronizationState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class ETimecodeProviderSynchronizationState GetReturnValue() {
		return memory.read<enum class ETimecodeProviderSynchronizationState>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FClientTeamMessage
{
public:
	FClientTeamMessage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APlayerState GetSenderPlayerState() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APlayerState(ptr_addr);
	}
	struct FString GetS() {
		return memory.read<struct FString>(m_addr + 8);
	}
	struct FName GetType() {
		return memory.read<struct FName>(m_addr + 24);
	}
	float GetMsgLifeTime() {
		return memory.read<float>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_SetActorRotation
{
public:
	FK2_SetActorRotation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRotator GetNewRotation() {
		return memory.read<struct FRotator>(m_addr + 0);
	}
	bool GetbTeleportPhysics() {
		return memory.read<bool>(m_addr + 12);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 13);
	}

private:
	std::uint64_t m_addr = 0;
};class FInterpLookupTrack
{
public:
	FInterpLookupTrack(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FInterpLookupPoint> GetPoints() {
		return memory.read<struct TArray<struct FInterpLookupPoint>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FAddInstances
{
public:
	FAddInstances(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FTransform> GetInstanceTransforms() {
		return memory.read<struct TArray<struct FTransform>>(m_addr + 0);
	}
	bool GetbShouldReturnIndices() {
		return memory.read<bool>(m_addr + 16);
	}
	struct TArray<int32_t> GetReturnValue() {
		return memory.read<struct TArray<int32_t>>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_SetActorTransform
{
public:
	FK2_SetActorTransform(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTransform GetNewTransform() {
		return memory.read<struct FTransform>(m_addr + 0);
	}
	bool GetbSweep() {
		return memory.read<bool>(m_addr + 48);
	}
	struct FHitResult GetSweepHitResult() {
		return memory.read<struct FHitResult>(m_addr + 52);
	}
	bool GetbTeleport() {
		return memory.read<bool>(m_addr + 188);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 189);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_TeleportTo
{
public:
	FK2_TeleportTo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetDestLocation() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FRotator GetDestRotation() {
		return memory.read<struct FRotator>(m_addr + 12);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FVector4_Normalize3
{
public:
	FVector4_Normalize3(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector4 GetA() {
		return memory.read<struct FVector4>(m_addr + 0);
	}
	float GetTolerance() {
		return memory.read<float>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FNotEqual_Vector2DVector2D
{
public:
	FNotEqual_Vector2DVector2D(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector2D GetA() {
		return memory.read<struct FVector2D>(m_addr + 0);
	}
	struct FVector2D GetB() {
		return memory.read<struct FVector2D>(m_addr + 8);
	}
	float GetErrorTolerance() {
		return memory.read<float>(m_addr + 16);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FMakeNoise
{
public:
	FMakeNoise(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetNoiseMaker() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}
	float GetLoudness() {
		return memory.read<float>(m_addr + 8);
	}
	struct FVector GetNoiseLocation() {
		return memory.read<struct FVector>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FFindTransformClosestToWorldLocation
{
public:
	FFindTransformClosestToWorldLocation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetWorldLocation() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	enum class ESplineCoordinateSpace GetCoordinateSpace() {
		return memory.read<enum class ESplineCoordinateSpace>(m_addr + 12);
	}
	bool GetbUseScale() {
		return memory.read<bool>(m_addr + 13);
	}
	struct FTransform GetReturnValue() {
		return memory.read<struct FTransform>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FTextTrimPreceding
{
public:
	FTextTrimPreceding(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetInText() {
		return memory.read<struct FText>(m_addr + 0);
	}
	struct FText GetReturnValue() {
		return memory.read<struct FText>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FDelegateArray
{
public:
	FDelegateArray(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FDelegate> GetDelegates() {
		return memory.read<struct TArray<struct FDelegate>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetShadowViewSampleCountScale
{
public:
	FSetShadowViewSampleCountScale(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FRawDistributionVector
{
public:
	FRawDistributionVector(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetMinValue() {
		return memory.read<float>(m_addr + 32);
	}
	float GetMaxValue() {
		return memory.read<float>(m_addr + 36);
	}
	struct FVector GetMinValueVec() {
		return memory.read<struct FVector>(m_addr + 40);
	}
	struct FVector GetMaxValueVec() {
		return memory.read<struct FVector>(m_addr + 52);
	}
	struct UDistributionVector GetDistribution() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 64);
		return struct UDistributionVector(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FReceiveActorEndOverlap
{
public:
	FReceiveActorEndOverlap(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetOtherActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FResetDynamics
{
public:
	FResetDynamics(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class ETeleportType GetInTeleportType() {
		return memory.read<enum class ETeleportType>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FReceiveActorOnInputTouchBegin
{
public:
	FReceiveActorOnInputTouchBegin(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class ETouchIndex GetFingerIndex() {
		return memory.read<enum class ETouchIndex>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsDisabled
{
public:
	FIsDisabled(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FReceiveActorOnInputTouchEnter
{
public:
	FReceiveActorOnInputTouchEnter(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class ETouchIndex GetFingerIndex() {
		return memory.read<enum class ETouchIndex>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetDecalShadowmapTexture
{
public:
	FGetDecalShadowmapTexture(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTexture GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UTexture(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FAnimSyncMarker
{
public:
	FAnimSyncMarker(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetMarkerName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	float GetTime() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FConv_BoolToFloat
{
public:
	FConv_BoolToFloat(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetInBool() {
		return memory.read<bool>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FReceiveActorOnReleased
{
public:
	FReceiveActorOnReleased(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKey GetButtonReleased() {
		return memory.read<struct FKey>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FAddInstanceWorldSpace
{
public:
	FAddInstanceWorldSpace(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTransform GetWorldTransform() {
		return memory.read<struct FTransform>(m_addr + 0);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};class FReceiveAnyDamage
{
public:
	FReceiveAnyDamage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetDamage() {
		return memory.read<float>(m_addr + 0);
	}
	struct UDamageType GetDamageType() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UDamageType(ptr_addr);
	}
	struct AController GetInstigatedBy() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct AController(ptr_addr);
	}
	struct AActor GetDamageCauser() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 24);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FTransformBaseConstraint
{
public:
	FTransformBaseConstraint(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FRigTransformConstraint> GetTransformConstraints() {
		return memory.read<struct TArray<struct FRigTransformConstraint>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetCurrentSwing1
{
public:
	FGetCurrentSwing1(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FAnimNode_LinkedAnimLayer
{
public:
	FAnimNode_LinkedAnimLayer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UAnimLayerInterface GetInterface() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 160);
		return UAnimLayerInterface(ptr_addr);
	}
	struct FName GetLayer() {
		return memory.read<struct FName>(m_addr + 168);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetTextMaterial
{
public:
	FSetTextMaterial(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UMaterialInterface GetMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UMaterialInterface(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetRotationAtSplinePoint
{
public:
	FSetRotationAtSplinePoint(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetPointIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct FRotator GetInRotation() {
		return memory.read<struct FRotator>(m_addr + 4);
	}
	enum class ESplineCoordinateSpace GetCoordinateSpace() {
		return memory.read<enum class ESplineCoordinateSpace>(m_addr + 16);
	}
	bool GetbUpdateSpline() {
		return memory.read<bool>(m_addr + 17);
	}

private:
	std::uint64_t m_addr = 0;
};class FInitializeSocketFromLocation
{
public:
	FInitializeSocketFromLocation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USkeletalMeshComponent GetSkelComp() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct USkeletalMeshComponent(ptr_addr);
	}
	struct FVector GetWorldLocation() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	struct FVector GetWorldNormal() {
		return memory.read<struct FVector>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FCloudDir
{
public:
	FCloudDir(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FReceivePointDamage
{
public:
	FReceivePointDamage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetDamage() {
		return memory.read<float>(m_addr + 0);
	}
	struct UDamageType GetDamageType() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UDamageType(ptr_addr);
	}
	struct FVector GetHitLocation() {
		return memory.read<struct FVector>(m_addr + 16);
	}
	struct FVector GetHitNormal() {
		return memory.read<struct FVector>(m_addr + 28);
	}
	struct UPrimitiveComponent GetHitComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct UPrimitiveComponent(ptr_addr);
	}
	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 48);
	}
	struct FVector GetShotFromDirection() {
		return memory.read<struct FVector>(m_addr + 56);
	}
	struct AController GetInstigatedBy() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return struct AController(ptr_addr);
	}
	struct AActor GetDamageCauser() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 80);
		return struct AActor(ptr_addr);
	}
	struct FHitResult GetHitInfo() {
		return memory.read<struct FHitResult>(m_addr + 88);
	}

private:
	std::uint64_t m_addr = 0;
};class FNode
{
public:
	FNode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FName GetParentName() {
		return memory.read<struct FName>(m_addr + 8);
	}
	struct FTransform GetTransform() {
		return memory.read<struct FTransform>(m_addr + 16);
	}
	struct FString GetDisplayName() {
		return memory.read<struct FString>(m_addr + 64);
	}
	bool GetbAdvanced() {
		return memory.read<bool>(m_addr + 80);
	}

private:
	std::uint64_t m_addr = 0;
};class FInRange_FloatFloat
{
public:
	FInRange_FloatFloat(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetValue() {
		return memory.read<float>(m_addr + 0);
	}
	float GetMin() {
		return memory.read<float>(m_addr + 4);
	}
	float GetMax() {
		return memory.read<float>(m_addr + 8);
	}
	bool GetInclusiveMin() {
		return memory.read<bool>(m_addr + 12);
	}
	bool GetInclusiveMax() {
		return memory.read<bool>(m_addr + 13);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 14);
	}

private:
	std::uint64_t m_addr = 0;
};class FReceiveRadialDamage
{
public:
	FReceiveRadialDamage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetDamageReceived() {
		return memory.read<float>(m_addr + 0);
	}
	struct UDamageType GetDamageType() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UDamageType(ptr_addr);
	}
	struct FVector GetOrigin() {
		return memory.read<struct FVector>(m_addr + 16);
	}
	struct FHitResult GetHitInfo() {
		return memory.read<struct FHitResult>(m_addr + 28);
	}
	struct AController GetInstigatedBy() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 168);
		return struct AController(ptr_addr);
	}
	struct AActor GetDamageCauser() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 176);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FLocalTravel
{
public:
	FLocalTravel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetURL() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetActorTickEnabled
{
public:
	FSetActorTickEnabled(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbEnabled() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FConeConstraint
{
public:
	FConeConstraint(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetSwing1LimitDegrees() {
		return memory.read<float>(m_addr + 20);
	}
	float GetSwing2LimitDegrees() {
		return memory.read<float>(m_addr + 24);
	}
	enum class EAngularConstraintMotion GetSwing1Motion() {
		return memory.read<enum class EAngularConstraintMotion>(m_addr + 28);
	}
	enum class EAngularConstraintMotion GetSwing2Motion() {
		return memory.read<enum class EAngularConstraintMotion>(m_addr + 29);
	}

private:
	std::uint64_t m_addr = 0;
};class FAttenuationSubmixSendSettings
{
public:
	FAttenuationSubmixSendSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USoundSubmixBase GetSubmix() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct USoundSubmixBase(ptr_addr);
	}
	enum class ESubmixSendMethod GetSubmixSendMethod() {
		return memory.read<enum class ESubmixSendMethod>(m_addr + 8);
	}
	float GetSubmixSendLevelMin() {
		return memory.read<float>(m_addr + 12);
	}
	float GetSubmixSendLevelMax() {
		return memory.read<float>(m_addr + 16);
	}
	float GetSubmixSendDistanceMin() {
		return memory.read<float>(m_addr + 20);
	}
	float GetSubmixSendDistanceMax() {
		return memory.read<float>(m_addr + 24);
	}
	float GetManualSubmixSendLevel() {
		return memory.read<float>(m_addr + 28);
	}
	struct FRuntimeFloatCurve GetCustomSubmixSendCurve() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsJumpProvidingForce
{
public:
	FIsJumpProvidingForce(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FMontage_Resume
{
public:
	FMontage_Resume(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimMontage GetMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimMontage(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FPerBoneInterpolation
{
public:
	FPerBoneInterpolation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FBoneReference GetBoneReference() {
		return memory.read<struct FBoneReference>(m_addr + 0);
	}
	float GetInterpolationSpeedPerSec() {
		return memory.read<float>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsWalkable
{
public:
	FIsWalkable(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FHitResult GetHit() {
		return memory.read<struct FHitResult>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 136);
	}

private:
	std::uint64_t m_addr = 0;
};class FRandomUnitVectorInEllipticalConeInDegreesFromStream
{
public:
	FRandomUnitVectorInEllipticalConeInDegreesFromStream(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetConeDir() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	float GetMaxYawInDegrees() {
		return memory.read<float>(m_addr + 12);
	}
	float GetMaxPitchInDegrees() {
		return memory.read<float>(m_addr + 16);
	}
	struct FRandomStream GetStream() {
		return memory.read<struct FRandomStream>(m_addr + 20);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 28);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetActorTickInterval
{
public:
	FSetActorTickInterval(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetTickInterval() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FWrap
{
public:
	FWrap(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetValue() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetMin() {
		return memory.read<int32_t>(m_addr + 4);
	}
	int32_t GetMax() {
		return memory.read<int32_t>(m_addr + 8);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetLifeSpan
{
public:
	FSetLifeSpan(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetInLifespan() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FAddControllerYawInput
{
public:
	FAddControllerYawInput(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetVal() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FRigConfiguration
{
public:
	FRigConfiguration(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct URig GetRig() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct URig(ptr_addr);
	}
	struct TArray<struct FNameMapping> GetBoneMappingTable() {
		return memory.read<struct TArray<struct FNameMapping>>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FBuilderPoly
{
public:
	FBuilderPoly(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<int32_t> GetVertexIndices() {
		return memory.read<struct TArray<int32_t>>(m_addr + 0);
	}
	int32_t GetDirection() {
		return memory.read<int32_t>(m_addr + 16);
	}
	struct FName GetItemName() {
		return memory.read<struct FName>(m_addr + 20);
	}
	int32_t GetPolyFlags() {
		return memory.read<int32_t>(m_addr + 28);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetOwner
{
public:
	FSetOwner(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetNewOwner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetReplicateMovement
{
public:
	FSetReplicateMovement(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbInReplicateMovement() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FRepMovement
{
public:
	FRepMovement(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetLinearVelocity() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetAngularVelocity() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 24);
	}
	struct FRotator GetRotation() {
		return memory.read<struct FRotator>(m_addr + 36);
	}
	char GetbSimulatedPhysicSleep() {
		return memory.read<char>(m_addr + 48);
	}
	char GetbRepPhysics() {
		return memory.read<char>(m_addr + 48);
	}
	enum class EVectorQuantization GetLocationQuantizationLevel() {
		return memory.read<enum class EVectorQuantization>(m_addr + 49);
	}
	enum class EVectorQuantization GetVelocityQuantizationLevel() {
		return memory.read<enum class EVectorQuantization>(m_addr + 50);
	}
	enum class ERotatorQuantization GetRotationQuantizationLevel() {
		return memory.read<enum class ERotatorQuantization>(m_addr + 51);
	}

private:
	std::uint64_t m_addr = 0;
};class FConv_TextToString
{
public:
	FConv_TextToString(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetInText() {
		return memory.read<struct FText>(m_addr + 0);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FKSphylElem
{
public:
	FKSphylElem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetCenter() {
		return memory.read<struct FVector>(m_addr + 48);
	}
	struct FRotator GetRotation() {
		return memory.read<struct FRotator>(m_addr + 60);
	}
	float GetRadius() {
		return memory.read<float>(m_addr + 72);
	}
	float GetLength() {
		return memory.read<float>(m_addr + 76);
	}

private:
	std::uint64_t m_addr = 0;
};class FKSphereElem
{
public:
	FKSphereElem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetCenter() {
		return memory.read<struct FVector>(m_addr + 48);
	}
	float GetRadius() {
		return memory.read<float>(m_addr + 60);
	}

private:
	std::uint64_t m_addr = 0;
};class FCharacterNetworkSerializationPackedBits
{
public:
	FCharacterNetworkSerializationPackedBits(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FMarkerSyncAnimPosition
{
public:
	FMarkerSyncAnimPosition(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetPreviousMarkerName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FName GetNextMarkerName() {
		return memory.read<struct FName>(m_addr + 8);
	}
	float GetPositionBetweenMarkers() {
		return memory.read<float>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FBlendFilter
{
public:
	FBlendFilter(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FAddImpulseToAllBodiesBelow
{
public:
	FAddImpulseToAllBodiesBelow(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetImpulse() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 12);
	}
	bool GetbVelChange() {
		return memory.read<bool>(m_addr + 20);
	}
	bool GetbIncludeSelf() {
		return memory.read<bool>(m_addr + 21);
	}

private:
	std::uint64_t m_addr = 0;
};class FBlendSampleData
{
public:
	FBlendSampleData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetSampleDataIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct UAnimSequence GetAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UAnimSequence(ptr_addr);
	}
	float GetTotalWeight() {
		return memory.read<float>(m_addr + 16);
	}
	float GetTime() {
		return memory.read<float>(m_addr + 20);
	}
	float GetPreviousTime() {
		return memory.read<float>(m_addr + 24);
	}
	float GetSamplePlayRate() {
		return memory.read<float>(m_addr + 28);
	}

private:
	std::uint64_t m_addr = 0;
};class FAnimationRecordingSettings
{
public:
	FAnimationRecordingSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbRecordInWorldSpace() {
		return memory.read<bool>(m_addr + 0);
	}
	bool GetbRemoveRootAnimation() {
		return memory.read<bool>(m_addr + 1);
	}
	bool GetbAutoSaveAsset() {
		return memory.read<bool>(m_addr + 2);
	}
	float GetSampleRate() {
		return memory.read<float>(m_addr + 4);
	}
	float GetLength() {
		return memory.read<float>(m_addr + 8);
	}
	enum class ERichCurveInterpMode GetInterpMode() {
		return memory.read<enum class ERichCurveInterpMode>(m_addr + 12);
	}
	enum class ERichCurveTangentMode GetTangentMode() {
		return memory.read<enum class ERichCurveTangentMode>(m_addr + 13);
	}
	bool GetbRecordTransforms() {
		return memory.read<bool>(m_addr + 15);
	}
	bool GetbRecordCurves() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetSubmixSend
{
public:
	FSetSubmixSend(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USoundSubmixBase GetSubmix() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct USoundSubmixBase(ptr_addr);
	}
	float GetSendLevel() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FMontage_Stop
{
public:
	FMontage_Stop(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetInBlendOutTime() {
		return memory.read<float>(m_addr + 0);
	}
	struct UAnimMontage GetMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UAnimMontage(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FVector4_Negated
{
public:
	FVector4_Negated(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector4 GetA() {
		return memory.read<struct FVector4>(m_addr + 0);
	}
	struct FVector4 GetReturnValue() {
		return memory.read<struct FVector4>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FCurveTrack
{
public:
	FCurveTrack(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetCurveName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct TArray<float> GetCurveWeights() {
		return memory.read<struct TArray<float>>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FComponentSpacePose
{
public:
	FComponentSpacePose(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FTransform> GetTransforms() {
		return memory.read<struct TArray<struct FTransform>>(m_addr + 0);
	}
	struct TArray<struct FName> GetNames() {
		return memory.read<struct TArray<struct FName>>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FMaterialSpriteElement
{
public:
	FMaterialSpriteElement(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UMaterialInterface GetMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UMaterialInterface(ptr_addr);
	}
	struct UCurveFloat GetDistanceToOpacityCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UCurveFloat(ptr_addr);
	}
	char GetbSizeIsInScreenSpace() {
		return memory.read<char>(m_addr + 16);
	}
	float GetBaseSizeX() {
		return memory.read<float>(m_addr + 20);
	}
	float GetBaseSizeY() {
		return memory.read<float>(m_addr + 24);
	}
	struct UCurveFloat GetDistanceToSizeCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 32);
		return struct UCurveFloat(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetDeltaTransformFromRefPose
{
public:
	FGetDeltaTransformFromRefPose(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FName GetBaseName() {
		return memory.read<struct FName>(m_addr + 8);
	}
	struct FTransform GetReturnValue() {
		return memory.read<struct FTransform>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FRandomUnitVectorInConeInRadians
{
public:
	FRandomUnitVectorInConeInRadians(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetConeDir() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	float GetConeHalfAngleInRadians() {
		return memory.read<float>(m_addr + 12);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FNamedTransform
{
public:
	FNamedTransform(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTransform GetValue() {
		return memory.read<struct FTransform>(m_addr + 0);
	}
	struct FName GetName() {
		return memory.read<struct FName>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};class FNamedColor
{
public:
	FNamedColor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FColor GetValue() {
		return memory.read<struct FColor>(m_addr + 0);
	}
	struct FName GetName() {
		return memory.read<struct FName>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FServerMoveDual
{
public:
	FServerMoveDual(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetTimeStamp0() {
		return memory.read<float>(m_addr + 0);
	}
	struct FVector_NetQuantize10 GetInAccel0() {
		return memory.read<struct FVector_NetQuantize10>(m_addr + 4);
	}
	char GetPendingFlags() {
		return memory.read<char>(m_addr + 16);
	}
	uint32_t GetView0() {
		return memory.read<uint32_t>(m_addr + 20);
	}
	float GetTimestamp() {
		return memory.read<float>(m_addr + 24);
	}
	struct FVector_NetQuantize10 GetInAccel() {
		return memory.read<struct FVector_NetQuantize10>(m_addr + 28);
	}
	struct FVector_NetQuantize100 GetClientLoc() {
		return memory.read<struct FVector_NetQuantize100>(m_addr + 40);
	}
	char GetNewFlags() {
		return memory.read<char>(m_addr + 52);
	}
	char GetClientRoll() {
		return memory.read<char>(m_addr + 53);
	}
	uint32_t GetView() {
		return memory.read<uint32_t>(m_addr + 56);
	}
	struct UPrimitiveComponent GetClientMovementBase() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 64);
		return struct UPrimitiveComponent(ptr_addr);
	}
	struct FName GetClientBaseBoneName() {
		return memory.read<struct FName>(m_addr + 72);
	}
	char GetClientMovementMode() {
		return memory.read<char>(m_addr + 80);
	}

private:
	std::uint64_t m_addr = 0;
};class FClientUnmutePlayer
{
public:
	FClientUnmutePlayer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FUniqueNetIdRepl GetplayerId() {
		return memory.read<struct FUniqueNetIdRepl>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FAnimParentNodeAssetOverride
{
public:
	FAnimParentNodeAssetOverride(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimationAsset GetNewAsset() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimationAsset(ptr_addr);
	}
	struct FGuid GetParentNodeGuid() {
		return memory.read<struct FGuid>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FVector2D_Zero
{
public:
	FVector2D_Zero(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector2D GetReturnValue() {
		return memory.read<struct FVector2D>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FAnimGroupInfo
{
public:
	FAnimGroupInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FLinearColor GetColor() {
		return memory.read<struct FLinearColor>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FCanSpectate
{
public:
	FCanSpectate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APlayerController GetViewer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APlayerController(ptr_addr);
	}
	struct APlayerState GetViewTarget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct APlayerState(ptr_addr);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FAnimBlueprintDebugData
{
public:
	FAnimBlueprintDebugData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FSetTextureQuality
{
public:
	FSetTextureQuality(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FStateMachineStateDebugData
{
public:
	FStateMachineStateDebugData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FAnimGraphBlendOptions
{
public:
	FAnimGraphBlendOptions(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetBlendInTime() {
		return memory.read<float>(m_addr + 0);
	}
	float GetBlendOutTime() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetTileSize
{
public:
	FGetTileSize(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGraphAssetPlayerInformation
{
public:
	FGraphAssetPlayerInformation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<int32_t> GetPlayerNodeIndices() {
		return memory.read<struct TArray<int32_t>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FAnimBlueprintFunction
{
public:
	FAnimBlueprintFunction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FName GetGroup() {
		return memory.read<struct FName>(m_addr + 8);
	}
	int32_t GetOutputPoseNodeIndex() {
		return memory.read<int32_t>(m_addr + 16);
	}
	struct TArray<struct FName> GetInputPoseNames() {
		return memory.read<struct TArray<struct FName>>(m_addr + 24);
	}
	struct TArray<int32_t> GetInputPoseNodeIndices() {
		return memory.read<struct TArray<int32_t>>(m_addr + 40);
	}
	bool GetbImplemented() {
		return memory.read<bool>(m_addr + 96);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetWorldRotationAtTime
{
public:
	FGetWorldRotationAtTime(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetTime() {
		return memory.read<float>(m_addr + 0);
	}
	bool GetbUseConstantVelocity() {
		return memory.read<bool>(m_addr + 4);
	}
	struct FRotator GetReturnValue() {
		return memory.read<struct FRotator>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FAnimTrack
{
public:
	FAnimTrack(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FAnimSegment> GetAnimSegments() {
		return memory.read<struct TArray<struct FAnimSegment>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FAnimNode_SingleNode
{
public:
	FAnimNode_SingleNode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FPoseLink GetSourcePose() {
		return memory.read<struct FPoseLink>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FAnimSegment
{
public:
	FAnimSegment(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimSequenceBase GetAnimReference() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimSequenceBase(ptr_addr);
	}
	float GetStartPos() {
		return memory.read<float>(m_addr + 8);
	}
	float GetAnimStartTime() {
		return memory.read<float>(m_addr + 12);
	}
	float GetAnimEndTime() {
		return memory.read<float>(m_addr + 16);
	}
	float GetAnimPlayRate() {
		return memory.read<float>(m_addr + 20);
	}
	int32_t GetLoopingCount() {
		return memory.read<int32_t>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FSmartNameMapping
{
public:
	FSmartNameMapping(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FEqualEqual_ClassClass
{
public:
	FEqualEqual_ClassClass(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UObject GetA() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return UObject(ptr_addr);
	}
	UObject GetB() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return UObject(ptr_addr);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FAnimCurveBase
{
public:
	FAnimCurveBase(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetLastObservedName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FSmartName GetName() {
		return memory.read<struct FSmartName>(m_addr + 8);
	}
	int32_t GetCurveTypeFlags() {
		return memory.read<int32_t>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FSmartName
{
public:
	FSmartName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetDisplayName() {
		return memory.read<struct FName>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FQueuedDrawDebugItem
{
public:
	FQueuedDrawDebugItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class EDrawDebugItemType GetItemType() {
		return memory.read<enum class EDrawDebugItemType>(m_addr + 0);
	}
	struct FVector GetStartLoc() {
		return memory.read<struct FVector>(m_addr + 4);
	}
	struct FVector GetEndLoc() {
		return memory.read<struct FVector>(m_addr + 16);
	}
	struct FVector GetCenter() {
		return memory.read<struct FVector>(m_addr + 28);
	}
	struct FRotator GetRotation() {
		return memory.read<struct FRotator>(m_addr + 40);
	}
	float GetRadius() {
		return memory.read<float>(m_addr + 52);
	}
	float GetSize() {
		return memory.read<float>(m_addr + 56);
	}
	int32_t GetSegments() {
		return memory.read<int32_t>(m_addr + 60);
	}
	struct FColor GetColor() {
		return memory.read<struct FColor>(m_addr + 64);
	}
	bool GetbPersistentLines() {
		return memory.read<bool>(m_addr + 68);
	}
	float GetLifeTime() {
		return memory.read<float>(m_addr + 72);
	}
	float GetThickness() {
		return memory.read<float>(m_addr + 76);
	}
	struct FString GetMessage() {
		return memory.read<struct FString>(m_addr + 80);
	}
	struct FVector2D GetTextScale() {
		return memory.read<struct FVector2D>(m_addr + 96);
	}

private:
	std::uint64_t m_addr = 0;
};class FRemoveObjectTypeToAffect
{
public:
	FRemoveObjectTypeToAffect(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class EObjectTypeQuery GetObjectType() {
		return memory.read<enum class EObjectTypeQuery>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FAnimInstanceSubsystemData
{
public:
	FAnimInstanceSubsystemData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FLevelSimplificationDetails
{
public:
	FLevelSimplificationDetails(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbCreatePackagePerAsset() {
		return memory.read<bool>(m_addr + 0);
	}
	float GetDetailsPercentage() {
		return memory.read<float>(m_addr + 4);
	}
	struct FMaterialProxySettings GetStaticMeshMaterialSettings() {
		return memory.read<struct FMaterialProxySettings>(m_addr + 8);
	}
	bool GetbOverrideLandscapeExportLOD() {
		return memory.read<bool>(m_addr + 152);
	}
	int32_t GetLandscapeExportLOD() {
		return memory.read<int32_t>(m_addr + 156);
	}
	struct FMaterialProxySettings GetLandscapeMaterialSettings() {
		return memory.read<struct FMaterialProxySettings>(m_addr + 160);
	}
	bool GetbBakeFoliageToLandscape() {
		return memory.read<bool>(m_addr + 304);
	}
	bool GetbBakeGrassToLandscape() {
		return memory.read<bool>(m_addr + 305);
	}
	bool GetbGenerateMeshNormalMap() {
		return memory.read<bool>(m_addr + 306);
	}
	bool GetbGenerateMeshMetallicMap() {
		return memory.read<bool>(m_addr + 307);
	}
	bool GetbGenerateMeshRoughnessMap() {
		return memory.read<bool>(m_addr + 308);
	}
	bool GetbGenerateMeshSpecularMap() {
		return memory.read<bool>(m_addr + 309);
	}
	bool GetbGenerateLandscapeNormalMap() {
		return memory.read<bool>(m_addr + 310);
	}
	bool GetbGenerateLandscapeMetallicMap() {
		return memory.read<bool>(m_addr + 311);
	}
	bool GetbGenerateLandscapeRoughnessMap() {
		return memory.read<bool>(m_addr + 312);
	}
	bool GetbGenerateLandscapeSpecularMap() {
		return memory.read<bool>(m_addr + 313);
	}

private:
	std::uint64_t m_addr = 0;
};class FPooledCameraShakes
{
public:
	FPooledCameraShakes(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct UCameraShakeBase> GetPooledShakes() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct TArray<struct UCameraShakeBase>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FRemoveSpectralAnalysisDelegate
{
public:
	FRemoveSpectralAnalysisDelegate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FDelegate GetOnSubmixSpectralAnalysisBP() {
		return memory.read<struct FDelegate>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FAnimLinkableElement
{
public:
	FAnimLinkableElement(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimMontage GetLinkedMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UAnimMontage(ptr_addr);
	}
	int32_t GetSlotIndex() {
		return memory.read<int32_t>(m_addr + 16);
	}
	int32_t GetSegmentIndex() {
		return memory.read<int32_t>(m_addr + 20);
	}
	enum class EAnimLinkMethod GetLinkMethod() {
		return memory.read<enum class EAnimLinkMethod>(m_addr + 24);
	}
	enum class EAnimLinkMethod GetCachedLinkMethod() {
		return memory.read<enum class EAnimLinkMethod>(m_addr + 25);
	}
	float GetSegmentBeginTime() {
		return memory.read<float>(m_addr + 28);
	}
	float GetSegmentLength() {
		return memory.read<float>(m_addr + 32);
	}
	float GetLinkValue() {
		return memory.read<float>(m_addr + 36);
	}
	struct UAnimSequenceBase GetLinkedSequence() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct UAnimSequenceBase(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FBranchingPointMarker
{
public:
	FBranchingPointMarker(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetNotifyIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	float GetTriggerTime() {
		return memory.read<float>(m_addr + 4);
	}
	enum class EAnimNotifyEventType GetNotifyEventType() {
		return memory.read<enum class EAnimNotifyEventType>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetHitResultUnderCursorByChannel
{
public:
	FGetHitResultUnderCursorByChannel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class ETraceTypeQuery GetTraceChannel() {
		return memory.read<enum class ETraceTypeQuery>(m_addr + 0);
	}
	bool GetbTraceComplex() {
		return memory.read<bool>(m_addr + 1);
	}
	struct FHitResult GetHitResult() {
		return memory.read<struct FHitResult>(m_addr + 4);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 140);
	}

private:
	std::uint64_t m_addr = 0;
};class FParticleEvent_GenerateInfo
{
public:
	FParticleEvent_GenerateInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class EParticleEventType GetType() {
		return memory.read<enum class EParticleEventType>(m_addr + 0);
	}
	int32_t GetFrequency() {
		return memory.read<int32_t>(m_addr + 4);
	}
	int32_t GetParticleFrequency() {
		return memory.read<int32_t>(m_addr + 8);
	}
	char GetFirstTimeOnly() {
		return memory.read<char>(m_addr + 12);
	}
	char GetLastTimeOnly() {
		return memory.read<char>(m_addr + 12);
	}
	char GetUseReflectedImpactVector() {
		return memory.read<char>(m_addr + 12);
	}
	char GetbUseOrbitOffset() {
		return memory.read<char>(m_addr + 12);
	}
	struct FName GetCustomName() {
		return memory.read<struct FName>(m_addr + 16);
	}
	struct TArray<struct UParticleModuleEventSendToGame> GetParticleModuleEventsToSendToGame() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 24);
		return struct TArray<struct UParticleModuleEventSendToGame>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetReverse
{
public:
	FSetReverse(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbInReverse() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetLeaveTangentAtSplinePoint
{
public:
	FGetLeaveTangentAtSplinePoint(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetPointIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	enum class ESplineCoordinateSpace GetCoordinateSpace() {
		return memory.read<enum class ESplineCoordinateSpace>(m_addr + 4);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FBranchingPoint
{
public:
	FBranchingPoint(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetEventName() {
		return memory.read<struct FName>(m_addr + 48);
	}
	float GetDisplayTime() {
		return memory.read<float>(m_addr + 56);
	}
	float GetTriggerTimeOffset() {
		return memory.read<float>(m_addr + 60);
	}

private:
	std::uint64_t m_addr = 0;
};class FProjectLogDir
{
public:
	FProjectLogDir(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetMovementBase
{
public:
	FGetMovementBase(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPrimitiveComponent GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UPrimitiveComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FVector_Distance2DSquared
{
public:
	FVector_Distance2DSquared(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector Getv1() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector Getv2() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FAnimNode_CustomProperty
{
public:
	FAnimNode_CustomProperty(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FName> GetSourcePropertyNames() {
		return memory.read<struct TArray<struct FName>>(m_addr + 16);
	}
	struct TArray<struct FName> GetDestPropertyNames() {
		return memory.read<struct TArray<struct FName>>(m_addr + 32);
	}
	struct UObject GetTargetInstance() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct UObject(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FInertializationCurveDiff
{
public:
	FInertializationCurveDiff(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FSetGroupsToAvoidMask
{
public:
	FSetGroupsToAvoidMask(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FNavAvoidanceMask GetGroupMask() {
		return memory.read<struct FNavAvoidanceMask>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FInertializationPose
{
public:
	FInertializationPose(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FRemoveSocket
{
public:
	FRemoveSocket(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UStaticMeshSocket GetSocket() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UStaticMeshSocket(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FEdGraphPinReference
{
public:
	FEdGraphPinReference(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TWeakObjectPtr<UEdGraphNode> GetOwningNode() {
		return memory.read<struct TWeakObjectPtr<UEdGraphNode>>(m_addr + 0);
	}
	struct FGuid GetPinId() {
		return memory.read<struct FGuid>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FAnimNode_LinkedAnimGraph
{
public:
	FAnimNode_LinkedAnimGraph(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FPoseLink> GetInputPoses() {
		return memory.read<struct TArray<struct FPoseLink>>(m_addr + 88);
	}
	struct TArray<struct FName> GetInputPoseNames() {
		return memory.read<struct TArray<struct FName>>(m_addr + 104);
	}
	UAnimInstance GetInstanceClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 120);
		return UAnimInstance(ptr_addr);
	}
	struct FName GetTag() {
		return memory.read<struct FName>(m_addr + 128);
	}
	char GetbReceiveNotifiesFromLinkedInstances() {
		return memory.read<char>(m_addr + 156);
	}
	char GetbPropagateNotifiesToLinkedInstances() {
		return memory.read<char>(m_addr + 156);
	}

private:
	std::uint64_t m_addr = 0;
};class FAnimNode_LinkedInputPose
{
public:
	FAnimNode_LinkedInputPose(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetName() {
		return memory.read<struct FName>(m_addr + 16);
	}
	struct FName GetGraph() {
		return memory.read<struct FName>(m_addr + 24);
	}
	struct FPoseLink GetInputPose() {
		return memory.read<struct FPoseLink>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FCurveMetaData
{
public:
	FCurveMetaData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FServerCamera
{
public:
	FServerCamera(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetNewMode() {
		return memory.read<struct FName>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCustomOutput
{
public:
	FCustomOutput(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetOutputName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	enum class ECustomMaterialOutputType GetOutputType() {
		return memory.read<enum class ECustomMaterialOutputType>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FTryGetPawnOwner
{
public:
	FTryGetPawnOwner(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APawn GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APawn(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FAnimNode_SaveCachedPose
{
public:
	FAnimNode_SaveCachedPose(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FPoseLink GetPose() {
		return memory.read<struct FPoseLink>(m_addr + 16);
	}
	struct FName GetCachePoseName() {
		return memory.read<struct FName>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FMontage_JumpToSectionsEnd
{
public:
	FMontage_JumpToSectionsEnd(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetSectionName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct UAnimMontage GetMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UAnimMontage(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FHasCookedFFTData
{
public:
	FHasCookedFFTData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FAnimationPotentialTransition
{
public:
	FAnimationPotentialTransition(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FToDirectionAndLength2D
{
public:
	FToDirectionAndLength2D(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector2D GetA() {
		return memory.read<struct FVector2D>(m_addr + 0);
	}
	struct FVector2D GetOutDir() {
		return memory.read<struct FVector2D>(m_addr + 8);
	}
	float GetOutLength() {
		return memory.read<float>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FPointerEvent_GetGestureType
{
public:
	FPointerEvent_GetGestureType(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FPointerEvent GetInput() {
		return memory.read<struct FPointerEvent>(m_addr + 0);
	}
	enum class ESlateGesture GetReturnValue() {
		return memory.read<enum class ESlateGesture>(m_addr + 112);
	}

private:
	std::uint64_t m_addr = 0;
};class FAnimNode_TransitionPoseEvaluator
{
public:
	FAnimNode_TransitionPoseEvaluator(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetFramesToCachePose() {
		return memory.read<int32_t>(m_addr + 232);
	}
	enum class EEvaluatorDataSource GetDataSource() {
		return memory.read<enum class EEvaluatorDataSource>(m_addr + 240);
	}
	enum class EEvaluatorMode GetEvaluatorMode() {
		return memory.read<enum class EEvaluatorMode>(m_addr + 241);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetBindingName
{
public:
	FGetBindingName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetReturnValue() {
		return memory.read<struct FName>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FAnimNode_TransitionResult
{
public:
	FAnimNode_TransitionResult(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbCanEnterTransition() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FTextSizingParameters
{
public:
	FTextSizingParameters(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetDrawX() {
		return memory.read<float>(m_addr + 0);
	}
	float GetDrawY() {
		return memory.read<float>(m_addr + 4);
	}
	float GetDrawXL() {
		return memory.read<float>(m_addr + 8);
	}
	float GetDrawYL() {
		return memory.read<float>(m_addr + 12);
	}
	struct FVector2D GetScaling() {
		return memory.read<struct FVector2D>(m_addr + 16);
	}
	struct UFont GetDrawFont() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 24);
		return struct UFont(ptr_addr);
	}
	struct FVector2D GetSpacingAdjust() {
		return memory.read<struct FVector2D>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetBeamSourceStrength
{
public:
	FSetBeamSourceStrength(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetEmitterIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	float GetNewSourceStrength() {
		return memory.read<float>(m_addr + 4);
	}
	int32_t GetSourceIndex() {
		return memory.read<int32_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FExposedValueHandler
{
public:
	FExposedValueHandler(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetBoundFunction() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct TArray<struct FExposedValueCopyRecord> GetCopyRecords() {
		return memory.read<struct TArray<struct FExposedValueCopyRecord>>(m_addr + 8);
	}
	struct UFunction GetFunction() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 24);
		return struct UFunction(ptr_addr);
	}
	struct TFieldPath<FNone> GetValueHandlerNodeProperty() {
		return memory.read<struct TFieldPath<FNone>>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FExposedValueCopyRecord
{
public:
	FExposedValueCopyRecord(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetCopyIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	enum class EPostCopyOperation GetPostCopyOperation() {
		return memory.read<enum class EPostCopyOperation>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetAudioListenerAttenuationOverride
{
public:
	FSetAudioListenerAttenuationOverride(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USceneComponent GetAttachToComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct USceneComponent(ptr_addr);
	}
	struct FVector GetAttenuationLocationOVerride() {
		return memory.read<struct FVector>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetBoneTransformByName
{
public:
	FSetBoneTransformByName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FTransform GetInTransform() {
		return memory.read<struct FTransform>(m_addr + 16);
	}
	enum class EBoneSpaces GetBoneSpace() {
		return memory.read<enum class EBoneSpaces>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};class FAnimNode_ConvertComponentToLocalSpace
{
public:
	FAnimNode_ConvertComponentToLocalSpace(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FComponentSpacePoseLink GetComponentPose() {
		return memory.read<struct FComponentSpacePoseLink>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetDensityOffset
{
public:
	FSetDensityOffset(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewDensityOffset() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FAnimNotifyArray
{
public:
	FAnimNotifyArray(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FAnimNotifyEventReference> GetNotifies() {
		return memory.read<struct TArray<struct FAnimNotifyEventReference>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FFastArraySerializer
{
public:
	FFastArraySerializer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetArrayReplicationKey() {
		return memory.read<int32_t>(m_addr + 84);
	}
	enum class EFastArraySerializerDeltaFlags GetDeltaFlags() {
		return memory.read<enum class EFastArraySerializerDeltaFlags>(m_addr + 256);
	}

private:
	std::uint64_t m_addr = 0;
};class FUnCrouch
{
public:
	FUnCrouch(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbClientSimulation() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FAnimNotifyEventReference
{
public:
	FAnimNotifyEventReference(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetNotifySource() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UObject(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FRemoveShowOnlyActorComponents
{
public:
	FRemoveShowOnlyActorComponents(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetInActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}
	bool GetbIncludeFromChildActors() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FCompressedTrack
{
public:
	FCompressedTrack(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<char> GetByteStream() {
		return memory.read<struct TArray<char>>(m_addr + 0);
	}
	struct TArray<float> GetTimes() {
		return memory.read<struct TArray<float>>(m_addr + 16);
	}
	float GetMins[3]() {
		return memory.read<float>(m_addr + 32);
	}
	float GetRanges[3]() {
		return memory.read<float>(m_addr + 44);
	}

private:
	std::uint64_t m_addr = 0;
};class FSoundWaveEnvelopeDataPerSound
{
public:
	FSoundWaveEnvelopeDataPerSound(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetEnvelope() {
		return memory.read<float>(m_addr + 0);
	}
	float GetPlaybackTime() {
		return memory.read<float>(m_addr + 4);
	}
	struct USoundWave GetSoundWave() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct USoundWave(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FConv_ByteToFloat
{
public:
	FConv_ByteToFloat(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	char GetInByte() {
		return memory.read<char>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FPoseDataContainer
{
public:
	FPoseDataContainer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FSmartName> GetPoseNames() {
		return memory.read<struct TArray<struct FSmartName>>(m_addr + 0);
	}
	struct TArray<struct FName> GetTracks() {
		return memory.read<struct TArray<struct FName>>(m_addr + 16);
	}
	struct TMap<struct FName, int32_t> GetTrackMap() {
		return memory.read<struct TMap<struct FName, int32_t>>(m_addr + 32);
	}
	struct TArray<struct FPoseData> GetPoses() {
		return memory.read<struct TArray<struct FPoseData>>(m_addr + 112);
	}
	struct TArray<struct FAnimCurveBase> GetCurves() {
		return memory.read<struct TArray<struct FAnimCurveBase>>(m_addr + 128);
	}

private:
	std::uint64_t m_addr = 0;
};class FTranslationTrack
{
public:
	FTranslationTrack(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FVector> GetPosKeys() {
		return memory.read<struct TArray<struct FVector>>(m_addr + 0);
	}
	struct TArray<float> GetTimes() {
		return memory.read<struct TArray<float>>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FPredictProjectilePathResult
{
public:
	FPredictProjectilePathResult(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FPredictProjectilePathPointData> GetPathData() {
		return memory.read<struct TArray<struct FPredictProjectilePathPointData>>(m_addr + 0);
	}
	struct FPredictProjectilePathPointData GetLastTraceDestination() {
		return memory.read<struct FPredictProjectilePathPointData>(m_addr + 16);
	}
	struct FHitResult GetHitResult() {
		return memory.read<struct FHitResult>(m_addr + 44);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetPrepareSkinSnapshot
{
public:
	FSetPrepareSkinSnapshot(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbNewValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FAnimSequenceTrackContainer
{
public:
	FAnimSequenceTrackContainer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FRawAnimSequenceTrack> GetAnimationTracks() {
		return memory.read<struct TArray<struct FRawAnimSequenceTrack>>(m_addr + 0);
	}
	struct TArray<struct FName> GetTrackNames() {
		return memory.read<struct TArray<struct FName>>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSubtract_IntPointInt
{
public:
	FSubtract_IntPointInt(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FIntPoint GetA() {
		return memory.read<struct FIntPoint>(m_addr + 0);
	}
	int32_t GetB() {
		return memory.read<int32_t>(m_addr + 8);
	}
	struct FIntPoint GetReturnValue() {
		return memory.read<struct FIntPoint>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FAnimSetMeshLinkup
{
public:
	FAnimSetMeshLinkup(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<int32_t> GetBoneToTrackTable() {
		return memory.read<struct TArray<int32_t>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FAnimSingleNodeInstanceProxy
{
public:
	FAnimSingleNodeInstanceProxy(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FMeshReductionSettings
{
public:
	FMeshReductionSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetPercentTriangles() {
		return memory.read<float>(m_addr + 0);
	}
	float GetPercentVertices() {
		return memory.read<float>(m_addr + 4);
	}
	float GetMaxDeviation() {
		return memory.read<float>(m_addr + 8);
	}
	float GetPixelError() {
		return memory.read<float>(m_addr + 12);
	}
	float GetWeldingThreshold() {
		return memory.read<float>(m_addr + 16);
	}
	float GetHardAngleThreshold() {
		return memory.read<float>(m_addr + 20);
	}
	int32_t GetBaseLODModel() {
		return memory.read<int32_t>(m_addr + 24);
	}
	enum class EMeshFeatureImportance GetSilhouetteImportance() {
		return memory.read<enum class EMeshFeatureImportance>(m_addr + 28);
	}
	enum class EMeshFeatureImportance GetTextureImportance() {
		return memory.read<enum class EMeshFeatureImportance>(m_addr + 29);
	}
	enum class EMeshFeatureImportance GetShadingImportance() {
		return memory.read<enum class EMeshFeatureImportance>(m_addr + 30);
	}
	char GetbRecalculateNormals() {
		return memory.read<char>(m_addr + 31);
	}
	char GetbGenerateUniqueLightmapUVs() {
		return memory.read<char>(m_addr + 31);
	}
	char GetbKeepSymmetry() {
		return memory.read<char>(m_addr + 31);
	}
	char GetbVisibilityAided() {
		return memory.read<char>(m_addr + 31);
	}
	char GetbCullOccluded() {
		return memory.read<char>(m_addr + 31);
	}
	enum class EStaticMeshReductionTerimationCriterion GetTerminationCriterion() {
		return memory.read<enum class EStaticMeshReductionTerimationCriterion>(m_addr + 32);
	}
	enum class EMeshFeatureImportance GetVisibilityAggressiveness() {
		return memory.read<enum class EMeshFeatureImportance>(m_addr + 33);
	}
	enum class EMeshFeatureImportance GetVertexColorImportance() {
		return memory.read<enum class EMeshFeatureImportance>(m_addr + 34);
	}

private:
	std::uint64_t m_addr = 0;
};class FMakeStandardFilename
{
public:
	FMakeStandardFilename(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetInPath() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FString GetOutPath() {
		return memory.read<struct FString>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FAnimationStateBase
{
public:
	FAnimationStateBase(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetStateName() {
		return memory.read<struct FName>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetConstraintAspectRatio
{
public:
	FSetConstraintAspectRatio(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbInConstrainAspectRatio() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FMeshUVChannelInfo
{
public:
	FMeshUVChannelInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbInitialized() {
		return memory.read<bool>(m_addr + 0);
	}
	bool GetbOverrideDensities() {
		return memory.read<bool>(m_addr + 1);
	}
	float GetLocalUVDensities[4]() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FAddSplineLocalPoint
{
public:
	FAddSplineLocalPoint(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector Getposition() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FEqualEqual_TextText
{
public:
	FEqualEqual_TextText(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetA() {
		return memory.read<struct FText>(m_addr + 0);
	}
	struct FText GetB() {
		return memory.read<struct FText>(m_addr + 24);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};class FBakedStateExitTransition
{
public:
	FBakedStateExitTransition(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetCanTakeDelegateIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetCustomResultNodeIndex() {
		return memory.read<int32_t>(m_addr + 4);
	}
	int32_t GetTransitionIndex() {
		return memory.read<int32_t>(m_addr + 8);
	}
	bool GetbDesiredTransitionReturnValue() {
		return memory.read<bool>(m_addr + 12);
	}
	bool GetbAutomaticRemainingTimeRule() {
		return memory.read<bool>(m_addr + 13);
	}
	struct TArray<int32_t> GetPoseEvaluatorLinks() {
		return memory.read<struct TArray<int32_t>>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FAssetImportInfo
{
public:
	FAssetImportInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FPreviewMeshCollectionEntry
{
public:
	FPreviewMeshCollectionEntry(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftObjectPtr<USkeletalMesh> GetSkeletalMesh() {
		return memory.read<struct TSoftObjectPtr<USkeletalMesh>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FPerlinNoise1D
{
public:
	FPerlinNoise1D(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetValue() {
		return memory.read<float>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FPrimaryAssetRules
{
public:
	FPrimaryAssetRules(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetPriority() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetChunkId() {
		return memory.read<int32_t>(m_addr + 4);
	}
	bool GetbApplyRecursively() {
		return memory.read<bool>(m_addr + 8);
	}
	enum class EPrimaryAssetCookRule GetCookRule() {
		return memory.read<enum class EPrimaryAssetCookRule>(m_addr + 9);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetControlRotation
{
public:
	FGetControlRotation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRotator GetReturnValue() {
		return memory.read<struct FRotator>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FReceiveCopyProperties
{
public:
	FReceiveCopyProperties(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APlayerState GetNewPlayerState() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APlayerState(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FAddCameraLensEffect
{
public:
	FAddCameraLensEffect(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	AEmitterCameraLensEffectBase GetLensEffectEmitterClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return AEmitterCameraLensEffectBase(ptr_addr);
	}
	struct AEmitterCameraLensEffectBase GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AEmitterCameraLensEffectBase(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FPrimaryAssetRulesOverride
{
public:
	FPrimaryAssetRulesOverride(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FPrimaryAssetId GetPrimaryAssetId() {
		return memory.read<struct FPrimaryAssetId>(m_addr + 0);
	}
	struct FPrimaryAssetRules GetRules() {
		return memory.read<struct FPrimaryAssetRules>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetDrawWithLightingOnMobile
{
public:
	FSetDrawWithLightingOnMobile(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetSpectatorPawn
{
public:
	FGetSpectatorPawn(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ASpectatorPawn GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct ASpectatorPawn(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FVector_GetAbs
{
public:
	FVector_GetAbs(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetA() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FAssetMapping
{
public:
	FAssetMapping(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimationAsset GetSourceAsset() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimationAsset(ptr_addr);
	}
	struct UAnimationAsset GetTargetAsset() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UAnimationAsset(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FCanCrouch
{
public:
	FCanCrouch(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FAtmospherePrecomputeParameters
{
public:
	FAtmospherePrecomputeParameters(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetDensityHeight() {
		return memory.read<float>(m_addr + 0);
	}
	float GetDecayHeight() {
		return memory.read<float>(m_addr + 4);
	}
	int32_t GetMaxScatteringOrder() {
		return memory.read<int32_t>(m_addr + 8);
	}
	int32_t GetTransmittanceTexWidth() {
		return memory.read<int32_t>(m_addr + 12);
	}
	int32_t GetTransmittanceTexHeight() {
		return memory.read<int32_t>(m_addr + 16);
	}
	int32_t GetIrradianceTexWidth() {
		return memory.read<int32_t>(m_addr + 20);
	}
	int32_t GetIrradianceTexHeight() {
		return memory.read<int32_t>(m_addr + 24);
	}
	int32_t GetInscatterAltitudeSampleNum() {
		return memory.read<int32_t>(m_addr + 28);
	}
	int32_t GetInscatterMuNum() {
		return memory.read<int32_t>(m_addr + 32);
	}
	int32_t GetInscatterMuSNum() {
		return memory.read<int32_t>(m_addr + 36);
	}
	int32_t GetInscatterNuNum() {
		return memory.read<int32_t>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};class FInteriorSettings
{
public:
	FInteriorSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbIsWorldSettings() {
		return memory.read<bool>(m_addr + 0);
	}
	float GetExteriorVolume() {
		return memory.read<float>(m_addr + 4);
	}
	float GetExteriorTime() {
		return memory.read<float>(m_addr + 8);
	}
	float GetExteriorLPF() {
		return memory.read<float>(m_addr + 12);
	}
	float GetExteriorLPFTime() {
		return memory.read<float>(m_addr + 16);
	}
	float GetInteriorVolume() {
		return memory.read<float>(m_addr + 20);
	}
	float GetInteriorTime() {
		return memory.read<float>(m_addr + 24);
	}
	float GetInteriorLPF() {
		return memory.read<float>(m_addr + 28);
	}
	float GetInteriorLPFTime() {
		return memory.read<float>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FDamageEvent
{
public:
	FDamageEvent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UDamageType GetDamageTypeClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return UDamageType(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetUnselectedSplineSegmentColor
{
public:
	FSetUnselectedSplineSegmentColor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLinearColor GetSegmentColor() {
		return memory.read<struct FLinearColor>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FBitIsMarked
{
public:
	FBitIsMarked(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetData() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetIndex() {
		return memory.read<int32_t>(m_addr + 4);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FAddSplinePointAtIndex
{
public:
	FAddSplinePointAtIndex(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector Getposition() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	int32_t GetIndex() {
		return memory.read<int32_t>(m_addr + 12);
	}
	enum class ESplineCoordinateSpace GetCoordinateSpace() {
		return memory.read<enum class ESplineCoordinateSpace>(m_addr + 16);
	}
	bool GetbUpdateSpline() {
		return memory.read<bool>(m_addr + 17);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetRecommendedResolutionScale
{
public:
	FGetRecommendedResolutionScale(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FAudioVolumeSubmixOverrideSettings
{
public:
	FAudioVolumeSubmixOverrideSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USoundSubmix GetSubmix() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct USoundSubmix(ptr_addr);
	}
	struct TArray<struct USoundEffectSubmixPreset> GetSubmixEffectChain() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct TArray<struct USoundEffectSubmixPreset>(ptr_addr);
	}
	float GetCrossfadeTime() {
		return memory.read<float>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetWorldLocationAtTime
{
public:
	FGetWorldLocationAtTime(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetTime() {
		return memory.read<float>(m_addr + 0);
	}
	bool GetbUseConstantVelocity() {
		return memory.read<bool>(m_addr + 4);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FLaunchOnTestSettings
{
public:
	FLaunchOnTestSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FFilePath GetLaunchOnTestmap() {
		return memory.read<struct FFilePath>(m_addr + 0);
	}
	struct FString GetDeviceID() {
		return memory.read<struct FString>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetCurrentStateName
{
public:
	FGetCurrentStateName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetMachineIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct FName GetReturnValue() {
		return memory.read<struct FName>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FAdd_LinearColorLinearColor
{
public:
	FAdd_LinearColorLinearColor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLinearColor GetA() {
		return memory.read<struct FLinearColor>(m_addr + 0);
	}
	struct FLinearColor GetB() {
		return memory.read<struct FLinearColor>(m_addr + 16);
	}
	struct FLinearColor GetReturnValue() {
		return memory.read<struct FLinearColor>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FBuildPromotionTestSettings
{
public:
	FBuildPromotionTestSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FFilePath GetDefaultStaticMeshAsset() {
		return memory.read<struct FFilePath>(m_addr + 0);
	}
	struct FBuildPromotionImportWorkflowSettings GetImportWorkflow() {
		return memory.read<struct FBuildPromotionImportWorkflowSettings>(m_addr + 16);
	}
	struct FBuildPromotionOpenAssetSettings GetOpenAssets() {
		return memory.read<struct FBuildPromotionOpenAssetSettings>(m_addr + 352);
	}
	struct FBuildPromotionNewProjectSettings GetNewProjectSettings() {
		return memory.read<struct FBuildPromotionNewProjectSettings>(m_addr + 448);
	}
	struct FFilePath GetSourceControlMaterial() {
		return memory.read<struct FFilePath>(m_addr + 480);
	}

private:
	std::uint64_t m_addr = 0;
};class FSkeletalMeshLODInfo
{
public:
	FSkeletalMeshLODInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FPerPlatformFloat GetScreenSize() {
		return memory.read<struct FPerPlatformFloat>(m_addr + 0);
	}
	float GetLODHysteresis() {
		return memory.read<float>(m_addr + 4);
	}
	struct TArray<int32_t> GetLODMaterialMap() {
		return memory.read<struct TArray<int32_t>>(m_addr + 8);
	}
	struct FSkeletalMeshBuildSettings GetBuildSettings() {
		return memory.read<struct FSkeletalMeshBuildSettings>(m_addr + 24);
	}
	struct FSkeletalMeshOptimizationSettings GetReductionSettings() {
		return memory.read<struct FSkeletalMeshOptimizationSettings>(m_addr + 48);
	}
	struct TArray<struct FBoneToReplace> GetBonesToReplace() {
		return memory.read<struct TArray<struct FBoneToReplace>>(m_addr + 128);
	}
	struct TArray<struct FBoneReference> GetBonesToRemove() {
		return memory.read<struct TArray<struct FBoneReference>>(m_addr + 144);
	}
	struct TArray<struct FBoneReference> GetBonesToPrioritize() {
		return memory.read<struct TArray<struct FBoneReference>>(m_addr + 160);
	}
	float GetWeightOfPrioritization() {
		return memory.read<float>(m_addr + 176);
	}
	struct UAnimSequence GetBakePose() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 184);
		return struct UAnimSequence(ptr_addr);
	}
	struct UAnimSequence GetBakePoseOverride() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 192);
		return struct UAnimSequence(ptr_addr);
	}
	struct FString GetSourceImportFilename() {
		return memory.read<struct FString>(m_addr + 200);
	}
	enum class ESkinCacheUsage GetSkinCacheUsage() {
		return memory.read<enum class ESkinCacheUsage>(m_addr + 216);
	}
	char GetbHasBeenSimplified() {
		return memory.read<char>(m_addr + 217);
	}
	char GetbHasPerLODVertexColors() {
		return memory.read<char>(m_addr + 217);
	}
	char GetbAllowCPUAccess() {
		return memory.read<char>(m_addr + 217);
	}
	char GetbSupportUniformlyDistributedSampling() {
		return memory.read<char>(m_addr + 217);
	}

private:
	std::uint64_t m_addr = 0;
};class FBuildPromotionNewProjectSettings
{
public:
	FBuildPromotionNewProjectSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDirectoryPath GetNewProjectFolderOverride() {
		return memory.read<struct FDirectoryPath>(m_addr + 0);
	}
	struct FString GetNewProjectNameOverride() {
		return memory.read<struct FString>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetPlaybackPosition
{
public:
	FGetPlaybackPosition(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FTurnAtRate
{
public:
	FTurnAtRate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetRate() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FBuildPromotionImportWorkflowSettings
{
public:
	FBuildPromotionImportWorkflowSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FEditorImportWorkflowDefinition GetDiffuse() {
		return memory.read<struct FEditorImportWorkflowDefinition>(m_addr + 0);
	}
	struct FEditorImportWorkflowDefinition GetNormal() {
		return memory.read<struct FEditorImportWorkflowDefinition>(m_addr + 32);
	}
	struct FEditorImportWorkflowDefinition GetStaticMesh() {
		return memory.read<struct FEditorImportWorkflowDefinition>(m_addr + 64);
	}
	struct FEditorImportWorkflowDefinition GetReimportStaticMesh() {
		return memory.read<struct FEditorImportWorkflowDefinition>(m_addr + 96);
	}
	struct FEditorImportWorkflowDefinition GetBlendShapeMesh() {
		return memory.read<struct FEditorImportWorkflowDefinition>(m_addr + 128);
	}
	struct FEditorImportWorkflowDefinition GetMorphMesh() {
		return memory.read<struct FEditorImportWorkflowDefinition>(m_addr + 160);
	}
	struct FEditorImportWorkflowDefinition GetSkeletalMesh() {
		return memory.read<struct FEditorImportWorkflowDefinition>(m_addr + 192);
	}
	struct FEditorImportWorkflowDefinition GetAnimation() {
		return memory.read<struct FEditorImportWorkflowDefinition>(m_addr + 224);
	}
	struct FEditorImportWorkflowDefinition GetSound() {
		return memory.read<struct FEditorImportWorkflowDefinition>(m_addr + 256);
	}
	struct FEditorImportWorkflowDefinition GetSurroundSound() {
		return memory.read<struct FEditorImportWorkflowDefinition>(m_addr + 288);
	}
	struct TArray<struct FEditorImportWorkflowDefinition> GetOtherAssetsToImport() {
		return memory.read<struct TArray<struct FEditorImportWorkflowDefinition>>(m_addr + 320);
	}

private:
	std::uint64_t m_addr = 0;
};class FEditorImportWorkflowDefinition
{
public:
	FEditorImportWorkflowDefinition(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FFilePath GetImportFilePath() {
		return memory.read<struct FFilePath>(m_addr + 0);
	}
	struct TArray<struct FImportFactorySettingValues> GetFactorySettings() {
		return memory.read<struct TArray<struct FImportFactorySettingValues>>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FBlueprintEditorPromotionSettings
{
public:
	FBlueprintEditorPromotionSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FFilePath GetFirstMeshPath() {
		return memory.read<struct FFilePath>(m_addr + 0);
	}
	struct FFilePath GetSecondMeshPath() {
		return memory.read<struct FFilePath>(m_addr + 16);
	}
	struct FFilePath GetDefaultParticleAsset() {
		return memory.read<struct FFilePath>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FParticleEditorPromotionSettings
{
public:
	FParticleEditorPromotionSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FFilePath GetDefaultParticleAsset() {
		return memory.read<struct FFilePath>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetStringAttribute
{
public:
	FGetStringAttribute(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FName GetAttributeName() {
		return memory.read<struct FName>(m_addr + 8);
	}
	struct FString GetDefaultValue() {
		return memory.read<struct FString>(m_addr + 16);
	}
	struct FString GetOutValue() {
		return memory.read<struct FString>(m_addr + 32);
	}
	enum class ECustomBoneAttributeLookup GetLookupType() {
		return memory.read<enum class ECustomBoneAttributeLookup>(m_addr + 48);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 49);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetPostSkinningOffsets
{
public:
	FSetPostSkinningOffsets(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetLODIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct TArray<struct FVector> GetOffsets() {
		return memory.read<struct TArray<struct FVector>>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FAdd_Int64Int64
{
public:
	FAdd_Int64Int64(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int64_t GetA() {
		return memory.read<int64_t>(m_addr + 0);
	}
	int64_t GetB() {
		return memory.read<int64_t>(m_addr + 8);
	}
	int64_t GetReturnValue() {
		return memory.read<int64_t>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FMaterialEditorPromotionSettings
{
public:
	FMaterialEditorPromotionSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FFilePath GetDefaultMaterialAsset() {
		return memory.read<struct FFilePath>(m_addr + 0);
	}
	struct FFilePath GetDefaultDiffuseTexture() {
		return memory.read<struct FFilePath>(m_addr + 16);
	}
	struct FFilePath GetDefaultNormalTexture() {
		return memory.read<struct FFilePath>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FEditorImportExportTestDefinition
{
public:
	FEditorImportExportTestDefinition(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FFilePath GetImportFilePath() {
		return memory.read<struct FFilePath>(m_addr + 0);
	}
	struct FString GetExportFileExtension() {
		return memory.read<struct FString>(m_addr + 16);
	}
	bool GetbSkipExport() {
		return memory.read<bool>(m_addr + 32);
	}
	struct TArray<struct FImportFactorySettingValues> GetFactorySettings() {
		return memory.read<struct TArray<struct FImportFactorySettingValues>>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};class FProjectPluginsDir
{
public:
	FProjectPluginsDir(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FExternalToolDefinition
{
public:
	FExternalToolDefinition(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetToolName() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FFilePath GetExecutablePath() {
		return memory.read<struct FFilePath>(m_addr + 16);
	}
	struct FString GetCommandLineOptions() {
		return memory.read<struct FString>(m_addr + 32);
	}
	struct FDirectoryPath GetWorkingDirectory() {
		return memory.read<struct FDirectoryPath>(m_addr + 48);
	}
	struct FString GetScriptExtension() {
		return memory.read<struct FString>(m_addr + 64);
	}
	struct FDirectoryPath GetScriptDirectory() {
		return memory.read<struct FDirectoryPath>(m_addr + 80);
	}

private:
	std::uint64_t m_addr = 0;
};class FTransformFromBoneSpace
{
public:
	FTransformFromBoneSpace(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FVector GetInPosition() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	struct FRotator GetInRotation() {
		return memory.read<struct FRotator>(m_addr + 20);
	}
	struct FVector GetOutPosition() {
		return memory.read<struct FVector>(m_addr + 32);
	}
	struct FRotator GetOutRotation() {
		return memory.read<struct FRotator>(m_addr + 44);
	}

private:
	std::uint64_t m_addr = 0;
};class FFunctionExpressionInput
{
public:
	FFunctionExpressionInput(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UMaterialExpressionFunctionInput GetExpressionInput() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UMaterialExpressionFunctionInput(ptr_addr);
	}
	struct FGuid GetExpressionInputId() {
		return memory.read<struct FGuid>(m_addr + 8);
	}
	struct FExpressionInput GetInput() {
		return memory.read<struct FExpressionInput>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FBandwidthTestGenerator
{
public:
	FBandwidthTestGenerator(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FBandwidthTestItem> GetReplicatedBuffers() {
		return memory.read<struct TArray<struct FBandwidthTestItem>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FContainsEmitterType
{
public:
	FContainsEmitterType(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UObject GetTypeData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return UObject(ptr_addr);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FClassIsChildOf
{
public:
	FClassIsChildOf(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UObject GetTestClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return UObject(ptr_addr);
	}
	UObject GetParentClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return UObject(ptr_addr);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGridBlendSample
{
public:
	FGridBlendSample(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FEditorElement GetGridElement() {
		return memory.read<struct FEditorElement>(m_addr + 0);
	}
	float GetBlendWeight() {
		return memory.read<float>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FBlendSample
{
public:
	FBlendSample(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimSequence GetAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimSequence(ptr_addr);
	}
	struct FVector GetSampleValue() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	float GetRateScale() {
		return memory.read<float>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FAudioEQEffect
{
public:
	FAudioEQEffect(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetFrequencyCenter0() {
		return memory.read<float>(m_addr + 16);
	}
	float GetGain0() {
		return memory.read<float>(m_addr + 20);
	}
	float GetBandwidth0() {
		return memory.read<float>(m_addr + 24);
	}
	float GetFrequencyCenter1() {
		return memory.read<float>(m_addr + 28);
	}
	float GetGain1() {
		return memory.read<float>(m_addr + 32);
	}
	float GetBandwidth1() {
		return memory.read<float>(m_addr + 36);
	}
	float GetFrequencyCenter2() {
		return memory.read<float>(m_addr + 40);
	}
	float GetGain2() {
		return memory.read<float>(m_addr + 44);
	}
	float GetBandwidth2() {
		return memory.read<float>(m_addr + 48);
	}
	float GetFrequencyCenter3() {
		return memory.read<float>(m_addr + 52);
	}
	float GetGain3() {
		return memory.read<float>(m_addr + 56);
	}
	float GetBandwidth3() {
		return memory.read<float>(m_addr + 60);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetLinkedAnimLayerInstanceByClass
{
public:
	FGetLinkedAnimLayerInstanceByClass(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UAnimInstance GetInClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return UAnimInstance(ptr_addr);
	}
	struct UAnimInstance GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UAnimInstance(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetMaximumGustAmount
{
public:
	FSetMaximumGustAmount(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetInNewMaxGust() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FInterpolationParameter
{
public:
	FInterpolationParameter(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetInterpolationTime() {
		return memory.read<float>(m_addr + 0);
	}
	enum class EFilterInterpolationType GetInterpolationType() {
		return memory.read<enum class EFilterInterpolationType>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FBPEditorBookmarkNode
{
public:
	FBPEditorBookmarkNode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FGuid GetNodeGuid() {
		return memory.read<struct FGuid>(m_addr + 0);
	}
	struct FGuid GetParentGuid() {
		return memory.read<struct FGuid>(m_addr + 16);
	}
	struct FText GetDisplayName() {
		return memory.read<struct FText>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FBPVariableDescription
{
public:
	FBPVariableDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetVarName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FGuid GetVarGuid() {
		return memory.read<struct FGuid>(m_addr + 8);
	}
	struct FEdGraphPinType GetVarType() {
		return memory.read<struct FEdGraphPinType>(m_addr + 24);
	}
	struct FString GetFriendlyName() {
		return memory.read<struct FString>(m_addr + 112);
	}
	struct FText GetCategory() {
		return memory.read<struct FText>(m_addr + 128);
	}
	uint64_t GetPropertyFlags() {
		return memory.read<uint64_t>(m_addr + 152);
	}
	struct FName GetRepNotifyFunc() {
		return memory.read<struct FName>(m_addr + 160);
	}
	enum class ELifetimeCondition GetReplicationCondition() {
		return memory.read<enum class ELifetimeCondition>(m_addr + 168);
	}
	struct TArray<struct FBPVariableMetaDataEntry> GetMetaDataArray() {
		return memory.read<struct TArray<struct FBPVariableMetaDataEntry>>(m_addr + 176);
	}
	struct FString GetDefaultValue() {
		return memory.read<struct FString>(m_addr + 192);
	}

private:
	std::uint64_t m_addr = 0;
};class FEdGraphPinType
{
public:
	FEdGraphPinType(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetPinCategory() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FName GetPinSubCategory() {
		return memory.read<struct FName>(m_addr + 8);
	}
	struct TWeakObjectPtr<UObject> GetPinSubCategoryObject() {
		return memory.read<struct TWeakObjectPtr<UObject>>(m_addr + 16);
	}
	struct FSimpleMemberReference GetPinSubCategoryMemberReference() {
		return memory.read<struct FSimpleMemberReference>(m_addr + 24);
	}
	struct FEdGraphTerminalType GetPinValueType() {
		return memory.read<struct FEdGraphTerminalType>(m_addr + 56);
	}
	enum class EPinContainerType GetContainerType() {
		return memory.read<enum class EPinContainerType>(m_addr + 84);
	}
	char GetbIsArray() {
		return memory.read<char>(m_addr + 85);
	}
	char GetbIsReference() {
		return memory.read<char>(m_addr + 85);
	}
	char GetbIsConst() {
		return memory.read<char>(m_addr + 85);
	}
	char GetbIsWeakPointer() {
		return memory.read<char>(m_addr + 85);
	}
	char GetbIsUObjectWrapper() {
		return memory.read<char>(m_addr + 85);
	}

private:
	std::uint64_t m_addr = 0;
};class FStaticComponentMaskValue
{
public:
	FStaticComponentMaskValue(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetR() {
		return memory.read<bool>(m_addr + 0);
	}
	bool GetG() {
		return memory.read<bool>(m_addr + 1);
	}
	bool GetB() {
		return memory.read<bool>(m_addr + 2);
	}
	bool GetA() {
		return memory.read<bool>(m_addr + 3);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetTimelineLength
{
public:
	FGetTimelineLength(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetShadowQuality
{
public:
	FSetShadowQuality(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FConstraintInstanceBase
{
public:
	FConstraintInstanceBase(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FGetSplinePointType
{
public:
	FGetSplinePointType(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetPointIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	enum class ESplinePointType GetReturnValue() {
		return memory.read<enum class ESplinePointType>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FClientStartCameraShakeFromSource
{
public:
	FClientStartCameraShakeFromSource(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UCameraShakeBase GetShake() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return UCameraShakeBase(ptr_addr);
	}
	struct UCameraShakeSourceComponent GetSourceComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UCameraShakeSourceComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FEdGraphTerminalType
{
public:
	FEdGraphTerminalType(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetTerminalCategory() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FName GetTerminalSubCategory() {
		return memory.read<struct FName>(m_addr + 8);
	}
	struct TWeakObjectPtr<UObject> GetTerminalSubCategoryObject() {
		return memory.read<struct TWeakObjectPtr<UObject>>(m_addr + 16);
	}
	bool GetbTerminalIsConst() {
		return memory.read<bool>(m_addr + 24);
	}
	bool GetbTerminalIsWeakPointer() {
		return memory.read<bool>(m_addr + 25);
	}
	bool GetbTerminalIsUObjectWrapper() {
		return memory.read<bool>(m_addr + 26);
	}

private:
	std::uint64_t m_addr = 0;
};class FQuat_GetAxisZ
{
public:
	FQuat_GetAxisZ(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FQuat GetQ() {
		return memory.read<struct FQuat>(m_addr + 0);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSolverIterations
{
public:
	FSolverIterations(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetFixedTimeStep() {
		return memory.read<float>(m_addr + 0);
	}
	int32_t GetSolverIterations() {
		return memory.read<int32_t>(m_addr + 4);
	}
	int32_t GetJointIterations() {
		return memory.read<int32_t>(m_addr + 8);
	}
	int32_t GetCollisionIterations() {
		return memory.read<int32_t>(m_addr + 12);
	}
	int32_t GetSolverPushOutIterations() {
		return memory.read<int32_t>(m_addr + 16);
	}
	int32_t GetJointPushOutIterations() {
		return memory.read<int32_t>(m_addr + 20);
	}
	int32_t GetCollisionPushOutIterations() {
		return memory.read<int32_t>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FBPComponentClassOverride
{
public:
	FBPComponentClassOverride(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetComponentName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	UObject GetComponentClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return UObject(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FBlueprintComponentChangedPropertyInfo
{
public:
	FBlueprintComponentChangedPropertyInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetPropertyName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	int32_t GetArrayIndex() {
		return memory.read<int32_t>(m_addr + 8);
	}
	struct UStruct GetPropertyScope() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UStruct(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FUnloadSkinWeightProfile
{
public:
	FUnloadSkinWeightProfile(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetInProfileName() {
		return memory.read<struct FName>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FEventGraphFastCallPair
{
public:
	FEventGraphFastCallPair(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UFunction GetFunctionToPatch() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UFunction(ptr_addr);
	}
	int32_t GetEventGraphCallOffset() {
		return memory.read<int32_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FAnimSlotGroup
{
public:
	FAnimSlotGroup(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetGroupName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct TArray<struct FName> GetSlotNames() {
		return memory.read<struct TArray<struct FName>>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FBoneNode
{
public:
	FBoneNode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	int32_t GetParentIndex() {
		return memory.read<int32_t>(m_addr + 8);
	}
	enum class EBoneTranslationRetargetingMode GetTranslationRetargetingMode() {
		return memory.read<enum class EBoneTranslationRetargetingMode>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FPointerToUberGraphFrame
{
public:
	FPointerToUberGraphFrame(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FIsRegisteredTableId
{
public:
	FIsRegisteredTableId(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetTableId() {
		return memory.read<struct FName>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FStartCameraShake
{
public:
	FStartCameraShake(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UCameraShakeBase GetShakeClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return UCameraShakeBase(ptr_addr);
	}
	float GetScale() {
		return memory.read<float>(m_addr + 8);
	}
	enum class ECameraShakePlaySpace GetPlaySpace() {
		return memory.read<enum class ECameraShakePlaySpace>(m_addr + 12);
	}
	struct FRotator GetUserPlaySpaceRot() {
		return memory.read<struct FRotator>(m_addr + 16);
	}
	struct UCameraShakeBase GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 32);
		return struct UCameraShakeBase(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsBodyGravityEnabled
{
public:
	FIsBodyGravityEnabled(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FDebuggingInfoForSingleFunction
{
public:
	FDebuggingInfoForSingleFunction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FGetPerchRadiusThreshold
{
public:
	FGetPerchRadiusThreshold(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FStopCameraShake
{
public:
	FStopCameraShake(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UCameraShakeBase GetShakeInstance() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UCameraShakeBase(ptr_addr);
	}
	bool GetbImmediately() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSwarmDebugOptions
{
public:
	FSwarmDebugOptions(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	char GetbDistributionEnabled() {
		return memory.read<char>(m_addr + 0);
	}
	char GetbForceContentExport() {
		return memory.read<char>(m_addr + 0);
	}
	char GetbInitialized() {
		return memory.read<char>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FDataDrivenConsoleVariable
{
public:
	FDataDrivenConsoleVariable(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class FDataDrivenCVarType GetType() {
		return memory.read<enum class FDataDrivenCVarType>(m_addr + 0);
	}
	struct FString GetName() {
		return memory.read<struct FString>(m_addr + 8);
	}
	struct FString GetToolTip() {
		return memory.read<struct FString>(m_addr + 24);
	}
	float GetDefaultValueFloat() {
		return memory.read<float>(m_addr + 40);
	}
	int32_t GetDefaultValueInt() {
		return memory.read<int32_t>(m_addr + 44);
	}
	bool GetDefaultValueBool() {
		return memory.read<bool>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};class FHideComponent
{
public:
	FHideComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPrimitiveComponent GetInComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UPrimitiveComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSet_Length
{
public:
	FSet_Length(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSet<int32_t> GetTargetSet() {
		return memory.read<struct TSet<int32_t>>(m_addr + 0);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 80);
	}

private:
	std::uint64_t m_addr = 0;
};class FNodeToCodeAssociation
{
public:
	FNodeToCodeAssociation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FToSign2D
{
public:
	FToSign2D(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector2D GetA() {
		return memory.read<struct FVector2D>(m_addr + 0);
	}
	struct FVector2D GetReturnValue() {
		return memory.read<struct FVector2D>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FMap_Clear
{
public:
	FMap_Clear(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<int32_t, int32_t> GetTargetMap() {
		return memory.read<struct TMap<int32_t, int32_t>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetSelectedSplineSegmentColor
{
public:
	FSetSelectedSplineSegmentColor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLinearColor GetSegmentColor() {
		return memory.read<struct FLinearColor>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FNegated2D
{
public:
	FNegated2D(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector2D GetA() {
		return memory.read<struct FVector2D>(m_addr + 0);
	}
	struct FVector2D GetReturnValue() {
		return memory.read<struct FVector2D>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FAdd_Vector4Vector4
{
public:
	FAdd_Vector4Vector4(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector4 GetA() {
		return memory.read<struct FVector4>(m_addr + 0);
	}
	struct FVector4 GetB() {
		return memory.read<struct FVector4>(m_addr + 16);
	}
	struct FVector4 GetReturnValue() {
		return memory.read<struct FVector4>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FBookmark2DJumpToSettings
{
public:
	FBookmark2DJumpToSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FAnd_IntInt
{
public:
	FAnd_IntInt(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetA() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetB() {
		return memory.read<int32_t>(m_addr + 4);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGeomSelection
{
public:
	FGeomSelection(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetType() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetIndex() {
		return memory.read<int32_t>(m_addr + 4);
	}
	int32_t GetSelectionIndex() {
		return memory.read<int32_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FBlueprintInputKeyDelegateBinding
{
public:
	FBlueprintInputKeyDelegateBinding(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FInputChord GetInputChord() {
		return memory.read<struct FInputChord>(m_addr + 8);
	}
	enum class EInputEvent GetInputKeyEvent() {
		return memory.read<enum class EInputEvent>(m_addr + 40);
	}
	struct FName GetFunctionNameToBind() {
		return memory.read<struct FName>(m_addr + 44);
	}

private:
	std::uint64_t m_addr = 0;
};class FStreamedAudioPlatformData
{
public:
	FStreamedAudioPlatformData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FCachedAnimTransitionData
{
public:
	FCachedAnimTransitionData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetStateMachineName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FName GetFromStateName() {
		return memory.read<struct FName>(m_addr + 8);
	}
	struct FName GetToStateName() {
		return memory.read<struct FName>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetMaxCascadeStaticObjects
{
public:
	FSetMaxCascadeStaticObjects(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetNewValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCachedAnimAssetPlayerData
{
public:
	FCachedAnimAssetPlayerData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetStateMachineName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FName GetStateName() {
		return memory.read<struct FName>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FActiveCameraShakeInfo
{
public:
	FActiveCameraShakeInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UCameraShakeBase GetShakeInstance() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UCameraShakeBase(ptr_addr);
	}
	struct TWeakObjectPtr<UCameraShakeSourceComponent> GetShakeSource() {
		return memory.read<struct TWeakObjectPtr<UCameraShakeSourceComponent>>(m_addr + 8);
	}
	bool GetbIsCustomInitialized() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FCameraShakeInfo
{
public:
	FCameraShakeInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FCameraShakeDuration GetDuration() {
		return memory.read<struct FCameraShakeDuration>(m_addr + 0);
	}
	float GetBlendIn() {
		return memory.read<float>(m_addr + 8);
	}
	float GetBlendOut() {
		return memory.read<float>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetHeightFogContribution
{
public:
	FSetHeightFogContribution(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsEmpty
{
public:
	FIsEmpty(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetinString() {
		return memory.read<struct FString>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FPointerEvent_GetPointerIndex
{
public:
	FPointerEvent_GetPointerIndex(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FPointerEvent GetInput() {
		return memory.read<struct FPointerEvent>(m_addr + 0);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 112);
	}

private:
	std::uint64_t m_addr = 0;
};class FCameraShakeStopParams
{
public:
	FCameraShakeStopParams(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbImmediately() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetViewTargetWithBlend
{
public:
	FSetViewTargetWithBlend(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetNewViewTarget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}
	float GetBlendTime() {
		return memory.read<float>(m_addr + 8);
	}
	enum class EViewTargetBlendFunction GetBlendFunc() {
		return memory.read<enum class EViewTargetBlendFunction>(m_addr + 12);
	}
	float GetBlendExp() {
		return memory.read<float>(m_addr + 16);
	}
	bool GetbLockOutgoing() {
		return memory.read<bool>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FCross_VectorVector
{
public:
	FCross_VectorVector(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetA() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetB() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FCameraShakeUpdateResult
{
public:
	FCameraShakeUpdateResult(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FCameraShakeScrubParams
{
public:
	FCameraShakeScrubParams(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetAbsoluteTime() {
		return memory.read<float>(m_addr + 0);
	}
	float GetShakeScale() {
		return memory.read<float>(m_addr + 4);
	}
	float GetDynamicScale() {
		return memory.read<float>(m_addr + 8);
	}
	float GetBlendingWeight() {
		return memory.read<float>(m_addr + 12);
	}
	struct FMinimalViewInfo GetPOV() {
		return memory.read<struct FMinimalViewInfo>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FCanvasIcon
{
public:
	FCanvasIcon(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTexture GetTexture() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UTexture(ptr_addr);
	}
	float GetU() {
		return memory.read<float>(m_addr + 8);
	}
	float GetV() {
		return memory.read<float>(m_addr + 12);
	}
	float GetUL() {
		return memory.read<float>(m_addr + 16);
	}
	float GetVL() {
		return memory.read<float>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetAnimationMode
{
public:
	FSetAnimationMode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class EAnimationMode GetInAnimationMode() {
		return memory.read<enum class EAnimationMode>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FWeightedBlendables
{
public:
	FWeightedBlendables(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FWeightedBlendable> GetArray() {
		return memory.read<struct TArray<struct FWeightedBlendable>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetDisplayMonitorIndex
{
public:
	FSetDisplayMonitorIndex(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetInDisplayMonitorIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FWrappedStringElement
{
public:
	FWrappedStringElement(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetValue() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FVector2D GetLineExtent() {
		return memory.read<struct FVector2D>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FBasedMovementInfo
{
public:
	FBasedMovementInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPrimitiveComponent GetMovementBase() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UPrimitiveComponent(ptr_addr);
	}
	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 8);
	}
	struct FVector_NetQuantize100 GetLocation() {
		return memory.read<struct FVector_NetQuantize100>(m_addr + 16);
	}
	struct FRotator GetRotation() {
		return memory.read<struct FRotator>(m_addr + 28);
	}
	bool GetbServerHasBaseComponent() {
		return memory.read<bool>(m_addr + 40);
	}
	bool GetbRelativeRotation() {
		return memory.read<bool>(m_addr + 41);
	}
	bool GetbServerHasVelocity() {
		return memory.read<bool>(m_addr + 42);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetLinearStiffness
{
public:
	FSetLinearStiffness(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewLinearStiffness() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FRootMotionSourceSettings
{
public:
	FRootMotionSourceSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	char GetFlags() {
		return memory.read<char>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FFindFloorResult
{
public:
	FFindFloorResult(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	char GetbBlockingHit() {
		return memory.read<char>(m_addr + 0);
	}
	char GetbWalkableFloor() {
		return memory.read<char>(m_addr + 0);
	}
	char GetbLineTrace() {
		return memory.read<char>(m_addr + 0);
	}
	float GetFloorDist() {
		return memory.read<float>(m_addr + 4);
	}
	float GetLineDist() {
		return memory.read<float>(m_addr + 8);
	}
	struct FHitResult GetHitResult() {
		return memory.read<struct FHitResult>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FTextToLower
{
public:
	FTextToLower(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetInText() {
		return memory.read<struct FText>(m_addr + 0);
	}
	struct FText GetReturnValue() {
		return memory.read<struct FText>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FRenderTargetCreateStaticTexture2DEditorOnly
{
public:
	FRenderTargetCreateStaticTexture2DEditorOnly(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTextureRenderTarget2D GetRenderTarget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UTextureRenderTarget2D(ptr_addr);
	}
	struct FString GetName() {
		return memory.read<struct FString>(m_addr + 8);
	}
	enum class TextureCompressionSettings GetCompressionSettings() {
		return memory.read<enum class TextureCompressionSettings>(m_addr + 24);
	}
	enum class TextureMipGenSettings GetMipSettings() {
		return memory.read<enum class TextureMipGenSettings>(m_addr + 25);
	}
	struct UTexture2D GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 32);
		return struct UTexture2D(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetDataTableRowFromName
{
public:
	FGetDataTableRowFromName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UDataTable GetTable() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UDataTable(ptr_addr);
	}
	struct FName GetRowName() {
		return memory.read<struct FName>(m_addr + 8);
	}
	struct FTableRowBase GetOutRow() {
		return memory.read<struct FTableRowBase>(m_addr + 16);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FVirtualTextureBuildSettings
{
public:
	FVirtualTextureBuildSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetTileSize() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetTileBorderSize() {
		return memory.read<int32_t>(m_addr + 4);
	}
	bool GetbEnableCompressCrunch() {
		return memory.read<bool>(m_addr + 8);
	}
	bool GetbEnableCompressZlib() {
		return memory.read<bool>(m_addr + 9);
	}

private:
	std::uint64_t m_addr = 0;
};class FCharacterMoveResponsePackedBits
{
public:
	FCharacterMoveResponsePackedBits(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FCharacterServerMovePackedBits
{
public:
	FCharacterServerMovePackedBits(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FSetControllerLightColor
{
public:
	FSetControllerLightColor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FColor GetColor() {
		return memory.read<struct FColor>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FChildActorComponentInstanceData
{
public:
	FChildActorComponentInstanceData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	AActor GetChildActorClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 184);
		return AActor(ptr_addr);
	}
	struct FName GetChildActorName() {
		return memory.read<struct FName>(m_addr + 192);
	}
	struct TArray<struct FChildActorAttachedActorInfo> GetAttachedActors() {
		return memory.read<struct TArray<struct FChildActorAttachedActorInfo>>(m_addr + 200);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetDirectionalInscatteringExponent
{
public:
	FSetDirectionalInscatteringExponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetOverallScalabilityLevel
{
public:
	FSetOverallScalabilityLevel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FToggleSpeaking
{
public:
	FToggleSpeaking(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbInSpeaking() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FChildActorAttachedActorInfo
{
public:
	FChildActorAttachedActorInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TWeakObjectPtr<AActor> GetActor() {
		return memory.read<struct TWeakObjectPtr<AActor>>(m_addr + 0);
	}
	struct FName GetSocketName() {
		return memory.read<struct FName>(m_addr + 8);
	}
	struct FTransform GetRelativeTransform() {
		return memory.read<struct FTransform>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetFogInscatteringColor
{
public:
	FSetFogInscatteringColor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLinearColor GetValue() {
		return memory.read<struct FLinearColor>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FMontage_IsPlaying
{
public:
	FMontage_IsPlaying(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimMontage GetMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimMontage(ptr_addr);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FCustomProfile
{
public:
	FCustomProfile(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct TArray<struct FResponseChannel> GetCustomResponses() {
		return memory.read<struct TArray<struct FResponseChannel>>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FCustomChannelSetup
{
public:
	FCustomChannelSetup(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class ECollisionChannel GetChannel() {
		return memory.read<enum class ECollisionChannel>(m_addr + 0);
	}
	enum class ECollisionResponse GetDefaultResponse() {
		return memory.read<enum class ECollisionResponse>(m_addr + 1);
	}
	bool GetbTraceType() {
		return memory.read<bool>(m_addr + 2);
	}
	bool GetbStaticObject() {
		return memory.read<bool>(m_addr + 3);
	}
	struct FName GetName() {
		return memory.read<struct FName>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FVector4_IsUnit3
{
public:
	FVector4_IsUnit3(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector4 GetA() {
		return memory.read<struct FVector4>(m_addr + 0);
	}
	float GetSquaredLenthTolerance() {
		return memory.read<float>(m_addr + 16);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FCollisionResponseTemplate
{
public:
	FCollisionResponseTemplate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	enum class ECollisionEnabled GetCollisionEnabled() {
		return memory.read<enum class ECollisionEnabled>(m_addr + 8);
	}
	bool GetbCanModify() {
		return memory.read<bool>(m_addr + 10);
	}
	struct FName GetObjectTypeName() {
		return memory.read<struct FName>(m_addr + 44);
	}
	struct TArray<struct FResponseChannel> GetCustomResponses() {
		return memory.read<struct TArray<struct FResponseChannel>>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};class FMakePlatformFilename
{
public:
	FMakePlatformFilename(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetInPath() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FString GetOutPath() {
		return memory.read<struct FString>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FAutoCompleteNode
{
public:
	FAutoCompleteNode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetIndexChar() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct TArray<int32_t> GetAutoCompleteListIndices() {
		return memory.read<struct TArray<int32_t>>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetIgnoreTimeDilation
{
public:
	FGetIgnoreTimeDilation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FConstraintDrive
{
public:
	FConstraintDrive(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetStiffness() {
		return memory.read<float>(m_addr + 0);
	}
	float GetDamping() {
		return memory.read<float>(m_addr + 4);
	}
	float GetMaxForce() {
		return memory.read<float>(m_addr + 8);
	}
	char GetbEnablePositionDrive() {
		return memory.read<char>(m_addr + 12);
	}
	char GetbEnableVelocityDrive() {
		return memory.read<char>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FConstraintInstance
{
public:
	FConstraintInstance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetJointName() {
		return memory.read<struct FName>(m_addr + 24);
	}
	struct FName GetConstraintBone1() {
		return memory.read<struct FName>(m_addr + 32);
	}
	struct FName GetConstraintBone2() {
		return memory.read<struct FName>(m_addr + 40);
	}
	struct FVector GetPos1() {
		return memory.read<struct FVector>(m_addr + 48);
	}
	struct FVector GetPriAxis1() {
		return memory.read<struct FVector>(m_addr + 60);
	}
	struct FVector GetSecAxis1() {
		return memory.read<struct FVector>(m_addr + 72);
	}
	struct FVector GetPos2() {
		return memory.read<struct FVector>(m_addr + 84);
	}
	struct FVector GetPriAxis2() {
		return memory.read<struct FVector>(m_addr + 96);
	}
	struct FVector GetSecAxis2() {
		return memory.read<struct FVector>(m_addr + 108);
	}
	struct FRotator GetAngularRotationOffset() {
		return memory.read<struct FRotator>(m_addr + 120);
	}
	char GetbScaleLinearLimits() {
		return memory.read<char>(m_addr + 132);
	}
	struct FConstraintProfileProperties GetProfileInstance() {
		return memory.read<struct FConstraintProfileProperties>(m_addr + 140);
	}

private:
	std::uint64_t m_addr = 0;
};class FStringCurve
{
public:
	FStringCurve(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetDefaultValue() {
		return memory.read<struct FString>(m_addr + 104);
	}
	struct TArray<struct FStringCurveKey> GetKeys() {
		return memory.read<struct TArray<struct FStringCurveKey>>(m_addr + 120);
	}

private:
	std::uint64_t m_addr = 0;
};class FQuat_UnrotateVector
{
public:
	FQuat_UnrotateVector(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FQuat GetQ() {
		return memory.read<struct FQuat>(m_addr + 0);
	}
	struct FVector GetV() {
		return memory.read<struct FVector>(m_addr + 16);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 28);
	}

private:
	std::uint64_t m_addr = 0;
};class FLinearConstraint
{
public:
	FLinearConstraint(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Getlimit() {
		return memory.read<float>(m_addr + 20);
	}
	enum class ELinearConstraintMotion GetXMotion() {
		return memory.read<enum class ELinearConstraintMotion>(m_addr + 24);
	}
	enum class ELinearConstraintMotion GetYMotion() {
		return memory.read<enum class ELinearConstraintMotion>(m_addr + 25);
	}
	enum class ELinearConstraintMotion GetZMotion() {
		return memory.read<enum class ELinearConstraintMotion>(m_addr + 26);
	}

private:
	std::uint64_t m_addr = 0;
};class FVectorSpringState
{
public:
	FVectorSpringState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FIsRestrictedPath
{
public:
	FIsRestrictedPath(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetInPath() {
		return memory.read<struct FString>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FClientReceiveData
{
public:
	FClientReceiveData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APlayerController GetLocalPC() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APlayerController(ptr_addr);
	}
	struct FName GetMessageType() {
		return memory.read<struct FName>(m_addr + 8);
	}
	int32_t GetMessageIndex() {
		return memory.read<int32_t>(m_addr + 16);
	}
	struct FString GetMessageString() {
		return memory.read<struct FString>(m_addr + 24);
	}
	struct APlayerState GetRelatedPlayerState_2() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct APlayerState(ptr_addr);
	}
	struct APlayerState GetRelatedPlayerState_3() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct APlayerState(ptr_addr);
	}
	struct UObject GetOptionalObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct UObject(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetMonth
{
public:
	FGetMonth(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDateTime GetA() {
		return memory.read<struct FDateTime>(m_addr + 0);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetFogDensity
{
public:
	FSetFogDensity(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetFogCutoffDistance
{
public:
	FSetFogCutoffDistance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCullDistanceSizePair
{
public:
	FCullDistanceSizePair(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetSize() {
		return memory.read<float>(m_addr + 0);
	}
	float GetCullDistance() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FConv_StringToFloat
{
public:
	FConv_StringToFloat(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetinString() {
		return memory.read<struct FString>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FRuntimeCurveLinearColor
{
public:
	FRuntimeCurveLinearColor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRichCurve GetColorCurves[4]() {
		return memory.read<struct FRichCurve>(m_addr + 0);
	}
	struct UCurveLinearColor GetExternalCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 512);
		return struct UCurveLinearColor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FAssetEditorOrbitCameraPosition
{
public:
	FAssetEditorOrbitCameraPosition(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbIsSet() {
		return memory.read<bool>(m_addr + 0);
	}
	struct FVector GetCamOrbitPoint() {
		return memory.read<struct FVector>(m_addr + 4);
	}
	struct FVector GetCamOrbitZoom() {
		return memory.read<struct FVector>(m_addr + 16);
	}
	struct FRotator GetCamOrbitRotation() {
		return memory.read<struct FRotator>(m_addr + 28);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_GetInputVector
{
public:
	FK2_GetInputVector(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCurveAtlasColorAdjustments
{
public:
	FCurveAtlasColorAdjustments(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	char GetbChromaKeyTexture() {
		return memory.read<char>(m_addr + 0);
	}
	float GetAdjustBrightness() {
		return memory.read<float>(m_addr + 4);
	}
	float GetAdjustBrightnessCurve() {
		return memory.read<float>(m_addr + 8);
	}
	float GetAdjustVibrance() {
		return memory.read<float>(m_addr + 12);
	}
	float GetAdjustSaturation() {
		return memory.read<float>(m_addr + 16);
	}
	float GetAdjustRGBCurve() {
		return memory.read<float>(m_addr + 20);
	}
	float GetAdjustHue() {
		return memory.read<float>(m_addr + 24);
	}
	float GetAdjustMinAlpha() {
		return memory.read<float>(m_addr + 28);
	}
	float GetAdjustMaxAlpha() {
		return memory.read<float>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FCurveTableRowHandle
{
public:
	FCurveTableRowHandle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UCurveTable GetCurveTable() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UCurveTable(ptr_addr);
	}
	struct FName GetRowName() {
		return memory.read<struct FName>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetBeamSourceTangent
{
public:
	FGetBeamSourceTangent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetEmitterIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetSourceIndex() {
		return memory.read<int32_t>(m_addr + 4);
	}
	struct FVector GetOutTangentPoint() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FBakedCustomAttributePerBoneData
{
public:
	FBakedCustomAttributePerBoneData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetBoneTreeIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct TArray<struct FBakedStringCustomAttribute> GetStringAttributes() {
		return memory.read<struct TArray<struct FBakedStringCustomAttribute>>(m_addr + 8);
	}
	struct TArray<struct FBakedIntegerCustomAttribute> GetIntAttributes() {
		return memory.read<struct TArray<struct FBakedIntegerCustomAttribute>>(m_addr + 24);
	}
	struct TArray<struct FBakedFloatCustomAttribute> GetFloatAttributes() {
		return memory.read<struct TArray<struct FBakedFloatCustomAttribute>>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};class FIntegralCurve
{
public:
	FIntegralCurve(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FIntegralKey> GetKeys() {
		return memory.read<struct TArray<struct FIntegralKey>>(m_addr + 104);
	}
	int32_t GetDefaultValue() {
		return memory.read<int32_t>(m_addr + 120);
	}
	bool GetbUseDefaultValueBeforeFirstKey() {
		return memory.read<bool>(m_addr + 124);
	}

private:
	std::uint64_t m_addr = 0;
};class FTickPrerequisite
{
public:
	FTickPrerequisite(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FStringCurveKey
{
public:
	FStringCurveKey(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetTime() {
		return memory.read<float>(m_addr + 0);
	}
	struct FString GetValue() {
		return memory.read<struct FString>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FStaticMeshVertexColorLODData
{
public:
	FStaticMeshVertexColorLODData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FPaintedVertex> GetPaintedVertices() {
		return memory.read<struct TArray<struct FPaintedVertex>>(m_addr + 0);
	}
	struct TArray<struct FColor> GetVertexBufferColors() {
		return memory.read<struct TArray<struct FColor>>(m_addr + 16);
	}
	uint32_t GetLODIndex() {
		return memory.read<uint32_t>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetAudioBusSendPostEffect
{
public:
	FSetAudioBusSendPostEffect(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAudioBus GetAudioBus() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAudioBus(ptr_addr);
	}
	float GetAudioBusSendLevel() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FCustomAttributeSetting
{
public:
	FCustomAttributeSetting(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetName() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FString GetMeaning() {
		return memory.read<struct FString>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSkinWeightProfileInfo
{
public:
	FSkinWeightProfileInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FPerPlatformBool GetDefaultProfile() {
		return memory.read<struct FPerPlatformBool>(m_addr + 8);
	}
	struct FPerPlatformInt GetDefaultProfileFromLODIndex() {
		return memory.read<struct FPerPlatformInt>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FDataTableCategoryHandle
{
public:
	FDataTableCategoryHandle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UDataTable GetDataTable() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UDataTable(ptr_addr);
	}
	struct FName GetColumnName() {
		return memory.read<struct FName>(m_addr + 8);
	}
	struct FName GetRowContents() {
		return memory.read<struct FName>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FDataTableRowHandle
{
public:
	FDataTableRowHandle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UDataTable GetDataTable() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UDataTable(ptr_addr);
	}
	struct FName GetRowName() {
		return memory.read<struct FName>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FConcat_StrStr
{
public:
	FConcat_StrStr(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetA() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FString GetB() {
		return memory.read<struct FString>(m_addr + 16);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FNegateRotator
{
public:
	FNegateRotator(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRotator GetA() {
		return memory.read<struct FRotator>(m_addr + 0);
	}
	struct FRotator GetReturnValue() {
		return memory.read<struct FRotator>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FHSVToRGB_Vector
{
public:
	FHSVToRGB_Vector(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLinearColor GetHSV() {
		return memory.read<struct FLinearColor>(m_addr + 0);
	}
	struct FLinearColor GetRGB() {
		return memory.read<struct FLinearColor>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetCurrentHDRDisplayNits
{
public:
	FGetCurrentHDRDisplayNits(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FDebugCameraControllerSettingsViewModeIndex
{
public:
	FDebugCameraControllerSettingsViewModeIndex(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class EViewModeIndex GetViewModeIndex() {
		return memory.read<enum class EViewModeIndex>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FDebugDisplayProperty
{
public:
	FDebugDisplayProperty(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetObj() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	UObject GetWithinClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return UObject(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsPlayingNetworkedRootMotionMontage
{
public:
	FIsPlayingNetworkedRootMotionMontage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FMulticastRecordOptions
{
public:
	FMulticastRecordOptions(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetFuncPathName() {
		return memory.read<struct FString>(m_addr + 0);
	}
	bool GetbServerSkip() {
		return memory.read<bool>(m_addr + 16);
	}
	bool GetbClientSkip() {
		return memory.read<bool>(m_addr + 17);
	}

private:
	std::uint64_t m_addr = 0;
};class FStaticMeshOptimizationSettings
{
public:
	FStaticMeshOptimizationSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class EOptimizationType GetReductionMethod() {
		return memory.read<enum class EOptimizationType>(m_addr + 0);
	}
	float GetNumOfTrianglesPercentage() {
		return memory.read<float>(m_addr + 4);
	}
	float GetMaxDeviationPercentage() {
		return memory.read<float>(m_addr + 8);
	}
	float GetWeldingThreshold() {
		return memory.read<float>(m_addr + 12);
	}
	bool GetbRecalcNormals() {
		return memory.read<bool>(m_addr + 16);
	}
	float GetNormalsThreshold() {
		return memory.read<float>(m_addr + 20);
	}
	char GetSilhouetteImportance() {
		return memory.read<char>(m_addr + 24);
	}
	char GetTextureImportance() {
		return memory.read<char>(m_addr + 25);
	}
	char GetShadingImportance() {
		return memory.read<char>(m_addr + 26);
	}

private:
	std::uint64_t m_addr = 0;
};class FAddControllerPitchInput
{
public:
	FAddControllerPitchInput(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetVal() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FDialogueContextMapping
{
public:
	FDialogueContextMapping(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDialogueContext GetContext() {
		return memory.read<struct FDialogueContext>(m_addr + 0);
	}
	struct USoundWave GetSoundWave() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 24);
		return struct USoundWave(ptr_addr);
	}
	struct FString GetLocalizationKeyFormat() {
		return memory.read<struct FString>(m_addr + 32);
	}
	struct UDialogueSoundWaveProxy GetProxy() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct UDialogueSoundWaveProxy(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetShadingQuality
{
public:
	FSetShadingQuality(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FRawDistributionFloat
{
public:
	FRawDistributionFloat(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetMinValue() {
		return memory.read<float>(m_addr + 32);
	}
	float GetMaxValue() {
		return memory.read<float>(m_addr + 36);
	}
	struct UDistributionFloat GetDistribution() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct UDistributionFloat(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FPSCPoolElem
{
public:
	FPSCPoolElem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UParticleSystemComponent GetPSC() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UParticleSystemComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGraphReference
{
public:
	FGraphReference(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UEdGraph GetMacroGraph() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UEdGraph(ptr_addr);
	}
	struct UBlueprint GetGraphBlueprint() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UBlueprint(ptr_addr);
	}
	struct FGuid GetGraphGuid() {
		return memory.read<struct FGuid>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FVoiceSettings
{
public:
	FVoiceSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USceneComponent GetComponentToAttachTo() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct USceneComponent(ptr_addr);
	}
	struct USoundAttenuation GetAttenuationSettings() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct USoundAttenuation(ptr_addr);
	}
	struct USoundEffectSourcePresetChain GetSourceEffectChain() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct USoundEffectSourcePresetChain(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FResetAnimInstanceDynamics
{
public:
	FResetAnimInstanceDynamics(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class ETeleportType GetInTeleportType() {
		return memory.read<enum class ETeleportType>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSmartNameContainer
{
public:
	FSmartNameContainer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FEdGraphSchemaAction
{
public:
	FEdGraphSchemaAction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetMenuDescription() {
		return memory.read<struct FText>(m_addr + 8);
	}
	struct FText GetTooltipDescription() {
		return memory.read<struct FText>(m_addr + 32);
	}
	struct FText GetCategory() {
		return memory.read<struct FText>(m_addr + 56);
	}
	struct FText GetKeywords() {
		return memory.read<struct FText>(m_addr + 80);
	}
	int32_t GetGrouping() {
		return memory.read<int32_t>(m_addr + 104);
	}
	int32_t GetSectionID() {
		return memory.read<int32_t>(m_addr + 108);
	}
	struct TArray<struct FString> GetMenuDescriptionArray() {
		return memory.read<struct TArray<struct FString>>(m_addr + 112);
	}
	struct TArray<struct FString> GetFullSearchTitlesArray() {
		return memory.read<struct TArray<struct FString>>(m_addr + 128);
	}
	struct TArray<struct FString> GetFullSearchKeywordsArray() {
		return memory.read<struct TArray<struct FString>>(m_addr + 144);
	}
	struct TArray<struct FString> GetFullSearchCategoryArray() {
		return memory.read<struct TArray<struct FString>>(m_addr + 160);
	}
	struct TArray<struct FString> GetLocalizedMenuDescriptionArray() {
		return memory.read<struct TArray<struct FString>>(m_addr + 176);
	}
	struct TArray<struct FString> GetLocalizedFullSearchTitlesArray() {
		return memory.read<struct TArray<struct FString>>(m_addr + 192);
	}
	struct TArray<struct FString> GetLocalizedFullSearchKeywordsArray() {
		return memory.read<struct TArray<struct FString>>(m_addr + 208);
	}
	struct TArray<struct FString> GetLocalizedFullSearchCategoryArray() {
		return memory.read<struct TArray<struct FString>>(m_addr + 224);
	}
	struct FString GetSearchText() {
		return memory.read<struct FString>(m_addr + 240);
	}

private:
	std::uint64_t m_addr = 0;
};class FEqualEqual_IgnoreCase_TextText
{
public:
	FEqualEqual_IgnoreCase_TextText(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetA() {
		return memory.read<struct FText>(m_addr + 0);
	}
	struct FText GetB() {
		return memory.read<struct FText>(m_addr + 24);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};class FMeshBuildSettings
{
public:
	FMeshBuildSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	char GetbUseMikkTSpace() {
		return memory.read<char>(m_addr + 0);
	}
	char GetbRecomputeNormals() {
		return memory.read<char>(m_addr + 0);
	}
	char GetbRecomputeTangents() {
		return memory.read<char>(m_addr + 0);
	}
	char GetbComputeWeightedNormals() {
		return memory.read<char>(m_addr + 0);
	}
	char GetbRemoveDegenerates() {
		return memory.read<char>(m_addr + 0);
	}
	char GetbBuildAdjacencyBuffer() {
		return memory.read<char>(m_addr + 0);
	}
	char GetbBuildReversedIndexBuffer() {
		return memory.read<char>(m_addr + 0);
	}
	char GetbUseHighPrecisionTangentBasis() {
		return memory.read<char>(m_addr + 0);
	}
	char GetbUseFullPrecisionUVs() {
		return memory.read<char>(m_addr + 1);
	}
	char GetbGenerateLightmapUVs() {
		return memory.read<char>(m_addr + 1);
	}
	char GetbGenerateDistanceFieldAsIfTwoSided() {
		return memory.read<char>(m_addr + 1);
	}
	char GetbSupportFaceRemap() {
		return memory.read<char>(m_addr + 1);
	}
	int32_t GetMinLightmapResolution() {
		return memory.read<int32_t>(m_addr + 4);
	}
	int32_t GetSrcLightmapIndex() {
		return memory.read<int32_t>(m_addr + 8);
	}
	int32_t GetDstLightmapIndex() {
		return memory.read<int32_t>(m_addr + 12);
	}
	float GetBuildScale() {
		return memory.read<float>(m_addr + 16);
	}
	struct FVector GetBuildScale3D() {
		return memory.read<struct FVector>(m_addr + 20);
	}
	float GetDistanceFieldResolutionScale() {
		return memory.read<float>(m_addr + 32);
	}
	struct UStaticMesh GetDistanceFieldReplacementMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct UStaticMesh(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FEdGraphSchemaAction_NewNode
{
public:
	FEdGraphSchemaAction_NewNode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UEdGraphNode GetNodeTemplate() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 256);
		return struct UEdGraphNode(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FPluginRedirect
{
public:
	FPluginRedirect(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetOldPluginName() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FString GetNewPluginName() {
		return memory.read<struct FString>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FRedirector
{
public:
	FRedirector(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetOldName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FName GetNewName() {
		return memory.read<struct FName>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FStructRedirect
{
public:
	FStructRedirect(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetOldStructName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FName GetNewStructName() {
		return memory.read<struct FName>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetArrowColor
{
public:
	FSetArrowColor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLinearColor GetNewColor() {
		return memory.read<struct FLinearColor>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetFoliageQuality
{
public:
	FGetFoliageQuality(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FClassRedirect
{
public:
	FClassRedirect(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetObjectName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FName GetOldClassName() {
		return memory.read<struct FName>(m_addr + 8);
	}
	struct FName GetNewClassName() {
		return memory.read<struct FName>(m_addr + 16);
	}
	struct FName GetOldSubobjName() {
		return memory.read<struct FName>(m_addr + 24);
	}
	struct FName GetNewSubobjName() {
		return memory.read<struct FName>(m_addr + 32);
	}
	struct FName GetNewClassClass() {
		return memory.read<struct FName>(m_addr + 40);
	}
	struct FName GetNewClassPackage() {
		return memory.read<struct FName>(m_addr + 48);
	}
	bool GetInstanceOnly() {
		return memory.read<bool>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetSubmixOutputVolume
{
public:
	FSetSubmixOutputVolume(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	float GetInOutputVolume() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGameNameRedirect
{
public:
	FGameNameRedirect(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetOldGameName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FName GetNewGameName() {
		return memory.read<struct FName>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FDropNoteInfo
{
public:
	FDropNoteInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FRotator GetRotation() {
		return memory.read<struct FRotator>(m_addr + 12);
	}
	struct FString GetComment() {
		return memory.read<struct FString>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FStatColorMapping
{
public:
	FStatColorMapping(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetStatName() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct TArray<struct FStatColorMapEntry> GetColorMap() {
		return memory.read<struct TArray<struct FStatColorMapEntry>>(m_addr + 16);
	}
	char GetDisableBlend() {
		return memory.read<char>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FServerUpdateMultipleLevelsVisibility
{
public:
	FServerUpdateMultipleLevelsVisibility(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FUpdateLevelVisibilityLevelInfo> GetLevelVisibilities() {
		return memory.read<struct TArray<struct FUpdateLevelVisibilityLevelInfo>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetPreviewCurveOverride
{
public:
	FSetPreviewCurveOverride(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetPoseName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	float GetValue() {
		return memory.read<float>(m_addr + 8);
	}
	bool GetbRemoveIfZero() {
		return memory.read<bool>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FStatColorMapEntry
{
public:
	FStatColorMapEntry(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetIn() {
		return memory.read<float>(m_addr + 0);
	}
	struct FColor GetOut() {
		return memory.read<struct FColor>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FMakeVector2D
{
public:
	FMakeVector2D(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetX() {
		return memory.read<float>(m_addr + 0);
	}
	float GetY() {
		return memory.read<float>(m_addr + 4);
	}
	struct FVector2D GetReturnValue() {
		return memory.read<struct FVector2D>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FWorldContext
{
public:
	FWorldContext(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FURL GetLastURL() {
		return memory.read<struct FURL>(m_addr + 208);
	}
	struct FURL GetLastRemoteURL() {
		return memory.read<struct FURL>(m_addr + 312);
	}
	struct UPendingNetGame GetPendingNetGame() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 416);
		return struct UPendingNetGame(ptr_addr);
	}
	struct TArray<struct FFullyLoadedPackagesInfo> GetPackagesToFullyLoad() {
		return memory.read<struct TArray<struct FFullyLoadedPackagesInfo>>(m_addr + 424);
	}
	struct TArray<struct ULevel> GetLoadedLevelsForPendingMapChange() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 456);
		return struct TArray<struct ULevel>(ptr_addr);
	}
	struct TArray<struct UObjectReferencer> GetObjectReferencers() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 496);
		return struct TArray<struct UObjectReferencer>(ptr_addr);
	}
	struct TArray<struct FLevelStreamingStatus> GetPendingLevelStreamingStatusUpdates() {
		return memory.read<struct TArray<struct FLevelStreamingStatus>>(m_addr + 512);
	}
	struct UGameViewportClient GetGameViewport() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 528);
		return struct UGameViewportClient(ptr_addr);
	}
	struct UGameInstance GetOwningGameInstance() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 536);
		return struct UGameInstance(ptr_addr);
	}
	struct TArray<struct FNamedNetDriver> GetActiveNetDrivers() {
		return memory.read<struct TArray<struct FNamedNetDriver>>(m_addr + 544);
	}

private:
	std::uint64_t m_addr = 0;
};class FNamedNetDriver
{
public:
	FNamedNetDriver(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UNetDriver GetNetDriver() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UNetDriver(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FLevelStreamingStatus
{
public:
	FLevelStreamingStatus(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetPackageName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	char GetbShouldBeLoaded() {
		return memory.read<char>(m_addr + 8);
	}
	char GetbShouldBeVisible() {
		return memory.read<char>(m_addr + 8);
	}
	uint32_t GetLODIndex() {
		return memory.read<uint32_t>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FServerUnmutePlayer
{
public:
	FServerUnmutePlayer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FUniqueNetIdRepl GetplayerId() {
		return memory.read<struct FUniqueNetIdRepl>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FVector_AddBounded
{
public:
	FVector_AddBounded(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetA() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetInAddVect() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	float GetInRadius() {
		return memory.read<float>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FNotEqual_DateTimeDateTime
{
public:
	FNotEqual_DateTimeDateTime(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDateTime GetA() {
		return memory.read<struct FDateTime>(m_addr + 0);
	}
	struct FDateTime GetB() {
		return memory.read<struct FDateTime>(m_addr + 8);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FFullyLoadedPackagesInfo
{
public:
	FFullyLoadedPackagesInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class EFullyLoadPackageType GetFullyLoadType() {
		return memory.read<enum class EFullyLoadPackageType>(m_addr + 0);
	}
	struct FString GetTag() {
		return memory.read<struct FString>(m_addr + 8);
	}
	struct TArray<struct FName> GetPackagesToLoad() {
		return memory.read<struct TArray<struct FName>>(m_addr + 24);
	}
	struct TArray<struct UObject> GetLoadedObjects() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct TArray<struct UObject>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetDriverDefinition
{
public:
	FNetDriverDefinition(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetDefName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FName GetDriverClassName() {
		return memory.read<struct FName>(m_addr + 8);
	}
	struct FName GetDriverClassNameFallback() {
		return memory.read<struct FName>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSubTrackGroup
{
public:
	FSubTrackGroup(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetGroupName() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct TArray<int32_t> GetTrackIndices() {
		return memory.read<struct TArray<int32_t>>(m_addr + 16);
	}
	char GetbIsCollapsed() {
		return memory.read<char>(m_addr + 32);
	}
	char GetbIsSelected() {
		return memory.read<char>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FUnbindClothFromMasterPoseComponent
{
public:
	FUnbindClothFromMasterPoseComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbRestoreSimulationSpace() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetHitResultUnderFingerByChannel
{
public:
	FGetHitResultUnderFingerByChannel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class ETouchIndex GetFingerIndex() {
		return memory.read<enum class ETouchIndex>(m_addr + 0);
	}
	enum class ETraceTypeQuery GetTraceChannel() {
		return memory.read<enum class ETraceTypeQuery>(m_addr + 1);
	}
	bool GetbTraceComplex() {
		return memory.read<bool>(m_addr + 2);
	}
	struct FHitResult GetHitResult() {
		return memory.read<struct FHitResult>(m_addr + 4);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 140);
	}

private:
	std::uint64_t m_addr = 0;
};class FFontRenderInfo
{
public:
	FFontRenderInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	char GetbClipText() {
		return memory.read<char>(m_addr + 0);
	}
	char GetbEnableShadow() {
		return memory.read<char>(m_addr + 0);
	}
	struct FDepthFieldGlowInfo GetGlowInfo() {
		return memory.read<struct FDepthFieldGlowInfo>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FComponentReference
{
public:
	FComponentReference(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetOtherActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}
	struct FName GetComponentProperty() {
		return memory.read<struct FName>(m_addr + 8);
	}
	struct FString GetPathToComponent() {
		return memory.read<struct FString>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FAddYawInput
{
public:
	FAddYawInput(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetVal() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FConstrainComponentPropName
{
public:
	FConstrainComponentPropName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetComponentName() {
		return memory.read<struct FName>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetMieAnisotropy
{
public:
	FSetMieAnisotropy(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FPointDamageEvent
{
public:
	FPointDamageEvent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetDamage() {
		return memory.read<float>(m_addr + 16);
	}
	struct FVector_NetQuantizeNormal GetShotDirection() {
		return memory.read<struct FVector_NetQuantizeNormal>(m_addr + 20);
	}
	struct FHitResult GetHitInfo() {
		return memory.read<struct FHitResult>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FSkeletalMeshBuildSettings
{
public:
	FSkeletalMeshBuildSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	char GetbRecomputeNormals() {
		return memory.read<char>(m_addr + 0);
	}
	char GetbRecomputeTangents() {
		return memory.read<char>(m_addr + 0);
	}
	char GetbUseMikkTSpace() {
		return memory.read<char>(m_addr + 0);
	}
	char GetbComputeWeightedNormals() {
		return memory.read<char>(m_addr + 0);
	}
	char GetbRemoveDegenerates() {
		return memory.read<char>(m_addr + 0);
	}
	char GetbUseHighPrecisionTangentBasis() {
		return memory.read<char>(m_addr + 0);
	}
	char GetbUseFullPrecisionUVs() {
		return memory.read<char>(m_addr + 0);
	}
	char GetbBuildAdjacencyBuffer() {
		return memory.read<char>(m_addr + 0);
	}
	float GetThresholdPosition() {
		return memory.read<float>(m_addr + 4);
	}
	float GetThresholdTangentNormal() {
		return memory.read<float>(m_addr + 8);
	}
	float GetThresholdUV() {
		return memory.read<float>(m_addr + 12);
	}
	float GetMorphThresholdPosition() {
		return memory.read<float>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FCompressedRichCurve
{
public:
	FCompressedRichCurve(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FAnimSlotDesc
{
public:
	FAnimSlotDesc(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetSlotName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	int32_t GetNumChannels() {
		return memory.read<int32_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FAnimSlotInfo
{
public:
	FAnimSlotInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetSlotName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct TArray<float> GetChannelWeights() {
		return memory.read<struct TArray<float>>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FMTDResult
{
public:
	FMTDResult(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetDirection() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	float GetDistance() {
		return memory.read<float>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FLogPerformanceSnapshot
{
public:
	FLogPerformanceSnapshot(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetSnapshotTitle() {
		return memory.read<struct FString>(m_addr + 0);
	}
	bool GetbResetStats() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetTemplate
{
public:
	FSetTemplate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UParticleSystem GetNewTemplate() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UParticleSystem(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FOverlapResult
{
public:
	FOverlapResult(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TWeakObjectPtr<AActor> GetActor() {
		return memory.read<struct TWeakObjectPtr<AActor>>(m_addr + 0);
	}
	struct TWeakObjectPtr<UPrimitiveComponent> GetComponent() {
		return memory.read<struct TWeakObjectPtr<UPrimitiveComponent>>(m_addr + 8);
	}
	char GetbBlockingHit() {
		return memory.read<char>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FFromHours
{
public:
	FFromHours(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetHours() {
		return memory.read<float>(m_addr + 0);
	}
	struct FTimespan GetReturnValue() {
		return memory.read<struct FTimespan>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FPrimitiveMaterialRef
{
public:
	FPrimitiveMaterialRef(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPrimitiveComponent GetPrimitive() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UPrimitiveComponent(ptr_addr);
	}
	struct UDecalComponent GetDecal() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UDecalComponent(ptr_addr);
	}
	int32_t GetElementIndex() {
		return memory.read<int32_t>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FLightmassDebugOptions
{
public:
	FLightmassDebugOptions(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	char GetbDebugMode() {
		return memory.read<char>(m_addr + 0);
	}
	char GetbStatsEnabled() {
		return memory.read<char>(m_addr + 0);
	}
	char GetbGatherBSPSurfacesAcrossComponents() {
		return memory.read<char>(m_addr + 0);
	}
	float GetCoplanarTolerance() {
		return memory.read<float>(m_addr + 4);
	}
	char GetbUseImmediateImport() {
		return memory.read<char>(m_addr + 8);
	}
	char GetbImmediateProcessMappings() {
		return memory.read<char>(m_addr + 8);
	}
	char GetbSortMappings() {
		return memory.read<char>(m_addr + 8);
	}
	char GetbDumpBinaryFiles() {
		return memory.read<char>(m_addr + 8);
	}
	char GetbDebugMaterials() {
		return memory.read<char>(m_addr + 8);
	}
	char GetbPadMappings() {
		return memory.read<char>(m_addr + 8);
	}
	char GetbDebugPaddings() {
		return memory.read<char>(m_addr + 8);
	}
	char GetbOnlyCalcDebugTexelMappings() {
		return memory.read<char>(m_addr + 8);
	}
	char GetbUseRandomColors() {
		return memory.read<char>(m_addr + 9);
	}
	char GetbColorBordersGreen() {
		return memory.read<char>(m_addr + 9);
	}
	char GetbColorByExecutionTime() {
		return memory.read<char>(m_addr + 9);
	}
	float GetExecutionTimeDivisor() {
		return memory.read<float>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FLightmassPrimitiveSettings
{
public:
	FLightmassPrimitiveSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	char GetbUseTwoSidedLighting() {
		return memory.read<char>(m_addr + 0);
	}
	char GetbShadowIndirectOnly() {
		return memory.read<char>(m_addr + 0);
	}
	char GetbUseEmissiveForStaticLighting() {
		return memory.read<char>(m_addr + 0);
	}
	char GetbUseVertexNormalForHemisphereGather() {
		return memory.read<char>(m_addr + 0);
	}
	float GetEmissiveLightFalloffExponent() {
		return memory.read<float>(m_addr + 4);
	}
	float GetEmissiveLightExplicitInfluenceRadius() {
		return memory.read<float>(m_addr + 8);
	}
	float GetEmissiveBoost() {
		return memory.read<float>(m_addr + 12);
	}
	float GetDiffuseBoost() {
		return memory.read<float>(m_addr + 16);
	}
	float GetFullyOccludedSamplesFraction() {
		return memory.read<float>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FLightmassDirectionalLightSettings
{
public:
	FLightmassDirectionalLightSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetLightSourceAngle() {
		return memory.read<float>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetHitResultUnderCursorForObjects
{
public:
	FGetHitResultUnderCursorForObjects(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<enum class EObjectTypeQuery> GetObjectTypes() {
		return memory.read<struct TArray<enum class EObjectTypeQuery>>(m_addr + 0);
	}
	bool GetbTraceComplex() {
		return memory.read<bool>(m_addr + 16);
	}
	struct FHitResult GetHitResult() {
		return memory.read<struct FHitResult>(m_addr + 20);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 156);
	}

private:
	std::uint64_t m_addr = 0;
};class FTTPropertyTrack
{
public:
	FTTPropertyTrack(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetPropertyName() {
		return memory.read<struct FName>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FLightmassPointLightSettings
{
public:
	FLightmassPointLightSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FSetReceiveNotifiesFromLinkedInstances
{
public:
	FSetReceiveNotifiesFromLinkedInstances(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbSet() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FBasedPosition
{
public:
	FBasedPosition(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetBase() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}
	struct FVector Getposition() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	struct FVector GetCachedBaseLocation() {
		return memory.read<struct FVector>(m_addr + 20);
	}
	struct FRotator GetCachedBaseRotation() {
		return memory.read<struct FRotator>(m_addr + 32);
	}
	struct FVector GetCachedTransPosition() {
		return memory.read<struct FVector>(m_addr + 44);
	}

private:
	std::uint64_t m_addr = 0;
};class FFractureEffect
{
public:
	FFractureEffect(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UParticleSystem GetParticleSystem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UParticleSystem(ptr_addr);
	}
	struct USoundBase GetSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct USoundBase(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FCollisionImpactData
{
public:
	FCollisionImpactData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FRigidBodyContactInfo> GetContactInfos() {
		return memory.read<struct TArray<struct FRigidBodyContactInfo>>(m_addr + 0);
	}
	struct FVector GetTotalNormalImpulse() {
		return memory.read<struct FVector>(m_addr + 16);
	}
	struct FVector GetTotalFrictionImpulse() {
		return memory.read<struct FVector>(m_addr + 28);
	}
	bool GetbIsVelocityDeltaUnderThreshold() {
		return memory.read<bool>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};class FRigidBodyContactInfo
{
public:
	FRigidBodyContactInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetContactPosition() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetContactNormal() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	float GetContactPenetration() {
		return memory.read<float>(m_addr + 24);
	}
	struct UPhysicalMaterial GetPhysMaterial[2]() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 32);
		return struct UPhysicalMaterial(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FRigidBodyErrorCorrection
{
public:
	FRigidBodyErrorCorrection(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetPingExtrapolation() {
		return memory.read<float>(m_addr + 0);
	}
	float GetPingLimit() {
		return memory.read<float>(m_addr + 4);
	}
	float GetErrorPerLinearDifference() {
		return memory.read<float>(m_addr + 8);
	}
	float GetErrorPerAngularDifference() {
		return memory.read<float>(m_addr + 12);
	}
	float GetMaxRestoredStateError() {
		return memory.read<float>(m_addr + 16);
	}
	float GetMaxLinearHardSnapDistance() {
		return memory.read<float>(m_addr + 20);
	}
	float GetPositionLerp() {
		return memory.read<float>(m_addr + 24);
	}
	float GetAngleLerp() {
		return memory.read<float>(m_addr + 28);
	}
	float GetLinearVelocityCoefficient() {
		return memory.read<float>(m_addr + 32);
	}
	float GetAngularVelocityCoefficient() {
		return memory.read<float>(m_addr + 36);
	}
	float GetErrorAccumulationSeconds() {
		return memory.read<float>(m_addr + 40);
	}
	float GetErrorAccumulationDistanceSq() {
		return memory.read<float>(m_addr + 44);
	}
	float GetErrorAccumulationSimilarity() {
		return memory.read<float>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetworkEmulationProfileDescription
{
public:
	FNetworkEmulationProfileDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetProfileName() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FString GetToolTip() {
		return memory.read<struct FString>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FRunHardwareBenchmark
{
public:
	FRunHardwareBenchmark(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetWorkScale() {
		return memory.read<int32_t>(m_addr + 0);
	}
	float GetCPUMultiplier() {
		return memory.read<float>(m_addr + 4);
	}
	float GetGPUMultiplier() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FRigidBodyState
{
public:
	FRigidBodyState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector_NetQuantize100 Getposition() {
		return memory.read<struct FVector_NetQuantize100>(m_addr + 0);
	}
	struct FQuat GetQuaternion() {
		return memory.read<struct FQuat>(m_addr + 16);
	}
	struct FVector_NetQuantize100 GetLinVel() {
		return memory.read<struct FVector_NetQuantize100>(m_addr + 32);
	}
	struct FVector_NetQuantize100 GetAngVel() {
		return memory.read<struct FVector_NetQuantize100>(m_addr + 44);
	}
	char GetFlags() {
		return memory.read<char>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetLinkedAnimGraphInstanceByTag
{
public:
	FGetLinkedAnimGraphInstanceByTag(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetInTag() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct UAnimInstance GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UAnimInstance(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetSocketByIndex
{
public:
	FGetSocketByIndex(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct USkeletalMeshSocket GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct USkeletalMeshSocket(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FRuntimeVirtualTextureParameterValue
{
public:
	FRuntimeVirtualTextureParameterValue(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMaterialParameterInfo GetParameterInfo() {
		return memory.read<struct FMaterialParameterInfo>(m_addr + 0);
	}
	struct URuntimeVirtualTexture GetParameterValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct URuntimeVirtualTexture(ptr_addr);
	}
	struct FGuid GetExpressionGUID() {
		return memory.read<struct FGuid>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FForceFeedbackAttenuationSettings
{
public:
	FForceFeedbackAttenuationSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FActiveForceFeedbackEffect
{
public:
	FActiveForceFeedbackEffect(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UForceFeedbackEffect GetForceFeedbackEffect() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UForceFeedbackEffect(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FDeleteGameInSlot
{
public:
	FDeleteGameInSlot(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetSlotName() {
		return memory.read<struct FString>(m_addr + 0);
	}
	int32_t GetUserIndex() {
		return memory.read<int32_t>(m_addr + 16);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FForceFeedbackParameters
{
public:
	FForceFeedbackParameters(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetTag() {
		return memory.read<struct FName>(m_addr + 0);
	}
	bool GetbLooping() {
		return memory.read<bool>(m_addr + 8);
	}
	bool GetbIgnoreTimeDilation() {
		return memory.read<bool>(m_addr + 9);
	}
	bool GetbPlayWhilePaused() {
		return memory.read<bool>(m_addr + 10);
	}

private:
	std::uint64_t m_addr = 0;
};class FForceFeedbackChannelDetails
{
public:
	FForceFeedbackChannelDetails(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	char GetbAffectsLeftLarge() {
		return memory.read<char>(m_addr + 0);
	}
	char GetbAffectsLeftSmall() {
		return memory.read<char>(m_addr + 0);
	}
	char GetbAffectsRightLarge() {
		return memory.read<char>(m_addr + 0);
	}
	char GetbAffectsRightSmall() {
		return memory.read<char>(m_addr + 0);
	}
	struct FRuntimeFloatCurve GetCurve() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGrabComponentAtLocation
{
public:
	FGrabComponentAtLocation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPrimitiveComponent GetComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UPrimitiveComponent(ptr_addr);
	}
	struct FName GetInBoneName() {
		return memory.read<struct FName>(m_addr + 8);
	}
	struct FVector GetGrabLocation() {
		return memory.read<struct FVector>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FPredictProjectilePathParams
{
public:
	FPredictProjectilePathParams(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetStartLocation() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetLaunchVelocity() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	bool GetbTraceWithCollision() {
		return memory.read<bool>(m_addr + 24);
	}
	float GetProjectileRadius() {
		return memory.read<float>(m_addr + 28);
	}
	float GetMaxSimTime() {
		return memory.read<float>(m_addr + 32);
	}
	bool GetbTraceWithChannel() {
		return memory.read<bool>(m_addr + 36);
	}
	enum class ECollisionChannel GetTraceChannel() {
		return memory.read<enum class ECollisionChannel>(m_addr + 37);
	}
	struct TArray<enum class EObjectTypeQuery> GetObjectTypes() {
		return memory.read<struct TArray<enum class EObjectTypeQuery>>(m_addr + 40);
	}
	struct TArray<struct AActor> GetActorsToIgnore() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct TArray<struct AActor>(ptr_addr);
	}
	float GetSimFrequency() {
		return memory.read<float>(m_addr + 72);
	}
	float GetOverrideGravityZ() {
		return memory.read<float>(m_addr + 76);
	}
	enum class EDrawDebugTrace GetDrawDebugType() {
		return memory.read<enum class EDrawDebugTrace>(m_addr + 80);
	}
	float GetDrawDebugTime() {
		return memory.read<float>(m_addr + 84);
	}
	bool GetbTraceComplex() {
		return memory.read<bool>(m_addr + 88);
	}

private:
	std::uint64_t m_addr = 0;
};class FActiveHapticFeedbackEffect
{
public:
	FActiveHapticFeedbackEffect(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UHapticFeedbackEffect_Base GetHapticEffect() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UHapticFeedbackEffect_Base(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FVector_IsZero
{
public:
	FVector_IsZero(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetA() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FClusterNode
{
public:
	FClusterNode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetBoundMin() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	int32_t GetFirstChild() {
		return memory.read<int32_t>(m_addr + 12);
	}
	struct FVector GetBoundMax() {
		return memory.read<struct FVector>(m_addr + 16);
	}
	int32_t GetLastChild() {
		return memory.read<int32_t>(m_addr + 28);
	}
	int32_t GetFirstInstance() {
		return memory.read<int32_t>(m_addr + 32);
	}
	int32_t GetLastInstance() {
		return memory.read<int32_t>(m_addr + 36);
	}
	struct FVector GetMinInstanceScale() {
		return memory.read<struct FVector>(m_addr + 40);
	}
	struct FVector GetMaxInstanceScale() {
		return memory.read<struct FVector>(m_addr + 52);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetProjectionMode
{
public:
	FSetProjectionMode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class ECameraProjectionMode GetInProjectionMode() {
		return memory.read<enum class ECameraProjectionMode>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FComponentOverrideRecord
{
public:
	FComponentOverrideRecord(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UObject GetComponentClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return UObject(ptr_addr);
	}
	struct UActorComponent GetComponentTemplate() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UActorComponent(ptr_addr);
	}
	struct FComponentKey GetComponentKey() {
		return memory.read<struct FComponentKey>(m_addr + 16);
	}
	struct FBlueprintCookedComponentInstancingData GetCookedComponentInstancingData() {
		return memory.read<struct FBlueprintCookedComponentInstancingData>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};class FIntPoint_One
{
public:
	FIntPoint_One(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FIntPoint GetReturnValue() {
		return memory.read<struct FIntPoint>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FClientCapBandwidth
{
public:
	FClientCapBandwidth(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetCap() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FComponentKey
{
public:
	FComponentKey(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UObject GetOwnerClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return UObject(ptr_addr);
	}
	struct FName GetSCSVariableName() {
		return memory.read<struct FName>(m_addr + 8);
	}
	struct FGuid GetAssociatedGuid() {
		return memory.read<struct FGuid>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_GetTextureParameterValueByInfo
{
public:
	FK2_GetTextureParameterValueByInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMaterialParameterInfo GetParameterInfo() {
		return memory.read<struct FMaterialParameterInfo>(m_addr + 0);
	}
	struct UTexture GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UTexture(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FBlueprintInputAxisDelegateBinding
{
public:
	FBlueprintInputAxisDelegateBinding(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetInputAxisName() {
		return memory.read<struct FName>(m_addr + 4);
	}
	struct FName GetFunctionNameToBind() {
		return memory.read<struct FName>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FCachedKeyToActionInfo
{
public:
	FCachedKeyToActionInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPlayerInput GetPlayerInput() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UPlayerInput(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSelectString
{
public:
	FSelectString(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetA() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FString GetB() {
		return memory.read<struct FString>(m_addr + 16);
	}
	bool GetbPickA() {
		return memory.read<bool>(m_addr + 32);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};class FLinearColor_Set
{
public:
	FLinearColor_Set(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLinearColor GetInOutColor() {
		return memory.read<struct FLinearColor>(m_addr + 0);
	}
	struct FLinearColor GetInColor() {
		return memory.read<struct FLinearColor>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FIntPoint_Up
{
public:
	FIntPoint_Up(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FIntPoint GetReturnValue() {
		return memory.read<struct FIntPoint>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FInstancedStaticMeshComponentInstanceData
{
public:
	FInstancedStaticMeshComponentInstanceData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UStaticMesh GetStaticMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 184);
		return struct UStaticMesh(ptr_addr);
	}
	struct FInstancedStaticMeshLightMapInstanceData GetCachedStaticLighting() {
		return memory.read<struct FInstancedStaticMeshLightMapInstanceData>(m_addr + 192);
	}
	struct TArray<struct FInstancedStaticMeshInstanceData> GetPerInstanceSMData() {
		return memory.read<struct TArray<struct FInstancedStaticMeshInstanceData>>(m_addr + 256);
	}
	struct TArray<float> GetPerInstanceSMCustomData() {
		return memory.read<struct TArray<float>>(m_addr + 272);
	}
	int32_t GetInstancingRandomSeed() {
		return memory.read<int32_t>(m_addr + 320);
	}

private:
	std::uint64_t m_addr = 0;
};class FInstancedStaticMeshInstanceData
{
public:
	FInstancedStaticMeshInstanceData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMatrix GetTransform() {
		return memory.read<struct FMatrix>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FInstancedStaticMeshMappingInfo
{
public:
	FInstancedStaticMeshMappingInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FSetAffectReflection
{
public:
	FSetAffectReflection(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbNewValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FReplace
{
public:
	FReplace(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetSourceString() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FString GetFrom() {
		return memory.read<struct FString>(m_addr + 16);
	}
	struct FString GetTo() {
		return memory.read<struct FString>(m_addr + 32);
	}
	enum class ESearchCase GetSearchCase() {
		return memory.read<enum class ESearchCase>(m_addr + 48);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};class FCurveEdEntry
{
public:
	FCurveEdEntry(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetCurveObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FColor GetCurveColor() {
		return memory.read<struct FColor>(m_addr + 8);
	}
	struct FString GetCurveName() {
		return memory.read<struct FString>(m_addr + 16);
	}
	int32_t GetbHideCurve() {
		return memory.read<int32_t>(m_addr + 32);
	}
	int32_t GetbColorCurve() {
		return memory.read<int32_t>(m_addr + 36);
	}
	int32_t GetbFloatingPointColorCurve() {
		return memory.read<int32_t>(m_addr + 40);
	}
	int32_t GetbClamp() {
		return memory.read<int32_t>(m_addr + 44);
	}
	float GetClampLow() {
		return memory.read<float>(m_addr + 48);
	}
	float GetClampHigh() {
		return memory.read<float>(m_addr + 52);
	}

private:
	std::uint64_t m_addr = 0;
};class FLinearColor_QuantizeRound
{
public:
	FLinearColor_QuantizeRound(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLinearColor GetInColor() {
		return memory.read<struct FLinearColor>(m_addr + 0);
	}
	struct FColor GetReturnValue() {
		return memory.read<struct FColor>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FReceiveInstigatedAnyDamage
{
public:
	FReceiveInstigatedAnyDamage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetDamage() {
		return memory.read<float>(m_addr + 0);
	}
	struct UDamageType GetDamageType() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UDamageType(ptr_addr);
	}
	struct AActor GetDamagedActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct AActor(ptr_addr);
	}
	struct AActor GetDamageCauser() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 24);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetAngularSwing1Limit
{
public:
	FSetAngularSwing1Limit(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class EAngularConstraintMotion GetMotionType() {
		return memory.read<enum class EAngularConstraintMotion>(m_addr + 0);
	}
	float GetSwing1LimitAngle() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FInterpEdSelKey
{
public:
	FInterpEdSelKey(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UInterpGroup GetGroup() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UInterpGroup(ptr_addr);
	}
	struct UInterpTrack GetTrack() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UInterpTrack(ptr_addr);
	}
	int32_t GetKeyIndex() {
		return memory.read<int32_t>(m_addr + 16);
	}
	float GetUnsnappedPosition() {
		return memory.read<float>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FBoneMirrorExport
{
public:
	FBoneMirrorExport(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FName GetSourceBoneName() {
		return memory.read<struct FName>(m_addr + 8);
	}
	enum class EAxis GetBoneFlipAxis() {
		return memory.read<enum class EAxis>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FCameraPreviewInfo
{
public:
	FCameraPreviewInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	APawn GetPawnClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return APawn(ptr_addr);
	}
	struct UAnimSequence GetAnimSeq() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UAnimSequence(ptr_addr);
	}
	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 16);
	}
	struct FRotator GetRotation() {
		return memory.read<struct FRotator>(m_addr + 28);
	}
	struct APawn GetPawnInst() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct APawn(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FAnimControlTrackKey
{
public:
	FAnimControlTrackKey(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetStartTime() {
		return memory.read<float>(m_addr + 0);
	}
	struct UAnimSequence GetAnimSeq() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UAnimSequence(ptr_addr);
	}
	float GetAnimStartOffset() {
		return memory.read<float>(m_addr + 16);
	}
	float GetAnimEndOffset() {
		return memory.read<float>(m_addr + 20);
	}
	float GetAnimPlayRate() {
		return memory.read<float>(m_addr + 24);
	}
	char GetbLooping() {
		return memory.read<char>(m_addr + 28);
	}
	char GetbReverse() {
		return memory.read<char>(m_addr + 28);
	}

private:
	std::uint64_t m_addr = 0;
};class FNotEqual_ByteByte
{
public:
	FNotEqual_ByteByte(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	char GetA() {
		return memory.read<char>(m_addr + 0);
	}
	char GetB() {
		return memory.read<char>(m_addr + 1);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 2);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetDuration
{
public:
	FGetDuration(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTimespan GetA() {
		return memory.read<struct FTimespan>(m_addr + 0);
	}
	struct FTimespan GetReturnValue() {
		return memory.read<struct FTimespan>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FRemoveInstances
{
public:
	FRemoveInstances(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<int32_t> GetInstancesToRemove() {
		return memory.read<struct TArray<int32_t>>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FBoolTrackKey
{
public:
	FBoolTrackKey(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetTime() {
		return memory.read<float>(m_addr + 0);
	}
	char GetValue() {
		return memory.read<char>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FEventTrackKey
{
public:
	FEventTrackKey(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetTime() {
		return memory.read<float>(m_addr + 0);
	}
	struct FName GetEventName() {
		return memory.read<struct FName>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FInterpLookupPoint
{
public:
	FInterpLookupPoint(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetGroupName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	float GetTime() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FFloatSpringState
{
public:
	FFloatSpringState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FTTTrackId
{
public:
	FTTTrackId(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetTrackType() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetTrackIndex() {
		return memory.read<int32_t>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetVertexOffsetUsage
{
public:
	FGetVertexOffsetUsage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetLODIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FLatentActionManager
{
public:
	FLatentActionManager(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FReplicatedStaticActorDestructionInfo
{
public:
	FReplicatedStaticActorDestructionInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UObject GetObjClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return UObject(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FQuartzClockSettings
{
public:
	FQuartzClockSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FQuartzTimeSignature GetTimeSignature() {
		return memory.read<struct FQuartzTimeSignature>(m_addr + 0);
	}
	bool GetbIgnoreLevelChange() {
		return memory.read<bool>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FTwitterRequest
{
public:
	FTwitterRequest(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetURL() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct TArray<struct FString> GetParamKeysAndValues() {
		return memory.read<struct TArray<struct FString>>(m_addr + 16);
	}
	enum class ETwitterRequestMethod GetRequestMethod() {
		return memory.read<enum class ETwitterRequestMethod>(m_addr + 32);
	}
	int32_t GetAccountIndex() {
		return memory.read<int32_t>(m_addr + 36);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};class FMaterialProxySettings
{
public:
	FMaterialProxySettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FIntPoint GetTextureSize() {
		return memory.read<struct FIntPoint>(m_addr + 0);
	}
	float GetGutterSpace() {
		return memory.read<float>(m_addr + 8);
	}
	char GetbRoughnessMapDiffuseAlpha() {
		return memory.read<char>(m_addr + 12);
	}
	float GetMetallicConstant() {
		return memory.read<float>(m_addr + 16);
	}
	float GetRoughnessConstant() {
		return memory.read<float>(m_addr + 20);
	}
	float GetAnisotropyConstant() {
		return memory.read<float>(m_addr + 24);
	}
	float GetSpecularConstant() {
		return memory.read<float>(m_addr + 28);
	}
	float GetOpacityConstant() {
		return memory.read<float>(m_addr + 32);
	}
	float GetOpacityMaskConstant() {
		return memory.read<float>(m_addr + 36);
	}
	float GetAmbientOcclusionConstant() {
		return memory.read<float>(m_addr + 40);
	}
	enum class ETextureSizingType GetTextureSizingType() {
		return memory.read<enum class ETextureSizingType>(m_addr + 44);
	}
	enum class EMaterialMergeType GetMaterialMergeType() {
		return memory.read<enum class EMaterialMergeType>(m_addr + 45);
	}
	enum class EBlendMode GetBlendMode() {
		return memory.read<enum class EBlendMode>(m_addr + 46);
	}
	char GetbAllowTwoSidedMaterial() {
		return memory.read<char>(m_addr + 47);
	}
	char GetbNormalMap() {
		return memory.read<char>(m_addr + 47);
	}
	char GetbTangentMap() {
		return memory.read<char>(m_addr + 47);
	}
	char GetbMetallicMap() {
		return memory.read<char>(m_addr + 47);
	}
	char GetbRoughnessMap() {
		return memory.read<char>(m_addr + 47);
	}
	char GetbAnisotropyMap() {
		return memory.read<char>(m_addr + 47);
	}
	char GetbSpecularMap() {
		return memory.read<char>(m_addr + 47);
	}
	char GetbEmissiveMap() {
		return memory.read<char>(m_addr + 47);
	}
	char GetbOpacityMap() {
		return memory.read<char>(m_addr + 48);
	}
	char GetbOpacityMaskMap() {
		return memory.read<char>(m_addr + 48);
	}
	char GetbAmbientOcclusionMap() {
		return memory.read<char>(m_addr + 48);
	}
	struct FIntPoint GetDiffuseTextureSize() {
		return memory.read<struct FIntPoint>(m_addr + 52);
	}
	struct FIntPoint GetNormalTextureSize() {
		return memory.read<struct FIntPoint>(m_addr + 60);
	}
	struct FIntPoint GetTangentTextureSize() {
		return memory.read<struct FIntPoint>(m_addr + 68);
	}
	struct FIntPoint GetMetallicTextureSize() {
		return memory.read<struct FIntPoint>(m_addr + 76);
	}
	struct FIntPoint GetRoughnessTextureSize() {
		return memory.read<struct FIntPoint>(m_addr + 84);
	}
	struct FIntPoint GetAnisotropyTextureSize() {
		return memory.read<struct FIntPoint>(m_addr + 92);
	}
	struct FIntPoint GetSpecularTextureSize() {
		return memory.read<struct FIntPoint>(m_addr + 100);
	}
	struct FIntPoint GetEmissiveTextureSize() {
		return memory.read<struct FIntPoint>(m_addr + 108);
	}
	struct FIntPoint GetOpacityTextureSize() {
		return memory.read<struct FIntPoint>(m_addr + 116);
	}
	struct FIntPoint GetOpacityMaskTextureSize() {
		return memory.read<struct FIntPoint>(m_addr + 124);
	}
	struct FIntPoint GetAmbientOcclusionTextureSize() {
		return memory.read<struct FIntPoint>(m_addr + 132);
	}
	char GetbLinearBake() {
		return memory.read<char>(m_addr + 140);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsUseSkinSnapshot
{
public:
	FIsUseSkinSnapshot(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FClampInt64
{
public:
	FClampInt64(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int64_t GetValue() {
		return memory.read<int64_t>(m_addr + 0);
	}
	int64_t GetMin() {
		return memory.read<int64_t>(m_addr + 8);
	}
	int64_t GetMax() {
		return memory.read<int64_t>(m_addr + 16);
	}
	int64_t GetReturnValue() {
		return memory.read<int64_t>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FStreamableTextureInstance
{
public:
	FStreamableTextureInstance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FAddMovementInput
{
public:
	FAddMovementInput(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetWorldDirection() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	float GetScaleValue() {
		return memory.read<float>(m_addr + 12);
	}
	bool GetbForce() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetEquirectProps
{
public:
	FSetEquirectProps(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FEquirectProps GetInScaleBiases() {
		return memory.read<struct FEquirectProps>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetWaveParameter
{
public:
	FSetWaveParameter(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetInName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct USoundWave GetInWave() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct USoundWave(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FDynamicTextureInstance
{
public:
	FDynamicTextureInstance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTexture2D GetTexture() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct UTexture2D(ptr_addr);
	}
	bool GetbAttached() {
		return memory.read<bool>(m_addr + 48);
	}
	float GetOriginalRadius() {
		return memory.read<float>(m_addr + 52);
	}

private:
	std::uint64_t m_addr = 0;
};class FHasAnyRootMotion
{
public:
	FHasAnyRootMotion(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetNumAccounts
{
public:
	FGetNumAccounts(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FPrecomputedLightInstanceData
{
public:
	FPrecomputedLightInstanceData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTransform GetTransform() {
		return memory.read<struct FTransform>(m_addr + 192);
	}
	struct FGuid GetLightGuid() {
		return memory.read<struct FGuid>(m_addr + 240);
	}
	int32_t GetPreviewShadowMapChannel() {
		return memory.read<int32_t>(m_addr + 256);
	}

private:
	std::uint64_t m_addr = 0;
};class FHLODInstancingKey
{
public:
	FHLODInstancingKey(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UStaticMesh GetStaticMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UStaticMesh(ptr_addr);
	}
	struct UMaterialInterface GetMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UMaterialInterface(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FComponentSync
{
public:
	FComponentSync(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	enum class ESyncOption GetSyncOption() {
		return memory.read<enum class ESyncOption>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FMakeValidFileName
{
public:
	FMakeValidFileName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetinString() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FString GetInReplacementChar() {
		return memory.read<struct FString>(m_addr + 16);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FLODMappingData
{
public:
	FLODMappingData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<int32_t> GetMapping() {
		return memory.read<struct TArray<int32_t>>(m_addr + 0);
	}
	struct TArray<int32_t> GetInverseMapping() {
		return memory.read<struct TArray<int32_t>>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetShadowReflectionSampleCountScale
{
public:
	FSetShadowReflectionSampleCountScale(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FParameterGroupData
{
public:
	FParameterGroupData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetGroupName() {
		return memory.read<struct FString>(m_addr + 0);
	}
	int32_t GetGroupSortPriority() {
		return memory.read<int32_t>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FMaterialCachedExpressionData
{
public:
	FMaterialCachedExpressionData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMaterialCachedParameters GetParameters() {
		return memory.read<struct FMaterialCachedParameters>(m_addr + 0);
	}
	struct TArray<struct UObject> GetReferencedTextures() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 336);
		return struct TArray<struct UObject>(ptr_addr);
	}
	struct TArray<struct FMaterialFunctionInfo> GetFunctionInfos() {
		return memory.read<struct TArray<struct FMaterialFunctionInfo>>(m_addr + 352);
	}
	struct TArray<struct FMaterialParameterCollectionInfo> GetParameterCollectionInfos() {
		return memory.read<struct TArray<struct FMaterialParameterCollectionInfo>>(m_addr + 368);
	}
	struct TArray<struct UMaterialFunctionInterface> GetDefaultLayers() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 384);
		return struct TArray<struct UMaterialFunctionInterface>(ptr_addr);
	}
	struct TArray<struct UMaterialFunctionInterface> GetDefaultLayerBlends() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 400);
		return struct TArray<struct UMaterialFunctionInterface>(ptr_addr);
	}
	struct TArray<struct ULandscapeGrassType> GetGrassTypes() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 416);
		return struct TArray<struct ULandscapeGrassType>(ptr_addr);
	}
	struct TArray<struct FName> GetDynamicParameterNames() {
		return memory.read<struct TArray<struct FName>>(m_addr + 432);
	}
	struct TArray<bool> GetQualityLevelsUsed() {
		return memory.read<struct TArray<bool>>(m_addr + 448);
	}
	char GetbHasRuntimeVirtualTextureOutput() {
		return memory.read<char>(m_addr + 464);
	}
	char GetbHasSceneColor() {
		return memory.read<char>(m_addr + 464);
	}

private:
	std::uint64_t m_addr = 0;
};class FMaterialFunctionInfo
{
public:
	FMaterialFunctionInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FGuid GetStateId() {
		return memory.read<struct FGuid>(m_addr + 0);
	}
	struct UMaterialFunctionInterface GetFunction() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UMaterialFunctionInterface(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FMaterialCachedParameters
{
public:
	FMaterialCachedParameters(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMaterialCachedParameterEntry GetRuntimeEntries[5]() {
		return memory.read<struct FMaterialCachedParameterEntry>(m_addr + 0);
	}
	struct TArray<float> GetScalarValues() {
		return memory.read<struct TArray<float>>(m_addr + 240);
	}
	struct TArray<struct FLinearColor> GetVectorValues() {
		return memory.read<struct TArray<struct FLinearColor>>(m_addr + 256);
	}
	struct TArray<struct UTexture> GetTextureValues() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 272);
		return struct TArray<struct UTexture>(ptr_addr);
	}
	struct TArray<struct UFont> GetFontValues() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 288);
		return struct TArray<struct UFont>(ptr_addr);
	}
	struct TArray<int32_t> GetFontPageValues() {
		return memory.read<struct TArray<int32_t>>(m_addr + 304);
	}
	struct TArray<struct URuntimeVirtualTexture> GetRuntimeVirtualTextureValues() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 320);
		return struct TArray<struct URuntimeVirtualTexture>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FMaterialCachedParameterEntry
{
public:
	FMaterialCachedParameterEntry(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<uint64_t> GetNameHashes() {
		return memory.read<struct TArray<uint64_t>>(m_addr + 0);
	}
	struct TArray<struct FMaterialParameterInfo> GetParameterInfos() {
		return memory.read<struct TArray<struct FMaterialParameterInfo>>(m_addr + 16);
	}
	struct TArray<struct FGuid> GetExpressionGuids() {
		return memory.read<struct TArray<struct FGuid>>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FRunAssetExportTask
{
public:
	FRunAssetExportTask(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAssetExportTask GetTask() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAssetExportTask(ptr_addr);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FScalarParameterValue
{
public:
	FScalarParameterValue(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMaterialParameterInfo GetParameterInfo() {
		return memory.read<struct FMaterialParameterInfo>(m_addr + 0);
	}
	float GetParameterValue() {
		return memory.read<float>(m_addr + 16);
	}
	struct FGuid GetExpressionGUID() {
		return memory.read<struct FGuid>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsControllerKeyDown
{
public:
	FIsControllerKeyDown(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKey GetKey() {
		return memory.read<struct FKey>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FRigTransformConstraint
{
public:
	FRigTransformConstraint(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class EConstraintTransform GetTranformType() {
		return memory.read<enum class EConstraintTransform>(m_addr + 0);
	}
	struct FName GetParentSpace() {
		return memory.read<struct FName>(m_addr + 4);
	}
	float Getweight() {
		return memory.read<float>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FMatrix_GetScaledAxis
{
public:
	FMatrix_GetScaledAxis(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMatrix GetM() {
		return memory.read<struct FMatrix>(m_addr + 0);
	}
	enum class EAxis GetAxis() {
		return memory.read<enum class EAxis>(m_addr + 64);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 68);
	}

private:
	std::uint64_t m_addr = 0;
};class FScalarParameterAtlasInstanceData
{
public:
	FScalarParameterAtlasInstanceData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbIsUsedAsAtlasPosition() {
		return memory.read<bool>(m_addr + 0);
	}
	struct TSoftObjectPtr<UCurveLinearColor> GetCurve() {
		return memory.read<struct TSoftObjectPtr<UCurveLinearColor>>(m_addr + 8);
	}
	struct TSoftObjectPtr<UCurveLinearColorAtlas> GetAtlas() {
		return memory.read<struct TSoftObjectPtr<UCurveLinearColorAtlas>>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetOwningComponent
{
public:
	FGetOwningComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USkeletalMeshComponent GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct USkeletalMeshComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsInputKeyDown
{
public:
	FIsInputKeyDown(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKey GetKey() {
		return memory.read<struct FKey>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FVectorParameterValue
{
public:
	FVectorParameterValue(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMaterialParameterInfo GetParameterInfo() {
		return memory.read<struct FMaterialParameterInfo>(m_addr + 0);
	}
	struct FLinearColor GetParameterValue() {
		return memory.read<struct FLinearColor>(m_addr + 16);
	}
	struct FGuid GetExpressionGUID() {
		return memory.read<struct FGuid>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FCustomInput
{
public:
	FCustomInput(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetInputName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FExpressionInput GetInput() {
		return memory.read<struct FExpressionInput>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FLogText
{
public:
	FLogText(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FString GetText() {
		return memory.read<struct FString>(m_addr + 8);
	}
	struct FName GetLogCategory() {
		return memory.read<struct FName>(m_addr + 24);
	}
	bool GetbAddToMessageLog() {
		return memory.read<bool>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FFunctionExpressionOutput
{
public:
	FFunctionExpressionOutput(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UMaterialExpressionFunctionOutput GetExpressionOutput() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UMaterialExpressionFunctionOutput(ptr_addr);
	}
	struct FGuid GetExpressionOutputId() {
		return memory.read<struct FGuid>(m_addr + 8);
	}
	struct FExpressionOutput GetOutput() {
		return memory.read<struct FExpressionOutput>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FSplinePoint
{
public:
	FSplinePoint(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetInputKey() {
		return memory.read<float>(m_addr + 0);
	}
	struct FVector Getposition() {
		return memory.read<struct FVector>(m_addr + 4);
	}
	struct FVector GetArriveTangent() {
		return memory.read<struct FVector>(m_addr + 16);
	}
	struct FVector GetLeaveTangent() {
		return memory.read<struct FVector>(m_addr + 28);
	}
	struct FRotator GetRotation() {
		return memory.read<struct FRotator>(m_addr + 40);
	}
	struct FVector GetScale() {
		return memory.read<struct FVector>(m_addr + 52);
	}
	enum class ESplinePointType GetType() {
		return memory.read<enum class ESplinePointType>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};class FEqualExactly_Vector4Vector4
{
public:
	FEqualExactly_Vector4Vector4(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector4 GetA() {
		return memory.read<struct FVector4>(m_addr + 0);
	}
	struct FVector4 GetB() {
		return memory.read<struct FVector4>(m_addr + 16);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FFontParameterValue
{
public:
	FFontParameterValue(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMaterialParameterInfo GetParameterInfo() {
		return memory.read<struct FMaterialParameterInfo>(m_addr + 0);
	}
	struct UFont GetFontValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UFont(ptr_addr);
	}
	int32_t GetFontPage() {
		return memory.read<int32_t>(m_addr + 24);
	}
	struct FGuid GetExpressionGUID() {
		return memory.read<struct FGuid>(m_addr + 28);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetSplashScreen
{
public:
	FSetSplashScreen(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTexture GetTexture() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UTexture(ptr_addr);
	}
	struct FVector2D GetScale() {
		return memory.read<struct FVector2D>(m_addr + 8);
	}
	struct FVector GetOffset() {
		return memory.read<struct FVector>(m_addr + 16);
	}
	bool GetbShowLoadingMovie() {
		return memory.read<bool>(m_addr + 28);
	}
	bool GetbShowOnSet() {
		return memory.read<bool>(m_addr + 29);
	}

private:
	std::uint64_t m_addr = 0;
};class FTextureParameterValue
{
public:
	FTextureParameterValue(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMaterialParameterInfo GetParameterInfo() {
		return memory.read<struct FMaterialParameterInfo>(m_addr + 0);
	}
	struct UTexture GetParameterValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UTexture(ptr_addr);
	}
	struct FGuid GetExpressionGUID() {
		return memory.read<struct FGuid>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FMaterialInstanceBasePropertyOverrides
{
public:
	FMaterialInstanceBasePropertyOverrides(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	char GetbOverride_OpacityMaskClipValue() {
		return memory.read<char>(m_addr + 0);
	}
	char GetbOverride_BlendMode() {
		return memory.read<char>(m_addr + 0);
	}
	char GetbOverride_ShadingModel() {
		return memory.read<char>(m_addr + 0);
	}
	char GetbOverride_DitheredLODTransition() {
		return memory.read<char>(m_addr + 0);
	}
	char GetbOverride_CastDynamicShadowAsMasked() {
		return memory.read<char>(m_addr + 0);
	}
	char GetbOverride_UseSmallAlphaMask() {
		return memory.read<char>(m_addr + 0);
	}
	char GetbOverride_TwoSided() {
		return memory.read<char>(m_addr + 0);
	}
	char GetTwoSided() {
		return memory.read<char>(m_addr + 0);
	}
	char GetbOverride_CastShadowCullMode() {
		return memory.read<char>(m_addr + 1);
	}
	enum class ECastShadowCullMode GetCastShadowCullMode() {
		return memory.read<enum class ECastShadowCullMode>(m_addr + 2);
	}
	char GetbOverride_FullyRoughOnMobile() {
		return memory.read<char>(m_addr + 3);
	}
	char GetFullyRoughOnMobile() {
		return memory.read<char>(m_addr + 3);
	}
	char GetbOverride_ForceLQReflectionOnMobile() {
		return memory.read<char>(m_addr + 3);
	}
	char GetForceLQReflectionOnMobile() {
		return memory.read<char>(m_addr + 3);
	}
	char GetbOverride_ForceNoPlanarReflectionOnMobile() {
		return memory.read<char>(m_addr + 3);
	}
	char GetForceNoPlanarReflectionOnMobile() {
		return memory.read<char>(m_addr + 3);
	}
	char GetbOverride_UseHQForwardReflections() {
		return memory.read<char>(m_addr + 3);
	}
	char GetUseHQForwardReflections() {
		return memory.read<char>(m_addr + 3);
	}
	char GetbOverride_UsePlanarForwardReflections() {
		return memory.read<char>(m_addr + 4);
	}
	char GetUsePlanarForwardReflections() {
		return memory.read<char>(m_addr + 4);
	}
	char GetbOverride_ForwardScreenSpaceReflection() {
		return memory.read<char>(m_addr + 4);
	}
	char GetForwardScreenSpaceReflection() {
		return memory.read<char>(m_addr + 4);
	}
	char GetDitheredLODTransition() {
		return memory.read<char>(m_addr + 4);
	}
	char GetbCastDynamicShadowAsMasked() {
		return memory.read<char>(m_addr + 4);
	}
	enum class EBlendMode GetBlendMode() {
		return memory.read<enum class EBlendMode>(m_addr + 5);
	}
	enum class EMaterialShadingModel GetShadingModel() {
		return memory.read<enum class EMaterialShadingModel>(m_addr + 6);
	}
	float GetOpacityMaskClipValue() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FLightmassMaterialInterfaceSettings
{
public:
	FLightmassMaterialInterfaceSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetEmissiveBoost() {
		return memory.read<float>(m_addr + 0);
	}
	float GetDiffuseBoost() {
		return memory.read<float>(m_addr + 4);
	}
	float GetExportResolutionScale() {
		return memory.read<float>(m_addr + 8);
	}
	char GetbCastShadowAsMasked() {
		return memory.read<char>(m_addr + 12);
	}
	char GetbUseSmallAlphaMask() {
		return memory.read<char>(m_addr + 16);
	}
	char GetbOverrideCastShadowAsMasked() {
		return memory.read<char>(m_addr + 20);
	}
	char GetbOverrideUseSmallAlphaMask() {
		return memory.read<char>(m_addr + 24);
	}
	char GetbOverrideEmissiveBoost() {
		return memory.read<char>(m_addr + 28);
	}
	char GetbOverrideDiffuseBoost() {
		return memory.read<char>(m_addr + 28);
	}
	char GetbOverrideExportResolutionScale() {
		return memory.read<char>(m_addr + 28);
	}

private:
	std::uint64_t m_addr = 0;
};class FCollectionParameterBase
{
public:
	FCollectionParameterBase(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetParameterName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FGuid GetID() {
		return memory.read<struct FGuid>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FCollectionScalarParameter
{
public:
	FCollectionScalarParameter(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetDefaultValue() {
		return memory.read<float>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FNamedEmitterMaterial
{
public:
	FNamedEmitterMaterial(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct UMaterialInterface GetMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UMaterialInterface(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetRealTimeSeconds
{
public:
	FGetRealTimeSeconds(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FInterpGroupActorInfo
{
public:
	FInterpGroupActorInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetObjectName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct TArray<struct AActor> GetActors() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct TArray<struct AActor>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetScaleAtSplinePoint
{
public:
	FSetScaleAtSplinePoint(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetPointIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct FVector GetInScaleVector() {
		return memory.read<struct FVector>(m_addr + 4);
	}
	bool GetbUpdateSpline() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FCameraCutInfo
{
public:
	FCameraCutInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	float GetTimestamp() {
		return memory.read<float>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FNodeItem
{
public:
	FNodeItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetParentName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FTransform GetTransform() {
		return memory.read<struct FTransform>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FMeshProxySettings
{
public:
	FMeshProxySettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetScreenSize() {
		return memory.read<int32_t>(m_addr + 0);
	}
	float GetVoxelSize() {
		return memory.read<float>(m_addr + 4);
	}
	struct FMaterialProxySettings GetMaterialSettings() {
		return memory.read<struct FMaterialProxySettings>(m_addr + 8);
	}
	float GetMergeDistance() {
		return memory.read<float>(m_addr + 152);
	}
	struct FColor GetUnresolvedGeometryColor() {
		return memory.read<struct FColor>(m_addr + 156);
	}
	float GetMaxRayCastDist() {
		return memory.read<float>(m_addr + 160);
	}
	float GetHardAngleThreshold() {
		return memory.read<float>(m_addr + 164);
	}
	int32_t GetLightMapResolution() {
		return memory.read<int32_t>(m_addr + 168);
	}
	enum class EProxyNormalComputationMethod GetNormalCalculationMethod() {
		return memory.read<enum class EProxyNormalComputationMethod>(m_addr + 172);
	}
	enum class ELandscapeCullingPrecision GetLandscapeCullingPrecision() {
		return memory.read<enum class ELandscapeCullingPrecision>(m_addr + 173);
	}
	char GetbCalculateCorrectLODModel() {
		return memory.read<char>(m_addr + 174);
	}
	char GetbOverrideVoxelSize() {
		return memory.read<char>(m_addr + 174);
	}
	char GetbOverrideTransferDistance() {
		return memory.read<char>(m_addr + 174);
	}
	char GetbUseHardAngleThreshold() {
		return memory.read<char>(m_addr + 174);
	}
	char GetbComputeLightMapResolution() {
		return memory.read<char>(m_addr + 174);
	}
	char GetbRecalculateNormals() {
		return memory.read<char>(m_addr + 174);
	}
	char GetbUseLandscapeCulling() {
		return memory.read<char>(m_addr + 174);
	}
	char GetbAllowAdjacency() {
		return memory.read<char>(m_addr + 174);
	}
	char GetbAllowDistanceField() {
		return memory.read<char>(m_addr + 175);
	}
	char GetbReuseMeshLightmapUVs() {
		return memory.read<char>(m_addr + 175);
	}
	char GetbCreateCollision() {
		return memory.read<char>(m_addr + 175);
	}
	char GetbAllowVertexColors() {
		return memory.read<char>(m_addr + 175);
	}
	char GetbGenerateLightmapUVs() {
		return memory.read<char>(m_addr + 175);
	}

private:
	std::uint64_t m_addr = 0;
};class FPurchaseInfo
{
public:
	FPurchaseInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetIdentifier() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FString GetDisplayName() {
		return memory.read<struct FString>(m_addr + 16);
	}
	struct FString GetDisplayDescription() {
		return memory.read<struct FString>(m_addr + 32);
	}
	struct FString GetDisplayPrice() {
		return memory.read<struct FString>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};class FRandomUnitVectorInEllipticalConeInDegrees
{
public:
	FRandomUnitVectorInEllipticalConeInDegrees(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetConeDir() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	float GetMaxYawInDegrees() {
		return memory.read<float>(m_addr + 12);
	}
	float GetMaxPitchInDegrees() {
		return memory.read<float>(m_addr + 16);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FNameCurveKey
{
public:
	FNameCurveKey(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetTime() {
		return memory.read<float>(m_addr + 0);
	}
	struct FName GetValue() {
		return memory.read<struct FName>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FNavAgentSelector
{
public:
	FNavAgentSelector(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	char GetbSupportsAgent0() {
		return memory.read<char>(m_addr + 0);
	}
	char GetbSupportsAgent1() {
		return memory.read<char>(m_addr + 0);
	}
	char GetbSupportsAgent2() {
		return memory.read<char>(m_addr + 0);
	}
	char GetbSupportsAgent3() {
		return memory.read<char>(m_addr + 0);
	}
	char GetbSupportsAgent4() {
		return memory.read<char>(m_addr + 0);
	}
	char GetbSupportsAgent5() {
		return memory.read<char>(m_addr + 0);
	}
	char GetbSupportsAgent6() {
		return memory.read<char>(m_addr + 0);
	}
	char GetbSupportsAgent7() {
		return memory.read<char>(m_addr + 0);
	}
	char GetbSupportsAgent8() {
		return memory.read<char>(m_addr + 1);
	}
	char GetbSupportsAgent9() {
		return memory.read<char>(m_addr + 1);
	}
	char GetbSupportsAgent10() {
		return memory.read<char>(m_addr + 1);
	}
	char GetbSupportsAgent11() {
		return memory.read<char>(m_addr + 1);
	}
	char GetbSupportsAgent12() {
		return memory.read<char>(m_addr + 1);
	}
	char GetbSupportsAgent13() {
		return memory.read<char>(m_addr + 1);
	}
	char GetbSupportsAgent14() {
		return memory.read<char>(m_addr + 1);
	}
	char GetbSupportsAgent15() {
		return memory.read<char>(m_addr + 1);
	}

private:
	std::uint64_t m_addr = 0;
};class FBuildFromStaticMeshDescriptions
{
public:
	FBuildFromStaticMeshDescriptions(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct UStaticMeshDescription> GetStaticMeshDescriptions() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct TArray<struct UStaticMeshDescription>(ptr_addr);
	}
	bool GetbBuildSimpleCollision() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FNavigationLink
{
public:
	FNavigationLink(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetLeft() {
		return memory.read<struct FVector>(m_addr + 48);
	}
	struct FVector GetRight() {
		return memory.read<struct FVector>(m_addr + 60);
	}

private:
	std::uint64_t m_addr = 0;
};class FPacketSimulationSettings
{
public:
	FPacketSimulationSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetPktLoss() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetPktLossMaxSize() {
		return memory.read<int32_t>(m_addr + 4);
	}
	int32_t GetPktLossMinSize() {
		return memory.read<int32_t>(m_addr + 8);
	}
	int32_t GetPktOrder() {
		return memory.read<int32_t>(m_addr + 12);
	}
	int32_t GetPktDup() {
		return memory.read<int32_t>(m_addr + 16);
	}
	int32_t GetPktLag() {
		return memory.read<int32_t>(m_addr + 20);
	}
	int32_t GetPktLagVariance() {
		return memory.read<int32_t>(m_addr + 24);
	}
	int32_t GetPktLagMin() {
		return memory.read<int32_t>(m_addr + 28);
	}
	int32_t GetPktLagMax() {
		return memory.read<int32_t>(m_addr + 32);
	}
	int32_t GetPktIncomingLagMin() {
		return memory.read<int32_t>(m_addr + 36);
	}
	int32_t GetPktIncomingLagMax() {
		return memory.read<int32_t>(m_addr + 40);
	}
	int32_t GetPktIncomingLoss() {
		return memory.read<int32_t>(m_addr + 44);
	}
	int32_t GetPktJitter() {
		return memory.read<int32_t>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};class FReadRenderTargetUV
{
public:
	FReadRenderTargetUV(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct UTextureRenderTarget2D GetTextureRenderTarget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UTextureRenderTarget2D(ptr_addr);
	}
	float GetU() {
		return memory.read<float>(m_addr + 16);
	}
	float GetV() {
		return memory.read<float>(m_addr + 20);
	}
	struct FColor GetReturnValue() {
		return memory.read<struct FColor>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FSoundSourceBusSendInfo
{
public:
	FSoundSourceBusSendInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class ESourceBusSendLevelControlMethod GetSourceBusSendLevelControlMethod() {
		return memory.read<enum class ESourceBusSendLevelControlMethod>(m_addr + 0);
	}
	struct USoundSourceBus GetSoundSourceBus() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct USoundSourceBus(ptr_addr);
	}
	struct UAudioBus GetAudioBus() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UAudioBus(ptr_addr);
	}
	float GetSendLevel() {
		return memory.read<float>(m_addr + 24);
	}
	float GetMinSendLevel() {
		return memory.read<float>(m_addr + 28);
	}
	float GetMaxSendLevel() {
		return memory.read<float>(m_addr + 32);
	}
	float GetMinSendDistance() {
		return memory.read<float>(m_addr + 36);
	}
	float GetMaxSendDistance() {
		return memory.read<float>(m_addr + 40);
	}
	struct FRuntimeFloatCurve GetCustomSendLevelCurve() {
		return memory.read<struct FRuntimeFloatCurve>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetBoneIndex
{
public:
	FGetBoneIndex(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FArray_Resize
{
public:
	FArray_Resize(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<int32_t> GetTargetArray() {
		return memory.read<struct TArray<int32_t>>(m_addr + 0);
	}
	int32_t GetSize() {
		return memory.read<int32_t>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FParticleBurst
{
public:
	FParticleBurst(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetCount() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetCountLow() {
		return memory.read<int32_t>(m_addr + 4);
	}
	float GetTime() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FReverse
{
public:
	FReverse(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetSourceString() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FParticleRandomSeedInfo
{
public:
	FParticleRandomSeedInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetParameterName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	char GetbGetSeedFromInstance() {
		return memory.read<char>(m_addr + 8);
	}
	char GetbInstanceSeedIsIndex() {
		return memory.read<char>(m_addr + 8);
	}
	char GetbResetSeedOnEmitterLooping() {
		return memory.read<char>(m_addr + 8);
	}
	char GetbRandomlySelectSeedArray() {
		return memory.read<char>(m_addr + 8);
	}
	struct TArray<int32_t> GetRandomSeeds() {
		return memory.read<struct TArray<int32_t>>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FOverrideAnimationData
{
public:
	FOverrideAnimationData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimationAsset GetInAnimToPlay() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimationAsset(ptr_addr);
	}
	bool GetbIsLooping() {
		return memory.read<bool>(m_addr + 8);
	}
	bool GetbIsPlaying() {
		return memory.read<bool>(m_addr + 9);
	}
	float Getposition() {
		return memory.read<float>(m_addr + 12);
	}
	float GetPlayRate() {
		return memory.read<float>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetHitResultUnderCursor
{
public:
	FGetHitResultUnderCursor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class ECollisionChannel GetTraceChannel() {
		return memory.read<enum class ECollisionChannel>(m_addr + 0);
	}
	bool GetbTraceComplex() {
		return memory.read<bool>(m_addr + 1);
	}
	struct FHitResult GetHitResult() {
		return memory.read<struct FHitResult>(m_addr + 4);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 140);
	}

private:
	std::uint64_t m_addr = 0;
};class FBeamModifierOptions
{
public:
	FBeamModifierOptions(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	char GetbModify() {
		return memory.read<char>(m_addr + 0);
	}
	char GetbScale() {
		return memory.read<char>(m_addr + 0);
	}
	char Getblock() {
		return memory.read<char>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FPlayAnimation
{
public:
	FPlayAnimation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimationAsset GetNewAnimToPlay() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimationAsset(ptr_addr);
	}
	bool GetbLooping() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FLocationBoneSocketInfo
{
public:
	FLocationBoneSocketInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetBoneSocketName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FVector GetOffset() {
		return memory.read<struct FVector>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetTimeRange
{
public:
	FGetTimeRange(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetMinTime() {
		return memory.read<float>(m_addr + 0);
	}
	float GetMaxTime() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetPlayRate
{
public:
	FSetPlayRate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewRate() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FOrbitOptions
{
public:
	FOrbitOptions(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	char GetbProcessDuringSpawn() {
		return memory.read<char>(m_addr + 0);
	}
	char GetbProcessDuringUpdate() {
		return memory.read<char>(m_addr + 0);
	}
	char GetbUseEmitterTime() {
		return memory.read<char>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FEmitterDynamicParameter
{
public:
	FEmitterDynamicParameter(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetParamName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	char GetbUseEmitterTime() {
		return memory.read<char>(m_addr + 8);
	}
	char GetbSpawnTimeOnly() {
		return memory.read<char>(m_addr + 8);
	}
	enum class EEmitterDynamicParameterValue GetValueMethod() {
		return memory.read<enum class EEmitterDynamicParameterValue>(m_addr + 12);
	}
	char GetbScaleVelocityByParamValue() {
		return memory.read<char>(m_addr + 16);
	}
	struct FRawDistributionFloat GetParamValue() {
		return memory.read<struct FRawDistributionFloat>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FMontage_GetBlendTime
{
public:
	FMontage_GetBlendTime(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimMontage GetMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimMontage(ptr_addr);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_DrawPolygon
{
public:
	FK2_DrawPolygon(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTexture GetRenderTexture() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UTexture(ptr_addr);
	}
	struct FVector2D GetScreenPosition() {
		return memory.read<struct FVector2D>(m_addr + 8);
	}
	struct FVector2D GetRadius() {
		return memory.read<struct FVector2D>(m_addr + 16);
	}
	int32_t GetNumberOfSides() {
		return memory.read<int32_t>(m_addr + 24);
	}
	struct FLinearColor GetRenderColor() {
		return memory.read<struct FLinearColor>(m_addr + 28);
	}

private:
	std::uint64_t m_addr = 0;
};class FBeamTargetData
{
public:
	FBeamTargetData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetTargetName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	float GetTargetPercentage() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsLevelLoaded
{
public:
	FIsLevelLoaded(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGPUSpriteResourceData
{
public:
	FGPUSpriteResourceData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FColor> GetQuantizedColorSamples() {
		return memory.read<struct TArray<struct FColor>>(m_addr + 0);
	}
	struct TArray<struct FColor> GetQuantizedMiscSamples() {
		return memory.read<struct TArray<struct FColor>>(m_addr + 16);
	}
	struct TArray<struct FColor> GetQuantizedSimulationAttrSamples() {
		return memory.read<struct TArray<struct FColor>>(m_addr + 32);
	}
	struct FVector4 GetColorScale() {
		return memory.read<struct FVector4>(m_addr + 48);
	}
	struct FVector4 GetColorBias() {
		return memory.read<struct FVector4>(m_addr + 64);
	}
	struct FVector4 GetMiscScale() {
		return memory.read<struct FVector4>(m_addr + 80);
	}
	struct FVector4 GetMiscBias() {
		return memory.read<struct FVector4>(m_addr + 96);
	}
	struct FVector4 GetSimulationAttrCurveScale() {
		return memory.read<struct FVector4>(m_addr + 112);
	}
	struct FVector4 GetSimulationAttrCurveBias() {
		return memory.read<struct FVector4>(m_addr + 128);
	}
	struct FVector4 GetSubImageSize() {
		return memory.read<struct FVector4>(m_addr + 144);
	}
	struct FVector4 GetSizeBySpeed() {
		return memory.read<struct FVector4>(m_addr + 160);
	}
	struct FVector GetConstantAcceleration() {
		return memory.read<struct FVector>(m_addr + 176);
	}
	struct FVector GetOrbitOffsetBase() {
		return memory.read<struct FVector>(m_addr + 188);
	}
	struct FVector GetOrbitOffsetRange() {
		return memory.read<struct FVector>(m_addr + 200);
	}
	struct FVector GetOrbitFrequencyBase() {
		return memory.read<struct FVector>(m_addr + 212);
	}
	struct FVector GetOrbitFrequencyRange() {
		return memory.read<struct FVector>(m_addr + 224);
	}
	struct FVector GetOrbitPhaseBase() {
		return memory.read<struct FVector>(m_addr + 236);
	}
	struct FVector GetOrbitPhaseRange() {
		return memory.read<struct FVector>(m_addr + 248);
	}
	float GetGlobalVectorFieldScale() {
		return memory.read<float>(m_addr + 260);
	}
	float GetGlobalVectorFieldTightness() {
		return memory.read<float>(m_addr + 264);
	}
	float GetPerParticleVectorFieldScale() {
		return memory.read<float>(m_addr + 268);
	}
	float GetPerParticleVectorFieldBias() {
		return memory.read<float>(m_addr + 272);
	}
	float GetDragCoefficientScale() {
		return memory.read<float>(m_addr + 276);
	}
	float GetDragCoefficientBias() {
		return memory.read<float>(m_addr + 280);
	}
	float GetResilienceScale() {
		return memory.read<float>(m_addr + 284);
	}
	float GetResilienceBias() {
		return memory.read<float>(m_addr + 288);
	}
	float GetCollisionRadiusScale() {
		return memory.read<float>(m_addr + 292);
	}
	float GetCollisionRadiusBias() {
		return memory.read<float>(m_addr + 296);
	}
	float GetCollisionTimeBias() {
		return memory.read<float>(m_addr + 300);
	}
	float GetCollisionRandomSpread() {
		return memory.read<float>(m_addr + 304);
	}
	float GetCollisionRandomDistribution() {
		return memory.read<float>(m_addr + 308);
	}
	float GetOneMinusFriction() {
		return memory.read<float>(m_addr + 312);
	}
	float GetRotationRateScale() {
		return memory.read<float>(m_addr + 316);
	}
	float GetCameraMotionBlurAmount() {
		return memory.read<float>(m_addr + 320);
	}
	enum class EParticleScreenAlignment GetScreenAlignment() {
		return memory.read<enum class EParticleScreenAlignment>(m_addr + 324);
	}
	enum class EParticleAxisLock GetLockAxisFlag() {
		return memory.read<enum class EParticleAxisLock>(m_addr + 325);
	}
	struct FVector2D GetPivotOffset() {
		return memory.read<struct FVector2D>(m_addr + 328);
	}
	char GetbRemoveHMDRoll() {
		return memory.read<char>(m_addr + 336);
	}
	float GetMinFacingCameraBlendDistance() {
		return memory.read<float>(m_addr + 340);
	}
	float GetMaxFacingCameraBlendDistance() {
		return memory.read<float>(m_addr + 344);
	}

private:
	std::uint64_t m_addr = 0;
};class FLinePlaneIntersection
{
public:
	FLinePlaneIntersection(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetLineStart() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetLineEnd() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	struct FPlane GetAPlane() {
		return memory.read<struct FPlane>(m_addr + 32);
	}
	float GetT() {
		return memory.read<float>(m_addr + 48);
	}
	struct FVector GetIntersection() {
		return memory.read<struct FVector>(m_addr + 52);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};class FMontage_GetPosition
{
public:
	FMontage_GetPosition(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimMontage GetMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimMontage(ptr_addr);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGPUSpriteEmitterInfo
{
public:
	FGPUSpriteEmitterInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UParticleModuleRequired GetRequiredModule() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UParticleModuleRequired(ptr_addr);
	}
	struct UParticleModuleSpawn GetSpawnModule() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UParticleModuleSpawn(ptr_addr);
	}
	struct UParticleModuleSpawnPerUnit GetSpawnPerUnitModule() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UParticleModuleSpawnPerUnit(ptr_addr);
	}
	struct TArray<struct UParticleModule> GetSpawnModules() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 24);
		return struct TArray<struct UParticleModule>(ptr_addr);
	}
	struct FGPUSpriteLocalVectorFieldInfo GetLocalVectorField() {
		return memory.read<struct FGPUSpriteLocalVectorFieldInfo>(m_addr + 48);
	}
	struct FFloatDistribution GetVectorFieldScale() {
		return memory.read<struct FFloatDistribution>(m_addr + 160);
	}
	struct FFloatDistribution GetDragCoefficient() {
		return memory.read<struct FFloatDistribution>(m_addr + 192);
	}
	struct FFloatDistribution GetPointAttractorStrength() {
		return memory.read<struct FFloatDistribution>(m_addr + 224);
	}
	struct FFloatDistribution GetResilience() {
		return memory.read<struct FFloatDistribution>(m_addr + 256);
	}
	struct FVector GetConstantAcceleration() {
		return memory.read<struct FVector>(m_addr + 288);
	}
	struct FVector GetPointAttractorPosition() {
		return memory.read<struct FVector>(m_addr + 300);
	}
	float GetPointAttractorRadiusSq() {
		return memory.read<float>(m_addr + 312);
	}
	struct FVector GetOrbitOffsetBase() {
		return memory.read<struct FVector>(m_addr + 316);
	}
	struct FVector GetOrbitOffsetRange() {
		return memory.read<struct FVector>(m_addr + 328);
	}
	struct FVector2D GetInvMaxSize() {
		return memory.read<struct FVector2D>(m_addr + 340);
	}
	float GetInvRotationRateScale() {
		return memory.read<float>(m_addr + 348);
	}
	float GetMaxLifetime() {
		return memory.read<float>(m_addr + 352);
	}
	int32_t GetMaxParticleCount() {
		return memory.read<int32_t>(m_addr + 356);
	}
	enum class EParticleScreenAlignment GetScreenAlignment() {
		return memory.read<enum class EParticleScreenAlignment>(m_addr + 360);
	}
	enum class EParticleAxisLock GetLockAxisFlag() {
		return memory.read<enum class EParticleAxisLock>(m_addr + 361);
	}
	char GetbEnableCollision() {
		return memory.read<char>(m_addr + 364);
	}
	enum class EParticleCollisionMode GetCollisionMode() {
		return memory.read<enum class EParticleCollisionMode>(m_addr + 368);
	}
	char GetbRemoveHMDRoll() {
		return memory.read<char>(m_addr + 372);
	}
	float GetMinFacingCameraBlendDistance() {
		return memory.read<float>(m_addr + 376);
	}
	float GetMaxFacingCameraBlendDistance() {
		return memory.read<float>(m_addr + 380);
	}
	struct FRawDistributionVector GetDynamicColor() {
		return memory.read<struct FRawDistributionVector>(m_addr + 384);
	}
	struct FRawDistributionFloat GetDynamicAlpha() {
		return memory.read<struct FRawDistributionFloat>(m_addr + 456);
	}
	struct FRawDistributionVector GetDynamicColorScale() {
		return memory.read<struct FRawDistributionVector>(m_addr + 504);
	}
	struct FRawDistributionFloat GetDynamicAlphaScale() {
		return memory.read<struct FRawDistributionFloat>(m_addr + 576);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetInstanceTransitionTimeElapsedFraction
{
public:
	FGetInstanceTransitionTimeElapsedFraction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetMachineIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetTransitionIndex() {
		return memory.read<int32_t>(m_addr + 4);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGPUSpriteLocalVectorFieldInfo
{
public:
	FGPUSpriteLocalVectorFieldInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UVectorField GetField() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UVectorField(ptr_addr);
	}
	struct FTransform GetTransform() {
		return memory.read<struct FTransform>(m_addr + 16);
	}
	struct FRotator GetMinInitialRotation() {
		return memory.read<struct FRotator>(m_addr + 64);
	}
	struct FRotator GetMaxInitialRotation() {
		return memory.read<struct FRotator>(m_addr + 76);
	}
	struct FRotator GetRotationRate() {
		return memory.read<struct FRotator>(m_addr + 88);
	}
	float GetIntensity() {
		return memory.read<float>(m_addr + 100);
	}
	float GetTightness() {
		return memory.read<float>(m_addr + 104);
	}
	char GetbIgnoreComponentTransform() {
		return memory.read<char>(m_addr + 108);
	}
	char GetbTileX() {
		return memory.read<char>(m_addr + 108);
	}
	char GetbTileY() {
		return memory.read<char>(m_addr + 108);
	}
	char GetbTileZ() {
		return memory.read<char>(m_addr + 108);
	}
	char GetbUseFixDT() {
		return memory.read<char>(m_addr + 108);
	}

private:
	std::uint64_t m_addr = 0;
};class FRootMotionSource_MoveToForce
{
public:
	FRootMotionSource_MoveToForce(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetStartLocation() {
		return memory.read<struct FVector>(m_addr + 152);
	}
	struct FVector GetTargetLocation() {
		return memory.read<struct FVector>(m_addr + 164);
	}
	bool GetbRestrictSpeedToExpected() {
		return memory.read<bool>(m_addr + 176);
	}
	struct UCurveVector GetPathOffsetCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 184);
		return struct UCurveVector(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FParticleSystemLOD
{
public:
	FParticleSystemLOD(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FParticleSysParam
{
public:
	FParticleSysParam(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	enum class EParticleSysParamType GetParamType() {
		return memory.read<enum class EParticleSysParamType>(m_addr + 8);
	}
	float GetScalar() {
		return memory.read<float>(m_addr + 12);
	}
	float GetScalar_Low() {
		return memory.read<float>(m_addr + 16);
	}
	struct FVector GetVector() {
		return memory.read<struct FVector>(m_addr + 20);
	}
	struct FVector GetVector_Low() {
		return memory.read<struct FVector>(m_addr + 32);
	}
	struct FColor GetColor() {
		return memory.read<struct FColor>(m_addr + 44);
	}
	struct AActor GetActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct AActor(ptr_addr);
	}
	struct UMaterialInterface GetMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct UMaterialInterface(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FParticleSystemWorldManagerTickFunction
{
public:
	FParticleSystemWorldManagerTickFunction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FFreezablePerPlatformInt
{
public:
	FFreezablePerPlatformInt(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FPhysicalAnimationData
{
public:
	FPhysicalAnimationData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetBodyName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	char GetbIsLocalSimulation() {
		return memory.read<char>(m_addr + 8);
	}
	float GetOrientationStrength() {
		return memory.read<float>(m_addr + 12);
	}
	float GetAngularVelocityStrength() {
		return memory.read<float>(m_addr + 16);
	}
	float GetPositionStrength() {
		return memory.read<float>(m_addr + 20);
	}
	float GetVelocityStrength() {
		return memory.read<float>(m_addr + 24);
	}
	float GetMaxLinearForce() {
		return memory.read<float>(m_addr + 28);
	}
	float GetMaxAngularForce() {
		return memory.read<float>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetLowPassFilterFrequency
{
public:
	FSetLowPassFilterFrequency(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetInLowPassFilterFrequency() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetPrecomputeParams
{
public:
	FSetPrecomputeParams(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetDensityHeight() {
		return memory.read<float>(m_addr + 0);
	}
	int32_t GetMaxScatteringOrder() {
		return memory.read<int32_t>(m_addr + 4);
	}
	int32_t GetInscatterAltitudeSampleNum() {
		return memory.read<int32_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FPhysicalAnimationProfile
{
public:
	FPhysicalAnimationProfile(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetProfileName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FPhysicalAnimationData GetPhysicalAnimationData() {
		return memory.read<struct FPhysicalAnimationData>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetUseAutoManageAttachment
{
public:
	FSetUseAutoManageAttachment(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbAutoManage() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FPhysicsConstraintProfileHandle
{
public:
	FPhysicsConstraintProfileHandle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FConstraintProfileProperties GetProfileProperties() {
		return memory.read<struct FConstraintProfileProperties>(m_addr + 0);
	}
	struct FName GetProfileName() {
		return memory.read<struct FName>(m_addr + 276);
	}

private:
	std::uint64_t m_addr = 0;
};class FChaosPhysicsSettings
{
public:
	FChaosPhysicsSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class EChaosThreadingMode GetDefaultThreadingModel() {
		return memory.read<enum class EChaosThreadingMode>(m_addr + 0);
	}
	enum class EChaosSolverTickMode GetDedicatedThreadTickMode() {
		return memory.read<enum class EChaosSolverTickMode>(m_addr + 1);
	}
	enum class EChaosBufferMode GetDedicatedThreadBufferMode() {
		return memory.read<enum class EChaosBufferMode>(m_addr + 2);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetNumPlayers
{
public:
	FGetNumPlayers(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetCameraView
{
public:
	FGetCameraView(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetDeltaTime() {
		return memory.read<float>(m_addr + 0);
	}
	struct FMinimalViewInfo GetDesiredView() {
		return memory.read<struct FMinimalViewInfo>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FMontage_Play
{
public:
	FMontage_Play(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimMontage GetMontageToPlay() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimMontage(ptr_addr);
	}
	float GetInPlayRate() {
		return memory.read<float>(m_addr + 8);
	}
	enum class EMontagePlayReturnType GetReturnValueType() {
		return memory.read<enum class EMontagePlayReturnType>(m_addr + 12);
	}
	float GetInTimeToStartMontageAt() {
		return memory.read<float>(m_addr + 16);
	}
	bool GetbStopAllMontages() {
		return memory.read<bool>(m_addr + 20);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FPhysicalSurfaceName
{
public:
	FPhysicalSurfaceName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class EPhysicalSurface GetType() {
		return memory.read<enum class EPhysicalSurface>(m_addr + 0);
	}
	struct FName GetName() {
		return memory.read<struct FName>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FViewTargetTransitionParams
{
public:
	FViewTargetTransitionParams(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetBlendTime() {
		return memory.read<float>(m_addr + 0);
	}
	enum class EViewTargetBlendFunction GetBlendFunction() {
		return memory.read<enum class EViewTargetBlendFunction>(m_addr + 4);
	}
	float GetBlendExp() {
		return memory.read<float>(m_addr + 8);
	}
	char GetbLockOutgoing() {
		return memory.read<char>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetGameUserSettings
{
public:
	FGetGameUserSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UGameUserSettings GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UGameUserSettings(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FTViewTarget
{
public:
	FTViewTarget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetTarget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}
	struct FMinimalViewInfo GetPOV() {
		return memory.read<struct FMinimalViewInfo>(m_addr + 16);
	}
	struct APlayerState GetPlayerState() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1664);
		return struct APlayerState(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FUpdateLevelStreamingLevelStatus
{
public:
	FUpdateLevelStreamingLevelStatus(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetPackageName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	int32_t GetLODIndex() {
		return memory.read<int32_t>(m_addr + 8);
	}
	bool GetbNewShouldBeLoaded() {
		return memory.read<bool>(m_addr + 12);
	}
	bool GetbNewShouldBeVisible() {
		return memory.read<bool>(m_addr + 13);
	}
	bool GetbNewShouldBlockOnLoad() {
		return memory.read<bool>(m_addr + 14);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsFlying
{
public:
	FIsFlying(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FRandomUnitVectorFromStream
{
public:
	FRandomUnitVectorFromStream(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRandomStream GetStream() {
		return memory.read<struct FRandomStream>(m_addr + 0);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FInputActionSpeechMapping
{
public:
	FInputActionSpeechMapping(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetActionName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FName GetSpeechKeyword() {
		return memory.read<struct FName>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FReferencePose
{
public:
	FReferencePose(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetPoseName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct TArray<struct FTransform> GetReferencePose() {
		return memory.read<struct TArray<struct FTransform>>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FInputAxisProperties
{
public:
	FInputAxisProperties(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetDeadZone() {
		return memory.read<float>(m_addr + 0);
	}
	float GetSensitivity() {
		return memory.read<float>(m_addr + 4);
	}
	float GetExponent() {
		return memory.read<float>(m_addr + 8);
	}
	char GetbInvert() {
		return memory.read<char>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FKeyBind
{
public:
	FKeyBind(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKey GetKey() {
		return memory.read<struct FKey>(m_addr + 0);
	}
	struct FString GetCommand() {
		return memory.read<struct FString>(m_addr + 24);
	}
	char GetControl() {
		return memory.read<char>(m_addr + 40);
	}
	char Getshift() {
		return memory.read<char>(m_addr + 40);
	}
	char GetAlt() {
		return memory.read<char>(m_addr + 40);
	}
	char GetCmd() {
		return memory.read<char>(m_addr + 40);
	}
	char GetbIgnoreCtrl() {
		return memory.read<char>(m_addr + 40);
	}
	char GetbIgnoreShift() {
		return memory.read<char>(m_addr + 40);
	}
	char GetbIgnoreAlt() {
		return memory.read<char>(m_addr + 40);
	}
	char GetbIgnoreCmd() {
		return memory.read<char>(m_addr + 40);
	}
	char GetbDisabled() {
		return memory.read<char>(m_addr + 41);
	}

private:
	std::uint64_t m_addr = 0;
};class FValidatePath
{
public:
	FValidatePath(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetInPath() {
		return memory.read<struct FString>(m_addr + 0);
	}
	bool GetbDidSucceed() {
		return memory.read<bool>(m_addr + 16);
	}
	struct FText GetOutReason() {
		return memory.read<struct FText>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FServerSetSpectatorLocation
{
public:
	FServerSetSpectatorLocation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetNewLoc() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FRotator GetNewRot() {
		return memory.read<struct FRotator>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetSeconds
{
public:
	FGetSeconds(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTimespan GetA() {
		return memory.read<struct FTimespan>(m_addr + 0);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FPreviewAttachedObjectPair
{
public:
	FPreviewAttachedObjectPair(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftObjectPtr<UObject> GetAttachedObject() {
		return memory.read<struct TSoftObjectPtr<UObject>>(m_addr + 0);
	}
	struct UObject GetObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct UObject(ptr_addr);
	}
	struct FName GetAttachedTo() {
		return memory.read<struct FName>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetTextureParameterValueByInfo
{
public:
	FSetTextureParameterValueByInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMaterialParameterInfo GetParameterInfo() {
		return memory.read<struct FMaterialParameterInfo>(m_addr + 0);
	}
	struct UTexture GetValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UTexture(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FAsCurrency_Float
{
public:
	FAsCurrency_Float(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetValue() {
		return memory.read<float>(m_addr + 0);
	}
	enum class ERoundingMode GetRoundingMode() {
		return memory.read<enum class ERoundingMode>(m_addr + 4);
	}
	bool GetbAlwaysSign() {
		return memory.read<bool>(m_addr + 5);
	}
	bool GetbUseGrouping() {
		return memory.read<bool>(m_addr + 6);
	}
	int32_t GetMinimumIntegralDigits() {
		return memory.read<int32_t>(m_addr + 8);
	}
	int32_t GetMaximumIntegralDigits() {
		return memory.read<int32_t>(m_addr + 12);
	}
	int32_t GetMinimumFractionalDigits() {
		return memory.read<int32_t>(m_addr + 16);
	}
	int32_t GetMaximumFractionalDigits() {
		return memory.read<int32_t>(m_addr + 20);
	}
	struct FString GetCurrencyCode() {
		return memory.read<struct FString>(m_addr + 24);
	}
	struct FText GetReturnValue() {
		return memory.read<struct FText>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetDesktopResolution
{
public:
	FGetDesktopResolution(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetMonitorIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct FIntPoint GetReturnValue() {
		return memory.read<struct FIntPoint>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FPrimitiveComponentInstanceData
{
public:
	FPrimitiveComponentInstanceData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTransform GetComponentTransform() {
		return memory.read<struct FTransform>(m_addr + 192);
	}
	int32_t GetVisibilityId() {
		return memory.read<int32_t>(m_addr + 240);
	}
	struct UPrimitiveComponent GetLODParent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 248);
		return struct UPrimitiveComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FAutomationTransientDir
{
public:
	FAutomationTransientDir(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FQuartzTimeSignature
{
public:
	FQuartzTimeSignature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetNumBeats() {
		return memory.read<int32_t>(m_addr + 0);
	}
	enum class EQuartzTimeSignatureQuantization GetBeatType() {
		return memory.read<enum class EQuartzTimeSignatureQuantization>(m_addr + 4);
	}
	struct TArray<struct FQuartzPulseOverrideStep> GetOptionalPulseOverride() {
		return memory.read<struct TArray<struct FQuartzPulseOverrideStep>>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FLess_TimespanTimespan
{
public:
	FLess_TimespanTimespan(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTimespan GetA() {
		return memory.read<struct FTimespan>(m_addr + 0);
	}
	struct FTimespan GetB() {
		return memory.read<struct FTimespan>(m_addr + 8);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FQuartzQuantizationBoundary
{
public:
	FQuartzQuantizationBoundary(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class EQuartzCommandQuantization GetQuantization() {
		return memory.read<enum class EQuartzCommandQuantization>(m_addr + 0);
	}
	float GetMultiplier() {
		return memory.read<float>(m_addr + 4);
	}
	enum class EQuarztQuantizationReference GetCountingReferencePoint() {
		return memory.read<enum class EQuarztQuantizationReference>(m_addr + 8);
	}
	bool GetbFireOnClockStart() {
		return memory.read<bool>(m_addr + 9);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetAnimInstance
{
public:
	FGetAnimInstance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimInstance GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimInstance(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetAnimationAsset
{
public:
	FGetAnimationAsset(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimationAsset GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimationAsset(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FQuartzTransportTimeStamp
{
public:
	FQuartzTransportTimeStamp(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetBars() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetBeat() {
		return memory.read<int32_t>(m_addr + 4);
	}
	float GetBeatFraction() {
		return memory.read<float>(m_addr + 8);
	}
	float GetSeconds() {
		return memory.read<float>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetStaticMesh
{
public:
	FSetStaticMesh(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UStaticMesh GetNewMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UStaticMesh(ptr_addr);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FReverbSettings
{
public:
	FReverbSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbApplyReverb() {
		return memory.read<bool>(m_addr + 0);
	}
	struct UReverbEffect GetReverbEffect() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UReverbEffect(ptr_addr);
	}
	struct USoundEffectSubmixPreset GetReverbPluginEffect() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct USoundEffectSubmixPreset(ptr_addr);
	}
	float GetVolume() {
		return memory.read<float>(m_addr + 24);
	}
	float GetFadeTime() {
		return memory.read<float>(m_addr + 28);
	}

private:
	std::uint64_t m_addr = 0;
};class FTransformBase
{
public:
	FTransformBase(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetNode() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FTransformBaseConstraint GetConstraints[2]() {
		return memory.read<struct FTransformBaseConstraint>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetRelevantAnimTime
{
public:
	FGetRelevantAnimTime(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetMachineIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetStateIndex() {
		return memory.read<int32_t>(m_addr + 4);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FRootMotionSource
{
public:
	FRootMotionSource(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint16_t GetPriority() {
		return memory.read<uint16_t>(m_addr + 16);
	}
	uint16_t GetLocalID() {
		return memory.read<uint16_t>(m_addr + 18);
	}
	enum class ERootMotionAccumulateMode GetAccumulateMode() {
		return memory.read<enum class ERootMotionAccumulateMode>(m_addr + 20);
	}
	struct FName GetInstanceName() {
		return memory.read<struct FName>(m_addr + 24);
	}
	float GetStartTime() {
		return memory.read<float>(m_addr + 32);
	}
	float GetCurrentTime() {
		return memory.read<float>(m_addr + 36);
	}
	float GetPreviousTime() {
		return memory.read<float>(m_addr + 40);
	}
	float GetDuration() {
		return memory.read<float>(m_addr + 44);
	}
	struct FRootMotionSourceStatus Getstatus() {
		return memory.read<struct FRootMotionSourceStatus>(m_addr + 48);
	}
	struct FRootMotionSourceSettings GetSettings() {
		return memory.read<struct FRootMotionSourceSettings>(m_addr + 49);
	}
	bool GetbInLocalSpace() {
		return memory.read<bool>(m_addr + 50);
	}
	struct FRootMotionMovementParams GetRootMotionParams() {
		return memory.read<struct FRootMotionMovementParams>(m_addr + 64);
	}
	struct FRootMotionFinishVelocitySettings GetFinishVelocityParams() {
		return memory.read<struct FRootMotionFinishVelocitySettings>(m_addr + 128);
	}

private:
	std::uint64_t m_addr = 0;
};class FRootMotionFinishVelocitySettings
{
public:
	FRootMotionFinishVelocitySettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class ERootMotionFinishVelocityMode GetMode() {
		return memory.read<enum class ERootMotionFinishVelocityMode>(m_addr + 0);
	}
	struct FVector GetSetVelocity() {
		return memory.read<struct FVector>(m_addr + 4);
	}
	float GetClampVelocity() {
		return memory.read<float>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FQuat_Rotator
{
public:
	FQuat_Rotator(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FQuat GetQ() {
		return memory.read<struct FQuat>(m_addr + 0);
	}
	struct FRotator GetReturnValue() {
		return memory.read<struct FRotator>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FRootMotionSourceStatus
{
public:
	FRootMotionSourceStatus(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	char GetFlags() {
		return memory.read<char>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FRootMotionSource_MoveToDynamicForce
{
public:
	FRootMotionSource_MoveToDynamicForce(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetStartLocation() {
		return memory.read<struct FVector>(m_addr + 152);
	}
	struct FVector GetInitialTargetLocation() {
		return memory.read<struct FVector>(m_addr + 164);
	}
	struct FVector GetTargetLocation() {
		return memory.read<struct FVector>(m_addr + 176);
	}
	bool GetbRestrictSpeedToExpected() {
		return memory.read<bool>(m_addr + 188);
	}
	struct UCurveVector GetPathOffsetCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 192);
		return struct UCurveVector(ptr_addr);
	}
	struct UCurveFloat GetTimeMappingCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 200);
		return struct UCurveFloat(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FNormal
{
public:
	FNormal(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetA() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	float GetTolerance() {
		return memory.read<float>(m_addr + 12);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FCameraExposureSettings
{
public:
	FCameraExposureSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class EAutoExposureMethod GetMethod() {
		return memory.read<enum class EAutoExposureMethod>(m_addr + 0);
	}
	float GetLowPercent() {
		return memory.read<float>(m_addr + 4);
	}
	float GetHighPercent() {
		return memory.read<float>(m_addr + 8);
	}
	float GetMinBrightness() {
		return memory.read<float>(m_addr + 12);
	}
	float GetMaxBrightness() {
		return memory.read<float>(m_addr + 16);
	}
	float GetSpeedUp() {
		return memory.read<float>(m_addr + 20);
	}
	float GetSpeedDown() {
		return memory.read<float>(m_addr + 24);
	}
	float GetBias() {
		return memory.read<float>(m_addr + 28);
	}
	struct UCurveFloat GetBiasCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 32);
		return struct UCurveFloat(ptr_addr);
	}
	struct UTexture GetMeterMask() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct UTexture(ptr_addr);
	}
	float GetHistogramLogMin() {
		return memory.read<float>(m_addr + 48);
	}
	float GetHistogramLogMax() {
		return memory.read<float>(m_addr + 52);
	}
	float GetCalibrationConstant() {
		return memory.read<float>(m_addr + 56);
	}
	char GetApplyPhysicalCameraExposure() {
		return memory.read<char>(m_addr + 60);
	}

private:
	std::uint64_t m_addr = 0;
};class FLensImperfectionSettings
{
public:
	FLensImperfectionSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTexture GetDirtMask() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UTexture(ptr_addr);
	}
	float GetDirtMaskIntensity() {
		return memory.read<float>(m_addr + 8);
	}
	struct FLinearColor GetDirtMaskTint() {
		return memory.read<struct FLinearColor>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetForcedLOD
{
public:
	FGetForcedLOD(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FMakePulsatingValue
{
public:
	FMakePulsatingValue(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetInCurrentTime() {
		return memory.read<float>(m_addr + 0);
	}
	float GetInPulsesPerSecond() {
		return memory.read<float>(m_addr + 4);
	}
	float GetInPhase() {
		return memory.read<float>(m_addr + 8);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FApplyRadialDamage
{
public:
	FApplyRadialDamage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	float GetBaseDamage() {
		return memory.read<float>(m_addr + 8);
	}
	struct FVector GetOrigin() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	float GetDamageRadius() {
		return memory.read<float>(m_addr + 24);
	}
	UDamageType GetDamageTypeClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 32);
		return UDamageType(ptr_addr);
	}
	struct TArray<struct AActor> GetIgnoreActors() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct TArray<struct AActor>(ptr_addr);
	}
	struct AActor GetDamageCauser() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct AActor(ptr_addr);
	}
	struct AController GetInstigatedByController() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 64);
		return struct AController(ptr_addr);
	}
	bool GetbDoFullDamage() {
		return memory.read<bool>(m_addr + 72);
	}
	enum class ECollisionChannel GetDamagePreventionChannel() {
		return memory.read<enum class ECollisionChannel>(m_addr + 73);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 74);
	}

private:
	std::uint64_t m_addr = 0;
};class FConvolutionBloomSettings
{
public:
	FConvolutionBloomSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTexture2D GetTexture() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UTexture2D(ptr_addr);
	}
	float GetSize() {
		return memory.read<float>(m_addr + 8);
	}
	struct FVector2D GetCenterUV() {
		return memory.read<struct FVector2D>(m_addr + 12);
	}
	float GetPreFilterMin() {
		return memory.read<float>(m_addr + 20);
	}
	float GetPreFilterMax() {
		return memory.read<float>(m_addr + 24);
	}
	float GetPreFilterMult() {
		return memory.read<float>(m_addr + 28);
	}
	float GetBufferScale() {
		return memory.read<float>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FColorGradingSettings
{
public:
	FColorGradingSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FColorGradePerRangeSettings GetGlobal() {
		return memory.read<struct FColorGradePerRangeSettings>(m_addr + 0);
	}
	struct FColorGradePerRangeSettings GetShadows() {
		return memory.read<struct FColorGradePerRangeSettings>(m_addr + 80);
	}
	struct FColorGradePerRangeSettings GetMidtones() {
		return memory.read<struct FColorGradePerRangeSettings>(m_addr + 160);
	}
	struct FColorGradePerRangeSettings GetHighlights() {
		return memory.read<struct FColorGradePerRangeSettings>(m_addr + 240);
	}
	float GetShadowsMax() {
		return memory.read<float>(m_addr + 320);
	}
	float GetHighlightsMin() {
		return memory.read<float>(m_addr + 324);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetRenderStatic
{
public:
	FSetRenderStatic(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbNewValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FPercent_FloatFloat
{
public:
	FPercent_FloatFloat(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetA() {
		return memory.read<float>(m_addr + 0);
	}
	float GetB() {
		return memory.read<float>(m_addr + 4);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FEngineShowFlagsSetting
{
public:
	FEngineShowFlagsSetting(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetShowFlagName() {
		return memory.read<struct FString>(m_addr + 0);
	}
	bool GetEnabled() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSingleAnimationPlayData
{
public:
	FSingleAnimationPlayData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimationAsset GetAnimToPlay() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimationAsset(ptr_addr);
	}
	char GetbSavedLooping() {
		return memory.read<char>(m_addr + 8);
	}
	char GetbSavedPlaying() {
		return memory.read<char>(m_addr + 8);
	}
	float GetSavedPosition() {
		return memory.read<float>(m_addr + 12);
	}
	float GetSavedPlayRate() {
		return memory.read<float>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSkeletalMaterial
{
public:
	FSkeletalMaterial(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UMaterialInterface GetMaterialInterface() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UMaterialInterface(ptr_addr);
	}
	struct FName GetMaterialSlotName() {
		return memory.read<struct FName>(m_addr + 8);
	}
	struct FMeshUVChannelInfo GetUVChannelData() {
		return memory.read<struct FMeshUVChannelInfo>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetViewSampleCountScale
{
public:
	FSetViewSampleCountScale(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FAddSplineWorldPoint
{
public:
	FAddSplineWorldPoint(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector Getposition() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FClothingAssetData_Legacy
{
public:
	FClothingAssetData_Legacy(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetAssetName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FString GetApexFileName() {
		return memory.read<struct FString>(m_addr + 8);
	}
	bool GetbClothPropertiesChanged() {
		return memory.read<bool>(m_addr + 24);
	}
	struct FClothPhysicsProperties_Legacy GetPhysicsProperties() {
		return memory.read<struct FClothPhysicsProperties_Legacy>(m_addr + 28);
	}

private:
	std::uint64_t m_addr = 0;
};class FConv_IntPointToVector2D
{
public:
	FConv_IntPointToVector2D(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FIntPoint GetInIntPoint() {
		return memory.read<struct FIntPoint>(m_addr + 0);
	}
	struct FVector2D GetReturnValue() {
		return memory.read<struct FVector2D>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FAdd_VectorVector
{
public:
	FAdd_VectorVector(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetA() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetB() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FInputChord_GetDisplayName
{
public:
	FInputChord_GetDisplayName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FInputChord GetKey() {
		return memory.read<struct FInputChord>(m_addr + 0);
	}
	struct FText GetReturnValue() {
		return memory.read<struct FText>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FClothPhysicsProperties_Legacy
{
public:
	FClothPhysicsProperties_Legacy(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetVerticalResistance() {
		return memory.read<float>(m_addr + 0);
	}
	float GetHorizontalResistance() {
		return memory.read<float>(m_addr + 4);
	}
	float GetBendResistance() {
		return memory.read<float>(m_addr + 8);
	}
	float GetShearResistance() {
		return memory.read<float>(m_addr + 12);
	}
	float GetFriction() {
		return memory.read<float>(m_addr + 16);
	}
	float GetDamping() {
		return memory.read<float>(m_addr + 20);
	}
	float GetTetherStiffness() {
		return memory.read<float>(m_addr + 24);
	}
	float GetTetherLimit() {
		return memory.read<float>(m_addr + 28);
	}
	float GetDrag() {
		return memory.read<float>(m_addr + 32);
	}
	float GetStiffnessFrequency() {
		return memory.read<float>(m_addr + 36);
	}
	float GetGravityScale() {
		return memory.read<float>(m_addr + 40);
	}
	float GetMassScale() {
		return memory.read<float>(m_addr + 44);
	}
	float GetInertiaBlend() {
		return memory.read<float>(m_addr + 48);
	}
	float GetSelfCollisionThickness() {
		return memory.read<float>(m_addr + 52);
	}
	float GetSelfCollisionSquashScale() {
		return memory.read<float>(m_addr + 56);
	}
	float GetSelfCollisionStiffness() {
		return memory.read<float>(m_addr + 60);
	}
	float GetSolverFrequency() {
		return memory.read<float>(m_addr + 64);
	}
	float GetFiberCompression() {
		return memory.read<float>(m_addr + 68);
	}
	float GetFiberExpansion() {
		return memory.read<float>(m_addr + 72);
	}
	float GetFiberResistance() {
		return memory.read<float>(m_addr + 76);
	}

private:
	std::uint64_t m_addr = 0;
};class FBoneMirrorInfo
{
public:
	FBoneMirrorInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetSourceIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	enum class EAxis GetBoneFlipAxis() {
		return memory.read<enum class EAxis>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetFirstUnmarkedBit
{
public:
	FGetFirstUnmarkedBit(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetData() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetStartIdx() {
		return memory.read<int32_t>(m_addr + 4);
	}
	int32_t GetNumBits() {
		return memory.read<int32_t>(m_addr + 8);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FSkeletalMeshComponentEndPhysicsTickFunction
{
public:
	FSkeletalMeshComponentEndPhysicsTickFunction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FSkeletalMeshLODGroupSettings
{
public:
	FSkeletalMeshLODGroupSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FPerPlatformFloat GetScreenSize() {
		return memory.read<struct FPerPlatformFloat>(m_addr + 0);
	}
	float GetLODHysteresis() {
		return memory.read<float>(m_addr + 4);
	}
	enum class EBoneFilterActionOption GetBoneFilterActionOption() {
		return memory.read<enum class EBoneFilterActionOption>(m_addr + 8);
	}
	struct TArray<struct FBoneFilter> GetBoneList() {
		return memory.read<struct TArray<struct FBoneFilter>>(m_addr + 16);
	}
	struct TArray<struct FName> GetBonesToPrioritize() {
		return memory.read<struct TArray<struct FName>>(m_addr + 32);
	}
	float GetWeightOfPrioritization() {
		return memory.read<float>(m_addr + 48);
	}
	struct UAnimSequence GetBakePose() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct UAnimSequence(ptr_addr);
	}
	struct FSkeletalMeshOptimizationSettings GetReductionSettings() {
		return memory.read<struct FSkeletalMeshOptimizationSettings>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};class FReceiveOnDeactivate
{
public:
	FReceiveOnDeactivate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APlayerController GetRestoredPC() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APlayerController(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FBoneFilter
{
public:
	FBoneFilter(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbExcludeSelf() {
		return memory.read<bool>(m_addr + 0);
	}
	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FCanRestartPlayer
{
public:
	FCanRestartPlayer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSkeletalMeshSamplingBuiltData
{
public:
	FSkeletalMeshSamplingBuiltData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FSkeletalMeshSamplingLODBuiltData> GetWholeMeshBuiltData() {
		return memory.read<struct TArray<struct FSkeletalMeshSamplingLODBuiltData>>(m_addr + 0);
	}
	struct TArray<struct FSkeletalMeshSamplingRegionBuiltData> GetRegionBuiltData() {
		return memory.read<struct TArray<struct FSkeletalMeshSamplingRegionBuiltData>>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSkeletalMeshSamplingRegionBuiltData
{
public:
	FSkeletalMeshSamplingRegionBuiltData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FSkeletalMeshSamplingLODBuiltData
{
public:
	FSkeletalMeshSamplingLODBuiltData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FIsUsingSkinWeightProfile
{
public:
	FIsUsingSkinWeightProfile(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSkeletalMeshSamplingRegionBoneFilter
{
public:
	FSkeletalMeshSamplingRegionBoneFilter(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	char GetbIncludeOrExclude() {
		return memory.read<char>(m_addr + 8);
	}
	char GetbApplyToChildren() {
		return memory.read<char>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSkeletalMeshSamplingRegionMaterialFilter
{
public:
	FSkeletalMeshSamplingRegionMaterialFilter(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetMaterialName() {
		return memory.read<struct FName>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetWorldOriginLocation
{
public:
	FGetWorldOriginLocation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FIntVector GetReturnValue() {
		return memory.read<struct FIntVector>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FNameMapping
{
public:
	FNameMapping(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetNodeName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetWorldLocationAtSplinePoint
{
public:
	FSetWorldLocationAtSplinePoint(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetPointIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct FVector GetInLocation() {
		return memory.read<struct FVector>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FSkelMeshComponentLODInfo
{
public:
	FSkelMeshComponentLODInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<bool> GetHiddenMaterials() {
		return memory.read<struct TArray<bool>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSkinWeightProfileManagerTickFunction
{
public:
	FSkinWeightProfileManagerTickFunction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FStartEnvelopeFollowing
{
public:
	FStartEnvelopeFollowing(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FFInterpEaseInOut
{
public:
	FFInterpEaseInOut(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetA() {
		return memory.read<float>(m_addr + 0);
	}
	float GetB() {
		return memory.read<float>(m_addr + 4);
	}
	float GetAlpha() {
		return memory.read<float>(m_addr + 8);
	}
	float GetExponent() {
		return memory.read<float>(m_addr + 12);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FTentDistribution
{
public:
	FTentDistribution(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetTipAltitude() {
		return memory.read<float>(m_addr + 0);
	}
	float GetTipValue() {
		return memory.read<float>(m_addr + 4);
	}
	float GetWidth() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FTextureFormatSettings
{
public:
	FTextureFormatSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class TextureCompressionSettings GetCompressionSettings() {
		return memory.read<enum class TextureCompressionSettings>(m_addr + 0);
	}
	char GetCompressionNoAlpha() {
		return memory.read<char>(m_addr + 1);
	}
	char GetCompressionNone() {
		return memory.read<char>(m_addr + 1);
	}
	char GetCompressionYCoCg() {
		return memory.read<char>(m_addr + 1);
	}
	char GetsRGB() {
		return memory.read<char>(m_addr + 1);
	}

private:
	std::uint64_t m_addr = 0;
};class FMakeDateTime
{
public:
	FMakeDateTime(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetYear() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetMonth() {
		return memory.read<int32_t>(m_addr + 4);
	}
	int32_t GetDay() {
		return memory.read<int32_t>(m_addr + 8);
	}
	int32_t GetHour() {
		return memory.read<int32_t>(m_addr + 12);
	}
	int32_t GetMinute() {
		return memory.read<int32_t>(m_addr + 16);
	}
	int32_t GetSecond() {
		return memory.read<int32_t>(m_addr + 20);
	}
	int32_t GetMillisecond() {
		return memory.read<int32_t>(m_addr + 24);
	}
	struct FDateTime GetReturnValue() {
		return memory.read<struct FDateTime>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FSoundAttenuationPluginSettings
{
public:
	FSoundAttenuationPluginSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct USpatializationPluginSourceSettingsBase> GetSpatializationPluginSettingsArray() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct TArray<struct USpatializationPluginSourceSettingsBase>(ptr_addr);
	}
	struct TArray<struct UOcclusionPluginSourceSettingsBase> GetOcclusionPluginSettingsArray() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct TArray<struct UOcclusionPluginSourceSettingsBase>(ptr_addr);
	}
	struct TArray<struct UReverbPluginSourceSettingsBase> GetReverbPluginSettingsArray() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 32);
		return struct TArray<struct UReverbPluginSourceSettingsBase>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSoundClassEditorData
{
public:
	FSoundClassEditorData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FSoundConcurrencySettings
{
public:
	FSoundConcurrencySettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetMaxCount() {
		return memory.read<int32_t>(m_addr + 0);
	}
	char GetbLimitToOwner() {
		return memory.read<char>(m_addr + 4);
	}
	enum class EMaxConcurrentResolutionRule GetResolutionRule() {
		return memory.read<enum class EMaxConcurrentResolutionRule>(m_addr + 8);
	}
	float GetRetriggerTime() {
		return memory.read<float>(m_addr + 12);
	}
	float GetVolumeScale() {
		return memory.read<float>(m_addr + 16);
	}
	enum class EConcurrencyVolumeScaleMode GetVolumeScaleMode() {
		return memory.read<enum class EConcurrencyVolumeScaleMode>(m_addr + 20);
	}
	float GetVolumeScaleAttackTime() {
		return memory.read<float>(m_addr + 24);
	}
	char GetbVolumeScaleCanRelease() {
		return memory.read<char>(m_addr + 28);
	}
	float GetVolumeScaleReleaseTime() {
		return memory.read<float>(m_addr + 32);
	}
	float GetVoiceStealReleaseTime() {
		return memory.read<float>(m_addr + 36);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetMaxElement
{
public:
	FGetMaxElement(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetA() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FSoundNodeEditorData
{
public:
	FSoundNodeEditorData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FFindPlayerStart
{
public:
	FFindPlayerStart(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AController GetPlayer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AController(ptr_addr);
	}
	struct FString GetIncomingName() {
		return memory.read<struct FString>(m_addr + 8);
	}
	struct AActor GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 24);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetAffectDynamicIndirectLighting
{
public:
	FSetAffectDynamicIndirectLighting(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbNewValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSourceEffectChainEntry
{
public:
	FSourceEffectChainEntry(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USoundEffectSourcePreset GetPreset() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct USoundEffectSourcePreset(ptr_addr);
	}
	char GetbBypass() {
		return memory.read<char>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSoundClassAdjuster
{
public:
	FSoundClassAdjuster(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USoundClass GetSoundClassObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct USoundClass(ptr_addr);
	}
	float GetVolumeAdjuster() {
		return memory.read<float>(m_addr + 8);
	}
	float GetPitchAdjuster() {
		return memory.read<float>(m_addr + 12);
	}
	float GetLowPassFilterFrequency() {
		return memory.read<float>(m_addr + 16);
	}
	char GetbApplyToChildren() {
		return memory.read<char>(m_addr + 20);
	}
	float GetVoiceCenterChannelVolumeAdjuster() {
		return memory.read<float>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FRemoveBlendable
{
public:
	FRemoveBlendable(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TScriptInterface<IBlendableInterface> GetInBlendableObject() {
		return memory.read<struct TScriptInterface<IBlendableInterface>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FBuildString_Int
{
public:
	FBuildString_Int(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetAppendTo() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FString GetPrefix() {
		return memory.read<struct FString>(m_addr + 16);
	}
	int32_t GetinInt() {
		return memory.read<int32_t>(m_addr + 32);
	}
	struct FString GetSuffix() {
		return memory.read<struct FString>(m_addr + 40);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetClothMaxDistanceScale
{
public:
	FSetClothMaxDistanceScale(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetScale() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSoundModulationDefaultRoutingSettings
{
public:
	FSoundModulationDefaultRoutingSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class EModulationRouting GetVolumeRouting() {
		return memory.read<enum class EModulationRouting>(m_addr + 64);
	}
	enum class EModulationRouting GetPitchRouting() {
		return memory.read<enum class EModulationRouting>(m_addr + 65);
	}
	enum class EModulationRouting GetHighpassRouting() {
		return memory.read<enum class EModulationRouting>(m_addr + 66);
	}
	enum class EModulationRouting GetLowpassRouting() {
		return memory.read<enum class EModulationRouting>(m_addr + 67);
	}

private:
	std::uint64_t m_addr = 0;
};class FDistanceDatum
{
public:
	FDistanceDatum(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetFadeInDistanceStart() {
		return memory.read<float>(m_addr + 0);
	}
	float GetFadeInDistanceEnd() {
		return memory.read<float>(m_addr + 4);
	}
	float GetFadeOutDistanceStart() {
		return memory.read<float>(m_addr + 8);
	}
	float GetFadeOutDistanceEnd() {
		return memory.read<float>(m_addr + 12);
	}
	float GetVolume() {
		return memory.read<float>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FModulatorContinuousParams
{
public:
	FModulatorContinuousParams(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetParameterName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	float GetDefault() {
		return memory.read<float>(m_addr + 8);
	}
	float GetMinInput() {
		return memory.read<float>(m_addr + 12);
	}
	float GetMaxInput() {
		return memory.read<float>(m_addr + 16);
	}
	float GetMinOutput() {
		return memory.read<float>(m_addr + 20);
	}
	float GetMaxOutput() {
		return memory.read<float>(m_addr + 24);
	}
	enum class ModulationParamMode GetParamMode() {
		return memory.read<enum class ModulationParamMode>(m_addr + 28);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetSubmixSendSettings
{
public:
	FSetSubmixSendSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FAudioVolumeSubmixSendSettings> GetNewSubmixSendSettings() {
		return memory.read<struct TArray<struct FAudioVolumeSubmixSendSettings>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSoundSubmixSpectralAnalysisBandSettings
{
public:
	FSoundSubmixSpectralAnalysisBandSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetBandFrequency() {
		return memory.read<float>(m_addr + 0);
	}
	int32_t GetAttackTimeMsec() {
		return memory.read<int32_t>(m_addr + 4);
	}
	int32_t GetReleaseTimeMsec() {
		return memory.read<int32_t>(m_addr + 8);
	}
	float GetQFactor() {
		return memory.read<float>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FSoundWaveSpectralTimeData
{
public:
	FSoundWaveSpectralTimeData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FSoundWaveSpectralDataEntry> GetData() {
		return memory.read<struct TArray<struct FSoundWaveSpectralDataEntry>>(m_addr + 0);
	}
	float GetTimeSec() {
		return memory.read<float>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSplineInstanceData
{
public:
	FSplineInstanceData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbSplineHasBeenEdited() {
		return memory.read<bool>(m_addr + 184);
	}
	struct FSplineCurves GetSplineCurves() {
		return memory.read<struct FSplineCurves>(m_addr + 192);
	}
	struct FSplineCurves GetSplineCurvesPreUCS() {
		return memory.read<struct FSplineCurves>(m_addr + 304);
	}

private:
	std::uint64_t m_addr = 0;
};class FSplineMeshInstanceData
{
public:
	FSplineMeshInstanceData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetStartPos() {
		return memory.read<struct FVector>(m_addr + 184);
	}
	struct FVector GetEndPos() {
		return memory.read<struct FVector>(m_addr + 196);
	}
	struct FVector GetStartTangent() {
		return memory.read<struct FVector>(m_addr + 208);
	}
	struct FVector GetEndTangent() {
		return memory.read<struct FVector>(m_addr + 220);
	}

private:
	std::uint64_t m_addr = 0;
};class FSplineMeshParams
{
public:
	FSplineMeshParams(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetStartPos() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetStartTangent() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	struct FVector2D GetStartScale() {
		return memory.read<struct FVector2D>(m_addr + 24);
	}
	float GetStartRoll() {
		return memory.read<float>(m_addr + 32);
	}
	struct FVector2D GetStartOffset() {
		return memory.read<struct FVector2D>(m_addr + 36);
	}
	struct FVector GetEndPos() {
		return memory.read<struct FVector>(m_addr + 44);
	}
	struct FVector2D GetEndScale() {
		return memory.read<struct FVector2D>(m_addr + 56);
	}
	struct FVector GetEndTangent() {
		return memory.read<struct FVector>(m_addr + 64);
	}
	float GetEndRoll() {
		return memory.read<float>(m_addr + 76);
	}
	struct FVector2D GetEndOffset() {
		return memory.read<struct FVector2D>(m_addr + 80);
	}

private:
	std::uint64_t m_addr = 0;
};class FMaterialRemapIndex
{
public:
	FMaterialRemapIndex(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint32_t GetImportVersionKey() {
		return memory.read<uint32_t>(m_addr + 0);
	}
	struct TArray<int32_t> GetMaterialRemap() {
		return memory.read<struct TArray<int32_t>>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FMeshSectionInfoMap
{
public:
	FMeshSectionInfoMap(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<uint32_t, struct FMeshSectionInfo> GetMap() {
		return memory.read<struct TMap<uint32_t, struct FMeshSectionInfo>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FStaticMeshSourceModel
{
public:
	FStaticMeshSourceModel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMeshBuildSettings GetBuildSettings() {
		return memory.read<struct FMeshBuildSettings>(m_addr + 0);
	}
	struct FMeshReductionSettings GetReductionSettings() {
		return memory.read<struct FMeshReductionSettings>(m_addr + 48);
	}
	float GetLODDistance() {
		return memory.read<float>(m_addr + 84);
	}
	struct FPerPlatformFloat GetScreenSize() {
		return memory.read<struct FPerPlatformFloat>(m_addr + 88);
	}
	struct FString GetSourceImportFilename() {
		return memory.read<struct FString>(m_addr + 96);
	}

private:
	std::uint64_t m_addr = 0;
};class FMatrix_GetFrustumLeftPlane
{
public:
	FMatrix_GetFrustumLeftPlane(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMatrix GetM() {
		return memory.read<struct FMatrix>(m_addr + 0);
	}
	struct FPlane GetOutPlane() {
		return memory.read<struct FPlane>(m_addr + 64);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 80);
	}

private:
	std::uint64_t m_addr = 0;
};class FStaticMeshComponentInstanceData
{
public:
	FStaticMeshComponentInstanceData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UStaticMesh GetStaticMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 256);
		return struct UStaticMesh(ptr_addr);
	}
	struct TArray<struct FStaticMeshVertexColorLODData> GetVertexColorLODs() {
		return memory.read<struct TArray<struct FStaticMeshVertexColorLODData>>(m_addr + 264);
	}
	struct TArray<struct FGuid> GetCachedStaticLighting() {
		return memory.read<struct TArray<struct FGuid>>(m_addr + 280);
	}
	struct TArray<struct FStreamingTextureBuildInfo> GetStreamingTextureData() {
		return memory.read<struct TArray<struct FStreamingTextureBuildInfo>>(m_addr + 296);
	}

private:
	std::uint64_t m_addr = 0;
};class FStreamingTextureBuildInfo
{
public:
	FStreamingTextureBuildInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	uint32_t GetPackedRelativeBox() {
		return memory.read<uint32_t>(m_addr + 0);
	}
	int32_t GetTextureLevelIndex() {
		return memory.read<int32_t>(m_addr + 4);
	}
	float GetTexelFactor() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FStaticParameterSet
{
public:
	FStaticParameterSet(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FStaticSwitchParameter> GetStaticSwitchParameters() {
		return memory.read<struct TArray<struct FStaticSwitchParameter>>(m_addr + 0);
	}
	struct TArray<struct FStaticComponentMaskParameter> GetStaticComponentMaskParameters() {
		return memory.read<struct TArray<struct FStaticComponentMaskParameter>>(m_addr + 16);
	}
	struct TArray<struct FStaticTerrainLayerWeightParameter> GetTerrainLayerWeightParameters() {
		return memory.read<struct TArray<struct FStaticTerrainLayerWeightParameter>>(m_addr + 32);
	}
	struct TArray<struct FStaticMaterialLayersParameter> GetMaterialLayersParameters() {
		return memory.read<struct TArray<struct FStaticMaterialLayersParameter>>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetCurrentTwist
{
public:
	FGetCurrentTwist(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FStaticParameterBase
{
public:
	FStaticParameterBase(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMaterialParameterInfo GetParameterInfo() {
		return memory.read<struct FMaterialParameterInfo>(m_addr + 0);
	}
	bool GetbOverride() {
		return memory.read<bool>(m_addr + 16);
	}
	struct FGuid GetExpressionGUID() {
		return memory.read<struct FGuid>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FStaticMaterialLayersParameter
{
public:
	FStaticMaterialLayersParameter(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMaterialLayersFunctions GetValue() {
		return memory.read<struct FMaterialLayersFunctions>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetUnfixedCameraPosition
{
public:
	FGetUnfixedCameraPosition(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FStaticComponentMaskParameter
{
public:
	FStaticComponentMaskParameter(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetR() {
		return memory.read<bool>(m_addr + 36);
	}
	bool GetG() {
		return memory.read<bool>(m_addr + 37);
	}
	bool GetB() {
		return memory.read<bool>(m_addr + 38);
	}
	bool GetA() {
		return memory.read<bool>(m_addr + 39);
	}

private:
	std::uint64_t m_addr = 0;
};class FStaticSwitchParameter
{
public:
	FStaticSwitchParameter(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetValue() {
		return memory.read<bool>(m_addr + 36);
	}

private:
	std::uint64_t m_addr = 0;
};class FSubsurfaceProfileStruct
{
public:
	FSubsurfaceProfileStruct(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLinearColor GetSurfaceAlbedo() {
		return memory.read<struct FLinearColor>(m_addr + 0);
	}
	struct FLinearColor GetMeanFreePathColor() {
		return memory.read<struct FLinearColor>(m_addr + 16);
	}
	float GetMeanFreePathDistance() {
		return memory.read<float>(m_addr + 32);
	}
	float GetWorldUnitScale() {
		return memory.read<float>(m_addr + 36);
	}
	bool GetbEnableBurley() {
		return memory.read<bool>(m_addr + 40);
	}
	float GetScatterRadius() {
		return memory.read<float>(m_addr + 44);
	}
	struct FLinearColor GetSubsurfaceColor() {
		return memory.read<struct FLinearColor>(m_addr + 48);
	}
	struct FLinearColor GetFalloffColor() {
		return memory.read<struct FLinearColor>(m_addr + 64);
	}
	struct FLinearColor GetBoundaryColorBleed() {
		return memory.read<struct FLinearColor>(m_addr + 80);
	}
	float GetExtinctionScale() {
		return memory.read<float>(m_addr + 96);
	}
	float GetNormalScale() {
		return memory.read<float>(m_addr + 100);
	}
	float GetScatteringDistribution() {
		return memory.read<float>(m_addr + 104);
	}
	float GetIOR() {
		return memory.read<float>(m_addr + 108);
	}
	float GetRoughness0() {
		return memory.read<float>(m_addr + 112);
	}
	float GetRoughness1() {
		return memory.read<float>(m_addr + 116);
	}
	float GetLobeMix() {
		return memory.read<float>(m_addr + 120);
	}
	struct FLinearColor GetTransmissionTintColor() {
		return memory.read<struct FLinearColor>(m_addr + 124);
	}

private:
	std::uint64_t m_addr = 0;
};class FCancelLocalNotification
{
public:
	FCancelLocalNotification(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetActivationEvent() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FTextureSource
{
public:
	FTextureSource(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FLinearColor_GetLuminance
{
public:
	FLinearColor_GetLuminance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLinearColor GetInColor() {
		return memory.read<struct FLinearColor>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FTextureLODGroup
{
public:
	FTextureLODGroup(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class TextureGroup GetGroup() {
		return memory.read<enum class TextureGroup>(m_addr + 0);
	}
	int32_t GetLODBias() {
		return memory.read<int32_t>(m_addr + 12);
	}
	int32_t GetPackagingLODBias() {
		return memory.read<int32_t>(m_addr + 16);
	}
	int32_t GetLODBias_Smaller() {
		return memory.read<int32_t>(m_addr + 20);
	}
	int32_t GetLODBias_Smallest() {
		return memory.read<int32_t>(m_addr + 24);
	}
	int32_t GetNumStreamedMips() {
		return memory.read<int32_t>(m_addr + 32);
	}
	enum class TextureMipGenSettings GetMipGenSettings() {
		return memory.read<enum class TextureMipGenSettings>(m_addr + 36);
	}
	int32_t GetMinLODSize() {
		return memory.read<int32_t>(m_addr + 40);
	}
	int32_t GetMaxLODSize() {
		return memory.read<int32_t>(m_addr + 44);
	}
	int32_t GetMaxLODSize_Smaller() {
		return memory.read<int32_t>(m_addr + 48);
	}
	int32_t GetMaxLODSize_Smallest() {
		return memory.read<int32_t>(m_addr + 52);
	}
	int32_t GetOptionalLODBias() {
		return memory.read<int32_t>(m_addr + 56);
	}
	int32_t GetOptionalMaxLODSize() {
		return memory.read<int32_t>(m_addr + 60);
	}
	struct FName GetMinMagFilter() {
		return memory.read<struct FName>(m_addr + 68);
	}
	struct FName GetMipFilter() {
		return memory.read<struct FName>(m_addr + 76);
	}
	enum class ETextureMipLoadOptions GetMipLoadOptions() {
		return memory.read<enum class ETextureMipLoadOptions>(m_addr + 84);
	}
	bool GetHighPriorityLoad() {
		return memory.read<bool>(m_addr + 85);
	}
	bool GetDuplicateNonOptionalMips() {
		return memory.read<bool>(m_addr + 86);
	}
	float GetDownscale() {
		return memory.read<float>(m_addr + 88);
	}
	enum class ETextureDownscaleOptions GetDownscaleOptions() {
		return memory.read<enum class ETextureDownscaleOptions>(m_addr + 92);
	}
	int32_t GetVirtualTextureTileCountBias() {
		return memory.read<int32_t>(m_addr + 96);
	}
	int32_t GetVirtualTextureTileSizeBias() {
		return memory.read<int32_t>(m_addr + 100);
	}
	enum class ETextureLossyCompressionAmount GetLossyCompressionAmount() {
		return memory.read<enum class ETextureLossyCompressionAmount>(m_addr + 104);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsMoveInputIgnored
{
public:
	FIsMoveInputIgnored(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetInputVectorKeyState
{
public:
	FGetInputVectorKeyState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKey GetKey() {
		return memory.read<struct FKey>(m_addr + 0);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FSpawnEmitterAttached
{
public:
	FSpawnEmitterAttached(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UParticleSystem GetEmitterTemplate() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UParticleSystem(ptr_addr);
	}
	struct USceneComponent GetAttachToComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct USceneComponent(ptr_addr);
	}
	struct FName GetAttachPointName() {
		return memory.read<struct FName>(m_addr + 16);
	}
	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 24);
	}
	struct FRotator GetRotation() {
		return memory.read<struct FRotator>(m_addr + 36);
	}
	struct FVector GetScale() {
		return memory.read<struct FVector>(m_addr + 48);
	}
	enum class EAttachLocation GetLocationType() {
		return memory.read<enum class EAttachLocation>(m_addr + 60);
	}
	bool GetbAutoDestroy() {
		return memory.read<bool>(m_addr + 61);
	}
	enum class EPSCPoolMethod GetPoolingMethod() {
		return memory.read<enum class EPSCPoolMethod>(m_addr + 62);
	}
	bool GetbAutoActivate() {
		return memory.read<bool>(m_addr + 63);
	}
	struct UParticleSystemComponent GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 64);
		return struct UParticleSystemComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSpawnDialogueAttached
{
public:
	FSpawnDialogueAttached(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UDialogueWave GetDialogue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UDialogueWave(ptr_addr);
	}
	struct FDialogueContext GetContext() {
		return memory.read<struct FDialogueContext>(m_addr + 8);
	}
	struct USceneComponent GetAttachToComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 32);
		return struct USceneComponent(ptr_addr);
	}
	struct FName GetAttachPointName() {
		return memory.read<struct FName>(m_addr + 40);
	}
	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 48);
	}
	struct FRotator GetRotation() {
		return memory.read<struct FRotator>(m_addr + 60);
	}
	enum class EAttachLocation GetLocationType() {
		return memory.read<enum class EAttachLocation>(m_addr + 72);
	}
	bool GetbStopWhenAttachedToDestroyed() {
		return memory.read<bool>(m_addr + 73);
	}
	float GetVolumeMultiplier() {
		return memory.read<float>(m_addr + 76);
	}
	float GetPitchMultiplier() {
		return memory.read<float>(m_addr + 80);
	}
	float GetStartTime() {
		return memory.read<float>(m_addr + 84);
	}
	struct USoundAttenuation GetAttenuationSettings() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 88);
		return struct USoundAttenuation(ptr_addr);
	}
	bool GetbAutoDestroy() {
		return memory.read<bool>(m_addr + 96);
	}
	struct UAudioComponent GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 104);
		return struct UAudioComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FTimeline
{
public:
	FTimeline(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class ETimelineLengthMode GetLengthMode() {
		return memory.read<enum class ETimelineLengthMode>(m_addr + 0);
	}
	char GetbLooping() {
		return memory.read<char>(m_addr + 1);
	}
	char GetbReversePlayback() {
		return memory.read<char>(m_addr + 1);
	}
	char GetbPlaying() {
		return memory.read<char>(m_addr + 1);
	}
	float GetLength() {
		return memory.read<float>(m_addr + 4);
	}
	float GetPlayRate() {
		return memory.read<float>(m_addr + 8);
	}
	float Getposition() {
		return memory.read<float>(m_addr + 12);
	}
	struct TArray<struct FTimelineEventEntry> Getevents() {
		return memory.read<struct TArray<struct FTimelineEventEntry>>(m_addr + 16);
	}
	struct TArray<struct FTimelineVectorTrack> GetInterpVectors() {
		return memory.read<struct TArray<struct FTimelineVectorTrack>>(m_addr + 32);
	}
	struct TArray<struct FTimelineFloatTrack> GetInterpFloats() {
		return memory.read<struct TArray<struct FTimelineFloatTrack>>(m_addr + 48);
	}
	struct TArray<struct FTimelineLinearColorTrack> GetInterpLinearColors() {
		return memory.read<struct TArray<struct FTimelineLinearColorTrack>>(m_addr + 64);
	}
	struct FDelegate GetTimelinePostUpdateFunc() {
		return memory.read<struct FDelegate>(m_addr + 80);
	}
	struct FDelegate GetTimelineFinishedFunc() {
		return memory.read<struct FDelegate>(m_addr + 96);
	}
	struct TWeakObjectPtr<UObject> GetPropertySetObject() {
		return memory.read<struct TWeakObjectPtr<UObject>>(m_addr + 112);
	}
	struct FName GetDirectionPropertyName() {
		return memory.read<struct FName>(m_addr + 120);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetInstanceTransitionTimeElapsed
{
public:
	FGetInstanceTransitionTimeElapsed(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetMachineIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetTransitionIndex() {
		return memory.read<int32_t>(m_addr + 4);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FDegAcos
{
public:
	FDegAcos(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetA() {
		return memory.read<float>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetSoundClassDistanceScale
{
public:
	FSetSoundClassDistanceScale(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct USoundClass GetSoundClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct USoundClass(ptr_addr);
	}
	float GetDistanceAttenuationScale() {
		return memory.read<float>(m_addr + 16);
	}
	float GetTimeSec() {
		return memory.read<float>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FTimelineLinearColorTrack
{
public:
	FTimelineLinearColorTrack(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UCurveLinearColor GetLinearColorCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UCurveLinearColor(ptr_addr);
	}
	struct FDelegate GetInterpFunc() {
		return memory.read<struct FDelegate>(m_addr + 8);
	}
	struct FName GetTrackName() {
		return memory.read<struct FName>(m_addr + 24);
	}
	struct FName GetLinearColorPropertyName() {
		return memory.read<struct FName>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetInputKeyTimeDown
{
public:
	FGetInputKeyTimeDown(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKey GetKey() {
		return memory.read<struct FKey>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FAddRollInput
{
public:
	FAddRollInput(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetVal() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FTimelineFloatTrack
{
public:
	FTimelineFloatTrack(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UCurveFloat GetFloatCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UCurveFloat(ptr_addr);
	}
	struct FDelegate GetInterpFunc() {
		return memory.read<struct FDelegate>(m_addr + 8);
	}
	struct FName GetTrackName() {
		return memory.read<struct FName>(m_addr + 24);
	}
	struct FName GetFloatPropertyName() {
		return memory.read<struct FName>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FTimelineVectorTrack
{
public:
	FTimelineVectorTrack(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UCurveVector GetVectorCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UCurveVector(ptr_addr);
	}
	struct FDelegate GetInterpFunc() {
		return memory.read<struct FDelegate>(m_addr + 8);
	}
	struct FName GetTrackName() {
		return memory.read<struct FName>(m_addr + 24);
	}
	struct FName GetVectorPropertyName() {
		return memory.read<struct FName>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetSkeletalCenterOfMass
{
public:
	FGetSkeletalCenterOfMass(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetSplineUpDir
{
public:
	FGetSplineUpDir(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetViewProjectionMatrix
{
public:
	FGetViewProjectionMatrix(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMinimalViewInfo GetDesiredView() {
		return memory.read<struct FMinimalViewInfo>(m_addr + 0);
	}
	struct FMatrix GetViewMatrix() {
		return memory.read<struct FMatrix>(m_addr + 1648);
	}
	struct FMatrix GetProjectionMatrix() {
		return memory.read<struct FMatrix>(m_addr + 1712);
	}
	struct FMatrix GetViewProjectionMatrix() {
		return memory.read<struct FMatrix>(m_addr + 1776);
	}

private:
	std::uint64_t m_addr = 0;
};class FClientStopForceFeedback
{
public:
	FClientStopForceFeedback(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UForceFeedbackEffect GetForceFeedbackEffect() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UForceFeedbackEffect(ptr_addr);
	}
	struct FName GetTag() {
		return memory.read<struct FName>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FTimelineEventEntry
{
public:
	FTimelineEventEntry(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetTime() {
		return memory.read<float>(m_addr + 0);
	}
	struct FDelegate GetEventFunc() {
		return memory.read<struct FDelegate>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FTTTrackBase
{
public:
	FTTTrackBase(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetTrackName() {
		return memory.read<struct FName>(m_addr + 8);
	}
	bool GetbIsExternalCurve() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FTTLinearColorTrack
{
public:
	FTTLinearColorTrack(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UCurveLinearColor GetCurveLinearColor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 32);
		return struct UCurveLinearColor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetNoSkinning
{
public:
	FSetNoSkinning(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbNewValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FTTFloatTrack
{
public:
	FTTFloatTrack(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UCurveFloat GetCurveFloat() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 32);
		return struct UCurveFloat(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FTTEventTrack
{
public:
	FTTEventTrack(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetFunctionName() {
		return memory.read<struct FName>(m_addr + 24);
	}
	struct UCurveFloat GetCurveKeys() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 32);
		return struct UCurveFloat(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FMatrix_RemoveTranslation
{
public:
	FMatrix_RemoveTranslation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMatrix GetM() {
		return memory.read<struct FMatrix>(m_addr + 0);
	}
	struct FMatrix GetReturnValue() {
		return memory.read<struct FMatrix>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};class FTimeStretchCurve
{
public:
	FTimeStretchCurve(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetSamplingRate() {
		return memory.read<float>(m_addr + 0);
	}
	float GetCurveValueMinPrecision() {
		return memory.read<float>(m_addr + 4);
	}
	struct TArray<struct FTimeStretchCurveMarker> GetMarkers() {
		return memory.read<struct TArray<struct FTimeStretchCurveMarker>>(m_addr + 8);
	}
	float GetSum_dT_i_by_C_i[3]() {
		return memory.read<float>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetDefaultAnimatingRig
{
public:
	FSetDefaultAnimatingRig(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftObjectPtr<UObject> GetInAnimatingRig() {
		return memory.read<struct TSoftObjectPtr<UObject>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetEnumeratorName
{
public:
	FGetEnumeratorName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UEnum GetEnum() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UEnum(ptr_addr);
	}
	char GetEnumeratorValue() {
		return memory.read<char>(m_addr + 8);
	}
	struct FName GetReturnValue() {
		return memory.read<struct FName>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FTimeStretchCurveMarker
{
public:
	FTimeStretchCurveMarker(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetTime[3]() {
		return memory.read<float>(m_addr + 0);
	}
	float GetAlpha() {
		return memory.read<float>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_GetModifiedMaxAcceleration
{
public:
	FK2_GetModifiedMaxAcceleration(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FTouchInputControl
{
public:
	FTouchInputControl(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTexture2D GetImage1() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UTexture2D(ptr_addr);
	}
	struct UTexture2D GetImage2() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UTexture2D(ptr_addr);
	}
	struct FVector2D GetCenter() {
		return memory.read<struct FVector2D>(m_addr + 16);
	}
	struct FVector2D GetVisualSize() {
		return memory.read<struct FVector2D>(m_addr + 24);
	}
	struct FVector2D GetThumbSize() {
		return memory.read<struct FVector2D>(m_addr + 32);
	}
	struct FVector2D GetInteractionSize() {
		return memory.read<struct FVector2D>(m_addr + 40);
	}
	struct FVector2D GetInputScale() {
		return memory.read<struct FVector2D>(m_addr + 48);
	}
	struct FKey GetMainInputKey() {
		return memory.read<struct FKey>(m_addr + 56);
	}
	struct FKey GetAltInputKey() {
		return memory.read<struct FKey>(m_addr + 80);
	}

private:
	std::uint64_t m_addr = 0;
};class FLevelCollection
{
public:
	FLevelCollection(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AGameStateBase GetGameState() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AGameStateBase(ptr_addr);
	}
	struct UNetDriver GetNetDriver() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UNetDriver(ptr_addr);
	}
	struct UDemoNetDriver GetDemoNetDriver() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 24);
		return struct UDemoNetDriver(ptr_addr);
	}
	struct ULevel GetPersistentLevel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 32);
		return struct ULevel(ptr_addr);
	}
	struct TSet<struct ULevel> GetLevels() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct TSet<struct ULevel>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FUpdateLevelVisibilityLevelInfo
{
public:
	FUpdateLevelVisibilityLevelInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetPackageName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FName GetFilename() {
		return memory.read<struct FName>(m_addr + 8);
	}
	char GetbIsVisible() {
		return memory.read<char>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsBotControlled
{
public:
	FIsBotControlled(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FEqualExactly_VectorVector
{
public:
	FEqualExactly_VectorVector(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetA() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetB() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FStreamingLevelsToConsider
{
public:
	FStreamingLevelsToConsider(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct ULevelStreaming> GetStreamingLevels() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct TArray<struct ULevelStreaming>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FEndPhysicsTickFunction
{
public:
	FEndPhysicsTickFunction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FSetCastRaytracedShadow
{
public:
	FSetCastRaytracedShadow(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbNewValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FVector4_NormalUnsafe3
{
public:
	FVector4_NormalUnsafe3(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector4 GetA() {
		return memory.read<struct FVector4>(m_addr + 0);
	}
	struct FVector4 GetReturnValue() {
		return memory.read<struct FVector4>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FDivide_Vector4Vector4
{
public:
	FDivide_Vector4Vector4(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector4 GetA() {
		return memory.read<struct FVector4>(m_addr + 0);
	}
	struct FVector4 GetB() {
		return memory.read<struct FVector4>(m_addr + 16);
	}
	struct FVector4 GetReturnValue() {
		return memory.read<struct FVector4>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FStartPhysicsTickFunction
{
public:
	FStartPhysicsTickFunction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};class FEngineSavedDir
{
public:
	FEngineSavedDir(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FWorldPSCPool
{
public:
	FWorldPSCPool(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<struct UParticleSystem, struct FPSCPool> GetWorldParticleSystemPools() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct TMap<struct UParticleSystem, struct FPSCPool>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FHierarchicalSimplification
{
public:
	FHierarchicalSimplification(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetTransitionScreenSize() {
		return memory.read<float>(m_addr + 0);
	}
	float GetOverrideDrawDistance() {
		return memory.read<float>(m_addr + 4);
	}
	char GetbUseOverrideDrawDistance() {
		return memory.read<char>(m_addr + 8);
	}
	char GetbAllowSpecificExclusion() {
		return memory.read<char>(m_addr + 8);
	}
	char GetbSimplifyMesh() {
		return memory.read<char>(m_addr + 8);
	}
	char GetbOnlyGenerateClustersForVolumes() {
		return memory.read<char>(m_addr + 8);
	}
	char GetbReusePreviousLevelClusters() {
		return memory.read<char>(m_addr + 8);
	}
	struct FMeshProxySettings GetProxySetting() {
		return memory.read<struct FMeshProxySettings>(m_addr + 12);
	}
	struct FMeshMergingSettings GetMergeSetting() {
		return memory.read<struct FMeshMergingSettings>(m_addr + 188);
	}
	float GetDesiredBoundRadius() {
		return memory.read<float>(m_addr + 356);
	}
	float GetDesiredFillingPercentage() {
		return memory.read<float>(m_addr + 360);
	}
	int32_t GetMinNumberOfActorsToBuild() {
		return memory.read<int32_t>(m_addr + 364);
	}

private:
	std::uint64_t m_addr = 0;
};class FPointerEvent_GetLastScreenSpacePosition
{
public:
	FPointerEvent_GetLastScreenSpacePosition(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FPointerEvent GetInput() {
		return memory.read<struct FPointerEvent>(m_addr + 0);
	}
	struct FVector2D GetReturnValue() {
		return memory.read<struct FVector2D>(m_addr + 112);
	}

private:
	std::uint64_t m_addr = 0;
};class FServerExecRPC
{
public:
	FServerExecRPC(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetMsg() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetAngularDriveMode
{
public:
	FSetAngularDriveMode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class EAngularDriveMode GetDriveMode() {
		return memory.read<enum class EAngularDriveMode>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FApplyPointDamage
{
public:
	FApplyPointDamage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetDamagedActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}
	float GetBaseDamage() {
		return memory.read<float>(m_addr + 8);
	}
	struct FVector GetHitFromDirection() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	struct FHitResult GetHitInfo() {
		return memory.read<struct FHitResult>(m_addr + 24);
	}
	struct AController GetEventInstigator() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 160);
		return struct AController(ptr_addr);
	}
	struct AActor GetDamageCauser() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 168);
		return struct AActor(ptr_addr);
	}
	UDamageType GetDamageTypeClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 176);
		return UDamageType(ptr_addr);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 184);
	}

private:
	std::uint64_t m_addr = 0;
};class FNetViewer
{
public:
	FNetViewer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UNetConnection GetConnection() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UNetConnection(ptr_addr);
	}
	struct AActor GetInViewer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AActor(ptr_addr);
	}
	struct AActor GetViewTarget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct AActor(ptr_addr);
	}
	struct FVector GetViewLocation() {
		return memory.read<struct FVector>(m_addr + 24);
	}
	struct FVector GetViewDir() {
		return memory.read<struct FVector>(m_addr + 36);
	}

private:
	std::uint64_t m_addr = 0;
};class FGreaterEqual_ByteByte
{
public:
	FGreaterEqual_ByteByte(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	char GetA() {
		return memory.read<char>(m_addr + 0);
	}
	char GetB() {
		return memory.read<char>(m_addr + 1);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 2);
	}

private:
	std::uint64_t m_addr = 0;
};class FLightmassWorldInfoSettings
{
public:
	FLightmassWorldInfoSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetStaticLightingLevelScale() {
		return memory.read<float>(m_addr + 0);
	}
	int32_t GetNumIndirectLightingBounces() {
		return memory.read<int32_t>(m_addr + 4);
	}
	int32_t GetNumSkyLightingBounces() {
		return memory.read<int32_t>(m_addr + 8);
	}
	float GetIndirectLightingQuality() {
		return memory.read<float>(m_addr + 12);
	}
	float GetIndirectLightingSmoothness() {
		return memory.read<float>(m_addr + 16);
	}
	struct FColor GetEnvironmentColor() {
		return memory.read<struct FColor>(m_addr + 20);
	}
	float GetEnvironmentIntensity() {
		return memory.read<float>(m_addr + 24);
	}
	float GetEmissiveBoost() {
		return memory.read<float>(m_addr + 28);
	}
	float GetDiffuseBoost() {
		return memory.read<float>(m_addr + 32);
	}
	enum class EVolumeLightingMethod GetVolumeLightingMethod() {
		return memory.read<enum class EVolumeLightingMethod>(m_addr + 36);
	}
	char GetbUseAmbientOcclusion() {
		return memory.read<char>(m_addr + 37);
	}
	char GetbGenerateAmbientOcclusionMaterialMask() {
		return memory.read<char>(m_addr + 37);
	}
	char GetbVisualizeMaterialDiffuse() {
		return memory.read<char>(m_addr + 37);
	}
	char GetbVisualizeAmbientOcclusion() {
		return memory.read<char>(m_addr + 37);
	}
	char GetbCompressLightmaps() {
		return memory.read<char>(m_addr + 37);
	}
	float GetVolumetricLightmapDetailCellSize() {
		return memory.read<float>(m_addr + 40);
	}
	float GetVolumetricLightmapMaximumBrickMemoryMb() {
		return memory.read<float>(m_addr + 44);
	}
	float GetVolumetricLightmapSphericalHarmonicSmoothing() {
		return memory.read<float>(m_addr + 48);
	}
	float GetVolumeLightSamplePlacementScale() {
		return memory.read<float>(m_addr + 52);
	}
	char GetbUseVolumeLightSampleRayTest() {
		return memory.read<char>(m_addr + 56);
	}
	float GetDirectIlluminationOcclusionFraction() {
		return memory.read<float>(m_addr + 60);
	}
	float GetIndirectIlluminationOcclusionFraction() {
		return memory.read<float>(m_addr + 64);
	}
	float GetOcclusionExponent() {
		return memory.read<float>(m_addr + 68);
	}
	float GetFullyOccludedSamplesFraction() {
		return memory.read<float>(m_addr + 72);
	}
	float GetMaxOcclusionDistance() {
		return memory.read<float>(m_addr + 76);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetEditorLocalizationPaths
{
public:
	FGetEditorLocalizationPaths(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FString> GetReturnValue() {
		return memory.read<struct TArray<struct FString>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetSyncInterval
{
public:
	FGetSyncInterval(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetAutoAttachmentParameters
{
public:
	FSetAutoAttachmentParameters(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USceneComponent GetParent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct USceneComponent(ptr_addr);
	}
	struct FName GetSocketName() {
		return memory.read<struct FName>(m_addr + 8);
	}
	enum class EAttachmentRule GetLocationRule() {
		return memory.read<enum class EAttachmentRule>(m_addr + 16);
	}
	enum class EAttachmentRule GetRotationRule() {
		return memory.read<enum class EAttachmentRule>(m_addr + 17);
	}
	enum class EAttachmentRule GetScaleRule() {
		return memory.read<enum class EAttachmentRule>(m_addr + 18);
	}

private:
	std::uint64_t m_addr = 0;
};class FSwitchLevel
{
public:
	FSwitchLevel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetURL() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetBoolParameter
{
public:
	FSetBoolParameter(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetInName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	bool GetInBool() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetBeamTargetStrength
{
public:
	FGetBeamTargetStrength(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetEmitterIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetTargetIndex() {
		return memory.read<int32_t>(m_addr + 4);
	}
	float GetOutTargetStrength() {
		return memory.read<float>(m_addr + 8);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FSet_Remove
{
public:
	FSet_Remove(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSet<int32_t> GetTargetSet() {
		return memory.read<struct TSet<int32_t>>(m_addr + 0);
	}
	int32_t GetItem() {
		return memory.read<int32_t>(m_addr + 80);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 84);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetEmitterEnable
{
public:
	FSetEmitterEnable(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetEmitterName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	bool GetbNewEnableState() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetFloatParameter
{
public:
	FSetFloatParameter(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetParameterName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	float GetParam() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetIntParameter
{
public:
	FSetIntParameter(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetInName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	int32_t GetinInt() {
		return memory.read<int32_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetRootShakePattern
{
public:
	FSetRootShakePattern(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UCameraShakePattern GetInPattern() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UCameraShakePattern(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetVectorParameter
{
public:
	FSetVectorParameter(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetParameterName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FVector GetParam() {
		return memory.read<struct FVector>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FReceived_NotifyBegin
{
public:
	FReceived_NotifyBegin(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USkeletalMeshComponent GetMeshComp() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct USkeletalMeshComponent(ptr_addr);
	}
	struct UAnimSequenceBase GetAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UAnimSequenceBase(ptr_addr);
	}
	float GetTotalDuration() {
		return memory.read<float>(m_addr + 16);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FReceived_NotifyEnd
{
public:
	FReceived_NotifyEnd(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USkeletalMeshComponent GetMeshComp() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct USkeletalMeshComponent(ptr_addr);
	}
	struct UAnimSequenceBase GetAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UAnimSequenceBase(ptr_addr);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FClearVertexColorOverride
{
public:
	FClearVertexColorOverride(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetLODIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FChangeName
{
public:
	FChangeName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AController GetController() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AController(ptr_addr);
	}
	struct FString GetNewName() {
		return memory.read<struct FString>(m_addr + 8);
	}
	bool GetbNameChange() {
		return memory.read<bool>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetSkyLuminanceFactor
{
public:
	FSetSkyLuminanceFactor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLinearColor GetNewValue() {
		return memory.read<struct FLinearColor>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FConv_StringToVector2D
{
public:
	FConv_StringToVector2D(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetinString() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FVector2D GetOutConvertedVector2D() {
		return memory.read<struct FVector2D>(m_addr + 16);
	}
	bool GetOutIsValid() {
		return memory.read<bool>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetQualifiedFrameTime
{
public:
	FGetQualifiedFrameTime(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FQualifiedFrameTime GetReturnValue() {
		return memory.read<struct FQualifiedFrameTime>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetMetaDataIdsFromStringTableEntry
{
public:
	FGetMetaDataIdsFromStringTableEntry(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetTableId() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FString GetKey() {
		return memory.read<struct FString>(m_addr + 8);
	}
	struct TArray<struct FName> GetReturnValue() {
		return memory.read<struct TArray<struct FName>>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetDefaultPawnClassForController
{
public:
	FGetDefaultPawnClassForController(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AController GetInController() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AController(ptr_addr);
	}
	UObject GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return UObject(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FHandleStartingNewPlayer
{
public:
	FHandleStartingNewPlayer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APlayerController GetNewPlayer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APlayerController(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetMaxBrakingDeceleration
{
public:
	FGetMaxBrakingDeceleration(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FShowAllMaterialSections
{
public:
	FShowAllMaterialSections(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetLODIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FHasMatchEnded
{
public:
	FHasMatchEnded(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FHasMatchStarted
{
public:
	FHasMatchStarted(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FInitializeHUDForPlayer
{
public:
	FInitializeHUDForPlayer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APlayerController GetNewPlayer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APlayerController(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FInitStartSpot
{
public:
	FInitStartSpot(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetStartSpot() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}
	struct AController GetNewPlayer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AController(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FServerMoveDualHybridRootMotion
{
public:
	FServerMoveDualHybridRootMotion(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetTimeStamp0() {
		return memory.read<float>(m_addr + 0);
	}
	struct FVector_NetQuantize10 GetInAccel0() {
		return memory.read<struct FVector_NetQuantize10>(m_addr + 4);
	}
	char GetPendingFlags() {
		return memory.read<char>(m_addr + 16);
	}
	uint32_t GetView0() {
		return memory.read<uint32_t>(m_addr + 20);
	}
	float GetTimestamp() {
		return memory.read<float>(m_addr + 24);
	}
	struct FVector_NetQuantize10 GetInAccel() {
		return memory.read<struct FVector_NetQuantize10>(m_addr + 28);
	}
	struct FVector_NetQuantize100 GetClientLoc() {
		return memory.read<struct FVector_NetQuantize100>(m_addr + 40);
	}
	char GetNewFlags() {
		return memory.read<char>(m_addr + 52);
	}
	char GetClientRoll() {
		return memory.read<char>(m_addr + 53);
	}
	uint32_t GetView() {
		return memory.read<uint32_t>(m_addr + 56);
	}
	struct UPrimitiveComponent GetClientMovementBase() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 64);
		return struct UPrimitiveComponent(ptr_addr);
	}
	struct FName GetClientBaseBoneName() {
		return memory.read<struct FName>(m_addr + 72);
	}
	char GetClientMovementMode() {
		return memory.read<char>(m_addr + 80);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_FindPlayerStart
{
public:
	FK2_FindPlayerStart(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AController GetPlayer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AController(ptr_addr);
	}
	struct FString GetIncomingName() {
		return memory.read<struct FString>(m_addr + 8);
	}
	struct AActor GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 24);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_OnRestartPlayer
{
public:
	FK2_OnRestartPlayer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AController GetNewPlayer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AController(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FFFloor
{
public:
	FFFloor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetA() {
		return memory.read<float>(m_addr + 0);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FRestartPlayer
{
public:
	FRestartPlayer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AController GetNewPlayer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AController(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetFloatAttribute
{
public:
	FGetFloatAttribute(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FName GetAttributeName() {
		return memory.read<struct FName>(m_addr + 8);
	}
	float GetDefaultValue() {
		return memory.read<float>(m_addr + 16);
	}
	float GetOutValue() {
		return memory.read<float>(m_addr + 20);
	}
	enum class ECustomBoneAttributeLookup GetLookupType() {
		return memory.read<enum class ECustomBoneAttributeLookup>(m_addr + 24);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 25);
	}

private:
	std::uint64_t m_addr = 0;
};class FRestartPlayerAtPlayerStart
{
public:
	FRestartPlayerAtPlayerStart(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AController GetNewPlayer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AController(ptr_addr);
	}
	struct AActor GetStartSpot() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetBrightness
{
public:
	FSetBrightness(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewBrightness() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FRestartPlayerAtTransform
{
public:
	FRestartPlayerAtTransform(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AController GetNewPlayer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AController(ptr_addr);
	}
	struct FTransform GetSpawnTransform() {
		return memory.read<struct FTransform>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FShouldReset
{
public:
	FShouldReset(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetActorToReset() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSpawnDefaultPawnAtTransform
{
public:
	FSpawnDefaultPawnAtTransform(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AController GetNewPlayer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AController(ptr_addr);
	}
	struct FTransform GetSpawnTransform() {
		return memory.read<struct FTransform>(m_addr + 16);
	}
	struct APawn GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 64);
		return struct APawn(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSpawnDefaultPawnFor
{
public:
	FSpawnDefaultPawnFor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AController GetNewPlayer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AController(ptr_addr);
	}
	struct AActor GetStartSpot() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AActor(ptr_addr);
	}
	struct APawn GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct APawn(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FDegAtan
{
public:
	FDegAtan(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetA() {
		return memory.read<float>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FAddControllerRollInput
{
public:
	FAddControllerRollInput(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetVal() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FConsumeMovementInputVector
{
public:
	FConsumeMovementInputVector(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FMakeTransform
{
public:
	FMakeTransform(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FRotator GetRotation() {
		return memory.read<struct FRotator>(m_addr + 12);
	}
	struct FVector GetScale() {
		return memory.read<struct FVector>(m_addr + 24);
	}
	struct FTransform GetReturnValue() {
		return memory.read<struct FTransform>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetAtmosphereSunLight
{
public:
	FSetAtmosphereSunLight(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbNewValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetBaseAimRotation
{
public:
	FGetBaseAimRotation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRotator GetReturnValue() {
		return memory.read<struct FRotator>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetController
{
public:
	FGetController(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AController GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AController(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetMovementBaseActor
{
public:
	FGetMovementBaseActor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APawn GetPawn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APawn(ptr_addr);
	}
	struct AActor GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FAdd_TimespanTimespan
{
public:
	FAdd_TimespanTimespan(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTimespan GetA() {
		return memory.read<struct FTimespan>(m_addr + 0);
	}
	struct FTimespan GetB() {
		return memory.read<struct FTimespan>(m_addr + 8);
	}
	struct FTimespan GetReturnValue() {
		return memory.read<struct FTimespan>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetMovementComponent
{
public:
	FGetMovementComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPawnMovementComponent GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UPawnMovementComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetFadeStartDelay
{
public:
	FGetFadeStartDelay(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSelectRotator
{
public:
	FSelectRotator(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRotator GetA() {
		return memory.read<struct FRotator>(m_addr + 0);
	}
	struct FRotator GetB() {
		return memory.read<struct FRotator>(m_addr + 12);
	}
	bool GetbPickA() {
		return memory.read<bool>(m_addr + 24);
	}
	struct FRotator GetReturnValue() {
		return memory.read<struct FRotator>(m_addr + 28);
	}

private:
	std::uint64_t m_addr = 0;
};class FQuat_Size
{
public:
	FQuat_Size(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FQuat GetQ() {
		return memory.read<struct FQuat>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FConv_IntToFloat
{
public:
	FConv_IntToFloat(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetinInt() {
		return memory.read<int32_t>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetNavAgentLocation
{
public:
	FGetNavAgentLocation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetPendingMovementInputVector
{
public:
	FGetPendingMovementInputVector(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetSelectedActor
{
public:
	FGetSelectedActor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsControlled
{
public:
	FIsControlled(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsLocallyControlled
{
public:
	FIsLocallyControlled(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetIntegerAttribute
{
public:
	FGetIntegerAttribute(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FName GetAttributeName() {
		return memory.read<struct FName>(m_addr + 8);
	}
	int32_t GetDefaultValue() {
		return memory.read<int32_t>(m_addr + 16);
	}
	int32_t GetOutValue() {
		return memory.read<int32_t>(m_addr + 20);
	}
	enum class ECustomBoneAttributeLookup GetLookupType() {
		return memory.read<enum class ECustomBoneAttributeLookup>(m_addr + 24);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 25);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsPawnControlled
{
public:
	FIsPawnControlled(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsPlayerControlled
{
public:
	FIsPlayerControlled(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FClientSetViewTarget
{
public:
	FClientSetViewTarget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetA() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}
	struct FViewTargetTransitionParams GetTransitionParams() {
		return memory.read<struct FViewTargetTransitionParams>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_GetMovementInputVector
{
public:
	FK2_GetMovementInputVector(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetAllBodiesSimulatePhysics
{
public:
	FSetAllBodiesSimulatePhysics(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbNewSimulate() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetAutoActivatePlayerIndex
{
public:
	FGetAutoActivatePlayerIndex(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetLastConfirmedDisplayMonitorIndex
{
public:
	FGetLastConfirmedDisplayMonitorIndex(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FLaunchPawn
{
public:
	FLaunchPawn(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetLaunchVelocity() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	bool GetbXYOverride() {
		return memory.read<bool>(m_addr + 12);
	}
	bool GetbZOverride() {
		return memory.read<bool>(m_addr + 13);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetLastUpdateLocation
{
public:
	FGetLastUpdateLocation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetRenderDetailMode
{
public:
	FSetRenderDetailMode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class EDetailMode GeteMode() {
		return memory.read<enum class EDetailMode>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FPawnMakeNoise
{
public:
	FPawnMakeNoise(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetLoudness() {
		return memory.read<float>(m_addr + 0);
	}
	struct FVector GetNoiseLocation() {
		return memory.read<struct FVector>(m_addr + 4);
	}
	bool GetbUseNoiseMakerLocation() {
		return memory.read<bool>(m_addr + 16);
	}
	struct AActor GetNoiseMaker() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 24);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetBaseTranslationOffset
{
public:
	FGetBaseTranslationOffset(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FPlayAnim
{
public:
	FPlayAnim(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbIsLooping() {
		return memory.read<bool>(m_addr + 0);
	}
	float GetInPlayRate() {
		return memory.read<float>(m_addr + 4);
	}
	float GetInStartPosition() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FReceiveUnpossessed
{
public:
	FReceiveUnpossessed(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AController GetOldController() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AController(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FFindClosestPointOnLine
{
public:
	FFindClosestPointOnLine(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetPoint() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetLineOrigin() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	struct FVector GetLineDirection() {
		return memory.read<struct FVector>(m_addr + 24);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 36);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetCanAffectNavigationGeneration
{
public:
	FSetCanAffectNavigationGeneration(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbNewValue() {
		return memory.read<bool>(m_addr + 0);
	}
	bool GetbForceUpdate() {
		return memory.read<bool>(m_addr + 1);
	}

private:
	std::uint64_t m_addr = 0;
};class FCacheInitialMeshOffset
{
public:
	FCacheInitialMeshOffset(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetMeshRelativeLocation() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FRotator GetMeshRelativeRotation() {
		return memory.read<struct FRotator>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FCanJump
{
public:
	FCanJump(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetCurrentAssetGroupCulture
{
public:
	FSetCurrentAssetGroupCulture(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetAssetGroup() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FString GetCulture() {
		return memory.read<struct FString>(m_addr + 8);
	}
	bool GetSaveToConfig() {
		return memory.read<bool>(m_addr + 24);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 25);
	}

private:
	std::uint64_t m_addr = 0;
};class FClientAckGoodMove
{
public:
	FClientAckGoodMove(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetTimestamp() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FAddOrUpdateBlendable
{
public:
	FAddOrUpdateBlendable(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TScriptInterface<IBlendableInterface> GetInBlendableObject() {
		return memory.read<struct TScriptInterface<IBlendableInterface>>(m_addr + 0);
	}
	float GetInWeight() {
		return memory.read<float>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetBrightness
{
public:
	FGetBrightness(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FClientAdjustRootMotionPosition
{
public:
	FClientAdjustRootMotionPosition(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetTimestamp() {
		return memory.read<float>(m_addr + 0);
	}
	float GetServerMontageTrackPosition() {
		return memory.read<float>(m_addr + 4);
	}
	struct FVector GetServerLoc() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	struct FVector_NetQuantizeNormal GetServerRotation() {
		return memory.read<struct FVector_NetQuantizeNormal>(m_addr + 20);
	}
	float GetServerVelZ() {
		return memory.read<float>(m_addr + 32);
	}
	struct UPrimitiveComponent GetServerBase() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct UPrimitiveComponent(ptr_addr);
	}
	struct FName GetServerBoneName() {
		return memory.read<struct FName>(m_addr + 48);
	}
	bool GetbHasBase() {
		return memory.read<bool>(m_addr + 56);
	}
	bool GetbBaseRelativePosition() {
		return memory.read<bool>(m_addr + 57);
	}
	char GetServerMovementMode() {
		return memory.read<char>(m_addr + 58);
	}

private:
	std::uint64_t m_addr = 0;
};class FCrouch
{
public:
	FCrouch(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbClientSimulation() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FAddPoints
{
public:
	FAddPoints(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FSplinePoint> GetPoints() {
		return memory.read<struct TArray<struct FSplinePoint>>(m_addr + 0);
	}
	bool GetbUpdateSpline() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetAnimRootMotionTranslationScale
{
public:
	FGetAnimRootMotionTranslationScale(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetBaseRotationOffsetRotator
{
public:
	FGetBaseRotationOffsetRotator(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRotator GetReturnValue() {
		return memory.read<struct FRotator>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FMultiply_FloatFloat
{
public:
	FMultiply_FloatFloat(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetA() {
		return memory.read<float>(m_addr + 0);
	}
	float GetB() {
		return memory.read<float>(m_addr + 4);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FDoesSaveGameExist
{
public:
	FDoesSaveGameExist(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetSlotName() {
		return memory.read<struct FString>(m_addr + 0);
	}
	int32_t GetUserIndex() {
		return memory.read<int32_t>(m_addr + 16);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FBugItGo
{
public:
	FBugItGo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetX() {
		return memory.read<float>(m_addr + 0);
	}
	float GetY() {
		return memory.read<float>(m_addr + 4);
	}
	float GetZ() {
		return memory.read<float>(m_addr + 8);
	}
	float GetPitch() {
		return memory.read<float>(m_addr + 12);
	}
	float GetYaw() {
		return memory.read<float>(m_addr + 16);
	}
	float GetRoll() {
		return memory.read<float>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_OnMovementModeChanged
{
public:
	FK2_OnMovementModeChanged(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class EMovementMode GetPrevMovementMode() {
		return memory.read<enum class EMovementMode>(m_addr + 0);
	}
	enum class EMovementMode GetNewMovementMode() {
		return memory.read<enum class EMovementMode>(m_addr + 1);
	}
	char GetPrevCustomMode() {
		return memory.read<char>(m_addr + 2);
	}
	char GetNewCustomMode() {
		return memory.read<char>(m_addr + 3);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_OnStartCrouch
{
public:
	FK2_OnStartCrouch(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetHalfHeightAdjust() {
		return memory.read<float>(m_addr + 0);
	}
	float GetScaledHalfHeightAdjust() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_UpdateCustomMovement
{
public:
	FK2_UpdateCustomMovement(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetDeltaTime() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FScheduleLocalNotificationBadgeFromNow
{
public:
	FScheduleLocalNotificationBadgeFromNow(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetinSecondsFromNow() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct FString GetActivationEvent() {
		return memory.read<struct FString>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FLaunchCharacter
{
public:
	FLaunchCharacter(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetLaunchVelocity() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	bool GetbXYOverride() {
		return memory.read<bool>(m_addr + 12);
	}
	bool GetbZOverride() {
		return memory.read<bool>(m_addr + 13);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetSplineWorldPoints
{
public:
	FSetSplineWorldPoints(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FVector> GetPoints() {
		return memory.read<struct TArray<struct FVector>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FRebaseLocalOriginOntoZero
{
public:
	FRebaseLocalOriginOntoZero(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FVector GetWorldLocation() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnLanded
{
public:
	FOnLanded(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FHitResult GetHit() {
		return memory.read<struct FHitResult>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_DrawMaterial
{
public:
	FK2_DrawMaterial(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UMaterialInterface GetRenderMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UMaterialInterface(ptr_addr);
	}
	struct FVector2D GetScreenPosition() {
		return memory.read<struct FVector2D>(m_addr + 8);
	}
	struct FVector2D GetScreenSize() {
		return memory.read<struct FVector2D>(m_addr + 16);
	}
	struct FVector2D GetCoordinatePosition() {
		return memory.read<struct FVector2D>(m_addr + 24);
	}
	struct FVector2D GetCoordinateSize() {
		return memory.read<struct FVector2D>(m_addr + 32);
	}
	float GetRotation() {
		return memory.read<float>(m_addr + 40);
	}
	struct FVector2D GetPivotPoint() {
		return memory.read<struct FVector2D>(m_addr + 44);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetRestrictedFolderNames
{
public:
	FGetRestrictedFolderNames(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FString> GetReturnValue() {
		return memory.read<struct TArray<struct FString>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnLaunched
{
public:
	FOnLaunched(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetLaunchVelocity() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	bool GetbXYOverride() {
		return memory.read<bool>(m_addr + 12);
	}
	bool GetbZOverride() {
		return memory.read<bool>(m_addr + 13);
	}

private:
	std::uint64_t m_addr = 0;
};class FVector4_IsZero
{
public:
	FVector4_IsZero(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector4 GetA() {
		return memory.read<struct FVector4>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetEvaluateWorldPositionOffsetInRayTracing
{
public:
	FSetEvaluateWorldPositionOffsetInRayTracing(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetNewValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnWalkingOffLedge
{
public:
	FOnWalkingOffLedge(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetPreviousFloorImpactNormal() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetPreviousFloorContactNormal() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	struct FVector GetPreviousLocation() {
		return memory.read<struct FVector>(m_addr + 24);
	}
	float GetTimeDelta() {
		return memory.read<float>(m_addr + 36);
	}

private:
	std::uint64_t m_addr = 0;
};class FServerUpdateLevelVisibility
{
public:
	FServerUpdateLevelVisibility(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FUpdateLevelVisibilityLevelInfo GetLevelVisibility() {
		return memory.read<struct FUpdateLevelVisibilityLevelInfo>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FConv_StringToVector
{
public:
	FConv_StringToVector(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetinString() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FVector GetOutConvertedVector() {
		return memory.read<struct FVector>(m_addr + 16);
	}
	bool GetOutIsValid() {
		return memory.read<bool>(m_addr + 28);
	}

private:
	std::uint64_t m_addr = 0;
};class FPlayAnimMontage
{
public:
	FPlayAnimMontage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimMontage GetAnimMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimMontage(ptr_addr);
	}
	float GetInPlayRate() {
		return memory.read<float>(m_addr + 8);
	}
	struct FName GetStartSectionName() {
		return memory.read<struct FName>(m_addr + 12);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetVectorCurve
{
public:
	FSetVectorCurve(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UCurveVector GetNewVectorCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UCurveVector(ptr_addr);
	}
	struct FName GetVectorTrackName() {
		return memory.read<struct FName>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FServerMoveDualNoBase
{
public:
	FServerMoveDualNoBase(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetTimeStamp0() {
		return memory.read<float>(m_addr + 0);
	}
	struct FVector_NetQuantize10 GetInAccel0() {
		return memory.read<struct FVector_NetQuantize10>(m_addr + 4);
	}
	char GetPendingFlags() {
		return memory.read<char>(m_addr + 16);
	}
	uint32_t GetView0() {
		return memory.read<uint32_t>(m_addr + 20);
	}
	float GetTimestamp() {
		return memory.read<float>(m_addr + 24);
	}
	struct FVector_NetQuantize10 GetInAccel() {
		return memory.read<struct FVector_NetQuantize10>(m_addr + 28);
	}
	struct FVector_NetQuantize100 GetClientLoc() {
		return memory.read<struct FVector_NetQuantize100>(m_addr + 40);
	}
	char GetNewFlags() {
		return memory.read<char>(m_addr + 52);
	}
	char GetClientRoll() {
		return memory.read<char>(m_addr + 53);
	}
	uint32_t GetView() {
		return memory.read<uint32_t>(m_addr + 56);
	}
	char GetClientMovementMode() {
		return memory.read<char>(m_addr + 60);
	}

private:
	std::uint64_t m_addr = 0;
};class FServerMoveNoBase
{
public:
	FServerMoveNoBase(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetTimestamp() {
		return memory.read<float>(m_addr + 0);
	}
	struct FVector_NetQuantize10 GetInAccel() {
		return memory.read<struct FVector_NetQuantize10>(m_addr + 4);
	}
	struct FVector_NetQuantize100 GetClientLoc() {
		return memory.read<struct FVector_NetQuantize100>(m_addr + 16);
	}
	char GetCompressedMoveFlags() {
		return memory.read<char>(m_addr + 28);
	}
	char GetClientRoll() {
		return memory.read<char>(m_addr + 29);
	}
	uint32_t GetView() {
		return memory.read<uint32_t>(m_addr + 32);
	}
	char GetClientMovementMode() {
		return memory.read<char>(m_addr + 36);
	}

private:
	std::uint64_t m_addr = 0;
};class FServerMoveOld
{
public:
	FServerMoveOld(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetOldTimeStamp() {
		return memory.read<float>(m_addr + 0);
	}
	struct FVector_NetQuantize10 GetOldAccel() {
		return memory.read<struct FVector_NetQuantize10>(m_addr + 4);
	}
	char GetOldMoveFlags() {
		return memory.read<char>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FNotEqualExactly_VectorVector
{
public:
	FNotEqualExactly_VectorVector(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetA() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetB() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FServerMovePacked
{
public:
	FServerMovePacked(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FCharacterServerMovePackedBits GetPackedBits() {
		return memory.read<struct FCharacterServerMovePackedBits>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FAddSplinePoint
{
public:
	FAddSplinePoint(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector Getposition() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	enum class ESplineCoordinateSpace GetCoordinateSpace() {
		return memory.read<enum class ESplineCoordinateSpace>(m_addr + 12);
	}
	bool GetbUpdateSpline() {
		return memory.read<bool>(m_addr + 13);
	}

private:
	std::uint64_t m_addr = 0;
};class FMatrix_GetRotator
{
public:
	FMatrix_GetRotator(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMatrix GetM() {
		return memory.read<struct FMatrix>(m_addr + 0);
	}
	struct FRotator GetReturnValue() {
		return memory.read<struct FRotator>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};class FStopAllCameraShakes
{
public:
	FStopAllCameraShakes(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbImmediately() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetDirectionAtTime
{
public:
	FGetDirectionAtTime(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetTime() {
		return memory.read<float>(m_addr + 0);
	}
	enum class ESplineCoordinateSpace GetCoordinateSpace() {
		return memory.read<enum class ESplineCoordinateSpace>(m_addr + 4);
	}
	bool GetbUseConstantVelocity() {
		return memory.read<bool>(m_addr + 5);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FFindInputKeyClosestToWorldLocation
{
public:
	FFindInputKeyClosestToWorldLocation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetWorldLocation() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetIntensity
{
public:
	FSetIntensity(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewIntensity() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FFindLocationClosestToWorldLocation
{
public:
	FFindLocationClosestToWorldLocation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetWorldLocation() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	enum class ESplineCoordinateSpace GetCoordinateSpace() {
		return memory.read<enum class ESplineCoordinateSpace>(m_addr + 12);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FFindRightVectorClosestToWorldLocation
{
public:
	FFindRightVectorClosestToWorldLocation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetWorldLocation() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	enum class ESplineCoordinateSpace GetCoordinateSpace() {
		return memory.read<enum class ESplineCoordinateSpace>(m_addr + 12);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetVirtualJoystickVisibility
{
public:
	FSetVirtualJoystickVisibility(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbVisible() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FBuildString_Rotator
{
public:
	FBuildString_Rotator(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetAppendTo() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FString GetPrefix() {
		return memory.read<struct FString>(m_addr + 16);
	}
	struct FRotator GetInRot() {
		return memory.read<struct FRotator>(m_addr + 32);
	}
	struct FString GetSuffix() {
		return memory.read<struct FString>(m_addr + 48);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};class FFindRollClosestToWorldLocation
{
public:
	FFindRollClosestToWorldLocation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetWorldLocation() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	enum class ESplineCoordinateSpace GetCoordinateSpace() {
		return memory.read<enum class ESplineCoordinateSpace>(m_addr + 12);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FFindTangentClosestToWorldLocation
{
public:
	FFindTangentClosestToWorldLocation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetWorldLocation() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	enum class ESplineCoordinateSpace GetCoordinateSpace() {
		return memory.read<enum class ESplineCoordinateSpace>(m_addr + 12);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FViewPlayer
{
public:
	FViewPlayer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetS() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FFindUpVectorClosestToWorldLocation
{
public:
	FFindUpVectorClosestToWorldLocation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetWorldLocation() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	enum class ESplineCoordinateSpace GetCoordinateSpace() {
		return memory.read<enum class ESplineCoordinateSpace>(m_addr + 12);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FAddMaterial
{
public:
	FAddMaterial(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UMaterialInterface GetMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UMaterialInterface(ptr_addr);
	}
	struct FName GetReturnValue() {
		return memory.read<struct FName>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FQuat_Identity
{
public:
	FQuat_Identity(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FQuat GetReturnValue() {
		return memory.read<struct FQuat>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetArriveTangentAtSplinePoint
{
public:
	FGetArriveTangentAtSplinePoint(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetPointIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	enum class ESplineCoordinateSpace GetCoordinateSpace() {
		return memory.read<enum class ESplineCoordinateSpace>(m_addr + 4);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetHitResultUnderFingerForObjects
{
public:
	FGetHitResultUnderFingerForObjects(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class ETouchIndex GetFingerIndex() {
		return memory.read<enum class ETouchIndex>(m_addr + 0);
	}
	struct TArray<enum class EObjectTypeQuery> GetObjectTypes() {
		return memory.read<struct TArray<enum class EObjectTypeQuery>>(m_addr + 8);
	}
	bool GetbTraceComplex() {
		return memory.read<bool>(m_addr + 24);
	}
	struct FHitResult GetHitResult() {
		return memory.read<struct FHitResult>(m_addr + 28);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 164);
	}

private:
	std::uint64_t m_addr = 0;
};class FFromDays
{
public:
	FFromDays(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetDays() {
		return memory.read<float>(m_addr + 0);
	}
	struct FTimespan GetReturnValue() {
		return memory.read<struct FTimespan>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetScaledCapsuleSize_WithoutHemisphere
{
public:
	FGetScaledCapsuleSize_WithoutHemisphere(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetOutRadius() {
		return memory.read<float>(m_addr + 0);
	}
	float GetOutHalfHeightWithoutHemisphere() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetDefaultUpVector
{
public:
	FGetDefaultUpVector(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class ESplineCoordinateSpace GetCoordinateSpace() {
		return memory.read<enum class ESplineCoordinateSpace>(m_addr + 0);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FClientPlayForceFeedback_Internal
{
public:
	FClientPlayForceFeedback_Internal(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UForceFeedbackEffect GetForceFeedbackEffect() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UForceFeedbackEffect(ptr_addr);
	}
	struct FForceFeedbackParameters GetParams() {
		return memory.read<struct FForceFeedbackParameters>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetFloatPropertyAtSplinePoint
{
public:
	FGetFloatPropertyAtSplinePoint(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct FName GetPropertyName() {
		return memory.read<struct FName>(m_addr + 4);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetInputKeyAtDistanceAlongSpline
{
public:
	FGetInputKeyAtDistanceAlongSpline(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetDistance() {
		return memory.read<float>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetLastInputVector
{
public:
	FGetLastInputVector(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetLocationAtSplineInputKey
{
public:
	FGetLocationAtSplineInputKey(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetInKey() {
		return memory.read<float>(m_addr + 0);
	}
	enum class ESplineCoordinateSpace GetCoordinateSpace() {
		return memory.read<enum class ESplineCoordinateSpace>(m_addr + 4);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetLocationAtTime
{
public:
	FGetLocationAtTime(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetTime() {
		return memory.read<float>(m_addr + 0);
	}
	enum class ESplineCoordinateSpace GetCoordinateSpace() {
		return memory.read<enum class ESplineCoordinateSpace>(m_addr + 4);
	}
	bool GetbUseConstantVelocity() {
		return memory.read<bool>(m_addr + 5);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSet_Intersection
{
public:
	FSet_Intersection(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSet<int32_t> GetA() {
		return memory.read<struct TSet<int32_t>>(m_addr + 0);
	}
	struct TSet<int32_t> GetB() {
		return memory.read<struct TSet<int32_t>>(m_addr + 80);
	}
	struct TSet<int32_t> GetResult() {
		return memory.read<struct TSet<int32_t>>(m_addr + 160);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetRotationAtSplinePoint
{
public:
	FGetRotationAtSplinePoint(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetPointIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	enum class ESplineCoordinateSpace GetCoordinateSpace() {
		return memory.read<enum class ESplineCoordinateSpace>(m_addr + 4);
	}
	struct FRotator GetReturnValue() {
		return memory.read<struct FRotator>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FClientEnableNetworkVoice
{
public:
	FClientEnableNetworkVoice(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbEnable() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetNumberOfSplinePoints
{
public:
	FGetNumberOfSplinePoints(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetNumberOfSplineSegments
{
public:
	FGetNumberOfSplineSegments(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FDateTimeMaxValue
{
public:
	FDateTimeMaxValue(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDateTime GetReturnValue() {
		return memory.read<struct FDateTime>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FClientReceiveLocalizedMessage
{
public:
	FClientReceiveLocalizedMessage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	ULocalMessage GetMessage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return ULocalMessage(ptr_addr);
	}
	int32_t GetSWITCH() {
		return memory.read<int32_t>(m_addr + 8);
	}
	struct APlayerState GetRelatedPlayerState_2() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct APlayerState(ptr_addr);
	}
	struct APlayerState GetRelatedPlayerState_3() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 24);
		return struct APlayerState(ptr_addr);
	}
	struct UObject GetOptionalObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 32);
		return struct UObject(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetRightVectorAtSplineInputKey
{
public:
	FGetRightVectorAtSplineInputKey(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetInKey() {
		return memory.read<float>(m_addr + 0);
	}
	enum class ESplineCoordinateSpace GetCoordinateSpace() {
		return memory.read<enum class ESplineCoordinateSpace>(m_addr + 4);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FEqualEqual_InputChordInputChord
{
public:
	FEqualEqual_InputChordInputChord(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FInputChord GetA() {
		return memory.read<struct FInputChord>(m_addr + 0);
	}
	struct FInputChord GetB() {
		return memory.read<struct FInputChord>(m_addr + 32);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetRightVectorAtSplinePoint
{
public:
	FGetRightVectorAtSplinePoint(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetPointIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	enum class ESplineCoordinateSpace GetCoordinateSpace() {
		return memory.read<enum class ESplineCoordinateSpace>(m_addr + 4);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetRollAtDistanceAlongSpline
{
public:
	FGetRollAtDistanceAlongSpline(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetDistance() {
		return memory.read<float>(m_addr + 0);
	}
	enum class ESplineCoordinateSpace GetCoordinateSpace() {
		return memory.read<enum class ESplineCoordinateSpace>(m_addr + 4);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetRollAtSplineInputKey
{
public:
	FGetRollAtSplineInputKey(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetInKey() {
		return memory.read<float>(m_addr + 0);
	}
	enum class ESplineCoordinateSpace GetCoordinateSpace() {
		return memory.read<enum class ESplineCoordinateSpace>(m_addr + 4);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetRollAtSplinePoint
{
public:
	FGetRollAtSplinePoint(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetPointIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	enum class ESplineCoordinateSpace GetCoordinateSpace() {
		return memory.read<enum class ESplineCoordinateSpace>(m_addr + 4);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetRollAtTime
{
public:
	FGetRollAtTime(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetTime() {
		return memory.read<float>(m_addr + 0);
	}
	enum class ESplineCoordinateSpace GetCoordinateSpace() {
		return memory.read<enum class ESplineCoordinateSpace>(m_addr + 4);
	}
	bool GetbUseConstantVelocity() {
		return memory.read<bool>(m_addr + 5);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetFullscreenMode
{
public:
	FGetFullscreenMode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class EWindowMode GetReturnValue() {
		return memory.read<enum class EWindowMode>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetRotationAtDistanceAlongSpline
{
public:
	FGetRotationAtDistanceAlongSpline(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetDistance() {
		return memory.read<float>(m_addr + 0);
	}
	enum class ESplineCoordinateSpace GetCoordinateSpace() {
		return memory.read<enum class ESplineCoordinateSpace>(m_addr + 4);
	}
	struct FRotator GetReturnValue() {
		return memory.read<struct FRotator>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FConv_IntToBool
{
public:
	FConv_IntToBool(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetinInt() {
		return memory.read<int32_t>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetScaleAtSplineInputKey
{
public:
	FGetScaleAtSplineInputKey(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetInKey() {
		return memory.read<float>(m_addr + 0);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetScaleAtSplinePoint
{
public:
	FGetScaleAtSplinePoint(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetPointIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetScaleAtTime
{
public:
	FGetScaleAtTime(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetTime() {
		return memory.read<float>(m_addr + 0);
	}
	bool GetbUseConstantVelocity() {
		return memory.read<bool>(m_addr + 4);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetOrthoNearClipPlane
{
public:
	FSetOrthoNearClipPlane(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetInOrthoNearClipPlane() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetTangentAtSplineInputKey
{
public:
	FGetTangentAtSplineInputKey(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetInKey() {
		return memory.read<float>(m_addr + 0);
	}
	enum class ESplineCoordinateSpace GetCoordinateSpace() {
		return memory.read<enum class ESplineCoordinateSpace>(m_addr + 4);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetTangentAtTime
{
public:
	FGetTangentAtTime(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetTime() {
		return memory.read<float>(m_addr + 0);
	}
	enum class ESplineCoordinateSpace GetCoordinateSpace() {
		return memory.read<enum class ESplineCoordinateSpace>(m_addr + 4);
	}
	bool GetbUseConstantVelocity() {
		return memory.read<bool>(m_addr + 5);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetTransformAtSplinePoint
{
public:
	FGetTransformAtSplinePoint(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetPointIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	enum class ESplineCoordinateSpace GetCoordinateSpace() {
		return memory.read<enum class ESplineCoordinateSpace>(m_addr + 4);
	}
	bool GetbUseScale() {
		return memory.read<bool>(m_addr + 5);
	}
	struct FTransform GetReturnValue() {
		return memory.read<struct FTransform>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetTransformAtTime
{
public:
	FGetTransformAtTime(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetTime() {
		return memory.read<float>(m_addr + 0);
	}
	enum class ESplineCoordinateSpace GetCoordinateSpace() {
		return memory.read<enum class ESplineCoordinateSpace>(m_addr + 4);
	}
	bool GetbUseConstantVelocity() {
		return memory.read<bool>(m_addr + 5);
	}
	bool GetbUseScale() {
		return memory.read<bool>(m_addr + 6);
	}
	struct FTransform GetReturnValue() {
		return memory.read<struct FTransform>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetUpVectorAtSplineInputKey
{
public:
	FGetUpVectorAtSplineInputKey(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetInKey() {
		return memory.read<float>(m_addr + 0);
	}
	enum class ESplineCoordinateSpace GetCoordinateSpace() {
		return memory.read<enum class ESplineCoordinateSpace>(m_addr + 4);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetUpVectorAtSplinePoint
{
public:
	FGetUpVectorAtSplinePoint(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetPointIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	enum class ESplineCoordinateSpace GetCoordinateSpace() {
		return memory.read<enum class ESplineCoordinateSpace>(m_addr + 4);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FLogBox
{
public:
	FLogBox(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FBox GetBoxShape() {
		return memory.read<struct FBox>(m_addr + 8);
	}
	struct FString GetText() {
		return memory.read<struct FString>(m_addr + 40);
	}
	struct FLinearColor GetObjectColor() {
		return memory.read<struct FLinearColor>(m_addr + 56);
	}
	struct FName GetLogCategory() {
		return memory.read<struct FName>(m_addr + 72);
	}
	bool GetbAddToMessageLog() {
		return memory.read<bool>(m_addr + 80);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetFadeInDuration
{
public:
	FGetFadeInDuration(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetVectorPropertyAtSplineInputKey
{
public:
	FGetVectorPropertyAtSplineInputKey(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetInKey() {
		return memory.read<float>(m_addr + 0);
	}
	struct FName GetPropertyName() {
		return memory.read<struct FName>(m_addr + 4);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FConv_NameToString
{
public:
	FConv_NameToString(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetInName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsMorning
{
public:
	FIsMorning(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDateTime GetA() {
		return memory.read<struct FDateTime>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FArray_Reverse
{
public:
	FArray_Reverse(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<int32_t> GetTargetArray() {
		return memory.read<struct TArray<int32_t>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetWorldRotationAtDistanceAlongSpline
{
public:
	FGetWorldRotationAtDistanceAlongSpline(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetDistance() {
		return memory.read<float>(m_addr + 0);
	}
	struct FRotator GetReturnValue() {
		return memory.read<struct FRotator>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetUseSkinSnapshot
{
public:
	FSetUseSkinSnapshot(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbNewValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetWorldTangentAtDistanceAlongSpline
{
public:
	FGetWorldTangentAtDistanceAlongSpline(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetDistance() {
		return memory.read<float>(m_addr + 0);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsClosedLoop
{
public:
	FIsClosedLoop(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FRemoveSplinePoint
{
public:
	FRemoveSplinePoint(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	bool GetbUpdateSpline() {
		return memory.read<bool>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetClosedLoop
{
public:
	FSetClosedLoop(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbInClosedLoop() {
		return memory.read<bool>(m_addr + 0);
	}
	bool GetbUpdateSpline() {
		return memory.read<bool>(m_addr + 1);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetClosedLoopAtPosition
{
public:
	FSetClosedLoopAtPosition(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbInClosedLoop() {
		return memory.read<bool>(m_addr + 0);
	}
	float GetKey() {
		return memory.read<float>(m_addr + 4);
	}
	bool GetbUpdateSpline() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetSplineLocalPoints
{
public:
	FSetSplineLocalPoints(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FVector> GetPoints() {
		return memory.read<struct TArray<struct FVector>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetClosestListenerLocation
{
public:
	FGetClosestListenerLocation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	float GetMaximumRange() {
		return memory.read<float>(m_addr + 20);
	}
	bool GetbAllowAttenuationOverride() {
		return memory.read<bool>(m_addr + 24);
	}
	struct FVector GetListenerPosition() {
		return memory.read<struct FVector>(m_addr + 28);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetSplinePoints
{
public:
	FSetSplinePoints(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FVector> GetPoints() {
		return memory.read<struct TArray<struct FVector>>(m_addr + 0);
	}
	enum class ESplineCoordinateSpace GetCoordinateSpace() {
		return memory.read<enum class ESplineCoordinateSpace>(m_addr + 16);
	}
	bool GetbUpdateSpline() {
		return memory.read<bool>(m_addr + 17);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetTangentAtSplinePoint
{
public:
	FSetTangentAtSplinePoint(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetPointIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct FVector GetInTangent() {
		return memory.read<struct FVector>(m_addr + 4);
	}
	enum class ESplineCoordinateSpace GetCoordinateSpace() {
		return memory.read<enum class ESplineCoordinateSpace>(m_addr + 16);
	}
	bool GetbUpdateSpline() {
		return memory.read<bool>(m_addr + 17);
	}

private:
	std::uint64_t m_addr = 0;
};class FSignOfFloat
{
public:
	FSignOfFloat(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetA() {
		return memory.read<float>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetUpVectorAtSplinePoint
{
public:
	FSetUpVectorAtSplinePoint(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetPointIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct FVector GetInUpVector() {
		return memory.read<struct FVector>(m_addr + 4);
	}
	enum class ESplineCoordinateSpace GetCoordinateSpace() {
		return memory.read<enum class ESplineCoordinateSpace>(m_addr + 16);
	}
	bool GetbUpdateSpline() {
		return memory.read<bool>(m_addr + 17);
	}

private:
	std::uint64_t m_addr = 0;
};class FCalculateDirection
{
public:
	FCalculateDirection(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetVelocity() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FRotator GetBaseRotation() {
		return memory.read<struct FRotator>(m_addr + 12);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FNotEqual_StriStri
{
public:
	FNotEqual_StriStri(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetA() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FString GetB() {
		return memory.read<struct FString>(m_addr + 16);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetAllCurveNames
{
public:
	FGetAllCurveNames(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FName> GetOutNames() {
		return memory.read<struct TArray<struct FName>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetCurrentActiveMontage
{
public:
	FGetCurrentActiveMontage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimMontage GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimMontage(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetDisablePostProcessBlueprint
{
public:
	FSetDisablePostProcessBlueprint(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbInDisablePostProcess() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetUnscaledCapsuleSize_WithoutHemisphere
{
public:
	FGetUnscaledCapsuleSize_WithoutHemisphere(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetOutRadius() {
		return memory.read<float>(m_addr + 0);
	}
	float GetOutHalfHeightWithoutHemisphere() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetResolutionScaleValueEx
{
public:
	FSetResolutionScaleValueEx(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewScaleValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetCurveValue
{
public:
	FGetCurveValue(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetCurveName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetInstanceAssetPlayerTime
{
public:
	FGetInstanceAssetPlayerTime(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetAssetPlayerIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetInstanceAssetPlayerTimeFraction
{
public:
	FGetInstanceAssetPlayerTimeFraction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetAssetPlayerIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetDayOfYear
{
public:
	FGetDayOfYear(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDateTime GetA() {
		return memory.read<struct FDateTime>(m_addr + 0);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSpawnSoundAttached
{
public:
	FSpawnSoundAttached(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USoundBase GetSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct USoundBase(ptr_addr);
	}
	struct USceneComponent GetAttachToComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct USceneComponent(ptr_addr);
	}
	struct FName GetAttachPointName() {
		return memory.read<struct FName>(m_addr + 16);
	}
	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 24);
	}
	struct FRotator GetRotation() {
		return memory.read<struct FRotator>(m_addr + 36);
	}
	enum class EAttachLocation GetLocationType() {
		return memory.read<enum class EAttachLocation>(m_addr + 48);
	}
	bool GetbStopWhenAttachedToDestroyed() {
		return memory.read<bool>(m_addr + 49);
	}
	float GetVolumeMultiplier() {
		return memory.read<float>(m_addr + 52);
	}
	float GetPitchMultiplier() {
		return memory.read<float>(m_addr + 56);
	}
	float GetStartTime() {
		return memory.read<float>(m_addr + 60);
	}
	struct USoundAttenuation GetAttenuationSettings() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 64);
		return struct USoundAttenuation(ptr_addr);
	}
	struct USoundConcurrency GetConcurrencySettings() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return struct USoundConcurrency(ptr_addr);
	}
	bool GetbAutoDestroy() {
		return memory.read<bool>(m_addr + 80);
	}
	struct UAudioComponent GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 88);
		return struct UAudioComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetInstanceCurrentStateElapsedTime
{
public:
	FGetInstanceCurrentStateElapsedTime(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetMachineIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetInstanceStateWeight
{
public:
	FGetInstanceStateWeight(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetMachineIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetStateIndex() {
		return memory.read<int32_t>(m_addr + 4);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FArray_Random
{
public:
	FArray_Random(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<int32_t> GetTargetArray() {
		return memory.read<struct TArray<int32_t>>(m_addr + 0);
	}
	int32_t GetOutItem() {
		return memory.read<int32_t>(m_addr + 16);
	}
	int32_t GetOutIndex() {
		return memory.read<int32_t>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetOwningActor
{
public:
	FGetOwningActor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetReceiveNotifiesFromLinkedInstances
{
public:
	FGetReceiveNotifiesFromLinkedInstances(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetRelevantAnimLength
{
public:
	FGetRelevantAnimLength(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetMachineIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetStateIndex() {
		return memory.read<int32_t>(m_addr + 4);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetRelevantAnimTimeRemaining
{
public:
	FGetRelevantAnimTimeRemaining(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetMachineIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetStateIndex() {
		return memory.read<int32_t>(m_addr + 4);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetSunMultiplier
{
public:
	FSetSunMultiplier(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewSunMultiplier() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetSyncGroupPosition
{
public:
	FGetSyncGroupPosition(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetInSyncGroupName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FMarkerSyncAnimPosition GetReturnValue() {
		return memory.read<struct FMarkerSyncAnimPosition>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetTimeToClosestMarker
{
public:
	FGetTimeToClosestMarker(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetSyncGroup() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FName GetMarkerName() {
		return memory.read<struct FName>(m_addr + 8);
	}
	float GetOutMarkerTime() {
		return memory.read<float>(m_addr + 16);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetOcclusionTint
{
public:
	FSetOcclusionTint(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FColor GetInTint() {
		return memory.read<struct FColor>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsPlayingSlotAnimation
{
public:
	FIsPlayingSlotAnimation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimSequenceBase GetAsset() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct FName GetSlotNodeName() {
		return memory.read<struct FName>(m_addr + 8);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsSyncGroupBetweenMarkers
{
public:
	FIsSyncGroupBetweenMarkers(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetInSyncGroupName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FName GetPreviousMarker() {
		return memory.read<struct FName>(m_addr + 8);
	}
	struct FName GetNextMarker() {
		return memory.read<struct FName>(m_addr + 16);
	}
	bool GetbRespectMarkerOrder() {
		return memory.read<bool>(m_addr + 24);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 25);
	}

private:
	std::uint64_t m_addr = 0;
};class FServerMutePlayer
{
public:
	FServerMutePlayer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FUniqueNetIdRepl GetplayerId() {
		return memory.read<struct FUniqueNetIdRepl>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FLinkAnimGraphByTag
{
public:
	FLinkAnimGraphByTag(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetInTag() {
		return memory.read<struct FName>(m_addr + 0);
	}
	UAnimInstance GetInClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return UAnimInstance(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FAccumulateAllBodiesBelowPhysicsBlendWeight
{
public:
	FAccumulateAllBodiesBelowPhysicsBlendWeight(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetInBoneName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	float GetAddPhysicsBlendWeight() {
		return memory.read<float>(m_addr + 8);
	}
	bool GetbSkipCustomPhysicsType() {
		return memory.read<bool>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FNearlyEqual_FloatFloat
{
public:
	FNearlyEqual_FloatFloat(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetA() {
		return memory.read<float>(m_addr + 0);
	}
	float GetB() {
		return memory.read<float>(m_addr + 4);
	}
	float GetErrorTolerance() {
		return memory.read<float>(m_addr + 8);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FLessEqual_FloatFloat
{
public:
	FLessEqual_FloatFloat(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetA() {
		return memory.read<float>(m_addr + 0);
	}
	float GetB() {
		return memory.read<float>(m_addr + 4);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FLockAIResources
{
public:
	FLockAIResources(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbLockMovement() {
		return memory.read<bool>(m_addr + 0);
	}
	bool GetLockAILogic() {
		return memory.read<bool>(m_addr + 1);
	}

private:
	std::uint64_t m_addr = 0;
};class FMontage_GetCurrentSection
{
public:
	FMontage_GetCurrentSection(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimMontage GetMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimMontage(ptr_addr);
	}
	struct FName GetReturnValue() {
		return memory.read<struct FName>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FMontage_IsActive
{
public:
	FMontage_IsActive(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimMontage GetMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimMontage(ptr_addr);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FMontage_Pause
{
public:
	FMontage_Pause(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimMontage GetMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimMontage(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FMontage_SetNextSection
{
public:
	FMontage_SetNextSection(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetSectionNameToChange() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FName GetNextSection() {
		return memory.read<struct FName>(m_addr + 8);
	}
	struct UAnimMontage GetMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UAnimMontage(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsMovingOnGround
{
public:
	FIsMovingOnGround(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FClientSetLocation
{
public:
	FClientSetLocation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetNewLocation() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FRotator GetNewRotation() {
		return memory.read<struct FRotator>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FRight
{
public:
	FRight(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetSourceString() {
		return memory.read<struct FString>(m_addr + 0);
	}
	int32_t GetCount() {
		return memory.read<int32_t>(m_addr + 16);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FMontage_SetPlayRate
{
public:
	FMontage_SetPlayRate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimMontage GetMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimMontage(ptr_addr);
	}
	float GetNewPlayRate() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FMontage_StopGroupByName
{
public:
	FMontage_StopGroupByName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetInBlendOutTime() {
		return memory.read<float>(m_addr + 0);
	}
	struct FName GetGroupName() {
		return memory.read<struct FName>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FPlaySlotAnimationAsDynamicMontage
{
public:
	FPlaySlotAnimationAsDynamicMontage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimSequenceBase GetAsset() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct FName GetSlotNodeName() {
		return memory.read<struct FName>(m_addr + 8);
	}
	float GetBlendInTime() {
		return memory.read<float>(m_addr + 16);
	}
	float GetBlendOutTime() {
		return memory.read<float>(m_addr + 20);
	}
	float GetInPlayRate() {
		return memory.read<float>(m_addr + 24);
	}
	int32_t GetLoopCount() {
		return memory.read<int32_t>(m_addr + 28);
	}
	float GetBlendOutTriggerTime() {
		return memory.read<float>(m_addr + 32);
	}
	float GetInTimeToStartMontageAt() {
		return memory.read<float>(m_addr + 36);
	}
	struct UAnimMontage GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct UAnimMontage(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FVector4_Set
{
public:
	FVector4_Set(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector4 GetA() {
		return memory.read<struct FVector4>(m_addr + 0);
	}
	float GetX() {
		return memory.read<float>(m_addr + 16);
	}
	float GetY() {
		return memory.read<float>(m_addr + 20);
	}
	float GetZ() {
		return memory.read<float>(m_addr + 24);
	}
	float GetW() {
		return memory.read<float>(m_addr + 28);
	}

private:
	std::uint64_t m_addr = 0;
};class FSavePoseSnapshot
{
public:
	FSavePoseSnapshot(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetSnapshotName() {
		return memory.read<struct FName>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FReplaceInline
{
public:
	FReplaceInline(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetSourceString() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FString GetSearchText() {
		return memory.read<struct FString>(m_addr + 16);
	}
	struct FString GetReplacementText() {
		return memory.read<struct FString>(m_addr + 32);
	}
	enum class ESearchCase GetSearchCase() {
		return memory.read<enum class ESearchCase>(m_addr + 48);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 52);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetMorphTarget
{
public:
	FSetMorphTarget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetMorphTargetName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	float GetValue() {
		return memory.read<float>(m_addr + 8);
	}
	bool GetbRemoveZeroWeight() {
		return memory.read<bool>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetRootMotionMode
{
public:
	FSetRootMotionMode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class ERootMotionMode GetValue() {
		return memory.read<enum class ERootMotionMode>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetPropagateNotifiesToLinkedInstances
{
public:
	FSetPropagateNotifiesToLinkedInstances(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbSet() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSnapshotPose
{
public:
	FSnapshotPose(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FPoseSnapshot GetSnapshot() {
		return memory.read<struct FPoseSnapshot>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSpawnSoundAtLocation
{
public:
	FSpawnSoundAtLocation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct USoundBase GetSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct USoundBase(ptr_addr);
	}
	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 16);
	}
	struct FRotator GetRotation() {
		return memory.read<struct FRotator>(m_addr + 28);
	}
	float GetVolumeMultiplier() {
		return memory.read<float>(m_addr + 40);
	}
	float GetPitchMultiplier() {
		return memory.read<float>(m_addr + 44);
	}
	float GetStartTime() {
		return memory.read<float>(m_addr + 48);
	}
	struct USoundAttenuation GetAttenuationSettings() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct USoundAttenuation(ptr_addr);
	}
	struct USoundConcurrency GetConcurrencySettings() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 64);
		return struct USoundConcurrency(ptr_addr);
	}
	bool GetbAutoDestroy() {
		return memory.read<bool>(m_addr + 72);
	}
	struct UAudioComponent GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 80);
		return struct UAudioComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FDrawLine
{
public:
	FDrawLine(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetStartScreenX() {
		return memory.read<float>(m_addr + 0);
	}
	float GetStartScreenY() {
		return memory.read<float>(m_addr + 4);
	}
	float GetEndScreenX() {
		return memory.read<float>(m_addr + 8);
	}
	float GetEndScreenY() {
		return memory.read<float>(m_addr + 12);
	}
	struct FLinearColor GetLineColor() {
		return memory.read<struct FLinearColor>(m_addr + 16);
	}
	float GetLineThickness() {
		return memory.read<float>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FStopSlotAnimation
{
public:
	FStopSlotAnimation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetInBlendOutTime() {
		return memory.read<float>(m_addr + 0);
	}
	struct FName GetSlotNodeName() {
		return memory.read<struct FName>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FSelectColor
{
public:
	FSelectColor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLinearColor GetA() {
		return memory.read<struct FLinearColor>(m_addr + 0);
	}
	struct FLinearColor GetB() {
		return memory.read<struct FLinearColor>(m_addr + 16);
	}
	bool GetbPickA() {
		return memory.read<bool>(m_addr + 32);
	}
	struct FLinearColor GetReturnValue() {
		return memory.read<struct FLinearColor>(m_addr + 36);
	}

private:
	std::uint64_t m_addr = 0;
};class FUnlockAIResources
{
public:
	FUnlockAIResources(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbUnlockMovement() {
		return memory.read<bool>(m_addr + 0);
	}
	bool GetUnlockAILogic() {
		return memory.read<bool>(m_addr + 1);
	}

private:
	std::uint64_t m_addr = 0;
};class FAdjustAttenuation
{
public:
	FAdjustAttenuation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FForceFeedbackAttenuationSettings GetInAttenuationSettings() {
		return memory.read<struct FForceFeedbackAttenuationSettings>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FKey_GetDisplayName
{
public:
	FKey_GetDisplayName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKey GetKey() {
		return memory.read<struct FKey>(m_addr + 0);
	}
	struct FText GetReturnValue() {
		return memory.read<struct FText>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetInputMotionState
{
public:
	FGetInputMotionState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetTilt() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetRotationRate() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	struct FVector GetGravity() {
		return memory.read<struct FVector>(m_addr + 24);
	}
	struct FVector GetAcceleration() {
		return memory.read<struct FVector>(m_addr + 36);
	}

private:
	std::uint64_t m_addr = 0;
};class FFadeIn
{
public:
	FFadeIn(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetFadeInDuration() {
		return memory.read<float>(m_addr + 0);
	}
	float GetFadeVolumeLevel() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetCookedFFTData
{
public:
	FGetCookedFFTData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<float> GetFrequenciesToGet() {
		return memory.read<struct TArray<float>>(m_addr + 0);
	}
	struct TArray<struct FSoundWaveSpectralData> GetOutSoundWaveSpectralData() {
		return memory.read<struct TArray<struct FSoundWaveSpectralData>>(m_addr + 16);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetPlayState
{
public:
	FGetPlayState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class EAudioComponentPlayState GetReturnValue() {
		return memory.read<enum class EAudioComponentPlayState>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetBoundaryMin
{
public:
	FGetBoundaryMin(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FHasCookedAmplitudeEnvelopeData
{
public:
	FHasCookedAmplitudeEnvelopeData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetInitialLocationAndRotation
{
public:
	FSetInitialLocationAndRotation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetNewLocation() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FRotator GetNewRotation() {
		return memory.read<struct FRotator>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsPlaying
{
public:
	FIsPlaying(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsNoSkinning
{
public:
	FIsNoSkinning(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetPitchMultiplier
{
public:
	FSetPitchMultiplier(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewPitchMultiplier() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetSpringCurrentEndPoint
{
public:
	FGetSpringCurrentEndPoint(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FShaderWorkingDir
{
public:
	FShaderWorkingDir(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetSound
{
public:
	FSetSound(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USoundBase GetNewSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct USoundBase(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetSourceBusSendPostEffect
{
public:
	FSetSourceBusSendPostEffect(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USoundSourceBus GetSoundSourceBus() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct USoundSourceBus(ptr_addr);
	}
	float GetSourceBusSendLevel() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetUISound
{
public:
	FSetUISound(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbInUISound() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetVolumeMultiplier
{
public:
	FSetVolumeMultiplier(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewVolumeMultiplier() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FToLower
{
public:
	FToLower(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetSourceString() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FStopDelayed
{
public:
	FStopDelayed(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetDelayTime() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsCrouching
{
public:
	FIsCrouching(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsFalling
{
public:
	FIsFalling(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FAddInputVector
{
public:
	FAddInputVector(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetWorldVector() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	bool GetbForce() {
		return memory.read<bool>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetPawnOwner
{
public:
	FGetPawnOwner(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APawn GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APawn(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetPendingInputVector
{
public:
	FGetPendingInputVector(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCalcVelocity
{
public:
	FCalcVelocity(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetDeltaTime() {
		return memory.read<float>(m_addr + 0);
	}
	float GetFriction() {
		return memory.read<float>(m_addr + 4);
	}
	bool GetbFluid() {
		return memory.read<bool>(m_addr + 8);
	}
	float GetBrakingDeceleration() {
		return memory.read<float>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FInputEvent_IsLeftControlDown
{
public:
	FInputEvent_IsLeftControlDown(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FInputEvent GetInput() {
		return memory.read<struct FInputEvent>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetAnalogInputModifier
{
public:
	FGetAnalogInputModifier(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FAddEnvelopeFollowerDelegate
{
public:
	FAddEnvelopeFollowerDelegate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FDelegate GetOnSubmixEnvelopeBP() {
		return memory.read<struct FDelegate>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FRound64
{
public:
	FRound64(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetA() {
		return memory.read<float>(m_addr + 0);
	}
	int64_t GetReturnValue() {
		return memory.read<int64_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetCharacterOwner
{
public:
	FGetCharacterOwner(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ACharacter GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct ACharacter(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetCurrentAcceleration
{
public:
	FGetCurrentAcceleration(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetImpartedMovementBaseVelocity
{
public:
	FGetImpartedMovementBaseVelocity(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetLastUpdateRotation
{
public:
	FGetLastUpdateRotation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRotator GetReturnValue() {
		return memory.read<struct FRotator>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetLastUpdateVelocity
{
public:
	FGetLastUpdateVelocity(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetMaxAcceleration
{
public:
	FGetMaxAcceleration(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetMaxJumpHeight
{
public:
	FGetMaxJumpHeight(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetMaxJumpHeightWithJumpTime
{
public:
	FGetMaxJumpHeightWithJumpTime(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FBuildString_Object
{
public:
	FBuildString_Object(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetAppendTo() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FString GetPrefix() {
		return memory.read<struct FString>(m_addr + 16);
	}
	struct UObject GetInObj() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 32);
		return struct UObject(ptr_addr);
	}
	struct FString GetSuffix() {
		return memory.read<struct FString>(m_addr + 40);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetMinAnalogSpeed
{
public:
	FGetMinAnalogSpeed(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetCharacterAsNumber
{
public:
	FGetCharacterAsNumber(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetSourceString() {
		return memory.read<struct FString>(m_addr + 0);
	}
	int32_t GetIndex() {
		return memory.read<int32_t>(m_addr + 16);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetValidPerchRadius
{
public:
	FGetValidPerchRadius(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsWalking
{
public:
	FIsWalking(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_FindFloor
{
public:
	FK2_FindFloor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetCapsuleLocation() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FFindFloorResult GetFloorResult() {
		return memory.read<struct FFindFloorResult>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_GetWalkableFloorZ
{
public:
	FK2_GetWalkableFloorZ(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetAvoidanceEnabled
{
public:
	FSetAvoidanceEnabled(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbEnable() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FLinearColor_Transparent
{
public:
	FLinearColor_Transparent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLinearColor GetReturnValue() {
		return memory.read<struct FLinearColor>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetCastCapsuleDirectShadow
{
public:
	FSetCastCapsuleDirectShadow(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbNewValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetAvoidanceGroup
{
public:
	FSetAvoidanceGroup(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetGroupFlags() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetAvoidanceGroupMask
{
public:
	FSetAvoidanceGroupMask(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FNavAvoidanceMask GetGroupMask() {
		return memory.read<struct FNavAvoidanceMask>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetCurrentLanguageAndLocale
{
public:
	FSetCurrentLanguageAndLocale(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetCulture() {
		return memory.read<struct FString>(m_addr + 0);
	}
	bool GetSaveToConfig() {
		return memory.read<bool>(m_addr + 16);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 17);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetMovementMode
{
public:
	FSetMovementMode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class EMovementMode GetNewMovementMode() {
		return memory.read<enum class EMovementMode>(m_addr + 0);
	}
	char GetNewCustomMode() {
		return memory.read<char>(m_addr + 1);
	}

private:
	std::uint64_t m_addr = 0;
};class FMultiply_Vector2DFloat
{
public:
	FMultiply_Vector2DFloat(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector2D GetA() {
		return memory.read<struct FVector2D>(m_addr + 0);
	}
	float GetB() {
		return memory.read<float>(m_addr + 8);
	}
	struct FVector2D GetReturnValue() {
		return memory.read<struct FVector2D>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FRemoveDebugText
{
public:
	FRemoveDebugText(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetSrcActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}
	bool GetbLeaveDurationText() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetWalkableFloorAngle
{
public:
	FSetWalkableFloorAngle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetInWalkableFloorAngle() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetWalkableFloorZ
{
public:
	FSetWalkableFloorZ(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetInWalkableFloorZ() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FFetchTimecode
{
public:
	FFetchTimecode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FQualifiedFrameTime GetOutFrameTime() {
		return memory.read<struct FQualifiedFrameTime>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetDelayedQualifiedFrameTime
{
public:
	FGetDelayedQualifiedFrameTime(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FQualifiedFrameTime GetReturnValue() {
		return memory.read<struct FQualifiedFrameTime>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetEmptyText
{
public:
	FGetEmptyText(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetReturnValue() {
		return memory.read<struct FText>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FClientReturnToMainMenu
{
public:
	FClientReturnToMainMenu(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetReturnReason() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetTimecode
{
public:
	FGetTimecode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTimecode GetReturnValue() {
		return memory.read<struct FTimecode>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FPercent_IntInt
{
public:
	FPercent_IntInt(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetA() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetB() {
		return memory.read<int32_t>(m_addr + 4);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetFadeDuration
{
public:
	FGetFadeDuration(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetDecalMaterial
{
public:
	FSetDecalMaterial(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UMaterialInterface GetNewDecalMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UMaterialInterface(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetDecalShadowmapTexture
{
public:
	FSetDecalShadowmapTexture(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTexture GetNewDecalShadowmapTexture() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UTexture(ptr_addr);
	}
	struct FVector4 GetinShadowmapUV() {
		return memory.read<struct FVector4>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FQuat_Normalized
{
public:
	FQuat_Normalized(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FQuat GetQ() {
		return memory.read<struct FQuat>(m_addr + 0);
	}
	float GetTolerance() {
		return memory.read<float>(m_addr + 16);
	}
	struct FQuat GetReturnValue() {
		return memory.read<struct FQuat>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetLastConfirmedScreenResolution
{
public:
	FGetLastConfirmedScreenResolution(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FIntPoint GetReturnValue() {
		return memory.read<struct FIntPoint>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetFadeIn
{
public:
	FSetFadeIn(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetStartDelay() {
		return memory.read<float>(m_addr + 0);
	}
	float GetDuaration() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetBoundaryMin
{
public:
	FSetBoundaryMin(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetInBoundaryMin() {
		return memory.read<float>(m_addr + 0);
	}
	bool GetbUpdateMesh() {
		return memory.read<bool>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetFadeOut
{
public:
	FSetFadeOut(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetStartDelay() {
		return memory.read<float>(m_addr + 0);
	}
	float GetDuration() {
		return memory.read<float>(m_addr + 4);
	}
	bool GetDestroyOwnerAfterFade() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FMaxInt64
{
public:
	FMaxInt64(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int64_t GetA() {
		return memory.read<int64_t>(m_addr + 0);
	}
	int64_t GetB() {
		return memory.read<int64_t>(m_addr + 8);
	}
	int64_t GetReturnValue() {
		return memory.read<int64_t>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetFadeScreenSize
{
public:
	FSetFadeScreenSize(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewFadeScreenSize() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetSortOrder
{
public:
	FSetSortOrder(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FInputEvent_IsLeftAltDown
{
public:
	FInputEvent_IsLeftAltDown(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FInputEvent GetInput() {
		return memory.read<struct FInputEvent>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FBoneIsChildOf
{
public:
	FBoneIsChildOf(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FName GetParentBoneName() {
		return memory.read<struct FName>(m_addr + 8);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetBoneName
{
public:
	FGetBoneName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetBoneIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct FName GetReturnValue() {
		return memory.read<struct FName>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetCurrentSkinWeightProfileName
{
public:
	FGetCurrentSkinWeightProfileName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetReturnValue() {
		return memory.read<struct FName>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetNumBones
{
public:
	FGetNumBones(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FFindCameraModifierByClass
{
public:
	FFindCameraModifierByClass(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UCameraModifier GetModifierClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return UCameraModifier(ptr_addr);
	}
	struct UCameraModifier GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UCameraModifier(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetSocketBoneName
{
public:
	FGetSocketBoneName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetInSocketName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FName GetReturnValue() {
		return memory.read<struct FName>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetTwistAndSwingAngleOfDeltaRotationFromRefPose
{
public:
	FGetTwistAndSwingAngleOfDeltaRotationFromRefPose(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	float GetOutTwistAngle() {
		return memory.read<float>(m_addr + 8);
	}
	float GetOutSwingAngle() {
		return memory.read<float>(m_addr + 12);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetCastCapsuleIndirectShadow
{
public:
	FSetCastCapsuleIndirectShadow(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbNewValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetMasterPoseComponent
{
public:
	FSetMasterPoseComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USkinnedMeshComponent GetNewMasterBoneComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct USkinnedMeshComponent(ptr_addr);
	}
	bool GetbForceUpdate() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetMinLOD
{
public:
	FSetMinLOD(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetInNewMinLOD() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FResetFloatSpringState
{
public:
	FResetFloatSpringState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FFloatSpringState GetSpringState() {
		return memory.read<struct FFloatSpringState>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetPhysicsAsset
{
public:
	FSetPhysicsAsset(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPhysicsAsset GetNewPhysicsAsset() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UPhysicsAsset(ptr_addr);
	}
	bool GetbForceReInit() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetPreSkinningOffsets
{
public:
	FSetPreSkinningOffsets(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetLODIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct TArray<struct FVector> GetOffsets() {
		return memory.read<struct TArray<struct FVector>>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetSkinWeightProfile
{
public:
	FSetSkinWeightProfile(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetInProfileName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetVertexOffsetUsage
{
public:
	FSetVertexOffsetUsage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetLODIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetUsage() {
		return memory.read<int32_t>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FShowMaterialSection
{
public:
	FShowMaterialSection(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetMaterialID() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetSectionIndex() {
		return memory.read<int32_t>(m_addr + 4);
	}
	bool GetbShow() {
		return memory.read<bool>(m_addr + 8);
	}
	int32_t GetLODIndex() {
		return memory.read<int32_t>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FEngineDir
{
public:
	FEngineDir(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FAddForceToAllBodiesBelow
{
public:
	FAddForceToAllBodiesBelow(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetForce() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 12);
	}
	bool GetbAccelChange() {
		return memory.read<bool>(m_addr + 20);
	}
	bool GetbIncludeSelf() {
		return memory.read<bool>(m_addr + 21);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_GetWorldSettings
{
public:
	FK2_GetWorldSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AWorldSettings GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AWorldSettings(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSpawnDialogue2D
{
public:
	FSpawnDialogue2D(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct UDialogueWave GetDialogue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UDialogueWave(ptr_addr);
	}
	struct FDialogueContext GetContext() {
		return memory.read<struct FDialogueContext>(m_addr + 16);
	}
	float GetVolumeMultiplier() {
		return memory.read<float>(m_addr + 40);
	}
	float GetPitchMultiplier() {
		return memory.read<float>(m_addr + 44);
	}
	float GetStartTime() {
		return memory.read<float>(m_addr + 48);
	}
	bool GetbAutoDestroy() {
		return memory.read<bool>(m_addr + 52);
	}
	struct UAudioComponent GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct UAudioComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FAllowAnimCurveEvaluation
{
public:
	FAllowAnimCurveEvaluation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetNameOfCurve() {
		return memory.read<struct FName>(m_addr + 0);
	}
	bool GetbAllow() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FEqualEqual_IntInt
{
public:
	FEqualEqual_IntInt(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetA() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetB() {
		return memory.read<int32_t>(m_addr + 4);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FFindConstraintBoneName
{
public:
	FFindConstraintBoneName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetConstraintIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct FName GetReturnValue() {
		return memory.read<struct FName>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsReversing
{
public:
	FIsReversing(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetAllowRigidBodyAnimNode
{
public:
	FGetAllowRigidBodyAnimNode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetAnimClass
{
public:
	FGetAnimClass(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UObject GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return UObject(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FMaxOfByteArray
{
public:
	FMaxOfByteArray(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<char> GetByteArray() {
		return memory.read<struct TArray<char>>(m_addr + 0);
	}
	int32_t GetIndexOfMaxValue() {
		return memory.read<int32_t>(m_addr + 16);
	}
	char GetMaxValue() {
		return memory.read<char>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetClothingSimulationInteractor
{
public:
	FGetClothingSimulationInteractor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UClothingSimulationInteractor GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UClothingSimulationInteractor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetClothMaxDistanceScale
{
public:
	FGetClothMaxDistanceScale(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FResetBoneTransformByName
{
public:
	FResetBoneTransformByName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FMatrix_TransformVector
{
public:
	FMatrix_TransformVector(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMatrix GetM() {
		return memory.read<struct FMatrix>(m_addr + 0);
	}
	struct FVector GetV() {
		return memory.read<struct FVector>(m_addr + 64);
	}
	struct FVector4 GetReturnValue() {
		return memory.read<struct FVector4>(m_addr + 80);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetDisableAnimCurves
{
public:
	FGetDisableAnimCurves(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetMorphTarget
{
public:
	FGetMorphTarget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetMorphTargetName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetPosition
{
public:
	FGetPosition(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FStopRecordingOutput
{
public:
	FStopRecordingOutput(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	enum class EAudioRecordingExportType GetExportType() {
		return memory.read<enum class EAudioRecordingExportType>(m_addr + 8);
	}
	struct FString GetName() {
		return memory.read<struct FString>(m_addr + 16);
	}
	struct FString GetPath() {
		return memory.read<struct FString>(m_addr + 32);
	}
	struct USoundWave GetExistingSoundWaveToOverwrite() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct USoundWave(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FConv_IntToString
{
public:
	FConv_IntToString(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetinInt() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetTeleportRotationThreshold
{
public:
	FGetTeleportRotationThreshold(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FPlayDialogueAtLocation
{
public:
	FPlayDialogueAtLocation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct UDialogueWave GetDialogue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UDialogueWave(ptr_addr);
	}
	struct FDialogueContext GetContext() {
		return memory.read<struct FDialogueContext>(m_addr + 16);
	}
	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 40);
	}
	struct FRotator GetRotation() {
		return memory.read<struct FRotator>(m_addr + 52);
	}
	float GetVolumeMultiplier() {
		return memory.read<float>(m_addr + 64);
	}
	float GetPitchMultiplier() {
		return memory.read<float>(m_addr + 68);
	}
	float GetStartTime() {
		return memory.read<float>(m_addr + 72);
	}
	struct USoundAttenuation GetAttenuationSettings() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 80);
		return struct USoundAttenuation(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsClothingSimulationSuspended
{
public:
	FIsClothingSimulationSuspended(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetAllMotorsAngularDriveParams
{
public:
	FSetAllMotorsAngularDriveParams(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetInSpring() {
		return memory.read<float>(m_addr + 0);
	}
	float GetInDamping() {
		return memory.read<float>(m_addr + 4);
	}
	float GetInForceLimit() {
		return memory.read<float>(m_addr + 8);
	}
	bool GetbSkipCustomPhysicsType() {
		return memory.read<bool>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetAllowRigidBodyAnimNode
{
public:
	FSetAllowRigidBodyAnimNode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbInAllow() {
		return memory.read<bool>(m_addr + 0);
	}
	bool GetbReinitAnim() {
		return memory.read<bool>(m_addr + 1);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsCollisionFixApplied
{
public:
	FIsCollisionFixApplied(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetAngularLimits
{
public:
	FSetAngularLimits(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetInBoneName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	float GetSwing1LimitAngle() {
		return memory.read<float>(m_addr + 8);
	}
	float GetTwistLimitAngle() {
		return memory.read<float>(m_addr + 12);
	}
	float GetSwing2LimitAngle() {
		return memory.read<float>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetAnimation
{
public:
	FSetAnimation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimationAsset GetNewAnimToPlay() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimationAsset(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetBodyNotifyRigidBodyCollision
{
public:
	FSetBodyNotifyRigidBodyCollision(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbNewNotifyRigidBodyCollision() {
		return memory.read<bool>(m_addr + 0);
	}
	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetCinematicMode
{
public:
	FSetCinematicMode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbCinematicMode() {
		return memory.read<bool>(m_addr + 0);
	}
	bool GetbHidePlayer() {
		return memory.read<bool>(m_addr + 1);
	}
	bool GetbAffectsHUD() {
		return memory.read<bool>(m_addr + 2);
	}
	bool GetbAffectsMovement() {
		return memory.read<bool>(m_addr + 3);
	}
	bool GetbAffectsTurning() {
		return memory.read<bool>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetConstraintProfile
{
public:
	FSetConstraintProfile(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetJointName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FName GetProfileName() {
		return memory.read<struct FName>(m_addr + 8);
	}
	bool GetbDefaultIfNotFound() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetDisableAnimCurves
{
public:
	FSetDisableAnimCurves(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbInDisableAnimCurves() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FApplySettings
{
public:
	FApplySettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbCheckForCommandLineOverrides() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetEnableBodyGravity
{
public:
	FSetEnableBodyGravity(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbEnableGravity() {
		return memory.read<bool>(m_addr + 0);
	}
	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FTestServerLevelVisibilityChange
{
public:
	FTestServerLevelVisibilityChange(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetPackageName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FName GetFilename() {
		return memory.read<struct FName>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetNotifyRigidBodyCollisionBelow
{
public:
	FSetNotifyRigidBodyCollisionBelow(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbNewNotifyRigidBodyCollision() {
		return memory.read<bool>(m_addr + 0);
	}
	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 4);
	}
	bool GetbIncludeSelf() {
		return memory.read<bool>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FStartCameraShakeFromSource
{
public:
	FStartCameraShakeFromSource(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UCameraShakeBase GetShakeClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return UCameraShakeBase(ptr_addr);
	}
	struct UCameraShakeSourceComponent GetSourceComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UCameraShakeSourceComponent(ptr_addr);
	}
	float GetScale() {
		return memory.read<float>(m_addr + 16);
	}
	enum class ECameraShakePlaySpace GetPlaySpace() {
		return memory.read<enum class ECameraShakePlaySpace>(m_addr + 20);
	}
	struct FRotator GetUserPlaySpaceRot() {
		return memory.read<struct FRotator>(m_addr + 24);
	}
	struct UCameraShakeBase GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct UCameraShakeBase(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetPhysicsBlendWeight
{
public:
	FSetPhysicsBlendWeight(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetPhysicsBlendWeight() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetTeleportDistanceThreshold
{
public:
	FSetTeleportDistanceThreshold(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetThreshold() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetInscatteringTextureTint
{
public:
	FSetInscatteringTextureTint(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLinearColor GetValue() {
		return memory.read<struct FLinearColor>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FTermBodiesBelow
{
public:
	FTermBodiesBelow(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetParentBoneName() {
		return memory.read<struct FName>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSelectObject
{
public:
	FSelectObject(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetA() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct UObject GetB() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UObject(ptr_addr);
	}
	bool GetbSelectA() {
		return memory.read<bool>(m_addr + 16);
	}
	struct UObject GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 24);
		return struct UObject(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FCastToPlayerController
{
public:
	FCastToPlayerController(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APlayerController GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APlayerController(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FClientSetRotation
{
public:
	FClientSetRotation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRotator GetNewRotation() {
		return memory.read<struct FRotator>(m_addr + 0);
	}
	bool GetbResetCamera() {
		return memory.read<bool>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetViewTarget
{
public:
	FGetViewTarget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsLocalController
{
public:
	FIsLocalController(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetIsRequestingUnloadAndRemoval
{
public:
	FGetIsRequestingUnloadAndRemoval(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsLookInputIgnored
{
public:
	FIsLookInputIgnored(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsPlayerController
{
public:
	FIsPlayerController(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_GetPawn
{
public:
	FK2_GetPawn(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APawn GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APawn(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FLineOfSightTo
{
public:
	FLineOfSightTo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetOther() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}
	struct FVector GetViewPoint() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	bool GetbAlternateChecks() {
		return memory.read<bool>(m_addr + 20);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 21);
	}

private:
	std::uint64_t m_addr = 0;
};class FVector_BoundedToBox
{
public:
	FVector_BoundedToBox(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetInVect() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetInBoxMin() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	struct FVector GetInBoxMax() {
		return memory.read<struct FVector>(m_addr + 24);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 36);
	}

private:
	std::uint64_t m_addr = 0;
};class FReceivePossess
{
public:
	FReceivePossess(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APawn GetPossessedPawn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APawn(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetControlRotation
{
public:
	FSetControlRotation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRotator GetNewRotation() {
		return memory.read<struct FRotator>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FHasOption
{
public:
	FHasOption(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetOptions() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FString GetInKey() {
		return memory.read<struct FString>(m_addr + 16);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FActivateTouchInterface
{
public:
	FActivateTouchInterface(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTouchInterface GetNewTouchInterface() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UTouchInterface(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FAddPitchInput
{
public:
	FAddPitchInput(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetVal() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetPlayerController
{
public:
	FGetPlayerController(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	int32_t GetPlayerIndex() {
		return memory.read<int32_t>(m_addr + 8);
	}
	struct APlayerController GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct APlayerController(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FCamera
{
public:
	FCamera(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetNewMode() {
		return memory.read<struct FName>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FClientMessage
{
public:
	FClientMessage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetS() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FName GetType() {
		return memory.read<struct FName>(m_addr + 16);
	}
	float GetMsgLifeTime() {
		return memory.read<float>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetCurrentCulture
{
public:
	FSetCurrentCulture(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetCulture() {
		return memory.read<struct FString>(m_addr + 0);
	}
	bool GetSaveToConfig() {
		return memory.read<bool>(m_addr + 16);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 17);
	}

private:
	std::uint64_t m_addr = 0;
};class FClientMutePlayer
{
public:
	FClientMutePlayer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FUniqueNetIdRepl GetplayerId() {
		return memory.read<struct FUniqueNetIdRepl>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FClientPlayCameraAnim
{
public:
	FClientPlayCameraAnim(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UCameraAnim GetAnimToPlay() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UCameraAnim(ptr_addr);
	}
	float GetScale() {
		return memory.read<float>(m_addr + 8);
	}
	float GetRate() {
		return memory.read<float>(m_addr + 12);
	}
	float GetBlendInTime() {
		return memory.read<float>(m_addr + 16);
	}
	float GetBlendOutTime() {
		return memory.read<float>(m_addr + 20);
	}
	bool GetbLoop() {
		return memory.read<bool>(m_addr + 24);
	}
	bool GetbRandomStartTime() {
		return memory.read<bool>(m_addr + 25);
	}
	enum class ECameraShakePlaySpace GetSpace() {
		return memory.read<enum class ECameraShakePlaySpace>(m_addr + 26);
	}
	struct FRotator GetCustomPlaySpace() {
		return memory.read<struct FRotator>(m_addr + 28);
	}

private:
	std::uint64_t m_addr = 0;
};class FClientPrepareMapChange
{
public:
	FClientPrepareMapChange(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetLevelName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	bool GetbFirst() {
		return memory.read<bool>(m_addr + 8);
	}
	bool GetbLast() {
		return memory.read<bool>(m_addr + 9);
	}

private:
	std::uint64_t m_addr = 0;
};class FBlueprint_PredictProjectilePath_Advanced
{
public:
	FBlueprint_PredictProjectilePath_Advanced(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FPredictProjectilePathParams GetPredictParams() {
		return memory.read<struct FPredictProjectilePathParams>(m_addr + 8);
	}
	struct FPredictProjectilePathResult GetPredictResult() {
		return memory.read<struct FPredictProjectilePathResult>(m_addr + 104);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 288);
	}

private:
	std::uint64_t m_addr = 0;
};class FClientRestart
{
public:
	FClientRestart(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APawn GetNewPawn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APawn(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FClientRetryClientRestart
{
public:
	FClientRetryClientRestart(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APawn GetNewPawn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APawn(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetInstanceCount
{
public:
	FGetInstanceCount(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FClientSetCameraFade
{
public:
	FClientSetCameraFade(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbEnableFading() {
		return memory.read<bool>(m_addr + 0);
	}
	struct FColor GetFadeColor() {
		return memory.read<struct FColor>(m_addr + 4);
	}
	struct FVector2D GetFadeAlpha() {
		return memory.read<struct FVector2D>(m_addr + 8);
	}
	float GetFadeTime() {
		return memory.read<float>(m_addr + 16);
	}
	bool GetbFadeAudio() {
		return memory.read<bool>(m_addr + 20);
	}
	bool GetbHoldWhenFinished() {
		return memory.read<bool>(m_addr + 21);
	}

private:
	std::uint64_t m_addr = 0;
};class FConv_BoolToText
{
public:
	FConv_BoolToText(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetInBool() {
		return memory.read<bool>(m_addr + 0);
	}
	struct FText GetReturnValue() {
		return memory.read<struct FText>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FClientUpdateMultipleLevelsStreamingStatus
{
public:
	FClientUpdateMultipleLevelsStreamingStatus(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FUpdateLevelStreamingLevelStatus> GetLevelStatuses() {
		return memory.read<struct TArray<struct FUpdateLevelStreamingLevelStatus>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FClientSetCameraMode
{
public:
	FClientSetCameraMode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetNewCamMode() {
		return memory.read<struct FName>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FEqualEqual_Int64Int64
{
public:
	FEqualEqual_Int64Int64(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int64_t GetA() {
		return memory.read<int64_t>(m_addr + 0);
	}
	int64_t GetB() {
		return memory.read<int64_t>(m_addr + 8);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FClientSetCinematicMode
{
public:
	FClientSetCinematicMode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbInCinematicMode() {
		return memory.read<bool>(m_addr + 0);
	}
	bool GetbAffectsMovement() {
		return memory.read<bool>(m_addr + 1);
	}
	bool GetbAffectsTurning() {
		return memory.read<bool>(m_addr + 2);
	}
	bool GetbAffectsHUD() {
		return memory.read<bool>(m_addr + 3);
	}

private:
	std::uint64_t m_addr = 0;
};class FClientSetHUD
{
public:
	FClientSetHUD(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	AHUD GetNewHUDClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return AHUD(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FQuat_VectorRight
{
public:
	FQuat_VectorRight(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FQuat GetQ() {
		return memory.read<struct FQuat>(m_addr + 0);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FClientSetSpectatorWaiting
{
public:
	FClientSetSpectatorWaiting(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbWaiting() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FClientStartCameraShake
{
public:
	FClientStartCameraShake(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UCameraShakeBase GetShake() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return UCameraShakeBase(ptr_addr);
	}
	float GetScale() {
		return memory.read<float>(m_addr + 8);
	}
	enum class ECameraShakePlaySpace GetPlaySpace() {
		return memory.read<enum class ECameraShakePlaySpace>(m_addr + 12);
	}
	struct FRotator GetUserPlaySpaceRot() {
		return memory.read<struct FRotator>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FClientStopCameraAnim
{
public:
	FClientStopCameraAnim(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UCameraAnim GetAnimToStop() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UCameraAnim(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetPostProcessingQuality
{
public:
	FGetPostProcessingQuality(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FClientTravelInternal
{
public:
	FClientTravelInternal(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetURL() {
		return memory.read<struct FString>(m_addr + 0);
	}
	enum class ETravelType GetTravelType() {
		return memory.read<enum class ETravelType>(m_addr + 16);
	}
	bool GetbSeamless() {
		return memory.read<bool>(m_addr + 17);
	}
	struct FGuid GetMapPackageGuid() {
		return memory.read<struct FGuid>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FClientWasKicked
{
public:
	FClientWasKicked(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetKickReason() {
		return memory.read<struct FText>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetSkeletalMeshComponent
{
public:
	FSetSkeletalMeshComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USkeletalMeshComponent GetInSkeletalMeshComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct USkeletalMeshComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetViewportSize
{
public:
	FGetViewportSize(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetSizeX() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetSizeY() {
		return memory.read<int32_t>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FVector_IsNAN
{
public:
	FVector_IsNAN(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetA() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FDeprojectMousePositionToWorld
{
public:
	FDeprojectMousePositionToWorld(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetWorldLocation() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetWorldDirection() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FDeprojectScreenPositionToWorld
{
public:
	FDeprojectScreenPositionToWorld(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetScreenX() {
		return memory.read<float>(m_addr + 0);
	}
	float GetScreenY() {
		return memory.read<float>(m_addr + 4);
	}
	struct FVector GetWorldLocation() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	struct FVector GetWorldDirection() {
		return memory.read<struct FVector>(m_addr + 20);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetShadowDistanceFadeoutFraction
{
public:
	FSetShadowDistanceFadeoutFraction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetShadingQuality
{
public:
	FGetShadingQuality(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FFOV
{
public:
	FFOV(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewFOV() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FPrimeSound
{
public:
	FPrimeSound(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USoundBase GetInSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct USoundBase(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetFocalLocation
{
public:
	FGetFocalLocation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCreateStaticMeshDescription
{
public:
	FCreateStaticMeshDescription(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetOuter() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct UStaticMeshDescription GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UStaticMeshDescription(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetTargetRotation
{
public:
	FGetTargetRotation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRotator GetReturnValue() {
		return memory.read<struct FRotator>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetHitResultUnderFinger
{
public:
	FGetHitResultUnderFinger(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class ETouchIndex GetFingerIndex() {
		return memory.read<enum class ETouchIndex>(m_addr + 0);
	}
	enum class ECollisionChannel GetTraceChannel() {
		return memory.read<enum class ECollisionChannel>(m_addr + 1);
	}
	bool GetbTraceComplex() {
		return memory.read<bool>(m_addr + 2);
	}
	struct FHitResult GetHitResult() {
		return memory.read<struct FHitResult>(m_addr + 4);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 140);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetCapsuleRadius
{
public:
	FSetCapsuleRadius(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetRadius() {
		return memory.read<float>(m_addr + 0);
	}
	bool GetbUpdateOverlaps() {
		return memory.read<bool>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetHUD
{
public:
	FGetHUD(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AHUD GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AHUD(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetInputAnalogKeyState
{
public:
	FGetInputAnalogKeyState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKey GetKey() {
		return memory.read<struct FKey>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetInputAnalogStickState
{
public:
	FGetInputAnalogStickState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class EControllerAnalogStick GetWhichStick() {
		return memory.read<enum class EControllerAnalogStick>(m_addr + 0);
	}
	float GetStickX() {
		return memory.read<float>(m_addr + 4);
	}
	float GetStickY() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetMousePosition
{
public:
	FGetMousePosition(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetLocationX() {
		return memory.read<float>(m_addr + 0);
	}
	float GetLocationY() {
		return memory.read<float>(m_addr + 4);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FBugIt
{
public:
	FBugIt(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetScreenShotDescription() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_ClientPlayForceFeedback
{
public:
	FK2_ClientPlayForceFeedback(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UForceFeedbackEffect GetForceFeedbackEffect() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UForceFeedbackEffect(ptr_addr);
	}
	struct FName GetTag() {
		return memory.read<struct FName>(m_addr + 8);
	}
	bool GetbLooping() {
		return memory.read<bool>(m_addr + 16);
	}
	bool GetbIgnoreTimeDilation() {
		return memory.read<bool>(m_addr + 17);
	}
	bool GetbPlayWhilePaused() {
		return memory.read<bool>(m_addr + 18);
	}

private:
	std::uint64_t m_addr = 0;
};class FConv_FloatToText
{
public:
	FConv_FloatToText(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetValue() {
		return memory.read<float>(m_addr + 0);
	}
	enum class ERoundingMode GetRoundingMode() {
		return memory.read<enum class ERoundingMode>(m_addr + 4);
	}
	bool GetbAlwaysSign() {
		return memory.read<bool>(m_addr + 5);
	}
	bool GetbUseGrouping() {
		return memory.read<bool>(m_addr + 6);
	}
	int32_t GetMinimumIntegralDigits() {
		return memory.read<int32_t>(m_addr + 8);
	}
	int32_t GetMaximumIntegralDigits() {
		return memory.read<int32_t>(m_addr + 12);
	}
	int32_t GetMinimumFractionalDigits() {
		return memory.read<int32_t>(m_addr + 16);
	}
	int32_t GetMaximumFractionalDigits() {
		return memory.read<int32_t>(m_addr + 20);
	}
	struct FText GetReturnValue() {
		return memory.read<struct FText>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnServerStartedVisualLogger
{
public:
	FOnServerStartedVisualLogger(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbIsLogging() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FPlayHapticEffect
{
public:
	FPlayHapticEffect(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UHapticFeedbackEffect_Base GetHapticEffect() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UHapticFeedbackEffect_Base(ptr_addr);
	}
	enum class EControllerHand GetHand() {
		return memory.read<enum class EControllerHand>(m_addr + 8);
	}
	float GetScale() {
		return memory.read<float>(m_addr + 12);
	}
	bool GetbLoop() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetRayleighExponentialDistribution
{
public:
	FSetRayleighExponentialDistribution(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetPostProcessingQuality
{
public:
	FSetPostProcessingQuality(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSendToConsole
{
public:
	FSendToConsole(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetCommand() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FPlayDialogue2D
{
public:
	FPlayDialogue2D(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct UDialogueWave GetDialogue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UDialogueWave(ptr_addr);
	}
	struct FDialogueContext GetContext() {
		return memory.read<struct FDialogueContext>(m_addr + 16);
	}
	float GetVolumeMultiplier() {
		return memory.read<float>(m_addr + 40);
	}
	float GetPitchMultiplier() {
		return memory.read<float>(m_addr + 44);
	}
	float GetStartTime() {
		return memory.read<float>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};class FServerExec
{
public:
	FServerExec(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetMsg() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FServerSetSpectatorWaiting
{
public:
	FServerSetSpectatorWaiting(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbWaiting() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FChangeSize
{
public:
	FChangeSize(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetF() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FServerUpdateCamera
{
public:
	FServerUpdateCamera(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector_NetQuantize GetCamLoc() {
		return memory.read<struct FVector_NetQuantize>(m_addr + 0);
	}
	int32_t GetCamPitchAndYaw() {
		return memory.read<int32_t>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetHapticsByValue
{
public:
	FSetHapticsByValue(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetFrequency() {
		return memory.read<float>(m_addr + 0);
	}
	float GetAmplitude() {
		return memory.read<float>(m_addr + 4);
	}
	enum class EControllerHand GetHand() {
		return memory.read<enum class EControllerHand>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetMouseCursorWidget
{
public:
	FSetMouseCursorWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class EMouseCursor GetCursor() {
		return memory.read<enum class EMouseCursor>(m_addr + 0);
	}
	struct UUserWidget GetCursorWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UUserWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetMouseLocation
{
public:
	FSetMouseLocation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetX() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetY() {
		return memory.read<int32_t>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FStartFire
{
public:
	FStartFire(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	char GetFireModeNum() {
		return memory.read<char>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FStopHapticEffect
{
public:
	FStopHapticEffect(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class EControllerHand GetHand() {
		return memory.read<enum class EControllerHand>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsOnlyASpectator
{
public:
	FIsOnlyASpectator(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FMaxOfIntArray
{
public:
	FMaxOfIntArray(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<int32_t> GetIntArray() {
		return memory.read<struct TArray<int32_t>>(m_addr + 0);
	}
	int32_t GetIndexOfMaxValue() {
		return memory.read<int32_t>(m_addr + 16);
	}
	int32_t GetMaxValue() {
		return memory.read<int32_t>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FReceiveOverrideWith
{
public:
	FReceiveOverrideWith(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APlayerState GetOldPlayerState() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APlayerState(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetOrthoFarClipPlane
{
public:
	FSetOrthoFarClipPlane(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetInOrthoFarClipPlane() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetOrthoWidth
{
public:
	FSetOrthoWidth(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetInOrthoWidth() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FTransformDirection
{
public:
	FTransformDirection(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTransform GetT() {
		return memory.read<struct FTransform>(m_addr + 0);
	}
	struct FVector GetDirection() {
		return memory.read<struct FVector>(m_addr + 48);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 60);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetLightColor
{
public:
	FGetLightColor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLinearColor GetReturnValue() {
		return memory.read<struct FLinearColor>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetStartDistance
{
public:
	FSetStartDistance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetAffectReflectionNoRayTracing
{
public:
	FSetAffectReflectionNoRayTracing(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbNewValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGreater_DateTimeDateTime
{
public:
	FGreater_DateTimeDateTime(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDateTime GetA() {
		return memory.read<struct FDateTime>(m_addr + 0);
	}
	struct FDateTime GetB() {
		return memory.read<struct FDateTime>(m_addr + 8);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetCastDeepShadow
{
public:
	FSetCastDeepShadow(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbNewValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetBloomScale
{
public:
	FSetBloomScale(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetBloomTint
{
public:
	FSetBloomTint(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FColor GetNewValue() {
		return memory.read<struct FColor>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetForceCachedShadowsForMovablePrimitives
{
public:
	FSetForceCachedShadowsForMovablePrimitives(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbNewValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FFindSubstring
{
public:
	FFindSubstring(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetSearchIn() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FString GetSubstring() {
		return memory.read<struct FString>(m_addr + 16);
	}
	bool GetbUseCase() {
		return memory.read<bool>(m_addr + 32);
	}
	bool GetbSearchFromEnd() {
		return memory.read<bool>(m_addr + 33);
	}
	int32_t GetStartPosition() {
		return memory.read<int32_t>(m_addr + 36);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetIESTexture
{
public:
	FSetIESTexture(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTextureLightProfile GetNewValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UTextureLightProfile(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetIndirectLightingIntensity
{
public:
	FSetIndirectLightingIntensity(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewIntensity() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetLightColor
{
public:
	FSetLightColor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLinearColor GetNewLightColor() {
		return memory.read<struct FLinearColor>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FNegateVector
{
public:
	FNegateVector(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetA() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetLightFunctionFadeDistance
{
public:
	FSetLightFunctionFadeDistance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewLightFunctionFadeDistance() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetLightFunctionMaterial
{
public:
	FSetLightFunctionMaterial(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UMaterialInterface GetNewLightFunctionMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UMaterialInterface(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetLightFunctionScale
{
public:
	FSetLightFunctionScale(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetNewLightFunctionScale() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FVector_Set
{
public:
	FVector_Set(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetA() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	float GetX() {
		return memory.read<float>(m_addr + 12);
	}
	float GetY() {
		return memory.read<float>(m_addr + 16);
	}
	float GetZ() {
		return memory.read<float>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetMinRoughness
{
public:
	FSetMinRoughness(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetShadowSlopeBias
{
public:
	FSetShadowSlopeBias(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIntPoint_Left
{
public:
	FIntPoint_Left(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FIntPoint GetReturnValue() {
		return memory.read<struct FIntPoint>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetSpecularScale
{
public:
	FSetSpecularScale(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FAtan
{
public:
	FAtan(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetA() {
		return memory.read<float>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetTransmission
{
public:
	FSetTransmission(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbNewValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetUseIESBrightness
{
public:
	FSetUseIESBrightness(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbNewValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetUseTemperature
{
public:
	FSetUseTemperature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbNewValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetVolumetricScatteringIntensity
{
public:
	FSetVolumetricScatteringIntensity(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewIntensity() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FAnd_Int64Int64
{
public:
	FAnd_Int64Int64(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int64_t GetA() {
		return memory.read<int64_t>(m_addr + 0);
	}
	int64_t GetB() {
		return memory.read<int64_t>(m_addr + 8);
	}
	int64_t GetReturnValue() {
		return memory.read<int64_t>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetUnitsConversionFactor
{
public:
	FGetUnitsConversionFactor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class ELightUnits GetSrcUnits() {
		return memory.read<enum class ELightUnits>(m_addr + 0);
	}
	enum class ELightUnits GetTargetUnits() {
		return memory.read<enum class ELightUnits>(m_addr + 1);
	}
	float GetCosHalfConeAngle() {
		return memory.read<float>(m_addr + 4);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetAttenuationRadius
{
public:
	FSetAttenuationRadius(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewRadius() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FInvertAxisKey
{
public:
	FInvertAxisKey(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKey GetAxisKey() {
		return memory.read<struct FKey>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetIntensityUnits
{
public:
	FSetIntensityUnits(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class ELightUnits GetNewIntensityUnits() {
		return memory.read<enum class ELightUnits>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetSoftSourceRadius
{
public:
	FSetSoftSourceRadius(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetbNewValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FMakeHitResult
{
public:
	FMakeHitResult(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbBlockingHit() {
		return memory.read<bool>(m_addr + 0);
	}
	bool GetbInitialOverlap() {
		return memory.read<bool>(m_addr + 1);
	}
	float GetTime() {
		return memory.read<float>(m_addr + 4);
	}
	float GetDistance() {
		return memory.read<float>(m_addr + 8);
	}
	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	struct FVector GetImpactPoint() {
		return memory.read<struct FVector>(m_addr + 24);
	}
	struct FVector GetNormal() {
		return memory.read<struct FVector>(m_addr + 36);
	}
	struct FVector GetImpactNormal() {
		return memory.read<struct FVector>(m_addr + 48);
	}
	struct UPhysicalMaterial GetPhysMat() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 64);
		return struct UPhysicalMaterial(ptr_addr);
	}
	struct AActor GetHitActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return struct AActor(ptr_addr);
	}
	struct UPrimitiveComponent GetHitComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 80);
		return struct UPrimitiveComponent(ptr_addr);
	}
	struct FName GetHitBoneName() {
		return memory.read<struct FName>(m_addr + 88);
	}
	int32_t GetHitItem() {
		return memory.read<int32_t>(m_addr + 96);
	}
	int32_t GetElementIndex() {
		return memory.read<int32_t>(m_addr + 100);
	}
	int32_t GetFaceIndex() {
		return memory.read<int32_t>(m_addr + 104);
	}
	struct FVector GetTraceStart() {
		return memory.read<struct FVector>(m_addr + 108);
	}
	struct FVector GetTraceEnd() {
		return memory.read<struct FVector>(m_addr + 120);
	}
	struct FHitResult GetReturnValue() {
		return memory.read<struct FHitResult>(m_addr + 132);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetInnerConeAngle
{
public:
	FSetInnerConeAngle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewInnerConeAngle() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FTan
{
public:
	FTan(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetA() {
		return memory.read<float>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetOuterConeAngle
{
public:
	FSetOuterConeAngle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewOuterConeAngle() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FApplyResolutionSettings
{
public:
	FApplyResolutionSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbCheckForCommandLineOverrides() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSqrt
{
public:
	FSqrt(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetA() {
		return memory.read<float>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FEnableHDRDisplayOutput
{
public:
	FEnableHDRDisplayOutput(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbEnable() {
		return memory.read<bool>(m_addr + 0);
	}
	int32_t GetDisplayNits() {
		return memory.read<int32_t>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetAudioQualityLevel
{
public:
	FGetAudioQualityLevel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetDefaultDisplayMonitorIndex
{
public:
	FGetDefaultDisplayMonitorIndex(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetSourceWidth
{
public:
	FSetSourceWidth(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetbNewValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetDefaultResolution
{
public:
	FGetDefaultResolution(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FIntPoint GetReturnValue() {
		return memory.read<struct FIntPoint>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FRGBToHSV_Vector
{
public:
	FRGBToHSV_Vector(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLinearColor GetRGB() {
		return memory.read<struct FLinearColor>(m_addr + 0);
	}
	struct FLinearColor GetHSV() {
		return memory.read<struct FLinearColor>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetDefaultResolutionScale
{
public:
	FGetDefaultResolutionScale(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetDefaultWindowPosition
{
public:
	FGetDefaultWindowPosition(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FIntPoint GetReturnValue() {
		return memory.read<struct FIntPoint>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FVectorSpringInterp
{
public:
	FVectorSpringInterp(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetCurrent() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetTarget() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	struct FVectorSpringState GetSpringState() {
		return memory.read<struct FVectorSpringState>(m_addr + 24);
	}
	float GetStiffness() {
		return memory.read<float>(m_addr + 48);
	}
	float GetCriticalDampingFactor() {
		return memory.read<float>(m_addr + 52);
	}
	float GetDeltaTime() {
		return memory.read<float>(m_addr + 56);
	}
	float GetMass() {
		return memory.read<float>(m_addr + 60);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetDisplayMonitorIndex
{
public:
	FGetDisplayMonitorIndex(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetFramePace
{
public:
	FGetFramePace(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FWeightedMovingAverage_FRotator
{
public:
	FWeightedMovingAverage_FRotator(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRotator GetCurrentSample() {
		return memory.read<struct FRotator>(m_addr + 0);
	}
	struct FRotator GetPreviousSample() {
		return memory.read<struct FRotator>(m_addr + 12);
	}
	float Getweight() {
		return memory.read<float>(m_addr + 24);
	}
	struct FRotator GetReturnValue() {
		return memory.read<struct FRotator>(m_addr + 28);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetGraphicOptionQuality
{
public:
	FGetGraphicOptionQuality(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetLastConfirmedFullscreenMode
{
public:
	FGetLastConfirmedFullscreenMode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class EWindowMode GetReturnValue() {
		return memory.read<enum class EWindowMode>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetOverallScalabilityLevel
{
public:
	FGetOverallScalabilityLevel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetPreferredFullscreenMode
{
public:
	FGetPreferredFullscreenMode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class EWindowMode GetReturnValue() {
		return memory.read<enum class EWindowMode>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetResolutionScaleInformationEx
{
public:
	FGetResolutionScaleInformationEx(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetCurrentScaleNormalized() {
		return memory.read<float>(m_addr + 0);
	}
	float GetCurrentScaleValue() {
		return memory.read<float>(m_addr + 4);
	}
	float GetMinScaleValue() {
		return memory.read<float>(m_addr + 8);
	}
	float GetMaxScaleValue() {
		return memory.read<float>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetResolutionScaleNormalized
{
public:
	FGetResolutionScaleNormalized(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetShadowQuality
{
public:
	FGetShadowQuality(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetTextureQuality
{
public:
	FGetTextureQuality(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetViewDistanceQuality
{
public:
	FGetViewDistanceQuality(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetVisualEffectQuality
{
public:
	FGetVisualEffectQuality(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsPolyglotDataValid
{
public:
	FIsPolyglotDataValid(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FPolyglotTextData GetPolyglotData() {
		return memory.read<struct FPolyglotTextData>(m_addr + 0);
	}
	bool GetIsValid() {
		return memory.read<bool>(m_addr + 184);
	}
	struct FText GetErrorMessage() {
		return memory.read<struct FText>(m_addr + 192);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsDirty
{
public:
	FIsDirty(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetTargetLocationAndRotation
{
public:
	FSetTargetLocationAndRotation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetNewLocation() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FRotator GetNewRotation() {
		return memory.read<struct FRotator>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FNormal2D
{
public:
	FNormal2D(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector2D GetA() {
		return memory.read<struct FVector2D>(m_addr + 0);
	}
	struct FVector2D GetReturnValue() {
		return memory.read<struct FVector2D>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsDynamicResolutionDirty
{
public:
	FIsDynamicResolutionDirty(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsFullscreenModeDirty
{
public:
	FIsFullscreenModeDirty(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsHDREnabled
{
public:
	FIsHDREnabled(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsScreenResolutionDirty
{
public:
	FIsScreenResolutionDirty(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetPhysicalMaterialFromMap
{
public:
	FGetPhysicalMaterialFromMap(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct UPhysicalMaterial GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UPhysicalMaterial(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsVSyncEnabled
{
public:
	FIsVSyncEnabled(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FLoadSettings
{
public:
	FLoadSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbForceReload() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetAntiAliasingQuality
{
public:
	FSetAntiAliasingQuality(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetDynamicResolutionEnabled
{
public:
	FSetDynamicResolutionEnabled(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbEnable() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetTotalMilliseconds
{
public:
	FGetTotalMilliseconds(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTimespan GetA() {
		return memory.read<struct FTimespan>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetFrameRateLimit
{
public:
	FSetFrameRateLimit(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewLimit() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FArray_LastIndex
{
public:
	FArray_LastIndex(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<int32_t> GetTargetArray() {
		return memory.read<struct TArray<int32_t>>(m_addr + 0);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetVSyncEnabled
{
public:
	FSetVSyncEnabled(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbEnable() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetFullscreenMode
{
public:
	FSetFullscreenMode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class EWindowMode GetInFullscreenMode() {
		return memory.read<enum class EWindowMode>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetCustomDataValue
{
public:
	FSetCustomDataValue(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetInstanceIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetCustomDataIndex() {
		return memory.read<int32_t>(m_addr + 4);
	}
	float GetCustomDataValue() {
		return memory.read<float>(m_addr + 8);
	}
	bool GetbMarkRenderStateDirty() {
		return memory.read<bool>(m_addr + 12);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 13);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetGraphicOptionQuality
{
public:
	FSetGraphicOptionQuality(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetResolutionScaleNormalized
{
public:
	FSetResolutionScaleNormalized(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewScaleNormalized() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FPointerEvent_IsMouseButtonDown
{
public:
	FPointerEvent_IsMouseButtonDown(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FPointerEvent GetInput() {
		return memory.read<struct FPointerEvent>(m_addr + 0);
	}
	struct FKey GetMouseButton() {
		return memory.read<struct FKey>(m_addr + 112);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 136);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetResolutionScaleValue
{
public:
	FSetResolutionScaleValue(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetNewScaleValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIntPoint_Down
{
public:
	FIntPoint_Down(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FIntPoint GetReturnValue() {
		return memory.read<struct FIntPoint>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetScreenResolution
{
public:
	FSetScreenResolution(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FIntPoint GetResolution() {
		return memory.read<struct FIntPoint>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FProject
{
public:
	FProject(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetViewDistanceQuality
{
public:
	FSetViewDistanceQuality(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FPaintVerticesLerpAlongAxis
{
public:
	FPaintVerticesLerpAlongAxis(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UStaticMeshComponent GetStaticMeshComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UStaticMeshComponent(ptr_addr);
	}
	struct FLinearColor GetStartColor() {
		return memory.read<struct FLinearColor>(m_addr + 8);
	}
	struct FLinearColor GetEndColor() {
		return memory.read<struct FLinearColor>(m_addr + 24);
	}
	enum class EVertexPaintAxis GetAxis() {
		return memory.read<enum class EVertexPaintAxis>(m_addr + 40);
	}
	bool GetbConvertToSRGB() {
		return memory.read<bool>(m_addr + 41);
	}

private:
	std::uint64_t m_addr = 0;
};class FConv_Int64ToInt
{
public:
	FConv_Int64ToInt(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int64_t GetinInt() {
		return memory.read<int64_t>(m_addr + 0);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetVisualEffectQuality
{
public:
	FSetVisualEffectQuality(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FVector2D_Unit45Deg
{
public:
	FVector2D_Unit45Deg(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector2D GetReturnValue() {
		return memory.read<struct FVector2D>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FAdd_VectorFloat
{
public:
	FAdd_VectorFloat(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetA() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	float GetB() {
		return memory.read<float>(m_addr + 12);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSupportsHDRDisplayOutput
{
public:
	FSupportsHDRDisplayOutput(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetLODSyncDebugText
{
public:
	FGetLODSyncDebugText(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FConv_VectorToRotator
{
public:
	FConv_VectorToRotator(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetInVec() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FRotator GetReturnValue() {
		return memory.read<struct FRotator>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FAsyncLoadPrimaryAssetClassList
{
public:
	FAsyncLoadPrimaryAssetClassList(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct TArray<struct FPrimaryAssetId> GetPrimaryAssetList() {
		return memory.read<struct TArray<struct FPrimaryAssetId>>(m_addr + 8);
	}
	struct TArray<struct FName> GetLoadBundles() {
		return memory.read<struct TArray<struct FName>>(m_addr + 24);
	}
	struct UAsyncActionLoadPrimaryAssetClassList GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct UAsyncActionLoadPrimaryAssetClassList(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FBugItStringCreator
{
public:
	FBugItStringCreator(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetViewLocation() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FRotator GetViewRotation() {
		return memory.read<struct FRotator>(m_addr + 12);
	}
	struct FString GetGoString() {
		return memory.read<struct FString>(m_addr + 24);
	}
	struct FString GetLocString() {
		return memory.read<struct FString>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};class FCheatScript
{
public:
	FCheatScript(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetScriptName() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FDamageTarget
{
public:
	FDamageTarget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetDamageAmount() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FScheduleLocalNotificationFromNow
{
public:
	FScheduleLocalNotificationFromNow(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetinSecondsFromNow() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct FText GetTitle() {
		return memory.read<struct FText>(m_addr + 8);
	}
	struct FText GetBody() {
		return memory.read<struct FText>(m_addr + 32);
	}
	struct FText GetAction() {
		return memory.read<struct FText>(m_addr + 56);
	}
	struct FString GetActivationEvent() {
		return memory.read<struct FString>(m_addr + 80);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 96);
	}

private:
	std::uint64_t m_addr = 0;
};class FDebugCapsuleSweepChannel
{
public:
	FDebugCapsuleSweepChannel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class ECollisionChannel GetChannel() {
		return memory.read<enum class ECollisionChannel>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FDebugCapsuleSweepSize
{
public:
	FDebugCapsuleSweepSize(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetHalfHeight() {
		return memory.read<float>(m_addr + 0);
	}
	float GetRadius() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FDestroyPawns
{
public:
	FDestroyPawns(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	APawn GetaClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return APawn(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FShowOnlyActorComponents
{
public:
	FShowOnlyActorComponents(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetInActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}
	bool GetbIncludeFromChildActors() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FNotEqual_BoolBool
{
public:
	FNotEqual_BoolBool(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetA() {
		return memory.read<bool>(m_addr + 0);
	}
	bool GetB() {
		return memory.read<bool>(m_addr + 1);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 2);
	}

private:
	std::uint64_t m_addr = 0;
};class FGeneratedConfigDir
{
public:
	FGeneratedConfigDir(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FFreezeFrame
{
public:
	FFreezeFrame(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetDelay() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FTextIsEmpty
{
public:
	FTextIsEmpty(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetInText() {
		return memory.read<struct FText>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnlyLoadLevel
{
public:
	FOnlyLoadLevel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetPackageName() {
		return memory.read<struct FName>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FVector_GetAbsMax
{
public:
	FVector_GetAbsMax(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetA() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FStreamLevelOut
{
public:
	FStreamLevelOut(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetPackageName() {
		return memory.read<struct FName>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetBeamTargetTangent
{
public:
	FSetBeamTargetTangent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetEmitterIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct FVector GetNewTangentPoint() {
		return memory.read<struct FVector>(m_addr + 4);
	}
	int32_t GetTargetIndex() {
		return memory.read<int32_t>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSummon
{
public:
	FSummon(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetClassName() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FViewActor
{
public:
	FViewActor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetActorName() {
		return memory.read<struct FName>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnActorEndPlay
{
public:
	FOnActorEndPlay(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}
	enum class EEndPlayReason GetEndPlayReason() {
		return memory.read<enum class EEndPlayReason>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FReadyToStartMatch
{
public:
	FReadyToStartMatch(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FViewClass
{
public:
	FViewClass(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	AActor GetDesiredClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetConsoleTarget
{
public:
	FSetConsoleTarget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetPlayerIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCos
{
public:
	FCos(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetA() {
		return memory.read<float>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FAddDebugText
{
public:
	FAddDebugText(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetDebugText() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct AActor GetSrcActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct AActor(ptr_addr);
	}
	float GetDuration() {
		return memory.read<float>(m_addr + 24);
	}
	struct FVector GetOffset() {
		return memory.read<struct FVector>(m_addr + 28);
	}
	struct FVector GetDesiredOffset() {
		return memory.read<struct FVector>(m_addr + 40);
	}
	struct FColor GetTextColor() {
		return memory.read<struct FColor>(m_addr + 52);
	}
	bool GetbSkipOverwriteCheck() {
		return memory.read<bool>(m_addr + 56);
	}
	bool GetbAbsoluteLocation() {
		return memory.read<bool>(m_addr + 57);
	}
	bool GetbKeepAttachedToActor() {
		return memory.read<bool>(m_addr + 58);
	}
	struct UFont GetInFont() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 64);
		return struct UFont(ptr_addr);
	}
	float GetFontScale() {
		return memory.read<float>(m_addr + 72);
	}
	bool GetbDrawShadow() {
		return memory.read<bool>(m_addr + 76);
	}

private:
	std::uint64_t m_addr = 0;
};class FDrawMaterial
{
public:
	FDrawMaterial(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UMaterialInterface GetMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UMaterialInterface(ptr_addr);
	}
	float GetScreenX() {
		return memory.read<float>(m_addr + 8);
	}
	float GetScreenY() {
		return memory.read<float>(m_addr + 12);
	}
	float GetScreenW() {
		return memory.read<float>(m_addr + 16);
	}
	float GetScreenH() {
		return memory.read<float>(m_addr + 20);
	}
	float GetMaterialU() {
		return memory.read<float>(m_addr + 24);
	}
	float GetMaterialV() {
		return memory.read<float>(m_addr + 28);
	}
	float GetMaterialUWidth() {
		return memory.read<float>(m_addr + 32);
	}
	float GetMaterialVHeight() {
		return memory.read<float>(m_addr + 36);
	}
	float GetScale() {
		return memory.read<float>(m_addr + 40);
	}
	bool GetbScalePosition() {
		return memory.read<bool>(m_addr + 44);
	}
	float GetRotation() {
		return memory.read<float>(m_addr + 48);
	}
	struct FVector2D GetRotPivot() {
		return memory.read<struct FVector2D>(m_addr + 52);
	}

private:
	std::uint64_t m_addr = 0;
};class FDrawMaterialSimple
{
public:
	FDrawMaterialSimple(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UMaterialInterface GetMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UMaterialInterface(ptr_addr);
	}
	float GetScreenX() {
		return memory.read<float>(m_addr + 8);
	}
	float GetScreenY() {
		return memory.read<float>(m_addr + 12);
	}
	float GetScreenW() {
		return memory.read<float>(m_addr + 16);
	}
	float GetScreenH() {
		return memory.read<float>(m_addr + 20);
	}
	float GetScale() {
		return memory.read<float>(m_addr + 24);
	}
	bool GetbScalePosition() {
		return memory.read<bool>(m_addr + 28);
	}

private:
	std::uint64_t m_addr = 0;
};class FRandomIntegerFromStream
{
public:
	FRandomIntegerFromStream(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetMax() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct FRandomStream GetStream() {
		return memory.read<struct FRandomStream>(m_addr + 4);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetWorldOriginLocation
{
public:
	FSetWorldOriginLocation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FIntVector GetNewLocation() {
		return memory.read<struct FIntVector>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FDrawText
{
public:
	FDrawText(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetText() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FLinearColor GetTextColor() {
		return memory.read<struct FLinearColor>(m_addr + 16);
	}
	float GetScreenX() {
		return memory.read<float>(m_addr + 32);
	}
	float GetScreenY() {
		return memory.read<float>(m_addr + 36);
	}
	struct UFont GetFont() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct UFont(ptr_addr);
	}
	float GetScale() {
		return memory.read<float>(m_addr + 48);
	}
	bool GetbScalePosition() {
		return memory.read<bool>(m_addr + 52);
	}

private:
	std::uint64_t m_addr = 0;
};class FDrawTexture
{
public:
	FDrawTexture(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTexture GetTexture() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UTexture(ptr_addr);
	}
	float GetScreenX() {
		return memory.read<float>(m_addr + 8);
	}
	float GetScreenY() {
		return memory.read<float>(m_addr + 12);
	}
	float GetScreenW() {
		return memory.read<float>(m_addr + 16);
	}
	float GetScreenH() {
		return memory.read<float>(m_addr + 20);
	}
	float GetTextureU() {
		return memory.read<float>(m_addr + 24);
	}
	float GetTextureV() {
		return memory.read<float>(m_addr + 28);
	}
	float GetTextureUWidth() {
		return memory.read<float>(m_addr + 32);
	}
	float GetTextureVHeight() {
		return memory.read<float>(m_addr + 36);
	}
	struct FLinearColor GetTintColor() {
		return memory.read<struct FLinearColor>(m_addr + 40);
	}
	enum class EBlendMode GetBlendMode() {
		return memory.read<enum class EBlendMode>(m_addr + 56);
	}
	float GetScale() {
		return memory.read<float>(m_addr + 60);
	}
	bool GetbScalePosition() {
		return memory.read<bool>(m_addr + 64);
	}
	float GetRotation() {
		return memory.read<float>(m_addr + 68);
	}
	struct FVector2D GetRotPivot() {
		return memory.read<struct FVector2D>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};class FDrawTextureSimple
{
public:
	FDrawTextureSimple(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTexture GetTexture() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UTexture(ptr_addr);
	}
	float GetScreenX() {
		return memory.read<float>(m_addr + 8);
	}
	float GetScreenY() {
		return memory.read<float>(m_addr + 12);
	}
	float GetScale() {
		return memory.read<float>(m_addr + 16);
	}
	bool GetbScalePosition() {
		return memory.read<bool>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetOwningPlayerController
{
public:
	FGetOwningPlayerController(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APlayerController GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APlayerController(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetTextSize
{
public:
	FGetTextSize(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetText() {
		return memory.read<struct FString>(m_addr + 0);
	}
	float GetOutWidth() {
		return memory.read<float>(m_addr + 16);
	}
	float GetOutHeight() {
		return memory.read<float>(m_addr + 20);
	}
	struct UFont GetFont() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 24);
		return struct UFont(ptr_addr);
	}
	float GetScale() {
		return memory.read<float>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FReceiveHitBoxBeginCursorOver
{
public:
	FReceiveHitBoxBeginCursorOver(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetBoxName() {
		return memory.read<struct FName>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FReceiveHitBoxClick
{
public:
	FReceiveHitBoxClick(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetBoxName() {
		return memory.read<struct FName>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetLinearXLimit
{
public:
	FSetLinearXLimit(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class ELinearConstraintMotion GetConstraintType() {
		return memory.read<enum class ELinearConstraintMotion>(m_addr + 0);
	}
	float GetLimitSize() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FReceiveHitBoxRelease
{
public:
	FReceiveHitBoxRelease(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetBoxName() {
		return memory.read<struct FName>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FToRounded2D
{
public:
	FToRounded2D(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector2D GetA() {
		return memory.read<struct FVector2D>(m_addr + 0);
	}
	struct FVector2D GetReturnValue() {
		return memory.read<struct FVector2D>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FShowDebug
{
public:
	FShowDebug(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetDebugType() {
		return memory.read<struct FName>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetOverlayArc
{
public:
	FSetOverlayArc(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetInOverlayArc() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FShowDebugForReticleTargetToggle
{
public:
	FShowDebugForReticleTargetToggle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	AActor GetDesiredClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetPhysicalMaterial
{
public:
	FGetPhysicalMaterial(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPhysicalMaterial GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UPhysicalMaterial(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FShowDebugToggleSubCategory
{
public:
	FShowDebugToggleSubCategory(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetCategory() {
		return memory.read<struct FName>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FRandomUnitVectorInConeInDegreesFromStream
{
public:
	FRandomUnitVectorInConeInDegreesFromStream(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetConeDir() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	float GetConeHalfAngleInDegrees() {
		return memory.read<float>(m_addr + 12);
	}
	struct FRandomStream GetStream() {
		return memory.read<struct FRandomStream>(m_addr + 16);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FMatrix_ContainsNaN
{
public:
	FMatrix_ContainsNaN(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMatrix GetM() {
		return memory.read<struct FMatrix>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};class FRemoteEvent
{
public:
	FRemoteEvent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetEventName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FLookUpAtRate
{
public:
	FLookUpAtRate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetRate() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetMieScattering
{
public:
	FSetMieScattering(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLinearColor GetNewValue() {
		return memory.read<struct FLinearColor>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FMoveRight
{
public:
	FMoveRight(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetVal() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FMoveUp_World
{
public:
	FMoveUp_World(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetVal() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetMatchState
{
public:
	FGetMatchState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetReturnValue() {
		return memory.read<struct FName>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FEqualEqual_TimespanTimespan
{
public:
	FEqualEqual_TimespanTimespan(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTimespan GetA() {
		return memory.read<struct FTimespan>(m_addr + 0);
	}
	struct FTimespan GetB() {
		return memory.read<struct FTimespan>(m_addr + 8);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsMatchInProgress
{
public:
	FIsMatchInProgress(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetTileCount
{
public:
	FGetTileCount(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FHasMarkedBit
{
public:
	FHasMarkedBit(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetData() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetNumBits() {
		return memory.read<int32_t>(m_addr + 4);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_OnSetMatchState
{
public:
	FK2_OnSetMatchState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetNewState() {
		return memory.read<struct FName>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FReadyToEndMatch
{
public:
	FReadyToEndMatch(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetAllActorsWithTag
{
public:
	FGetAllActorsWithTag(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FName GetTag() {
		return memory.read<struct FName>(m_addr + 8);
	}
	struct TArray<struct AActor> GetOutActors() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct TArray<struct AActor>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSay
{
public:
	FSay(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetMsg() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetCastInsetShadowForAllAttachments
{
public:
	FSetCastInsetShadowForAllAttachments(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPrimitiveComponent GetPrimitiveComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UPrimitiveComponent(ptr_addr);
	}
	bool GetbCastInsetShadow() {
		return memory.read<bool>(m_addr + 8);
	}
	bool GetbLightAttachmentsAsGroup() {
		return memory.read<bool>(m_addr + 9);
	}

private:
	std::uint64_t m_addr = 0;
};class FNormalizedDeltaRotator
{
public:
	FNormalizedDeltaRotator(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRotator GetA() {
		return memory.read<struct FRotator>(m_addr + 0);
	}
	struct FRotator GetB() {
		return memory.read<struct FRotator>(m_addr + 12);
	}
	struct FRotator GetReturnValue() {
		return memory.read<struct FRotator>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetLocalBounds
{
public:
	FGetLocalBounds(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetMin() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetMax() {
		return memory.read<struct FVector>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnRep_StaticMesh
{
public:
	FOnRep_StaticMesh(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UStaticMesh GetOldStaticMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UStaticMesh(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FConv_IntToText
{
public:
	FConv_IntToText(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetValue() {
		return memory.read<int32_t>(m_addr + 0);
	}
	bool GetbAlwaysSign() {
		return memory.read<bool>(m_addr + 4);
	}
	bool GetbUseGrouping() {
		return memory.read<bool>(m_addr + 5);
	}
	int32_t GetMinimumIntegralDigits() {
		return memory.read<int32_t>(m_addr + 8);
	}
	int32_t GetMaximumIntegralDigits() {
		return memory.read<int32_t>(m_addr + 12);
	}
	struct FText GetReturnValue() {
		return memory.read<struct FText>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetDistanceFieldSelfShadowBias
{
public:
	FSetDistanceFieldSelfShadowBias(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetVolumetricFogEmissive
{
public:
	FSetVolumetricFogEmissive(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLinearColor GetNewValue() {
		return memory.read<struct FLinearColor>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetForcedLodModel
{
public:
	FSetForcedLodModel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetNewForcedLodModel() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FAddInstance
{
public:
	FAddInstance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTransform GetInstanceTransform() {
		return memory.read<struct FTransform>(m_addr + 0);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};class FBatchUpdateInstancesTransforms
{
public:
	FBatchUpdateInstancesTransforms(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetStartInstanceIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct TArray<struct FTransform> GetNewInstancesTransforms() {
		return memory.read<struct TArray<struct FTransform>>(m_addr + 8);
	}
	bool GetbWorldSpace() {
		return memory.read<bool>(m_addr + 24);
	}
	bool GetbMarkRenderStateDirty() {
		return memory.read<bool>(m_addr + 25);
	}
	bool GetbTeleport() {
		return memory.read<bool>(m_addr + 26);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 27);
	}

private:
	std::uint64_t m_addr = 0;
};class FBlueprint_PredictProjectilePath_ByObjectType
{
public:
	FBlueprint_PredictProjectilePath_ByObjectType(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FHitResult GetOutHit() {
		return memory.read<struct FHitResult>(m_addr + 8);
	}
	struct TArray<struct FVector> GetOutPathPositions() {
		return memory.read<struct TArray<struct FVector>>(m_addr + 144);
	}
	struct FVector GetOutLastTraceDestination() {
		return memory.read<struct FVector>(m_addr + 160);
	}
	struct FVector GetStartPos() {
		return memory.read<struct FVector>(m_addr + 172);
	}
	struct FVector GetLaunchVelocity() {
		return memory.read<struct FVector>(m_addr + 184);
	}
	bool GetbTracePath() {
		return memory.read<bool>(m_addr + 196);
	}
	float GetProjectileRadius() {
		return memory.read<float>(m_addr + 200);
	}
	struct TArray<enum class EObjectTypeQuery> GetObjectTypes() {
		return memory.read<struct TArray<enum class EObjectTypeQuery>>(m_addr + 208);
	}
	bool GetbTraceComplex() {
		return memory.read<bool>(m_addr + 224);
	}
	struct TArray<struct AActor> GetActorsToIgnore() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 232);
		return struct TArray<struct AActor>(ptr_addr);
	}
	enum class EDrawDebugTrace GetDrawDebugType() {
		return memory.read<enum class EDrawDebugTrace>(m_addr + 248);
	}
	float GetDrawDebugTime() {
		return memory.read<float>(m_addr + 252);
	}
	float GetSimFrequency() {
		return memory.read<float>(m_addr + 256);
	}
	float GetMaxSimTime() {
		return memory.read<float>(m_addr + 260);
	}
	float GetOverrideGravityZ() {
		return memory.read<float>(m_addr + 264);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 268);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetDeviceOrientation
{
public:
	FGetDeviceOrientation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class EScreenOrientation GetReturnValue() {
		return memory.read<enum class EScreenOrientation>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetInstancesOverlappingBox
{
public:
	FGetInstancesOverlappingBox(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FBox GetBox() {
		return memory.read<struct FBox>(m_addr + 0);
	}
	bool GetbBoxInWorldSpace() {
		return memory.read<bool>(m_addr + 28);
	}
	struct TArray<int32_t> GetReturnValue() {
		return memory.read<struct TArray<int32_t>>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetInstancesOverlappingSphere
{
public:
	FGetInstancesOverlappingSphere(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetCenter() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	float GetRadius() {
		return memory.read<float>(m_addr + 12);
	}
	bool GetbSphereInWorldSpace() {
		return memory.read<bool>(m_addr + 16);
	}
	struct TArray<int32_t> GetReturnValue() {
		return memory.read<struct TArray<int32_t>>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FInvalidate
{
public:
	FInvalidate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FBoxSphereBounds GetWorldBounds() {
		return memory.read<struct FBoxSphereBounds>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetInstanceTransform
{
public:
	FGetInstanceTransform(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetInstanceIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct FTransform GetOutInstanceTransform() {
		return memory.read<struct FTransform>(m_addr + 16);
	}
	bool GetbWorldSpace() {
		return memory.read<bool>(m_addr + 64);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 65);
	}

private:
	std::uint64_t m_addr = 0;
};class FQuat_IsNormalized
{
public:
	FQuat_IsNormalized(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FQuat GetQ() {
		return memory.read<struct FQuat>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FScriptRunAssetExportTask
{
public:
	FScriptRunAssetExportTask(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAssetExportTask GetTask() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAssetExportTask(ptr_addr);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FRemoveInstance
{
public:
	FRemoveInstance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetInstanceIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetBaseMaterial
{
public:
	FGetBaseMaterial(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UMaterial GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UMaterial(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetParameterInfo
{
public:
	FGetParameterInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class EMaterialParameterAssociation GetAssociation() {
		return memory.read<enum class EMaterialParameterAssociation>(m_addr + 0);
	}
	struct FName GetParameterName() {
		return memory.read<struct FName>(m_addr + 4);
	}
	struct UMaterialFunctionInterface GetLayerFunction() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UMaterialFunctionInterface(ptr_addr);
	}
	struct FMaterialParameterInfo GetReturnValue() {
		return memory.read<struct FMaterialParameterInfo>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetPhysicalMaterialMask
{
public:
	FGetPhysicalMaterialMask(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPhysicalMaterialMask GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UPhysicalMaterialMask(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_DrawTriangle
{
public:
	FK2_DrawTriangle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTexture GetRenderTexture() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UTexture(ptr_addr);
	}
	struct TArray<struct FCanvasUVTri> GetTriangles() {
		return memory.read<struct TArray<struct FCanvasUVTri>>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetForceMipLevelsToBeResident
{
public:
	FSetForceMipLevelsToBeResident(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetOverrideForceMiplevelsToBeResident() {
		return memory.read<bool>(m_addr + 0);
	}
	bool GetbForceMiplevelsToBeResidentValue() {
		return memory.read<bool>(m_addr + 1);
	}
	float GetForceDuration() {
		return memory.read<float>(m_addr + 4);
	}
	int32_t GetCinematicTextureGroups() {
		return memory.read<int32_t>(m_addr + 8);
	}
	bool GetbFastResponse() {
		return memory.read<bool>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FIntPoint_Zero
{
public:
	FIntPoint_Zero(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FIntPoint GetReturnValue() {
		return memory.read<struct FIntPoint>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_GetScalarParameterValue
{
public:
	FK2_GetScalarParameterValue(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetParameterName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_GetTextureParameterValue
{
public:
	FK2_GetTextureParameterValue(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetParameterName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct UTexture GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UTexture(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_GetVectorParameterValue
{
public:
	FK2_GetVectorParameterValue(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetParameterName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FLinearColor GetReturnValue() {
		return memory.read<struct FLinearColor>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetMinimumLODForPlatforms
{
public:
	FGetMinimumLODForPlatforms(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<struct FName, int32_t> GetPlatformMinimumLODs() {
		return memory.read<struct TMap<struct FName, int32_t>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FDivide_Vector2DVector2D
{
public:
	FDivide_Vector2DVector2D(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector2D GetA() {
		return memory.read<struct FVector2D>(m_addr + 0);
	}
	struct FVector2D GetB() {
		return memory.read<struct FVector2D>(m_addr + 8);
	}
	struct FVector2D GetReturnValue() {
		return memory.read<struct FVector2D>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetPlayLength
{
public:
	FGetPlayLength(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetDefaultBlendOutTime
{
public:
	FGetDefaultBlendOutTime(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FVector_Distance2D
{
public:
	FVector_Distance2D(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector Getv1() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector Getv2() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FBooleanOR
{
public:
	FBooleanOR(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetA() {
		return memory.read<bool>(m_addr + 0);
	}
	bool GetB() {
		return memory.read<bool>(m_addr + 1);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 2);
	}

private:
	std::uint64_t m_addr = 0;
};class FOverridePSTemplate
{
public:
	FOverridePSTemplate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USkeletalMeshComponent GetMeshComp() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct USkeletalMeshComponent(ptr_addr);
	}
	struct UAnimSequenceBase GetAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UParticleSystem GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UParticleSystem(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetLength
{
public:
	FGetLength(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetAnimationAsset
{
public:
	FSetAnimationAsset(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimationAsset GetNewAsset() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAnimationAsset(ptr_addr);
	}
	bool GetbIsLooping() {
		return memory.read<bool>(m_addr + 8);
	}
	float GetInPlayRate() {
		return memory.read<float>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetBlendSpaceInput
{
public:
	FSetBlendSpaceInput(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetInBlendInput() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetLooping
{
public:
	FSetLooping(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbNewLooping() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetPlaying
{
public:
	FSetPlaying(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbIsPlaying() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FAsyncLoadGameFromSlot
{
public:
	FAsyncLoadGameFromSlot(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FString GetSlotName() {
		return memory.read<struct FString>(m_addr + 8);
	}
	int32_t GetUserIndex() {
		return memory.read<int32_t>(m_addr + 24);
	}
	struct UAsyncActionHandleSaveGame GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 32);
		return struct UAsyncActionHandleSaveGame(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FAsyncSaveGameToSlot
{
public:
	FAsyncSaveGameToSlot(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct USaveGame GetSaveGameObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct USaveGame(ptr_addr);
	}
	struct FString GetSlotName() {
		return memory.read<struct FString>(m_addr + 16);
	}
	int32_t GetUserIndex() {
		return memory.read<int32_t>(m_addr + 32);
	}
	struct UAsyncActionHandleSaveGame GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct UAsyncActionHandleSaveGame(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FAsyncLoadPrimaryAsset
{
public:
	FAsyncLoadPrimaryAsset(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FPrimaryAssetId GetPrimaryAsset() {
		return memory.read<struct FPrimaryAssetId>(m_addr + 8);
	}
	struct TArray<struct FName> GetLoadBundles() {
		return memory.read<struct TArray<struct FName>>(m_addr + 24);
	}
	struct UAsyncActionLoadPrimaryAsset GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct UAsyncActionLoadPrimaryAsset(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FAsyncLoadPrimaryAssetClass
{
public:
	FAsyncLoadPrimaryAssetClass(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FPrimaryAssetId GetPrimaryAsset() {
		return memory.read<struct FPrimaryAssetId>(m_addr + 8);
	}
	struct TArray<struct FName> GetLoadBundles() {
		return memory.read<struct TArray<struct FName>>(m_addr + 24);
	}
	struct UAsyncActionLoadPrimaryAssetClass GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct UAsyncActionLoadPrimaryAssetClass(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FAsyncChangeBundleStateForMatchingPrimaryAssets
{
public:
	FAsyncChangeBundleStateForMatchingPrimaryAssets(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct TArray<struct FName> GetNewBundles() {
		return memory.read<struct TArray<struct FName>>(m_addr + 8);
	}
	struct TArray<struct FName> GetOldBundles() {
		return memory.read<struct TArray<struct FName>>(m_addr + 24);
	}
	struct UAsyncActionChangePrimaryAssetBundles GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct UAsyncActionChangePrimaryAssetBundles(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FAsyncChangeBundleStateForPrimaryAssetList
{
public:
	FAsyncChangeBundleStateForPrimaryAssetList(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct TArray<struct FPrimaryAssetId> GetPrimaryAssetList() {
		return memory.read<struct TArray<struct FPrimaryAssetId>>(m_addr + 8);
	}
	struct TArray<struct FName> GetAddBundles() {
		return memory.read<struct TArray<struct FName>>(m_addr + 24);
	}
	struct TArray<struct FName> GetRemoveBundles() {
		return memory.read<struct TArray<struct FName>>(m_addr + 40);
	}
	struct UAsyncActionChangePrimaryAssetBundles GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct UAsyncActionChangePrimaryAssetBundles(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FInRange_IntInt
{
public:
	FInRange_IntInt(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetValue() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetMin() {
		return memory.read<int32_t>(m_addr + 4);
	}
	int32_t GetMax() {
		return memory.read<int32_t>(m_addr + 8);
	}
	bool GetInclusiveMin() {
		return memory.read<bool>(m_addr + 12);
	}
	bool GetInclusiveMax() {
		return memory.read<bool>(m_addr + 13);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 14);
	}

private:
	std::uint64_t m_addr = 0;
};class FFTruncVector
{
public:
	FFTruncVector(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetInVector() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FIntVector GetReturnValue() {
		return memory.read<struct FIntVector>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetInteriorSettings
{
public:
	FSetInteriorSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FInteriorSettings GetNewInteriorSettings() {
		return memory.read<struct FInteriorSettings>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FDisableGroundScattering
{
public:
	FDisableGroundScattering(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetNewGroundScattering() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetCacheDegree
{
public:
	FSetCacheDegree(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewCacheDegree() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetDefaultBrightness
{
public:
	FSetDefaultBrightness(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewBrightness() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FResetRandomStream
{
public:
	FResetRandomStream(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRandomStream GetStream() {
		return memory.read<struct FRandomStream>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetDefaultLightColor
{
public:
	FSetDefaultLightColor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLinearColor GetNewLightColor() {
		return memory.read<struct FLinearColor>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FPointsAreCoplanar
{
public:
	FPointsAreCoplanar(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FVector> GetPoints() {
		return memory.read<struct TArray<struct FVector>>(m_addr + 0);
	}
	float GetTolerance() {
		return memory.read<float>(m_addr + 16);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FMatrix_GetFrustumBottomPlane
{
public:
	FMatrix_GetFrustumBottomPlane(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMatrix GetM() {
		return memory.read<struct FMatrix>(m_addr + 0);
	}
	struct FPlane GetOutPlane() {
		return memory.read<struct FPlane>(m_addr + 64);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 80);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetDensityMultiplier
{
public:
	FSetDensityMultiplier(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewDensityMultiplier() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetFogMultiplier
{
public:
	FSetFogMultiplier(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewFogMultiplier() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetEnabled
{
public:
	FSetEnabled(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbSetEnabled() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetPriority
{
public:
	FSetPriority(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetInPriority() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetReverbSettings
{
public:
	FSetReverbSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FReverbSettings GetNewReverbSettings() {
		return memory.read<struct FReverbSettings>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetSubmixOverrideSettings
{
public:
	FSetSubmixOverrideSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FAudioVolumeSubmixOverrideSettings> GetNewSubmixOverrideSettings() {
		return memory.read<struct TArray<struct FAudioVolumeSubmixOverrideSettings>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetAvoidanceVelocityForComponent
{
public:
	FGetAvoidanceVelocityForComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UMovementComponent GetMovementComp() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UMovementComponent(ptr_addr);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetObjectCount
{
public:
	FGetObjectCount(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FRegisterMovementComponent
{
public:
	FRegisterMovementComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UMovementComponent GetMovementComp() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UMovementComponent(ptr_addr);
	}
	float GetAvoidanceWeight() {
		return memory.read<float>(m_addr + 8);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FEqualEqual_GuidGuid
{
public:
	FEqualEqual_GuidGuid(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FGuid GetA() {
		return memory.read<struct FGuid>(m_addr + 0);
	}
	struct FGuid GetB() {
		return memory.read<struct FGuid>(m_addr + 16);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetSprite
{
public:
	FSetSprite(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTexture2D GetNewSprite() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UTexture2D(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetSpriteAndUV
{
public:
	FSetSpriteAndUV(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTexture2D GetNewSprite() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UTexture2D(ptr_addr);
	}
	int32_t GetNewU() {
		return memory.read<int32_t>(m_addr + 8);
	}
	int32_t GetNewUL() {
		return memory.read<int32_t>(m_addr + 12);
	}
	int32_t GetNewV() {
		return memory.read<int32_t>(m_addr + 16);
	}
	int32_t GetNewVL() {
		return memory.read<int32_t>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetUV
{
public:
	FSetUV(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetNewU() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetNewUL() {
		return memory.read<int32_t>(m_addr + 4);
	}
	int32_t GetNewV() {
		return memory.read<int32_t>(m_addr + 8);
	}
	int32_t GetNewVL() {
		return memory.read<int32_t>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FMap_Add
{
public:
	FMap_Add(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<int32_t, int32_t> GetTargetMap() {
		return memory.read<struct TMap<int32_t, int32_t>>(m_addr + 0);
	}
	int32_t GetKey() {
		return memory.read<int32_t>(m_addr + 80);
	}
	int32_t GetValue() {
		return memory.read<int32_t>(m_addr + 84);
	}

private:
	std::uint64_t m_addr = 0;
};class FMakePlaneFromPointAndNormal
{
public:
	FMakePlaneFromPointAndNormal(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetPoint() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetNormal() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	struct FPlane GetReturnValue() {
		return memory.read<struct FPlane>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FMap_Contains
{
public:
	FMap_Contains(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<int32_t, int32_t> GetTargetMap() {
		return memory.read<struct TMap<int32_t, int32_t>>(m_addr + 0);
	}
	int32_t GetKey() {
		return memory.read<int32_t>(m_addr + 80);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 84);
	}

private:
	std::uint64_t m_addr = 0;
};class FMap_Length
{
public:
	FMap_Length(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<int32_t, int32_t> GetTargetMap() {
		return memory.read<struct TMap<int32_t, int32_t>>(m_addr + 0);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 80);
	}

private:
	std::uint64_t m_addr = 0;
};class FMultiply_MatrixMatrix
{
public:
	FMultiply_MatrixMatrix(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMatrix GetA() {
		return memory.read<struct FMatrix>(m_addr + 0);
	}
	struct FMatrix GetB() {
		return memory.read<struct FMatrix>(m_addr + 64);
	}
	struct FMatrix GetReturnValue() {
		return memory.read<struct FMatrix>(m_addr + 128);
	}

private:
	std::uint64_t m_addr = 0;
};class FMap_Remove
{
public:
	FMap_Remove(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<int32_t, int32_t> GetTargetMap() {
		return memory.read<struct TMap<int32_t, int32_t>>(m_addr + 0);
	}
	int32_t GetKey() {
		return memory.read<int32_t>(m_addr + 80);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 84);
	}

private:
	std::uint64_t m_addr = 0;
};class FRotateAngleAxis
{
public:
	FRotateAngleAxis(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetInVect() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	float GetAngleDeg() {
		return memory.read<float>(m_addr + 12);
	}
	struct FVector GetAxis() {
		return memory.read<struct FVector>(m_addr + 16);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 28);
	}

private:
	std::uint64_t m_addr = 0;
};class FPlaySoundAtLocation
{
public:
	FPlaySoundAtLocation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct USoundBase GetSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct USoundBase(ptr_addr);
	}
	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 16);
	}
	struct FRotator GetRotation() {
		return memory.read<struct FRotator>(m_addr + 28);
	}
	float GetVolumeMultiplier() {
		return memory.read<float>(m_addr + 40);
	}
	float GetPitchMultiplier() {
		return memory.read<float>(m_addr + 44);
	}
	float GetStartTime() {
		return memory.read<float>(m_addr + 48);
	}
	struct USoundAttenuation GetAttenuationSettings() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct USoundAttenuation(ptr_addr);
	}
	struct USoundConcurrency GetConcurrencySettings() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 64);
		return struct USoundConcurrency(ptr_addr);
	}
	struct AActor GetOwningActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FMap_Values
{
public:
	FMap_Values(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<int32_t, int32_t> GetTargetMap() {
		return memory.read<struct TMap<int32_t, int32_t>>(m_addr + 0);
	}
	struct TArray<int32_t> GetValues() {
		return memory.read<struct TArray<int32_t>>(m_addr + 80);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetMapPropertyByName
{
public:
	FSetMapPropertyByName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FName GetPropertyName() {
		return memory.read<struct FName>(m_addr + 8);
	}
	struct TMap<int32_t, int32_t> GetValue() {
		return memory.read<struct TMap<int32_t, int32_t>>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FCollapseRelativeDirectories
{
public:
	FCollapseRelativeDirectories(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetInPath() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FString GetOutPath() {
		return memory.read<struct FString>(m_addr + 16);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FAutomationDir
{
public:
	FAutomationDir(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FAutomationLogDir
{
public:
	FAutomationLogDir(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FBugItDir
{
public:
	FBugItDir(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetStartOffset
{
public:
	FGetStartOffset(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector2D GetReturnValue() {
		return memory.read<struct FVector2D>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCombine
{
public:
	FCombine(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FString> GetInPaths() {
		return memory.read<struct TArray<struct FString>>(m_addr + 0);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FConvertRelativePathToFull
{
public:
	FConvertRelativePathToFull(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetInPath() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FString GetInBasePath() {
		return memory.read<struct FString>(m_addr + 16);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FConvertToSandboxPath
{
public:
	FConvertToSandboxPath(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetInPath() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FString GetInSandboxName() {
		return memory.read<struct FString>(m_addr + 16);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FDiffDir
{
public:
	FDiffDir(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FConv_LinearColorToColor
{
public:
	FConv_LinearColorToColor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLinearColor GetInLinearColor() {
		return memory.read<struct FLinearColor>(m_addr + 0);
	}
	bool GetInUseSRGB() {
		return memory.read<bool>(m_addr + 16);
	}
	struct FColor GetReturnValue() {
		return memory.read<struct FColor>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FDirectoryExists
{
public:
	FDirectoryExists(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetInPath() {
		return memory.read<struct FString>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FEngineConfigDir
{
public:
	FEngineConfigDir(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FLinearColorLerpUsingHSV
{
public:
	FLinearColorLerpUsingHSV(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLinearColor GetA() {
		return memory.read<struct FLinearColor>(m_addr + 0);
	}
	struct FLinearColor GetB() {
		return memory.read<struct FLinearColor>(m_addr + 16);
	}
	float GetAlpha() {
		return memory.read<float>(m_addr + 32);
	}
	struct FLinearColor GetReturnValue() {
		return memory.read<struct FLinearColor>(m_addr + 36);
	}

private:
	std::uint64_t m_addr = 0;
};class FEngineContentDir
{
public:
	FEngineContentDir(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetMax2D
{
public:
	FGetMax2D(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector2D GetA() {
		return memory.read<struct FVector2D>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FEngineIntermediateDir
{
public:
	FEngineIntermediateDir(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FDateTimeMinValue
{
public:
	FDateTimeMinValue(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDateTime GetReturnValue() {
		return memory.read<struct FDateTime>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FEngineSourceDir
{
public:
	FEngineSourceDir(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FEngineUserDir
{
public:
	FEngineUserDir(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FEngineVersionAgnosticUserDir
{
public:
	FEngineVersionAgnosticUserDir(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FEnterpriseDir
{
public:
	FEnterpriseDir(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetEndPosition
{
public:
	FSetEndPosition(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetEndPos() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	bool GetbUpdateMesh() {
		return memory.read<bool>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FFileExists
{
public:
	FFileExists(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetInPath() {
		return memory.read<struct FString>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGameAgnosticSavedDir
{
public:
	FGameAgnosticSavedDir(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetUnmarkedBit
{
public:
	FGetUnmarkedBit(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetData() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetStartIdx() {
		return memory.read<int32_t>(m_addr + 4);
	}
	int32_t GetNumBits() {
		return memory.read<int32_t>(m_addr + 8);
	}
	bool GetbRandom() {
		return memory.read<bool>(m_addr + 12);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGameDevelopersDir
{
public:
	FGameDevelopersDir(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGameUserDeveloperDir
{
public:
	FGameUserDeveloperDir(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FShowTweetUI
{
public:
	FShowTweetUI(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetInitialMessage() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FString GetURL() {
		return memory.read<struct FString>(m_addr + 16);
	}
	struct FString GetPicture() {
		return memory.read<struct FString>(m_addr + 32);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};class FFindSocketInfo
{
public:
	FFindSocketInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetInSocketName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FTransform GetOutTransform() {
		return memory.read<struct FTransform>(m_addr + 16);
	}
	int32_t GetOutBoneIndex() {
		return memory.read<int32_t>(m_addr + 64);
	}
	int32_t GetOutIndex() {
		return memory.read<int32_t>(m_addr + 68);
	}
	struct USkeletalMeshSocket GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return struct USkeletalMeshSocket(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FNextSobolFloat
{
public:
	FNextSobolFloat(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetDimension() {
		return memory.read<int32_t>(m_addr + 4);
	}
	float GetPreviousValue() {
		return memory.read<float>(m_addr + 8);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetBaseFilename
{
public:
	FGetBaseFilename(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetInPath() {
		return memory.read<struct FString>(m_addr + 0);
	}
	bool GetbRemovePath() {
		return memory.read<bool>(m_addr + 16);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetCleanFilename
{
public:
	FGetCleanFilename(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetInPath() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetEngineLocalizationPaths
{
public:
	FGetEngineLocalizationPaths(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FString> GetReturnValue() {
		return memory.read<struct TArray<struct FString>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetExtension
{
public:
	FGetExtension(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetInPath() {
		return memory.read<struct FString>(m_addr + 0);
	}
	bool GetbIncludeDot() {
		return memory.read<bool>(m_addr + 16);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetLinearPositionTarget
{
public:
	FSetLinearPositionTarget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetInPosTarget() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FBooleanNAND
{
public:
	FBooleanNAND(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetA() {
		return memory.read<bool>(m_addr + 0);
	}
	bool GetB() {
		return memory.read<bool>(m_addr + 1);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 2);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetGameLocalizationPaths
{
public:
	FGetGameLocalizationPaths(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FString> GetReturnValue() {
		return memory.read<struct TArray<struct FString>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetInvalidFileSystemChars
{
public:
	FGetInvalidFileSystemChars(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetProjectFilePath
{
public:
	FGetProjectFilePath(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetToolTipLocalizationPaths
{
public:
	FGetToolTipLocalizationPaths(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FString> GetReturnValue() {
		return memory.read<struct TArray<struct FString>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FProjectUserDir
{
public:
	FProjectUserDir(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FHasProjectPersistentDownloadDir
{
public:
	FHasProjectPersistentDownloadDir(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsDrive
{
public:
	FIsDrive(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetInPath() {
		return memory.read<struct FString>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetSphereRadius
{
public:
	FSetSphereRadius(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetInSphereRadius() {
		return memory.read<float>(m_addr + 0);
	}
	bool GetbUpdateOverlaps() {
		return memory.read<bool>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsSamePath
{
public:
	FIsSamePath(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetPathA() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FString GetPathB() {
		return memory.read<struct FString>(m_addr + 16);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FLaunchDir
{
public:
	FLaunchDir(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FMakePathRelativeTo
{
public:
	FMakePathRelativeTo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetInPath() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FString GetInRelativeTo() {
		return memory.read<struct FString>(m_addr + 16);
	}
	struct FString GetOutPath() {
		return memory.read<struct FString>(m_addr + 32);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};class FNormalizeDirectoryName
{
public:
	FNormalizeDirectoryName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetInPath() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FString GetOutPath() {
		return memory.read<struct FString>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FProfilingDir
{
public:
	FProfilingDir(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSubtract_DateTimeTimespan
{
public:
	FSubtract_DateTimeTimespan(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDateTime GetA() {
		return memory.read<struct FDateTime>(m_addr + 0);
	}
	struct FTimespan GetB() {
		return memory.read<struct FTimespan>(m_addr + 8);
	}
	struct FDateTime GetReturnValue() {
		return memory.read<struct FDateTime>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FProjectContentDir
{
public:
	FProjectContentDir(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetAngularTwistLimit
{
public:
	FSetAngularTwistLimit(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class EAngularConstraintMotion GetConstraintType() {
		return memory.read<enum class EAngularConstraintMotion>(m_addr + 0);
	}
	float GetTwistLimitAngle() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FProjectDir
{
public:
	FProjectDir(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FBlueprint_GetSizeX
{
public:
	FBlueprint_GetSizeX(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FProjectModsDir
{
public:
	FProjectModsDir(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FProjectSavedDir
{
public:
	FProjectSavedDir(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FRemoveDuplicateSlashes
{
public:
	FRemoveDuplicateSlashes(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetInPath() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FString GetOutPath() {
		return memory.read<struct FString>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSandboxesDir
{
public:
	FSandboxesDir(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSet_RemoveItems
{
public:
	FSet_RemoveItems(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSet<int32_t> GetTargetSet() {
		return memory.read<struct TSet<int32_t>>(m_addr + 0);
	}
	struct TArray<int32_t> GetItems() {
		return memory.read<struct TArray<int32_t>>(m_addr + 80);
	}

private:
	std::uint64_t m_addr = 0;
};class FScreenShotDir
{
public:
	FScreenShotDir(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGreaterEqual_FloatFloat
{
public:
	FGreaterEqual_FloatFloat(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetA() {
		return memory.read<float>(m_addr + 0);
	}
	float GetB() {
		return memory.read<float>(m_addr + 4);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetExtension
{
public:
	FSetExtension(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetInPath() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FString GetInNewExtension() {
		return memory.read<struct FString>(m_addr + 16);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FLessEqual_ByteByte
{
public:
	FLessEqual_ByteByte(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	char GetA() {
		return memory.read<char>(m_addr + 0);
	}
	char GetB() {
		return memory.read<char>(m_addr + 1);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 2);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetProjectFilePath
{
public:
	FSetProjectFilePath(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetNewGameProjectFilePath() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FShouldSaveToUserDir
{
public:
	FShouldSaveToUserDir(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSplit
{
public:
	FSplit(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetSourceString() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FString GetInStr() {
		return memory.read<struct FString>(m_addr + 16);
	}
	struct FString GetLeftS() {
		return memory.read<struct FString>(m_addr + 32);
	}
	struct FString GetRightS() {
		return memory.read<struct FString>(m_addr + 48);
	}
	enum class ESearchCase GetSearchCase() {
		return memory.read<enum class ESearchCase>(m_addr + 64);
	}
	enum class ESearchDir GetSearchDir() {
		return memory.read<enum class ESearchDir>(m_addr + 65);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 66);
	}

private:
	std::uint64_t m_addr = 0;
};class FNotEqual_StrStr
{
public:
	FNotEqual_StrStr(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetA() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FString GetB() {
		return memory.read<struct FString>(m_addr + 16);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FVideoCaptureDir
{
public:
	FVideoCaptureDir(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCancelLocalNotificationById
{
public:
	FCancelLocalNotificationById(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetNotificationId() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSet_Add
{
public:
	FSet_Add(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSet<int32_t> GetTargetSet() {
		return memory.read<struct TSet<int32_t>>(m_addr + 0);
	}
	int32_t GetNewItem() {
		return memory.read<int32_t>(m_addr + 80);
	}

private:
	std::uint64_t m_addr = 0;
};class FSet_AddItems
{
public:
	FSet_AddItems(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSet<int32_t> GetTargetSet() {
		return memory.read<struct TSet<int32_t>>(m_addr + 0);
	}
	struct TArray<int32_t> GetNewItems() {
		return memory.read<struct TArray<int32_t>>(m_addr + 80);
	}

private:
	std::uint64_t m_addr = 0;
};class FRightChop
{
public:
	FRightChop(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetSourceString() {
		return memory.read<struct FString>(m_addr + 0);
	}
	int32_t GetCount() {
		return memory.read<int32_t>(m_addr + 16);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FArray_Set
{
public:
	FArray_Set(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<int32_t> GetTargetArray() {
		return memory.read<struct TArray<int32_t>>(m_addr + 0);
	}
	int32_t GetIndex() {
		return memory.read<int32_t>(m_addr + 16);
	}
	int32_t GetItem() {
		return memory.read<int32_t>(m_addr + 20);
	}
	bool GetbSizeToFit() {
		return memory.read<bool>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FSet_Clear
{
public:
	FSet_Clear(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSet<int32_t> GetTargetSet() {
		return memory.read<struct TSet<int32_t>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSet_Contains
{
public:
	FSet_Contains(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSet<int32_t> GetTargetSet() {
		return memory.read<struct TSet<int32_t>>(m_addr + 0);
	}
	int32_t GetItemToFind() {
		return memory.read<int32_t>(m_addr + 80);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 84);
	}

private:
	std::uint64_t m_addr = 0;
};class FSet_Difference
{
public:
	FSet_Difference(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSet<int32_t> GetA() {
		return memory.read<struct TSet<int32_t>>(m_addr + 0);
	}
	struct TSet<int32_t> GetB() {
		return memory.read<struct TSet<int32_t>>(m_addr + 80);
	}
	struct TSet<int32_t> GetResult() {
		return memory.read<struct TSet<int32_t>>(m_addr + 160);
	}

private:
	std::uint64_t m_addr = 0;
};class FSet_Union
{
public:
	FSet_Union(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSet<int32_t> GetA() {
		return memory.read<struct TSet<int32_t>>(m_addr + 0);
	}
	struct TSet<int32_t> GetB() {
		return memory.read<struct TSet<int32_t>>(m_addr + 80);
	}
	struct TSet<int32_t> GetResult() {
		return memory.read<struct TSet<int32_t>>(m_addr + 160);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetBounds
{
public:
	FGetBounds(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FBoxSphereBounds GetReturnValue() {
		return memory.read<struct FBoxSphereBounds>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSubtract_LinearColorLinearColor
{
public:
	FSubtract_LinearColorLinearColor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLinearColor GetA() {
		return memory.read<struct FLinearColor>(m_addr + 0);
	}
	struct FLinearColor GetB() {
		return memory.read<struct FLinearColor>(m_addr + 16);
	}
	struct FLinearColor GetReturnValue() {
		return memory.read<struct FLinearColor>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetAttenuationFactor
{
public:
	FGetAttenuationFactor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetSetPropertyByName
{
public:
	FSetSetPropertyByName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FName GetPropertyName() {
		return memory.read<struct FName>(m_addr + 8);
	}
	struct TSet<int32_t> GetValue() {
		return memory.read<struct TSet<int32_t>>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetScaledBoxExtent
{
public:
	FGetScaledBoxExtent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetBoxExtent
{
public:
	FSetBoxExtent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetInBoxExtent() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	bool GetbUpdateOverlaps() {
		return memory.read<bool>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FArray_Remove
{
public:
	FArray_Remove(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<int32_t> GetTargetArray() {
		return memory.read<struct TArray<int32_t>>(m_addr + 0);
	}
	int32_t GetIndexToRemove() {
		return memory.read<int32_t>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetDuration
{
public:
	FSetDuration(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewDuration() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FStop
{
public:
	FStop(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbImmediate() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSin
{
public:
	FSin(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetA() {
		return memory.read<float>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FBlueprintModifyCamera
{
public:
	FBlueprintModifyCamera(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetDeltaTime() {
		return memory.read<float>(m_addr + 0);
	}
	struct FVector GetViewLocation() {
		return memory.read<struct FVector>(m_addr + 4);
	}
	struct FRotator GetViewRotation() {
		return memory.read<struct FRotator>(m_addr + 16);
	}
	float GetFOV() {
		return memory.read<float>(m_addr + 28);
	}
	struct FVector GetNewViewLocation() {
		return memory.read<struct FVector>(m_addr + 32);
	}
	struct FRotator GetNewViewRotation() {
		return memory.read<struct FRotator>(m_addr + 44);
	}
	float GetNewFOV() {
		return memory.read<float>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};class FLinearColor_SetFromHSV
{
public:
	FLinearColor_SetFromHSV(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLinearColor GetInOutColor() {
		return memory.read<struct FLinearColor>(m_addr + 0);
	}
	float GetH() {
		return memory.read<float>(m_addr + 16);
	}
	float GetS() {
		return memory.read<float>(m_addr + 20);
	}
	float GetV() {
		return memory.read<float>(m_addr + 24);
	}
	float GetA() {
		return memory.read<float>(m_addr + 28);
	}

private:
	std::uint64_t m_addr = 0;
};class FConv_Vector2DToIntPoint
{
public:
	FConv_Vector2DToIntPoint(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector2D GetInVector2D() {
		return memory.read<struct FVector2D>(m_addr + 0);
	}
	struct FIntPoint GetReturnValue() {
		return memory.read<struct FIntPoint>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FBlueprintModifyPostProcess
{
public:
	FBlueprintModifyPostProcess(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetDeltaTime() {
		return memory.read<float>(m_addr + 0);
	}
	float GetPostProcessBlendWeight() {
		return memory.read<float>(m_addr + 4);
	}
	struct FPostProcessSettings GetPostProcessSettings() {
		return memory.read<struct FPostProcessSettings>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FDisableModifier
{
public:
	FDisableModifier(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbImmediate() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetBoundaryMax
{
public:
	FGetBoundaryMax(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FStopAllCameraShakesOfType
{
public:
	FStopAllCameraShakesOfType(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UCameraShakeBase GetInCameraShake() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return UCameraShakeBase(ptr_addr);
	}
	bool GetbImmediately() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_Deproject
{
public:
	FK2_Deproject(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector2D GetScreenPosition() {
		return memory.read<struct FVector2D>(m_addr + 0);
	}
	struct FVector GetWorldOrigin() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	struct FVector GetWorldDirection() {
		return memory.read<struct FVector>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_DrawBorder
{
public:
	FK2_DrawBorder(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTexture GetBorderTexture() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UTexture(ptr_addr);
	}
	struct UTexture GetBackgroundTexture() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UTexture(ptr_addr);
	}
	struct UTexture GetLeftBorderTexture() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UTexture(ptr_addr);
	}
	struct UTexture GetRightBorderTexture() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 24);
		return struct UTexture(ptr_addr);
	}
	struct UTexture GetTopBorderTexture() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 32);
		return struct UTexture(ptr_addr);
	}
	struct UTexture GetBottomBorderTexture() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct UTexture(ptr_addr);
	}
	struct FVector2D GetScreenPosition() {
		return memory.read<struct FVector2D>(m_addr + 48);
	}
	struct FVector2D GetScreenSize() {
		return memory.read<struct FVector2D>(m_addr + 56);
	}
	struct FVector2D GetCoordinatePosition() {
		return memory.read<struct FVector2D>(m_addr + 64);
	}
	struct FVector2D GetCoordinateSize() {
		return memory.read<struct FVector2D>(m_addr + 72);
	}
	struct FLinearColor GetRenderColor() {
		return memory.read<struct FLinearColor>(m_addr + 80);
	}
	struct FVector2D GetBorderScale() {
		return memory.read<struct FVector2D>(m_addr + 96);
	}
	struct FVector2D GetBackgroundScale() {
		return memory.read<struct FVector2D>(m_addr + 104);
	}
	float GetRotation() {
		return memory.read<float>(m_addr + 112);
	}
	struct FVector2D GetPivotPoint() {
		return memory.read<struct FVector2D>(m_addr + 116);
	}
	struct FVector2D GetCornerSize() {
		return memory.read<struct FVector2D>(m_addr + 124);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_DrawBox
{
public:
	FK2_DrawBox(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector2D GetScreenPosition() {
		return memory.read<struct FVector2D>(m_addr + 0);
	}
	struct FVector2D GetScreenSize() {
		return memory.read<struct FVector2D>(m_addr + 8);
	}
	float GetThickness() {
		return memory.read<float>(m_addr + 16);
	}
	struct FLinearColor GetRenderColor() {
		return memory.read<struct FLinearColor>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_DrawMaterialTriangle
{
public:
	FK2_DrawMaterialTriangle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UMaterialInterface GetRenderMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UMaterialInterface(ptr_addr);
	}
	struct TArray<struct FCanvasUVTri> GetTriangles() {
		return memory.read<struct TArray<struct FCanvasUVTri>>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_DrawText
{
public:
	FK2_DrawText(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UFont GetRenderFont() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UFont(ptr_addr);
	}
	struct FString GetRenderText() {
		return memory.read<struct FString>(m_addr + 8);
	}
	struct FVector2D GetScreenPosition() {
		return memory.read<struct FVector2D>(m_addr + 24);
	}
	struct FVector2D GetScale() {
		return memory.read<struct FVector2D>(m_addr + 32);
	}
	struct FLinearColor GetRenderColor() {
		return memory.read<struct FLinearColor>(m_addr + 40);
	}
	float GetKerning() {
		return memory.read<float>(m_addr + 56);
	}
	struct FLinearColor GetShadowColor() {
		return memory.read<struct FLinearColor>(m_addr + 60);
	}
	struct FVector2D GetShadowOffset() {
		return memory.read<struct FVector2D>(m_addr + 76);
	}
	bool GetbCentreX() {
		return memory.read<bool>(m_addr + 84);
	}
	bool GetbCentreY() {
		return memory.read<bool>(m_addr + 85);
	}
	bool GetbOutlined() {
		return memory.read<bool>(m_addr + 86);
	}
	struct FLinearColor GetOutlineColor() {
		return memory.read<struct FLinearColor>(m_addr + 88);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_StrLen
{
public:
	FK2_StrLen(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UFont GetRenderFont() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UFont(ptr_addr);
	}
	struct FString GetRenderText() {
		return memory.read<struct FString>(m_addr + 8);
	}
	struct FVector2D GetReturnValue() {
		return memory.read<struct FVector2D>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FCreateCanvasRenderTarget2D
{
public:
	FCreateCanvasRenderTarget2D(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	UCanvasRenderTarget2D GetCanvasRenderTarget2DClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return UCanvasRenderTarget2D(ptr_addr);
	}
	int32_t GetWidth() {
		return memory.read<int32_t>(m_addr + 16);
	}
	int32_t GetHeight() {
		return memory.read<int32_t>(m_addr + 20);
	}
	struct UCanvasRenderTarget2D GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 24);
		return struct UCanvasRenderTarget2D(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetGameState
{
public:
	FGetGameState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct AGameStateBase GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct AGameStateBase(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetSize
{
public:
	FGetSize(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FReceiveUpdate
{
public:
	FReceiveUpdate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UCanvas GetCanvas() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UCanvas(ptr_addr);
	}
	int32_t GetWidth() {
		return memory.read<int32_t>(m_addr + 8);
	}
	int32_t GetHeight() {
		return memory.read<int32_t>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetScaledCapsuleHalfHeight
{
public:
	FGetScaledCapsuleHalfHeight(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetScaledCapsuleHalfHeight_WithoutHemisphere
{
public:
	FGetScaledCapsuleHalfHeight_WithoutHemisphere(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetScaledCapsuleRadius
{
public:
	FGetScaledCapsuleRadius(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetBoundaryMax
{
public:
	FSetBoundaryMax(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetInBoundaryMax() {
		return memory.read<float>(m_addr + 0);
	}
	bool GetbUpdateMesh() {
		return memory.read<bool>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetScaledCapsuleSize
{
public:
	FGetScaledCapsuleSize(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetOutRadius() {
		return memory.read<float>(m_addr + 0);
	}
	float GetOutHalfHeight() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetShapeScale
{
public:
	FGetShapeScale(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetUnscaledCapsuleHalfHeight
{
public:
	FGetUnscaledCapsuleHalfHeight(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetUnscaledCapsuleHalfHeight_WithoutHemisphere
{
public:
	FGetUnscaledCapsuleHalfHeight_WithoutHemisphere(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetUnscaledCapsuleRadius
{
public:
	FGetUnscaledCapsuleRadius(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetCapsuleSize
{
public:
	FSetCapsuleSize(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetInRadius() {
		return memory.read<float>(m_addr + 0);
	}
	float GetInHalfHeight() {
		return memory.read<float>(m_addr + 4);
	}
	bool GetbUpdateOverlaps() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetChildActorClass
{
public:
	FSetChildActorClass(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	AActor GetInClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetValueRange
{
public:
	FGetValueRange(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetMinValue() {
		return memory.read<float>(m_addr + 0);
	}
	float GetMaxValue() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetClampedLinearColorValue
{
public:
	FGetClampedLinearColorValue(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetInTime() {
		return memory.read<float>(m_addr + 0);
	}
	struct FLinearColor GetReturnValue() {
		return memory.read<struct FLinearColor>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetUnadjustedLinearColorValue
{
public:
	FGetUnadjustedLinearColorValue(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetInTime() {
		return memory.read<float>(m_addr + 0);
	}
	struct FLinearColor GetReturnValue() {
		return memory.read<struct FLinearColor>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FBlueprint_GetSizeY
{
public:
	FBlueprint_GetSizeY(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetVectorValue
{
public:
	FGetVectorValue(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetInTime() {
		return memory.read<float>(m_addr + 0);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FDoesDataTableRowExist
{
public:
	FDoesDataTableRowExist(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UDataTable GetTable() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UDataTable(ptr_addr);
	}
	struct FName GetRowName() {
		return memory.read<struct FName>(m_addr + 8);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FReceiveOnActorSelected
{
public:
	FReceiveOnActorSelected(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetNewSelectedActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}
	struct FVector GetSelectHitLocation() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	struct FVector GetSelectHitNormal() {
		return memory.read<struct FVector>(m_addr + 20);
	}
	struct FHitResult GetHit() {
		return memory.read<struct FHitResult>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetPawnMovementSpeedScale
{
public:
	FSetPawnMovementSpeedScale(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewSpeedScale() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsEnabled
{
public:
	FIsEnabled(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FUtcNow
{
public:
	FUtcNow(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDateTime GetReturnValue() {
		return memory.read<struct FDateTime>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetAtmosphereSunLightIndex
{
public:
	FSetAtmosphereSunLightIndex(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetNewValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FRandomBoolWithWeightFromStream
{
public:
	FRandomBoolWithWeightFromStream(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float Getweight() {
		return memory.read<float>(m_addr + 0);
	}
	struct FRandomStream GetRandomStream() {
		return memory.read<struct FRandomStream>(m_addr + 4);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetCascadeDistributionExponent
{
public:
	FSetCascadeDistributionExponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetCascadeTransitionFraction
{
public:
	FSetCascadeTransitionFraction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetDynamicShadowCascades
{
public:
	FSetDynamicShadowCascades(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetNewValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FHasLaunchOption
{
public:
	FHasLaunchOption(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetOptionToCheck() {
		return memory.read<struct FString>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetDynamicShadowDistanceMovableLight
{
public:
	FSetDynamicShadowDistanceMovableLight(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FNearlyEqual_TransformTransform
{
public:
	FNearlyEqual_TransformTransform(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTransform GetA() {
		return memory.read<struct FTransform>(m_addr + 0);
	}
	struct FTransform GetB() {
		return memory.read<struct FTransform>(m_addr + 48);
	}
	float GetLocationTolerance() {
		return memory.read<float>(m_addr + 96);
	}
	float GetRotationTolerance() {
		return memory.read<float>(m_addr + 100);
	}
	float GetScale3DTolerance() {
		return memory.read<float>(m_addr + 104);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 108);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetEnableLightShaftOcclusion
{
public:
	FSetEnableLightShaftOcclusion(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbNewValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetOcclusionMaskDarkness
{
public:
	FSetOcclusionMaskDarkness(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetShadowAmount
{
public:
	FSetShadowAmount(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnParticleSystemFinished
{
public:
	FOnParticleSystemFinished(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UParticleSystemComponent GetFinishedComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UParticleSystemComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetMaterialParameter
{
public:
	FSetMaterialParameter(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetParameterName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct UMaterialInterface GetParam() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UMaterialInterface(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FMatrix_ToQuat
{
public:
	FMatrix_ToQuat(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMatrix GetM() {
		return memory.read<struct FMatrix>(m_addr + 0);
	}
	struct FQuat GetReturnValue() {
		return memory.read<struct FQuat>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetDirectionalInscatteringColor
{
public:
	FSetDirectionalInscatteringColor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLinearColor GetValue() {
		return memory.read<struct FLinearColor>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetDirectionalInscatteringStartDistance
{
public:
	FSetDirectionalInscatteringStartDistance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FPlayWorldCameraShake
{
public:
	FPlayWorldCameraShake(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	UCameraShakeBase GetShake() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return UCameraShakeBase(ptr_addr);
	}
	struct FVector GetEpicenter() {
		return memory.read<struct FVector>(m_addr + 16);
	}
	float GetInnerRadius() {
		return memory.read<float>(m_addr + 28);
	}
	float GetOuterRadius() {
		return memory.read<float>(m_addr + 32);
	}
	float GetFalloff() {
		return memory.read<float>(m_addr + 36);
	}
	bool GetbOrientShakeTowardsEpicenter() {
		return memory.read<bool>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetFogHeightFalloff
{
public:
	FSetFogHeightFalloff(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetFogMaxOpacity
{
public:
	FSetFogMaxOpacity(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetInscatteringColorCubemap
{
public:
	FSetInscatteringColorCubemap(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTextureCube GetValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UTextureCube(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetInscatteringColorCubemapAngle
{
public:
	FSetInscatteringColorCubemapAngle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetInterpolationSpeed
{
public:
	FSetInterpolationSpeed(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewInterpolationSpeed() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetVolumetricFogDistance
{
public:
	FSetVolumetricFogDistance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FDistance2D
{
public:
	FDistance2D(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector2D Getv1() {
		return memory.read<struct FVector2D>(m_addr + 0);
	}
	struct FVector2D Getv2() {
		return memory.read<struct FVector2D>(m_addr + 8);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetVolumetricFogExtinctionScale
{
public:
	FSetVolumetricFogExtinctionScale(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetVolumetricFogScatteringDistribution
{
public:
	FSetVolumetricFogScatteringDistribution(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FRunAssetExportTasks
{
public:
	FRunAssetExportTasks(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct UAssetExportTask> GetExportTasks() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct TArray<struct UAssetExportTask>(ptr_addr);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetForceFeedbackEffect
{
public:
	FSetForceFeedbackEffect(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UForceFeedbackEffect GetNewForceFeedbackEffect() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UForceFeedbackEffect(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetIntensityMultiplier
{
public:
	FSetIntensityMultiplier(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewIntensityMultiplier() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FArray_Get
{
public:
	FArray_Get(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<int32_t> GetTargetArray() {
		return memory.read<struct TArray<int32_t>>(m_addr + 0);
	}
	int32_t GetIndex() {
		return memory.read<int32_t>(m_addr + 16);
	}
	int32_t GetItem() {
		return memory.read<int32_t>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FActivateReverbEffect
{
public:
	FActivateReverbEffect(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct UReverbEffect GetReverbEffect() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UReverbEffect(ptr_addr);
	}
	struct FName GetTagName() {
		return memory.read<struct FName>(m_addr + 16);
	}
	float GetPriority() {
		return memory.read<float>(m_addr + 24);
	}
	float GetVolume() {
		return memory.read<float>(m_addr + 28);
	}
	float GetFadeTime() {
		return memory.read<float>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FAnnounceAccessibleString
{
public:
	FAnnounceAccessibleString(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetAnnouncementString() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FApplyDamage
{
public:
	FApplyDamage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetDamagedActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}
	float GetBaseDamage() {
		return memory.read<float>(m_addr + 8);
	}
	struct AController GetEventInstigator() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct AController(ptr_addr);
	}
	struct AActor GetDamageCauser() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 24);
		return struct AActor(ptr_addr);
	}
	UDamageType GetDamageTypeClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 32);
		return UDamageType(ptr_addr);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetGroundAlbedo
{
public:
	FSetGroundAlbedo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FColor GetNewValue() {
		return memory.read<struct FColor>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FApplyRadialDamageWithFalloff
{
public:
	FApplyRadialDamageWithFalloff(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	float GetBaseDamage() {
		return memory.read<float>(m_addr + 8);
	}
	float GetMinimumDamage() {
		return memory.read<float>(m_addr + 12);
	}
	struct FVector GetOrigin() {
		return memory.read<struct FVector>(m_addr + 16);
	}
	float GetDamageInnerRadius() {
		return memory.read<float>(m_addr + 28);
	}
	float GetDamageOuterRadius() {
		return memory.read<float>(m_addr + 32);
	}
	float GetDamageFalloff() {
		return memory.read<float>(m_addr + 36);
	}
	UDamageType GetDamageTypeClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return UDamageType(ptr_addr);
	}
	struct TArray<struct AActor> GetIgnoreActors() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct TArray<struct AActor>(ptr_addr);
	}
	struct AActor GetDamageCauser() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 64);
		return struct AActor(ptr_addr);
	}
	struct AController GetInstigatedByController() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return struct AController(ptr_addr);
	}
	enum class ECollisionChannel GetDamagePreventionChannel() {
		return memory.read<enum class ECollisionChannel>(m_addr + 80);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 81);
	}

private:
	std::uint64_t m_addr = 0;
};class FAreAnyListenersWithinRange
{
public:
	FAreAnyListenersWithinRange(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	float GetMaximumRange() {
		return memory.read<float>(m_addr + 20);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FBeginDeferredActorSpawnFromClass
{
public:
	FBeginDeferredActorSpawnFromClass(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	AActor GetActorClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return AActor(ptr_addr);
	}
	struct FTransform GetSpawnTransform() {
		return memory.read<struct FTransform>(m_addr + 16);
	}
	enum class ESpawnActorCollisionHandlingMethod GetCollisionHandlingOverride() {
		return memory.read<enum class ESpawnActorCollisionHandlingMethod>(m_addr + 64);
	}
	struct AActor GetOwner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return struct AActor(ptr_addr);
	}
	struct AActor GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 80);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FBeginSpawningActorFromBlueprint
{
public:
	FBeginSpawningActorFromBlueprint(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct UBlueprint GetBlueprint() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UBlueprint(ptr_addr);
	}
	struct FTransform GetSpawnTransform() {
		return memory.read<struct FTransform>(m_addr + 16);
	}
	bool GetbNoCollisionFail() {
		return memory.read<bool>(m_addr + 64);
	}
	struct AActor GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FBlueprint_PredictProjectilePath_ByTraceChannel
{
public:
	FBlueprint_PredictProjectilePath_ByTraceChannel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FHitResult GetOutHit() {
		return memory.read<struct FHitResult>(m_addr + 8);
	}
	struct TArray<struct FVector> GetOutPathPositions() {
		return memory.read<struct TArray<struct FVector>>(m_addr + 144);
	}
	struct FVector GetOutLastTraceDestination() {
		return memory.read<struct FVector>(m_addr + 160);
	}
	struct FVector GetStartPos() {
		return memory.read<struct FVector>(m_addr + 172);
	}
	struct FVector GetLaunchVelocity() {
		return memory.read<struct FVector>(m_addr + 184);
	}
	bool GetbTracePath() {
		return memory.read<bool>(m_addr + 196);
	}
	float GetProjectileRadius() {
		return memory.read<float>(m_addr + 200);
	}
	enum class ECollisionChannel GetTraceChannel() {
		return memory.read<enum class ECollisionChannel>(m_addr + 204);
	}
	bool GetbTraceComplex() {
		return memory.read<bool>(m_addr + 205);
	}
	struct TArray<struct AActor> GetActorsToIgnore() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 208);
		return struct TArray<struct AActor>(ptr_addr);
	}
	enum class EDrawDebugTrace GetDrawDebugType() {
		return memory.read<enum class EDrawDebugTrace>(m_addr + 224);
	}
	float GetDrawDebugTime() {
		return memory.read<float>(m_addr + 228);
	}
	float GetSimFrequency() {
		return memory.read<float>(m_addr + 232);
	}
	float GetMaxSimTime() {
		return memory.read<float>(m_addr + 236);
	}
	float GetOverrideGravityZ() {
		return memory.read<float>(m_addr + 240);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 244);
	}

private:
	std::uint64_t m_addr = 0;
};class FBlueprintSuggestProjectileVelocity
{
public:
	FBlueprintSuggestProjectileVelocity(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FVector GetTossVelocity() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	struct FVector GetStartLocation() {
		return memory.read<struct FVector>(m_addr + 20);
	}
	struct FVector GetEndLocation() {
		return memory.read<struct FVector>(m_addr + 32);
	}
	float GetLaunchSpeed() {
		return memory.read<float>(m_addr + 44);
	}
	float GetOverrideGravityZ() {
		return memory.read<float>(m_addr + 48);
	}
	enum class ESuggestProjVelocityTraceOption GetTraceOption() {
		return memory.read<enum class ESuggestProjVelocityTraceOption>(m_addr + 52);
	}
	float GetCollisionRadius() {
		return memory.read<float>(m_addr + 56);
	}
	bool GetbFavorHighArc() {
		return memory.read<bool>(m_addr + 60);
	}
	bool GetbDrawDebug() {
		return memory.read<bool>(m_addr + 61);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 62);
	}

private:
	std::uint64_t m_addr = 0;
};class FMatchesWildcard
{
public:
	FMatchesWildcard(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetSourceString() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FString GetWildcard() {
		return memory.read<struct FString>(m_addr + 16);
	}
	enum class ESearchCase GetSearchCase() {
		return memory.read<enum class ESearchCase>(m_addr + 32);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 33);
	}

private:
	std::uint64_t m_addr = 0;
};class FBreakHitResult
{
public:
	FBreakHitResult(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FHitResult GetHit() {
		return memory.read<struct FHitResult>(m_addr + 0);
	}
	bool GetbBlockingHit() {
		return memory.read<bool>(m_addr + 136);
	}
	bool GetbInitialOverlap() {
		return memory.read<bool>(m_addr + 137);
	}
	float GetTime() {
		return memory.read<float>(m_addr + 140);
	}
	float GetDistance() {
		return memory.read<float>(m_addr + 144);
	}
	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 148);
	}
	struct FVector GetImpactPoint() {
		return memory.read<struct FVector>(m_addr + 160);
	}
	struct FVector GetNormal() {
		return memory.read<struct FVector>(m_addr + 172);
	}
	struct FVector GetImpactNormal() {
		return memory.read<struct FVector>(m_addr + 184);
	}
	struct UPhysicalMaterial GetPhysMat() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 200);
		return struct UPhysicalMaterial(ptr_addr);
	}
	struct AActor GetHitActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 208);
		return struct AActor(ptr_addr);
	}
	struct UPrimitiveComponent GetHitComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 216);
		return struct UPrimitiveComponent(ptr_addr);
	}
	struct FName GetHitBoneName() {
		return memory.read<struct FName>(m_addr + 224);
	}
	int32_t GetHitItem() {
		return memory.read<int32_t>(m_addr + 232);
	}
	int32_t GetElementIndex() {
		return memory.read<int32_t>(m_addr + 236);
	}
	int32_t GetFaceIndex() {
		return memory.read<int32_t>(m_addr + 240);
	}
	struct FVector GetTraceStart() {
		return memory.read<struct FVector>(m_addr + 244);
	}
	struct FVector GetTraceEnd() {
		return memory.read<struct FVector>(m_addr + 256);
	}

private:
	std::uint64_t m_addr = 0;
};class FAdd_FloatFloat
{
public:
	FAdd_FloatFloat(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetA() {
		return memory.read<float>(m_addr + 0);
	}
	float GetB() {
		return memory.read<float>(m_addr + 4);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FClearSoundMixModifiers
{
public:
	FClearSoundMixModifiers(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FCreateSaveGameObject
{
public:
	FCreateSaveGameObject(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	USaveGame GetSaveGameClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return USaveGame(ptr_addr);
	}
	struct USaveGame GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct USaveGame(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FDeactivateReverbEffect
{
public:
	FDeactivateReverbEffect(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FName GetTagName() {
		return memory.read<struct FName>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FDeprojectScreenToWorld
{
public:
	FDeprojectScreenToWorld(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APlayerController GetPlayer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APlayerController(ptr_addr);
	}
	struct FVector2D GetScreenPosition() {
		return memory.read<struct FVector2D>(m_addr + 8);
	}
	struct FVector GetWorldPosition() {
		return memory.read<struct FVector>(m_addr + 16);
	}
	struct FVector GetWorldDirection() {
		return memory.read<struct FVector>(m_addr + 28);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};class FFindCollisionUV
{
public:
	FFindCollisionUV(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FHitResult GetHit() {
		return memory.read<struct FHitResult>(m_addr + 0);
	}
	int32_t GetUVChannel() {
		return memory.read<int32_t>(m_addr + 136);
	}
	struct FVector2D GetUV() {
		return memory.read<struct FVector2D>(m_addr + 140);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 148);
	}

private:
	std::uint64_t m_addr = 0;
};class FFlushLevelStreaming
{
public:
	FFlushLevelStreaming(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetActorArrayAverageLocation
{
public:
	FGetActorArrayAverageLocation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct AActor> GetActors() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct TArray<struct AActor>(ptr_addr);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetPointDistanceToLine
{
public:
	FGetPointDistanceToLine(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetPoint() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetLineOrigin() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	struct FVector GetLineDirection() {
		return memory.read<struct FVector>(m_addr + 24);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 36);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetAllActorsOfClass
{
public:
	FGetAllActorsOfClass(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	AActor GetActorClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return AActor(ptr_addr);
	}
	struct TArray<struct AActor> GetOutActors() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct TArray<struct AActor>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetAllActorsOfClassWithTag
{
public:
	FGetAllActorsOfClassWithTag(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	AActor GetActorClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return AActor(ptr_addr);
	}
	struct FName GetTag() {
		return memory.read<struct FName>(m_addr + 16);
	}
	struct TArray<struct AActor> GetOutActors() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 24);
		return struct TArray<struct AActor>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetAllActorsWithInterface
{
public:
	FGetAllActorsWithInterface(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	UInterface GetInterface() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return UInterface(ptr_addr);
	}
	struct TArray<struct AActor> GetOutActors() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct TArray<struct AActor>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FStopSpectralAnalysis
{
public:
	FStopSpectralAnalysis(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FWeightedMovingAverage_FVector
{
public:
	FWeightedMovingAverage_FVector(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetCurrentSample() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetPreviousSample() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	float Getweight() {
		return memory.read<float>(m_addr + 24);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 28);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetAudioTimeSeconds
{
public:
	FGetAudioTimeSeconds(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FVector4_IsNearlyZero3
{
public:
	FVector4_IsNearlyZero3(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector4 GetA() {
		return memory.read<struct FVector4>(m_addr + 0);
	}
	float GetTolerance() {
		return memory.read<float>(m_addr + 16);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetCurrentLevelName
{
public:
	FGetCurrentLevelName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	bool GetbRemovePrefixString() {
		return memory.read<bool>(m_addr + 8);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FMid
{
public:
	FMid(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetSourceString() {
		return memory.read<struct FString>(m_addr + 0);
	}
	int32_t GetStart() {
		return memory.read<int32_t>(m_addr + 16);
	}
	int32_t GetCount() {
		return memory.read<int32_t>(m_addr + 20);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetCurrentReverbEffect
{
public:
	FGetCurrentReverbEffect(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct UReverbEffect GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UReverbEffect(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetEnableWorldRendering
{
public:
	FGetEnableWorldRendering(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetGameInstance
{
public:
	FGetGameInstance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct UGameInstance GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UGameInstance(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FVector2DInterpTo
{
public:
	FVector2DInterpTo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector2D GetCurrent() {
		return memory.read<struct FVector2D>(m_addr + 0);
	}
	struct FVector2D GetTarget() {
		return memory.read<struct FVector2D>(m_addr + 8);
	}
	float GetDeltaTime() {
		return memory.read<float>(m_addr + 16);
	}
	float GetInterpSpeed() {
		return memory.read<float>(m_addr + 20);
	}
	struct FVector2D GetReturnValue() {
		return memory.read<struct FVector2D>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetKeyValue
{
public:
	FGetKeyValue(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetPair() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FString GetKey() {
		return memory.read<struct FString>(m_addr + 16);
	}
	struct FString GetValue() {
		return memory.read<struct FString>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetMaxAudioChannelCount
{
public:
	FGetMaxAudioChannelCount(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetObjectClass
{
public:
	FGetObjectClass(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	UObject GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return UObject(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetPlatformName
{
public:
	FGetPlatformName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetText
{
public:
	FSetText(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetValue() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetPlayerCameraManager
{
public:
	FGetPlayerCameraManager(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	int32_t GetPlayerIndex() {
		return memory.read<int32_t>(m_addr + 8);
	}
	struct APlayerCameraManager GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct APlayerCameraManager(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetPlayerCharacter
{
public:
	FGetPlayerCharacter(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	int32_t GetPlayerIndex() {
		return memory.read<int32_t>(m_addr + 8);
	}
	struct ACharacter GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct ACharacter(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetPlayerControllerFromID
{
public:
	FGetPlayerControllerFromID(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	int32_t GetControllerId() {
		return memory.read<int32_t>(m_addr + 8);
	}
	struct APlayerController GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct APlayerController(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetAbsMax2D
{
public:
	FGetAbsMax2D(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector2D GetA() {
		return memory.read<struct FVector2D>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetPlayerControllerID
{
public:
	FGetPlayerControllerID(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APlayerController GetPlayer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APlayerController(ptr_addr);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetStreamingLevel
{
public:
	FGetStreamingLevel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FName GetPackageName() {
		return memory.read<struct FName>(m_addr + 8);
	}
	struct ULevelStreaming GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct ULevelStreaming(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FLinearColor_SetTemperature
{
public:
	FLinearColor_SetTemperature(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLinearColor GetInOutColor() {
		return memory.read<struct FLinearColor>(m_addr + 0);
	}
	float GetInTemperature() {
		return memory.read<float>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetSurfaceType
{
public:
	FGetSurfaceType(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FHitResult GetHit() {
		return memory.read<struct FHitResult>(m_addr + 0);
	}
	enum class EPhysicalSurface GetReturnValue() {
		return memory.read<enum class EPhysicalSurface>(m_addr + 136);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetScalarParameterValue
{
public:
	FGetScalarParameterValue(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct UMaterialParameterCollection GetCollection() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UMaterialParameterCollection(ptr_addr);
	}
	struct FName GetParameterName() {
		return memory.read<struct FName>(m_addr + 16);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetTimeSeconds
{
public:
	FGetTimeSeconds(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FBeginDrawCanvasToRenderTarget
{
public:
	FBeginDrawCanvasToRenderTarget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct UTextureRenderTarget2D GetTextureRenderTarget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UTextureRenderTarget2D(ptr_addr);
	}
	struct UCanvas GetCanvas() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UCanvas(ptr_addr);
	}
	struct FVector2D GetSize() {
		return memory.read<struct FVector2D>(m_addr + 24);
	}
	struct FDrawToRenderTargetContext GetContext() {
		return memory.read<struct FDrawToRenderTargetContext>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetUnpausedTimeSeconds
{
public:
	FGetUnpausedTimeSeconds(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FRandomBool
{
public:
	FRandomBool(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetWorldDeltaSeconds
{
public:
	FGetWorldDeltaSeconds(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FMarkBit
{
public:
	FMarkBit(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetData() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetIndex() {
		return memory.read<int32_t>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FLoadGameFromSlot
{
public:
	FLoadGameFromSlot(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetSlotName() {
		return memory.read<struct FString>(m_addr + 0);
	}
	int32_t GetUserIndex() {
		return memory.read<int32_t>(m_addr + 16);
	}
	struct USaveGame GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 24);
		return struct USaveGame(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FLoadStreamLevel
{
public:
	FLoadStreamLevel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FName GetLevelName() {
		return memory.read<struct FName>(m_addr + 8);
	}
	bool GetbMakeVisibleAfterLoad() {
		return memory.read<bool>(m_addr + 16);
	}
	bool GetbShouldBlockOnLoad() {
		return memory.read<bool>(m_addr + 17);
	}
	struct FLatentActionInfo GetLatentInfo() {
		return memory.read<struct FLatentActionInfo>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FAsPercent_Float
{
public:
	FAsPercent_Float(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetValue() {
		return memory.read<float>(m_addr + 0);
	}
	enum class ERoundingMode GetRoundingMode() {
		return memory.read<enum class ERoundingMode>(m_addr + 4);
	}
	bool GetbAlwaysSign() {
		return memory.read<bool>(m_addr + 5);
	}
	bool GetbUseGrouping() {
		return memory.read<bool>(m_addr + 6);
	}
	int32_t GetMinimumIntegralDigits() {
		return memory.read<int32_t>(m_addr + 8);
	}
	int32_t GetMaximumIntegralDigits() {
		return memory.read<int32_t>(m_addr + 12);
	}
	int32_t GetMinimumFractionalDigits() {
		return memory.read<int32_t>(m_addr + 16);
	}
	int32_t GetMaximumFractionalDigits() {
		return memory.read<int32_t>(m_addr + 20);
	}
	struct FText GetReturnValue() {
		return memory.read<struct FText>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FLoadStreamLevelBySoftObjectPtr
{
public:
	FLoadStreamLevelBySoftObjectPtr(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct TSoftObjectPtr<UWorld> GetLevel() {
		return memory.read<struct TSoftObjectPtr<UWorld>>(m_addr + 8);
	}
	bool GetbMakeVisibleAfterLoad() {
		return memory.read<bool>(m_addr + 48);
	}
	bool GetbShouldBlockOnLoad() {
		return memory.read<bool>(m_addr + 49);
	}
	struct FLatentActionInfo GetLatentInfo() {
		return memory.read<struct FLatentActionInfo>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};class FOpenLevel
{
public:
	FOpenLevel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FName GetLevelName() {
		return memory.read<struct FName>(m_addr + 8);
	}
	bool GetbAbsolute() {
		return memory.read<bool>(m_addr + 16);
	}
	struct FString GetOptions() {
		return memory.read<struct FString>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FOpenLevelBySoftObjectPtr
{
public:
	FOpenLevelBySoftObjectPtr(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct TSoftObjectPtr<UWorld> GetLevel() {
		return memory.read<struct TSoftObjectPtr<UWorld>>(m_addr + 8);
	}
	bool GetbAbsolute() {
		return memory.read<bool>(m_addr + 48);
	}
	struct FString GetOptions() {
		return memory.read<struct FString>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};class FParseOption
{
public:
	FParseOption(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetOptions() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FString GetKey() {
		return memory.read<struct FString>(m_addr + 16);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FPlaySound2D
{
public:
	FPlaySound2D(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct USoundBase GetSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct USoundBase(ptr_addr);
	}
	float GetVolumeMultiplier() {
		return memory.read<float>(m_addr + 16);
	}
	float GetPitchMultiplier() {
		return memory.read<float>(m_addr + 20);
	}
	float GetStartTime() {
		return memory.read<float>(m_addr + 24);
	}
	struct USoundConcurrency GetConcurrencySettings() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 32);
		return struct USoundConcurrency(ptr_addr);
	}
	struct AActor GetOwningActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct AActor(ptr_addr);
	}
	bool GetbIsUISound() {
		return memory.read<bool>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};class FPopSoundMixModifier
{
public:
	FPopSoundMixModifier(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct USoundMix GetInSoundMixModifier() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct USoundMix(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FPrimeAllSoundsInSoundClass
{
public:
	FPrimeAllSoundsInSoundClass(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USoundClass GetInSoundClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct USoundClass(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FMultiply_TimespanFloat
{
public:
	FMultiply_TimespanFloat(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTimespan GetA() {
		return memory.read<struct FTimespan>(m_addr + 0);
	}
	float GetScalar() {
		return memory.read<float>(m_addr + 8);
	}
	struct FTimespan GetReturnValue() {
		return memory.read<struct FTimespan>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FPushSoundMixModifier
{
public:
	FPushSoundMixModifier(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct USoundMix GetInSoundMixModifier() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct USoundMix(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FRebaseZeroOriginOntoLocal
{
public:
	FRebaseZeroOriginOntoLocal(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FVector GetWorldLocation() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FBooleanAND
{
public:
	FBooleanAND(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetA() {
		return memory.read<bool>(m_addr + 0);
	}
	bool GetB() {
		return memory.read<bool>(m_addr + 1);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 2);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetSuitableCulture
{
public:
	FGetSuitableCulture(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FString> GetAvailableCultures() {
		return memory.read<struct TArray<struct FString>>(m_addr + 0);
	}
	struct FString GetCultureToMatch() {
		return memory.read<struct FString>(m_addr + 16);
	}
	struct FString GetFallbackCulture() {
		return memory.read<struct FString>(m_addr + 32);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};class FRemovePlayer
{
public:
	FRemovePlayer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APlayerController GetPlayer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APlayerController(ptr_addr);
	}
	bool GetbDestroyPawn() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSaveGameToSlot
{
public:
	FSaveGameToSlot(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USaveGame GetSaveGameObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct USaveGame(ptr_addr);
	}
	struct FString GetSlotName() {
		return memory.read<struct FString>(m_addr + 8);
	}
	int32_t GetUserIndex() {
		return memory.read<int32_t>(m_addr + 24);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 28);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetEnableWorldRendering
{
public:
	FSetEnableWorldRendering(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	bool GetbEnable() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetForceDisableSplitscreen
{
public:
	FSetForceDisableSplitscreen(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	bool GetbDisable() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSignOfInteger64
{
public:
	FSignOfInteger64(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int64_t GetA() {
		return memory.read<int64_t>(m_addr + 0);
	}
	int64_t GetReturnValue() {
		return memory.read<int64_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FMultiplyByPi
{
public:
	FMultiplyByPi(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetValue() {
		return memory.read<float>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetGamePaused
{
public:
	FSetGamePaused(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	bool GetbPaused() {
		return memory.read<bool>(m_addr + 8);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 9);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetGlobalListenerFocusParameters
{
public:
	FSetGlobalListenerFocusParameters(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	float GetFocusAzimuthScale() {
		return memory.read<float>(m_addr + 8);
	}
	float GetNonFocusAzimuthScale() {
		return memory.read<float>(m_addr + 12);
	}
	float GetFocusDistanceScale() {
		return memory.read<float>(m_addr + 16);
	}
	float GetNonFocusDistanceScale() {
		return memory.read<float>(m_addr + 20);
	}
	float GetFocusVolumeScale() {
		return memory.read<float>(m_addr + 24);
	}
	float GetNonFocusVolumeScale() {
		return memory.read<float>(m_addr + 28);
	}
	float GetFocusPriorityScale() {
		return memory.read<float>(m_addr + 32);
	}
	float GetNonFocusPriorityScale() {
		return memory.read<float>(m_addr + 36);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetGlobalTimeDilation
{
public:
	FSetGlobalTimeDilation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	float GetTimeDilation() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetLayerBottomAltitude
{
public:
	FSetLayerBottomAltitude(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FRadiansToDegrees
{
public:
	FRadiansToDegrees(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetA() {
		return memory.read<float>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetMaxAudioChannelsScaled
{
public:
	FSetMaxAudioChannelsScaled(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	float GetMaxChannelCountScale() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetPlayerControllerID
{
public:
	FSetPlayerControllerID(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APlayerController GetPlayer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APlayerController(ptr_addr);
	}
	int32_t GetControllerId() {
		return memory.read<int32_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetSoundMixClassOverride
{
public:
	FSetSoundMixClassOverride(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct USoundMix GetInSoundMixModifier() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct USoundMix(ptr_addr);
	}
	struct USoundClass GetInSoundClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct USoundClass(ptr_addr);
	}
	float GetVolume() {
		return memory.read<float>(m_addr + 24);
	}
	float GetPitch() {
		return memory.read<float>(m_addr + 28);
	}
	float GetFadeInTime() {
		return memory.read<float>(m_addr + 32);
	}
	bool GetbApplyToChildren() {
		return memory.read<bool>(m_addr + 36);
	}

private:
	std::uint64_t m_addr = 0;
};class FSpawnDecalAtLocation
{
public:
	FSpawnDecalAtLocation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct UMaterialInterface GetDecalMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UMaterialInterface(ptr_addr);
	}
	struct FVector GetDecalSize() {
		return memory.read<struct FVector>(m_addr + 16);
	}
	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 28);
	}
	struct FRotator GetRotation() {
		return memory.read<struct FRotator>(m_addr + 40);
	}
	float GetLifeSpan() {
		return memory.read<float>(m_addr + 52);
	}
	struct UDecalComponent GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct UDecalComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSpawnDecalAttached
{
public:
	FSpawnDecalAttached(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UMaterialInterface GetDecalMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UMaterialInterface(ptr_addr);
	}
	struct FVector GetDecalSize() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	struct USceneComponent GetAttachToComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 24);
		return struct USceneComponent(ptr_addr);
	}
	struct FName GetAttachPointName() {
		return memory.read<struct FName>(m_addr + 32);
	}
	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 40);
	}
	struct FRotator GetRotation() {
		return memory.read<struct FRotator>(m_addr + 52);
	}
	enum class EAttachLocation GetLocationType() {
		return memory.read<enum class EAttachLocation>(m_addr + 64);
	}
	float GetLifeSpan() {
		return memory.read<float>(m_addr + 68);
	}
	struct UDecalComponent GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return struct UDecalComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSpawnForceFeedbackAtLocation
{
public:
	FSpawnForceFeedbackAtLocation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct UForceFeedbackEffect GetForceFeedbackEffect() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UForceFeedbackEffect(ptr_addr);
	}
	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 16);
	}
	struct FRotator GetRotation() {
		return memory.read<struct FRotator>(m_addr + 28);
	}
	bool GetbLooping() {
		return memory.read<bool>(m_addr + 40);
	}
	float GetIntensityMultiplier() {
		return memory.read<float>(m_addr + 44);
	}
	float GetStartTime() {
		return memory.read<float>(m_addr + 48);
	}
	struct UForceFeedbackAttenuation GetAttenuationSettings() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct UForceFeedbackAttenuation(ptr_addr);
	}
	bool GetbAutoDestroy() {
		return memory.read<bool>(m_addr + 64);
	}
	struct UForceFeedbackComponent GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return struct UForceFeedbackComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSpawnForceFeedbackAttached
{
public:
	FSpawnForceFeedbackAttached(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UForceFeedbackEffect GetForceFeedbackEffect() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UForceFeedbackEffect(ptr_addr);
	}
	struct USceneComponent GetAttachToComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct USceneComponent(ptr_addr);
	}
	struct FName GetAttachPointName() {
		return memory.read<struct FName>(m_addr + 16);
	}
	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 24);
	}
	struct FRotator GetRotation() {
		return memory.read<struct FRotator>(m_addr + 36);
	}
	enum class EAttachLocation GetLocationType() {
		return memory.read<enum class EAttachLocation>(m_addr + 48);
	}
	bool GetbStopWhenAttachedToDestroyed() {
		return memory.read<bool>(m_addr + 49);
	}
	bool GetbLooping() {
		return memory.read<bool>(m_addr + 50);
	}
	float GetIntensityMultiplier() {
		return memory.read<float>(m_addr + 52);
	}
	float GetStartTime() {
		return memory.read<float>(m_addr + 56);
	}
	struct UForceFeedbackAttenuation GetAttenuationSettings() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 64);
		return struct UForceFeedbackAttenuation(ptr_addr);
	}
	bool GetbAutoDestroy() {
		return memory.read<bool>(m_addr + 72);
	}
	struct UForceFeedbackComponent GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 80);
		return struct UForceFeedbackComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSpawnObject
{
public:
	FSpawnObject(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UObject GetObjectClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return UObject(ptr_addr);
	}
	struct UObject GetOuter() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UObject(ptr_addr);
	}
	struct UObject GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UObject(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSuggestProjectileVelocity_CustomArc
{
public:
	FSuggestProjectileVelocity_CustomArc(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FVector GetOutLaunchVelocity() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	struct FVector GetStartPos() {
		return memory.read<struct FVector>(m_addr + 20);
	}
	struct FVector GetEndPos() {
		return memory.read<struct FVector>(m_addr + 32);
	}
	float GetOverrideGravityZ() {
		return memory.read<float>(m_addr + 44);
	}
	float GetArcParam() {
		return memory.read<float>(m_addr + 48);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 52);
	}

private:
	std::uint64_t m_addr = 0;
};class FVSizeXYSquared
{
public:
	FVSizeXYSquared(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetA() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FUnloadStreamLevel
{
public:
	FUnloadStreamLevel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FName GetLevelName() {
		return memory.read<struct FName>(m_addr + 8);
	}
	struct FLatentActionInfo GetLatentInfo() {
		return memory.read<struct FLatentActionInfo>(m_addr + 16);
	}
	bool GetbShouldBlockOnUnload() {
		return memory.read<bool>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};class FUnloadStreamLevelBySoftObjectPtr
{
public:
	FUnloadStreamLevelBySoftObjectPtr(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct TSoftObjectPtr<UWorld> GetLevel() {
		return memory.read<struct TSoftObjectPtr<UWorld>>(m_addr + 8);
	}
	struct FLatentActionInfo GetLatentInfo() {
		return memory.read<struct FLatentActionInfo>(m_addr + 48);
	}
	bool GetbShouldBlockOnUnload() {
		return memory.read<bool>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};class FUnRetainAllSoundsInSoundClass
{
public:
	FUnRetainAllSoundsInSoundClass(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USoundClass GetInSoundClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct USoundClass(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FBreakImportanceTexture
{
public:
	FBreakImportanceTexture(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FImportanceTexture GetImportanceTexture() {
		return memory.read<struct FImportanceTexture>(m_addr + 0);
	}
	struct UTexture2D GetTexture() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 80);
		return struct UTexture2D(ptr_addr);
	}
	enum class EImportanceWeight GetWeightingFunc() {
		return memory.read<enum class EImportanceWeight>(m_addr + 88);
	}

private:
	std::uint64_t m_addr = 0;
};class FRemovePaintedVertices
{
public:
	FRemovePaintedVertices(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UStaticMeshComponent GetStaticMeshComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UStaticMeshComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FNextSobolCell2D
{
public:
	FNextSobolCell2D(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetNumCells() {
		return memory.read<int32_t>(m_addr + 4);
	}
	struct FVector2D GetPreviousValue() {
		return memory.read<struct FVector2D>(m_addr + 8);
	}
	struct FVector2D GetReturnValue() {
		return memory.read<struct FVector2D>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FRandomSobolCell2D
{
public:
	FRandomSobolCell2D(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetNumCells() {
		return memory.read<int32_t>(m_addr + 4);
	}
	struct FVector2D GetCell() {
		return memory.read<struct FVector2D>(m_addr + 8);
	}
	struct FVector2D GetSeed() {
		return memory.read<struct FVector2D>(m_addr + 16);
	}
	struct FVector2D GetReturnValue() {
		return memory.read<struct FVector2D>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FRandomSobolCell3D
{
public:
	FRandomSobolCell3D(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetNumCells() {
		return memory.read<int32_t>(m_addr + 4);
	}
	struct FVector GetCell() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	struct FVector GetSeed() {
		return memory.read<struct FVector>(m_addr + 20);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetConstrainedComponents
{
public:
	FSetConstrainedComponents(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPrimitiveComponent GetComponent1() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UPrimitiveComponent(ptr_addr);
	}
	struct FName GetBoneName1() {
		return memory.read<struct FName>(m_addr + 8);
	}
	struct UPrimitiveComponent GetComponent2() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UPrimitiveComponent(ptr_addr);
	}
	struct FName GetBoneName2() {
		return memory.read<struct FName>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FRandomSobolFloat
{
public:
	FRandomSobolFloat(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetDimension() {
		return memory.read<int32_t>(m_addr + 4);
	}
	float GetSeed() {
		return memory.read<float>(m_addr + 8);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetControllerVectorKeyState
{
public:
	FGetControllerVectorKeyState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKey GetKey() {
		return memory.read<struct FKey>(m_addr + 0);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetTouchState
{
public:
	FGetTouchState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetFingerIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	float GetLocationX() {
		return memory.read<float>(m_addr + 4);
	}
	float GetLocationY() {
		return memory.read<float>(m_addr + 8);
	}
	bool GetbIsCurrentlyPressed() {
		return memory.read<bool>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FDivide_VectorInt
{
public:
	FDivide_VectorInt(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetA() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	int32_t GetB() {
		return memory.read<int32_t>(m_addr + 12);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FWasControllerKeyJustPressed
{
public:
	FWasControllerKeyJustPressed(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKey GetKey() {
		return memory.read<struct FKey>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FWasControllerKeyJustReleased
{
public:
	FWasControllerKeyJustReleased(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKey GetKey() {
		return memory.read<struct FKey>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetValidValue
{
public:
	FGetValidValue(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UEnum GetEnum() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UEnum(ptr_addr);
	}
	char GetEnumeratorValue() {
		return memory.read<char>(m_addr + 8);
	}
	char GetReturnValue() {
		return memory.read<char>(m_addr + 9);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetDays
{
public:
	FGetDays(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTimespan GetA() {
		return memory.read<struct FTimespan>(m_addr + 0);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FAddActionMapping
{
public:
	FAddActionMapping(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FInputActionKeyMapping GetKeyMapping() {
		return memory.read<struct FInputActionKeyMapping>(m_addr + 0);
	}
	bool GetbForceRebuildKeymaps() {
		return memory.read<bool>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};class FAddAxisMapping
{
public:
	FAddAxisMapping(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FInputAxisKeyMapping GetKeyMapping() {
		return memory.read<struct FInputAxisKeyMapping>(m_addr + 0);
	}
	bool GetbForceRebuildKeymaps() {
		return memory.read<bool>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};class FAsDate_DateTime
{
public:
	FAsDate_DateTime(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDateTime GetInDateTime() {
		return memory.read<struct FDateTime>(m_addr + 0);
	}
	struct FText GetReturnValue() {
		return memory.read<struct FText>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetActionNames
{
public:
	FGetActionNames(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FName> GetActionNames() {
		return memory.read<struct TArray<struct FName>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetAxisMappingByName
{
public:
	FGetAxisMappingByName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetInAxisName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct TArray<struct FInputAxisKeyMapping> GetOutMappings() {
		return memory.read<struct TArray<struct FInputAxisKeyMapping>>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FMakeSkinWeightInfo
{
public:
	FMakeSkinWeightInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetBone0() {
		return memory.read<int32_t>(m_addr + 0);
	}
	char GetWeight0() {
		return memory.read<char>(m_addr + 4);
	}
	int32_t GetBone1() {
		return memory.read<int32_t>(m_addr + 8);
	}
	char GetWeight1() {
		return memory.read<char>(m_addr + 12);
	}
	int32_t GetBone2() {
		return memory.read<int32_t>(m_addr + 16);
	}
	char GetWeight2() {
		return memory.read<char>(m_addr + 20);
	}
	int32_t GetBone3() {
		return memory.read<int32_t>(m_addr + 24);
	}
	char GetWeight3() {
		return memory.read<char>(m_addr + 28);
	}
	struct FSkelMeshSkinWeightInfo GetReturnValue() {
		return memory.read<struct FSkelMeshSkinWeightInfo>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetKey
{
public:
	FGetKey(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKeyEvent GetInput() {
		return memory.read<struct FKeyEvent>(m_addr + 0);
	}
	struct FKey GetReturnValue() {
		return memory.read<struct FKey>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetAxisNames
{
public:
	FGetAxisNames(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FName> GetAxisNames() {
		return memory.read<struct TArray<struct FName>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FAsDateTime_DateTime
{
public:
	FAsDateTime_DateTime(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDateTime GetIn() {
		return memory.read<struct FDateTime>(m_addr + 0);
	}
	struct FText GetReturnValue() {
		return memory.read<struct FText>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetInputSettings
{
public:
	FGetInputSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UInputSettings GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UInputSettings(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FTextTrimTrailing
{
public:
	FTextTrimTrailing(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetInText() {
		return memory.read<struct FText>(m_addr + 0);
	}
	struct FText GetReturnValue() {
		return memory.read<struct FText>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FArray_Add
{
public:
	FArray_Add(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<int32_t> GetTargetArray() {
		return memory.read<struct TArray<int32_t>>(m_addr + 0);
	}
	int32_t GetNewItem() {
		return memory.read<int32_t>(m_addr + 16);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FArray_AddUnique
{
public:
	FArray_AddUnique(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<int32_t> GetTargetArray() {
		return memory.read<struct TArray<int32_t>>(m_addr + 0);
	}
	int32_t GetNewItem() {
		return memory.read<int32_t>(m_addr + 16);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FArray_Append
{
public:
	FArray_Append(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<int32_t> GetTargetArray() {
		return memory.read<struct TArray<int32_t>>(m_addr + 0);
	}
	struct TArray<int32_t> GetSourceArray() {
		return memory.read<struct TArray<int32_t>>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FArray_Clear
{
public:
	FArray_Clear(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<int32_t> GetTargetArray() {
		return memory.read<struct TArray<int32_t>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FArray_Contains
{
public:
	FArray_Contains(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<int32_t> GetTargetArray() {
		return memory.read<struct TArray<int32_t>>(m_addr + 0);
	}
	int32_t GetItemToFind() {
		return memory.read<int32_t>(m_addr + 16);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetCubemap
{
public:
	FSetCubemap(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTextureCube GetNewCubemap() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UTextureCube(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FArray_Find
{
public:
	FArray_Find(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<int32_t> GetTargetArray() {
		return memory.read<struct TArray<int32_t>>(m_addr + 0);
	}
	int32_t GetItemToFind() {
		return memory.read<int32_t>(m_addr + 16);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FArray_Insert
{
public:
	FArray_Insert(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<int32_t> GetTargetArray() {
		return memory.read<struct TArray<int32_t>>(m_addr + 0);
	}
	int32_t GetNewItem() {
		return memory.read<int32_t>(m_addr + 16);
	}
	int32_t GetIndex() {
		return memory.read<int32_t>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FArray_IsValidIndex
{
public:
	FArray_IsValidIndex(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<int32_t> GetTargetArray() {
		return memory.read<struct TArray<int32_t>>(m_addr + 0);
	}
	int32_t GetIndexToTest() {
		return memory.read<int32_t>(m_addr + 16);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FArray_Length
{
public:
	FArray_Length(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<int32_t> GetTargetArray() {
		return memory.read<struct TArray<int32_t>>(m_addr + 0);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FArray_Shuffle
{
public:
	FArray_Shuffle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<int32_t> GetTargetArray() {
		return memory.read<struct TArray<int32_t>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FFilterArray
{
public:
	FFilterArray(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct AActor> GetTargetArray() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct TArray<struct AActor>(ptr_addr);
	}
	AActor GetFilterClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return AActor(ptr_addr);
	}
	struct TArray<struct AActor> GetFilteredArray() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 24);
		return struct TArray<struct AActor>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetArrayPropertyByName
{
public:
	FSetArrayPropertyByName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FName GetPropertyName() {
		return memory.read<struct FName>(m_addr + 8);
	}
	struct TArray<int32_t> GetValue() {
		return memory.read<struct TArray<int32_t>>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FConv_GuidToString
{
public:
	FConv_GuidToString(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FGuid GetInGuid() {
		return memory.read<struct FGuid>(m_addr + 0);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FInvalidate_Guid
{
public:
	FInvalidate_Guid(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FGuid GetInGuid() {
		return memory.read<struct FGuid>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsValid_Guid
{
public:
	FIsValid_Guid(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FGuid GetInGuid() {
		return memory.read<struct FGuid>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FNewGuid
{
public:
	FNewGuid(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FGuid GetReturnValue() {
		return memory.read<struct FGuid>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetMeshClothingAssets
{
public:
	FSetMeshClothingAssets(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct UClothingAssetBase> GetInMeshClothingAssets() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct TArray<struct UClothingAssetBase>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FNotEqual_GuidGuid
{
public:
	FNotEqual_GuidGuid(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FGuid GetA() {
		return memory.read<struct FGuid>(m_addr + 0);
	}
	struct FGuid GetB() {
		return memory.read<struct FGuid>(m_addr + 16);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FParse_StringToGuid
{
public:
	FParse_StringToGuid(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetGuidString() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FGuid GetOutGuid() {
		return memory.read<struct FGuid>(m_addr + 16);
	}
	bool GetSuccess() {
		return memory.read<bool>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetUserIndex
{
public:
	FGetUserIndex(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKeyEvent GetInput() {
		return memory.read<struct FKeyEvent>(m_addr + 0);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};class FNotEqual_IntInt
{
public:
	FNotEqual_IntInt(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetA() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetB() {
		return memory.read<int32_t>(m_addr + 4);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FInputEvent_IsAltDown
{
public:
	FInputEvent_IsAltDown(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FInputEvent GetInput() {
		return memory.read<struct FInputEvent>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FInputEvent_IsCommandDown
{
public:
	FInputEvent_IsCommandDown(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FInputEvent GetInput() {
		return memory.read<struct FInputEvent>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FInputEvent_IsControlDown
{
public:
	FInputEvent_IsControlDown(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FInputEvent GetInput() {
		return memory.read<struct FInputEvent>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FInputEvent_IsLeftCommandDown
{
public:
	FInputEvent_IsLeftCommandDown(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FInputEvent GetInput() {
		return memory.read<struct FInputEvent>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FVector_ClampSize2D
{
public:
	FVector_ClampSize2D(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetA() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	float GetMin() {
		return memory.read<float>(m_addr + 12);
	}
	float GetMax() {
		return memory.read<float>(m_addr + 16);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FMakeRotFromZY
{
public:
	FMakeRotFromZY(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetZ() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetY() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	struct FRotator GetReturnValue() {
		return memory.read<struct FRotator>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FInputEvent_IsRepeat
{
public:
	FInputEvent_IsRepeat(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FInputEvent GetInput() {
		return memory.read<struct FInputEvent>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FRandomUnitVectorInEllipticalConeInRadians
{
public:
	FRandomUnitVectorInEllipticalConeInRadians(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetConeDir() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	float GetMaxYawInRadians() {
		return memory.read<float>(m_addr + 12);
	}
	float GetMaxPitchInRadians() {
		return memory.read<float>(m_addr + 16);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FInputEvent_IsRightAltDown
{
public:
	FInputEvent_IsRightAltDown(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FInputEvent GetInput() {
		return memory.read<struct FInputEvent>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FInputEvent_IsRightCommandDown
{
public:
	FInputEvent_IsRightCommandDown(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FInputEvent GetInput() {
		return memory.read<struct FInputEvent>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FInputEvent_IsRightControlDown
{
public:
	FInputEvent_IsRightControlDown(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FInputEvent GetInput() {
		return memory.read<struct FInputEvent>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FInputEvent_IsRightShiftDown
{
public:
	FInputEvent_IsRightShiftDown(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FInputEvent GetInput() {
		return memory.read<struct FInputEvent>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FKey_GetNavigationAction
{
public:
	FKey_GetNavigationAction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKey GetInKey() {
		return memory.read<struct FKey>(m_addr + 0);
	}
	enum class EUINavigationAction GetReturnValue() {
		return memory.read<enum class EUINavigationAction>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FKey_IsAnalog
{
public:
	FKey_IsAnalog(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKey GetKey() {
		return memory.read<struct FKey>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FKey_IsAxis1D
{
public:
	FKey_IsAxis1D(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKey GetKey() {
		return memory.read<struct FKey>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FKey_IsAxis2D
{
public:
	FKey_IsAxis2D(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKey GetKey() {
		return memory.read<struct FKey>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FKey_IsAxis3D
{
public:
	FKey_IsAxis3D(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKey GetKey() {
		return memory.read<struct FKey>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FKey_IsButtonAxis
{
public:
	FKey_IsButtonAxis(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKey GetKey() {
		return memory.read<struct FKey>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FKey_IsGamepadKey
{
public:
	FKey_IsGamepadKey(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKey GetKey() {
		return memory.read<struct FKey>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetDisableCollision
{
public:
	FSetDisableCollision(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbDisableCollision() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FKey_IsKeyboardKey
{
public:
	FKey_IsKeyboardKey(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKey GetKey() {
		return memory.read<struct FKey>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FKey_IsMouseButton
{
public:
	FKey_IsMouseButton(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKey GetKey() {
		return memory.read<struct FKey>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FKey_IsVectorAxis
{
public:
	FKey_IsVectorAxis(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKey GetKey() {
		return memory.read<struct FKey>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FPointerEvent_GetCursorDelta
{
public:
	FPointerEvent_GetCursorDelta(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FPointerEvent GetInput() {
		return memory.read<struct FPointerEvent>(m_addr + 0);
	}
	struct FVector2D GetReturnValue() {
		return memory.read<struct FVector2D>(m_addr + 112);
	}

private:
	std::uint64_t m_addr = 0;
};class FPointerEvent_GetEffectingButton
{
public:
	FPointerEvent_GetEffectingButton(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FPointerEvent GetInput() {
		return memory.read<struct FPointerEvent>(m_addr + 0);
	}
	struct FKey GetReturnValue() {
		return memory.read<struct FKey>(m_addr + 112);
	}

private:
	std::uint64_t m_addr = 0;
};class FPointerEvent_GetGestureDelta
{
public:
	FPointerEvent_GetGestureDelta(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FPointerEvent GetInput() {
		return memory.read<struct FPointerEvent>(m_addr + 0);
	}
	struct FVector2D GetReturnValue() {
		return memory.read<struct FVector2D>(m_addr + 112);
	}

private:
	std::uint64_t m_addr = 0;
};class FPointerEvent_GetScreenSpacePosition
{
public:
	FPointerEvent_GetScreenSpacePosition(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FPointerEvent GetInput() {
		return memory.read<struct FPointerEvent>(m_addr + 0);
	}
	struct FVector2D GetReturnValue() {
		return memory.read<struct FVector2D>(m_addr + 112);
	}

private:
	std::uint64_t m_addr = 0;
};class FPointerEvent_GetWheelDelta
{
public:
	FPointerEvent_GetWheelDelta(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FPointerEvent GetInput() {
		return memory.read<struct FPointerEvent>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 112);
	}

private:
	std::uint64_t m_addr = 0;
};class FMinInt64
{
public:
	FMinInt64(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int64_t GetA() {
		return memory.read<int64_t>(m_addr + 0);
	}
	int64_t GetB() {
		return memory.read<int64_t>(m_addr + 8);
	}
	int64_t GetReturnValue() {
		return memory.read<int64_t>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FPointerEvent_IsTouchEvent
{
public:
	FPointerEvent_IsTouchEvent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FPointerEvent GetInput() {
		return memory.read<struct FPointerEvent>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 112);
	}

private:
	std::uint64_t m_addr = 0;
};class FClearCurrentAssetGroupCulture
{
public:
	FClearCurrentAssetGroupCulture(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetAssetGroup() {
		return memory.read<struct FName>(m_addr + 0);
	}
	bool GetSaveToConfig() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetCultureDisplayName
{
public:
	FGetCultureDisplayName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetCulture() {
		return memory.read<struct FString>(m_addr + 0);
	}
	bool GetLocalized() {
		return memory.read<bool>(m_addr + 16);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetRegisteredStringTables
{
public:
	FGetRegisteredStringTables(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FName> GetReturnValue() {
		return memory.read<struct TArray<struct FName>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetCurrentAssetGroupCulture
{
public:
	FGetCurrentAssetGroupCulture(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetAssetGroup() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetEnumeratorUserFriendlyName
{
public:
	FGetEnumeratorUserFriendlyName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UEnum GetEnum() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UEnum(ptr_addr);
	}
	char GetEnumeratorValue() {
		return memory.read<char>(m_addr + 8);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetCurrentLanguage
{
public:
	FGetCurrentLanguage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetBodyTargetTransform
{
public:
	FGetBodyTargetTransform(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetBodyName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FTransform GetReturnValue() {
		return memory.read<struct FTransform>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetCurrentLocale
{
public:
	FGetCurrentLocale(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetLocalizedCultures
{
public:
	FGetLocalizedCultures(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetIncludeGame() {
		return memory.read<bool>(m_addr + 0);
	}
	bool GetIncludeEngine() {
		return memory.read<bool>(m_addr + 1);
	}
	bool GetIncludeEditor() {
		return memory.read<bool>(m_addr + 2);
	}
	bool GetIncludeAdditional() {
		return memory.read<bool>(m_addr + 3);
	}
	struct TArray<struct FString> GetReturnValue() {
		return memory.read<struct TArray<struct FString>>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetNativeCulture
{
public:
	FGetNativeCulture(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class ELocalizedTextSourceCategory GetTextCategory() {
		return memory.read<enum class ELocalizedTextSourceCategory>(m_addr + 0);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetTexture
{
public:
	FGetTexture(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTexture GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UTexture(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetConstraintReferenceFrame
{
public:
	FSetConstraintReferenceFrame(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class EConstraintFrame GetFrame() {
		return memory.read<enum class EConstraintFrame>(m_addr + 0);
	}
	struct FTransform GetRefFrame() {
		return memory.read<struct FTransform>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetCurrentLanguage
{
public:
	FSetCurrentLanguage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetCulture() {
		return memory.read<struct FString>(m_addr + 0);
	}
	bool GetSaveToConfig() {
		return memory.read<bool>(m_addr + 16);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 17);
	}

private:
	std::uint64_t m_addr = 0;
};class FConv_ByteToInt
{
public:
	FConv_ByteToInt(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	char GetInByte() {
		return memory.read<char>(m_addr + 0);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetVectorParameterValue
{
public:
	FGetVectorParameterValue(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct UMaterialParameterCollection GetCollection() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UMaterialParameterCollection(ptr_addr);
	}
	struct FName GetParameterName() {
		return memory.read<struct FName>(m_addr + 16);
	}
	struct FLinearColor GetReturnValue() {
		return memory.read<struct FLinearColor>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetScalarParameterValue
{
public:
	FSetScalarParameterValue(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetParameterName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	float GetValue() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetVectorParameterValue
{
public:
	FSetVectorParameterValue(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetParameterName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FLinearColor GetValue() {
		return memory.read<struct FLinearColor>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FAbs_Int
{
public:
	FAbs_Int(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetA() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FAbs_Int64
{
public:
	FAbs_Int64(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int64_t GetA() {
		return memory.read<int64_t>(m_addr + 0);
	}
	int64_t GetReturnValue() {
		return memory.read<int64_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FAcos
{
public:
	FAcos(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetA() {
		return memory.read<float>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FAdd_ByteByte
{
public:
	FAdd_ByteByte(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	char GetA() {
		return memory.read<char>(m_addr + 0);
	}
	char GetB() {
		return memory.read<char>(m_addr + 1);
	}
	char GetReturnValue() {
		return memory.read<char>(m_addr + 2);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetStrengthMultiplyer
{
public:
	FSetStrengthMultiplyer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetInStrengthMultiplyer() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FAdd_DateTimeDateTime
{
public:
	FAdd_DateTimeDateTime(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDateTime GetA() {
		return memory.read<struct FDateTime>(m_addr + 0);
	}
	struct FDateTime GetB() {
		return memory.read<struct FDateTime>(m_addr + 8);
	}
	struct FDateTime GetReturnValue() {
		return memory.read<struct FDateTime>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FAdd_DateTimeTimespan
{
public:
	FAdd_DateTimeTimespan(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDateTime GetA() {
		return memory.read<struct FDateTime>(m_addr + 0);
	}
	struct FTimespan GetB() {
		return memory.read<struct FTimespan>(m_addr + 8);
	}
	struct FDateTime GetReturnValue() {
		return memory.read<struct FDateTime>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetMorphTargets
{
public:
	FSetMorphTargets(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct UMorphTarget> GetInMorphTargets() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct TArray<struct UMorphTarget>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FAdd_IntInt
{
public:
	FAdd_IntInt(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetA() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetB() {
		return memory.read<int32_t>(m_addr + 4);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FAdd_IntPointInt
{
public:
	FAdd_IntPointInt(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FIntPoint GetA() {
		return memory.read<struct FIntPoint>(m_addr + 0);
	}
	int32_t GetB() {
		return memory.read<int32_t>(m_addr + 8);
	}
	struct FIntPoint GetReturnValue() {
		return memory.read<struct FIntPoint>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FAdd_IntPointIntPoint
{
public:
	FAdd_IntPointIntPoint(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FIntPoint GetA() {
		return memory.read<struct FIntPoint>(m_addr + 0);
	}
	struct FIntPoint GetB() {
		return memory.read<struct FIntPoint>(m_addr + 8);
	}
	struct FIntPoint GetReturnValue() {
		return memory.read<struct FIntPoint>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FAdd_MatrixMatrix
{
public:
	FAdd_MatrixMatrix(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMatrix GetA() {
		return memory.read<struct FMatrix>(m_addr + 0);
	}
	struct FMatrix GetB() {
		return memory.read<struct FMatrix>(m_addr + 64);
	}
	struct FMatrix GetReturnValue() {
		return memory.read<struct FMatrix>(m_addr + 128);
	}

private:
	std::uint64_t m_addr = 0;
};class FAdd_Vector2DFloat
{
public:
	FAdd_Vector2DFloat(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector2D GetA() {
		return memory.read<struct FVector2D>(m_addr + 0);
	}
	float GetB() {
		return memory.read<float>(m_addr + 8);
	}
	struct FVector2D GetReturnValue() {
		return memory.read<struct FVector2D>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FAdd_Vector2DVector2D
{
public:
	FAdd_Vector2DVector2D(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector2D GetA() {
		return memory.read<struct FVector2D>(m_addr + 0);
	}
	struct FVector2D GetB() {
		return memory.read<struct FVector2D>(m_addr + 8);
	}
	struct FVector2D GetReturnValue() {
		return memory.read<struct FVector2D>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FNotEqual_ClassClass
{
public:
	FNotEqual_ClassClass(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UObject GetA() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return UObject(ptr_addr);
	}
	UObject GetB() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return UObject(ptr_addr);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FAdd_VectorInt
{
public:
	FAdd_VectorInt(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetA() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	int32_t GetB() {
		return memory.read<int32_t>(m_addr + 12);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FAsin
{
public:
	FAsin(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetA() {
		return memory.read<float>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FMin
{
public:
	FMin(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetA() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetB() {
		return memory.read<int32_t>(m_addr + 4);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FAtan2
{
public:
	FAtan2(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetY() {
		return memory.read<float>(m_addr + 0);
	}
	float GetX() {
		return memory.read<float>(m_addr + 4);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FBMax
{
public:
	FBMax(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	char GetA() {
		return memory.read<char>(m_addr + 0);
	}
	char GetB() {
		return memory.read<char>(m_addr + 1);
	}
	char GetReturnValue() {
		return memory.read<char>(m_addr + 2);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsStreamingStatePending
{
public:
	FIsStreamingStatePending(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FBMin
{
public:
	FBMin(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	char GetA() {
		return memory.read<char>(m_addr + 0);
	}
	char GetB() {
		return memory.read<char>(m_addr + 1);
	}
	char GetReturnValue() {
		return memory.read<char>(m_addr + 2);
	}

private:
	std::uint64_t m_addr = 0;
};class FBooleanXOR
{
public:
	FBooleanXOR(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetA() {
		return memory.read<bool>(m_addr + 0);
	}
	bool GetB() {
		return memory.read<bool>(m_addr + 1);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 2);
	}

private:
	std::uint64_t m_addr = 0;
};class FBreakColor
{
public:
	FBreakColor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLinearColor GetInColor() {
		return memory.read<struct FLinearColor>(m_addr + 0);
	}
	float GetR() {
		return memory.read<float>(m_addr + 16);
	}
	float GetG() {
		return memory.read<float>(m_addr + 20);
	}
	float GetB() {
		return memory.read<float>(m_addr + 24);
	}
	float GetA() {
		return memory.read<float>(m_addr + 28);
	}

private:
	std::uint64_t m_addr = 0;
};class FBreakDateTime
{
public:
	FBreakDateTime(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDateTime GetInDateTime() {
		return memory.read<struct FDateTime>(m_addr + 0);
	}
	int32_t GetYear() {
		return memory.read<int32_t>(m_addr + 8);
	}
	int32_t GetMonth() {
		return memory.read<int32_t>(m_addr + 12);
	}
	int32_t GetDay() {
		return memory.read<int32_t>(m_addr + 16);
	}
	int32_t GetHour() {
		return memory.read<int32_t>(m_addr + 20);
	}
	int32_t GetMinute() {
		return memory.read<int32_t>(m_addr + 24);
	}
	int32_t GetSecond() {
		return memory.read<int32_t>(m_addr + 28);
	}
	int32_t GetMillisecond() {
		return memory.read<int32_t>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FBreakFrameRate
{
public:
	FBreakFrameRate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FFrameRate GetInFrameRate() {
		return memory.read<struct FFrameRate>(m_addr + 0);
	}
	int32_t GetNumerator() {
		return memory.read<int32_t>(m_addr + 8);
	}
	int32_t GetDenominator() {
		return memory.read<int32_t>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FBreakQualifiedFrameTime
{
public:
	FBreakQualifiedFrameTime(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FQualifiedFrameTime GetInFrameTime() {
		return memory.read<struct FQualifiedFrameTime>(m_addr + 0);
	}
	struct FFrameNumber GetFrame() {
		return memory.read<struct FFrameNumber>(m_addr + 16);
	}
	struct FFrameRate GetFrameRate() {
		return memory.read<struct FFrameRate>(m_addr + 20);
	}
	float GetSubFrame() {
		return memory.read<float>(m_addr + 28);
	}

private:
	std::uint64_t m_addr = 0;
};class FPaintVerticesSingleColor
{
public:
	FPaintVerticesSingleColor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UStaticMeshComponent GetStaticMeshComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UStaticMeshComponent(ptr_addr);
	}
	struct FLinearColor GetFillColor() {
		return memory.read<struct FLinearColor>(m_addr + 8);
	}
	bool GetbConvertToSRGB() {
		return memory.read<bool>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FBreakRandomStream
{
public:
	FBreakRandomStream(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRandomStream GetInRandomStream() {
		return memory.read<struct FRandomStream>(m_addr + 0);
	}
	int32_t GetInitialSeed() {
		return memory.read<int32_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetTextWorldSize
{
public:
	FGetTextWorldSize(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FBreakTimespan
{
public:
	FBreakTimespan(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTimespan GetInTimespan() {
		return memory.read<struct FTimespan>(m_addr + 0);
	}
	int32_t GetDays() {
		return memory.read<int32_t>(m_addr + 8);
	}
	int32_t GetHours() {
		return memory.read<int32_t>(m_addr + 12);
	}
	int32_t GetMinutes() {
		return memory.read<int32_t>(m_addr + 16);
	}
	int32_t GetSeconds() {
		return memory.read<int32_t>(m_addr + 20);
	}
	int32_t GetMilliseconds() {
		return memory.read<int32_t>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FBreakTransform
{
public:
	FBreakTransform(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTransform GetInTransform() {
		return memory.read<struct FTransform>(m_addr + 0);
	}
	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 48);
	}
	struct FRotator GetRotation() {
		return memory.read<struct FRotator>(m_addr + 60);
	}
	struct FVector GetScale() {
		return memory.read<struct FVector>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};class FBreakVector2D
{
public:
	FBreakVector2D(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector2D GetInVec() {
		return memory.read<struct FVector2D>(m_addr + 0);
	}
	float GetX() {
		return memory.read<float>(m_addr + 8);
	}
	float GetY() {
		return memory.read<float>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FBreakVector4
{
public:
	FBreakVector4(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector4 GetInVec() {
		return memory.read<struct FVector4>(m_addr + 0);
	}
	float GetX() {
		return memory.read<float>(m_addr + 16);
	}
	float GetY() {
		return memory.read<float>(m_addr + 20);
	}
	float GetZ() {
		return memory.read<float>(m_addr + 24);
	}
	float GetW() {
		return memory.read<float>(m_addr + 28);
	}

private:
	std::uint64_t m_addr = 0;
};class FClampAngle
{
public:
	FClampAngle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetAngleDegrees() {
		return memory.read<float>(m_addr + 0);
	}
	float GetMinAngleDegrees() {
		return memory.read<float>(m_addr + 4);
	}
	float GetMaxAngleDegrees() {
		return memory.read<float>(m_addr + 8);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FClampAxis
{
public:
	FClampAxis(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetAngle() {
		return memory.read<float>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FComposeTransforms
{
public:
	FComposeTransforms(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTransform GetA() {
		return memory.read<struct FTransform>(m_addr + 0);
	}
	struct FTransform GetB() {
		return memory.read<struct FTransform>(m_addr + 48);
	}
	struct FTransform GetReturnValue() {
		return memory.read<struct FTransform>(m_addr + 96);
	}

private:
	std::uint64_t m_addr = 0;
};class FConv_BoolToInt
{
public:
	FConv_BoolToInt(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetInBool() {
		return memory.read<bool>(m_addr + 0);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FConv_ColorToLinearColor
{
public:
	FConv_ColorToLinearColor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FColor GetInColor() {
		return memory.read<struct FColor>(m_addr + 0);
	}
	struct FLinearColor GetReturnValue() {
		return memory.read<struct FLinearColor>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FConv_FloatToLinearColor
{
public:
	FConv_FloatToLinearColor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetInFloat() {
		return memory.read<float>(m_addr + 0);
	}
	struct FLinearColor GetReturnValue() {
		return memory.read<struct FLinearColor>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FConv_FloatToVector
{
public:
	FConv_FloatToVector(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetInFloat() {
		return memory.read<float>(m_addr + 0);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FOr_IntInt
{
public:
	FOr_IntInt(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetA() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetB() {
		return memory.read<int32_t>(m_addr + 4);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FConv_RotatorToVector
{
public:
	FConv_RotatorToVector(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRotator GetInRot() {
		return memory.read<struct FRotator>(m_addr + 0);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FConv_IntToInt64
{
public:
	FConv_IntToInt64(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetinInt() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int64_t GetReturnValue() {
		return memory.read<int64_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGreaterEqual_IntInt
{
public:
	FGreaterEqual_IntInt(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetA() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetB() {
		return memory.read<int32_t>(m_addr + 4);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetRotated2D
{
public:
	FGetRotated2D(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector2D GetA() {
		return memory.read<struct FVector2D>(m_addr + 0);
	}
	float GetAngleDeg() {
		return memory.read<float>(m_addr + 8);
	}
	struct FVector2D GetReturnValue() {
		return memory.read<struct FVector2D>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FConv_IntToIntVector
{
public:
	FConv_IntToIntVector(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetinInt() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct FIntVector GetReturnValue() {
		return memory.read<struct FIntVector>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FConv_IntVectorToVector
{
public:
	FConv_IntVectorToVector(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FIntVector GetInIntVector() {
		return memory.read<struct FIntVector>(m_addr + 0);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FConv_LinearColorToVector
{
public:
	FConv_LinearColorToVector(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLinearColor GetInLinearColor() {
		return memory.read<struct FLinearColor>(m_addr + 0);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FConv_MatrixToTransform
{
public:
	FConv_MatrixToTransform(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMatrix GetInMatrix() {
		return memory.read<struct FMatrix>(m_addr + 0);
	}
	struct FTransform GetReturnValue() {
		return memory.read<struct FTransform>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};class FConv_RotatorToTransform
{
public:
	FConv_RotatorToTransform(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRotator GetInRotator() {
		return memory.read<struct FRotator>(m_addr + 0);
	}
	struct FTransform GetReturnValue() {
		return memory.read<struct FTransform>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FConv_Vector4ToQuaternion
{
public:
	FConv_Vector4ToQuaternion(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector4 GetInVec() {
		return memory.read<struct FVector4>(m_addr + 0);
	}
	struct FQuat GetReturnValue() {
		return memory.read<struct FQuat>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FConv_Vector4ToRotator
{
public:
	FConv_Vector4ToRotator(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector4 GetInVec() {
		return memory.read<struct FVector4>(m_addr + 0);
	}
	struct FRotator GetReturnValue() {
		return memory.read<struct FRotator>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FConv_Vector4ToVector
{
public:
	FConv_Vector4ToVector(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector4 GetInVector4() {
		return memory.read<struct FVector4>(m_addr + 0);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FConv_VectorToLinearColor
{
public:
	FConv_VectorToLinearColor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetInVec() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FLinearColor GetReturnValue() {
		return memory.read<struct FLinearColor>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FConv_VectorToQuaternion
{
public:
	FConv_VectorToQuaternion(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetInVec() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FQuat GetReturnValue() {
		return memory.read<struct FQuat>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FConvertTransformToRelative
{
public:
	FConvertTransformToRelative(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTransform GetTransform() {
		return memory.read<struct FTransform>(m_addr + 0);
	}
	struct FTransform GetParentTransform() {
		return memory.read<struct FTransform>(m_addr + 48);
	}
	struct FTransform GetReturnValue() {
		return memory.read<struct FTransform>(m_addr + 96);
	}

private:
	std::uint64_t m_addr = 0;
};class FCrossProduct2D
{
public:
	FCrossProduct2D(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector2D GetA() {
		return memory.read<struct FVector2D>(m_addr + 0);
	}
	struct FVector2D GetB() {
		return memory.read<struct FVector2D>(m_addr + 8);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FExp
{
public:
	FExp(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetA() {
		return memory.read<float>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FDateTimeFromIsoString
{
public:
	FDateTimeFromIsoString(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetIsoString() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FDateTime GetResult() {
		return memory.read<struct FDateTime>(m_addr + 16);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FDateTimeFromString
{
public:
	FDateTimeFromString(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetDateTimeString() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FDateTime GetResult() {
		return memory.read<struct FDateTime>(m_addr + 16);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FDaysInMonth
{
public:
	FDaysInMonth(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetYear() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetMonth() {
		return memory.read<int32_t>(m_addr + 4);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FDegAtan2
{
public:
	FDegAtan2(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetY() {
		return memory.read<float>(m_addr + 0);
	}
	float GetX() {
		return memory.read<float>(m_addr + 4);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FMultiply_ByteByte
{
public:
	FMultiply_ByteByte(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	char GetA() {
		return memory.read<char>(m_addr + 0);
	}
	char GetB() {
		return memory.read<char>(m_addr + 1);
	}
	char GetReturnValue() {
		return memory.read<char>(m_addr + 2);
	}

private:
	std::uint64_t m_addr = 0;
};class FLinearColorLerp
{
public:
	FLinearColorLerp(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLinearColor GetA() {
		return memory.read<struct FLinearColor>(m_addr + 0);
	}
	struct FLinearColor GetB() {
		return memory.read<struct FLinearColor>(m_addr + 16);
	}
	float GetAlpha() {
		return memory.read<float>(m_addr + 32);
	}
	struct FLinearColor GetReturnValue() {
		return memory.read<struct FLinearColor>(m_addr + 36);
	}

private:
	std::uint64_t m_addr = 0;
};class FDegCos
{
public:
	FDegCos(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetA() {
		return memory.read<float>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FDegreesToRadians
{
public:
	FDegreesToRadians(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetA() {
		return memory.read<float>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FDistanceSquared2D
{
public:
	FDistanceSquared2D(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector2D Getv1() {
		return memory.read<struct FVector2D>(m_addr + 0);
	}
	struct FVector2D Getv2() {
		return memory.read<struct FVector2D>(m_addr + 8);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FDivide_FloatFloat
{
public:
	FDivide_FloatFloat(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetA() {
		return memory.read<float>(m_addr + 0);
	}
	float GetB() {
		return memory.read<float>(m_addr + 4);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FDivide_IntInt
{
public:
	FDivide_IntInt(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetA() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetB() {
		return memory.read<int32_t>(m_addr + 4);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FDivide_Vector2DFloat
{
public:
	FDivide_Vector2DFloat(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector2D GetA() {
		return memory.read<struct FVector2D>(m_addr + 0);
	}
	float GetB() {
		return memory.read<float>(m_addr + 8);
	}
	struct FVector2D GetReturnValue() {
		return memory.read<struct FVector2D>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FDynamicWeightedMovingAverage_Float
{
public:
	FDynamicWeightedMovingAverage_Float(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetCurrentSample() {
		return memory.read<float>(m_addr + 0);
	}
	float GetPreviousSample() {
		return memory.read<float>(m_addr + 4);
	}
	float GetMaxDistance() {
		return memory.read<float>(m_addr + 8);
	}
	float GetMinWeight() {
		return memory.read<float>(m_addr + 12);
	}
	float GetMaxWeight() {
		return memory.read<float>(m_addr + 16);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FDynamicWeightedMovingAverage_FRotator
{
public:
	FDynamicWeightedMovingAverage_FRotator(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRotator GetCurrentSample() {
		return memory.read<struct FRotator>(m_addr + 0);
	}
	struct FRotator GetPreviousSample() {
		return memory.read<struct FRotator>(m_addr + 12);
	}
	float GetMaxDistance() {
		return memory.read<float>(m_addr + 24);
	}
	float GetMinWeight() {
		return memory.read<float>(m_addr + 28);
	}
	float GetMaxWeight() {
		return memory.read<float>(m_addr + 32);
	}
	struct FRotator GetReturnValue() {
		return memory.read<struct FRotator>(m_addr + 36);
	}

private:
	std::uint64_t m_addr = 0;
};class FLinearColor_GetMin
{
public:
	FLinearColor_GetMin(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLinearColor GetInColor() {
		return memory.read<struct FLinearColor>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FEqual_IntPointIntPoint
{
public:
	FEqual_IntPointIntPoint(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FIntPoint GetA() {
		return memory.read<struct FIntPoint>(m_addr + 0);
	}
	struct FIntPoint GetB() {
		return memory.read<struct FIntPoint>(m_addr + 8);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FEqualEqual_BoolBool
{
public:
	FEqualEqual_BoolBool(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetA() {
		return memory.read<bool>(m_addr + 0);
	}
	bool GetB() {
		return memory.read<bool>(m_addr + 1);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 2);
	}

private:
	std::uint64_t m_addr = 0;
};class FMultiply_LinearColorLinearColor
{
public:
	FMultiply_LinearColorLinearColor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLinearColor GetA() {
		return memory.read<struct FLinearColor>(m_addr + 0);
	}
	struct FLinearColor GetB() {
		return memory.read<struct FLinearColor>(m_addr + 16);
	}
	struct FLinearColor GetReturnValue() {
		return memory.read<struct FLinearColor>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FEqualEqual_FloatFloat
{
public:
	FEqualEqual_FloatFloat(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetA() {
		return memory.read<float>(m_addr + 0);
	}
	float GetB() {
		return memory.read<float>(m_addr + 4);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetWorldAssetPackageFName
{
public:
	FGetWorldAssetPackageFName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetReturnValue() {
		return memory.read<struct FName>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FEqualEqual_LinearColorLinearColor
{
public:
	FEqualEqual_LinearColorLinearColor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLinearColor GetA() {
		return memory.read<struct FLinearColor>(m_addr + 0);
	}
	struct FLinearColor GetB() {
		return memory.read<struct FLinearColor>(m_addr + 16);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FEqualEqual_MatrixMatrix
{
public:
	FEqualEqual_MatrixMatrix(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMatrix GetA() {
		return memory.read<struct FMatrix>(m_addr + 0);
	}
	struct FMatrix GetB() {
		return memory.read<struct FMatrix>(m_addr + 64);
	}
	float GetTolerance() {
		return memory.read<float>(m_addr + 128);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 132);
	}

private:
	std::uint64_t m_addr = 0;
};class FEqualEqual_NameName
{
public:
	FEqualEqual_NameName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetA() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FName GetB() {
		return memory.read<struct FName>(m_addr + 8);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FEqualEqual_ObjectObject
{
public:
	FEqualEqual_ObjectObject(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetA() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct UObject GetB() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UObject(ptr_addr);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FEqualEqual_QuatQuat
{
public:
	FEqualEqual_QuatQuat(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FQuat GetA() {
		return memory.read<struct FQuat>(m_addr + 0);
	}
	struct FQuat GetB() {
		return memory.read<struct FQuat>(m_addr + 16);
	}
	float GetTolerance() {
		return memory.read<float>(m_addr + 32);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 36);
	}

private:
	std::uint64_t m_addr = 0;
};class FEqualEqual_RotatorRotator
{
public:
	FEqualEqual_RotatorRotator(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRotator GetA() {
		return memory.read<struct FRotator>(m_addr + 0);
	}
	struct FRotator GetB() {
		return memory.read<struct FRotator>(m_addr + 12);
	}
	float GetErrorTolerance() {
		return memory.read<float>(m_addr + 24);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 28);
	}

private:
	std::uint64_t m_addr = 0;
};class FEqualEqual_TransformTransform
{
public:
	FEqualEqual_TransformTransform(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTransform GetA() {
		return memory.read<struct FTransform>(m_addr + 0);
	}
	struct FTransform GetB() {
		return memory.read<struct FTransform>(m_addr + 48);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 96);
	}

private:
	std::uint64_t m_addr = 0;
};class FEqualEqual_Vector2DVector2D
{
public:
	FEqualEqual_Vector2DVector2D(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector2D GetA() {
		return memory.read<struct FVector2D>(m_addr + 0);
	}
	struct FVector2D GetB() {
		return memory.read<struct FVector2D>(m_addr + 8);
	}
	float GetErrorTolerance() {
		return memory.read<float>(m_addr + 16);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FEqualEqual_VectorVector
{
public:
	FEqualEqual_VectorVector(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetA() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetB() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	float GetErrorTolerance() {
		return memory.read<float>(m_addr + 24);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 28);
	}

private:
	std::uint64_t m_addr = 0;
};class FEqualExactly_Vector2DVector2D
{
public:
	FEqualExactly_Vector2DVector2D(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector2D GetA() {
		return memory.read<struct FVector2D>(m_addr + 0);
	}
	struct FVector2D GetB() {
		return memory.read<struct FVector2D>(m_addr + 8);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FAsTime_DateTime
{
public:
	FAsTime_DateTime(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDateTime GetIn() {
		return memory.read<struct FDateTime>(m_addr + 0);
	}
	struct FText GetReturnValue() {
		return memory.read<struct FText>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FFCeil
{
public:
	FFCeil(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetA() {
		return memory.read<float>(m_addr + 0);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetOcclusionContrast
{
public:
	FSetOcclusionContrast(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetInOcclusionContrast() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FFCeil64
{
public:
	FFCeil64(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetA() {
		return memory.read<float>(m_addr + 0);
	}
	int64_t GetReturnValue() {
		return memory.read<int64_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FMultiply_IntPointInt
{
public:
	FMultiply_IntPointInt(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FIntPoint GetA() {
		return memory.read<struct FIntPoint>(m_addr + 0);
	}
	int32_t GetB() {
		return memory.read<int32_t>(m_addr + 8);
	}
	struct FIntPoint GetReturnValue() {
		return memory.read<struct FIntPoint>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FFClamp
{
public:
	FFClamp(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetValue() {
		return memory.read<float>(m_addr + 0);
	}
	float GetMin() {
		return memory.read<float>(m_addr + 4);
	}
	float GetMax() {
		return memory.read<float>(m_addr + 8);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FFindClosestPointOnSegment
{
public:
	FFindClosestPointOnSegment(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetPoint() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetSegmentStart() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	struct FVector GetSegmentEnd() {
		return memory.read<struct FVector>(m_addr + 24);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 36);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetStartPosition
{
public:
	FGetStartPosition(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FFInterpTo
{
public:
	FFInterpTo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetCurrent() {
		return memory.read<float>(m_addr + 0);
	}
	float GetTarget() {
		return memory.read<float>(m_addr + 4);
	}
	float GetDeltaTime() {
		return memory.read<float>(m_addr + 8);
	}
	float GetInterpSpeed() {
		return memory.read<float>(m_addr + 12);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FFixedTurn
{
public:
	FFixedTurn(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetInCurrent() {
		return memory.read<float>(m_addr + 0);
	}
	float GetInDesired() {
		return memory.read<float>(m_addr + 4);
	}
	float GetInDeltaRate() {
		return memory.read<float>(m_addr + 8);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FFMin
{
public:
	FFMin(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetA() {
		return memory.read<float>(m_addr + 0);
	}
	float GetB() {
		return memory.read<float>(m_addr + 4);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FFMod
{
public:
	FFMod(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetDividend() {
		return memory.read<float>(m_addr + 0);
	}
	float GetDivisor() {
		return memory.read<float>(m_addr + 4);
	}
	float GetRemainder() {
		return memory.read<float>(m_addr + 8);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FFraction
{
public:
	FFraction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetA() {
		return memory.read<float>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FFromMilliseconds
{
public:
	FFromMilliseconds(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetMilliseconds() {
		return memory.read<float>(m_addr + 0);
	}
	struct FTimespan GetReturnValue() {
		return memory.read<struct FTimespan>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FFromMinutes
{
public:
	FFromMinutes(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetMinutes() {
		return memory.read<float>(m_addr + 0);
	}
	struct FTimespan GetReturnValue() {
		return memory.read<struct FTimespan>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FConv_ObjectToText
{
public:
	FConv_ObjectToText(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetInObj() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FText GetReturnValue() {
		return memory.read<struct FText>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FMakeQualifiedFrameTime
{
public:
	FMakeQualifiedFrameTime(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FFrameNumber GetFrame() {
		return memory.read<struct FFrameNumber>(m_addr + 0);
	}
	struct FFrameRate GetFrameRate() {
		return memory.read<struct FFrameRate>(m_addr + 4);
	}
	float GetSubFrame() {
		return memory.read<float>(m_addr + 12);
	}
	struct FQualifiedFrameTime GetReturnValue() {
		return memory.read<struct FQualifiedFrameTime>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FFTrunc
{
public:
	FFTrunc(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetA() {
		return memory.read<float>(m_addr + 0);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FFTrunc64
{
public:
	FFTrunc64(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetA() {
		return memory.read<float>(m_addr + 0);
	}
	int64_t GetReturnValue() {
		return memory.read<int64_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FFWrap
{
public:
	FFWrap(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetValue() {
		return memory.read<float>(m_addr + 0);
	}
	float GetMin() {
		return memory.read<float>(m_addr + 4);
	}
	float GetMax() {
		return memory.read<float>(m_addr + 8);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FMatrix_GetDeterminant
{
public:
	FMatrix_GetDeterminant(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMatrix GetM() {
		return memory.read<struct FMatrix>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetAxes
{
public:
	FGetAxes(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRotator GetA() {
		return memory.read<struct FRotator>(m_addr + 0);
	}
	struct FVector GetX() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	struct FVector GetY() {
		return memory.read<struct FVector>(m_addr + 24);
	}
	struct FVector GetZ() {
		return memory.read<struct FVector>(m_addr + 36);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetAzimuthAndElevation
{
public:
	FGetAzimuthAndElevation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetInDirection() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FTransform GetReferenceFrame() {
		return memory.read<struct FTransform>(m_addr + 16);
	}
	float GetAzimuth() {
		return memory.read<float>(m_addr + 64);
	}
	float GetElevation() {
		return memory.read<float>(m_addr + 68);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetDate
{
public:
	FGetDate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDateTime GetA() {
		return memory.read<struct FDateTime>(m_addr + 0);
	}
	struct FDateTime GetReturnValue() {
		return memory.read<struct FDateTime>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetDay
{
public:
	FGetDay(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDateTime GetA() {
		return memory.read<struct FDateTime>(m_addr + 0);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetDirectionUnitVector
{
public:
	FGetDirectionUnitVector(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetFrom() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetTo() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetHour
{
public:
	FGetHour(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDateTime GetA() {
		return memory.read<struct FDateTime>(m_addr + 0);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetHour12
{
public:
	FGetHour12(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDateTime GetA() {
		return memory.read<struct FDateTime>(m_addr + 0);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetHours
{
public:
	FGetHours(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTimespan GetA() {
		return memory.read<struct FTimespan>(m_addr + 0);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FMultiply_RotatorInt
{
public:
	FMultiply_RotatorInt(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRotator GetA() {
		return memory.read<struct FRotator>(m_addr + 0);
	}
	int32_t GetB() {
		return memory.read<int32_t>(m_addr + 12);
	}
	struct FRotator GetReturnValue() {
		return memory.read<struct FRotator>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetMillisecond
{
public:
	FGetMillisecond(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDateTime GetA() {
		return memory.read<struct FDateTime>(m_addr + 0);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetQuadSize
{
public:
	FGetQuadSize(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector2D GetReturnValue() {
		return memory.read<struct FVector2D>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetMilliseconds
{
public:
	FGetMilliseconds(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTimespan GetA() {
		return memory.read<struct FTimespan>(m_addr + 0);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetMinElement
{
public:
	FGetMinElement(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetA() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetMinutes
{
public:
	FGetMinutes(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTimespan GetA() {
		return memory.read<struct FTimespan>(m_addr + 0);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FVector_HeadingAngle
{
public:
	FVector_HeadingAngle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetA() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetPointDistanceToSegment
{
public:
	FGetPointDistanceToSegment(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetPoint() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetSegmentStart() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	struct FVector GetSegmentEnd() {
		return memory.read<struct FVector>(m_addr + 24);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 36);
	}

private:
	std::uint64_t m_addr = 0;
};class FMatrix_Identity
{
public:
	FMatrix_Identity(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMatrix GetReturnValue() {
		return memory.read<struct FMatrix>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetSecond
{
public:
	FGetSecond(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDateTime GetA() {
		return memory.read<struct FDateTime>(m_addr + 0);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetSlopeDegreeAngles
{
public:
	FGetSlopeDegreeAngles(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetMyRightYAxis() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetFloorNormal() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	struct FVector GetUpVector() {
		return memory.read<struct FVector>(m_addr + 24);
	}
	float GetOutSlopePitchDegreeAngle() {
		return memory.read<float>(m_addr + 36);
	}
	float GetOutSlopeRollDegreeAngle() {
		return memory.read<float>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetTAU
{
public:
	FGetTAU(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FVector_ToDegrees
{
public:
	FVector_ToDegrees(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetA() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetTimeOfDay
{
public:
	FGetTimeOfDay(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDateTime GetA() {
		return memory.read<struct FDateTime>(m_addr + 0);
	}
	struct FTimespan GetReturnValue() {
		return memory.read<struct FTimespan>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FMatrix_RemoveScaling
{
public:
	FMatrix_RemoveScaling(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMatrix GetM() {
		return memory.read<struct FMatrix>(m_addr + 0);
	}
	float GetTolerance() {
		return memory.read<float>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetTotalHours
{
public:
	FGetTotalHours(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTimespan GetA() {
		return memory.read<struct FTimespan>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetTotalMinutes
{
public:
	FGetTotalMinutes(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTimespan GetA() {
		return memory.read<struct FTimespan>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetTotalSeconds
{
public:
	FGetTotalSeconds(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTimespan GetA() {
		return memory.read<struct FTimespan>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetVectorArrayAverage
{
public:
	FGetVectorArrayAverage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FVector> GetVectors() {
		return memory.read<struct TArray<struct FVector>>(m_addr + 0);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetYawPitchFromVector
{
public:
	FGetYawPitchFromVector(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetInVec() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	float GetYaw() {
		return memory.read<float>(m_addr + 12);
	}
	float GetPitch() {
		return memory.read<float>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetSpringRestingPoint
{
public:
	FGetSpringRestingPoint(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetYear
{
public:
	FGetYear(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDateTime GetA() {
		return memory.read<struct FDateTime>(m_addr + 0);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGreater_ByteByte
{
public:
	FGreater_ByteByte(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	char GetA() {
		return memory.read<char>(m_addr + 0);
	}
	char GetB() {
		return memory.read<char>(m_addr + 1);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 2);
	}

private:
	std::uint64_t m_addr = 0;
};class FMakeVector
{
public:
	FMakeVector(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetX() {
		return memory.read<float>(m_addr + 0);
	}
	float GetY() {
		return memory.read<float>(m_addr + 4);
	}
	float GetZ() {
		return memory.read<float>(m_addr + 8);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FGreater_IntInt
{
public:
	FGreater_IntInt(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetA() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetB() {
		return memory.read<int32_t>(m_addr + 4);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGreater_TimespanTimespan
{
public:
	FGreater_TimespanTimespan(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTimespan GetA() {
		return memory.read<struct FTimespan>(m_addr + 0);
	}
	struct FTimespan GetB() {
		return memory.read<struct FTimespan>(m_addr + 8);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGreaterEqual_DateTimeDateTime
{
public:
	FGreaterEqual_DateTimeDateTime(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDateTime GetA() {
		return memory.read<struct FDateTime>(m_addr + 0);
	}
	struct FDateTime GetB() {
		return memory.read<struct FDateTime>(m_addr + 8);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetNewTime
{
public:
	FSetNewTime(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewTime() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGreaterEqual_Int64Int64
{
public:
	FGreaterEqual_Int64Int64(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int64_t GetA() {
		return memory.read<int64_t>(m_addr + 0);
	}
	int64_t GetB() {
		return memory.read<int64_t>(m_addr + 8);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGreaterEqual_TimespanTimespan
{
public:
	FGreaterEqual_TimespanTimespan(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTimespan GetA() {
		return memory.read<struct FTimespan>(m_addr + 0);
	}
	struct FTimespan GetB() {
		return memory.read<struct FTimespan>(m_addr + 8);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FMakeRandomStream
{
public:
	FMakeRandomStream(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetInitialSeed() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct FRandomStream GetReturnValue() {
		return memory.read<struct FRandomStream>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FGridSnap_Float
{
public:
	FGridSnap_Float(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetLocation() {
		return memory.read<float>(m_addr + 0);
	}
	float GetGridSize() {
		return memory.read<float>(m_addr + 4);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FHSVToRGB
{
public:
	FHSVToRGB(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetH() {
		return memory.read<float>(m_addr + 0);
	}
	float GetS() {
		return memory.read<float>(m_addr + 4);
	}
	float GetV() {
		return memory.read<float>(m_addr + 8);
	}
	float GetA() {
		return memory.read<float>(m_addr + 12);
	}
	struct FLinearColor GetReturnValue() {
		return memory.read<struct FLinearColor>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FHypotenuse
{
public:
	FHypotenuse(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetWidth() {
		return memory.read<float>(m_addr + 0);
	}
	float GetHeight() {
		return memory.read<float>(m_addr + 4);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FInRange_Int64Int64
{
public:
	FInRange_Int64Int64(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int64_t GetValue() {
		return memory.read<int64_t>(m_addr + 0);
	}
	int64_t GetMin() {
		return memory.read<int64_t>(m_addr + 8);
	}
	int64_t GetMax() {
		return memory.read<int64_t>(m_addr + 16);
	}
	bool GetInclusiveMin() {
		return memory.read<bool>(m_addr + 24);
	}
	bool GetInclusiveMax() {
		return memory.read<bool>(m_addr + 25);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 26);
	}

private:
	std::uint64_t m_addr = 0;
};class FIntPoint_Right
{
public:
	FIntPoint_Right(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FIntPoint GetReturnValue() {
		return memory.read<struct FIntPoint>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FLoadLevelInstanceBySoftObjectPtr
{
public:
	FLoadLevelInstanceBySoftObjectPtr(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct TSoftObjectPtr<UWorld> GetLevel() {
		return memory.read<struct TSoftObjectPtr<UWorld>>(m_addr + 8);
	}
	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 48);
	}
	struct FRotator GetRotation() {
		return memory.read<struct FRotator>(m_addr + 60);
	}
	bool GetbOutSuccess() {
		return memory.read<bool>(m_addr + 72);
	}
	struct FString GetOptionalLevelNameOverride() {
		return memory.read<struct FString>(m_addr + 80);
	}
	struct ULevelStreamingDynamic GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 96);
		return struct ULevelStreamingDynamic(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FInverseTransformDirection
{
public:
	FInverseTransformDirection(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTransform GetT() {
		return memory.read<struct FTransform>(m_addr + 0);
	}
	struct FVector GetDirection() {
		return memory.read<struct FVector>(m_addr + 48);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 60);
	}

private:
	std::uint64_t m_addr = 0;
};class FInverseTransformLocation
{
public:
	FInverseTransformLocation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTransform GetT() {
		return memory.read<struct FTransform>(m_addr + 0);
	}
	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 48);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 60);
	}

private:
	std::uint64_t m_addr = 0;
};class FInverseTransformRotation
{
public:
	FInverseTransformRotation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTransform GetT() {
		return memory.read<struct FTransform>(m_addr + 0);
	}
	struct FRotator GetRotation() {
		return memory.read<struct FRotator>(m_addr + 48);
	}
	struct FRotator GetReturnValue() {
		return memory.read<struct FRotator>(m_addr + 60);
	}

private:
	std::uint64_t m_addr = 0;
};class FInvertTransform
{
public:
	FInvertTransform(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTransform GetT() {
		return memory.read<struct FTransform>(m_addr + 0);
	}
	struct FTransform GetReturnValue() {
		return memory.read<struct FTransform>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsAfternoon
{
public:
	FIsAfternoon(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDateTime GetA() {
		return memory.read<struct FDateTime>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsNearlyZero2D
{
public:
	FIsNearlyZero2D(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector2D GetA() {
		return memory.read<struct FVector2D>(m_addr + 0);
	}
	float GetTolerance() {
		return memory.read<float>(m_addr + 8);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsPointInBox
{
public:
	FIsPointInBox(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetPoint() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetBoxOrigin() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	struct FVector GetBoxExtent() {
		return memory.read<struct FVector>(m_addr + 24);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 36);
	}

private:
	std::uint64_t m_addr = 0;
};class FPlayCameraAnim
{
public:
	FPlayCameraAnim(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UCameraAnim GetAnim() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UCameraAnim(ptr_addr);
	}
	float GetRate() {
		return memory.read<float>(m_addr + 8);
	}
	float GetScale() {
		return memory.read<float>(m_addr + 12);
	}
	float GetBlendInTime() {
		return memory.read<float>(m_addr + 16);
	}
	float GetBlendOutTime() {
		return memory.read<float>(m_addr + 20);
	}
	bool GetbLoop() {
		return memory.read<bool>(m_addr + 24);
	}
	bool GetbRandomStartTime() {
		return memory.read<bool>(m_addr + 25);
	}
	float GetDuration() {
		return memory.read<float>(m_addr + 28);
	}
	enum class ECameraShakePlaySpace GetPlaySpace() {
		return memory.read<enum class ECameraShakePlaySpace>(m_addr + 32);
	}
	struct FRotator GetUserPlaySpaceRot() {
		return memory.read<struct FRotator>(m_addr + 36);
	}
	struct UCameraAnimInst GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct UCameraAnimInst(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsPointInBoxWithTransform
{
public:
	FIsPointInBoxWithTransform(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetPoint() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FTransform GetBoxWorldTransform() {
		return memory.read<struct FTransform>(m_addr + 16);
	}
	struct FVector GetBoxExtent() {
		return memory.read<struct FVector>(m_addr + 64);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 76);
	}

private:
	std::uint64_t m_addr = 0;
};class FLerp
{
public:
	FLerp(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetA() {
		return memory.read<float>(m_addr + 0);
	}
	float GetB() {
		return memory.read<float>(m_addr + 4);
	}
	float GetAlpha() {
		return memory.read<float>(m_addr + 8);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FLess_ByteByte
{
public:
	FLess_ByteByte(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	char GetA() {
		return memory.read<char>(m_addr + 0);
	}
	char GetB() {
		return memory.read<char>(m_addr + 1);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 2);
	}

private:
	std::uint64_t m_addr = 0;
};class FQuat_VectorUp
{
public:
	FQuat_VectorUp(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FQuat GetQ() {
		return memory.read<struct FQuat>(m_addr + 0);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FLess_DateTimeDateTime
{
public:
	FLess_DateTimeDateTime(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDateTime GetA() {
		return memory.read<struct FDateTime>(m_addr + 0);
	}
	struct FDateTime GetB() {
		return memory.read<struct FDateTime>(m_addr + 8);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FLess_FloatFloat
{
public:
	FLess_FloatFloat(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetA() {
		return memory.read<float>(m_addr + 0);
	}
	float GetB() {
		return memory.read<float>(m_addr + 4);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FLess_Int64Int64
{
public:
	FLess_Int64Int64(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int64_t GetA() {
		return memory.read<int64_t>(m_addr + 0);
	}
	int64_t GetB() {
		return memory.read<int64_t>(m_addr + 8);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FLessEqual_TimespanTimespan
{
public:
	FLessEqual_TimespanTimespan(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTimespan GetA() {
		return memory.read<struct FTimespan>(m_addr + 0);
	}
	struct FTimespan GetB() {
		return memory.read<struct FTimespan>(m_addr + 8);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FLessLess_VectorRotator
{
public:
	FLessLess_VectorRotator(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetA() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FRotator GetB() {
		return memory.read<struct FRotator>(m_addr + 12);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FLinearColor_Black
{
public:
	FLinearColor_Black(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLinearColor GetReturnValue() {
		return memory.read<struct FLinearColor>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FLinearColor_Blue
{
public:
	FLinearColor_Blue(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLinearColor GetReturnValue() {
		return memory.read<struct FLinearColor>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FLinearColor_Desaturated
{
public:
	FLinearColor_Desaturated(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLinearColor GetInColor() {
		return memory.read<struct FLinearColor>(m_addr + 0);
	}
	float GetInDesaturation() {
		return memory.read<float>(m_addr + 16);
	}
	struct FLinearColor GetReturnValue() {
		return memory.read<struct FLinearColor>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FLinearColor_Distance
{
public:
	FLinearColor_Distance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLinearColor GetC1() {
		return memory.read<struct FLinearColor>(m_addr + 0);
	}
	struct FLinearColor GetC2() {
		return memory.read<struct FLinearColor>(m_addr + 16);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FLinearColor_GetMax
{
public:
	FLinearColor_GetMax(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLinearColor GetInColor() {
		return memory.read<struct FLinearColor>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FLinearColor_Gray
{
public:
	FLinearColor_Gray(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLinearColor GetReturnValue() {
		return memory.read<struct FLinearColor>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FLinearColor_Quantize
{
public:
	FLinearColor_Quantize(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLinearColor GetInColor() {
		return memory.read<struct FLinearColor>(m_addr + 0);
	}
	struct FColor GetReturnValue() {
		return memory.read<struct FColor>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FLinearColor_Green
{
public:
	FLinearColor_Green(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLinearColor GetReturnValue() {
		return memory.read<struct FLinearColor>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FLinePlaneIntersection_OriginNormal
{
public:
	FLinePlaneIntersection_OriginNormal(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetLineStart() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetLineEnd() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	struct FVector GetPlaneOrigin() {
		return memory.read<struct FVector>(m_addr + 24);
	}
	struct FVector GetPlaneNormal() {
		return memory.read<struct FVector>(m_addr + 36);
	}
	float GetT() {
		return memory.read<float>(m_addr + 48);
	}
	struct FVector GetIntersection() {
		return memory.read<struct FVector>(m_addr + 52);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};class FLinearColor_IsNearEqual
{
public:
	FLinearColor_IsNearEqual(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLinearColor GetA() {
		return memory.read<struct FLinearColor>(m_addr + 0);
	}
	struct FLinearColor GetB() {
		return memory.read<struct FLinearColor>(m_addr + 16);
	}
	float GetTolerance() {
		return memory.read<float>(m_addr + 32);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 36);
	}

private:
	std::uint64_t m_addr = 0;
};class FLinearColor_Red
{
public:
	FLinearColor_Red(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLinearColor GetReturnValue() {
		return memory.read<struct FLinearColor>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FRandomFloatFromStream
{
public:
	FRandomFloatFromStream(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRandomStream GetStream() {
		return memory.read<struct FRandomStream>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FLinearColor_SetFromSRGB
{
public:
	FLinearColor_SetFromSRGB(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLinearColor GetInOutColor() {
		return memory.read<struct FLinearColor>(m_addr + 0);
	}
	struct FColor GetInSRGB() {
		return memory.read<struct FColor>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FLinearColor_SetRandomHue
{
public:
	FLinearColor_SetRandomHue(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLinearColor GetInOutColor() {
		return memory.read<struct FLinearColor>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetEndScale
{
public:
	FGetEndScale(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector2D GetReturnValue() {
		return memory.read<struct FVector2D>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FLinearColor_SetRGBA
{
public:
	FLinearColor_SetRGBA(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLinearColor GetInOutColor() {
		return memory.read<struct FLinearColor>(m_addr + 0);
	}
	float GetR() {
		return memory.read<float>(m_addr + 16);
	}
	float GetG() {
		return memory.read<float>(m_addr + 20);
	}
	float GetB() {
		return memory.read<float>(m_addr + 24);
	}
	float GetA() {
		return memory.read<float>(m_addr + 28);
	}

private:
	std::uint64_t m_addr = 0;
};class FLoge
{
public:
	FLoge(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetA() {
		return memory.read<float>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FMakeBox
{
public:
	FMakeBox(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetMin() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetMax() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	struct FBox GetReturnValue() {
		return memory.read<struct FBox>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FMakeBox2D
{
public:
	FMakeBox2D(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector2D GetMin() {
		return memory.read<struct FVector2D>(m_addr + 0);
	}
	struct FVector2D GetMax() {
		return memory.read<struct FVector2D>(m_addr + 8);
	}
	struct FBox2D GetReturnValue() {
		return memory.read<struct FBox2D>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FMakeColor
{
public:
	FMakeColor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetR() {
		return memory.read<float>(m_addr + 0);
	}
	float GetG() {
		return memory.read<float>(m_addr + 4);
	}
	float GetB() {
		return memory.read<float>(m_addr + 8);
	}
	float GetA() {
		return memory.read<float>(m_addr + 12);
	}
	struct FLinearColor GetReturnValue() {
		return memory.read<struct FLinearColor>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FMakeFrameRate
{
public:
	FMakeFrameRate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetNumerator() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetDenominator() {
		return memory.read<int32_t>(m_addr + 4);
	}
	struct FFrameRate GetReturnValue() {
		return memory.read<struct FFrameRate>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FMakeRelativeTransform
{
public:
	FMakeRelativeTransform(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTransform GetA() {
		return memory.read<struct FTransform>(m_addr + 0);
	}
	struct FTransform GetRelativeTo() {
		return memory.read<struct FTransform>(m_addr + 48);
	}
	struct FTransform GetReturnValue() {
		return memory.read<struct FTransform>(m_addr + 96);
	}

private:
	std::uint64_t m_addr = 0;
};class FMakeRotationFromAxes
{
public:
	FMakeRotationFromAxes(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetForward() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetRight() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	struct FVector GetUp() {
		return memory.read<struct FVector>(m_addr + 24);
	}
	struct FRotator GetReturnValue() {
		return memory.read<struct FRotator>(m_addr + 36);
	}

private:
	std::uint64_t m_addr = 0;
};class FMakeRotator
{
public:
	FMakeRotator(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetRoll() {
		return memory.read<float>(m_addr + 0);
	}
	float GetPitch() {
		return memory.read<float>(m_addr + 4);
	}
	float GetYaw() {
		return memory.read<float>(m_addr + 8);
	}
	struct FRotator GetReturnValue() {
		return memory.read<struct FRotator>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetRayleighScattering
{
public:
	FSetRayleighScattering(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLinearColor GetNewValue() {
		return memory.read<struct FLinearColor>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FMakeRotFromX
{
public:
	FMakeRotFromX(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetX() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FRotator GetReturnValue() {
		return memory.read<struct FRotator>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FMakeRotFromXZ
{
public:
	FMakeRotFromXZ(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetX() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetZ() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	struct FRotator GetReturnValue() {
		return memory.read<struct FRotator>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FMakeRotFromYX
{
public:
	FMakeRotFromYX(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetY() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetX() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	struct FRotator GetReturnValue() {
		return memory.read<struct FRotator>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FMakeRotFromZ
{
public:
	FMakeRotFromZ(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetZ() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FRotator GetReturnValue() {
		return memory.read<struct FRotator>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FMakeRotFromZX
{
public:
	FMakeRotFromZX(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetZ() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetX() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	struct FRotator GetReturnValue() {
		return memory.read<struct FRotator>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FMakeTimespan2
{
public:
	FMakeTimespan2(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetDays() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetHours() {
		return memory.read<int32_t>(m_addr + 4);
	}
	int32_t GetMinutes() {
		return memory.read<int32_t>(m_addr + 8);
	}
	int32_t GetSeconds() {
		return memory.read<int32_t>(m_addr + 12);
	}
	int32_t GetFractionNano() {
		return memory.read<int32_t>(m_addr + 16);
	}
	struct FTimespan GetReturnValue() {
		return memory.read<struct FTimespan>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FMakeVector4
{
public:
	FMakeVector4(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetX() {
		return memory.read<float>(m_addr + 0);
	}
	float GetY() {
		return memory.read<float>(m_addr + 4);
	}
	float GetZ() {
		return memory.read<float>(m_addr + 8);
	}
	float GetW() {
		return memory.read<float>(m_addr + 12);
	}
	struct FVector4 GetReturnValue() {
		return memory.read<struct FVector4>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FMapRangeClamped
{
public:
	FMapRangeClamped(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetValue() {
		return memory.read<float>(m_addr + 0);
	}
	float GetInRangeA() {
		return memory.read<float>(m_addr + 4);
	}
	float GetInRangeB() {
		return memory.read<float>(m_addr + 8);
	}
	float GetOutRangeA() {
		return memory.read<float>(m_addr + 12);
	}
	float GetOutRangeB() {
		return memory.read<float>(m_addr + 16);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FMapRangeUnclamped
{
public:
	FMapRangeUnclamped(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetValue() {
		return memory.read<float>(m_addr + 0);
	}
	float GetInRangeA() {
		return memory.read<float>(m_addr + 4);
	}
	float GetInRangeB() {
		return memory.read<float>(m_addr + 8);
	}
	float GetOutRangeA() {
		return memory.read<float>(m_addr + 12);
	}
	float GetOutRangeB() {
		return memory.read<float>(m_addr + 16);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FMatrix_ConcatenateTranslation
{
public:
	FMatrix_ConcatenateTranslation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMatrix GetM() {
		return memory.read<struct FMatrix>(m_addr + 0);
	}
	struct FVector GetTranslation() {
		return memory.read<struct FVector>(m_addr + 64);
	}
	struct FMatrix GetReturnValue() {
		return memory.read<struct FMatrix>(m_addr + 80);
	}

private:
	std::uint64_t m_addr = 0;
};class FMatrix_GetFrustumFarPlane
{
public:
	FMatrix_GetFrustumFarPlane(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMatrix GetM() {
		return memory.read<struct FMatrix>(m_addr + 0);
	}
	struct FPlane GetOutPlane() {
		return memory.read<struct FPlane>(m_addr + 64);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 80);
	}

private:
	std::uint64_t m_addr = 0;
};class FMatrix_GetFrustumNearPlane
{
public:
	FMatrix_GetFrustumNearPlane(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMatrix GetM() {
		return memory.read<struct FMatrix>(m_addr + 0);
	}
	struct FPlane GetOutPlane() {
		return memory.read<struct FPlane>(m_addr + 64);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 80);
	}

private:
	std::uint64_t m_addr = 0;
};class FMatrix_GetFrustumTopPlane
{
public:
	FMatrix_GetFrustumTopPlane(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMatrix GetM() {
		return memory.read<struct FMatrix>(m_addr + 0);
	}
	struct FPlane GetOutPlane() {
		return memory.read<struct FPlane>(m_addr + 64);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 80);
	}

private:
	std::uint64_t m_addr = 0;
};class FMatrix_GetMatrixWithoutScale
{
public:
	FMatrix_GetMatrixWithoutScale(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMatrix GetM() {
		return memory.read<struct FMatrix>(m_addr + 0);
	}
	float GetTolerance() {
		return memory.read<float>(m_addr + 64);
	}
	struct FMatrix GetReturnValue() {
		return memory.read<struct FMatrix>(m_addr + 80);
	}

private:
	std::uint64_t m_addr = 0;
};class FMatrix_GetOrigin
{
public:
	FMatrix_GetOrigin(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMatrix GetInMatrix() {
		return memory.read<struct FMatrix>(m_addr + 0);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetNodeMappingData
{
public:
	FGetNodeMappingData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct UNodeMappingContainer> GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct TArray<struct UNodeMappingContainer>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FMatrix_GetRotDeterminant
{
public:
	FMatrix_GetRotDeterminant(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMatrix GetM() {
		return memory.read<struct FMatrix>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};class FMatrix_GetScaledAxes
{
public:
	FMatrix_GetScaledAxes(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMatrix GetM() {
		return memory.read<struct FMatrix>(m_addr + 0);
	}
	struct FVector GetX() {
		return memory.read<struct FVector>(m_addr + 64);
	}
	struct FVector GetY() {
		return memory.read<struct FVector>(m_addr + 76);
	}
	struct FVector GetZ() {
		return memory.read<struct FVector>(m_addr + 88);
	}

private:
	std::uint64_t m_addr = 0;
};class FMatrix_GetTransposeAdjoint
{
public:
	FMatrix_GetTransposeAdjoint(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMatrix GetM() {
		return memory.read<struct FMatrix>(m_addr + 0);
	}
	struct FMatrix GetReturnValue() {
		return memory.read<struct FMatrix>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};class FMatrix_GetTransposed
{
public:
	FMatrix_GetTransposed(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMatrix GetM() {
		return memory.read<struct FMatrix>(m_addr + 0);
	}
	struct FMatrix GetReturnValue() {
		return memory.read<struct FMatrix>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};class FMatrix_GetUnitAxes
{
public:
	FMatrix_GetUnitAxes(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMatrix GetM() {
		return memory.read<struct FMatrix>(m_addr + 0);
	}
	struct FVector GetX() {
		return memory.read<struct FVector>(m_addr + 64);
	}
	struct FVector GetY() {
		return memory.read<struct FVector>(m_addr + 76);
	}
	struct FVector GetZ() {
		return memory.read<struct FVector>(m_addr + 88);
	}

private:
	std::uint64_t m_addr = 0;
};class FMatrix_GetUnitAxis
{
public:
	FMatrix_GetUnitAxis(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMatrix GetM() {
		return memory.read<struct FMatrix>(m_addr + 0);
	}
	enum class EAxis GetAxis() {
		return memory.read<enum class EAxis>(m_addr + 64);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 68);
	}

private:
	std::uint64_t m_addr = 0;
};class FMatrix_Mirror
{
public:
	FMatrix_Mirror(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMatrix GetM() {
		return memory.read<struct FMatrix>(m_addr + 0);
	}
	enum class EAxis GetMirrorAxis() {
		return memory.read<enum class EAxis>(m_addr + 64);
	}
	enum class EAxis GetFlipAxis() {
		return memory.read<enum class EAxis>(m_addr + 65);
	}
	struct FMatrix GetReturnValue() {
		return memory.read<struct FMatrix>(m_addr + 80);
	}

private:
	std::uint64_t m_addr = 0;
};class FMatrix_SetAxis
{
public:
	FMatrix_SetAxis(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMatrix GetM() {
		return memory.read<struct FMatrix>(m_addr + 0);
	}
	enum class EAxis GetAxis() {
		return memory.read<enum class EAxis>(m_addr + 64);
	}
	struct FVector GetAxisVector() {
		return memory.read<struct FVector>(m_addr + 68);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_GetVectorParameterValueByInfo
{
public:
	FK2_GetVectorParameterValueByInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMaterialParameterInfo GetParameterInfo() {
		return memory.read<struct FMaterialParameterInfo>(m_addr + 0);
	}
	struct FLinearColor GetReturnValue() {
		return memory.read<struct FLinearColor>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FMatrix_SetColumn
{
public:
	FMatrix_SetColumn(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMatrix GetM() {
		return memory.read<struct FMatrix>(m_addr + 0);
	}
	enum class EMatrixColumns GetColumn() {
		return memory.read<enum class EMatrixColumns>(m_addr + 64);
	}
	struct FVector GetValue() {
		return memory.read<struct FVector>(m_addr + 68);
	}

private:
	std::uint64_t m_addr = 0;
};class FMatrix_SetOrigin
{
public:
	FMatrix_SetOrigin(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMatrix GetM() {
		return memory.read<struct FMatrix>(m_addr + 0);
	}
	struct FVector GetNewOrigin() {
		return memory.read<struct FVector>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetEndRoll
{
public:
	FSetEndRoll(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetEndRoll() {
		return memory.read<float>(m_addr + 0);
	}
	bool GetbUpdateMesh() {
		return memory.read<bool>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FConv_ObjectToString
{
public:
	FConv_ObjectToString(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetInObj() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FMinimumAreaRectangle
{
public:
	FMinimumAreaRectangle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct TArray<struct FVector> GetInVerts() {
		return memory.read<struct TArray<struct FVector>>(m_addr + 8);
	}
	struct FVector GetSampleSurfaceNormal() {
		return memory.read<struct FVector>(m_addr + 24);
	}
	struct FVector GetOutRectCenter() {
		return memory.read<struct FVector>(m_addr + 36);
	}
	struct FRotator GetOutRectRotation() {
		return memory.read<struct FRotator>(m_addr + 48);
	}
	float GetOutSideLengthX() {
		return memory.read<float>(m_addr + 60);
	}
	float GetOutSideLengthY() {
		return memory.read<float>(m_addr + 64);
	}
	bool GetbDebugDraw() {
		return memory.read<bool>(m_addr + 68);
	}

private:
	std::uint64_t m_addr = 0;
};class FMinOfByteArray
{
public:
	FMinOfByteArray(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<char> GetByteArray() {
		return memory.read<struct TArray<char>>(m_addr + 0);
	}
	int32_t GetIndexOfMinValue() {
		return memory.read<int32_t>(m_addr + 16);
	}
	char GetMinValue() {
		return memory.read<char>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FMinOfIntArray
{
public:
	FMinOfIntArray(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<int32_t> GetIntArray() {
		return memory.read<struct TArray<int32_t>>(m_addr + 0);
	}
	int32_t GetIndexOfMinValue() {
		return memory.read<int32_t>(m_addr + 16);
	}
	int32_t GetMinValue() {
		return memory.read<int32_t>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FMultiply_IntFloat
{
public:
	FMultiply_IntFloat(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetA() {
		return memory.read<int32_t>(m_addr + 0);
	}
	float GetB() {
		return memory.read<float>(m_addr + 4);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FMultiply_IntInt
{
public:
	FMultiply_IntInt(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetA() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetB() {
		return memory.read<int32_t>(m_addr + 4);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FMultiply_IntPointIntPoint
{
public:
	FMultiply_IntPointIntPoint(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FIntPoint GetA() {
		return memory.read<struct FIntPoint>(m_addr + 0);
	}
	struct FIntPoint GetB() {
		return memory.read<struct FIntPoint>(m_addr + 8);
	}
	struct FIntPoint GetReturnValue() {
		return memory.read<struct FIntPoint>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FMultiply_LinearColorFloat
{
public:
	FMultiply_LinearColorFloat(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLinearColor GetA() {
		return memory.read<struct FLinearColor>(m_addr + 0);
	}
	float GetB() {
		return memory.read<float>(m_addr + 16);
	}
	struct FLinearColor GetReturnValue() {
		return memory.read<struct FLinearColor>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FMultiply_MatrixFloat
{
public:
	FMultiply_MatrixFloat(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMatrix GetA() {
		return memory.read<struct FMatrix>(m_addr + 0);
	}
	float GetB() {
		return memory.read<float>(m_addr + 64);
	}
	struct FMatrix GetReturnValue() {
		return memory.read<struct FMatrix>(m_addr + 80);
	}

private:
	std::uint64_t m_addr = 0;
};class FMultiply_QuatQuat
{
public:
	FMultiply_QuatQuat(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FQuat GetA() {
		return memory.read<struct FQuat>(m_addr + 0);
	}
	struct FQuat GetB() {
		return memory.read<struct FQuat>(m_addr + 16);
	}
	struct FQuat GetReturnValue() {
		return memory.read<struct FQuat>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FQuat_MakeFromEuler
{
public:
	FQuat_MakeFromEuler(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetEuler() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FQuat GetReturnValue() {
		return memory.read<struct FQuat>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FMultiply_Vector2DVector2D
{
public:
	FMultiply_Vector2DVector2D(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector2D GetA() {
		return memory.read<struct FVector2D>(m_addr + 0);
	}
	struct FVector2D GetB() {
		return memory.read<struct FVector2D>(m_addr + 8);
	}
	struct FVector2D GetReturnValue() {
		return memory.read<struct FVector2D>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FMultiply_Vector4Vector4
{
public:
	FMultiply_Vector4Vector4(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector4 GetA() {
		return memory.read<struct FVector4>(m_addr + 0);
	}
	struct FVector4 GetB() {
		return memory.read<struct FVector4>(m_addr + 16);
	}
	struct FVector4 GetReturnValue() {
		return memory.read<struct FVector4>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FMultiply_VectorFloat
{
public:
	FMultiply_VectorFloat(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetA() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	float GetB() {
		return memory.read<float>(m_addr + 12);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FBlueprintUpdateCamera
{
public:
	FBlueprintUpdateCamera(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetCameraTarget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}
	struct FVector GetNewCameraLocation() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	struct FRotator GetNewCameraRotation() {
		return memory.read<struct FRotator>(m_addr + 20);
	}
	float GetNewCameraFOV() {
		return memory.read<float>(m_addr + 32);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 36);
	}

private:
	std::uint64_t m_addr = 0;
};class FMultiply_VectorVector
{
public:
	FMultiply_VectorVector(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetA() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetB() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetForwardAxis
{
public:
	FGetForwardAxis(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class ESplineMeshAxis GetReturnValue() {
		return memory.read<enum class ESplineMeshAxis>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FAsTimeZoneDateTime_DateTime
{
public:
	FAsTimeZoneDateTime_DateTime(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDateTime GetInDateTime() {
		return memory.read<struct FDateTime>(m_addr + 0);
	}
	struct FString GetInTimeZone() {
		return memory.read<struct FString>(m_addr + 8);
	}
	struct FText GetReturnValue() {
		return memory.read<struct FText>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FNormalizeAxis
{
public:
	FNormalizeAxis(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetAngle() {
		return memory.read<float>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FNormalizeToRange
{
public:
	FNormalizeToRange(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetValue() {
		return memory.read<float>(m_addr + 0);
	}
	float GetRangeMin() {
		return memory.read<float>(m_addr + 4);
	}
	float GetRangeMax() {
		return memory.read<float>(m_addr + 8);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FNormalSafe2D
{
public:
	FNormalSafe2D(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector2D GetA() {
		return memory.read<struct FVector2D>(m_addr + 0);
	}
	float GetTolerance() {
		return memory.read<float>(m_addr + 8);
	}
	struct FVector2D GetReturnValue() {
		return memory.read<struct FVector2D>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetConstraintReferencePosition
{
public:
	FSetConstraintReferencePosition(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class EConstraintFrame GetFrame() {
		return memory.read<enum class EConstraintFrame>(m_addr + 0);
	}
	struct FVector GetRefPosition() {
		return memory.read<struct FVector>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FNot_Int64
{
public:
	FNot_Int64(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int64_t GetA() {
		return memory.read<int64_t>(m_addr + 0);
	}
	int64_t GetReturnValue() {
		return memory.read<int64_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FNot_PreBool
{
public:
	FNot_PreBool(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetA() {
		return memory.read<bool>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 1);
	}

private:
	std::uint64_t m_addr = 0;
};class FNotEqual_FloatFloat
{
public:
	FNotEqual_FloatFloat(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetA() {
		return memory.read<float>(m_addr + 0);
	}
	float GetB() {
		return memory.read<float>(m_addr + 4);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FNotEqual_Int64Int64
{
public:
	FNotEqual_Int64Int64(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int64_t GetA() {
		return memory.read<int64_t>(m_addr + 0);
	}
	int64_t GetB() {
		return memory.read<int64_t>(m_addr + 8);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FNotEqual_IntPointIntPoint
{
public:
	FNotEqual_IntPointIntPoint(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FIntPoint GetA() {
		return memory.read<struct FIntPoint>(m_addr + 0);
	}
	struct FIntPoint GetB() {
		return memory.read<struct FIntPoint>(m_addr + 8);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FVector_Right
{
public:
	FVector_Right(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FNotEqual_LinearColorLinearColor
{
public:
	FNotEqual_LinearColorLinearColor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLinearColor GetA() {
		return memory.read<struct FLinearColor>(m_addr + 0);
	}
	struct FLinearColor GetB() {
		return memory.read<struct FLinearColor>(m_addr + 16);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FNotEqual_MatrixMatrix
{
public:
	FNotEqual_MatrixMatrix(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMatrix GetA() {
		return memory.read<struct FMatrix>(m_addr + 0);
	}
	struct FMatrix GetB() {
		return memory.read<struct FMatrix>(m_addr + 64);
	}
	float GetTolerance() {
		return memory.read<float>(m_addr + 128);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 132);
	}

private:
	std::uint64_t m_addr = 0;
};class FNotEqual_ObjectObject
{
public:
	FNotEqual_ObjectObject(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetA() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct UObject GetB() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UObject(ptr_addr);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FNotEqual_QuatQuat
{
public:
	FNotEqual_QuatQuat(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FQuat GetA() {
		return memory.read<struct FQuat>(m_addr + 0);
	}
	struct FQuat GetB() {
		return memory.read<struct FQuat>(m_addr + 16);
	}
	float GetErrorTolerance() {
		return memory.read<float>(m_addr + 32);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 36);
	}

private:
	std::uint64_t m_addr = 0;
};class FNotEqual_RotatorRotator
{
public:
	FNotEqual_RotatorRotator(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRotator GetA() {
		return memory.read<struct FRotator>(m_addr + 0);
	}
	struct FRotator GetB() {
		return memory.read<struct FRotator>(m_addr + 12);
	}
	float GetErrorTolerance() {
		return memory.read<float>(m_addr + 24);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 28);
	}

private:
	std::uint64_t m_addr = 0;
};class FNotEqual_TimespanTimespan
{
public:
	FNotEqual_TimespanTimespan(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTimespan GetA() {
		return memory.read<struct FTimespan>(m_addr + 0);
	}
	struct FTimespan GetB() {
		return memory.read<struct FTimespan>(m_addr + 8);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FNotEqual_Vector4Vector4
{
public:
	FNotEqual_Vector4Vector4(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector4 GetA() {
		return memory.read<struct FVector4>(m_addr + 0);
	}
	struct FVector4 GetB() {
		return memory.read<struct FVector4>(m_addr + 16);
	}
	float GetErrorTolerance() {
		return memory.read<float>(m_addr + 32);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 36);
	}

private:
	std::uint64_t m_addr = 0;
};class FNotEqual_VectorVector
{
public:
	FNotEqual_VectorVector(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetA() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetB() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	float GetErrorTolerance() {
		return memory.read<float>(m_addr + 24);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 28);
	}

private:
	std::uint64_t m_addr = 0;
};class FNotEqualExactly_Vector4Vector4
{
public:
	FNotEqualExactly_Vector4Vector4(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector4 GetA() {
		return memory.read<struct FVector4>(m_addr + 0);
	}
	struct FVector4 GetB() {
		return memory.read<struct FVector4>(m_addr + 16);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FNow
{
public:
	FNow(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDateTime GetReturnValue() {
		return memory.read<struct FDateTime>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FOr_Int64Int64
{
public:
	FOr_Int64Int64(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int64_t GetA() {
		return memory.read<int64_t>(m_addr + 0);
	}
	int64_t GetB() {
		return memory.read<int64_t>(m_addr + 8);
	}
	int64_t GetReturnValue() {
		return memory.read<int64_t>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FRemoveDisplayDelegate
{
public:
	FRemoveDisplayDelegate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetIndexToRemove() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FProjectPointOnToPlane
{
public:
	FProjectPointOnToPlane(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetPoint() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetPlaneBase() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	struct FVector GetPlaneNormal() {
		return memory.read<struct FVector>(m_addr + 24);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 36);
	}

private:
	std::uint64_t m_addr = 0;
};class FProjectVectorOnToPlane
{
public:
	FProjectVectorOnToPlane(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetV() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetPlaneNormal() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FProjectVectorOnToVector
{
public:
	FProjectVectorOnToVector(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetV() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetTarget() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FQuat_AngularDistance
{
public:
	FQuat_AngularDistance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FQuat GetA() {
		return memory.read<struct FQuat>(m_addr + 0);
	}
	struct FQuat GetB() {
		return memory.read<struct FQuat>(m_addr + 16);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FQuat_EnforceShortestArcWith
{
public:
	FQuat_EnforceShortestArcWith(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FQuat GetA() {
		return memory.read<struct FQuat>(m_addr + 0);
	}
	struct FQuat GetB() {
		return memory.read<struct FQuat>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FQuat_Euler
{
public:
	FQuat_Euler(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FQuat GetQ() {
		return memory.read<struct FQuat>(m_addr + 0);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetStartRoll
{
public:
	FSetStartRoll(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetStartRoll() {
		return memory.read<float>(m_addr + 0);
	}
	bool GetbUpdateMesh() {
		return memory.read<bool>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FQuat_Exp
{
public:
	FQuat_Exp(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FQuat GetQ() {
		return memory.read<struct FQuat>(m_addr + 0);
	}
	struct FQuat GetReturnValue() {
		return memory.read<struct FQuat>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FQuat_GetAngle
{
public:
	FQuat_GetAngle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FQuat GetQ() {
		return memory.read<struct FQuat>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FQuat_GetAxisX
{
public:
	FQuat_GetAxisX(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FQuat GetQ() {
		return memory.read<struct FQuat>(m_addr + 0);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FQuat_GetAxisY
{
public:
	FQuat_GetAxisY(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FQuat GetQ() {
		return memory.read<struct FQuat>(m_addr + 0);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FQuat_GetRotationAxis
{
public:
	FQuat_GetRotationAxis(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FQuat GetQ() {
		return memory.read<struct FQuat>(m_addr + 0);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FQuat_IsFinite
{
public:
	FQuat_IsFinite(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FQuat GetQ() {
		return memory.read<struct FQuat>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FQuat_IsNonFinite
{
public:
	FQuat_IsNonFinite(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FQuat GetQ() {
		return memory.read<struct FQuat>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FQuat_Log
{
public:
	FQuat_Log(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FQuat GetQ() {
		return memory.read<struct FQuat>(m_addr + 0);
	}
	struct FQuat GetReturnValue() {
		return memory.read<struct FQuat>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FQuat_Normalize
{
public:
	FQuat_Normalize(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FQuat GetQ() {
		return memory.read<struct FQuat>(m_addr + 0);
	}
	float GetTolerance() {
		return memory.read<float>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FQuat_RotateVector
{
public:
	FQuat_RotateVector(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FQuat GetQ() {
		return memory.read<struct FQuat>(m_addr + 0);
	}
	struct FVector GetV() {
		return memory.read<struct FVector>(m_addr + 16);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 28);
	}

private:
	std::uint64_t m_addr = 0;
};class FQuat_SizeSquared
{
public:
	FQuat_SizeSquared(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FQuat GetQ() {
		return memory.read<struct FQuat>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FQuat_VectorForward
{
public:
	FQuat_VectorForward(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FQuat GetQ() {
		return memory.read<struct FQuat>(m_addr + 0);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FRandomBoolFromStream
{
public:
	FRandomBoolFromStream(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRandomStream GetStream() {
		return memory.read<struct FRandomStream>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FRandomFloat
{
public:
	FRandomFloat(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FRandomFloatInRange
{
public:
	FRandomFloatInRange(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetMin() {
		return memory.read<float>(m_addr + 0);
	}
	float GetMax() {
		return memory.read<float>(m_addr + 4);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetYScale
{
public:
	FSetYScale(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FRandomFloatInRangeFromStream
{
public:
	FRandomFloatInRangeFromStream(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetMin() {
		return memory.read<float>(m_addr + 0);
	}
	float GetMax() {
		return memory.read<float>(m_addr + 4);
	}
	struct FRandomStream GetStream() {
		return memory.read<struct FRandomStream>(m_addr + 8);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FRandomInteger
{
public:
	FRandomInteger(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetMax() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FRandomInteger64InRange
{
public:
	FRandomInteger64InRange(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int64_t GetMin() {
		return memory.read<int64_t>(m_addr + 0);
	}
	int64_t GetMax() {
		return memory.read<int64_t>(m_addr + 8);
	}
	int64_t GetReturnValue() {
		return memory.read<int64_t>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSubtract_Vector4Vector4
{
public:
	FSubtract_Vector4Vector4(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector4 GetA() {
		return memory.read<struct FVector4>(m_addr + 0);
	}
	struct FVector4 GetB() {
		return memory.read<struct FVector4>(m_addr + 16);
	}
	struct FVector4 GetReturnValue() {
		return memory.read<struct FVector4>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FRandomIntegerInRange
{
public:
	FRandomIntegerInRange(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetMin() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetMax() {
		return memory.read<int32_t>(m_addr + 4);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FRandomIntegerInRangeFromStream
{
public:
	FRandomIntegerInRangeFromStream(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetMin() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetMax() {
		return memory.read<int32_t>(m_addr + 4);
	}
	struct FRandomStream GetStream() {
		return memory.read<struct FRandomStream>(m_addr + 8);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FVSize2DSquared
{
public:
	FVSize2DSquared(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector2D GetA() {
		return memory.read<struct FVector2D>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FRandomRotator
{
public:
	FRandomRotator(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbRoll() {
		return memory.read<bool>(m_addr + 0);
	}
	struct FRotator GetReturnValue() {
		return memory.read<struct FRotator>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FRandomUnitVector
{
public:
	FRandomUnitVector(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FRandomUnitVectorInConeInDegrees
{
public:
	FRandomUnitVectorInConeInDegrees(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetConeDir() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	float GetConeHalfAngleInDegrees() {
		return memory.read<float>(m_addr + 12);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSubtract_QuatQuat
{
public:
	FSubtract_QuatQuat(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FQuat GetA() {
		return memory.read<struct FQuat>(m_addr + 0);
	}
	struct FQuat GetB() {
		return memory.read<struct FQuat>(m_addr + 16);
	}
	struct FQuat GetReturnValue() {
		return memory.read<struct FQuat>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FRandomUnitVectorInConeInRadiansFromStream
{
public:
	FRandomUnitVectorInConeInRadiansFromStream(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetConeDir() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	float GetConeHalfAngleInRadians() {
		return memory.read<float>(m_addr + 12);
	}
	struct FRandomStream GetStream() {
		return memory.read<struct FRandomStream>(m_addr + 16);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FREase
{
public:
	FREase(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRotator GetA() {
		return memory.read<struct FRotator>(m_addr + 0);
	}
	struct FRotator GetB() {
		return memory.read<struct FRotator>(m_addr + 12);
	}
	float GetAlpha() {
		return memory.read<float>(m_addr + 24);
	}
	bool GetbShortestPath() {
		return memory.read<bool>(m_addr + 28);
	}
	enum class EEasingFunc GetEasingFunc() {
		return memory.read<enum class EEasingFunc>(m_addr + 29);
	}
	float GetBlendExp() {
		return memory.read<float>(m_addr + 32);
	}
	int32_t Getsteps() {
		return memory.read<int32_t>(m_addr + 36);
	}
	struct FRotator GetReturnValue() {
		return memory.read<struct FRotator>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};class FConv_MatrixToString
{
public:
	FConv_MatrixToString(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMatrix GetInMatrix() {
		return memory.read<struct FMatrix>(m_addr + 0);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};class FRGBLinearToHSV
{
public:
	FRGBLinearToHSV(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLinearColor GetRGB() {
		return memory.read<struct FLinearColor>(m_addr + 0);
	}
	struct FLinearColor GetReturnValue() {
		return memory.read<struct FLinearColor>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FCullArray
{
public:
	FCullArray(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetSourceString() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct TArray<struct FString> GetinArray() {
		return memory.read<struct TArray<struct FString>>(m_addr + 16);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FRInterpTo
{
public:
	FRInterpTo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRotator GetCurrent() {
		return memory.read<struct FRotator>(m_addr + 0);
	}
	struct FRotator GetTarget() {
		return memory.read<struct FRotator>(m_addr + 12);
	}
	float GetDeltaTime() {
		return memory.read<float>(m_addr + 24);
	}
	float GetInterpSpeed() {
		return memory.read<float>(m_addr + 28);
	}
	struct FRotator GetReturnValue() {
		return memory.read<struct FRotator>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FRInterpTo_Constant
{
public:
	FRInterpTo_Constant(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRotator GetCurrent() {
		return memory.read<struct FRotator>(m_addr + 0);
	}
	struct FRotator GetTarget() {
		return memory.read<struct FRotator>(m_addr + 12);
	}
	float GetDeltaTime() {
		return memory.read<float>(m_addr + 24);
	}
	float GetInterpSpeed() {
		return memory.read<float>(m_addr + 28);
	}
	struct FRotator GetReturnValue() {
		return memory.read<struct FRotator>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FRLerp
{
public:
	FRLerp(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRotator GetA() {
		return memory.read<struct FRotator>(m_addr + 0);
	}
	struct FRotator GetB() {
		return memory.read<struct FRotator>(m_addr + 12);
	}
	float GetAlpha() {
		return memory.read<float>(m_addr + 24);
	}
	bool GetbShortestPath() {
		return memory.read<bool>(m_addr + 28);
	}
	struct FRotator GetReturnValue() {
		return memory.read<struct FRotator>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FRound
{
public:
	FRound(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetA() {
		return memory.read<float>(m_addr + 0);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FSafeDivide
{
public:
	FSafeDivide(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetA() {
		return memory.read<float>(m_addr + 0);
	}
	float GetB() {
		return memory.read<float>(m_addr + 4);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FBeginTrails
{
public:
	FBeginTrails(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetInFirstSocketName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FName GetInSecondSocketName() {
		return memory.read<struct FName>(m_addr + 8);
	}
	enum class ETrailWidthMode GetInWidthMode() {
		return memory.read<enum class ETrailWidthMode>(m_addr + 16);
	}
	float GetInWidth() {
		return memory.read<float>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FSeedRandomStream
{
public:
	FSeedRandomStream(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRandomStream GetStream() {
		return memory.read<struct FRandomStream>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSelectClass
{
public:
	FSelectClass(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UObject GetA() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return UObject(ptr_addr);
	}
	UObject GetB() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return UObject(ptr_addr);
	}
	bool GetbSelectA() {
		return memory.read<bool>(m_addr + 16);
	}
	UObject GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 24);
		return UObject(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSelectFloat
{
public:
	FSelectFloat(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetA() {
		return memory.read<float>(m_addr + 0);
	}
	float GetB() {
		return memory.read<float>(m_addr + 4);
	}
	bool GetbPickA() {
		return memory.read<bool>(m_addr + 8);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FSelectInt
{
public:
	FSelectInt(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetA() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetB() {
		return memory.read<int32_t>(m_addr + 4);
	}
	bool GetbPickA() {
		return memory.read<bool>(m_addr + 8);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FSelectTransform
{
public:
	FSelectTransform(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTransform GetA() {
		return memory.read<struct FTransform>(m_addr + 0);
	}
	struct FTransform GetB() {
		return memory.read<struct FTransform>(m_addr + 48);
	}
	bool GetbPickA() {
		return memory.read<bool>(m_addr + 96);
	}
	struct FTransform GetReturnValue() {
		return memory.read<struct FTransform>(m_addr + 112);
	}

private:
	std::uint64_t m_addr = 0;
};class FSelectVector
{
public:
	FSelectVector(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetA() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetB() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	bool GetbPickA() {
		return memory.read<bool>(m_addr + 24);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 28);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetMicThreshold
{
public:
	FSetMicThreshold(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetInThreshold() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FTEase
{
public:
	FTEase(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTransform GetA() {
		return memory.read<struct FTransform>(m_addr + 0);
	}
	struct FTransform GetB() {
		return memory.read<struct FTransform>(m_addr + 48);
	}
	float GetAlpha() {
		return memory.read<float>(m_addr + 96);
	}
	enum class EEasingFunc GetEasingFunc() {
		return memory.read<enum class EEasingFunc>(m_addr + 100);
	}
	float GetBlendExp() {
		return memory.read<float>(m_addr + 104);
	}
	int32_t Getsteps() {
		return memory.read<int32_t>(m_addr + 108);
	}
	struct FTransform GetReturnValue() {
		return memory.read<struct FTransform>(m_addr + 112);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetRandomStreamSeed
{
public:
	FSetRandomStreamSeed(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRandomStream GetStream() {
		return memory.read<struct FRandomStream>(m_addr + 0);
	}
	int32_t GetNewSeed() {
		return memory.read<int32_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSignOfInteger
{
public:
	FSignOfInteger(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetA() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FSpherical2DToUnitCartesian
{
public:
	FSpherical2DToUnitCartesian(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector2D GetA() {
		return memory.read<struct FVector2D>(m_addr + 0);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSquare
{
public:
	FSquare(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetA() {
		return memory.read<float>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FSubtract_ByteByte
{
public:
	FSubtract_ByteByte(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	char GetA() {
		return memory.read<char>(m_addr + 0);
	}
	char GetB() {
		return memory.read<char>(m_addr + 1);
	}
	char GetReturnValue() {
		return memory.read<char>(m_addr + 2);
	}

private:
	std::uint64_t m_addr = 0;
};class FStringTableIdAndKeyFromText
{
public:
	FStringTableIdAndKeyFromText(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetText() {
		return memory.read<struct FText>(m_addr + 0);
	}
	struct FName GetOutTableId() {
		return memory.read<struct FName>(m_addr + 24);
	}
	struct FString GetOutKey() {
		return memory.read<struct FString>(m_addr + 32);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};class FSubtract_DateTimeDateTime
{
public:
	FSubtract_DateTimeDateTime(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDateTime GetA() {
		return memory.read<struct FDateTime>(m_addr + 0);
	}
	struct FDateTime GetB() {
		return memory.read<struct FDateTime>(m_addr + 8);
	}
	struct FTimespan GetReturnValue() {
		return memory.read<struct FTimespan>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSubtract_FloatFloat
{
public:
	FSubtract_FloatFloat(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetA() {
		return memory.read<float>(m_addr + 0);
	}
	float GetB() {
		return memory.read<float>(m_addr + 4);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSubtract_Int64Int64
{
public:
	FSubtract_Int64Int64(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int64_t GetA() {
		return memory.read<int64_t>(m_addr + 0);
	}
	int64_t GetB() {
		return memory.read<int64_t>(m_addr + 8);
	}
	int64_t GetReturnValue() {
		return memory.read<int64_t>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSubtract_IntInt
{
public:
	FSubtract_IntInt(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetA() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetB() {
		return memory.read<int32_t>(m_addr + 4);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSubtract_IntPointIntPoint
{
public:
	FSubtract_IntPointIntPoint(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FIntPoint GetA() {
		return memory.read<struct FIntPoint>(m_addr + 0);
	}
	struct FIntPoint GetB() {
		return memory.read<struct FIntPoint>(m_addr + 8);
	}
	struct FIntPoint GetReturnValue() {
		return memory.read<struct FIntPoint>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSubtract_TimespanTimespan
{
public:
	FSubtract_TimespanTimespan(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTimespan GetA() {
		return memory.read<struct FTimespan>(m_addr + 0);
	}
	struct FTimespan GetB() {
		return memory.read<struct FTimespan>(m_addr + 8);
	}
	struct FTimespan GetReturnValue() {
		return memory.read<struct FTimespan>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSubtract_Vector2DFloat
{
public:
	FSubtract_Vector2DFloat(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector2D GetA() {
		return memory.read<struct FVector2D>(m_addr + 0);
	}
	float GetB() {
		return memory.read<float>(m_addr + 8);
	}
	struct FVector2D GetReturnValue() {
		return memory.read<struct FVector2D>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FSubtract_VectorFloat
{
public:
	FSubtract_VectorFloat(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetA() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	float GetB() {
		return memory.read<float>(m_addr + 12);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSubtract_VectorInt
{
public:
	FSubtract_VectorInt(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetA() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	int32_t GetB() {
		return memory.read<int32_t>(m_addr + 12);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetSpeed
{
public:
	FSetSpeed(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetInNewSpeed() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSubtract_VectorVector
{
public:
	FSubtract_VectorVector(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetA() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetB() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FTimespanFromString
{
public:
	FTimespanFromString(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetTimespanString() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FTimespan GetResult() {
		return memory.read<struct FTimespan>(m_addr + 16);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FTimespanMinValue
{
public:
	FTimespanMinValue(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTimespan GetReturnValue() {
		return memory.read<struct FTimespan>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FTInterpTo
{
public:
	FTInterpTo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTransform GetCurrent() {
		return memory.read<struct FTransform>(m_addr + 0);
	}
	struct FTransform GetTarget() {
		return memory.read<struct FTransform>(m_addr + 48);
	}
	float GetDeltaTime() {
		return memory.read<float>(m_addr + 96);
	}
	float GetInterpSpeed() {
		return memory.read<float>(m_addr + 100);
	}
	struct FTransform GetReturnValue() {
		return memory.read<struct FTransform>(m_addr + 112);
	}

private:
	std::uint64_t m_addr = 0;
};class FTLerp
{
public:
	FTLerp(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTransform GetA() {
		return memory.read<struct FTransform>(m_addr + 0);
	}
	struct FTransform GetB() {
		return memory.read<struct FTransform>(m_addr + 48);
	}
	float GetAlpha() {
		return memory.read<float>(m_addr + 96);
	}
	enum class ELerpInterpolationMode GetInterpMode() {
		return memory.read<enum class ELerpInterpolationMode>(m_addr + 100);
	}
	struct FTransform GetReturnValue() {
		return memory.read<struct FTransform>(m_addr + 112);
	}

private:
	std::uint64_t m_addr = 0;
};class FToday
{
public:
	FToday(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDateTime GetReturnValue() {
		return memory.read<struct FDateTime>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FTransform_Determinant
{
public:
	FTransform_Determinant(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTransform GetTransform() {
		return memory.read<struct FTransform>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetTileBorderSize
{
public:
	FGetTileBorderSize(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FTransformLocation
{
public:
	FTransformLocation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTransform GetT() {
		return memory.read<struct FTransform>(m_addr + 0);
	}
	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 48);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 60);
	}

private:
	std::uint64_t m_addr = 0;
};class FTransformVector4
{
public:
	FTransformVector4(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMatrix GetMatrix() {
		return memory.read<struct FMatrix>(m_addr + 0);
	}
	struct FVector4 GetVec4() {
		return memory.read<struct FVector4>(m_addr + 64);
	}
	struct FVector4 GetReturnValue() {
		return memory.read<struct FVector4>(m_addr + 80);
	}

private:
	std::uint64_t m_addr = 0;
};class FVector2D_One
{
public:
	FVector2D_One(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector2D GetReturnValue() {
		return memory.read<struct FVector2D>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FVector2DInterpTo_Constant
{
public:
	FVector2DInterpTo_Constant(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector2D GetCurrent() {
		return memory.read<struct FVector2D>(m_addr + 0);
	}
	struct FVector2D GetTarget() {
		return memory.read<struct FVector2D>(m_addr + 8);
	}
	float GetDeltaTime() {
		return memory.read<float>(m_addr + 16);
	}
	float GetInterpSpeed() {
		return memory.read<float>(m_addr + 20);
	}
	struct FVector2D GetReturnValue() {
		return memory.read<struct FVector2D>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FVector4_Assign
{
public:
	FVector4_Assign(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector4 GetA() {
		return memory.read<struct FVector4>(m_addr + 0);
	}
	struct FVector4 GetInVector() {
		return memory.read<struct FVector4>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FVector4_CrossProduct3
{
public:
	FVector4_CrossProduct3(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector4 GetA() {
		return memory.read<struct FVector4>(m_addr + 0);
	}
	struct FVector4 GetB() {
		return memory.read<struct FVector4>(m_addr + 16);
	}
	struct FVector4 GetReturnValue() {
		return memory.read<struct FVector4>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FVector4_DotProduct
{
public:
	FVector4_DotProduct(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector4 GetA() {
		return memory.read<struct FVector4>(m_addr + 0);
	}
	struct FVector4 GetB() {
		return memory.read<struct FVector4>(m_addr + 16);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FConv_IntVectorToString
{
public:
	FConv_IntVectorToString(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FIntVector GetInIntVec() {
		return memory.read<struct FIntVector>(m_addr + 0);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FVector4_DotProduct3
{
public:
	FVector4_DotProduct3(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector4 GetA() {
		return memory.read<struct FVector4>(m_addr + 0);
	}
	struct FVector4 GetB() {
		return memory.read<struct FVector4>(m_addr + 16);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FVector4_IsNormal3
{
public:
	FVector4_IsNormal3(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector4 GetA() {
		return memory.read<struct FVector4>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FVector4_MirrorByVector3
{
public:
	FVector4_MirrorByVector3(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector4 GetDirection() {
		return memory.read<struct FVector4>(m_addr + 0);
	}
	struct FVector4 GetSurfaceNormal() {
		return memory.read<struct FVector4>(m_addr + 16);
	}
	struct FVector4 GetReturnValue() {
		return memory.read<struct FVector4>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FVector4_Normal3
{
public:
	FVector4_Normal3(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector4 GetA() {
		return memory.read<struct FVector4>(m_addr + 0);
	}
	float GetTolerance() {
		return memory.read<float>(m_addr + 16);
	}
	struct FVector4 GetReturnValue() {
		return memory.read<struct FVector4>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FVector4_Size
{
public:
	FVector4_Size(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector4 GetA() {
		return memory.read<struct FVector4>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FVector4_Size3
{
public:
	FVector4_Size3(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector4 GetA() {
		return memory.read<struct FVector4>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FVector4_SizeSquared3
{
public:
	FVector4_SizeSquared3(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector4 GetA() {
		return memory.read<struct FVector4>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FVector_Assign
{
public:
	FVector_Assign(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetA() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetInVector() {
		return memory.read<struct FVector>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FVector_Backward
{
public:
	FVector_Backward(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FVector_ClampSizeMax
{
public:
	FVector_ClampSizeMax(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetA() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	float GetMax() {
		return memory.read<float>(m_addr + 12);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FVector_Distance
{
public:
	FVector_Distance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector Getv1() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector Getv2() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetBeamEndPoint
{
public:
	FGetBeamEndPoint(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetEmitterIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct FVector GetOutEndPoint() {
		return memory.read<struct FVector>(m_addr + 4);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FVector_DistanceSquared
{
public:
	FVector_DistanceSquared(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector Getv1() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector Getv2() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FVector_Down
{
public:
	FVector_Down(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FVector_Forward
{
public:
	FVector_Forward(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FVector_GetSignVector
{
public:
	FVector_GetSignVector(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetA() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FVector_IsNearlyZero
{
public:
	FVector_IsNearlyZero(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetA() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	float GetTolerance() {
		return memory.read<float>(m_addr + 12);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FVector_IsNormal
{
public:
	FVector_IsNormal(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetA() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FVector_IsUniform
{
public:
	FVector_IsUniform(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetA() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	float GetTolerance() {
		return memory.read<float>(m_addr + 12);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FVector_MirrorByPlane
{
public:
	FVector_MirrorByPlane(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetA() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FPlane GetInPlane() {
		return memory.read<struct FPlane>(m_addr + 16);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FVector_Normal2D
{
public:
	FVector_Normal2D(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetA() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	float GetTolerance() {
		return memory.read<float>(m_addr + 12);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FVector_NormalUnsafe
{
public:
	FVector_NormalUnsafe(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetA() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FVector_Reciprocal
{
public:
	FVector_Reciprocal(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetA() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetStartScale
{
public:
	FGetStartScale(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector2D GetReturnValue() {
		return memory.read<struct FVector2D>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FVector_SnappedToGrid
{
public:
	FVector_SnappedToGrid(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetInVect() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	float GetInGridSize() {
		return memory.read<float>(m_addr + 12);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FVector_ToRadians
{
public:
	FVector_ToRadians(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetA() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetLowerHemisphereColor
{
public:
	FSetLowerHemisphereColor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLinearColor GetInLowerHemisphereColor() {
		return memory.read<struct FLinearColor>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FVector_UnitCartesianToSpherical
{
public:
	FVector_UnitCartesianToSpherical(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetA() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector2D GetReturnValue() {
		return memory.read<struct FVector2D>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FVector_Up
{
public:
	FVector_Up(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FVector_Zero
{
public:
	FVector_Zero(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FVInterpTo
{
public:
	FVInterpTo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetCurrent() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetTarget() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	float GetDeltaTime() {
		return memory.read<float>(m_addr + 24);
	}
	float GetInterpSpeed() {
		return memory.read<float>(m_addr + 28);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FVInterpTo_Constant
{
public:
	FVInterpTo_Constant(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetCurrent() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetTarget() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	float GetDeltaTime() {
		return memory.read<float>(m_addr + 24);
	}
	float GetInterpSpeed() {
		return memory.read<float>(m_addr + 28);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FVSize2D
{
public:
	FVSize2D(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector2D GetA() {
		return memory.read<struct FVector2D>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FXor_IntInt
{
public:
	FXor_IntInt(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetA() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetB() {
		return memory.read<int32_t>(m_addr + 4);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FClearAllBits
{
public:
	FClearAllBits(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetData() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FClearBit
{
public:
	FClearBit(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetData() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetIndex() {
		return memory.read<int32_t>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetEnumeratorValueFromIndex
{
public:
	FGetEnumeratorValueFromIndex(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UEnum GetEnum() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UEnum(ptr_addr);
	}
	char GetEnumeratorIndex() {
		return memory.read<char>(m_addr + 8);
	}
	char GetReturnValue() {
		return memory.read<char>(m_addr + 9);
	}

private:
	std::uint64_t m_addr = 0;
};class FHasUnmarkedBit
{
public:
	FHasUnmarkedBit(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetData() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetNumBits() {
		return memory.read<int32_t>(m_addr + 4);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FClearRenderTarget2D
{
public:
	FClearRenderTarget2D(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct UTextureRenderTarget2D GetTextureRenderTarget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UTextureRenderTarget2D(ptr_addr);
	}
	struct FLinearColor GetClearColor() {
		return memory.read<struct FLinearColor>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FConvertRenderTargetToTexture2DEditorOnly
{
public:
	FConvertRenderTargetToTexture2DEditorOnly(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct UTextureRenderTarget2D GetRenderTarget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UTextureRenderTarget2D(ptr_addr);
	}
	struct UTexture2D GetTexture() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UTexture2D(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FCreateRenderTarget2D
{
public:
	FCreateRenderTarget2D(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	int32_t GetWidth() {
		return memory.read<int32_t>(m_addr + 8);
	}
	int32_t GetHeight() {
		return memory.read<int32_t>(m_addr + 12);
	}
	enum class ETextureRenderTargetFormat GetFormat() {
		return memory.read<enum class ETextureRenderTargetFormat>(m_addr + 16);
	}
	struct FLinearColor GetClearColor() {
		return memory.read<struct FLinearColor>(m_addr + 20);
	}
	bool GetbAutoGenerateMipMaps() {
		return memory.read<bool>(m_addr + 36);
	}
	struct UTextureRenderTarget2D GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct UTextureRenderTarget2D(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FCreateRenderTargetVolume
{
public:
	FCreateRenderTargetVolume(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	int32_t GetWidth() {
		return memory.read<int32_t>(m_addr + 8);
	}
	int32_t GetHeight() {
		return memory.read<int32_t>(m_addr + 12);
	}
	int32_t GetDepth() {
		return memory.read<int32_t>(m_addr + 16);
	}
	enum class ETextureRenderTargetFormat GetFormat() {
		return memory.read<enum class ETextureRenderTargetFormat>(m_addr + 20);
	}
	struct FLinearColor GetClearColor() {
		return memory.read<struct FLinearColor>(m_addr + 24);
	}
	bool GetbAutoGenerateMipMaps() {
		return memory.read<bool>(m_addr + 40);
	}
	struct UTextureRenderTargetVolume GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct UTextureRenderTargetVolume(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FDrawMaterialToRenderTarget
{
public:
	FDrawMaterialToRenderTarget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct UTextureRenderTarget2D GetTextureRenderTarget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UTextureRenderTarget2D(ptr_addr);
	}
	struct UMaterialInterface GetMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct UMaterialInterface(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FEndDrawCanvasToRenderTarget
{
public:
	FEndDrawCanvasToRenderTarget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FDrawToRenderTargetContext GetContext() {
		return memory.read<struct FDrawToRenderTargetContext>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FExportTexture2D
{
public:
	FExportTexture2D(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct UTexture2D GetTexture() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UTexture2D(ptr_addr);
	}
	struct FString GetFilePath() {
		return memory.read<struct FString>(m_addr + 16);
	}
	struct FString GetFilename() {
		return memory.read<struct FString>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FConv_RotatorToText
{
public:
	FConv_RotatorToText(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRotator GetInRot() {
		return memory.read<struct FRotator>(m_addr + 0);
	}
	struct FText GetReturnValue() {
		return memory.read<struct FText>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FImportBufferAsTexture2D
{
public:
	FImportBufferAsTexture2D(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct TArray<char> GetBuffer() {
		return memory.read<struct TArray<char>>(m_addr + 8);
	}
	struct UTexture2D GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 24);
		return struct UTexture2D(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FImportFileAsTexture2D
{
public:
	FImportFileAsTexture2D(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FString GetFilename() {
		return memory.read<struct FString>(m_addr + 8);
	}
	struct UTexture2D GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 24);
		return struct UTexture2D(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FReadRenderTargetRawUV
{
public:
	FReadRenderTargetRawUV(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct UTextureRenderTarget2D GetTextureRenderTarget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UTextureRenderTarget2D(ptr_addr);
	}
	float GetU() {
		return memory.read<float>(m_addr + 16);
	}
	float GetV() {
		return memory.read<float>(m_addr + 20);
	}
	struct FLinearColor GetReturnValue() {
		return memory.read<struct FLinearColor>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FReleaseRenderTarget2D
{
public:
	FReleaseRenderTarget2D(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTextureRenderTarget2D GetTextureRenderTarget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UTextureRenderTarget2D(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FBuildString_Color
{
public:
	FBuildString_Color(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetAppendTo() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FString GetPrefix() {
		return memory.read<struct FString>(m_addr + 16);
	}
	struct FLinearColor GetInColor() {
		return memory.read<struct FLinearColor>(m_addr + 32);
	}
	struct FString GetSuffix() {
		return memory.read<struct FString>(m_addr + 48);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};class FBuildString_Float
{
public:
	FBuildString_Float(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetAppendTo() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FString GetPrefix() {
		return memory.read<struct FString>(m_addr + 16);
	}
	float GetInFloat() {
		return memory.read<float>(m_addr + 32);
	}
	struct FString GetSuffix() {
		return memory.read<struct FString>(m_addr + 40);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};class FBuildString_IntVector
{
public:
	FBuildString_IntVector(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetAppendTo() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FString GetPrefix() {
		return memory.read<struct FString>(m_addr + 16);
	}
	struct FIntVector GetInIntVector() {
		return memory.read<struct FIntVector>(m_addr + 32);
	}
	struct FString GetSuffix() {
		return memory.read<struct FString>(m_addr + 48);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};class FBuildString_Vector
{
public:
	FBuildString_Vector(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetAppendTo() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FString GetPrefix() {
		return memory.read<struct FString>(m_addr + 16);
	}
	struct FVector GetInVector() {
		return memory.read<struct FVector>(m_addr + 32);
	}
	struct FString GetSuffix() {
		return memory.read<struct FString>(m_addr + 48);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};class FBuildString_Vector2d
{
public:
	FBuildString_Vector2d(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetAppendTo() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FString GetPrefix() {
		return memory.read<struct FString>(m_addr + 16);
	}
	struct FVector2D GetInVector2D() {
		return memory.read<struct FVector2D>(m_addr + 32);
	}
	struct FString GetSuffix() {
		return memory.read<struct FString>(m_addr + 40);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};class FContains
{
public:
	FContains(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetSearchIn() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FString GetSubstring() {
		return memory.read<struct FString>(m_addr + 16);
	}
	bool GetbUseCase() {
		return memory.read<bool>(m_addr + 32);
	}
	bool GetbSearchFromEnd() {
		return memory.read<bool>(m_addr + 33);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 34);
	}

private:
	std::uint64_t m_addr = 0;
};class FConv_BoolToString
{
public:
	FConv_BoolToString(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetInBool() {
		return memory.read<bool>(m_addr + 0);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FConv_ByteToString
{
public:
	FConv_ByteToString(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	char GetInByte() {
		return memory.read<char>(m_addr + 0);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FConv_ColorToString
{
public:
	FConv_ColorToString(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLinearColor GetInColor() {
		return memory.read<struct FLinearColor>(m_addr + 0);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetMinimumGustAmount
{
public:
	FSetMinimumGustAmount(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetInNewMinGust() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FConv_FloatToString
{
public:
	FConv_FloatToString(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetInFloat() {
		return memory.read<float>(m_addr + 0);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FConv_RotatorToString
{
public:
	FConv_RotatorToString(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRotator GetInRot() {
		return memory.read<struct FRotator>(m_addr + 0);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetEndOffset
{
public:
	FGetEndOffset(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector2D GetReturnValue() {
		return memory.read<struct FVector2D>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FConv_StringToColor
{
public:
	FConv_StringToColor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetinString() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FLinearColor GetOutConvertedColor() {
		return memory.read<struct FLinearColor>(m_addr + 16);
	}
	bool GetOutIsValid() {
		return memory.read<bool>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FConv_StringToName
{
public:
	FConv_StringToName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetinString() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FName GetReturnValue() {
		return memory.read<struct FName>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FConv_StringToRotator
{
public:
	FConv_StringToRotator(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetinString() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FRotator GetOutConvertedRotator() {
		return memory.read<struct FRotator>(m_addr + 16);
	}
	bool GetOutIsValid() {
		return memory.read<bool>(m_addr + 28);
	}

private:
	std::uint64_t m_addr = 0;
};class FConv_TransformToString
{
public:
	FConv_TransformToString(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTransform GetInTrans() {
		return memory.read<struct FTransform>(m_addr + 0);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};class FConv_VectorToString
{
public:
	FConv_VectorToString(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetInVec() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FEqualEqual_StriStri
{
public:
	FEqualEqual_StriStri(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetA() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FString GetB() {
		return memory.read<struct FString>(m_addr + 16);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FEqualEqual_StrStr
{
public:
	FEqualEqual_StrStr(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetA() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FString GetB() {
		return memory.read<struct FString>(m_addr + 16);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsNumeric
{
public:
	FIsNumeric(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetSourceString() {
		return memory.read<struct FString>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FJoinStringArray
{
public:
	FJoinStringArray(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FString> GetSourceArray() {
		return memory.read<struct TArray<struct FString>>(m_addr + 0);
	}
	struct FString GetSeparator() {
		return memory.read<struct FString>(m_addr + 16);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 32);
	}

private:
	std::uint64_t m_addr = 0;
};class FLeftChop
{
public:
	FLeftChop(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetSourceString() {
		return memory.read<struct FString>(m_addr + 0);
	}
	int32_t GetCount() {
		return memory.read<int32_t>(m_addr + 16);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FParseIntoArray
{
public:
	FParseIntoArray(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetSourceString() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FString GetDelimiter() {
		return memory.read<struct FString>(m_addr + 16);
	}
	bool GetCullEmptyStrings() {
		return memory.read<bool>(m_addr + 32);
	}
	struct TArray<struct FString> GetReturnValue() {
		return memory.read<struct TArray<struct FString>>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};class FTimeSecondsToString
{
public:
	FTimeSecondsToString(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetInSeconds() {
		return memory.read<float>(m_addr + 0);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetBeamTargetStrength
{
public:
	FSetBeamTargetStrength(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetEmitterIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	float GetNewTargetStrength() {
		return memory.read<float>(m_addr + 4);
	}
	int32_t GetTargetIndex() {
		return memory.read<int32_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FToUpper
{
public:
	FToUpper(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetSourceString() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FTrim
{
public:
	FTrim(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetSourceString() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FTrimTrailing
{
public:
	FTrimTrailing(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetSourceString() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetKeysFromStringTable
{
public:
	FGetKeysFromStringTable(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetTableId() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct TArray<struct FString> GetReturnValue() {
		return memory.read<struct TArray<struct FString>>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetTableEntrySourceString
{
public:
	FGetTableEntrySourceString(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetTableId() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FString GetKey() {
		return memory.read<struct FString>(m_addr + 8);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetBind
{
public:
	FSetBind(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetBindName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FString GetCommand() {
		return memory.read<struct FString>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetTableNamespace
{
public:
	FGetTableNamespace(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetTableId() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsRegisteredTableEntry
{
public:
	FIsRegisteredTableEntry(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetTableId() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FString GetKey() {
		return memory.read<struct FString>(m_addr + 8);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FAsCurrencyBase
{
public:
	FAsCurrencyBase(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetBaseValue() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct FString GetCurrencyCode() {
		return memory.read<struct FString>(m_addr + 8);
	}
	struct FText GetReturnValue() {
		return memory.read<struct FText>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FAsTimeZoneTime_DateTime
{
public:
	FAsTimeZoneTime_DateTime(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDateTime GetInDateTime() {
		return memory.read<struct FDateTime>(m_addr + 0);
	}
	struct FString GetInTimeZone() {
		return memory.read<struct FString>(m_addr + 8);
	}
	struct FText GetReturnValue() {
		return memory.read<struct FText>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FConv_ColorToText
{
public:
	FConv_ColorToText(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLinearColor GetInColor() {
		return memory.read<struct FLinearColor>(m_addr + 0);
	}
	struct FText GetReturnValue() {
		return memory.read<struct FText>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FConv_Int64ToText
{
public:
	FConv_Int64ToText(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int64_t GetValue() {
		return memory.read<int64_t>(m_addr + 0);
	}
	bool GetbAlwaysSign() {
		return memory.read<bool>(m_addr + 8);
	}
	bool GetbUseGrouping() {
		return memory.read<bool>(m_addr + 9);
	}
	int32_t GetMinimumIntegralDigits() {
		return memory.read<int32_t>(m_addr + 12);
	}
	int32_t GetMaximumIntegralDigits() {
		return memory.read<int32_t>(m_addr + 16);
	}
	struct FText GetReturnValue() {
		return memory.read<struct FText>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FConv_NameToText
{
public:
	FConv_NameToText(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetInName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FText GetReturnValue() {
		return memory.read<struct FText>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FConv_StringToText
{
public:
	FConv_StringToText(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetinString() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FText GetReturnValue() {
		return memory.read<struct FText>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FConv_TransformToText
{
public:
	FConv_TransformToText(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTransform GetInTrans() {
		return memory.read<struct FTransform>(m_addr + 0);
	}
	struct FText GetReturnValue() {
		return memory.read<struct FText>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};class FFindTextInLocalizationTable
{
public:
	FFindTextInLocalizationTable(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetNamespace() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FString GetKey() {
		return memory.read<struct FString>(m_addr + 16);
	}
	struct FText GetOutText() {
		return memory.read<struct FText>(m_addr + 32);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};class FConv_VectorToText
{
public:
	FConv_VectorToText(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetInVec() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FText GetReturnValue() {
		return memory.read<struct FText>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FFormat
{
public:
	FFormat(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetInPattern() {
		return memory.read<struct FText>(m_addr + 0);
	}
	struct TArray<struct FFormatArgumentData> GetInArgs() {
		return memory.read<struct TArray<struct FFormatArgumentData>>(m_addr + 24);
	}
	struct FText GetReturnValue() {
		return memory.read<struct FText>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};class FNotEqual_IgnoreCase_TextText
{
public:
	FNotEqual_IgnoreCase_TextText(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetA() {
		return memory.read<struct FText>(m_addr + 0);
	}
	struct FText GetB() {
		return memory.read<struct FText>(m_addr + 24);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};class FNotEqual_TextText
{
public:
	FNotEqual_TextText(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetA() {
		return memory.read<struct FText>(m_addr + 0);
	}
	struct FText GetB() {
		return memory.read<struct FText>(m_addr + 24);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};class FPolyglotDataToText
{
public:
	FPolyglotDataToText(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FPolyglotTextData GetPolyglotData() {
		return memory.read<struct FPolyglotTextData>(m_addr + 0);
	}
	struct FText GetReturnValue() {
		return memory.read<struct FText>(m_addr + 184);
	}

private:
	std::uint64_t m_addr = 0;
};class FTextFromStringTable
{
public:
	FTextFromStringTable(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetTableId() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FString GetKey() {
		return memory.read<struct FString>(m_addr + 8);
	}
	struct FText GetReturnValue() {
		return memory.read<struct FText>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FTextIsCultureInvariant
{
public:
	FTextIsCultureInvariant(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetInText() {
		return memory.read<struct FText>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FTextIsFromStringTable
{
public:
	FTextIsFromStringTable(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetText() {
		return memory.read<struct FText>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FTextIsTransient
{
public:
	FTextIsTransient(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetInText() {
		return memory.read<struct FText>(m_addr + 0);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FTextTrimPrecedingAndTrailing
{
public:
	FTextTrimPrecedingAndTrailing(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetInText() {
		return memory.read<struct FText>(m_addr + 0);
	}
	struct FText GetReturnValue() {
		return memory.read<struct FText>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FCreateInstance
{
public:
	FCreateInstance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetUniqueInstanceName() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct ULevelStreaming GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct ULevelStreaming(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetLoadedLevel
{
public:
	FGetLoadedLevel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ULevel GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct ULevel(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetIsRequestingUnloadAndRemoval
{
public:
	FSetIsRequestingUnloadAndRemoval(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbInIsRequestingUnloadAndRemoval() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetLevelLODIndex
{
public:
	FSetLevelLODIndex(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetLODIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetShouldBeLoaded
{
public:
	FSetShouldBeLoaded(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbInShouldBeLoaded() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetShouldBeVisible
{
public:
	FSetShouldBeVisible(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbInShouldBeVisible() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FShouldBeLoaded
{
public:
	FShouldBeLoaded(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FLoadLevelInstance
{
public:
	FLoadLevelInstance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FString GetLevelName() {
		return memory.read<struct FString>(m_addr + 8);
	}
	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 24);
	}
	struct FRotator GetRotation() {
		return memory.read<struct FRotator>(m_addr + 36);
	}
	bool GetbOutSuccess() {
		return memory.read<bool>(m_addr + 48);
	}
	struct FString GetOptionalLevelNameOverride() {
		return memory.read<struct FString>(m_addr + 56);
	}
	struct ULevelStreamingDynamic GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return struct ULevelStreamingDynamic(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FAddElement
{
public:
	FAddElement(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UMaterialInterface GetMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UMaterialInterface(ptr_addr);
	}
	struct UCurveFloat GetDistanceToOpacityCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UCurveFloat(ptr_addr);
	}
	bool GetbSizeIsInScreenSpace() {
		return memory.read<bool>(m_addr + 16);
	}
	float GetBaseSizeX() {
		return memory.read<float>(m_addr + 20);
	}
	float GetBaseSizeY() {
		return memory.read<float>(m_addr + 24);
	}
	struct UCurveFloat GetDistanceToSizeCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 32);
		return struct UCurveFloat(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetUVRect
{
public:
	FSetUVRect(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FBox2D GetInUVRect() {
		return memory.read<struct FBox2D>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetElements
{
public:
	FSetElements(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FMaterialSpriteElement> GetNewElements() {
		return memory.read<struct TArray<struct FMaterialSpriteElement>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCopyInterpParameters
{
public:
	FCopyInterpParameters(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UMaterialInstance GetSource() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UMaterialInstance(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_CopyMaterialInstanceParameters
{
public:
	FK2_CopyMaterialInstanceParameters(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UMaterialInterface GetSource() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UMaterialInterface(ptr_addr);
	}
	bool GetbQuickParametersOnly() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FK2_GetScalarParameterValueByInfo
{
public:
	FK2_GetScalarParameterValueByInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMaterialParameterInfo GetParameterInfo() {
		return memory.read<struct FMaterialParameterInfo>(m_addr + 0);
	}
	float GetReturnValue() {
		return memory.read<float>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetScalarParameterValueByInfo
{
public:
	FSetScalarParameterValueByInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMaterialParameterInfo GetParameterInfo() {
		return memory.read<struct FMaterialParameterInfo>(m_addr + 0);
	}
	float GetValue() {
		return memory.read<float>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetVectorParameterValueByInfo
{
public:
	FSetVectorParameterValueByInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMaterialParameterInfo GetParameterInfo() {
		return memory.read<struct FMaterialParameterInfo>(m_addr + 0);
	}
	struct FLinearColor GetValue() {
		return memory.read<struct FLinearColor>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FMarkPropertyDirty
{
public:
	FMarkPropertyDirty(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FName GetPropertyName() {
		return memory.read<struct FName>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FMarkPropertyDirtyFromRepIndex
{
public:
	FMarkPropertyDirtyFromRepIndex(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	int32_t GetRepIndex() {
		return memory.read<int32_t>(m_addr + 8);
	}
	struct FName GetPropertyName() {
		return memory.read<struct FName>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FGenerateParticleEvent
{
public:
	FGenerateParticleEvent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetInEventName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	float GetInEmitterTime() {
		return memory.read<float>(m_addr + 8);
	}
	struct FVector GetInLocation() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	struct FVector GetInDirection() {
		return memory.read<struct FVector>(m_addr + 24);
	}
	struct FVector GetInVelocity() {
		return memory.read<struct FVector>(m_addr + 36);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetBeamSourceStrength
{
public:
	FGetBeamSourceStrength(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetEmitterIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetSourceIndex() {
		return memory.read<int32_t>(m_addr + 4);
	}
	float GetOutSourceStrength() {
		return memory.read<float>(m_addr + 8);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetBeamTargetPoint
{
public:
	FGetBeamTargetPoint(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetEmitterIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetTargetIndex() {
		return memory.read<int32_t>(m_addr + 4);
	}
	struct FVector GetOutTargetPoint() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetBeamTargetTangent
{
public:
	FGetBeamTargetTangent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetEmitterIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetTargetIndex() {
		return memory.read<int32_t>(m_addr + 4);
	}
	struct FVector GetOutTangentPoint() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetAutoAttachParams
{
public:
	FSetAutoAttachParams(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USceneComponent GetParent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct USceneComponent(ptr_addr);
	}
	struct FName GetSocketName() {
		return memory.read<struct FName>(m_addr + 8);
	}
	enum class EAttachLocation GetLocationType() {
		return memory.read<enum class EAttachLocation>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetBeamSourcePoint
{
public:
	FSetBeamSourcePoint(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetEmitterIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct FVector GetNewSourcePoint() {
		return memory.read<struct FVector>(m_addr + 4);
	}
	int32_t GetSourceIndex() {
		return memory.read<int32_t>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetBeamSourceTangent
{
public:
	FSetBeamSourceTangent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetEmitterIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct FVector GetNewTangentPoint() {
		return memory.read<struct FVector>(m_addr + 4);
	}
	int32_t GetSourceIndex() {
		return memory.read<int32_t>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetBeamTargetPoint
{
public:
	FSetBeamTargetPoint(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetEmitterIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct FVector GetNewTargetPoint() {
		return memory.read<struct FVector>(m_addr + 4);
	}
	int32_t GetTargetIndex() {
		return memory.read<int32_t>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetTrailSourceData
{
public:
	FSetTrailSourceData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetInFirstSocketName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FName GetInSecondSocketName() {
		return memory.read<struct FName>(m_addr + 8);
	}
	enum class ETrailWidthMode GetInWidthMode() {
		return memory.read<enum class ETrailWidthMode>(m_addr + 16);
	}
	float GetInWidth() {
		return memory.read<float>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FApplyPhysicalAnimationProfileBelow
{
public:
	FApplyPhysicalAnimationProfileBelow(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetBodyName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FName GetProfileName() {
		return memory.read<struct FName>(m_addr + 8);
	}
	bool GetbIncludeSelf() {
		return memory.read<bool>(m_addr + 16);
	}
	bool GetbClearNotFound() {
		return memory.read<bool>(m_addr + 17);
	}

private:
	std::uint64_t m_addr = 0;
};class FApplyPhysicalAnimationSettings
{
public:
	FApplyPhysicalAnimationSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetBodyName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct FPhysicalAnimationData GetPhysicalAnimationData() {
		return memory.read<struct FPhysicalAnimationData>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsBroken
{
public:
	FIsBroken(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetAngularDriveParams
{
public:
	FSetAngularDriveParams(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetPositionStrength() {
		return memory.read<float>(m_addr + 0);
	}
	float GetVelocityStrength() {
		return memory.read<float>(m_addr + 4);
	}
	float GetInForceLimit() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetAngularOrientationDrive
{
public:
	FSetAngularOrientationDrive(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbEnableSwingDrive() {
		return memory.read<bool>(m_addr + 0);
	}
	bool GetbEnableTwistDrive() {
		return memory.read<bool>(m_addr + 1);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetAngularOrientationTarget
{
public:
	FSetAngularOrientationTarget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRotator GetInPosTarget() {
		return memory.read<struct FRotator>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetAngularPlasticity
{
public:
	FSetAngularPlasticity(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbAngularPlasticity() {
		return memory.read<bool>(m_addr + 0);
	}
	float GetAngularPlasticityThreshold() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetLocalPlayerSubsystem
{
public:
	FGetLocalPlayerSubsystem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	ULocalPlayerSubsystem GetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return ULocalPlayerSubsystem(ptr_addr);
	}
	struct ULocalPlayerSubsystem GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct ULocalPlayerSubsystem(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetAngularSwing2Limit
{
public:
	FSetAngularSwing2Limit(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class EAngularConstraintMotion GetMotionType() {
		return memory.read<enum class EAngularConstraintMotion>(m_addr + 0);
	}
	float GetSwing2LimitAngle() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetAngularVelocityTarget
{
public:
	FSetAngularVelocityTarget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetInVelTarget() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetLinearPlasticity
{
public:
	FSetLinearPlasticity(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbLinearPlasticity() {
		return memory.read<bool>(m_addr + 0);
	}
	float GetLinearPlasticityThreshold() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetLinearPositionDrive
{
public:
	FSetLinearPositionDrive(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbEnableDriveX() {
		return memory.read<bool>(m_addr + 0);
	}
	bool GetbEnableDriveY() {
		return memory.read<bool>(m_addr + 1);
	}
	bool GetbEnableDriveZ() {
		return memory.read<bool>(m_addr + 2);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetLinearVelocityDrive
{
public:
	FSetLinearVelocityDrive(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbEnableDriveX() {
		return memory.read<bool>(m_addr + 0);
	}
	bool GetbEnableDriveY() {
		return memory.read<bool>(m_addr + 1);
	}
	bool GetbEnableDriveZ() {
		return memory.read<bool>(m_addr + 2);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetLinearVelocityTarget
{
public:
	FSetLinearVelocityTarget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetInVelTarget() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetLinearYLimit
{
public:
	FSetLinearYLimit(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class ELinearConstraintMotion GetConstraintType() {
		return memory.read<enum class ELinearConstraintMotion>(m_addr + 0);
	}
	float GetLimitSize() {
		return memory.read<float>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetOrientationDriveSLERP
{
public:
	FSetOrientationDriveSLERP(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbEnableSLERP() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetOrientationDriveTwistAndSwing
{
public:
	FSetOrientationDriveTwistAndSwing(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbEnableTwistDrive() {
		return memory.read<bool>(m_addr + 0);
	}
	bool GetbEnableSwingDrive() {
		return memory.read<bool>(m_addr + 1);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetGrabbedComponent
{
public:
	FGetGrabbedComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPrimitiveComponent GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UPrimitiveComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetTargetLocationAndRotation
{
public:
	FGetTargetLocationAndRotation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetTargetLocation() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FRotator GetTargetRotation() {
		return memory.read<struct FRotator>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FGrabComponentAtLocationWithRotation
{
public:
	FGrabComponentAtLocationWithRotation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPrimitiveComponent GetComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UPrimitiveComponent(ptr_addr);
	}
	struct FName GetInBoneName() {
		return memory.read<struct FName>(m_addr + 8);
	}
	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 16);
	}
	struct FRotator GetRotation() {
		return memory.read<struct FRotator>(m_addr + 28);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetTargetLocation
{
public:
	FSetTargetLocation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetNewLocation() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetNormalizedCompressionScalar
{
public:
	FGetNormalizedCompressionScalar(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetSpringDirection
{
public:
	FGetSpringDirection(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FOnInterpToggle
{
public:
	FOnInterpToggle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbEnable() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FHideActorComponents
{
public:
	FHideActorComponents(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetInActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AActor(ptr_addr);
	}
	bool GetbIncludeFromChildActors() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FRemoveShowOnlyComponent
{
public:
	FRemoveShowOnlyComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPrimitiveComponent GetInComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UPrimitiveComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetCaptureSortPriority
{
public:
	FSetCaptureSortPriority(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetNewCaptureSortPriority() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FShowOnlyComponent
{
public:
	FShowOnlyComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPrimitiveComponent GetInComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UPrimitiveComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetHeader
{
public:
	FGetHeader(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetHeaderIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct FString GetHeader() {
		return memory.read<struct FString>(m_addr + 8);
	}
	struct FString GetValue() {
		return memory.read<struct FString>(m_addr + 24);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetHeaderValue
{
public:
	FGetHeaderValue(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetHeaderName() {
		return memory.read<struct FString>(m_addr + 0);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetNumHeaders
{
public:
	FGetNumHeaders(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FAddNewCameraModifier
{
public:
	FAddNewCameraModifier(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UCameraModifier GetModifierClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return UCameraModifier(ptr_addr);
	}
	struct UCameraModifier GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UCameraModifier(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetCameraLocation
{
public:
	FGetCameraLocation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FPhotographyCameraModify
{
public:
	FPhotographyCameraModify(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetNewCameraLocation() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetPreviousCameraLocation() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	struct FVector GetOriginalCameraLocation() {
		return memory.read<struct FVector>(m_addr + 24);
	}
	struct FVector GetResultCameraLocation() {
		return memory.read<struct FVector>(m_addr + 36);
	}

private:
	std::uint64_t m_addr = 0;
};class FRemoveCameraLensEffect
{
public:
	FRemoveCameraLensEffect(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AEmitterCameraLensEffectBase GetEmitter() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct AEmitterCameraLensEffectBase(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FRemoveCameraModifier
{
public:
	FRemoveCameraModifier(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UCameraModifier GetModifierToRemove() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UCameraModifier(ptr_addr);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetManualCameraFade
{
public:
	FSetManualCameraFade(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetInFadeAmount() {
		return memory.read<float>(m_addr + 0);
	}
	struct FLinearColor GetColor() {
		return memory.read<struct FLinearColor>(m_addr + 4);
	}
	bool GetbInFadeAudio() {
		return memory.read<bool>(m_addr + 20);
	}

private:
	std::uint64_t m_addr = 0;
};class FStartCameraFade
{
public:
	FStartCameraFade(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetFromAlpha() {
		return memory.read<float>(m_addr + 0);
	}
	float GetToAlpha() {
		return memory.read<float>(m_addr + 4);
	}
	float GetDuration() {
		return memory.read<float>(m_addr + 8);
	}
	struct FLinearColor GetColor() {
		return memory.read<struct FLinearColor>(m_addr + 12);
	}
	bool GetbShouldFadeAudio() {
		return memory.read<bool>(m_addr + 28);
	}
	bool GetbHoldWhenFinished() {
		return memory.read<bool>(m_addr + 29);
	}

private:
	std::uint64_t m_addr = 0;
};class FStopAllCameraAnims
{
public:
	FStopAllCameraAnims(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbImmediate() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FStopAllCameraShakesFromSource
{
public:
	FStopAllCameraShakesFromSource(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UCameraShakeSourceComponent GetSourceComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UCameraShakeSourceComponent(ptr_addr);
	}
	bool GetbImmediately() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FStopAllInstancesOfCameraShakeFromSource
{
public:
	FStopAllInstancesOfCameraShakeFromSource(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UCameraShakeBase GetShake() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return UCameraShakeBase(ptr_addr);
	}
	struct UCameraShakeSourceComponent GetSourceComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UCameraShakeSourceComponent(ptr_addr);
	}
	bool GetbImmediately() {
		return memory.read<bool>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetRadius
{
public:
	FSetRadius(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetInNewRadius() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetBoneLocationByName
{
public:
	FGetBoneLocationByName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetBoneName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	enum class EBoneSpaces GetBoneSpace() {
		return memory.read<enum class EBoneSpaces>(m_addr + 8);
	}
	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FAddObjectTypeToAffect
{
public:
	FAddObjectTypeToAffect(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class EObjectTypeQuery GetObjectType() {
		return memory.read<enum class EObjectTypeQuery>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetBarnDoorAngle
{
public:
	FSetBarnDoorAngle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetAerialPespectiveViewDistanceScale
{
public:
	FSetAerialPespectiveViewDistanceScale(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetSourceTexture
{
public:
	FSetSourceTexture(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTexture GetbNewValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UTexture(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetPageTableSize
{
public:
	FGetPageTableSize(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FFindSocket
{
public:
	FFindSocket(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetInSocketName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	struct UStaticMeshSocket GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UStaticMeshSocket(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetDefaultAnimatingRig
{
public:
	FGetDefaultAnimatingRig(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftObjectPtr<UObject> GetReturnValue() {
		return memory.read<struct TSoftObjectPtr<UObject>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetImportedBounds
{
public:
	FGetImportedBounds(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FBoxSphereBounds GetReturnValue() {
		return memory.read<struct FBoxSphereBounds>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetLODSettings
{
public:
	FGetLODSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USkeletalMeshLODSettings GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct USkeletalMeshLODSettings(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetMeshClothingAssets
{
public:
	FGetMeshClothingAssets(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct UClothingAssetBase> GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct TArray<struct UClothingAssetBase>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetNodeMappingContainer
{
public:
	FGetNodeMappingContainer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UBlueprint GetSourceAsset() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UBlueprint(ptr_addr);
	}
	struct UNodeMappingContainer GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UNodeMappingContainer(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetPhysicsAsset
{
public:
	FGetPhysicsAsset(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPhysicsAsset GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UPhysicsAsset(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetShadowPhysicsAsset
{
public:
	FGetShadowPhysicsAsset(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPhysicsAsset GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UPhysicsAsset(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetHorizontalAlignment
{
public:
	FSetHorizontalAlignment(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class EHorizTextAligment GetValue() {
		return memory.read<enum class EHorizTextAligment>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FIsSectionUsingCloth
{
public:
	FIsSectionUsingCloth(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetInSectionIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	bool GetbCheckCorrespondingSections() {
		return memory.read<bool>(m_addr + 4);
	}
	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 5);
	}

private:
	std::uint64_t m_addr = 0;
};class FNumSockets
{
public:
	FNumSockets(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetLODSettings
{
public:
	FSetLODSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USkeletalMeshLODSettings GetInLODSettings() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct USkeletalMeshLODSettings(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FOverrideAtmosphereLightDirection
{
public:
	FOverrideAtmosphereLightDirection(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetAtmosphereLightIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct FVector GetLightDirection() {
		return memory.read<struct FVector>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetAtmosphereHeight
{
public:
	FSetAtmosphereHeight(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetMieAbsorptionScale
{
public:
	FSetMieAbsorptionScale(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetMieExponentialDistribution
{
public:
	FSetMieExponentialDistribution(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetMieScatteringScale
{
public:
	FSetMieScatteringScale(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetMultiScatteringFactor
{
public:
	FSetMultiScatteringFactor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetOtherAbsorption
{
public:
	FSetOtherAbsorption(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLinearColor GetNewValue() {
		return memory.read<struct FLinearColor>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetOtherAbsorptionScale
{
public:
	FSetOtherAbsorptionScale(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetCubemapBlend
{
public:
	FSetCubemapBlend(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTextureCube GetSourceCubemap() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UTextureCube(ptr_addr);
	}
	struct UTextureCube GetDestinationCubemap() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UTextureCube(ptr_addr);
	}
	float GetInBlendFraction() {
		return memory.read<float>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetMinOcclusion
{
public:
	FSetMinOcclusion(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetInMinOcclusion() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetOcclusionExponent
{
public:
	FSetOcclusionExponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetInOcclusionExponent() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FStartRecordingOutput
{
public:
	FStartRecordingOutput(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	float GetExpectedDuration() {
		return memory.read<float>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FStartSpectralAnalysis
{
public:
	FStartSpectralAnalysis(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	enum class EFFTSize GetFFTSize() {
		return memory.read<enum class EFFTSize>(m_addr + 8);
	}
	enum class EFFTPeakInterpolationMethod GetInterpolationMethod() {
		return memory.read<enum class EFFTPeakInterpolationMethod>(m_addr + 9);
	}
	enum class EFFTWindowType GetWindowType() {
		return memory.read<enum class EFFTWindowType>(m_addr + 10);
	}
	float GetHopSize() {
		return memory.read<float>(m_addr + 12);
	}
	enum class EAudioSpectrumType GetSpectrumType() {
		return memory.read<enum class EAudioSpectrumType>(m_addr + 16);
	}

private:
	std::uint64_t m_addr = 0;
};class FStopEnvelopeFollowing
{
public:
	FStopEnvelopeFollowing(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetEndPosition
{
public:
	FGetEndPosition(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetEndRoll
{
public:
	FGetEndRoll(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetEndTangent
{
public:
	FGetEndTangent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetStartRoll
{
public:
	FGetStartRoll(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetReturnValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetStartTangent
{
public:
	FGetStartTangent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetEndOffset
{
public:
	FSetEndOffset(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector2D GetEndOffset() {
		return memory.read<struct FVector2D>(m_addr + 0);
	}
	bool GetbUpdateMesh() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetEndTangent
{
public:
	FSetEndTangent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetEndTangent() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	bool GetbUpdateMesh() {
		return memory.read<bool>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetForwardAxis
{
public:
	FSetForwardAxis(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class ESplineMeshAxis GetInForwardAxis() {
		return memory.read<enum class ESplineMeshAxis>(m_addr + 0);
	}
	bool GetbUpdateMesh() {
		return memory.read<bool>(m_addr + 1);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetSplineUpDir
{
public:
	FSetSplineUpDir(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetInSplineUpDir() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	bool GetbUpdateMesh() {
		return memory.read<bool>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetStartAndEnd
{
public:
	FSetStartAndEnd(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetStartPos() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	struct FVector GetStartTangent() {
		return memory.read<struct FVector>(m_addr + 12);
	}
	struct FVector GetEndPos() {
		return memory.read<struct FVector>(m_addr + 24);
	}
	struct FVector GetEndTangent() {
		return memory.read<struct FVector>(m_addr + 36);
	}
	bool GetbUpdateMesh() {
		return memory.read<bool>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetStartOffset
{
public:
	FSetStartOffset(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector2D GetStartOffset() {
		return memory.read<struct FVector2D>(m_addr + 0);
	}
	bool GetbUpdateMesh() {
		return memory.read<bool>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetStartPosition
{
public:
	FSetStartPosition(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetStartPos() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	bool GetbUpdateMesh() {
		return memory.read<bool>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetStartTangent
{
public:
	FSetStartTangent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetStartTangent() {
		return memory.read<struct FVector>(m_addr + 0);
	}
	bool GetbUpdateMesh() {
		return memory.read<bool>(m_addr + 12);
	}

private:
	std::uint64_t m_addr = 0;
};class FAddSocket
{
public:
	FAddSocket(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UStaticMeshSocket GetSocket() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UStaticMeshSocket(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetBoundingBox
{
public:
	FGetBoundingBox(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FBox GetReturnValue() {
		return memory.read<struct FBox>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetMinimumLODForPlatform
{
public:
	FGetMinimumLODForPlatform(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetPlatformName() {
		return memory.read<struct FName>(m_addr + 0);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetNumSections
{
public:
	FGetNumSections(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetInLOD() {
		return memory.read<int32_t>(m_addr + 0);
	}
	int32_t GetReturnValue() {
		return memory.read<int32_t>(m_addr + 4);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetStaticMaterials
{
public:
	FGetStaticMaterials(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FStaticMaterial> GetReturnValue() {
		return memory.read<struct TArray<struct FStaticMaterial>>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetHeight
{
public:
	FSetHeight(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetInHeight() {
		return memory.read<int32_t>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetLeftTexture
{
public:
	FGetLeftTexture(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTexture GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UTexture(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetLeftTexture
{
public:
	FSetLeftTexture(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTexture GetInTexture() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UTexture(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetQuadSize
{
public:
	FSetQuadSize(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector2D GetInQuadSize() {
		return memory.read<struct FVector2D>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FEnableAutoLoadingSplashScreen
{
public:
	FEnableAutoLoadingSplashScreen(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetInAutoShowEnabled() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetEngineSubsystem
{
public:
	FGetEngineSubsystem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UEngineSubsystem GetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return UEngineSubsystem(ptr_addr);
	}
	struct UEngineSubsystem GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UEngineSubsystem(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetLocalPlayerSubSystemFromPlayerController
{
public:
	FGetLocalPlayerSubSystemFromPlayerController(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APlayerController GetPlayerController() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APlayerController(ptr_addr);
	}
	ULocalPlayerSubsystem GetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return ULocalPlayerSubsystem(ptr_addr);
	}
	struct ULocalPlayerSubsystem GetReturnValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 16);
		return struct ULocalPlayerSubsystem(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetTextLocalSize
{
public:
	FGetTextLocalSize(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetReturnValue() {
		return memory.read<struct FVector>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetFont
{
public:
	FSetFont(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UFont GetValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UFont(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetHorizSpacingAdjust
{
public:
	FSetHorizSpacingAdjust(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetTextRenderColor
{
public:
	FSetTextRenderColor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FColor GetValue() {
		return memory.read<struct FColor>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetWorldSize
{
public:
	FSetWorldSize(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetXScale
{
public:
	FSetXScale(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetIgnoreTimeDilation
{
public:
	FSetIgnoreTimeDilation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbNewIgnoreTimeDilation() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetPlaybackPosition
{
public:
	FSetPlaybackPosition(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewPosition() {
		return memory.read<float>(m_addr + 0);
	}
	bool GetbFireEvents() {
		return memory.read<bool>(m_addr + 4);
	}
	bool GetbFireUpdate() {
		return memory.read<bool>(m_addr + 5);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetTimelineLength
{
public:
	FSetTimelineLength(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewLength() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetTimelineLengthMode
{
public:
	FSetTimelineLengthMode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class ETimelineLengthMode GetNewLengthMode() {
		return memory.read<enum class ETimelineLengthMode>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FAuthorizeAccounts
{
public:
	FAuthorizeAccounts(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FCanShowTweetUI
{
public:
	FCanShowTweetUI(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetReturnValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FGetAccountName
{
public:
	FGetAccountName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetAccountIndex() {
		return memory.read<int32_t>(m_addr + 0);
	}
	struct FString GetReturnValue() {
		return memory.read<struct FString>(m_addr + 8);
	}

private:
	std::uint64_t m_addr = 0;
};class FLogLocation
{
public:
	FLogLocation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetWorldContextObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct FVector GetLocation() {
		return memory.read<struct FVector>(m_addr + 8);
	}
	struct FString GetText() {
		return memory.read<struct FString>(m_addr + 24);
	}
	struct FLinearColor GetObjectColor() {
		return memory.read<struct FLinearColor>(m_addr + 40);
	}
	float GetRadius() {
		return memory.read<float>(m_addr + 56);
	}
	struct FName GetLogCategory() {
		return memory.read<struct FName>(m_addr + 60);
	}
	bool GetbAddToMessageLog() {
		return memory.read<bool>(m_addr + 68);
	}

private:
	std::uint64_t m_addr = 0;
};class FRedirectVislog
{
public:
	FRedirectVislog(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetSourceOwner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UObject(ptr_addr);
	}
	struct UObject GetDestinationOwner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 8);
		return struct UObject(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FBPOnTalkingBegin
{
public:
	FBPOnTalkingBegin(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAudioComponent GetAudioComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct UAudioComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FRegisterWithPlayerState
{
public:
	FRegisterWithPlayerState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APlayerState GetOwningState() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 0);
		return struct APlayerState(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetbUsePerSampleAtmosphericLightTransmittance
{
public:
	FSetbUsePerSampleAtmosphericLightTransmittance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetNewValue() {
		return memory.read<bool>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetPlanetRadius
{
public:
	FSetPlanetRadius(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetTracingMaxDistance
{
public:
	FSetTracingMaxDistance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetShadowTracingDistance
{
public:
	FSetShadowTracingDistance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetSkyLightCloudBottomOcclusion
{
public:
	FSetSkyLightCloudBottomOcclusion(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetStopTracingTransmittanceThreshold
{
public:
	FSetStopTracingTransmittanceThreshold(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetTracingStartMaxDistance
{
public:
	FSetTracingStartMaxDistance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetNewValue() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetStrength
{
public:
	FSetStrength(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetInNewStrength() {
		return memory.read<float>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};class FSetWindType
{
public:
	FSetWindType(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class EWindSourceType GetInNewType() {
		return memory.read<enum class EWindSourceType>(m_addr + 0);
	}

private:
	std::uint64_t m_addr = 0;
};