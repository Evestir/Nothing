#pragma once 
#include <KartDrift_Structs.h>
 
 
 
class UShadowAIComponent
{
public:
	UShadowAIComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UShadowQuestStateComponent GetStateComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 176);
		return struct UShadowQuestStateComponent(ptr_addr);
	}
	struct URaceProgressComponent GetPlayerProgress() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 184);
		return struct URaceProgressComponent(ptr_addr);
	}
	struct URaceProgressComponent GetShadowProgress() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 192);
		return struct URaceProgressComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class URiderNameChangeDialog
{
public:
	URiderNameChangeDialog(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AAccelSpecModifyZone
{
public:
	AAccelSpecModifyZone(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UCheckPointVisualizerComponent
{
public:
	UCheckPointVisualizerComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UForceFeedbackSubsystem
{
public:
	UForceFeedbackSubsystem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<struct FName, struct UForceFeedbackEffect> GetModifiedForceFeedbackTable() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct TMap<struct FName, struct UForceFeedbackEffect>(ptr_addr);
	}
	struct UKartForceFeedbackTable GetLoadedTable() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 128);
		return struct UKartForceFeedbackTable(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class AKdTriggerBox
{
public:
	AKdTriggerBox(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UFMODEvent GetSoundToPlay() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 552);
		return struct UFMODEvent(ptr_addr);
	}
	float GetSoundVolumeMultiplier() {
		return memory.read<float>(m_addr + 560);
	}
	float GetSoundPitchMultiplier() {
		return memory.read<float>(m_addr + 564);
	}
	float GetSoundStartTime() {
		return memory.read<float>(m_addr + 568);
	}

private:
	std::uint64_t m_addr = 0;
};


class AKdPlayerState
{
public:
	AKdPlayerState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbForceReadyClient() {
		return memory.read<bool>(m_addr + 800);
	}
	bool GetbReadiedClient() {
		return memory.read<bool>(m_addr + 801);
	}

private:
	std::uint64_t m_addr = 0;
};


class UShadowQuestInitializePauseMenu
{
public:
	UShadowQuestInitializePauseMenu(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftClassPtr<UObject> GetPauseMenuClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UShowResultWidget
{
public:
	UShowResultWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAccountSubsystem
{
public:
	UAccountSubsystem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UComboBoxStringExpandWithSearch
{
public:
	UComboBoxStringExpandWithSearch(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UComboBoxStringExpand GetComboBoxString() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UComboBoxStringExpand(ptr_addr);
	}
	struct UEditableTextBox GetEditableTextBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UEditableTextBox(ptr_addr);
	}
	struct UButton GetButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UButton(ptr_addr);
	}
	struct TArray<struct UTextBlock> GetTextBlockArray() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct TArray<struct UTextBlock>(ptr_addr);
	}
	bool GetbVisibleMetaTag() {
		return memory.read<bool>(m_addr + 680);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicenseTrackLineComponent
{
public:
	ULicenseTrackLineComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ULicenseTrackLineData GetData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 176);
		return struct ULicenseTrackLineData(ptr_addr);
	}
	struct AKdPawn GetPawn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 184);
		return struct AKdPawn(ptr_addr);
	}
	struct USplineComponent GetTrackLineSplineComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 192);
		return struct USplineComponent(ptr_addr);
	}
	struct UKartMovementComponent GetMovement() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 200);
		return struct UKartMovementComponent(ptr_addr);
	}
	struct UUserWidget GetWarningWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 208);
		return struct UUserWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class USpecModifier
{
public:
	USpecModifier(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPcMessage
{
public:
	UPcMessage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetMessage() {
		return memory.read<struct FString>(m_addr + 48);
	}
	struct TArray<struct FString> GetParams() {
		return memory.read<struct TArray<struct FString>>(m_addr + 64);
	}
	struct TMap<struct FString, struct FString> GetlocalizedMessage() {
		return memory.read<struct TMap<struct FString, struct FString>>(m_addr + 80);
	}

private:
	std::uint64_t m_addr = 0;
};


class AEnvironmentTriggerBox
{
public:
	AEnvironmentTriggerBox(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAudioComponent GetAudioComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 552);
		return struct UAudioComponent(ptr_addr);
	}
	struct USoundBase GetSoundAsset_Low() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 560);
		return struct USoundBase(ptr_addr);
	}
	struct USoundBase GetSoundAsset_Medium() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 568);
		return struct USoundBase(ptr_addr);
	}
	struct USoundBase GetSoundAsset_High() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 576);
		return struct USoundBase(ptr_addr);
	}
	struct UParticleSystem GetEffectAsset_Low() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 584);
		return struct UParticleSystem(ptr_addr);
	}
	struct UParticleSystem GetEffectAsset_Medium() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 592);
		return struct UParticleSystem(ptr_addr);
	}
	struct UParticleSystem GetEffectAsset_High() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 600);
		return struct UParticleSystem(ptr_addr);
	}
	float GetLowSpeed() {
		return memory.read<float>(m_addr + 608);
	}
	float GetHighSpeed() {
		return memory.read<float>(m_addr + 612);
	}
	float GetFactor() {
		return memory.read<float>(m_addr + 616);
	}
	enum class EEnvironmentDirectingEffectType GetDirectingEffectType() {
		return memory.read<enum class EEnvironmentDirectingEffectType>(m_addr + 620);
	}
	float GetActiveTimeSconds() {
		return memory.read<float>(m_addr + 624);
	}
	struct FName GetAttachSocketName() {
		return memory.read<struct FName>(m_addr + 628);
	}

private:
	std::uint64_t m_addr = 0;
};


class UEventPageWidget
{
public:
	UEventPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbSetDefaultFocus() {
		return memory.read<bool>(m_addr + 744);
	}
	enum class ESceneCaptureType GetLastSceneCaptureType() {
		return memory.read<enum class ESceneCaptureType>(m_addr + 745);
	}
	UUserWidget GetEventInfoClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 944);
		return UUserWidget(ptr_addr);
	}
	float GetEventTimerElapsedTime() {
		return memory.read<float>(m_addr + 952);
	}
	UUserWidget GetADTEventClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 960);
		return UUserWidget(ptr_addr);
	}
	int32_t GetADTStepIndex() {
		return memory.read<int32_t>(m_addr + 968);
	}
	int32_t GetADTRewardIndex() {
		return memory.read<int32_t>(m_addr + 972);
	}
	struct TArray<struct FString> GetADTRewardStocks() {
		return memory.read<struct TArray<struct FString>>(m_addr + 976);
	}
	int32_t GetCurStepCheckIndex() {
		return memory.read<int32_t>(m_addr + 992);
	}
	struct UADTEventObject GetLastADTEventObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1000);
		return struct UADTEventObject(ptr_addr);
	}
	float GetADTTimerElapsedTime() {
		return memory.read<float>(m_addr + 1024);
	}
	float GetCurStepADTTimerElapsedTime() {
		return memory.read<float>(m_addr + 1032);
	}
	float GetADTPeriodElapsedTime() {
		return memory.read<float>(m_addr + 1040);
	}
	UUserWidget GetVDTEventClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1048);
		return UUserWidget(ptr_addr);
	}
	float GetVDTTimerElapsedTime() {
		return memory.read<float>(m_addr + 1056);
	}
	float GetVDTPeriodElapsedTime() {
		return memory.read<float>(m_addr + 1064);
	}
	float GetVDTEventStartRemainTime() {
		return memory.read<float>(m_addr + 1072);
	}
	float GetVDTEventTimeCheckElapsedTime() {
		return memory.read<float>(m_addr + 1080);
	}
	bool GetbIsVDTEventClear() {
		return memory.read<bool>(m_addr + 1088);
	}
	bool GetbVDTEventInit() {
		return memory.read<bool>(m_addr + 1089);
	}
	enum class EVDTEventStatus GetVDTEventStatus() {
		return memory.read<enum class EVDTEventStatus>(m_addr + 1090);
	}
	UUserWidget GetAttendanceEventClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1096);
		return UUserWidget(ptr_addr);
	}
	struct UUserWidget GetCurrentAttendanceEventWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1104);
		return struct UUserWidget(ptr_addr);
	}
	struct TArray<struct UAttendanceEventObject> GetCurrentAttendanceEventObjects() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1160);
		return struct TArray<struct UAttendanceEventObject>(ptr_addr);
	}
	struct TWeakObjectPtr<UDialogTemplate> GetRewardDetailDialog() {
		return memory.read<struct TWeakObjectPtr<UDialogTemplate>>(m_addr + 1176);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULevelLoadPostFixSettings
{
public:
	ULevelLoadPostFixSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FPlatfromPostFix> GetPlatformPostfix() {
		return memory.read<struct TArray<struct FPlatfromPostFix>>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicenseContents
{
public:
	ULicenseContents(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULicenseRocketActorData
{
public:
	ULicenseRocketActorData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FLicenseRocketActorInfo> GetLicenseSpawnActorDataList() {
		return memory.read<struct TArray<struct FLicenseRocketActorInfo>>(m_addr + 64);
	}
	float GetOffset() {
		return memory.read<float>(m_addr + 80);
	}
	float GetScale() {
		return memory.read<float>(m_addr + 84);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqTimeAttackGetTracks
{
public:
	UPqTimeAttackGetTracks(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPqLiveryStickerUpdate
{
public:
	UPqLiveryStickerUpdate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKtLiverySticker GetliverySticker() {
		return memory.read<struct FKtLiverySticker>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAccountCustomProperty
{
public:
	UAccountCustomProperty(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPqTimeAttackStart
{
public:
	UPqTimeAttackStart(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GettrackId() {
		return memory.read<struct FString>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAccelBoostSpecModifier
{
public:
	UAccelBoostSpecModifier(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ABoostZone
{
public:
	ABoostZone(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetBoostPower() {
		return memory.read<float>(m_addr + 576);
	}
	float GetMultiplier() {
		return memory.read<float>(m_addr + 580);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAccountKartSkill
{
public:
	UAccountKartSkill(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UFuncLib_MajorGame
{
public:
	UFuncLib_MajorGame(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UC_ScenarioPageWidget
{
public:
	UC_ScenarioPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UScenarioKeyGuideWidget GetV_ScenarioKeyGuide() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1184);
		return struct UScenarioKeyGuideWidget(ptr_addr);
	}
	struct UScenarioKeyAccumWidget GetV_ScenarioKeyAccum() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1192);
		return struct UScenarioKeyAccumWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UBuildCaptureSaveGame
{
public:
	UBuildCaptureSaveGame(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FBuildCaptureLightInfo> GetBuildCaptureLightInfoList() {
		return memory.read<struct TArray<struct FBuildCaptureLightInfo>>(m_addr + 40);
	}
	struct TArray<struct FBuildCaptureCameraInfo> GetBuildCaptureCameraInfoList() {
		return memory.read<struct TArray<struct FBuildCaptureCameraInfo>>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqGetAccountPlatformDataKtByAccountId
{
public:
	UPqGetAccountPlatformDataKtByAccountId(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class EPlatformDataKtType GetType() {
		return memory.read<enum class EPlatformDataKtType>(m_addr + 56);
	}
	struct TArray<struct FString> GetaccountIdVector() {
		return memory.read<struct TArray<struct FString>>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};


class UStickerMarketPageWidget
{
public:
	UStickerMarketPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UStickerMarketLogicComponent GetStickerMarketLogicComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 744);
		return struct UStickerMarketLogicComponent(ptr_addr);
	}
	struct UDialogTemplate GetCurrentStickerPopup() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 776);
		return struct UDialogTemplate(ptr_addr);
	}
	struct FStickerStock GetCurrentDownloadStock() {
		return memory.read<struct FStickerStock>(m_addr + 808);
	}
	struct FLiveryStickerDesc GetUploadConfirm_StickerDesc() {
		return memory.read<struct FLiveryStickerDesc>(m_addr + 936);
	}
	struct FStickerStock GetCurrentSelectedStock() {
		return memory.read<struct FStickerStock>(m_addr + 1032);
	}
	struct UDialogTemplate GetCurrentStockPopup() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1168);
		return struct UDialogTemplate(ptr_addr);
	}
	struct UDialogTemplate GetCurrentDetailViewPopup() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1216);
		return struct UDialogTemplate(ptr_addr);
	}
	struct UDialogTemplate GetCurrentTagSelectPopup() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1248);
		return struct UDialogTemplate(ptr_addr);
	}
	struct UDialogTemplate GetCurrentStickerSelectDialog() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1320);
		return struct UDialogTemplate(ptr_addr);
	}
	struct UDialogTemplate GetCurrentTextInputPopup() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1376);
		return struct UDialogTemplate(ptr_addr);
	}
	struct UStickerMarketTextChecker GetTextInput_TextChecker() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1504);
		return struct UStickerMarketTextChecker(ptr_addr);
	}
	struct UDialogTemplate GetCurrentUploadPopup() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1512);
		return struct UDialogTemplate(ptr_addr);
	}
	struct TArray<struct UButtonTemplate> GetCurrentUploadPopupTagBtns() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1520);
		return struct TArray<struct UButtonTemplate>(ptr_addr);
	}
	struct FLiveryStickerDesc GetCurrentUploadStickerDesc() {
		return memory.read<struct FLiveryStickerDesc>(m_addr + 1552);
	}
	struct UDialogTemplate GetCurrentReportDialog() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1672);
		return struct UDialogTemplate(ptr_addr);
	}
	struct FStickerStock GetCurrentReportStock() {
		return memory.read<struct FStickerStock>(m_addr + 1680);
	}
	struct UDialogTemplate GetCurrentSearchPopup() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1816);
		return struct UDialogTemplate(ptr_addr);
	}
	struct UPageListTemplate GetCurrentPageList() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1960);
		return struct UPageListTemplate(ptr_addr);
	}
	struct TArray<struct FStickerMarketHotItems> GetHotItems() {
		return memory.read<struct TArray<struct FStickerMarketHotItems>>(m_addr + 1976);
	}
	struct TArray<struct UWidget> GetHotItemSlots() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1992);
		return struct TArray<struct UWidget>(ptr_addr);
	}
	struct ULiveryMarketSearchStream GetCurrentSearch() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2144);
		return struct ULiveryMarketSearchStream(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAnimationPresetWidget
{
public:
	UAnimationPresetWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FAnimationPresetDef> GetOnEnabled() {
		return memory.read<struct TArray<struct FAnimationPresetDef>>(m_addr + 616);
	}
	struct TArray<struct FAnimationPresetDef> GetOnDisabled() {
		return memory.read<struct TArray<struct FAnimationPresetDef>>(m_addr + 632);
	}
	struct TArray<struct FAnimationPresetDef> GetOnFocus() {
		return memory.read<struct TArray<struct FAnimationPresetDef>>(m_addr + 648);
	}
	struct TArray<struct FAnimationPresetDef> GetOnUnfocus() {
		return memory.read<struct TArray<struct FAnimationPresetDef>>(m_addr + 664);
	}
	struct TArray<struct FAnimationPresetDef> GetOnChecked() {
		return memory.read<struct TArray<struct FAnimationPresetDef>>(m_addr + 680);
	}
	struct TArray<struct FAnimationPresetDef> GetOnUnchecked() {
		return memory.read<struct TArray<struct FAnimationPresetDef>>(m_addr + 696);
	}
	struct TArray<struct FAnimationPresetDef> GetOnHovered() {
		return memory.read<struct TArray<struct FAnimationPresetDef>>(m_addr + 712);
	}
	struct TArray<struct FAnimationPresetDef> GetOnUnHovered() {
		return memory.read<struct TArray<struct FAnimationPresetDef>>(m_addr + 728);
	}
	struct TArray<struct FAnimationPresetDef> GetOnPressed() {
		return memory.read<struct TArray<struct FAnimationPresetDef>>(m_addr + 744);
	}
	struct TArray<struct FAnimationPresetDef> GetOnUnPressed() {
		return memory.read<struct TArray<struct FAnimationPresetDef>>(m_addr + 760);
	}

private:
	std::uint64_t m_addr = 0;
};


class ALicenseNextChapterZone
{
public:
	ALicenseNextChapterZone(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UParticleSystemComponent GetNextPointParticle() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 544);
		return struct UParticleSystemComponent(ptr_addr);
	}
	struct USphereComponent GetCollisionComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 552);
		return struct USphereComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTierResultWidget
{
public:
	UTierResultWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetGppCountingDuration() {
		return memory.read<float>(m_addr + 608);
	}
	float GetTierChangedMinWaiting() {
		return memory.read<float>(m_addr + 612);
	}
	struct UWidgetAnimation GetTier_In() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation GetTier_Out() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation GetTier_ScoreUP() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation GetTier_ScoreDOWN() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation GetTier_TierUP_First() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation GetTier_TierUP() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation GetTier_TierDOWN() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UGrandPrixTierIconWidget GetV_PrevTierIcon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UGrandPrixTierIconWidget(ptr_addr);
	}
	struct UGrandPrixTierIconWidget GetV_NextTierIcon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UGrandPrixTierIconWidget(ptr_addr);
	}
	struct UWidgetSwitcher GetV_WidgetSwitcherUpDown() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UKdTextBlock GetV_PrevTitleText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UKdTextBlock GetV_NextTitleText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UImage GetV_ProgressBG() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct UImage(ptr_addr);
	}
	struct UImage GetV_ProgressCurrent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return struct UImage(ptr_addr);
	}
	struct UKdTextBlock GetV_CurrentGpp() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 728);
		return struct UKdTextBlock(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class AScenarioMesh
{
public:
	AScenarioMesh(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FScenarioMaterialInstanceInterpolation> GetInterpolationContainer() {
		return memory.read<struct TArray<struct FScenarioMaterialInstanceInterpolation>>(m_addr + 624);
	}
	struct TArray<struct UMaterialInstanceDynamic> GetDynamicMaterialInstanceContainer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct TArray<struct UMaterialInstanceDynamic>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAccountAchievement
{
public:
	UAccountAchievement(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPcSeasonUpdated
{
public:
	UPcSeasonUpdated(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKtSeasonInfo GetseasonInfo() {
		return memory.read<struct FKtSeasonInfo>(m_addr + 48);
	}
	struct FKtSeasonStaticInfo GetseasonStaticInfo() {
		return memory.read<struct FKtSeasonStaticInfo>(m_addr + 80);
	}
	enum class ESeasonUpdatedType GetseasonUpdatedType() {
		return memory.read<enum class ESeasonUpdatedType>(m_addr + 136);
	}
	struct TArray<struct FKtItem> GetinventoryDataSeason() {
		return memory.read<struct TArray<struct FKtItem>>(m_addr + 144);
	}
	struct FKtQuestSetData GetquestSetDataDaily() {
		return memory.read<struct FKtQuestSetData>(m_addr + 160);
	}
	struct FKtQuestSetData GetquestSetDataWeekly() {
		return memory.read<struct FKtQuestSetData>(m_addr + 240);
	}

private:
	std::uint64_t m_addr = 0;
};


class UShowAssistListWidget_TimeAttack
{
public:
	UShowAssistListWidget_TimeAttack(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPqAcceptCustomGameInvitation
{
public:
	UPqAcceptCustomGameInvitation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetSessionId() {
		return memory.read<struct FString>(m_addr + 56);
	}
	enum class ECustomGameInvitationResult GetResult() {
		return memory.read<enum class ECustomGameInvitationResult>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKeyTextureMap
{
public:
	UKeyTextureMap(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<struct FKey, struct FKeyTexture> GetKeyTextureMap() {
		return memory.read<struct TMap<struct FKey, struct FKeyTexture>>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPageListTemplate
{
public:
	UPageListTemplate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UUserWidget GetEntryWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return UUserWidget(ptr_addr);
	}
	struct UPanelWidget GetV_ItemWidgetPanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UPanelWidget(ptr_addr);
	}
	struct UPageButtonTemplate GetV_PageButtonTemplate() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UPageButtonTemplate(ptr_addr);
	}
	int32_t GetRowCount() {
		return memory.read<int32_t>(m_addr + 640);
	}
	int32_t GetColumnCount() {
		return memory.read<int32_t>(m_addr + 644);
	}
	bool GetbIsEmptyObjectHide() {
		return memory.read<bool>(m_addr + 648);
	}
	bool GetbIsReFocusEnable() {
		return memory.read<bool>(m_addr + 649);
	}
	struct TArray<struct UUserWidget> GetListItemWidgets() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct TArray<struct UUserWidget>(ptr_addr);
	}
	struct TArray<struct UObject> GetListItems() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct TArray<struct UObject>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAccountAsyncRequest
{
public:
	UAccountAsyncRequest(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<struct FString, struct UAccountAsyncRequestItem> GetRequests() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct TMap<struct FString, struct UAccountAsyncRequestItem>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAccountAsyncRequestItem
{
public:
	UAccountAsyncRequestItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UHeadlightComponent
{
public:
	UHeadlightComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UIceReaction
{
public:
	UIceReaction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAccountNews
{
public:
	UAccountNews(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UBaseConnectRuleComponent
{
public:
	UBaseConnectRuleComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAccountBot
{
public:
	UAccountBot(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ASpeedSinglePawn
{
public:
	ASpeedSinglePawn(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class URaceRankWidget
{
public:
	URaceRankWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct URaceRankRowWidget> GetRankGroupPlayers() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct TArray<struct URaceRankRowWidget>(ptr_addr);
	}
	struct UTextBlock GetPlayerRankText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock GetPlayerRankTextBefore() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock GetPlayerCountText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UTextBlock(ptr_addr);
	}
	struct UWidgetAnimation GetRankSlideWinning() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation GetRankSlideLosing() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UVerticalBox GetV_RankBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UVerticalBox(ptr_addr);
	}
	struct TArray<struct AKdPawn> GetLatestRankPawnList() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct TArray<struct AKdPawn>(ptr_addr);
	}
	struct TArray<struct AKdPawn> GetLastRankPawnList() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct TArray<struct AKdPawn>(ptr_addr);
	}
	struct TMap<struct AKdPawn, struct FRankPlayerInfo> GetRankPlayerInfoMap() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct TMap<struct AKdPawn, struct FRankPlayerInfo>(ptr_addr);
	}
	struct USpectatorComponent GetSpectatorComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 816);
		return struct USpectatorComponent(ptr_addr);
	}
	struct URaceRankComponent GetRaceRankComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 832);
		return struct URaceRankComponent(ptr_addr);
	}
	struct UTeamColorDataAsset GetTeamColorDataAsset() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 896);
		return struct UTeamColorDataAsset(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UM_EmoticonPageWidget
{
public:
	UM_EmoticonPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrKartUpgrade
{
public:
	UPrKartUpgrade(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbSuccess() {
		return memory.read<bool>(m_addr + 72);
	}
	enum class EKtItemGrade GetKartGrade() {
		return memory.read<enum class EKtItemGrade>(m_addr + 73);
	}

private:
	std::uint64_t m_addr = 0;
};


class ADedicatedLobbyGameMode
{
public:
	ADedicatedLobbyGameMode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UHttpServerRequester GetSessionApiServer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return struct UHttpServerRequester(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicenseIceBallQuestWidget
{
public:
	ULicenseIceBallQuestWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ULicenseIceBallQuestWidgetInst GetV_Quest0() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct ULicenseIceBallQuestWidgetInst(ptr_addr);
	}
	struct ULicenseIceBallQuestWidgetInst GetV_Quest1() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct ULicenseIceBallQuestWidgetInst(ptr_addr);
	}
	struct ULicenseIceBallQuestWidgetInst GetV_Quest2() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct ULicenseIceBallQuestWidgetInst(ptr_addr);
	}
	struct ULicenseIceBallQuestWidgetInst GetV_Quest3() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct ULicenseIceBallQuestWidgetInst(ptr_addr);
	}
	struct UWidgetAnimation GetAnim_Show() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UWidgetAnimation(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKdButtonImage
{
public:
	UKdButtonImage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FButtonStyleTag GetButtonColorTag() {
		return memory.read<struct FButtonStyleTag>(m_addr + 624);
	}
	struct FSlateBrush GetFocusedBrush() {
		return memory.read<struct FSlateBrush>(m_addr + 680);
	}
	struct FSlateBrush GetCheckedBrush() {
		return memory.read<struct FSlateBrush>(m_addr + 816);
	}
	struct FSlateBrush GetPressedBrush() {
		return memory.read<struct FSlateBrush>(m_addr + 952);
	}
	struct FSlateBrush GetHoveredBrush() {
		return memory.read<struct FSlateBrush>(m_addr + 1088);
	}
	struct FSlateBrush GetNormalBrush() {
		return memory.read<struct FSlateBrush>(m_addr + 1224);
	}
	struct FSlateBrush GetDisabledBrush() {
		return memory.read<struct FSlateBrush>(m_addr + 1360);
	}
	bool GetbForCheckBox() {
		return memory.read<bool>(m_addr + 1496);
	}
	bool GetbLongPress() {
		return memory.read<bool>(m_addr + 1497);
	}
	float GetLongPressTime() {
		return memory.read<float>(m_addr + 1500);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAccountLootBox
{
public:
	UAccountLootBox(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrAcquireKDST
{
public:
	UPrAcquireKDST(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetToken() {
		return memory.read<struct FString>(m_addr + 72);
	}
	struct FDateTime Getexpire() {
		return memory.read<struct FDateTime>(m_addr + 88);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicenseAIMissionComponent
{
public:
	ULicenseAIMissionComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ULicenseAIMissionActorData GetData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 200);
		return struct ULicenseAIMissionActorData(ptr_addr);
	}
	struct UShadowPlaySetupComponent GetShadowPlaySetupComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 208);
		return struct UShadowPlaySetupComponent(ptr_addr);
	}
	float GetDraftLastTime() {
		return memory.read<float>(m_addr + 216);
	}
	bool GetScoreGate() {
		return memory.read<bool>(m_addr + 220);
	}
	struct TArray<struct AActor> GetSpawnedActors() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 224);
		return struct TArray<struct AActor>(ptr_addr);
	}
	struct UCurveFloat GetSpawnCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 240);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat GetDestroyCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 248);
		return struct UCurveFloat(ptr_addr);
	}
	struct AActor GetPawn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 256);
		return struct AActor(ptr_addr);
	}
	struct TSoftObjectPtr<UCurveFloat> GetCurveFloat() {
		return memory.read<struct TSoftObjectPtr<UCurveFloat>>(m_addr + 344);
	}
	struct TSoftObjectPtr<UCurveFloat> GetCurveFloat2() {
		return memory.read<struct TSoftObjectPtr<UCurveFloat>>(m_addr + 384);
	}
	struct TSoftObjectPtr<UStaticMesh> GetAIKartMesh() {
		return memory.read<struct TSoftObjectPtr<UStaticMesh>>(m_addr + 424);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULqCheckStickerStockName
{
public:
	ULqCheckStickerStockName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetName() {
		return memory.read<struct FString>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULoadingProfileWidget
{
public:
	ULoadingProfileWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UUserWidget GetUserEmblem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UUserWidget(ptr_addr);
	}
	struct UPlatformIconWidget GetV_Image_Platform() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UPlatformIconWidget(ptr_addr);
	}
	struct UImage GetImage_Promotion() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UImage(ptr_addr);
	}
	struct UKdButtonImage GetImage_HighLight() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UKdButtonImage(ptr_addr);
	}
	struct UWidgetSwitcher GetWidgetSwitcher_Slot() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UTextBlock GetTextBlock_UserName() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock GetTextBlock_KartName() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock GetTextBlock_KartLevel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UTextBlock(ptr_addr);
	}
	struct UKdImage GetV_KartGradeBg() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UKdImage(ptr_addr);
	}
	struct UKdTextBlock GetV_KartGradeText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UImage GetV_BeginnerCareIcon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UImage(ptr_addr);
	}
	struct UImage GetV_HighlightPoint() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UImage(ptr_addr);
	}
	struct UProgressBar GetProgressBar_Loading() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UProgressBar(ptr_addr);
	}
	enum class ERaceTeamType GetTeamType() {
		return memory.read<enum class ERaceTeamType>(m_addr + 712);
	}
	struct TMap<enum class ERaceTeamType, struct FLinearColor> GetTeamColorContainer() {
		return memory.read<struct TMap<enum class ERaceTeamType, struct FLinearColor>>(m_addr + 720);
	}
	struct TMap<enum class ERaceTeamType, struct FLinearColor> GetTeamHighlightPointColorContainer() {
		return memory.read<struct TMap<enum class ERaceTeamType, struct FLinearColor>>(m_addr + 800);
	}
	struct TMap<enum class ERaceTeamType, struct UObject> GetTeamResourceContainer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 880);
		return struct TMap<enum class ERaceTeamType, struct UObject>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrLiveryDelete
{
public:
	UPrLiveryDelete(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetliveryId() {
		return memory.read<struct FString>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAccountFuncLib
{
public:
	UAccountFuncLib(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FSoftClassPath GetImplClassName() {
		return memory.read<struct FSoftClassPath>(m_addr + 48);
	}
	struct UAccountFuncLibImpl GetImpl() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return struct UAccountFuncLibImpl(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UItemFilterCollection
{
public:
	UItemFilterCollection(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct TScriptInterface<IKdItemFilter>> GetFilters() {
		return memory.read<struct TArray<struct TScriptInterface<IKdItemFilter>>>(m_addr + 40);
	}
	enum class EItemType GetLastBlockItemId() {
		return memory.read<enum class EItemType>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTransition_LicenseJumpEnd
{
public:
	UTransition_LicenseJumpEnd(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ALicenseJumpPhysicsZone GetZone() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 80);
		return struct ALicenseJumpPhysicsZone(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UBelongingDataAssetEmblem
{
public:
	UBelongingDataAssetEmblem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAccountCustomGame
{
public:
	UAccountCustomGame(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FCustomGameInfo GetCustomGameInfo() {
		return memory.read<struct FCustomGameInfo>(m_addr + 72);
	}
	struct FCustomGameInviteData GetLastAskCustomInviteData() {
		return memory.read<struct FCustomGameInviteData>(m_addr + 504);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAccountShopXboxLive
{
public:
	UAccountShopXboxLive(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPqReportLiverySticker
{
public:
	UPqReportLiverySticker(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString Getnpsn() {
		return memory.read<struct FString>(m_addr + 56);
	}
	struct FString GetriderName() {
		return memory.read<struct FString>(m_addr + 72);
	}
	struct FString GetliveryStickerId() {
		return memory.read<struct FString>(m_addr + 88);
	}
	struct FString GetliveryStickerLabel() {
		return memory.read<struct FString>(m_addr + 104);
	}
	enum class EKtLiveryState GetState() {
		return memory.read<enum class EKtLiveryState>(m_addr + 120);
	}

private:
	std::uint64_t m_addr = 0;
};


class APodiumSkydome
{
public:
	APodiumSkydome(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USpotLightComponent GetFillSpotLightComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 544);
		return struct USpotLightComponent(ptr_addr);
	}
	struct USpotLightComponent GetKeySpotLightComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 552);
		return struct USpotLightComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMailRequest
{
public:
	UMailRequest(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULrGetMyStickerDownloadList
{
public:
	ULrGetMyStickerDownloadList(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<int64_t> GetstickerStockIds() {
		return memory.read<struct TArray<int64_t>>(m_addr + 72);
	}
	int32_t GetmaxStickerCount() {
		return memory.read<int32_t>(m_addr + 88);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPcMailList
{
public:
	UPcMailList(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetlistName() {
		return memory.read<struct FString>(m_addr + 48);
	}
	struct TArray<struct FKtMail> Getmails() {
		return memory.read<struct TArray<struct FKtMail>>(m_addr + 64);
	}
	bool Getcontinued() {
		return memory.read<bool>(m_addr + 80);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAccountEmoticon
{
public:
	UAccountEmoticon(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPqFindRider
{
public:
	UPqFindRider(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetName() {
		return memory.read<struct FString>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicenseRocketQuestWidget
{
public:
	ULicenseRocketQuestWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FLinearColor> GetColorSolidList() {
		return memory.read<struct TArray<struct FLinearColor>>(m_addr + 632);
	}
	struct TArray<struct FLinearColor> GetColorBGList() {
		return memory.read<struct TArray<struct FLinearColor>>(m_addr + 648);
	}
	struct ULicenseRocketQuestWidgetInst GetV_Quest0() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct ULicenseRocketQuestWidgetInst(ptr_addr);
	}
	struct ULicenseRocketQuestWidgetInst GetV_Quest1() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct ULicenseRocketQuestWidgetInst(ptr_addr);
	}
	struct ULicenseRocketQuestWidgetInst GetV_Quest2() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct ULicenseRocketQuestWidgetInst(ptr_addr);
	}
	struct UWidgetAnimation GetAnim_ShowMissileTargetOrder() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation GetAnim_Success() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation GetAnim_Fail() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UWidgetAnimation(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqCommandSetLiveryReportExpire
{
public:
	UPqCommandSetLiveryReportExpire(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UScenarioWidgetBase
{
public:
	UScenarioWidgetBase(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMulticastInlineDelegate GetOnFinishedDelegate() {
		return memory.read<struct FMulticastInlineDelegate>(m_addr + 608);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPacketSaveGame
{
public:
	UPacketSaveGame(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FKartRepMovement> GetRepMovementList() {
		return memory.read<struct TArray<struct FKartRepMovement>>(m_addr + 40);
	}
	struct TArray<struct FReplicatedKartState> GetKartStateList() {
		return memory.read<struct TArray<struct FReplicatedKartState>>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAccountEmergencyEvent
{
public:
	UAccountEmergencyEvent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class URaceHudWidget
{
public:
	URaceHudWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct URaceCounterWidget GetRaceCounterWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct URaceCounterWidget(ptr_addr);
	}
	struct UWidgetSwitcher GetV_WS_Sound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UWidgetSwitcher GetV_WS_Mic() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UButtonTemplate GetV_SoundButton_Off() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UButtonTemplate(ptr_addr);
	}
	struct UButtonTemplate GetV_SoundButton_On() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UButtonTemplate(ptr_addr);
	}
	struct UButtonTemplate GetV_MICButton_Off() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UButtonTemplate(ptr_addr);
	}
	struct UButtonTemplate GetV_MICButton_On() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UButtonTemplate(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqCancelMatch
{
public:
	UPqCancelMatch(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULoginLogicComponent
{
public:
	ULoginLogicComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbIsEntryTutorial() {
		return memory.read<bool>(m_addr + 224);
	}
	bool GetbIsCinematicSeasonMovie() {
		return memory.read<bool>(m_addr + 225);
	}
	bool GetbIsCinematicMainMovie() {
		return memory.read<bool>(m_addr + 226);
	}

private:
	std::uint64_t m_addr = 0;
};


class UItemTacticalWidget
{
public:
	UItemTacticalWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UItemTacticalRowWidget GetRightRowWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return UItemTacticalRowWidget(ptr_addr);
	}
	UItemTacticalRowWidget GetLeftRowWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return UItemTacticalRowWidget(ptr_addr);
	}
	struct UVerticalBox GetLeftVertBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UVerticalBox(ptr_addr);
	}
	struct UVerticalBox GetRightVertBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UVerticalBox(ptr_addr);
	}
	struct TArray<struct FHitWidgetRowInfo> GetLeftInfoList() {
		return memory.read<struct TArray<struct FHitWidgetRowInfo>>(m_addr + 640);
	}
	struct TArray<struct FHitWidgetRowInfo> GetRightInfoList() {
		return memory.read<struct TArray<struct FHitWidgetRowInfo>>(m_addr + 656);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAccountVoiceChat
{
public:
	UAccountVoiceChat(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAccountEvent
{
public:
	UAccountEvent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPqGetRecommandFriends
{
public:
	UPqGetRecommandFriends(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UInGameWidgetLogicComponent
{
public:
	UInGameWidgetLogicComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class EInputDeviceType GetCurrentInputDevice() {
		return memory.read<enum class EInputDeviceType>(m_addr + 241);
	}

private:
	std::uint64_t m_addr = 0;
};


class UFuncLib_General
{
public:
	UFuncLib_General(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAccountAttendanceEvent
{
public:
	UAccountAttendanceEvent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<struct FString, struct FKtAttendanceEventDef> Getevents() {
		return memory.read<struct TMap<struct FString, struct FKtAttendanceEventDef>>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAccountShopMobile
{
public:
	UAccountShopMobile(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPr2ndPwd
{
public:
	UPr2ndPwd(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetfailCount() {
		return memory.read<int32_t>(m_addr + 72);
	}
	int32_t GetmaxFailCount() {
		return memory.read<int32_t>(m_addr + 76);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMediaWallGameInfoWidget
{
public:
	UMediaWallGameInfoWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTextBlock GetTrackName() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock GetModeName() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UTextBlock(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqPreAuth
{
public:
	UPqPreAuth(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetKey() {
		return memory.read<struct FString>(m_addr + 56);
	}
	struct FString GetclientVer() {
		return memory.read<struct FString>(m_addr + 72);
	}
	enum class EKtAccountPlatform GetAccountPlatform() {
		return memory.read<enum class EKtAccountPlatform>(m_addr + 88);
	}
	enum class EKtPlatform Getplatform() {
		return memory.read<enum class EKtPlatform>(m_addr + 89);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrRegisterRecentActivity
{
public:
	UPrRegisterRecentActivity(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULicenseMessageWidget
{
public:
	ULicenseMessageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UWidgetAnimation GetNice_Anim() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation GetAnim_addscore() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetSwitcher GetWs_Ment() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UKdTextBlock GetV_Text_Message() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UWidgetSwitcher GetWS_MentType() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UWidgetSwitcher GetV_Score_Switcher() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UKdTextBlock GetV_Add_Score_Text() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UKdTextBlock(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAccountLoginEvent
{
public:
	UAccountLoginEvent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPqCommandEtc
{
public:
	UPqCommandEtc(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class USignificantComponent
{
public:
	USignificantComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct UActorComponent> GetManagedComponents() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 184);
		return struct TArray<struct UActorComponent>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class URaceRankComponent
{
public:
	URaceRankComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct AKdPawn> GetRaceGameStateRankList() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 264);
		return struct TArray<struct AKdPawn>(ptr_addr);
	}
	struct TArray<struct AKdPawn> GetCachedPawnList() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 280);
		return struct TArray<struct AKdPawn>(ptr_addr);
	}
	float GetMileage1st() {
		return memory.read<float>(m_addr + 336);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqSendReport
{
public:
	UPqSendReport(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetsuspectId() {
		return memory.read<struct FString>(m_addr + 56);
	}
	struct FString GetsuspectSubId() {
		return memory.read<struct FString>(m_addr + 72);
	}
	struct FString GetsuspectName() {
		return memory.read<struct FString>(m_addr + 88);
	}
	enum class EKtAccountPlatform GetsuspectPlatform() {
		return memory.read<enum class EKtAccountPlatform>(m_addr + 104);
	}
	enum class EKtReportCategory GetCategory() {
		return memory.read<enum class EKtReportCategory>(m_addr + 105);
	}
	struct FString Getsubcategory() {
		return memory.read<struct FString>(m_addr + 112);
	}
	struct FString GetreportRoute() {
		return memory.read<struct FString>(m_addr + 128);
	}
	struct FString GetgameId() {
		return memory.read<struct FString>(m_addr + 144);
	}
	struct FString GetreplayPath() {
		return memory.read<struct FString>(m_addr + 160);
	}
	struct FString GetMessage() {
		return memory.read<struct FString>(m_addr + 176);
	}
	struct FString GetdetailInfo() {
		return memory.read<struct FString>(m_addr + 192);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPhysXKartAnimInstance
{
public:
	UPhysXKartAnimInstance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbOldSteer() {
		return memory.read<bool>(m_addr + 712);
	}
	float GetMAX_SUSPENSION_TRAVEL() {
		return memory.read<float>(m_addr + 716);
	}
	float GetMAX_SUSPENSION_TRAVEL_LOWER() {
		return memory.read<float>(m_addr + 720);
	}
	bool GetHasFrontSteering() {
		return memory.read<bool>(m_addr + 724);
	}
	float GetSteerRotation() {
		return memory.read<float>(m_addr + 728);
	}
	struct FRotator GetFrontRotation() {
		return memory.read<struct FRotator>(m_addr + 736);
	}
	struct FRotator GetBackRotation() {
		return memory.read<struct FRotator>(m_addr + 748);
	}
	float GetKartSpeed() {
		return memory.read<float>(m_addr + 760);
	}
	float GetSpeedRate() {
		return memory.read<float>(m_addr + 764);
	}
	struct TArray<float> GetSuspensionZ() {
		return memory.read<struct TArray<float>>(m_addr + 768);
	}
	float GetPhysicsWithBlend() {
		return memory.read<float>(m_addr + 784);
	}
	float GetWheelBlendWeights() {
		return memory.read<float>(m_addr + 788);
	}
	struct TArray<float> GetLayerBlend() {
		return memory.read<struct TArray<float>>(m_addr + 792);
	}
	bool GetbTransforming() {
		return memory.read<bool>(m_addr + 2756);
	}
	bool GetbTransformed() {
		return memory.read<bool>(m_addr + 2757);
	}
	bool GetbUntransforming() {
		return memory.read<bool>(m_addr + 2758);
	}
	bool GetbUntransformed() {
		return memory.read<bool>(m_addr + 2759);
	}
	bool GetbPick() {
		return memory.read<bool>(m_addr + 2760);
	}
	bool GetbLastPick() {
		return memory.read<bool>(m_addr + 2761);
	}
	bool GetbLastTransforming() {
		return memory.read<bool>(m_addr + 2762);
	}
	bool GetbHasIdleAnim() {
		return memory.read<bool>(m_addr + 2763);
	}
	bool GetbHasTransformAnim() {
		return memory.read<bool>(m_addr + 2764);
	}
	bool GetbHasTransformedAnim() {
		return memory.read<bool>(m_addr + 2765);
	}
	struct UAnimSequenceBase GetIdleAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2856);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAnimSequenceBase GetAnimTransform() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2864);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAnimSequenceBase GetAnimTransformed() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2872);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAnimMontage GetSufferMontage_Rocket() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2880);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetSufferMontage_Water() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2888);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetSufferMontage_WaterEnd() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2896);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetSufferMontage_Ice() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2904);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetSufferMontage_IceEnd() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2912);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetSufferMontage_Banana() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2920);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimSequenceBase GetPickAnim() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2928);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAnimMontage GetMontage_EngineStarting() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2936);
		return struct UAnimMontage(ptr_addr);
	}
	float GetTransformAnimRate() {
		return memory.read<float>(m_addr + 2944);
	}
	float GetUntransLoopRate() {
		return memory.read<float>(m_addr + 2948);
	}
	float GetTransLoopRate() {
		return memory.read<float>(m_addr + 2952);
	}
	float GetIdleAnimRate() {
		return memory.read<float>(m_addr + 2956);
	}
	float GetDefaultIdleAnimRate() {
		return memory.read<float>(m_addr + 2960);
	}
	float GetDefaultTransformLoopAnimRate() {
		return memory.read<float>(m_addr + 2964);
	}
	bool GetbIdleRateBySpeed() {
		return memory.read<bool>(m_addr + 2968);
	}
	bool GetbTransformLoopRateBySpeed() {
		return memory.read<bool>(m_addr + 2969);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqCustomGameSetPlatformSession
{
public:
	UPqCustomGameSetPlatformSession(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetsessionUri() {
		return memory.read<struct FString>(m_addr + 56);
	}
	enum class EKtAccountPlatform Getplatform() {
		return memory.read<enum class EKtAccountPlatform>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UModePawn
{
public:
	UModePawn(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UOnFailLicenseRule
{
public:
	UOnFailLicenseRule(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAccountVDTEvent
{
public:
	UAccountVDTEvent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<struct FString, struct FVDTEventDef> Getevents() {
		return memory.read<struct TMap<struct FString, struct FVDTEventDef>>(m_addr + 48);
	}
	struct TMap<struct FString, struct FVDTEventData> GetVDTEventDataMap() {
		return memory.read<struct TMap<struct FString, struct FVDTEventData>>(m_addr + 128);
	}
	struct TMap<struct FString, struct FVDTEventData> GetPreVDTEventDataMap() {
		return memory.read<struct TMap<struct FString, struct FVDTEventData>>(m_addr + 208);
	}
	struct FDateTime GetRecentUpdateDateTime() {
		return memory.read<struct FDateTime>(m_addr + 288);
	}
	struct FVDTEventData GetUserVDTEventData() {
		return memory.read<struct FVDTEventData>(m_addr + 296);
	}

private:
	std::uint64_t m_addr = 0;
};


class UListItemObject
{
public:
	UListItemObject(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPqEquipKartSkill
{
public:
	UPqEquipKartSkill(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetskillNodeId() {
		return memory.read<struct FString>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAccountADTEvent
{
public:
	UAccountADTEvent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<struct FString, struct FADTEventDef> Getevents() {
		return memory.read<struct TMap<struct FString, struct FADTEventDef>>(m_addr + 48);
	}
	struct TMap<struct FString, struct FADTEventData> GetADTEventDataMap() {
		return memory.read<struct TMap<struct FString, struct FADTEventData>>(m_addr + 168);
	}
	struct FDateTime GetRecentUpdateDateTime() {
		return memory.read<struct FDateTime>(m_addr + 248);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAccountFuncLibImpl
{
public:
	UAccountFuncLibImpl(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UGameInstance GetGameInstance() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct UGameInstance(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKtSessionHackChecked
{
public:
	UKtSessionHackChecked(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetplayerId() {
		return memory.read<struct FString>(m_addr + 48);
	}
	struct FString GetriderName() {
		return memory.read<struct FString>(m_addr + 64);
	}
	enum class ERaceMode GetraceMode() {
		return memory.read<enum class ERaceMode>(m_addr + 80);
	}
	struct FString GettrackId() {
		return memory.read<struct FString>(m_addr + 88);
	}
	struct FString GetgameId() {
		return memory.read<struct FString>(m_addr + 104);
	}
	int32_t GetblockedLap() {
		return memory.read<int32_t>(m_addr + 120);
	}
	int32_t GetblockedLapTime() {
		return memory.read<int32_t>(m_addr + 124);
	}
	int32_t GetTotalLapTime() {
		return memory.read<int32_t>(m_addr + 128);
	}
	int32_t GethackCheckLapTime() {
		return memory.read<int32_t>(m_addr + 132);
	}
	int32_t GethackCheckTotalTime() {
		return memory.read<int32_t>(m_addr + 136);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqLogin
{
public:
	UPqLogin(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPqShopPurchase
{
public:
	UPqShopPurchase(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetCategory() {
		return memory.read<struct FString>(m_addr + 56);
	}
	struct FString GetstockId() {
		return memory.read<struct FString>(m_addr + 72);
	}
	struct FString Getcurrency() {
		return memory.read<struct FString>(m_addr + 88);
	}
	int32_t GetCount() {
		return memory.read<int32_t>(m_addr + 104);
	}

private:
	std::uint64_t m_addr = 0;
};


class UGameDataCache
{
public:
	UGameDataCache(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAccountGameData GetAccountGameData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct UAccountGameData(ptr_addr);
	}
	struct UObject GetData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 80);
		return struct UObject(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqCommandBroadcast
{
public:
	UPqCommandBroadcast(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UTimeItemSpawn_WaterBomb
{
public:
	UTimeItemSpawn_WaterBomb(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FTimeItemSpawnStruct> GetSpawnList() {
		return memory.read<struct TArray<struct FTimeItemSpawnStruct>>(m_addr + 112);
	}
	int32_t GetIndex() {
		return memory.read<int32_t>(m_addr + 160);
	}
	struct AActor GetDecalActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 168);
		return struct AActor(ptr_addr);
	}
	struct TSoftObjectPtr<UStaticMesh> GetStartDecalMesh() {
		return memory.read<struct TSoftObjectPtr<UStaticMesh>>(m_addr + 176);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAIPathDataAsset
{
public:
	UAIPathDataAsset(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FAIPathDataList GetdataList() {
		return memory.read<struct FAIPathDataList>(m_addr + 48);
	}
	int32_t GetSelectedIndex() {
		return memory.read<int32_t>(m_addr + 64);
	}
	int32_t GetTargetIndex() {
		return memory.read<int32_t>(m_addr + 68);
	}
	bool GetIsClosedLoop() {
		return memory.read<bool>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicenseCoinComponent
{
public:
	ULicenseCoinComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ULicenseCoinData GetData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 192);
		return struct ULicenseCoinData(ptr_addr);
	}
	struct TArray<struct ALicenseCoin> GetCoinList() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 200);
		return struct TArray<struct ALicenseCoin>(ptr_addr);
	}
	struct ULicenseScoreComponent GetScoreComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 216);
		return struct ULicenseScoreComponent(ptr_addr);
	}
	struct APawn GetPawn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 224);
		return struct APawn(ptr_addr);
	}
	struct TArray<struct AGoItem_Cube> GetCubeList() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 232);
		return struct TArray<struct AGoItem_Cube>(ptr_addr);
	}
	struct UParticleSystemComponent GetParticle() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 248);
		return struct UParticleSystemComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UItemContextComponent
{
public:
	UItemContextComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAIEnableStraightWinCare
{
public:
	UAIEnableStraightWinCare(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPqCommand
{
public:
	UPqCommand(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetParam() {
		return memory.read<struct FString>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrTutorialRecord
{
public:
	UPrTutorialRecord(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UShadowQuestRule
{
public:
	UShadowQuestRule(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAccountGameData
{
public:
	UAccountGameData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<struct FString, struct UGameDataCache> GetCaches() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 136);
		return struct TMap<struct FString, struct UGameDataCache>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicenseSpeedLimitWidget
{
public:
	ULicenseSpeedLimitWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UOverlay GetV_OV_Speed() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UOverlay(ptr_addr);
	}
	struct UKdTextBlock GetChallengespeed() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UKdTextBlock GetV_Add_Score_Text() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UWidgetAnimation GetEnter_Anim() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation GetOut_Anim() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation GetAnim_Success() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation GetAnim_Fail() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation GetAnim_addscore() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UWidgetAnimation(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPcServerTime
{
public:
	UPcServerTime(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString Getutc() {
		return memory.read<struct FString>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAIItemComponent
{
public:
	UAIItemComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftObjectPtr<UAIItemUseRuleData> GetItemUseRuleData() {
		return memory.read<struct TSoftObjectPtr<UAIItemUseRuleData>>(m_addr + 200);
	}
	struct UAIItemUseRuleData GetItemUseRuleDataAsset() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 240);
		return struct UAIItemUseRuleData(ptr_addr);
	}
	struct AActor GetRealPlayer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 248);
		return struct AActor(ptr_addr);
	}
	struct UItemComponent GetItemComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 272);
		return struct UItemComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicenseShadowAIComponent
{
public:
	ULicenseShadowAIComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ULicenseShadowAIData GetData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 176);
		return struct ULicenseShadowAIData(ptr_addr);
	}
	struct AKdPawn GetPlayerPawn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 184);
		return struct AKdPawn(ptr_addr);
	}
	struct AKdPawn GetShadowPawn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 192);
		return struct AKdPawn(ptr_addr);
	}
	struct UKdPawnSpawner GetPawnSpawner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 200);
		return struct UKdPawnSpawner(ptr_addr);
	}
	struct FPawnRecordData GetRecordedData() {
		return memory.read<struct FPawnRecordData>(m_addr + 208);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAccountGarage
{
public:
	UAccountGarage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<struct FString, struct FKtKartBodyParam> GetKartBodyParams() {
		return memory.read<struct TMap<struct FString, struct FKtKartBodyParam>>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMatchTicket
{
public:
	UMatchTicket(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetTicket() {
		return memory.read<struct FString>(m_addr + 40);
	}
	struct FString Getstatus() {
		return memory.read<struct FString>(m_addr + 56);
	}
	bool GetClosed() {
		return memory.read<bool>(m_addr + 72);
	}
	struct TArray<enum class ERaceMode> GetraceModes() {
		return memory.read<struct TArray<enum class ERaceMode>>(m_addr + 80);
	}
	int32_t GetMatchTargetType() {
		return memory.read<int32_t>(m_addr + 96);
	}
	struct TArray<int32_t> GettrackGroups() {
		return memory.read<struct TArray<int32_t>>(m_addr + 104);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAccountGrandPrix
{
public:
	UAccountGrandPrix(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class URaceSaveGame3
{
public:
	URaceSaveGame3(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPqGetADTEventReward
{
public:
	UPqGetADTEventReward(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetrewardStep() {
		return memory.read<int32_t>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULiveryMarketSearchStream
{
public:
	ULiveryMarketSearchStream(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ULiveryMarketSearch GetSearch() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct ULiveryMarketSearch(ptr_addr);
	}
	struct UAccountLiveryMarket GetMarketServer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct UAccountLiveryMarket(ptr_addr);
	}
	struct TArray<struct FStickerStock> GetStocks() {
		return memory.read<struct TArray<struct FStickerStock>>(m_addr + 88);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCreateBossHPWidget
{
public:
	UCreateBossHPWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftClassPtr<UObject> GetBossHPWidgetClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrReportLiveryDeleteConfirm
{
public:
	UPrReportLiveryDeleteConfirm(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FKtLivery> GetliveryVector() {
		return memory.read<struct TArray<struct FKtLivery>>(m_addr + 72);
	}
	struct TArray<struct FKtLiverySticker> GetliveryStickerVector() {
		return memory.read<struct TArray<struct FKtLiverySticker>>(m_addr + 88);
	}

private:
	std::uint64_t m_addr = 0;
};


class USQNoAccountConfigStorage
{
public:
	USQNoAccountConfigStorage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRaceSaveGameLatestPtr GetLocalSaveGameCache() {
		return memory.read<struct FRaceSaveGameLatestPtr>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicenseCalcRemainTimeScoreRule
{
public:
	ULicenseCalcRemainTimeScoreRule(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UDraftComponent
{
public:
	UDraftComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULiveryMarketSearch
{
public:
	ULiveryMarketSearch(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAccountLiveryMarket GetMarketServer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 136);
		return struct UAccountLiveryMarket(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UScenarioInterface
{
public:
	UScenarioInterface(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAccountLiveryMarket
{
public:
	UAccountLiveryMarket(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAuthorizedServer GetLiveryMarketServer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return struct UAuthorizedServer(ptr_addr);
	}
	struct UStickerStockCache GetStickerStockCache() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 216);
		return struct UStickerStockCache(ptr_addr);
	}
	struct TMap<int32_t, struct FLiveryStickerDesc> GetUploadPendingStickerDesc() {
		return memory.read<struct TMap<int32_t, struct FLiveryStickerDesc>>(m_addr + 408);
	}
	struct ULiveryMarketTagCache GetTagCache() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 488);
		return struct ULiveryMarketTagCache(ptr_addr);
	}
	struct ULiveryMarketTagIdCache GetTagIdCache() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 496);
		return struct ULiveryMarketTagIdCache(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class USetLicenseScoreRule
{
public:
	USetLicenseScoreRule(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetTotalTime() {
		return memory.read<float>(m_addr + 72);
	}
	float GetTimeWeight() {
		return memory.read<float>(m_addr + 76);
	}
	int32_t GetScoreWhenFinished() {
		return memory.read<int32_t>(m_addr + 80);
	}
	bool GetbFailOnTimeOver() {
		return memory.read<bool>(m_addr + 84);
	}

private:
	std::uint64_t m_addr = 0;
};


class UC_GaragePageWidget
{
public:
	UC_GaragePageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TWeakObjectPtr<UPageListTemplate> GetWeakItemPageList() {
		return memory.read<struct TWeakObjectPtr<UPageListTemplate>>(m_addr + 1208);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPcHostGame
{
public:
	UPcHostGame(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetgameId() {
		return memory.read<struct FString>(m_addr + 48);
	}
	struct UObject GetgameSettings() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 64);
		return struct UObject(ptr_addr);
	}
	struct TArray<struct FHostGamePlayer> Getplayers() {
		return memory.read<struct TArray<struct FHostGamePlayer>>(m_addr + 72);
	}
	struct FString GetsessionAPIEndpoint() {
		return memory.read<struct FString>(m_addr + 88);
	}
	struct FString GetsessionAPIKey() {
		return memory.read<struct FString>(m_addr + 104);
	}
	struct FString GetsessionAPIAuthToken() {
		return memory.read<struct FString>(m_addr + 120);
	}
	struct FString GetredisChannelName() {
		return memory.read<struct FString>(m_addr + 136);
	}
	struct UObject GetETC() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 152);
		return struct UObject(ptr_addr);
	}
	bool GetisSpectator() {
		return memory.read<bool>(m_addr + 160);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqCommandSetCustomProperty
{
public:
	UPqCommandSetCustomProperty(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPcKartUpgradeInfo
{
public:
	UPcKartUpgradeInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetkartItemId() {
		return memory.read<struct FString>(m_addr + 48);
	}
	struct FOwnKartUpgradeInfo GetUpgradeInfo() {
		return memory.read<struct FOwnKartUpgradeInfo>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqInviteCustomGame
{
public:
	UPqInviteCustomGame(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetaccountId() {
		return memory.read<struct FString>(m_addr + 56);
	}
	struct FString GetriderName() {
		return memory.read<struct FString>(m_addr + 72);
	}
	struct FNullableInt32 GetSlot() {
		return memory.read<struct FNullableInt32>(m_addr + 88);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqCommandSetTrophy
{
public:
	UPqCommandSetTrophy(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAccountMail
{
public:
	UAccountMail(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FKtMailHeader> GetReceived() {
		return memory.read<struct TArray<struct FKtMailHeader>>(m_addr + 48);
	}
	struct TArray<struct FKtMail> GetSent() {
		return memory.read<struct TArray<struct FKtMail>>(m_addr + 72);
	}
	struct TArray<struct FKtMail> Getacquired() {
		return memory.read<struct TArray<struct FKtMail>>(m_addr + 88);
	}
	struct TMap<struct FString, struct FMailCache> GetReceivedMailCache() {
		return memory.read<struct TMap<struct FString, struct FMailCache>>(m_addr + 200);
	}
	struct TArray<struct UMailRequest> GetMailRequests() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 280);
		return struct TArray<struct UMailRequest>(ptr_addr);
	}
	struct UDelegateBarrier GetBarrier() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 296);
		return struct UDelegateBarrier(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UScenarioInitializePauseMenu
{
public:
	UScenarioInitializePauseMenu(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftClassPtr<UObject> GetScenarioPauseWidgetClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UFriendLogicComponent
{
public:
	UFriendLogicComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AItem
{
public:
	AItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USceneComponent GetSceneComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 552);
		return struct USceneComponent(ptr_addr);
	}
	enum class EItemType GetItemType() {
		return memory.read<enum class EItemType>(m_addr + 560);
	}
	struct TSoftObjectPtr<UTexture2D> GetItemIcon() {
		return memory.read<struct TSoftObjectPtr<UTexture2D>>(m_addr + 568);
	}
	struct TSoftObjectPtr<UMaterialInstance> GetItemBackground() {
		return memory.read<struct TSoftObjectPtr<UMaterialInstance>>(m_addr + 608);
	}
	int32_t GetGoItemUniqueID() {
		return memory.read<int32_t>(m_addr + 648);
	}
	struct UItemComponent GetAuthAttacker() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 800);
		return struct UItemComponent(ptr_addr);
	}
	struct UItemComponent GetLocalAttacker() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 824);
		return struct UItemComponent(ptr_addr);
	}
	struct UItemSlotComponent GetOwnerItemSlot() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 832);
		return struct UItemSlotComponent(ptr_addr);
	}
	int32_t GetItemSequence() {
		return memory.read<int32_t>(m_addr + 840);
	}
	bool GetbNeedRegisterToSlot() {
		return memory.read<bool>(m_addr + 844);
	}
	bool GetbChangeItemOnSlot() {
		return memory.read<bool>(m_addr + 845);
	}
	int32_t GetChangingItemIndex() {
		return memory.read<int32_t>(m_addr + 848);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAccountMatch
{
public:
	UAccountMatch(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UMatchTicket GetCurrentMatchTicket() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 136);
		return struct UMatchTicket(ptr_addr);
	}
	struct UServerRequest GetMatchRequest() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 144);
		return struct UServerRequest(ptr_addr);
	}
	struct UKtRaceDetails GetSavedRaceDetails() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 200);
		return struct UKtRaceDetails(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UStickerMarketLogicComponent
{
public:
	UStickerMarketLogicComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ULiveryMarketSearch GetTop100SearchCur() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 352);
		return struct ULiveryMarketSearch(ptr_addr);
	}
	struct ULiveryMarketSearch GetTop100SearchPrev() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 360);
		return struct ULiveryMarketSearch(ptr_addr);
	}
	struct UAccountLiveryMarket GetMarket() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct UAccountLiveryMarket(ptr_addr);
	}
	struct UKdAccount GetAccount() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return struct UKdAccount(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicensePauseWidget
{
public:
	ULicensePauseWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UKdTextBlock GetV_MissionInfoTitle() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 816);
		return struct UKdTextBlock(ptr_addr);
	}
	struct ULicensePauseDescWidget GetV_LicenseInfoListEntry1() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 824);
		return struct ULicensePauseDescWidget(ptr_addr);
	}
	struct ULicensePauseDescWidget GetV_LicenseInfoListEntry2() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 832);
		return struct ULicensePauseDescWidget(ptr_addr);
	}
	struct ULicensePauseDescWidget GetV_LicenseInfoListEntry3() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 840);
		return struct ULicensePauseDescWidget(ptr_addr);
	}
	struct ULicensePauseDescWidget GetV_LicenseInfoListEntry4() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 848);
		return struct ULicensePauseDescWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAccountMisc
{
public:
	UAccountMisc(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULicenseBossComponent
{
public:
	ULicenseBossComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FTransform GetBossTransform() {
		return memory.read<struct FTransform>(m_addr + 224);
	}
	struct ULicenseBossData GetData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 272);
		return struct ULicenseBossData(ptr_addr);
	}
	float GetHP() {
		return memory.read<float>(m_addr + 280);
	}
	bool GetbRageState() {
		return memory.read<bool>(m_addr + 284);
	}
	float GetRageLastTime() {
		return memory.read<float>(m_addr + 288);
	}
	bool GetbLastRage() {
		return memory.read<bool>(m_addr + 292);
	}
	float GetSlipRadius() {
		return memory.read<float>(m_addr + 296);
	}
	int32_t GetRageIndex() {
		return memory.read<int32_t>(m_addr + 300);
	}
	float GetLastBananaDistance() {
		return memory.read<float>(m_addr + 304);
	}
	struct AKdPawn GetBossPawn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 312);
		return struct AKdPawn(ptr_addr);
	}
	struct AKdPawn GetPlayerPawn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 320);
		return struct AKdPawn(ptr_addr);
	}
	struct UItemComponent GetBossItemComp() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 328);
		return struct UItemComponent(ptr_addr);
	}
	struct UItemComponent GetSpawnItemComp() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 336);
		return struct UItemComponent(ptr_addr);
	}
	float GetCurrentDistance() {
		return memory.read<float>(m_addr + 344);
	}
	bool GetbFinish() {
		return memory.read<bool>(m_addr + 348);
	}
	enum class ELicenseBossState GetBossState() {
		return memory.read<enum class ELicenseBossState>(m_addr + 360);
	}
	float GetCurrentStateTimer() {
		return memory.read<float>(m_addr + 364);
	}
	int32_t GetSelectedNormalAttackPattern() {
		return memory.read<int32_t>(m_addr + 368);
	}
	int32_t GetSelectedRageAttackPattern() {
		return memory.read<int32_t>(m_addr + 372);
	}
	int32_t GetPatternIndex() {
		return memory.read<int32_t>(m_addr + 376);
	}
	float GetNormalAttackStartDistance() {
		return memory.read<float>(m_addr + 380);
	}
	float GetRageAttackStartDistance() {
		return memory.read<float>(m_addr + 384);
	}
	float GetNormalAttackTimer() {
		return memory.read<float>(m_addr + 388);
	}
	bool GetbPlayStartAnim() {
		return memory.read<bool>(m_addr + 392);
	}
	struct TArray<struct AGoItem_Cube> GetItemCubeList() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 400);
		return struct TArray<struct AGoItem_Cube>(ptr_addr);
	}
	struct USplineComponent GetSplineGuide() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 416);
		return struct USplineComponent(ptr_addr);
	}
	struct TSoftClassPtr<UObject> GetDamageWidgetClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 424);
	}
	struct TSoftClassPtr<UObject> GetItemCubeClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 464);
	}
	struct TSoftObjectPtr<UStaticMesh> GetItemCubeMeshClass() {
		return memory.read<struct TSoftObjectPtr<UStaticMesh>>(m_addr + 504);
	}
	struct TSoftObjectPtr<UTexture2D> GetDiffuseTextureObject() {
		return memory.read<struct TSoftObjectPtr<UTexture2D>>(m_addr + 544);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqRegisterTag
{
public:
	UPqRegisterTag(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FString> GetTag() {
		return memory.read<struct TArray<struct FString>>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class AItemBigBanana
{
public:
	AItemBigBanana(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USphereComponent GetOverlapComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 856);
		return struct USphereComponent(ptr_addr);
	}
	struct USkeletalMeshComponent GetBananaSkeletalMeshComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 864);
		return struct USkeletalMeshComponent(ptr_addr);
	}
	struct TSoftObjectPtr<UAnimationAsset> GetBananaBeginAnimSequence() {
		return memory.read<struct TSoftObjectPtr<UAnimationAsset>>(m_addr + 872);
	}
	struct TSoftObjectPtr<UAnimationAsset> GetBananaIdleAnimSequence() {
		return memory.read<struct TSoftObjectPtr<UAnimationAsset>>(m_addr + 912);
	}
	struct TSoftObjectPtr<UFMODEvent> GetFiringSound() {
		return memory.read<struct TSoftObjectPtr<UFMODEvent>>(m_addr + 952);
	}
	struct TSoftObjectPtr<USkeletalMesh> GetBananaMesh() {
		return memory.read<struct TSoftObjectPtr<USkeletalMesh>>(m_addr + 992);
	}
	struct TSoftClassPtr<UObject> GetBanana_Bullet() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 1032);
	}
	struct TSoftObjectPtr<ULevelSequence> GetItemFeedSequence() {
		return memory.read<struct TSoftObjectPtr<ULevelSequence>>(m_addr + 1072);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTouchItemButton
{
public:
	UTouchItemButton(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UItemSlotWidget GetV_ItemSlot() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct UItemSlotWidget(ptr_addr);
	}
	struct UNamedSlot GetV_KeyGuideSlot() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return struct UNamedSlot(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UEmoticonPageWidget
{
public:
	UEmoticonPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UDialogTemplate GetEmoticonPopup() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 744);
		return struct UDialogTemplate(ptr_addr);
	}
	struct UUserWidget GetEmoticonWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 752);
		return struct UUserWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAccountNgs
{
public:
	UAccountNgs(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UCharacterSkeletalMeshComponent
{
public:
	UCharacterSkeletalMeshComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<enum class ECharacterMontage, struct TSoftObjectPtr<UAnimMontage>> GetAnimMontageContainer() {
		return memory.read<struct TMap<enum class ECharacterMontage, struct TSoftObjectPtr<UAnimMontage>>>(m_addr + 3928);
	}
	struct TArray<int32_t> GetLODToFrameSkip() {
		return memory.read<struct TArray<int32_t>>(m_addr + 4016);
	}
	struct FCharacterDesc GetCharacterDesc() {
		return memory.read<struct FCharacterDesc>(m_addr + 4032);
	}
	struct UBelongingDataAssetCostume GetCostumeAsset() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 4128);
		return struct UBelongingDataAssetCostume(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicenseSequenceDecodingComponent
{
public:
	ULicenseSequenceDecodingComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ULevelSequence GetSequence() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 176);
		return struct ULevelSequence(ptr_addr);
	}
	struct ULevelSequencePlayer GetPlayer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 184);
		return struct ULevelSequencePlayer(ptr_addr);
	}
	struct UKartMovementReplication GetReplicationComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 192);
		return struct UKartMovementReplication(ptr_addr);
	}
	struct USimulationMovementComponent GetMovementComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 200);
		return struct USimulationMovementComponent(ptr_addr);
	}
	struct UBoostComponent GetBoostComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 208);
		return struct UBoostComponent(ptr_addr);
	}
	struct UItemSlotComponent GetItemSlotComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 216);
		return struct UItemSlotComponent(ptr_addr);
	}
	struct TSoftClassPtr<UObject> GetSequenceWidgetClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 224);
	}
	struct UDialogTemplate GetSequenceWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 264);
		return struct UDialogTemplate(ptr_addr);
	}
	struct ULicensePortraitMessageWidget GetSequenceMessageWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 272);
		return struct ULicensePortraitMessageWidget(ptr_addr);
	}
	struct UFMODEvent GetPauseSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 280);
		return struct UFMODEvent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqLicenseClear
{
public:
	UPqLicenseClear(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetlicenseGroupId() {
		return memory.read<struct FString>(m_addr + 56);
	}
	struct FString GetlicenseMissionId() {
		return memory.read<struct FString>(m_addr + 72);
	}
	struct FString GettrackId() {
		return memory.read<struct FString>(m_addr + 88);
	}
	int32_t GetstarCount() {
		return memory.read<int32_t>(m_addr + 104);
	}
	struct FDateTime GetStartTime() {
		return memory.read<struct FDateTime>(m_addr + 112);
	}
	struct FKtLicenseTMIData GetlicenseTMIData() {
		return memory.read<struct FKtLicenseTMIData>(m_addr + 120);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCheatComponent
{
public:
	UCheatComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULqDeleteStickerStockBookmark
{
public:
	ULqDeleteStickerStockBookmark(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int64_t GetstickerStockId() {
		return memory.read<int64_t>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UBelongingDataAssetMotionSit
{
public:
	UBelongingDataAssetMotionSit(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPqCommandKillMe
{
public:
	UPqCommandKillMe(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPqCommandUpdateSeason
{
public:
	UPqCommandUpdateSeason(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPqCommandReset2ndPwd
{
public:
	UPqCommandReset2ndPwd(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrLogin
{
public:
	UPrLogin(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKtAccountProfile GetProfile() {
		return memory.read<struct FKtAccountProfile>(m_addr + 72);
	}
	struct FString GetaccountId() {
		return memory.read<struct FString>(m_addr + 168);
	}
	struct FString GetloginId() {
		return memory.read<struct FString>(m_addr + 184);
	}
	struct FString GetserviceId() {
		return memory.read<struct FString>(m_addr + 200);
	}
	struct FString Getnpsn() {
		return memory.read<struct FString>(m_addr + 216);
	}
	struct FKtSeasonInfo GetseasonInfo() {
		return memory.read<struct FKtSeasonInfo>(m_addr + 232);
	}
	struct FKtSeasonStaticInfo GetseasonStaticInfo() {
		return memory.read<struct FKtSeasonStaticInfo>(m_addr + 264);
	}
	struct FString GetriderName() {
		return memory.read<struct FString>(m_addr + 320);
	}
	struct TArray<struct FKtItem> GetinventoryData() {
		return memory.read<struct TArray<struct FKtItem>>(m_addr + 336);
	}
	struct TArray<struct FKtItem> GetinventoryDataSeason() {
		return memory.read<struct TArray<struct FKtItem>>(m_addr + 352);
	}
	struct TArray<struct FKtItem> GetinventoryDataInitial() {
		return memory.read<struct TArray<struct FKtItem>>(m_addr + 368);
	}
	struct TArray<struct FKtItem> GetinventoryDataDefaultParts() {
		return memory.read<struct TArray<struct FKtItem>>(m_addr + 384);
	}
	struct TArray<struct FKtItem> GetinventoryDataCash() {
		return memory.read<struct TArray<struct FKtItem>>(m_addr + 400);
	}
	struct FString GetemblemItemIdOn() {
		return memory.read<struct FString>(m_addr + 416);
	}
	struct FKtItemPreset GetitemPresetOn() {
		return memory.read<struct FKtItemPreset>(m_addr + 432);
	}
	struct TArray<struct FKtItemPreset> GetitemPresetVector() {
		return memory.read<struct TArray<struct FKtItemPreset>>(m_addr + 592);
	}
	struct TArray<struct FKtLivery> GetliveryVector() {
		return memory.read<struct TArray<struct FKtLivery>>(m_addr + 608);
	}
	struct TArray<struct FKtLiverySticker> GetliveryStickerVector() {
		return memory.read<struct TArray<struct FKtLiverySticker>>(m_addr + 624);
	}
	struct FKtQuestSetData GetquestSetDataDaily() {
		return memory.read<struct FKtQuestSetData>(m_addr + 640);
	}
	struct FKtQuestSetDataComplete GetquestSetDataDailyComplete() {
		return memory.read<struct FKtQuestSetDataComplete>(m_addr + 720);
	}
	struct FKtQuestSetData GetquestSetDataWeekly() {
		return memory.read<struct FKtQuestSetData>(m_addr + 800);
	}
	struct FKtQuestSetDataComplete GetquestSetDataWeeklyComplete() {
		return memory.read<struct FKtQuestSetDataComplete>(m_addr + 880);
	}
	struct FKtQuestSetData GetquestSetDataEmblem() {
		return memory.read<struct FKtQuestSetData>(m_addr + 960);
	}
	struct FKtQuestSetDataComplete GetquestSetDataEmblemComplete() {
		return memory.read<struct FKtQuestSetDataComplete>(m_addr + 1040);
	}
	struct FKtQuestSetData GetquestSetDataLive() {
		return memory.read<struct FKtQuestSetData>(m_addr + 1120);
	}
	struct FKtQuestSetDataComplete GetquestSetDataLiveComplete() {
		return memory.read<struct FKtQuestSetDataComplete>(m_addr + 1200);
	}
	struct FKtQuestSetData GetquestSetDataPsn() {
		return memory.read<struct FKtQuestSetData>(m_addr + 1280);
	}
	struct FKtQuestSetDataComplete GetquestSetDataPsnComplete() {
		return memory.read<struct FKtQuestSetDataComplete>(m_addr + 1360);
	}
	struct FKtQuestSetData GetquestSetDataEvent() {
		return memory.read<struct FKtQuestSetData>(m_addr + 1440);
	}
	struct FKtQuestSetDataComplete GetquestSetDataEventComplete() {
		return memory.read<struct FKtQuestSetDataComplete>(m_addr + 1520);
	}
	struct FString GetUtcNow() {
		return memory.read<struct FString>(m_addr + 1600);
	}
	struct FServerSettingToClient GetserverSetting() {
		return memory.read<struct FServerSettingToClient>(m_addr + 1616);
	}
	struct FKtOptionSetting GetoptionSetting() {
		return memory.read<struct FKtOptionSetting>(m_addr + 1664);
	}
	struct FKtLicenseData GetlicenseData() {
		return memory.read<struct FKtLicenseData>(m_addr + 1752);
	}
	struct FKtTutorialData GettutorialData() {
		return memory.read<struct FKtTutorialData>(m_addr + 1832);
	}
	struct TMap<struct FString, struct FString> GetcustomProperties() {
		return memory.read<struct TMap<struct FString, struct FString>>(m_addr + 1840);
	}
	struct TArray<enum class EKtAccountFlag> GetFlag() {
		return memory.read<struct TArray<enum class EKtAccountFlag>>(m_addr + 1920);
	}
	struct FString GetserverRegionId() {
		return memory.read<struct FString>(m_addr + 1936);
	}
	struct FString GetsharedValue() {
		return memory.read<struct FString>(m_addr + 1952);
	}
	bool GetcrossPlayEnabled() {
		return memory.read<bool>(m_addr + 1968);
	}
	struct TMap<struct FString, struct FOwnKartUpgradeInfo> GetownKartsUpgradeInfo() {
		return memory.read<struct TMap<struct FString, struct FOwnKartUpgradeInfo>>(m_addr + 1976);
	}
	struct TArray<struct FString> GetliverySignedUrlVector() {
		return memory.read<struct TArray<struct FString>>(m_addr + 2056);
	}
	struct TArray<struct FString> GetliveryStickerSignedUrlVector() {
		return memory.read<struct TArray<struct FString>>(m_addr + 2072);
	}
	struct FKtPlayLucciInfo GetplayLucci() {
		return memory.read<struct FKtPlayLucciInfo>(m_addr + 2088);
	}
	bool GetisChangeUnusableItem() {
		return memory.read<bool>(m_addr + 2104);
	}
	struct FKtPermissionData Getpermission() {
		return memory.read<struct FKtPermissionData>(m_addr + 2105);
	}
	bool GetugcEnabled() {
		return memory.read<bool>(m_addr + 2106);
	}
	bool GetchatEnabled() {
		return memory.read<bool>(m_addr + 2107);
	}
	enum class EKtGrandPrixSubTier GetregularGrandPrixTier() {
		return memory.read<enum class EKtGrandPrixSubTier>(m_addr + 2108);
	}
	enum class EKtAffiliatePlatform GetfirstBuyPlatform() {
		return memory.read<enum class EKtAffiliatePlatform>(m_addr + 2109);
	}
	bool GetisAdult() {
		return memory.read<bool>(m_addr + 2110);
	}
	struct FString GetnpaCode() {
		return memory.read<struct FString>(m_addr + 2112);
	}
	struct FKtModeSelectDataList GetmodeSelectDataList() {
		return memory.read<struct FKtModeSelectDataList>(m_addr + 2128);
	}
	struct FKtMatchRequestData GetquickMatchData() {
		return memory.read<struct FKtMatchRequestData>(m_addr + 2144);
	}
	int32_t GetaccPlayTimeSec() {
		return memory.read<int32_t>(m_addr + 2184);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPSOCompileDialog
{
public:
	UPSOCompileDialog(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrRiderNameChangeConfirm
{
public:
	UPrRiderNameChangeConfirm(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKtRiderNameChange GetriderNameChange() {
		return memory.read<struct FKtRiderNameChange>(m_addr + 72);
	}
	struct FString GetchangeRiderName() {
		return memory.read<struct FString>(m_addr + 88);
	}

private:
	std::uint64_t m_addr = 0;
};


class UForceFeedbackLibrary
{
public:
	UForceFeedbackLibrary(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UCreateLicenseRocketTargetWidget
{
public:
	UCreateLicenseRocketTargetWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftClassPtr<UObject> GetLicenseRocketTargetWidgetClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 72);
	}
	struct UUserWidget GetRocketTarget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 112);
		return struct UUserWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPcQuestSetUpdated
{
public:
	UPcQuestSetUpdated(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKtQuestSetData GetquestSetDataDaily() {
		return memory.read<struct FKtQuestSetData>(m_addr + 48);
	}
	struct FKtQuestSetDataComplete GetquestSetDataDailyComplete() {
		return memory.read<struct FKtQuestSetDataComplete>(m_addr + 128);
	}
	struct FKtQuestSetData GetquestSetDataWeekly() {
		return memory.read<struct FKtQuestSetData>(m_addr + 208);
	}
	struct FKtQuestSetDataComplete GetquestSetDataWeeklyComplete() {
		return memory.read<struct FKtQuestSetDataComplete>(m_addr + 288);
	}
	struct FKtQuestSetData GetquestSetDataEmblem() {
		return memory.read<struct FKtQuestSetData>(m_addr + 368);
	}
	struct FKtQuestSetDataComplete GetquestSetDataEmblemComplete() {
		return memory.read<struct FKtQuestSetDataComplete>(m_addr + 448);
	}
	struct FKtQuestSetData GetquestSetDataLive() {
		return memory.read<struct FKtQuestSetData>(m_addr + 528);
	}
	struct FKtQuestSetDataComplete GetquestSetDataLiveComplete() {
		return memory.read<struct FKtQuestSetDataComplete>(m_addr + 608);
	}
	struct FKtQuestSetData GetquestSetDataPsn() {
		return memory.read<struct FKtQuestSetData>(m_addr + 688);
	}
	struct FKtQuestSetDataComplete GetquestSetDataPsnComplete() {
		return memory.read<struct FKtQuestSetDataComplete>(m_addr + 768);
	}
	struct FKtQuestSetData GetquestSetDataEvent() {
		return memory.read<struct FKtQuestSetData>(m_addr + 848);
	}
	struct FKtQuestSetDataComplete GetquestSetDataEventComplete() {
		return memory.read<struct FKtQuestSetDataComplete>(m_addr + 928);
	}
	struct TArray<struct FKtStockReward> GetrewardStockVector() {
		return memory.read<struct TArray<struct FKtStockReward>>(m_addr + 1008);
	}

private:
	std::uint64_t m_addr = 0;
};


class ADriftLimit
{
public:
	ADriftLimit(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetDriftStartIndex() {
		return memory.read<int32_t>(m_addr + 544);
	}
	int32_t GetDriftEndIndex() {
		return memory.read<int32_t>(m_addr + 548);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqSetRiderName
{
public:
	UPqSetRiderName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetriderName() {
		return memory.read<struct FString>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqBreakPiggy
{
public:
	UPqBreakPiggy(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetpiggyName() {
		return memory.read<struct FString>(m_addr + 56);
	}
	struct FKtPiggyOpenReward GetexpectedReward() {
		return memory.read<struct FKtPiggyOpenReward>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKdPlayerPropRace
{
public:
	UKdPlayerPropRace(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRacePlayerEquipDesc GetEquip() {
		return memory.read<struct FRacePlayerEquipDesc>(m_addr + 48);
	}
	struct FKtKartBodyParam GetKartBodyParam() {
		return memory.read<struct FKtKartBodyParam>(m_addr + 352);
	}
	struct FKtKartChannelParam GetKartChannelParam() {
		return memory.read<struct FKtKartChannelParam>(m_addr + 564);
	}
	bool GetbUseBeginnerCare() {
		return memory.read<bool>(m_addr + 636);
	}
	bool GetbIsAiPlayer() {
		return memory.read<bool>(m_addr + 637);
	}
	enum class EKtRaceAiType GetaiType() {
		return memory.read<enum class EKtRaceAiType>(m_addr + 638);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrSetRiderName
{
public:
	UPrSetRiderName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetNotSupportedLetter() {
		return memory.read<struct FString>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPq2ndPwd
{
public:
	UPq2ndPwd(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetHash() {
		return memory.read<struct FString>(m_addr + 56);
	}
	bool Getset() {
		return memory.read<bool>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UItemListPopup
{
public:
	UItemListPopup(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPcLogout
{
public:
	UPcLogout(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetReason() {
		return memory.read<struct FString>(m_addr + 48);
	}
	bool GetShutdown() {
		return memory.read<bool>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrInviteCustomGame
{
public:
	UPrInviteCustomGame(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetaccountId() {
		return memory.read<struct FString>(m_addr + 72);
	}
	struct FString GetriderName() {
		return memory.read<struct FString>(m_addr + 88);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicenseDriftSaveGame
{
public:
	ULicenseDriftSaveGame(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetSaveSlotName() {
		return memory.read<struct FString>(m_addr + 40);
	}
	uint32_t GetUserIndex() {
		return memory.read<uint32_t>(m_addr + 56);
	}
	struct TArray<struct FDriftData> GetData() {
		return memory.read<struct TArray<struct FDriftData>>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};


class UScenarioKeyAccumLayoutItemWidget
{
public:
	UScenarioKeyAccumLayoutItemWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UScenarioKeyLayoutWidget GetV_KeyLayout() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UScenarioKeyLayoutWidget(ptr_addr);
	}
	struct UWidgetAnimationGraph GetWidgetAnimationGraph() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UWidgetAnimationGraph(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPcPartyInfoChange
{
public:
	UPcPartyInfoChange(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FPartyInfo GetPartyInfo() {
		return memory.read<struct FPartyInfo>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqShopInventoryPickupKrPc
{
public:
	UPqShopInventoryPickupKrPc(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetIndex() {
		return memory.read<int32_t>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPredictHelper
{
public:
	UPredictHelper(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPqLogout
{
public:
	UPqLogout(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetReason() {
		return memory.read<struct FString>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAIItemUseRuleData
{
public:
	UAIItemUseRuleData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<enum class EItemType, struct FAIItemUseRule> GetAIItemUseRule() {
		return memory.read<struct TMap<enum class EItemType, struct FAIItemUseRule>>(m_addr + 48);
	}
	float GetTimeout() {
		return memory.read<float>(m_addr + 128);
	}
	float GetIgnoreTimeOutRemainDistance() {
		return memory.read<float>(m_addr + 132);
	}
	struct FAIItemWaterlockEscapeSetting GetWaterlockEscapeSetting() {
		return memory.read<struct FAIItemWaterlockEscapeSetting>(m_addr + 136);
	}
	float GetShield_Probability() {
		return memory.read<float>(m_addr + 144);
	}
	float GetAngel_Probability() {
		return memory.read<float>(m_addr + 148);
	}
	float GetEMP_Probability() {
		return memory.read<float>(m_addr + 152);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicenseConnectRuleComponent
{
public:
	ULicenseConnectRuleComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct APlayerStart> GetStartSpotContainer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 200);
		return struct TArray<struct APlayerStart>(ptr_addr);
	}
	struct APawn GetPlayerPawn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 216);
		return struct APawn(ptr_addr);
	}
	struct FString GetPlayerStartName() {
		return memory.read<struct FString>(m_addr + 224);
	}
	struct FString GetPlayerUniqueID() {
		return memory.read<struct FString>(m_addr + 240);
	}
	int32_t GetSpotIndex() {
		return memory.read<int32_t>(m_addr + 256);
	}
	struct ULicenseDataAsset GetLicenseDataAsset() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 600);
		return struct ULicenseDataAsset(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqOptionSettingUpdate
{
public:
	UPqOptionSettingUpdate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKtOptionSetting GetoptionSetting() {
		return memory.read<struct FKtOptionSetting>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqGetPublicDynData
{
public:
	UPqGetPublicDynData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetName() {
		return memory.read<struct FString>(m_addr + 56);
	}
	struct FString GetHash() {
		return memory.read<struct FString>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqAuth
{
public:
	UPqAuth(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class EKtPlatform Getplatform() {
		return memory.read<enum class EKtPlatform>(m_addr + 56);
	}
	struct FString GetlocalIp() {
		return memory.read<struct FString>(m_addr + 64);
	}
	struct FString GetmachineId() {
		return memory.read<struct FString>(m_addr + 80);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKartUpgradeLogicComponent
{
public:
	UKartUpgradeLogicComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class URiderNameTagWidget
{
public:
	URiderNameTagWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APlayerState GetAttachedPlayerState() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct APlayerState(ptr_addr);
	}
	bool GetbIsMyPawnIdWidget() {
		return memory.read<bool>(m_addr + 616);
	}
	struct TArray<struct AKdPawn> GetLastRankList() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct TArray<struct AKdPawn>(ptr_addr);
	}
	struct UTextBlock GetV_Number() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock GetV_Id() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UTextBlock(ptr_addr);
	}
	struct UWidgetSwitcher GetV_WS_RankBG() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UOverlay GetV_OV_Rank() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UOverlay(ptr_addr);
	}
	struct UOverlay GetV_OV_UserName() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UOverlay(ptr_addr);
	}
	struct UImage GetV_RiderNameBG() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UImage(ptr_addr);
	}
	struct UImage GetV_RiderNameBG_CenterArrow() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UImage(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UBelongingDataAssetKartParts
{
public:
	UBelongingDataAssetKartParts(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftObjectPtr<USkeletalMesh> GetPartMesh() {
		return memory.read<struct TSoftObjectPtr<USkeletalMesh>>(m_addr + 64);
	}
	struct TSoftClassPtr<UObject> GetPartAnim() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 104);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKartAIBaseComponent
{
public:
	UKartAIBaseComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrGetPublicDynData
{
public:
	UPrGetPublicDynData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetName() {
		return memory.read<struct FString>(m_addr + 72);
	}
	struct FString GetHash() {
		return memory.read<struct FString>(m_addr + 88);
	}
	bool GethasData() {
		return memory.read<bool>(m_addr + 104);
	}
	bool GetisBinary() {
		return memory.read<bool>(m_addr + 105);
	}
	struct FString GetData() {
		return memory.read<struct FString>(m_addr + 112);
	}
	bool GetisCompressed() {
		return memory.read<bool>(m_addr + 128);
	}
	int32_t GetuncompressedSize() {
		return memory.read<int32_t>(m_addr + 132);
	}
	struct FString GetcompressedData() {
		return memory.read<struct FString>(m_addr + 136);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTransition_EndRetireCountdown
{
public:
	UTransition_EndRetireCountdown(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAccountShopPlatform
{
public:
	UAccountShopPlatform(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FShopPurchasingInfo GetCachedStockInfo() {
		return memory.read<struct FShopPurchasingInfo>(m_addr + 112);
	}
	struct TArray<struct UShopFuncClass> GetShopFuncClasses() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 184);
		return struct TArray<struct UShopFuncClass>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAnimNotifyState_PlayFMOD
{
public:
	UAnimNotifyState_PlayFMOD(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetAttachName() {
		return memory.read<struct FName>(m_addr + 48);
	}
	char GetFadeOut() {
		return memory.read<char>(m_addr + 56);
	}
	struct UFMODEvent GetEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 64);
		return struct UFMODEvent(ptr_addr);
	}
	char GetCanListenAll() {
		return memory.read<char>(m_addr + 72);
	}
	struct TArray<struct FAnimNoti_FMODParam> GetFMODParam() {
		return memory.read<struct TArray<struct FAnimNoti_FMODParam>>(m_addr + 80);
	}
	int32_t GetdefaultIndex() {
		return memory.read<int32_t>(m_addr + 96);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqSetClientStage
{
public:
	UPqSetClientStage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString Getstage() {
		return memory.read<struct FString>(m_addr + 56);
	}
	struct FString GetstageParam() {
		return memory.read<struct FString>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UM_InfoPageWidget
{
public:
	UM_InfoPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPqGetServerEndpoint
{
public:
	UPqGetServerEndpoint(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetserverName() {
		return memory.read<struct FString>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqKartUpgrade
{
public:
	UPqKartUpgrade(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetkartItemId() {
		return memory.read<struct FString>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UC_PresetPageWidget
{
public:
	UC_PresetPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrGetServerEndpoint
{
public:
	UPrGetServerEndpoint(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString Getendpoint() {
		return memory.read<struct FString>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UGaragePageWidget
{
public:
	UGaragePageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TWeakObjectPtr<UItemDefEntryObject> GetCurrentFocusedItem() {
		return memory.read<struct TWeakObjectPtr<UItemDefEntryObject>>(m_addr + 832);
	}
	float GetPawnRotationSpeed() {
		return memory.read<float>(m_addr + 1160);
	}

private:
	std::uint64_t m_addr = 0;
};


class UButtonContainerTemplate
{
public:
	UButtonContainerTemplate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbCheckBox() {
		return memory.read<bool>(m_addr + 616);
	}
	enum class EContainerCheckType GetCheckType() {
		return memory.read<enum class EContainerCheckType>(m_addr + 617);
	}
	bool GetbMenuTab() {
		return memory.read<bool>(m_addr + 618);
	}
	bool GetbScrollRetainer() {
		return memory.read<bool>(m_addr + 619);
	}
	float GetStartThreshold() {
		return memory.read<float>(m_addr + 620);
	}
	float GetEndThreshold() {
		return memory.read<float>(m_addr + 624);
	}
	struct TArray<bool> GetCheckedState() {
		return memory.read<struct TArray<bool>>(m_addr + 632);
	}
	UButtonTemplate GetDynamicChildButtonClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return UButtonTemplate(ptr_addr);
	}
	struct TArray<struct UButtonTemplate> GetContainerChildren() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct TArray<struct UButtonTemplate>(ptr_addr);
	}
	struct UPanelWidget GetV_Btn_Container() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UPanelWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAnimNotifyState_GetIntoTheKart
{
public:
	UAnimNotifyState_GetIntoTheKart(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class EInterpolationType GetInterpolationType() {
		return memory.read<enum class EInterpolationType>(m_addr + 48);
	}
	float GetExponential() {
		return memory.read<float>(m_addr + 52);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqAcquireKDST
{
public:
	UPqAcquireKDST(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetTarget() {
		return memory.read<struct FString>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULrGetStockTagId
{
public:
	ULrGetStockTagId(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<int32_t> GettagId() {
		return memory.read<struct TArray<int32_t>>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqConfirmLoginEvent
{
public:
	UPqConfirmLoginEvent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetEventID() {
		return memory.read<struct FString>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKdGestureWidget
{
public:
	UKdGestureWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetLimitFlickAngle() {
		return memory.read<float>(m_addr + 680);
	}
	bool GetbUsePinchInverse() {
		return memory.read<bool>(m_addr + 684);
	}
	bool GetbGestureDebugPrint() {
		return memory.read<bool>(m_addr + 685);
	}
	bool GetbTouchMove() {
		return memory.read<bool>(m_addr + 686);
	}
	struct FVector GetBeforeTouchLocation() {
		return memory.read<struct FVector>(m_addr + 688);
	}
	struct FVector GetTouchStartLocation() {
		return memory.read<struct FVector>(m_addr + 700);
	}
	float GetBeforePinch() {
		return memory.read<float>(m_addr + 712);
	}
	float GetBeforeRotate() {
		return memory.read<float>(m_addr + 716);
	}
	bool GetbGesutrePause() {
		return memory.read<bool>(m_addr + 720);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPcAsyncRequestReply
{
public:
	UPcAsyncRequestReply(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetreqUid() {
		return memory.read<struct FString>(m_addr + 48);
	}
	struct FString GetReply() {
		return memory.read<struct FString>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrVivoxJoinToken
{
public:
	UPrVivoxJoinToken(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetvivoxChannelName() {
		return memory.read<struct FString>(m_addr + 72);
	}
	struct FString GetvivoxJoinToken() {
		return memory.read<struct FString>(m_addr + 88);
	}
	struct FString GetvivoxTranscriptionToken() {
		return memory.read<struct FString>(m_addr + 104);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKdPlayerPropLevelExp
{
public:
	UKdPlayerPropLevelExp(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKdLevelExpProp GetPlayer() {
		return memory.read<struct FKdLevelExpProp>(m_addr + 40);
	}
	struct FKdLevelExpProp GetKart() {
		return memory.read<struct FKdLevelExpProp>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULrGetStickerStockList
{
public:
	ULrGetStickerStockList(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<int64_t> GetstickerStockIdList() {
		return memory.read<struct TArray<int64_t>>(m_addr + 72);
	}
	struct FString GetCursor() {
		return memory.read<struct FString>(m_addr + 88);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqAsyncRequestReply
{
public:
	UPqAsyncRequestReply(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKtAsyncRequestId Getarid() {
		return memory.read<struct FKtAsyncRequestId>(m_addr + 56);
	}
	struct FString GetReply() {
		return memory.read<struct FString>(m_addr + 88);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicensePatrolSpawnComponent
{
public:
	ULicensePatrolSpawnComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ULicensePatrolActorData GetData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 192);
		return struct ULicensePatrolActorData(ptr_addr);
	}
	float GetEventLastTime() {
		return memory.read<float>(m_addr + 200);
	}
	struct TArray<struct AActor> GetSpawnedActors() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 208);
		return struct TArray<struct AActor>(ptr_addr);
	}
	struct UCurveFloat GetSpawnCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 224);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat GetDestroyCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 232);
		return struct UCurveFloat(ptr_addr);
	}
	struct AActor GetPawn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 240);
		return struct AActor(ptr_addr);
	}
	struct UFMODAudioComponent GetAudioComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 280);
		return struct UFMODAudioComponent(ptr_addr);
	}
	struct TSoftObjectPtr<UCurveFloat> GetCurveFloat() {
		return memory.read<struct TSoftObjectPtr<UCurveFloat>>(m_addr + 288);
	}
	struct TSoftObjectPtr<UCurveFloat> GetCurveFloat2() {
		return memory.read<struct TSoftObjectPtr<UCurveFloat>>(m_addr + 328);
	}
	struct TSoftObjectPtr<UParticleSystem> GetParticle() {
		return memory.read<struct TSoftObjectPtr<UParticleSystem>>(m_addr + 368);
	}
	struct TSoftObjectPtr<UStaticMesh> GetAIKartMesh() {
		return memory.read<struct TSoftObjectPtr<UStaticMesh>>(m_addr + 408);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCharacterCostumeAsset
{
public:
	UCharacterCostumeAsset(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetCharMeshScale() {
		return memory.read<float>(m_addr + 48);
	}
	struct FVector GetOffsetFromSeat() {
		return memory.read<struct FVector>(m_addr + 52);
	}
	float GetHandleDirectionOffset() {
		return memory.read<float>(m_addr + 64);
	}
	int32_t GetNotifyAnimParticleId() {
		return memory.read<int32_t>(m_addr + 68);
	}
	struct UCharacterMontageAsset GetMontageAssets() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return struct UCharacterMontageAsset(ptr_addr);
	}
	struct TSoftObjectPtr<USkeletalMesh> GetMesh() {
		return memory.read<struct TSoftObjectPtr<USkeletalMesh>>(m_addr + 80);
	}
	struct TSoftClassPtr<UObject> GetAnimInstance() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 120);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKdPageWidget
{
public:
	UKdPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UWidgetLogicComponent GetLogicComponentClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return UWidgetLogicComponent(ptr_addr);
	}
	struct TMap<struct FString, struct TSoftClassPtr<UObject>> GetDialogClassMap() {
		return memory.read<struct TMap<struct FString, struct TSoftClassPtr<UObject>>>(m_addr + 656);
	}
	bool GetbIsBlankPage() {
		return memory.read<bool>(m_addr + 737);
	}
	bool GetbWorldRenderingFlag() {
		return memory.read<bool>(m_addr + 738);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULrStickerMarketLocked
{
public:
	ULrStickerMarketLocked(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDateTime GetStartTime() {
		return memory.read<struct FDateTime>(m_addr + 72);
	}
	struct FDateTime GetEndTime() {
		return memory.read<struct FDateTime>(m_addr + 80);
	}
	struct FString GetindexId() {
		return memory.read<struct FString>(m_addr + 88);
	}
	struct FKtSeasonInfo GetseasonInfo() {
		return memory.read<struct FKtSeasonInfo>(m_addr + 104);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqCommandAddStock
{
public:
	UPqCommandAddStock(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPqCommandAddItem
{
public:
	UPqCommandAddItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPqCommandUseItem
{
public:
	UPqCommandUseItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULicenseGaugeChargingWidget
{
public:
	ULicenseGaugeChargingWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UKdTextBlock GetV_DriftText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UKdTextBlock GetV_DriftText_WhiteStyle() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UWidgetSwitcher GetWS_TextStyle() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UWidgetSwitcher(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKdReplaySubsystem
{
public:
	UKdReplaySubsystem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class USequenceItemComponent
{
public:
	USequenceItemComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UMainmenuPageWidget
{
public:
	UMainmenuPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftObjectPtr<UPageWidgetAsset> GetPageWidgetAsset() {
		return memory.read<struct TSoftObjectPtr<UPageWidgetAsset>>(m_addr + 768);
	}
	struct UWidgetSwitcher GetMainSwitcher() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 808);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UVoiceChatWidget GetVoiceChatWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 816);
		return struct UVoiceChatWidget(ptr_addr);
	}
	struct UCommonPopup GetGameStartAlertPopupWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 856);
		return struct UCommonPopup(ptr_addr);
	}
	struct UObject GetPreCachePageAsset() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 864);
		return struct UObject(ptr_addr);
	}
	struct TSet<struct UObject> GetPreCacheAssetContainer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 872);
		return struct TSet<struct UObject>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class AShadowQuestGameMode
{
public:
	AShadowQuestGameMode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UScenarioCollectActors
{
public:
	UScenarioCollectActors(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPqCommandSetItem
{
public:
	UPqCommandSetItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UBelongingDataAssetBalloonCable
{
public:
	UBelongingDataAssetBalloonCable(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftObjectPtr<USkeletalMesh> GetMesh() {
		return memory.read<struct TSoftObjectPtr<USkeletalMesh>>(m_addr + 64);
	}
	struct TSoftClassPtr<UObject> GetAnimClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 104);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqCommandSetLevel
{
public:
	UPqCommandSetLevel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AItemRocket
{
public:
	AItemRocket(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USceneComponent GetRootSceneComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 872);
		return struct USceneComponent(ptr_addr);
	}
	struct USkeletalMeshComponent GetBazookaMeshComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 880);
		return struct USkeletalMeshComponent(ptr_addr);
	}
	struct USkeletalMeshComponent GetRocketMeshComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 888);
		return struct USkeletalMeshComponent(ptr_addr);
	}
	struct UParticleSystemComponent GetTailParticleComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 896);
		return struct UParticleSystemComponent(ptr_addr);
	}
	struct TSoftObjectPtr<UCurveFloat> GetCurveDegree() {
		return memory.read<struct TSoftObjectPtr<UCurveFloat>>(m_addr + 904);
	}
	struct TSoftObjectPtr<UCurveFloat> GetCurveY() {
		return memory.read<struct TSoftObjectPtr<UCurveFloat>>(m_addr + 944);
	}
	struct TSoftObjectPtr<UFMODEvent> GetShootSound() {
		return memory.read<struct TSoftObjectPtr<UFMODEvent>>(m_addr + 984);
	}
	struct TSoftObjectPtr<UFMODEvent> GetFlySound() {
		return memory.read<struct TSoftObjectPtr<UFMODEvent>>(m_addr + 1024);
	}
	struct TSoftObjectPtr<USkeletalMesh> GetRocketMesh() {
		return memory.read<struct TSoftObjectPtr<USkeletalMesh>>(m_addr + 1064);
	}
	struct TSoftObjectPtr<UAnimationAsset> GetMissileBeginAttackAsset() {
		return memory.read<struct TSoftObjectPtr<UAnimationAsset>>(m_addr + 1104);
	}
	struct TSoftObjectPtr<UAnimationAsset> GetMissileShootingAsset() {
		return memory.read<struct TSoftObjectPtr<UAnimationAsset>>(m_addr + 1144);
	}
	struct TSoftObjectPtr<USkeletalMesh> GetBazookaBody() {
		return memory.read<struct TSoftObjectPtr<USkeletalMesh>>(m_addr + 1184);
	}
	struct TSoftObjectPtr<USkeletalMesh> GetRocketHead() {
		return memory.read<struct TSoftObjectPtr<USkeletalMesh>>(m_addr + 1224);
	}
	struct TSoftObjectPtr<UParticleSystem> GetBooster() {
		return memory.read<struct TSoftObjectPtr<UParticleSystem>>(m_addr + 1264);
	}
	struct TSoftObjectPtr<ULevelSequence> GetItemFeedSequence() {
		return memory.read<struct TSoftObjectPtr<ULevelSequence>>(m_addr + 1304);
	}
	struct TSoftClassPtr<UObject> GetRedAlertWidgetObj() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 1344);
	}
	float GetRocketTotalFlyTime() {
		return memory.read<float>(m_addr + 1388);
	}
	float GetActionDelay() {
		return memory.read<float>(m_addr + 1392);
	}
	float GetBazookaLifeTime() {
		return memory.read<float>(m_addr + 1396);
	}
	struct UItemComponent GetAuthTarget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1400);
		return struct UItemComponent(ptr_addr);
	}
	struct UItemComponent GetLocalUser() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1408);
		return struct UItemComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrAuth
{
public:
	UPrAuth(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetAddr() {
		return memory.read<struct FString>(m_addr + 72);
	}
	struct FString GetToken() {
		return memory.read<struct FString>(m_addr + 88);
	}
	bool GetbNew() {
		return memory.read<bool>(m_addr + 104);
	}
	struct FString GetprotocolHash() {
		return memory.read<struct FString>(m_addr + 112);
	}
	struct FString GetuserIp() {
		return memory.read<struct FString>(m_addr + 128);
	}
	bool GetbChangeName() {
		return memory.read<bool>(m_addr + 144);
	}

private:
	std::uint64_t m_addr = 0;
};


class UC_MailPageWidget
{
public:
	UC_MailPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FMailIdWidgetPair> GetMailIdWidgetPairs() {
		return memory.read<struct TArray<struct FMailIdWidgetPair>>(m_addr + 768);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicensePauseButtonWidget
{
public:
	ULicensePauseButtonWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UButtonTemplate GetPauseButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UButtonTemplate(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class USendPacket_Start_License
{
public:
	USendPacket_Start_License(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPqCommandAddExp
{
public:
	UPqCommandAddExp(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UBoosterChargeBuff
{
public:
	UBoosterChargeBuff(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UKartBodySound
{
public:
	UKartBodySound(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UFMODEvent GetKartEngineSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct UFMODEvent(ptr_addr);
	}
	struct UFMODEvent GetKartDriftSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct UFMODEvent(ptr_addr);
	}
	struct UFMODEvent GetSlipStreamSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 64);
		return struct UFMODEvent(ptr_addr);
	}
	struct UFMODEvent GetDraftingSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return struct UFMODEvent(ptr_addr);
	}
	struct UFMODEvent GetShockSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 80);
		return struct UFMODEvent(ptr_addr);
	}
	struct UFMODEvent GetCrashSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 88);
		return struct UFMODEvent(ptr_addr);
	}
	struct UFMODEvent GetTransformSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 96);
		return struct UFMODEvent(ptr_addr);
	}
	struct UFMODEvent GetUnTransformSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 104);
		return struct UFMODEvent(ptr_addr);
	}
	struct UFMODEvent GetBoostZonePlaySound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 112);
		return struct UFMODEvent(ptr_addr);
	}
	struct UFMODEvent GetJumpZonePlaySound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 120);
		return struct UFMODEvent(ptr_addr);
	}
	struct UFMODEvent GetDeliveryZoneSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 128);
		return struct UFMODEvent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqCommandAddTrophy
{
public:
	UPqCommandAddTrophy(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAuthorizedServer
{
public:
	UAuthorizedServer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UKdAccount GetAccount() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct UKdAccount(ptr_addr);
	}
	struct UHttpServerRequester GetServerRequester() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 64);
		return struct UHttpServerRequester(ptr_addr);
	}
	struct TArray<struct FAuthServerPendingRequest> GetPendingRequests() {
		return memory.read<struct TArray<struct FAuthServerPendingRequest>>(m_addr + 120);
	}

private:
	std::uint64_t m_addr = 0;
};


class URaceProgressComponent
{
public:
	URaceProgressComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ACheckPoint GetNearbyGoalCheckPoint() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 280);
		return struct ACheckPoint(ptr_addr);
	}
	struct ACheckPoint GetRecentCheckPoint() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 288);
		return struct ACheckPoint(ptr_addr);
	}
	int32_t GetFinishRank() {
		return memory.read<int32_t>(m_addr + 356);
	}
	float GetFinishTime() {
		return memory.read<float>(m_addr + 364);
	}
	float GetRemainDistance() {
		return memory.read<float>(m_addr + 380);
	}
	struct URaceRankComponent GetRaceRankComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 384);
		return struct URaceRankComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCouponRewardItemDefEntryObject
{
public:
	UCouponRewardItemDefEntryObject(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKtItem GetRewardItem() {
		return memory.read<struct FKtItem>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULrGetMyStickerBookmarkList
{
public:
	ULrGetMyStickerBookmarkList(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<int64_t> GetstickerStockIds() {
		return memory.read<struct TArray<int64_t>>(m_addr + 72);
	}
	int32_t GetmaxStickerCount() {
		return memory.read<int32_t>(m_addr + 88);
	}

private:
	std::uint64_t m_addr = 0;
};


class ASpeedTeamGameMode
{
public:
	ASpeedTeamGameMode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULicenseTravelData
{
public:
	ULicenseTravelData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPqCommandSetPlatform
{
public:
	UPqCommandSetPlatform(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPqCommandSetCountry
{
public:
	UPqCommandSetCountry(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UCustomWidgetComponent
{
public:
	UCustomWidgetComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class EWidgetSpace GetSpace() {
		return memory.read<enum class EWidgetSpace>(m_addr + 1192);
	}
	enum class EWidgetTimingPolicy GetTimingPolicy() {
		return memory.read<enum class EWidgetTimingPolicy>(m_addr + 1193);
	}
	UUserWidget GetWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1200);
		return UUserWidget(ptr_addr);
	}
	struct FIntPoint GetDrawSize() {
		return memory.read<struct FIntPoint>(m_addr + 1208);
	}
	bool GetbManuallyRedraw() {
		return memory.read<bool>(m_addr + 1216);
	}
	bool GetbRedrawRequested() {
		return memory.read<bool>(m_addr + 1217);
	}
	float GetRedrawTime() {
		return memory.read<float>(m_addr + 1220);
	}
	struct FIntPoint GetCurrentDrawSize() {
		return memory.read<struct FIntPoint>(m_addr + 1232);
	}
	bool GetbDrawAtDesiredSize() {
		return memory.read<bool>(m_addr + 1240);
	}
	struct FVector2D GetPivot() {
		return memory.read<struct FVector2D>(m_addr + 1244);
	}
	bool GetbReceiveHardwareInput() {
		return memory.read<bool>(m_addr + 1252);
	}
	bool GetbWindowFocusable() {
		return memory.read<bool>(m_addr + 1253);
	}
	enum class EWindowVisibility GetWindowVisibility() {
		return memory.read<enum class EWindowVisibility>(m_addr + 1254);
	}
	bool GetbApplyGammaCorrection() {
		return memory.read<bool>(m_addr + 1255);
	}
	struct ULocalPlayer GetOwnerPlayer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1256);
		return struct ULocalPlayer(ptr_addr);
	}
	struct FLinearColor GetBackgroundColor() {
		return memory.read<struct FLinearColor>(m_addr + 1264);
	}
	struct FLinearColor GetTintColorAndOpacity() {
		return memory.read<struct FLinearColor>(m_addr + 1280);
	}
	float GetOpacityFromTexture() {
		return memory.read<float>(m_addr + 1296);
	}
	enum class EWidgetBlendMode GetBlendMode() {
		return memory.read<enum class EWidgetBlendMode>(m_addr + 1300);
	}
	bool GetbIsTwoSided() {
		return memory.read<bool>(m_addr + 1301);
	}
	bool GetTickWhenOffscreen() {
		return memory.read<bool>(m_addr + 1302);
	}
	struct UBodySetup GetBodySetup() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1304);
		return struct UBodySetup(ptr_addr);
	}
	struct UMaterialInterface GetTranslucentMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1312);
		return struct UMaterialInterface(ptr_addr);
	}
	struct UMaterialInterface GetTranslucentMaterial_OneSided() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1320);
		return struct UMaterialInterface(ptr_addr);
	}
	struct UMaterialInterface GetOpaqueMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1328);
		return struct UMaterialInterface(ptr_addr);
	}
	struct UMaterialInterface GetOpaqueMaterial_OneSided() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1336);
		return struct UMaterialInterface(ptr_addr);
	}
	struct UMaterialInterface GetMaskedMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1344);
		return struct UMaterialInterface(ptr_addr);
	}
	struct UMaterialInterface GetMaskedMaterial_OneSided() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1352);
		return struct UMaterialInterface(ptr_addr);
	}
	struct UTextureRenderTarget2D GetRenderTarget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1360);
		return struct UTextureRenderTarget2D(ptr_addr);
	}
	struct UMaterialInstanceDynamic GetMaterialInstance() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1368);
		return struct UMaterialInstanceDynamic(ptr_addr);
	}
	bool GetbAddedToScreen() {
		return memory.read<bool>(m_addr + 1376);
	}
	bool GetbEditTimeUsable() {
		return memory.read<bool>(m_addr + 1377);
	}
	struct FName GetSharedLayerName() {
		return memory.read<struct FName>(m_addr + 1380);
	}
	int32_t GetLayerZOrder() {
		return memory.read<int32_t>(m_addr + 1388);
	}
	enum class EWidgetGeometryMode GetGeometryMode() {
		return memory.read<enum class EWidgetGeometryMode>(m_addr + 1392);
	}
	float GetCylinderArcAngle() {
		return memory.read<float>(m_addr + 1396);
	}
	enum class ETickMode GetTickMode() {
		return memory.read<enum class ETickMode>(m_addr + 1400);
	}
	struct UUserWidget GetWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1440);
		return struct UUserWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMajorPersonalResultPlayerWidget
{
public:
	UMajorPersonalResultPlayerWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UImage GetImage_RankBackground() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UImage(ptr_addr);
	}
	struct UImage GetImage_CenterBackground() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UImage(ptr_addr);
	}
	struct UImage GetImage_TailBackground() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UImage(ptr_addr);
	}
	struct UImage GetImage_RetireOverlay() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UImage(ptr_addr);
	}
	struct UTextBlock GetText_Rank() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UTextBlock(ptr_addr);
	}
	struct UPlatformIconWidget GetPlatformIconWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UPlatformIconWidget(ptr_addr);
	}
	struct UTextBlock GetText_PlayerID() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock GetText_LapTime() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UTextBlock(ptr_addr);
	}
	struct UImage GetImage_Clock() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UImage(ptr_addr);
	}
	struct UImage GetV_BeginnerCareIcon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UImage(ptr_addr);
	}
	struct UWidgetSwitcher GetWS_RaceResult() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UWidgetAnimation GetSlideInFromUp() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation GetSlideInFromDown() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct TMap<enum class ERaceTeamType, struct FSlateBrush> GetCenterBackGroundBrushContainer() {
		return memory.read<struct TMap<enum class ERaceTeamType, struct FSlateBrush>>(m_addr + 720);
	}
	struct TMap<enum class ERaceTeamType, struct FSlateBrush> GetRankBackGroundBrushContainer() {
		return memory.read<struct TMap<enum class ERaceTeamType, struct FSlateBrush>>(m_addr + 800);
	}
	struct TMap<enum class ERaceTeamType, struct FSlateBrush> GetTailBackGroundBrushContainer() {
		return memory.read<struct TMap<enum class ERaceTeamType, struct FSlateBrush>>(m_addr + 880);
	}
	struct FSlateBrush GetSelfRankBackGroundBrush() {
		return memory.read<struct FSlateBrush>(m_addr + 960);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMajorConnectRuleComponent
{
public:
	UMajorConnectRuleComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct APlayerStart> GetStartSpotContainer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 200);
		return struct TArray<struct APlayerStart>(ptr_addr);
	}
	struct TMap<struct FString, struct APawn> GetPawnContainer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 216);
		return struct TMap<struct FString, struct APawn>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UC_EmoticonPageWidget
{
public:
	UC_EmoticonPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPqCommandAddKartExp
{
public:
	UPqCommandAddKartExp(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAchievementPageWidget
{
public:
	UAchievementPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TWeakObjectPtr<UAchievementSummaryDialog> GetAchievementSummaryDialog() {
		return memory.read<struct TWeakObjectPtr<UAchievementSummaryDialog>>(m_addr + 744);
	}
	struct TWeakObjectPtr<UDialogTemplate> GetAchievementCardDetailDialog() {
		return memory.read<struct TWeakObjectPtr<UDialogTemplate>>(m_addr + 752);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrUnEquipKartSkill
{
public:
	UPrUnEquipKartSkill(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetunEquippedSkillNodeId() {
		return memory.read<struct FString>(m_addr + 72);
	}
	int32_t GetExp() {
		return memory.read<int32_t>(m_addr + 88);
	}
	int32_t GetremainPoint() {
		return memory.read<int32_t>(m_addr + 92);
	}
	bool GetbInit() {
		return memory.read<bool>(m_addr + 96);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqCommandPiggy
{
public:
	UPqCommandPiggy(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPqAuthNgm
{
public:
	UPqAuthNgm(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString Getenvironment() {
		return memory.read<struct FString>(m_addr + 96);
	}
	struct FString GetnexonPassport() {
		return memory.read<struct FString>(m_addr + 112);
	}
	struct FString GetnxHwid() {
		return memory.read<struct FString>(m_addr + 128);
	}
	bool GetbUseAccountLink() {
		return memory.read<bool>(m_addr + 144);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCreateLicenseReportWidget
{
public:
	UCreateLicenseReportWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UDialogTemplate GetLicenseMissionResultWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return struct UDialogTemplate(ptr_addr);
	}
	struct TSoftClassPtr<UObject> GetLicenseMissionResultWidgetClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 80);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAICondition_DiffRank
{
public:
	UAICondition_DiffRank(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FAIItemUse_DiffRankProbability> GetProbability() {
		return memory.read<struct TArray<struct FAIItemUse_DiffRankProbability>>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqCommandPCRoom
{
public:
	UPqCommandPCRoom(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AScenarioTriggerByGameplayControlType
{
public:
	AScenarioTriggerByGameplayControlType(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FScenarioTriggerTarget GetAutoTriggerContainer() {
		return memory.read<struct FScenarioTriggerTarget>(m_addr + 624);
	}
	struct FScenarioTriggerTarget GetMenualTriggerContainer() {
		return memory.read<struct FScenarioTriggerTarget>(m_addr + 656);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqCommandResetPlayLucci
{
public:
	UPqCommandResetPlayLucci(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPqVivoxJoinToken
{
public:
	UPqVivoxJoinToken(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetvivoxChannelName() {
		return memory.read<struct FString>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrGetAchievementInfo
{
public:
	UPrGetAchievementInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FKtAchievementInfo> Getproceeding() {
		return memory.read<struct TArray<struct FKtAchievementInfo>>(m_addr + 72);
	}
	struct TArray<struct FKtAchievementInfo> Getproceeded() {
		return memory.read<struct TArray<struct FKtAchievementInfo>>(m_addr + 88);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqCommandAddLucci
{
public:
	UPqCommandAddLucci(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPqCommandAddKoin
{
public:
	UPqCommandAddKoin(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPqUpdateMailReadMarker
{
public:
	UPqUpdateMailReadMarker(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FString> GetmailIds() {
		return memory.read<struct TArray<struct FString>>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTimeAttackPageWidget
{
public:
	UTimeAttackPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TWeakObjectPtr<UTimeAttackTrackChangeDialog> GetTrackChangeDialog() {
		return memory.read<struct TWeakObjectPtr<UTimeAttackTrackChangeDialog>>(m_addr + 744);
	}
	struct TWeakObjectPtr<UTimeAttackSelectRankerDialog> GetSelectRankerDialog() {
		return memory.read<struct TWeakObjectPtr<UTimeAttackSelectRankerDialog>>(m_addr + 752);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAnimNotifyState_TimedMulParticle
{
public:
	UAnimNotifyState_TimedMulParticle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetParticleLayer() {
		return memory.read<int32_t>(m_addr + 48);
	}
	struct TArray<struct UParticleSystem> GetAdditional_PSTemplate() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct TArray<struct UParticleSystem>(ptr_addr);
	}
	int32_t GetDefaultPlayParticle() {
		return memory.read<int32_t>(m_addr + 72);
	}
	struct UParticleSystem GetPSTemplate() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 80);
		return struct UParticleSystem(ptr_addr);
	}
	int32_t GetMirrorDetailLevel() {
		return memory.read<int32_t>(m_addr + 88);
	}
	struct FName GetSocketName() {
		return memory.read<struct FName>(m_addr + 92);
	}
	struct FVector GetLocationOffset() {
		return memory.read<struct FVector>(m_addr + 100);
	}
	struct FRotator GetRotationOffset() {
		return memory.read<struct FRotator>(m_addr + 112);
	}
	bool GetbDestroyAtEnd() {
		return memory.read<bool>(m_addr + 124);
	}
	bool GetbPlayAtEnd() {
		return memory.read<bool>(m_addr + 125);
	}

private:
	std::uint64_t m_addr = 0;
};


class UFollowCPMovementComponent
{
public:
	UFollowCPMovementComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetDestLocation() {
		return memory.read<struct FVector>(m_addr + 176);
	}
	struct FVector GetStartLocation() {
		return memory.read<struct FVector>(m_addr + 188);
	}
	float GetDistance() {
		return memory.read<float>(m_addr + 200);
	}
	float GetSpeed() {
		return memory.read<float>(m_addr + 204);
	}
	float GetIndex() {
		return memory.read<float>(m_addr + 208);
	}
	float GetOffset() {
		return memory.read<float>(m_addr + 212);
	}
	float GetLerpAlpha() {
		return memory.read<float>(m_addr + 216);
	}
	bool GetIsSetting() {
		return memory.read<bool>(m_addr + 220);
	}
	bool GetbSmoothMovement() {
		return memory.read<bool>(m_addr + 221);
	}
	struct ACheckPoint GetNextCP() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 224);
		return struct ACheckPoint(ptr_addr);
	}
	struct USplineComponent GetSplineGuide() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 232);
		return struct USplineComponent(ptr_addr);
	}
	struct FVector GetTargetDir() {
		return memory.read<struct FVector>(m_addr + 240);
	}
	float GetMinDistance() {
		return memory.read<float>(m_addr + 252);
	}
	float GetMaxDistance() {
		return memory.read<float>(m_addr + 256);
	}
	float GetSpeedModifier() {
		return memory.read<float>(m_addr + 260);
	}
	float GetAvoidModifier() {
		return memory.read<float>(m_addr + 264);
	}
	struct AActor GetUserActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 272);
		return struct AActor(ptr_addr);
	}
	int32_t GetID() {
		return memory.read<int32_t>(m_addr + 280);
	}
	float GetSpeedModifierByRank() {
		return memory.read<float>(m_addr + 284);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqPiggy
{
public:
	UPqPiggy(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UScenarioDescriptMessageWidget
{
public:
	UScenarioDescriptMessageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UKdTextBlock GetV_TextBlock_Name() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UKdTextBlock(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqCommandAddFreeKoin
{
public:
	UPqCommandAddFreeKoin(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPqCommandChangeName
{
public:
	UPqCommandChangeName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AKdHUD
{
public:
	AKdHUD(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPqDevUploadStringTable
{
public:
	UPqDevUploadStringTable(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetIndex() {
		return memory.read<int32_t>(m_addr + 56);
	}
	struct FString GetHash() {
		return memory.read<struct FString>(m_addr + 64);
	}
	bool Getquery() {
		return memory.read<bool>(m_addr + 80);
	}
	struct TMap<struct FString, struct FString> GetTable() {
		return memory.read<struct TMap<struct FString, struct FString>>(m_addr + 88);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqDevGetStringTable
{
public:
	UPqDevGetStringTable(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FString> GetKeys() {
		return memory.read<struct TArray<struct FString>>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UM_RacingPassPageWidget
{
public:
	UM_RacingPassPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UM_RacingPassRewardListItem GetListViewSelection() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 928);
		return struct UM_RacingPassRewardListItem(ptr_addr);
	}
	struct UM_RacingPassRewardListItem GetMaxTierListItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 936);
		return struct UM_RacingPassRewardListItem(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrDevGetStringTable
{
public:
	UPrDevGetStringTable(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<struct FString, struct FString> GetTable() {
		return memory.read<struct TMap<struct FString, struct FString>>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class ADeliveryZone
{
public:
	ADeliveryZone(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetVelocity() {
		return memory.read<struct FVector>(m_addr + 576);
	}
	float GetMultiplier() {
		return memory.read<float>(m_addr + 588);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKeyRebindingLibrary
{
public:
	UKeyRebindingLibrary(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPcInventoryUpdated
{
public:
	UPcInventoryUpdated(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FKtItemDiff> GetinventoryDataDiff() {
		return memory.read<struct TArray<struct FKtItemDiff>>(m_addr + 48);
	}
	struct TArray<struct FKtItemDiff> GetinventoryDataDiffSeason() {
		return memory.read<struct TArray<struct FKtItemDiff>>(m_addr + 64);
	}
	struct TArray<struct FKtItemDiff> GetinventoryDataDiffDefaultParts() {
		return memory.read<struct TArray<struct FKtItemDiff>>(m_addr + 80);
	}
	struct TArray<struct FKtItemDiff> GetinventoryDataDiffCash() {
		return memory.read<struct TArray<struct FKtItemDiff>>(m_addr + 96);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTransition_LicenseTitle
{
public:
	UTransition_LicenseTitle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UBuildCaptureLightListWidget
{
public:
	UBuildCaptureLightListWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPanelWidget GetPanel_BuildCaptureLightListItems() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UPanelWidget(ptr_addr);
	}
	struct TSoftClassPtr<UObject> GetBuildCaptureLightListItemClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 616);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqEmblemItemIdUpdate
{
public:
	UPqEmblemItemIdUpdate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetItemId() {
		return memory.read<struct FString>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPcEmblemItemIdUpdated
{
public:
	UPcEmblemItemIdUpdated(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetItemId() {
		return memory.read<struct FString>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};


class AItemShield
{
public:
	AItemShield(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UParticleSystemComponent GetUseShieldEffectComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 864);
		return struct UParticleSystemComponent(ptr_addr);
	}
	struct UParticleSystemComponent GetDefenseEffectComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 872);
		return struct UParticleSystemComponent(ptr_addr);
	}
	struct UItemComponent GetTarget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 880);
		return struct UItemComponent(ptr_addr);
	}
	struct TSoftObjectPtr<UFMODEvent> GetFiringFx() {
		return memory.read<struct TSoftObjectPtr<UFMODEvent>>(m_addr + 888);
	}
	struct TSoftObjectPtr<UFMODEvent> GetUsingFx() {
		return memory.read<struct TSoftObjectPtr<UFMODEvent>>(m_addr + 928);
	}
	struct TSoftObjectPtr<UParticleSystem> GetUseShieldEffectPath() {
		return memory.read<struct TSoftObjectPtr<UParticleSystem>>(m_addr + 968);
	}
	struct TSoftObjectPtr<UParticleSystem> GetDefenseEffectPath() {
		return memory.read<struct TSoftObjectPtr<UParticleSystem>>(m_addr + 1008);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAddDashboard
{
public:
	UAddDashboard(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftClassPtr<UObject> GetDashboardClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTimeAttackSelectRankerDialog
{
public:
	UTimeAttackSelectRankerDialog(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UShopWidgetLogicComponent
{
public:
	UShopWidgetLogicComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKtItemPreset GetEquipItemPreset() {
		return memory.read<struct FKtItemPreset>(m_addr + 296);
	}
	struct TArray<struct FString> GetEquipItems() {
		return memory.read<struct TArray<struct FString>>(m_addr + 456);
	}
	struct FString GetSelectedCurrency() {
		return memory.read<struct FString>(m_addr + 504);
	}
	struct FString GetGiftReceiver() {
		return memory.read<struct FString>(m_addr + 520);
	}
	struct FString GetPurchaseShopStockID() {
		return memory.read<struct FString>(m_addr + 536);
	}
	int32_t GetPurchaseShopStockIndex() {
		return memory.read<int32_t>(m_addr + 552);
	}

private:
	std::uint64_t m_addr = 0;
};


class UC_TimeAttackPageWidget
{
public:
	UC_TimeAttackPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPqItemPresetOnUpdate
{
public:
	UPqItemPresetOnUpdate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKtItemPreset GetitemPreset() {
		return memory.read<struct FKtItemPreset>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrItemPresetOnUpdate
{
public:
	UPrItemPresetOnUpdate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKtItemPreset GetitemPreset() {
		return memory.read<struct FKtItemPreset>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class AItemMagnet
{
public:
	AItemMagnet(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftObjectPtr<UFMODEvent> GetFiringSound() {
		return memory.read<struct TSoftObjectPtr<UFMODEvent>>(m_addr + 864);
	}

private:
	std::uint64_t m_addr = 0;
};


class USpeedSinglePhaseComponent
{
public:
	USpeedSinglePhaseComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPcCustomGame
{
public:
	UPcCustomGame(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetSessionId() {
		return memory.read<struct FString>(m_addr + 48);
	}
	bool GetinfoValid() {
		return memory.read<bool>(m_addr + 64);
	}
	struct FCustomGameInfo GetInfo() {
		return memory.read<struct FCustomGameInfo>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class AItemTeamBooster
{
public:
	AItemTeamBooster(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPqItemPresetSave
{
public:
	UPqItemPresetSave(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetitemPresetIdx() {
		return memory.read<int32_t>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrItemPresetSave
{
public:
	UPrItemPresetSave(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetitemPresetIdx() {
		return memory.read<int32_t>(m_addr + 72);
	}
	struct FKtItemPreset GetitemPreset() {
		return memory.read<struct FKtItemPreset>(m_addr + 80);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicenseDescData
{
public:
	ULicenseDescData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetPlayTime() {
		return memory.read<float>(m_addr + 64);
	}
	struct TArray<struct FString> GetDescList() {
		return memory.read<struct TArray<struct FString>>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqItemPresetLoad
{
public:
	UPqItemPresetLoad(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetitemPresetIdx() {
		return memory.read<int32_t>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTransition_Podium
{
public:
	UTransition_Podium(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UWqHttpReply
{
public:
	UWqHttpReply(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetstatusCode() {
		return memory.read<int32_t>(m_addr + 48);
	}
	struct FString GetContentType() {
		return memory.read<struct FString>(m_addr + 56);
	}
	struct FString GetbodyBase64() {
		return memory.read<struct FString>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCreateBossWarningWidget
{
public:
	UCreateBossWarningWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftClassPtr<UObject> GetBossWarningWidgetClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 72);
	}
	float GetTotalTime() {
		return memory.read<float>(m_addr + 112);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrItemPresetLoad
{
public:
	UPrItemPresetLoad(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKtItemPreset GetitemPreset() {
		return memory.read<struct FKtItemPreset>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqSendEmoticon
{
public:
	UPqSendEmoticon(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetemoticonType() {
		return memory.read<struct FString>(m_addr + 56);
	}
	struct FString GetemotionItemId() {
		return memory.read<struct FString>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqItemPresetDelete
{
public:
	UPqItemPresetDelete(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetitemPresetIdx() {
		return memory.read<int32_t>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCameraWaterSplashComponent
{
public:
	UCameraWaterSplashComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UKdServerConfig
{
public:
	UKdServerConfig(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FKdServerAddrConfig> GetServerAddrs() {
		return memory.read<struct TArray<struct FKdServerAddrConfig>>(m_addr + 40);
	}
	struct FString GetServerListUrl() {
		return memory.read<struct FString>(m_addr + 56);
	}
	struct TArray<struct FKdServerListUrlConfig> GetServerListUrls() {
		return memory.read<struct TArray<struct FKdServerListUrlConfig>>(m_addr + 72);
	}
	struct FString GetPreAuthKey() {
		return memory.read<struct FString>(m_addr + 88);
	}
	struct TArray<struct FString> GetRules() {
		return memory.read<struct TArray<struct FString>>(m_addr + 104);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMajorResultWidgetComponent
{
public:
	UMajorResultWidgetComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UMajorResultWidget GetWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 176);
		return UMajorResultWidget(ptr_addr);
	}
	UMajorResultPlayerWidget GetPlayerWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 184);
		return UMajorResultPlayerWidget(ptr_addr);
	}
	UMajorResultTeamPointWidget GetCornerWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 192);
		return UMajorResultTeamPointWidget(ptr_addr);
	}
	struct UMajorResultWidget GetFinalResultWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 200);
		return struct UMajorResultWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAIItemUseCondition
{
public:
	UAIItemUseCondition(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetPlayer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct AActor(ptr_addr);
	}
	float GetRemainDistance() {
		return memory.read<float>(m_addr + 60);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrItemPresetDelete
{
public:
	UPrItemPresetDelete(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetitemPresetIdx() {
		return memory.read<int32_t>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPcKartBodyParamUpdated
{
public:
	UPcKartBodyParamUpdated(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetbodyParamStr() {
		return memory.read<struct FString>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqLiveryUpdate
{
public:
	UPqLiveryUpdate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKtLivery Getlivery() {
		return memory.read<struct FKtLivery>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrLiveryUpdate
{
public:
	UPrLiveryUpdate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKtLivery Getlivery() {
		return memory.read<struct FKtLivery>(m_addr + 72);
	}
	struct FKtDataStorePayload GetdataStoreLink() {
		return memory.read<struct FKtDataStorePayload>(m_addr + 152);
	}

private:
	std::uint64_t m_addr = 0;
};


class UShadowQuestTravelData
{
public:
	UShadowQuestTravelData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FShadowQuestInfo GetInfo() {
		return memory.read<struct FShadowQuestInfo>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};


class UC_GrandPrixPageWidget
{
public:
	UC_GrandPrixPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPqLiveryDelete
{
public:
	UPqLiveryDelete(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetliveryId() {
		return memory.read<struct FString>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UActivateRaceRecord
{
public:
	UActivateRaceRecord(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UC_EventPageWidget
{
public:
	UC_EventPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULicenseGaugeChargeInterface
{
public:
	ULicenseGaugeChargeInterface(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class USequenceBaseComponent
{
public:
	USequenceBaseComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UTransition_LicenseBossLossRule
{
public:
	UTransition_LicenseBossLossRule(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrLiveryStickerUpdate
{
public:
	UPrLiveryStickerUpdate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKtLiverySticker GetliverySticker() {
		return memory.read<struct FKtLiverySticker>(m_addr + 72);
	}
	struct FKtDataStorePayload GetdataStoreLink() {
		return memory.read<struct FKtDataStorePayload>(m_addr + 128);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrTimeAttackGetTracks
{
public:
	UPrTimeAttackGetTracks(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FKtTimeAttackTrack> GettrackList() {
		return memory.read<struct TArray<struct FKtTimeAttackTrack>>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class AScenarioTriggerByCondition
{
public:
	AScenarioTriggerByCondition(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FScenarioCondition> GetConditionContainer() {
		return memory.read<struct TArray<struct FScenarioCondition>>(m_addr + 624);
	}
	struct TArray<struct FScenarioTriggerTarget> GetTriggerContainer() {
		return memory.read<struct TArray<struct FScenarioTriggerTarget>>(m_addr + 640);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqLiveryStickerDelete
{
public:
	UPqLiveryStickerDelete(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetliveryStickerId() {
		return memory.read<struct FString>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqCommandResetQuest
{
public:
	UPqCommandResetQuest(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrLiveryStickerDelete
{
public:
	UPrLiveryStickerDelete(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetliveryStickerId() {
		return memory.read<struct FString>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPcPlayLucciUpdated
{
public:
	UPcPlayLucciUpdated(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKtPlayLucciInfo Getlucci() {
		return memory.read<struct FKtPlayLucciInfo>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTimeAttackServerRequester
{
public:
	UTimeAttackServerRequester(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<struct FString, struct FTimeAttackCache> GetTimeAttackCacheMap() {
		return memory.read<struct TMap<struct FString, struct FTimeAttackCache>>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrFindRider
{
public:
	UPrFindRider(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FAccountPlatformDataKt GetaccountData() {
		return memory.read<struct FAccountPlatformDataKt>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqVivoxLoginToken
{
public:
	UPqVivoxLoginToken(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPqCreateParty
{
public:
	UPqCreateParty(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetTargetAccountId() {
		return memory.read<struct FString>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrLicenseClear
{
public:
	UPrLicenseClear(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetlicenseGroupId() {
		return memory.read<struct FString>(m_addr + 72);
	}
	struct FString GetlicenseMissionId() {
		return memory.read<struct FString>(m_addr + 88);
	}
	int32_t GetstarCount() {
		return memory.read<int32_t>(m_addr + 104);
	}
	struct FKtLicenseData GetlicenseData() {
		return memory.read<struct FKtLicenseData>(m_addr + 112);
	}

private:
	std::uint64_t m_addr = 0;
};


class ALicenseGameState
{
public:
	ALicenseGameState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrCreateParty
{
public:
	UPrCreateParty(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPqInviteParty
{
public:
	UPqInviteParty(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetTargetAccountId() {
		return memory.read<struct FString>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicenseAllySpawnComponent
{
public:
	ULicenseAllySpawnComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ULicenseAllyActorData GetData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 192);
		return struct ULicenseAllyActorData(ptr_addr);
	}
	struct AActor GetPawn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 200);
		return struct AActor(ptr_addr);
	}
	struct TMap<struct AActor, int32_t> GetSpawnedActors() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 208);
		return struct TMap<struct AActor, int32_t>(ptr_addr);
	}
	enum class EItemType GetLastUseItemType() {
		return memory.read<enum class EItemType>(m_addr + 288);
	}
	float GetEventLastTime() {
		return memory.read<float>(m_addr + 292);
	}
	bool GetbSuccess() {
		return memory.read<bool>(m_addr + 296);
	}
	bool GetbFail() {
		return memory.read<bool>(m_addr + 297);
	}
	struct UCurveFloat GetSpawnCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 304);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat GetDestroyCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 312);
		return struct UCurveFloat(ptr_addr);
	}
	int32_t GetCombo() {
		return memory.read<int32_t>(m_addr + 320);
	}
	int32_t GetScore() {
		return memory.read<int32_t>(m_addr + 324);
	}
	struct TSoftObjectPtr<UCurveFloat> GetCurveFloat() {
		return memory.read<struct TSoftObjectPtr<UCurveFloat>>(m_addr + 360);
	}
	struct TSoftObjectPtr<UCurveFloat> GetCurveFloat2() {
		return memory.read<struct TSoftObjectPtr<UCurveFloat>>(m_addr + 400);
	}
	struct TSoftObjectPtr<UStaticMesh> GetAIKartMesh() {
		return memory.read<struct TSoftObjectPtr<UStaticMesh>>(m_addr + 440);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrInviteParty
{
public:
	UPrInviteParty(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetTargetAccountId() {
		return memory.read<struct FString>(m_addr + 72);
	}
	enum class EPartyJoinFailReason GetinviteFailReason() {
		return memory.read<enum class EPartyJoinFailReason>(m_addr + 88);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKdServerLoginTaskMobile
{
public:
	UKdServerLoginTaskMobile(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAISpeedTeamComponent
{
public:
	UAISpeedTeamComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAnimNotifyState_TimeAttachMesh
{
public:
	UAnimNotifyState_TimeAttachMesh(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct USkeletalMesh> GetAttachingItems() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct TArray<struct USkeletalMesh>(ptr_addr);
	}
	struct TArray<struct UAnimSequenceBase> GetAttachingItemsAnim() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 64);
		return struct TArray<struct UAnimSequenceBase>(ptr_addr);
	}
	int32_t GetDefaultAttachIndex() {
		return memory.read<int32_t>(m_addr + 80);
	}
	struct USkeletalMesh GetAdditional_PrimitiveComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 88);
		return struct USkeletalMesh(ptr_addr);
	}
	struct UAnimSequenceBase GetAdditional_Animations() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 96);
		return struct UAnimSequenceBase(ptr_addr);
	}
	bool GetbLoop() {
		return memory.read<bool>(m_addr + 104);
	}
	struct FName GetSocketName() {
		return memory.read<struct FName>(m_addr + 108);
	}
	struct FVector GetLocationOffset() {
		return memory.read<struct FVector>(m_addr + 116);
	}
	struct FRotator GetRotationOffset() {
		return memory.read<struct FRotator>(m_addr + 128);
	}
	bool GetbUseCustomDepth() {
		return memory.read<bool>(m_addr + 140);
	}
	int32_t GetCustomDepthStencilValue() {
		return memory.read<int32_t>(m_addr + 144);
	}
	enum class ERendererStencilMask GetRendererStencilMask() {
		return memory.read<enum class ERendererStencilMask>(m_addr + 148);
	}
	float GetAnimTime() {
		return memory.read<float>(m_addr + 152);
	}
	struct TArray<struct FAttachedMeshCurveData> GetCurveValue() {
		return memory.read<struct TArray<struct FAttachedMeshCurveData>>(m_addr + 160);
	}

private:
	std::uint64_t m_addr = 0;
};


class AScenarioTriggerByMessageHUD
{
public:
	AScenarioTriggerByMessageHUD(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FScenarioMessageHUDWidgetDataGroup GetDataGroup() {
		return memory.read<struct FScenarioMessageHUDWidgetDataGroup>(m_addr + 624);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrMyInfo
{
public:
	UPrMyInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FString> GetTag() {
		return memory.read<struct TArray<struct FString>>(m_addr + 72);
	}
	struct TArray<struct FKtRecentActivity> GetrecentActivity() {
		return memory.read<struct TArray<struct FKtRecentActivity>>(m_addr + 88);
	}
	struct FKtRaceCount GetracingCount() {
		return memory.read<struct FKtRaceCount>(m_addr + 104);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqAskInviteParty
{
public:
	UPqAskInviteParty(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetTargetAccountId() {
		return memory.read<struct FString>(m_addr + 56);
	}
	struct FString GetPartyId() {
		return memory.read<struct FString>(m_addr + 72);
	}
	enum class EPartyInviteAckType Getack() {
		return memory.read<enum class EPartyInviteAckType>(m_addr + 88);
	}
	enum class EPartyJoinFailReason GetReason() {
		return memory.read<enum class EPartyJoinFailReason>(m_addr + 92);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPcAskInviteParty
{
public:
	UPcAskInviteParty(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetTargetAccountId() {
		return memory.read<struct FString>(m_addr + 48);
	}
	struct FString GetPartyId() {
		return memory.read<struct FString>(m_addr + 64);
	}
	struct FString GetInviteUserName() {
		return memory.read<struct FString>(m_addr + 80);
	}
	struct FKtAccountProfile GetinviteUserProfile() {
		return memory.read<struct FKtAccountProfile>(m_addr + 96);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrAskInviteParty
{
public:
	UPrAskInviteParty(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FPartyMemberInfo> Getmembers() {
		return memory.read<struct TArray<struct FPartyMemberInfo>>(m_addr + 72);
	}
	struct FPartyInfo GetPartyInfo() {
		return memory.read<struct FPartyInfo>(m_addr + 88);
	}

private:
	std::uint64_t m_addr = 0;
};


class URemoveLoadingScreenRule
{
public:
	URemoveLoadingScreenRule(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AItemAngel
{
public:
	AItemAngel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftObjectPtr<UFMODEvent> GetDefendedSound() {
		return memory.read<struct TSoftObjectPtr<UFMODEvent>>(m_addr + 864);
	}
	struct TSoftObjectPtr<UParticleSystem> GetDefendedEffect() {
		return memory.read<struct TSoftObjectPtr<UParticleSystem>>(m_addr + 904);
	}
	struct TArray<struct UItemComponent> GetAuthVictims() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 944);
		return struct TArray<struct UItemComponent>(ptr_addr);
	}
	struct TArray<struct UItemComponent> GetLocalVictims() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 960);
		return struct TArray<struct UItemComponent>(ptr_addr);
	}
	float GetLifeSpanTime() {
		return memory.read<float>(m_addr + 976);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAccountShadowQuest
{
public:
	UAccountShadowQuest(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRaceSaveGameLatestPtr GetReplayFile() {
		return memory.read<struct FRaceSaveGameLatestPtr>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrReportLiveryInfo
{
public:
	UPrReportLiveryInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetriderName() {
		return memory.read<struct FString>(m_addr + 72);
	}
	struct TArray<struct FKtLivery> GetliveryVector() {
		return memory.read<struct TArray<struct FKtLivery>>(m_addr + 88);
	}
	struct TArray<struct FString> GetliverySignedUrlVector() {
		return memory.read<struct TArray<struct FString>>(m_addr + 104);
	}
	struct TArray<struct FKtLiverySticker> GetliveryStickerVector() {
		return memory.read<struct TArray<struct FKtLiverySticker>>(m_addr + 120);
	}
	struct TArray<struct FString> GetliveryStickerSignedUrlVector() {
		return memory.read<struct TArray<struct FString>>(m_addr + 136);
	}

private:
	std::uint64_t m_addr = 0;
};


class UEnableSignificant
{
public:
	UEnableSignificant(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPqRequestJoinParty
{
public:
	UPqRequestJoinParty(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetTargetAccountId() {
		return memory.read<struct FString>(m_addr + 56);
	}
	struct FString GetPartyId() {
		return memory.read<struct FString>(m_addr + 72);
	}
	bool GetisPlatformAction() {
		return memory.read<bool>(m_addr + 88);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrGetGrandPrixRankBoard
{
public:
	UPrGetGrandPrixRankBoard(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FKtRankerInfo> GetrankerList() {
		return memory.read<struct TArray<struct FKtRankerInfo>>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicenseCoinData
{
public:
	ULicenseCoinData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetHitWallLoseCoinNum() {
		return memory.read<int32_t>(m_addr + 72);
	}
	struct TSoftObjectPtr<UStaticMesh> GetCoinMeshClass() {
		return memory.read<struct TSoftObjectPtr<UStaticMesh>>(m_addr + 80);
	}
	struct TSoftObjectPtr<UParticleSystem> GetParticle() {
		return memory.read<struct TSoftObjectPtr<UParticleSystem>>(m_addr + 120);
	}
	struct TMap<enum class ELicenseCoinType, struct FLicenseCoinTypeInfo> GetCoinTypeMap() {
		return memory.read<struct TMap<enum class ELicenseCoinType, struct FLicenseCoinTypeInfo>>(m_addr + 160);
	}
	struct FString GetCheckPointName() {
		return memory.read<struct FString>(m_addr + 240);
	}
	bool GetbUpdateObjectSpawnSplineData() {
		return memory.read<bool>(m_addr + 256);
	}
	bool GetbCreateLicenseObjectSpawnSplines() {
		return memory.read<bool>(m_addr + 257);
	}
	struct TArray<struct FLicenseCoinActorInfo> GetSpawnActorDataList() {
		return memory.read<struct TArray<struct FLicenseCoinActorInfo>>(m_addr + 264);
	}
	struct TArray<struct FLicenseObjectSpawnSplineData> GetObjectSpawnSplineDataList() {
		return memory.read<struct TArray<struct FLicenseObjectSpawnSplineData>>(m_addr + 280);
	}

private:
	std::uint64_t m_addr = 0;
};


class UActiveCheckWrongWay
{
public:
	UActiveCheckWrongWay(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULoadStatics
{
public:
	ULoadStatics(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrGetEventChallengeInfo
{
public:
	UPrGetEventChallengeInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FKtEventChallengeInfo> Getproceeding() {
		return memory.read<struct TArray<struct FKtEventChallengeInfo>>(m_addr + 72);
	}
	struct TArray<struct FKtEventChallengeInfo> Getproceeded() {
		return memory.read<struct TArray<struct FKtEventChallengeInfo>>(m_addr + 88);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqGetGrandPrixRankBoard
{
public:
	UPqGetGrandPrixRankBoard(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetgrandPrixId() {
		return memory.read<struct FString>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTargetFinderInterface
{
public:
	UTargetFinderInterface(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UDrDediRequestGameSessionData
{
public:
	UDrDediRequestGameSessionData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetSessionRequest() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return struct UObject(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPcRequestJoinParty
{
public:
	UPcRequestJoinParty(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FPartyMemberInfo> Getmembers() {
		return memory.read<struct TArray<struct FPartyMemberInfo>>(m_addr + 48);
	}
	struct FPartyInfo GetPartyInfo() {
		return memory.read<struct FPartyInfo>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPcRequestAskJoinParty
{
public:
	UPcRequestAskJoinParty(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetTargetAccountId() {
		return memory.read<struct FString>(m_addr + 48);
	}
	struct FKtAccountProfile GetTargetProfile() {
		return memory.read<struct FKtAccountProfile>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqRequestAskJoinParty
{
public:
	UPqRequestAskJoinParty(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetTargetAccountId() {
		return memory.read<struct FString>(m_addr + 56);
	}
	struct FKtAccountProfile GetTargetProfile() {
		return memory.read<struct FKtAccountProfile>(m_addr + 72);
	}
	enum class EPartyInviteAckType Getack() {
		return memory.read<enum class EPartyInviteAckType>(m_addr + 168);
	}
	enum class EPartyJoinFailReason GetReason() {
		return memory.read<enum class EPartyJoinFailReason>(m_addr + 172);
	}

private:
	std::uint64_t m_addr = 0;
};


class URocketFirstRankReaction
{
public:
	URocketFirstRankReaction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPeriodExecuteLogicComponent
{
public:
	UPeriodExecuteLogicComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrRequestAskJoinParty
{
public:
	UPrRequestAskJoinParty(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FPartyMemberInfo> Getmembers() {
		return memory.read<struct TArray<struct FPartyMemberInfo>>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKdAnimationComponent
{
public:
	UKdAnimationComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	AActor GetDummyItemClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 184);
		return AActor(ptr_addr);
	}
	enum class ECharacterMontage GetPlayingCharacterMontageState() {
		return memory.read<enum class ECharacterMontage>(m_addr + 192);
	}
	enum class EPlayingAnimPriority GetPlayingCharacterAnimPriority() {
		return memory.read<enum class EPlayingAnimPriority>(m_addr + 193);
	}
	enum class EKartPlayingMontageState GetPlayingKartMontageState() {
		return memory.read<enum class EKartPlayingMontageState>(m_addr + 194);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicensePageWidget
{
public:
	ULicensePageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UListView GetMissionListView() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 760);
		return struct UListView(ptr_addr);
	}
	struct UListView GetRewardItemListView() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 768);
		return struct UListView(ptr_addr);
	}
	struct UListView GetOpenContentsListView() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 776);
		return struct UListView(ptr_addr);
	}
	struct ULicenseMissionListEntry GetPrevSelectedMissionObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 784);
		return struct ULicenseMissionListEntry(ptr_addr);
	}
	struct UDialogTemplate GetLicenseClearPopup() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 792);
		return struct UDialogTemplate(ptr_addr);
	}
	struct TSoftClassPtr<UObject> GetPauseDescWidgetClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 832);
	}
	struct TSoftClassPtr<UObject> GetUseItemEntryWidgetClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 872);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPcRequestAskJoinPartyReply
{
public:
	UPcRequestAskJoinPartyReply(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool Getask() {
		return memory.read<bool>(m_addr + 48);
	}
	struct FString GetPartyId() {
		return memory.read<struct FString>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UActivateVivox
{
public:
	UActivateVivox(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPcRequestAskCreateParty
{
public:
	UPcRequestAskCreateParty(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetTargetAccountId() {
		return memory.read<struct FString>(m_addr + 48);
	}
	struct FKtAccountProfile GetTargetProfile() {
		return memory.read<struct FKtAccountProfile>(m_addr + 64);
	}
	int32_t GetrecvPackId() {
		return memory.read<int32_t>(m_addr + 160);
	}
	bool GetisPlatformAction() {
		return memory.read<bool>(m_addr + 164);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqRequestAskCreateParty
{
public:
	UPqRequestAskCreateParty(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetTargetAccountId() {
		return memory.read<struct FString>(m_addr + 56);
	}
	int32_t GetrecvPackId() {
		return memory.read<int32_t>(m_addr + 72);
	}
	enum class EPartyInviteAckType Getack() {
		return memory.read<enum class EPartyInviteAckType>(m_addr + 76);
	}
	enum class EPartyJoinFailReason GetReason() {
		return memory.read<enum class EPartyJoinFailReason>(m_addr + 80);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKdPawnSpawner
{
public:
	UKdPawnSpawner(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UDelegateBarrierMany GetBarrier() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct UDelegateBarrierMany(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULqGetStockTag
{
public:
	ULqGetStockTag(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<int32_t> GettagId() {
		return memory.read<struct TArray<int32_t>>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrRequestAskCreateParty
{
public:
	UPrRequestAskCreateParty(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULoginPageWidget
{
public:
	ULoginPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UKdTextBlock GetserverName() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 744);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UEditableText GetIdBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 752);
		return struct UEditableText(ptr_addr);
	}
	struct TWeakObjectPtr<URiderNameChangeDialog> GetNickNameCreationWidget() {
		return memory.read<struct TWeakObjectPtr<URiderNameChangeDialog>>(m_addr + 760);
	}
	struct UDialogTemplate GetCurrentStandbyDialog() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 800);
		return struct UDialogTemplate(ptr_addr);
	}
	struct TSoftObjectPtr<UMediaPlaylist> GetPatchMovie() {
		return memory.read<struct TSoftObjectPtr<UMediaPlaylist>>(m_addr + 824);
	}
	struct TArray<struct TSoftObjectPtr<UMediaPlaylist>> GetCinematicSeasonPlayLists() {
		return memory.read<struct TArray<struct TSoftObjectPtr<UMediaPlaylist>>>(m_addr + 864);
	}
	struct TArray<struct TSoftObjectPtr<UMediaPlaylist>> GetCinematicMainPlayLists() {
		return memory.read<struct TArray<struct TSoftObjectPtr<UMediaPlaylist>>>(m_addr + 880);
	}
	struct TSoftObjectPtr<UTexture2D> GetPatchImage() {
		return memory.read<struct TSoftObjectPtr<UTexture2D>>(m_addr + 896);
	}
	struct UDialogTemplate GetCurrentPatcherDialog() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 936);
		return struct UDialogTemplate(ptr_addr);
	}
	struct UPatcherEvent GetCurrentPatcherEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 944);
		return struct UPatcherEvent(ptr_addr);
	}
	struct UDialogTemplate GetCurrentPatcherEventDialog() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 952);
		return struct UDialogTemplate(ptr_addr);
	}
	float GetGuideAgeAnim_StartTime() {
		return memory.read<float>(m_addr + 996);
	}
	struct UKdServerList GetCurrentServerList() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1000);
		return struct UKdServerList(ptr_addr);
	}
	struct TWeakObjectPtr<UGameplayControlTypeSelectDialog> GetCurrentGameplayControlTypeSelectDialog() {
		return memory.read<struct TWeakObjectPtr<UGameplayControlTypeSelectDialog>>(m_addr + 1008);
	}
	struct UDialogTemplate GetKeySelectDialog() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1016);
		return struct UDialogTemplate(ptr_addr);
	}
	struct TWeakObjectPtr<UDialogTemplate> GetCinematicSeasonDialog() {
		return memory.read<struct TWeakObjectPtr<UDialogTemplate>>(m_addr + 1024);
	}
	struct TWeakObjectPtr<UDialogTemplate> GetCinematicMainDialog() {
		return memory.read<struct TWeakObjectPtr<UDialogTemplate>>(m_addr + 1032);
	}

private:
	std::uint64_t m_addr = 0;
};


class UC_LicensePageWidget
{
public:
	UC_LicensePageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AScenarioTriggerByKartSpeed
{
public:
	AScenarioTriggerByKartSpeed(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetMinSpeed() {
		return memory.read<float>(m_addr + 624);
	}
	float GetCoolTime() {
		return memory.read<float>(m_addr + 628);
	}
	struct FScenarioTriggerTarget GetTriggerContainer() {
		return memory.read<struct FScenarioTriggerTarget>(m_addr + 632);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqAccountUnlinkAll
{
public:
	UPqAccountUnlinkAll(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UKartUpgradePageWidget
{
public:
	UKartUpgradePageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct UParticleSystemComponent> GetGearApplyParticlesInPlay() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 832);
		return struct TArray<struct UParticleSystemComponent>(ptr_addr);
	}
	struct TSoftObjectPtr<UKartUpgradeEffectAsset> GetUpgradeEffectAsset() {
		return memory.read<struct TSoftObjectPtr<UKartUpgradeEffectAsset>>(m_addr + 872);
	}
	struct TArray<struct UParticleSystemComponent> GetUpgradeParticleList() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 912);
		return struct TArray<struct UParticleSystemComponent>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqQuitParty
{
public:
	UPqQuitParty(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetPartyId() {
		return memory.read<struct FString>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqUpdateChannelPlayerInfo
{
public:
	UPqUpdateChannelPlayerInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<struct FString, struct FString> GetUpdate() {
		return memory.read<struct TMap<struct FString, struct FString>>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicenseListItemWidget
{
public:
	ULicenseListItemWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FSlateBrush GetInst_EmblemLogo() {
		return memory.read<struct FSlateBrush>(m_addr + 608);
	}
	struct FSlateBrush GetInst_EmblemLogo_NotGain() {
		return memory.read<struct FSlateBrush>(m_addr + 744);
	}
	struct FLinearColor GetInst_EmblemLineColor1() {
		return memory.read<struct FLinearColor>(m_addr + 880);
	}
	struct FLinearColor GetInst_EmblemLineColor2() {
		return memory.read<struct FLinearColor>(m_addr + 896);
	}
	struct ULicenseCardEmblemWidget GetV_Emblem_NotGain() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 912);
		return struct ULicenseCardEmblemWidget(ptr_addr);
	}
	struct ULicenseCardEmblemWidget GetV_Emblem_Bronze() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 920);
		return struct ULicenseCardEmblemWidget(ptr_addr);
	}
	struct ULicenseCardEmblemWidget GetV_Emblem_Silver() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 928);
		return struct ULicenseCardEmblemWidget(ptr_addr);
	}
	struct ULicenseCardEmblemWidget GetV_Emblem_Gold() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 936);
		return struct ULicenseCardEmblemWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrQuitParty
{
public:
	UPrQuitParty(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UHostGameStartRace
{
public:
	UHostGameStartRace(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AKdPlayerController
{
public:
	AKdPlayerController(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UKdSingleton
{
public:
	UKdSingleton(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPqPartyBossChange
{
public:
	UPqPartyBossChange(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetTargetAccountId() {
		return memory.read<struct FString>(m_addr + 56);
	}
	struct FString GetTargetName() {
		return memory.read<struct FString>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicenseMissionGoalWidget
{
public:
	ULicenseMissionGoalWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UKdTextBlock GetV_DescText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UWidgetAnimation GetAnim_Appear() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation GetAnim_Disappear() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UWidgetAnimation(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UDqQueryDebugSession
{
public:
	UDqQueryDebugSession(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetName() {
		return memory.read<struct FString>(m_addr + 56);
	}
	struct FSessionDebugRequest Getreq() {
		return memory.read<struct FSessionDebugRequest>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrPartyBossChange
{
public:
	UPrPartyBossChange(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ADedicatedLobbyPlayerController
{
public:
	ADedicatedLobbyPlayerController(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UDedicatedLobbyWidget GetLobbyWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1408);
		return struct UDedicatedLobbyWidget(ptr_addr);
	}
	struct ADedicatedLobbyPawn GetLobbyVisualPawn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1416);
		return struct ADedicatedLobbyPawn(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UC_MainmenuPageWidget
{
public:
	UC_MainmenuPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftObjectPtr<UPageWidgetAsset> GetPageWidgetAssetPc() {
		return memory.read<struct TSoftObjectPtr<UPageWidgetAsset>>(m_addr + 1064);
	}
	struct TSoftObjectPtr<UPageWidgetAsset> GetPageWidgetAssetConsole() {
		return memory.read<struct TSoftObjectPtr<UPageWidgetAsset>>(m_addr + 1104);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqForceLeavePartyMember
{
public:
	UPqForceLeavePartyMember(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetTargetAccountId() {
		return memory.read<struct FString>(m_addr + 56);
	}
	struct FString GetTargetName() {
		return memory.read<struct FString>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqShopAllProductList
{
public:
	UPqShopAllProductList(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrForceLeavePartyMember
{
public:
	UPrForceLeavePartyMember(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UModeSelectPageWidget
{
public:
	UModeSelectPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TWeakObjectPtr<UDialogTemplate> GetMatchingSettingsPopup() {
		return memory.read<struct TWeakObjectPtr<UDialogTemplate>>(m_addr + 784);
	}
	struct UDialogTemplate GetItemGuidePopup() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 800);
		return struct UDialogTemplate(ptr_addr);
	}
	struct UDialogTemplate GetItemGuideDetailPopup() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 808);
		return struct UDialogTemplate(ptr_addr);
	}
	struct USpeedGuideDialog GetSpeedGuideDialog() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 816);
		return struct USpeedGuideDialog(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UFirstPersonFollowCameraCalculator
{
public:
	UFirstPersonFollowCameraCalculator(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPqPartyMatchQueueChange
{
public:
	UPqPartyMatchQueueChange(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMatchQueueList GetMatchQueueList() {
		return memory.read<struct FMatchQueueList>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqInviteMeToParty
{
public:
	UPqInviteMeToParty(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GettargetInviterAccountId() {
		return memory.read<struct FString>(m_addr + 56);
	}
	struct FString GetreqUid() {
		return memory.read<struct FString>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UC_TimeAttackSelectRankerDialog
{
public:
	UC_TimeAttackSelectRankerDialog(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UC_LiveryReportViewerPageWidget
{
public:
	UC_LiveryReportViewerPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPcInviteToParty
{
public:
	UPcInviteToParty(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetTargetAccountId() {
		return memory.read<struct FString>(m_addr + 48);
	}
	struct FKtAsyncRequestId Getarid() {
		return memory.read<struct FKtAsyncRequestId>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};


class UEffectControllerComponent
{
public:
	UEffectControllerComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftObjectPtr<UForceFeedbackCrashLevelDataAsset> GetForceFeedbackDataAssetPtr() {
		return memory.read<struct TSoftObjectPtr<UForceFeedbackCrashLevelDataAsset>>(m_addr + 200);
	}
	struct UForceFeedbackCrashLevelDataAsset GetForceFeedbackCrashLevelDataAsset() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 240);
		return struct UForceFeedbackCrashLevelDataAsset(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UReplayReadyPageWidget
{
public:
	UReplayReadyPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetCurrentPlayingMediaAlias() {
		return memory.read<struct FString>(m_addr + 760);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqPartySetPlatformSession
{
public:
	UPqPartySetPlatformSession(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetsessionUri() {
		return memory.read<struct FString>(m_addr + 56);
	}
	enum class EKtAccountPlatform Getplatform() {
		return memory.read<enum class EKtAccountPlatform>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UGrandPrixTierIconWidget
{
public:
	UGrandPrixTierIconWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UKdImage GetTierImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UKdImage(ptr_addr);
	}
	enum class EKtGrandPrixSubTier GetsubTier() {
		return memory.read<enum class EKtGrandPrixSubTier>(m_addr + 616);
	}
	enum class EKtGrandPrixMainTier GetmainTier() {
		return memory.read<enum class EKtGrandPrixMainTier>(m_addr + 617);
	}
	struct TMap<enum class EKtGrandPrixSubTier, struct TSoftObjectPtr<UTexture2D>> GetSubTierIconContainer() {
		return memory.read<struct TMap<enum class EKtGrandPrixSubTier, struct TSoftObjectPtr<UTexture2D>>>(m_addr + 624);
	}
	struct TMap<enum class EKtGrandPrixMainTier, struct TSoftObjectPtr<UTexture2D>> GetMainTierIconContainer() {
		return memory.read<struct TMap<enum class EKtGrandPrixMainTier, struct TSoftObjectPtr<UTexture2D>>>(m_addr + 704);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAddAndRemoveDashboard
{
public:
	UAddAndRemoveDashboard(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAddDashboard GetAddDashboard() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return struct UAddDashboard(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULobbyPageWidget
{
public:
	ULobbyPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TWeakObjectPtr<UDialogTemplate> GetLobbyPopup() {
		return memory.read<struct TWeakObjectPtr<UDialogTemplate>>(m_addr + 768);
	}
	struct TWeakObjectPtr<UDialogTemplate> GetShortcutMenuPopup() {
		return memory.read<struct TWeakObjectPtr<UDialogTemplate>>(m_addr + 776);
	}
	UUserWidget GetNameTagWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 800);
		return UUserWidget(ptr_addr);
	}
	UUserWidget GetEmoticonBalloonWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 808);
		return UUserWidget(ptr_addr);
	}
	float GetPawnRotationSpeed() {
		return memory.read<float>(m_addr + 1064);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPcBreakParty
{
public:
	UPcBreakParty(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbTimeOut() {
		return memory.read<bool>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};


class ALootBoxPawn
{
public:
	ALootBoxPawn(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPqRiderNameChangeConfirm
{
public:
	UPqRiderNameChangeConfirm(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrPiggy
{
public:
	UPrPiggy(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<struct FString, struct FKtPiggy> Getpiggy() {
		return memory.read<struct TMap<struct FString, struct FKtPiggy>>(m_addr + 72);
	}
	struct TMap<struct FString, struct FKtPiggyState> GetpiggyState() {
		return memory.read<struct TMap<struct FString, struct FKtPiggyState>>(m_addr + 152);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPcPartyChange
{
public:
	UPcPartyChange(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetaccountId() {
		return memory.read<struct FString>(m_addr + 48);
	}
	struct FString GetriderName() {
		return memory.read<struct FString>(m_addr + 64);
	}
	struct FKtAccountProfile GetProfile() {
		return memory.read<struct FKtAccountProfile>(m_addr + 80);
	}
	int32_t GetjoinId() {
		return memory.read<int32_t>(m_addr + 176);
	}
	int32_t GetState() {
		return memory.read<int32_t>(m_addr + 180);
	}
	bool GetpartyBoss() {
		return memory.read<bool>(m_addr + 184);
	}
	struct FString GetPartyId() {
		return memory.read<struct FString>(m_addr + 192);
	}
	struct FString GetvivoxChannelName() {
		return memory.read<struct FString>(m_addr + 208);
	}
	struct FString GetvivoxJoinToken() {
		return memory.read<struct FString>(m_addr + 224);
	}
	struct FString GetvivoxTranscriptionToken() {
		return memory.read<struct FString>(m_addr + 240);
	}
	bool Getready() {
		return memory.read<bool>(m_addr + 256);
	}
	struct FKtItemPreview GetitemPreview() {
		return memory.read<struct FKtItemPreview>(m_addr + 264);
	}
	struct FString GetclientStage() {
		return memory.read<struct FString>(m_addr + 432);
	}
	struct FString GetclientStageParam() {
		return memory.read<struct FString>(m_addr + 448);
	}
	struct FString GetliverySignedUrl() {
		return memory.read<struct FString>(m_addr + 464);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPresetLogicComponent
{
public:
	UPresetLogicComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct TWeakObjectPtr<AOutGamePawn>> GetSpawnedItemPresetPawns() {
		return memory.read<struct TArray<struct TWeakObjectPtr<AOutGamePawn>>>(m_addr + 256);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPcPartyInviteRefused
{
public:
	UPcPartyInviteRefused(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetaccountId() {
		return memory.read<struct FString>(m_addr + 48);
	}
	struct FString GetriderName() {
		return memory.read<struct FString>(m_addr + 64);
	}
	struct FString GetPartyId() {
		return memory.read<struct FString>(m_addr + 80);
	}
	bool GetisJoinFailed() {
		return memory.read<bool>(m_addr + 96);
	}
	enum class EPartyJoinFailReason GetfailReason() {
		return memory.read<enum class EPartyJoinFailReason>(m_addr + 100);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqCouponUse
{
public:
	UPqCouponUse(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetcouponId() {
		return memory.read<struct FString>(m_addr + 56);
	}
	bool GetuseForce() {
		return memory.read<bool>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKartSkillLogicComponent
{
public:
	UKartSkillLogicComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class USpectatorComponent
{
public:
	USpectatorComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct AKdPawn> GetRaceRankList() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 304);
		return struct TArray<struct AKdPawn>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UForcePlayBGMRule
{
public:
	UForcePlayBGMRule(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AJumpZone
{
public:
	AJumpZone(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetUpPower() {
		return memory.read<float>(m_addr + 576);
	}
	float GetFrontPower() {
		return memory.read<float>(m_addr + 580);
	}
	float GetMultiplier() {
		return memory.read<float>(m_addr + 584);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPcPartyJoinFail
{
public:
	UPcPartyJoinFail(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class EPartyJoinFailReason GetfailReason() {
		return memory.read<enum class EPartyJoinFailReason>(m_addr + 48);
	}
	struct FString GetbossAccountId() {
		return memory.read<struct FString>(m_addr + 56);
	}
	struct FString GetbossRiderName() {
		return memory.read<struct FString>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class USequencerEquipData
{
public:
	USequencerEquipData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbUseDummy() {
		return memory.read<bool>(m_addr + 48);
	}
	struct FLinearColor GetDummyColor() {
		return memory.read<struct FLinearColor>(m_addr + 52);
	}
	struct FKartDesc GetKartDesc() {
		return memory.read<struct FKartDesc>(m_addr + 72);
	}
	struct FCharacterDesc GetCharacterDesc() {
		return memory.read<struct FCharacterDesc>(m_addr + 256);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqReadyGame
{
public:
	UPqReadyGame(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool Getready() {
		return memory.read<bool>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqAwsLatencyInfo
{
public:
	UPqAwsLatencyInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FAwsLatencyInfo> GetawsLatencyInfoList() {
		return memory.read<struct TArray<struct FAwsLatencyInfo>>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqQueryAccountMultiplayState
{
public:
	UPqQueryAccountMultiplayState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetaccountId() {
		return memory.read<struct FString>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UBelongingDataAssetBack
{
public:
	UBelongingDataAssetBack(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftObjectPtr<UParticleSystem> GetTransformBooster() {
		return memory.read<struct TSoftObjectPtr<UParticleSystem>>(m_addr + 144);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrUserInfo
{
public:
	UPrUserInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKtUserInfoView GetInfo() {
		return memory.read<struct FKtUserInfoView>(m_addr + 72);
	}
	bool Getlogin() {
		return memory.read<bool>(m_addr + 376);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrQueryAccountMultiplayState
{
public:
	UPrQueryAccountMultiplayState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetPartyId() {
		return memory.read<struct FString>(m_addr + 72);
	}
	struct FString GetcustomGameId() {
		return memory.read<struct FString>(m_addr + 88);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKdPhysicalMaterial
{
public:
	UKdPhysicalMaterial(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UParticleSystem GetLeftParticle() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 128);
		return struct UParticleSystem(ptr_addr);
	}
	struct UParticleSystem GetRightParticle() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 136);
		return struct UParticleSystem(ptr_addr);
	}
	struct UParticleSystem GetCenterParticle() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 144);
		return struct UParticleSystem(ptr_addr);
	}
	struct UFMODEvent GetSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 152);
		return struct UFMODEvent(ptr_addr);
	}
	struct FName GetForceFeedbackName() {
		return memory.read<struct FName>(m_addr + 160);
	}
	enum class EDriveMode GetTrackSurfaceType() {
		return memory.read<enum class EDriveMode>(m_addr + 168);
	}
	float GetAdditionalDragForce_PM() {
		return memory.read<float>(m_addr + 172);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKdWidgetLibrary
{
public:
	UKdWidgetLibrary(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UItemGimmickInterface
{
public:
	UItemGimmickInterface(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPqNGSReply
{
public:
	UPqNGSReply(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetData() {
		return memory.read<struct FString>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPcRaceResult
{
public:
	UPcRaceResult(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetgameId() {
		return memory.read<struct FString>(m_addr + 48);
	}
	struct FRaceGameResult GetResult() {
		return memory.read<struct FRaceGameResult>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCreateLicenseTimerWidget
{
public:
	UCreateLicenseTimerWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftClassPtr<UObject> GetLicenseTimerWidgetClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 72);
	}
	float GetTotalTime() {
		return memory.read<float>(m_addr + 112);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqCommandUpdateQuest
{
public:
	UPqCommandUpdateQuest(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UInitializeTimeAttackPauseMenu
{
public:
	UInitializeTimeAttackPauseMenu(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftClassPtr<UObject> GetPauseMenuWidgetClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAchievementSummaryDialog
{
public:
	UAchievementSummaryDialog(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPqTimeAttackUpdate
{
public:
	UPqTimeAttackUpdate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKtTimeAttack GettimeAttack() {
		return memory.read<struct FKtTimeAttack>(m_addr + 56);
	}
	enum class ETimeAttackStatus Getstatus() {
		return memory.read<enum class ETimeAttackStatus>(m_addr + 96);
	}
	struct FDateTime GetStartTime() {
		return memory.read<struct FDateTime>(m_addr + 104);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKtSessionStartRace
{
public:
	UKtSessionStartRace(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULicenseIceBallQuestWidgetInst
{
public:
	ULicenseIceBallQuestWidgetInst(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UKdTextBlock GetTxtNumberClear() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UWidgetAnimation GetAnim_Idle() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation GetAnim_Destroy() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UWidgetAnimation(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class USoundControllerComponent
{
public:
	USoundControllerComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPqCommandResetAchievement
{
public:
	UPqCommandResetAchievement(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULicenseDataAssetLoadRule
{
public:
	ULicenseDataAssetLoadRule(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ULicenseDataAsset GetLicenseDataAsset() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 80);
		return struct ULicenseDataAsset(ptr_addr);
	}
	struct TArray<struct ULicenseContents> GetLicenseContents() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 88);
		return struct TArray<struct ULicenseContents>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMajorResultPlayerWidget
{
public:
	UMajorResultPlayerWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UWidgetSwitcher GetV_CenterBGSwitcher() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UWidgetSwitcher GetV_RankBGSwitcher() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UWidgetSwitcher GetV_TailBGSwitcher() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UKdTextBlock GetV_Rank() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UPlatformIconWidget GetV_PlatformIconWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UPlatformIconWidget(ptr_addr);
	}
	struct UKdTextBlock GetV_PlayerID() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UImage GetV_BeginnerCareIcon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UImage(ptr_addr);
	}
	struct UKdTextBlock GetV_LevelCharacter() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UWidgetSwitcher GetV_ExpSwitcher() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UKdTextBlock GetV_CharacterLevelUpInfo() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UKdTextBlock GetV_RpAdd() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UKdTextBlock GetV_LapTime() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UKdTextBlock GetV_LapTimeDiff() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UImage GetV_Clock() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct UImage(ptr_addr);
	}
	struct UKdTextBlock GetV_KartLevel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UKdTextBlock GetV_KartName() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 728);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UKdImage GetV_KartGradeBg() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 736);
		return struct UKdImage(ptr_addr);
	}
	struct UKdTextBlock GetV_KartGrade() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 744);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UKdTextBlock GetV_KartLevelUpInfo() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 752);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UKdTextBlock GetV_TeamPoint() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 760);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UMajorResultProgressWidget GetV_MajorResultProgressWidget_Player() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 768);
		return struct UMajorResultProgressWidget(ptr_addr);
	}
	struct UMajorResultProgressWidget GetV_MajorResultProgressWidget_Kart() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 776);
		return struct UMajorResultProgressWidget(ptr_addr);
	}
	struct UWidgetSwitcher GetV_LucciSwitcher() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 784);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UKdTextBlock GetV_Lucci() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 792);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UWidget GetV_GrandPrixSB() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 800);
		return struct UWidget(ptr_addr);
	}
	struct UWidget GetV_GrandPrixHB() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 808);
		return struct UWidget(ptr_addr);
	}
	struct UGrandPrixTierIconWidget GetV_GrandPrixTierIcon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 816);
		return struct UGrandPrixTierIconWidget(ptr_addr);
	}
	struct UWidgetSwitcher GetV_GppSwitcher() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 824);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UMajorResultProgressWidget GetV_MajorResultProgressWidget_GrandPrix() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 832);
		return struct UMajorResultProgressWidget(ptr_addr);
	}
	struct UMajorResultProgressWidget GetV_MajorResultProgressWidget_GrandPrix_Subtract() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 840);
		return struct UMajorResultProgressWidget(ptr_addr);
	}
	struct UKdTextBlock GetV_AddGpp() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 848);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UKdTextBlock GetV_SubtractGpp() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 856);
		return struct UKdTextBlock(ptr_addr);
	}
	struct TMap<enum class ERaceTeamType, int32_t> GetBackGroundIndex() {
		return memory.read<struct TMap<enum class ERaceTeamType, int32_t>>(m_addr + 864);
	}
	struct TMap<enum class ERaceTeamType, struct FLinearColor> GetTeamColor() {
		return memory.read<struct TMap<enum class ERaceTeamType, struct FLinearColor>>(m_addr + 944);
	}
	struct UImage GetV_RankBackground() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1024);
		return struct UImage(ptr_addr);
	}
	struct UImage GetV_Background() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1032);
		return struct UImage(ptr_addr);
	}
	struct UImage GetV_TailBackground() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1040);
		return struct UImage(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UM_LobbyPageWidget
{
public:
	UM_LobbyPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPqDevGetLiveParam
{
public:
	UPqDevGetLiveParam(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrDevGetLiveParam
{
public:
	UPrDevGetLiveParam(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetValue() {
		return memory.read<struct FString>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqGetTrophy
{
public:
	UPqGetTrophy(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UC_ProfileEditPageWidget
{
public:
	UC_ProfileEditPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrGetTrophy
{
public:
	UPrGetTrophy(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetaccumTrophy() {
		return memory.read<int32_t>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UActivatePauseMenu
{
public:
	UActivatePauseMenu(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPlayBGMRule
{
public:
	UPlayBGMRule(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPqPurchaseTier
{
public:
	UPqPurchaseTier(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GettierCount() {
		return memory.read<int32_t>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqAuthComplete
{
public:
	UPqAuthComplete(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UKtSessionFinishRace
{
public:
	UKtSessionFinishRace(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FKtSessionRaceResultPlayer> Getplayers() {
		return memory.read<struct TArray<struct FKtSessionRaceResultPlayer>>(m_addr + 48);
	}
	struct TArray<struct FKtSessionRaceResultTeam> Getteams() {
		return memory.read<struct TArray<struct FKtSessionRaceResultTeam>>(m_addr + 64);
	}
	struct FKtSessionRaceResultCommon Getcommon() {
		return memory.read<struct FKtSessionRaceResultCommon>(m_addr + 80);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrPurchaseTier
{
public:
	UPrPurchaseTier(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetPurchaseStatus() {
		return memory.read<int32_t>(m_addr + 72);
	}
	int32_t GetaccumTrophy() {
		return memory.read<int32_t>(m_addr + 76);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrShopWalletPageUrlNxA
{
public:
	UPrShopWalletPageUrlNxA(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetURL() {
		return memory.read<struct FString>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPlaySinglePodiumSequence
{
public:
	UPlaySinglePodiumSequence(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPqGetSeasonPass
{
public:
	UPqGetSeasonPass(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPqMyInfo
{
public:
	UPqMyInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrReportLiverySticker
{
public:
	UPrReportLiverySticker(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString Getnpsn() {
		return memory.read<struct FString>(m_addr + 72);
	}
	struct FString GetliveryStickerId() {
		return memory.read<struct FString>(m_addr + 88);
	}
	enum class EKtLiveryState GetState() {
		return memory.read<enum class EKtLiveryState>(m_addr + 104);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrGetSeasonPass
{
public:
	UPrGetSeasonPass(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetseasonPass() {
		return memory.read<int32_t>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrRiderNameChangeReserve
{
public:
	UPrRiderNameChangeReserve(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetNotSupportedLetter() {
		return memory.read<struct FString>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqPurchaseSeasonPass
{
public:
	UPqPurchaseSeasonPass(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UTransition_BeginRace_ByTimer
{
public:
	UTransition_BeginRace_ByTimer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetTotalTime() {
		return memory.read<float>(m_addr + 80);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPcLevelUpdated
{
public:
	UPcLevelUpdated(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetLevel() {
		return memory.read<int32_t>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};


class UFuncLib_Table
{
public:
	UFuncLib_Table(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AKdSkeletalMeshActor
{
public:
	AKdSkeletalMeshActor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UKdGameSessionPlayer
{
public:
	UKdGameSessionPlayer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct UObject> GetProp() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct TArray<struct UObject>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class USpeedGuideDialog
{
public:
	USpeedGuideDialog(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FText> GetTipTexts() {
		return memory.read<struct TArray<struct FText>>(m_addr + 816);
	}
	struct TArray<float> GetTipTextStartSeconds() {
		return memory.read<struct TArray<float>>(m_addr + 832);
	}
	struct TArray<float> GetTipTextEndSeconds() {
		return memory.read<struct TArray<float>>(m_addr + 848);
	}
	struct TArray<struct FName> GetTipStartAnims() {
		return memory.read<struct TArray<struct FName>>(m_addr + 864);
	}
	struct FName GetTipEndAnim() {
		return memory.read<struct FName>(m_addr + 880);
	}
	struct FName GetOpenedAnim() {
		return memory.read<struct FName>(m_addr + 888);
	}
	struct FName GetEndReachedAnim() {
		return memory.read<struct FName>(m_addr + 896);
	}
	float GetEndReachedAnimOffset() {
		return memory.read<float>(m_addr + 904);
	}
	float GetTotalMediaTime() {
		return memory.read<float>(m_addr + 908);
	}
	bool GetbMustWatchVideoItTheEnd() {
		return memory.read<bool>(m_addr + 912);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPcTierUpdated
{
public:
	UPcTierUpdated(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKtSeasonInfo GetseasonInfo() {
		return memory.read<struct FKtSeasonInfo>(m_addr + 48);
	}
	int32_t GetfromTier() {
		return memory.read<int32_t>(m_addr + 80);
	}
	int32_t GettoTier() {
		return memory.read<int32_t>(m_addr + 84);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqAccountUnlink
{
public:
	UPqAccountUnlink(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class USmsDebug
{
public:
	USmsDebug(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UHttpServerRequester GetSessionApiServer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 88);
		return struct UHttpServerRequester(ptr_addr);
	}
	struct TMap<struct FString, struct UObject> GetSmsPlayers() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 200);
		return struct TMap<struct FString, struct UObject>(ptr_addr);
	}
	struct UObject GetGameSessionRequest() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 296);
		return struct UObject(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTimeAttackDataHelper
{
public:
	UTimeAttackDataHelper(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPcPermissionUpdate
{
public:
	UPcPermissionUpdate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKtPermissionData Getpermission() {
		return memory.read<struct FKtPermissionData>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrAccountUnlink
{
public:
	UPrAccountUnlink(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbSucceed() {
		return memory.read<bool>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTransition_LicenseTutorialEndRule
{
public:
	UTransition_LicenseTutorialEndRule(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULootBoxPageWidget
{
public:
	ULootBoxPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAnimNotifyState_GetOffTheKart
{
public:
	UAnimNotifyState_GetOffTheKart(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class EInterpolationType GetInterpolationType() {
		return memory.read<enum class EInterpolationType>(m_addr + 48);
	}
	float GetExponential() {
		return memory.read<float>(m_addr + 52);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrAccountUnlinkAll
{
public:
	UPrAccountUnlinkAll(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UDeliveryBuff
{
public:
	UDeliveryBuff(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class URaceTimeComponent
{
public:
	URaceTimeComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMulticastInlineDelegate GetOnBeginRaceTimeChanged() {
		return memory.read<struct FMulticastInlineDelegate>(m_addr + 192);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqAcquireMail
{
public:
	UPqAcquireMail(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetmailId() {
		return memory.read<struct FString>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPcNGSRequest
{
public:
	UPcNGSRequest(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetData() {
		return memory.read<struct FString>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTransition_BeginRace_TimeAttack_Restart
{
public:
	UTransition_BeginRace_TimeAttack_Restart(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPcAcceptCustomGameInvitation
{
public:
	UPcAcceptCustomGameInvitation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetaccountId() {
		return memory.read<struct FString>(m_addr + 48);
	}
	struct FKtAccountProfile GetProfile() {
		return memory.read<struct FKtAccountProfile>(m_addr + 64);
	}
	struct FString GetInviterAccountId() {
		return memory.read<struct FString>(m_addr + 160);
	}
	enum class ECustomGameInvitationResult GetResult() {
		return memory.read<enum class ECustomGameInvitationResult>(m_addr + 176);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrGetAccountPlatformDataKtByAccountId
{
public:
	UPrGetAccountPlatformDataKtByAccountId(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<struct FString, struct FAccountPlatformDataKt> GetaccountPlatformDataKtMap() {
		return memory.read<struct TMap<struct FString, struct FAccountPlatformDataKt>>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCustomGamePageWidget
{
public:
	UCustomGamePageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TWeakObjectPtr<UDialogTemplate> GetUserInfoPopup() {
		return memory.read<struct TWeakObjectPtr<UDialogTemplate>>(m_addr + 760);
	}
	struct TWeakObjectPtr<UDialogTemplate> GetTrackChangeDialog() {
		return memory.read<struct TWeakObjectPtr<UDialogTemplate>>(m_addr + 768);
	}
	struct TWeakObjectPtr<UDialogTemplate> GetModeChangeDialog() {
		return memory.read<struct TWeakObjectPtr<UDialogTemplate>>(m_addr + 808);
	}
	struct UFMODEvent GetMatchingCompleteSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 936);
		return struct UFMODEvent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqGetAccountPlatformDataKtByXuid
{
public:
	UPqGetAccountPlatformDataKtByXuid(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FString> GetxuidVector() {
		return memory.read<struct TArray<struct FString>>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrGetAccountPlatformDataKtByXuid
{
public:
	UPrGetAccountPlatformDataKtByXuid(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<struct FString, struct FAccountPlatformDataKt> GetaccountPlatformDataKtMap() {
		return memory.read<struct TMap<struct FString, struct FAccountPlatformDataKt>>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class USingleModeLoadingImagePool
{
public:
	USingleModeLoadingImagePool(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UWidgetLogicComponent
{
public:
	UWidgetLogicComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UKdPageWidget GetPageWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 176);
		return struct UKdPageWidget(ptr_addr);
	}
	struct TArray<struct UKeyIconWidget> GetKeyIconWidgetList() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 200);
		return struct TArray<struct UKeyIconWidget>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAccountShopNgm
{
public:
	UAccountShopNgm(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPqGetAccountPlatformDataKtByPsnAccountId
{
public:
	UPqGetAccountPlatformDataKtByPsnAccountId(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FString> GetpsnAccountIdVector() {
		return memory.read<struct TArray<struct FString>>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULoadingAdvertisingWidget
{
public:
	ULoadingAdvertisingWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UImage GetImage_Advertising() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UImage(ptr_addr);
	}
	struct UTextBlock GetTextBlock_Title() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock GetTextBlock_Event() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock GetTextBlock_ExpireDate() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock GetTextBlock_Desc() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UTextBlock(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrGetAccountPlatformDataKtByPsnAccountId
{
public:
	UPrGetAccountPlatformDataKtByPsnAccountId(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<struct FString, struct FAccountPlatformDataKt> GetaccountPlatformDataKtMap() {
		return memory.read<struct TMap<struct FString, struct FAccountPlatformDataKt>>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrGetLootBoxInfo
{
public:
	UPrGetLootBoxInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FKtLootBoxInfo> GetlootBoxInfoVector() {
		return memory.read<struct TArray<struct FKtLootBoxInfo>>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UM_MailPageWidget
{
public:
	UM_MailPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UBelongingDataAssetSkidMark
{
public:
	UBelongingDataAssetSkidMark(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftObjectPtr<UMaterialInstance> GetSkidMarkMaterial() {
		return memory.read<struct TSoftObjectPtr<UMaterialInstance>>(m_addr + 64);
	}
	struct TSoftObjectPtr<UParticleSystem> GetSkidSmokeParticle() {
		return memory.read<struct TSoftObjectPtr<UParticleSystem>>(m_addr + 104);
	}

private:
	std::uint64_t m_addr = 0;
};


class UM_LicensePageWidget
{
public:
	UM_LicensePageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UHideUICheatComponent
{
public:
	UHideUICheatComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPqConsoleBlockList
{
public:
	UPqConsoleBlockList(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class EKtAccountPlatform Getplatform() {
		return memory.read<enum class EKtAccountPlatform>(m_addr + 56);
	}
	struct TArray<struct FString> GetaddedIdList() {
		return memory.read<struct TArray<struct FString>>(m_addr + 64);
	}
	struct TArray<struct FString> GetremovedIdList() {
		return memory.read<struct TArray<struct FString>>(m_addr + 80);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqGfsTicket
{
public:
	UPqGfsTicket(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrGfsTicket
{
public:
	UPrGfsTicket(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetgfsServerUrl() {
		return memory.read<struct FString>(m_addr + 72);
	}
	struct FString GettokenType() {
		return memory.read<struct FString>(m_addr + 88);
	}
	struct FString GetgfsTicket() {
		return memory.read<struct FString>(m_addr + 104);
	}
	struct FString GetproductId() {
		return memory.read<struct FString>(m_addr + 120);
	}
	struct FString GetPlatformType() {
		return memory.read<struct FString>(m_addr + 136);
	}
	struct FString GetplatformNickname() {
		return memory.read<struct FString>(m_addr + 152);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicensePhaseComponent
{
public:
	ULicensePhaseComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrTimeAttackStart
{
public:
	UPrTimeAttackStart(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GettrackId() {
		return memory.read<struct FString>(m_addr + 72);
	}
	struct FDateTime GetStartTime() {
		return memory.read<struct FDateTime>(m_addr + 88);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKdLevelSequencePlayer
{
public:
	UKdLevelSequencePlayer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetBlendTime() {
		return memory.read<float>(m_addr + 1536);
	}
	enum class EMovieSceneBuiltInEasing GetBlendType() {
		return memory.read<enum class EMovieSceneBuiltInEasing>(m_addr + 1544);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrTimeAttackUpdate
{
public:
	UPrTimeAttackUpdate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKtTimeAttack GettimeAttack() {
		return memory.read<struct FKtTimeAttack>(m_addr + 72);
	}
	bool GetisUpdated() {
		return memory.read<bool>(m_addr + 112);
	}
	struct FKtDataStorePayload GetdataStoreLink() {
		return memory.read<struct FKtDataStorePayload>(m_addr + 120);
	}
	struct FPlayLucciReward Getlucci() {
		return memory.read<struct FPlayLucciReward>(m_addr + 280);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKdPlatformEventsComponent
{
public:
	UKdPlatformEventsComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPlayRetireBGM
{
public:
	UPlayRetireBGM(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPqTimeAttackRegistReplay
{
public:
	UPqTimeAttackRegistReplay(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GettimeAttackUniqueId() {
		return memory.read<struct FString>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAnimNotifyState_GoItemBullet
{
public:
	UAnimNotifyState_GoItemBullet(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	AActor GetPreviewActorClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return AActor(ptr_addr);
	}
	struct FName GetSocketName() {
		return memory.read<struct FName>(m_addr + 56);
	}
	struct FVector GetLocationOffset() {
		return memory.read<struct FVector>(m_addr + 64);
	}
	struct FRotator GetRotationOffset() {
		return memory.read<struct FRotator>(m_addr + 76);
	}
	float GetAnimTime() {
		return memory.read<float>(m_addr + 88);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrTimeAttackRegistReplay
{
public:
	UPrTimeAttackRegistReplay(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UBelongingDataAssetFront
{
public:
	UBelongingDataAssetFront(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULicenseDistanceWidget
{
public:
	ULicenseDistanceWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UWidgetSwitcher GetWS_DistanceBG() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UKdTextBlock GetV_DistanceText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UKdTextBlock(ptr_addr);
	}
	float GetDistance() {
		return memory.read<float>(m_addr + 624);
	}
	float GetThreshold() {
		return memory.read<float>(m_addr + 628);
	}

private:
	std::uint64_t m_addr = 0;
};


class UWidgetPtrLifetimeOwner
{
public:
	UWidgetPtrLifetimeOwner(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<int32_t, struct UUserWidget> GetWidgets() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct TMap<int32_t, struct UUserWidget>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UDisableAllPawns
{
public:
	UDisableAllPawns(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UMineReaction
{
public:
	UMineReaction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPqTimeAttackGetRecords
{
public:
	UPqTimeAttackGetRecords(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrTimeAttackGetRecords
{
public:
	UPrTimeAttackGetRecords(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<struct FString, struct FKtTimeAttackRecord> GetRecords() {
		return memory.read<struct TMap<struct FString, struct FKtTimeAttackRecord>>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqTimeAttackGetRankers
{
public:
	UPqTimeAttackGetRankers(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GettrackId() {
		return memory.read<struct FString>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UShopItemListEntryObject
{
public:
	UShopItemListEntryObject(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetShopItemIDFirst() {
		return memory.read<struct FString>(m_addr + 40);
	}
	struct FString GetShopItemIDSecond() {
		return memory.read<struct FString>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqCommandResetEvent
{
public:
	UPqCommandResetEvent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UKdPlayerPropIdentityAccount
{
public:
	UKdPlayerPropIdentityAccount(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKtAccountProfile GetProfile() {
		return memory.read<struct FKtAccountProfile>(m_addr + 216);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrTimeAttackGetRankers
{
public:
	UPrTimeAttackGetRankers(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GettrackId() {
		return memory.read<struct FString>(m_addr + 72);
	}
	int32_t GetmyRank() {
		return memory.read<int32_t>(m_addr + 88);
	}
	struct TArray<struct FKtTimeAttackRecord> GetmyRecord() {
		return memory.read<struct TArray<struct FKtTimeAttackRecord>>(m_addr + 96);
	}
	struct TArray<struct FKtTimeAttackRanker> GettotalRank() {
		return memory.read<struct TArray<struct FKtTimeAttackRanker>>(m_addr + 112);
	}
	struct TArray<struct FKtTimeAttackRanker> GetplatformRank() {
		return memory.read<struct TArray<struct FKtTimeAttackRanker>>(m_addr + 128);
	}
	struct TArray<struct FKtTimeAttackRanker> GetcountryRank() {
		return memory.read<struct TArray<struct FKtTimeAttackRanker>>(m_addr + 144);
	}

private:
	std::uint64_t m_addr = 0;
};


class UNotifyRaceResult
{
public:
	UNotifyRaceResult(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULicenseWaterBombEventSequence
{
public:
	ULicenseWaterBombEventSequence(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftObjectPtr<ULevelSequence> GetEventSequence() {
		return memory.read<struct TSoftObjectPtr<ULevelSequence>>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqSetCrossPlayStatus
{
public:
	UPqSetCrossPlayStatus(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool Getstatus() {
		return memory.read<bool>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPcSetCrossPlayStatus
{
public:
	UPcSetCrossPlayStatus(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool Getstatus() {
		return memory.read<bool>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};


class UNotifyCountdown
{
public:
	UNotifyCountdown(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPqLicenseStart
{
public:
	UPqLicenseStart(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetlicenseGroupId() {
		return memory.read<struct FString>(m_addr + 56);
	}
	struct FString GetlicenseMissionId() {
		return memory.read<struct FString>(m_addr + 72);
	}
	struct FString GettrackId() {
		return memory.read<struct FString>(m_addr + 88);
	}

private:
	std::uint64_t m_addr = 0;
};


class UGrandPrixLogicComponent
{
public:
	UGrandPrixLogicComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UKtSessionMember
{
public:
	UKtSessionMember(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrLicenseStart
{
public:
	UPrLicenseStart(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetlicenseGroupId() {
		return memory.read<struct FString>(m_addr + 72);
	}
	struct FString GetlicenseMissionId() {
		return memory.read<struct FString>(m_addr + 88);
	}
	struct FDateTime GetStartTime() {
		return memory.read<struct FDateTime>(m_addr + 104);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrSignedUrl
{
public:
	UPrSignedUrl(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<struct FString, struct FString> GetsignedUrl() {
		return memory.read<struct TMap<struct FString, struct FString>>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPcLicense
{
public:
	UPcLicense(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKtLicenseData GetlicenseData() {
		return memory.read<struct FKtLicenseData>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};


class ABoosterChargeZone
{
public:
	ABoosterChargeZone(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetChargePerSecond() {
		return memory.read<float>(m_addr + 576);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqCommandLicenseClear
{
public:
	UPqCommandLicenseClear(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPqTutorialRecord
{
public:
	UPqTutorialRecord(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKtTutorialRecord GettutorialRecord() {
		return memory.read<struct FKtTutorialRecord>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTouchDriftButton
{
public:
	UTouchDriftButton(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class EDriftButtonKind GetDriftButtonKind() {
		return memory.read<enum class EDriftButtonKind>(m_addr + 696);
	}
	struct UNamedSlot GetV_KeyGuideSlot() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UNamedSlot(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UScenarioPageWidget
{
public:
	UScenarioPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UWidget GetV_DummyConsumeFocus() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 752);
		return struct UWidget(ptr_addr);
	}
	struct UScenarioPortraitMessageWidget GetV_ScenarioPortraitMessage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 760);
		return struct UScenarioPortraitMessageWidget(ptr_addr);
	}
	struct UScenarioDescriptMessageWidget GetV_ScenarioDescriptMessage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 768);
		return struct UScenarioDescriptMessageWidget(ptr_addr);
	}
	struct UScenarioTitleWidget GetV_ScenarioTitle() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 776);
		return struct UScenarioTitleWidget(ptr_addr);
	}
	struct UButtonTemplate GetV_ScenarioMessageNextButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 784);
		return struct UButtonTemplate(ptr_addr);
	}
	struct UScenarioLogicComponent GetScenarioLogicComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 792);
		return struct UScenarioLogicComponent(ptr_addr);
	}
	struct UScenarioParseInstance GetPortraitParseInstance() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 800);
		return struct UScenarioParseInstance(ptr_addr);
	}
	struct UScenarioParseInstance GetDescriptParseInstance() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 808);
		return struct UScenarioParseInstance(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class AScenarioTravel
{
public:
	AScenarioTravel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetModeName() {
		return memory.read<struct FString>(m_addr + 624);
	}
	struct FString GetLevelName() {
		return memory.read<struct FString>(m_addr + 640);
	}
	struct FString GetOptionString() {
		return memory.read<struct FString>(m_addr + 656);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCreateLicenseDistanceWidget
{
public:
	UCreateLicenseDistanceWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftClassPtr<UObject> GetLicenseDistanceWidgetClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class ALevelTrackBase
{
public:
	ALevelTrackBase(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USceneComponent GetRootSceneComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 544);
		return struct USceneComponent(ptr_addr);
	}
	struct UArrowComponent GetArrowComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 552);
		return struct UArrowComponent(ptr_addr);
	}
	struct UBillboardComponent GetBillboardComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 560);
		return struct UBillboardComponent(ptr_addr);
	}
	struct UTextRenderComponent GetTextRenderComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 568);
		return struct UTextRenderComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPcMatchStatus
{
public:
	UPcMatchStatus(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetmmTicket() {
		return memory.read<struct FString>(m_addr + 48);
	}
	int32_t Getstatus() {
		return memory.read<int32_t>(m_addr + 64);
	}
	struct FString Getdesc() {
		return memory.read<struct FString>(m_addr + 72);
	}
	struct UObject Getsubobj() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 88);
		return struct UObject(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqTutorialComplete
{
public:
	UPqTutorialComplete(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKtTutorialData GettutorialData() {
		return memory.read<struct FKtTutorialData>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class ALiveryEditCameraActor
{
public:
	ALiveryEditCameraActor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbUseCameraUpdate() {
		return memory.read<bool>(m_addr + 2880);
	}
	enum class EPawnCameraType GetLiveryCameraType() {
		return memory.read<enum class EPawnCameraType>(m_addr + 2881);
	}
	enum class EEditValueType GetPreviewCameraValueType() {
		return memory.read<enum class EEditValueType>(m_addr + 2904);
	}
	struct FEditValue GetCameraValues[6]() {
		return memory.read<struct FEditValue>(m_addr + 2908);
	}
	struct FEditValue GetBeforeCameraValues[6]() {
		return memory.read<struct FEditValue>(m_addr + 3052);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAIItemTeamComponent
{
public:
	UAIItemTeamComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct AKdPawn> GetTeamPawnListCache() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 296);
		return struct TArray<struct AKdPawn>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UDqDediNxLogInMatchEndRideResult
{
public:
	UDqDediNxLogInMatchEndRideResult(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString Getprotohash() {
		return memory.read<struct FString>(m_addr + 248);
	}
	struct FString Getrecorddata() {
		return memory.read<struct FString>(m_addr + 264);
	}
	struct FString Getrecorditemarray() {
		return memory.read<struct FString>(m_addr + 280);
	}
	int32_t Getmatchspeedavg() {
		return memory.read<int32_t>(m_addr + 296);
	}
	struct FString GetRecordUserCollisionInfo() {
		return memory.read<struct FString>(m_addr + 304);
	}
	struct FString Getboosterstats() {
		return memory.read<struct FString>(m_addr + 320);
	}
	int32_t Getrecordtotalboostcnt() {
		return memory.read<int32_t>(m_addr + 336);
	}
	int32_t Getrecordtotalboosttime() {
		return memory.read<int32_t>(m_addr + 340);
	}
	int32_t GetRecordUserCollision() {
		return memory.read<int32_t>(m_addr + 344);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrTutorialComplete
{
public:
	UPrTutorialComplete(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKtTutorialData GettutorialData() {
		return memory.read<struct FKtTutorialData>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPcLoginEvent
{
public:
	UPcLoginEvent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FLoginEventRawData> GetloginEventData() {
		return memory.read<struct TArray<struct FLoginEventRawData>>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPcAttendanceEvent
{
public:
	UPcAttendanceEvent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetEventID() {
		return memory.read<struct FString>(m_addr + 48);
	}
	int32_t GetinvokedNumber() {
		return memory.read<int32_t>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};


class UBelongingDataAsset
{
public:
	UBelongingDataAsset(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetPrimaryItemID() {
		return memory.read<struct FName>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class ADriftAngleLimitGate
{
public:
	ADriftAngleLimitGate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetDriftLimitAngle() {
		return memory.read<float>(m_addr + 544);
	}
	float GetDriftLimitAngleAddtional() {
		return memory.read<float>(m_addr + 548);
	}
	float GetDriftLimitAngleReverse() {
		return memory.read<float>(m_addr + 552);
	}
	float GetDriftLimitAngleReverseAddtional() {
		return memory.read<float>(m_addr + 556);
	}
	bool GetbHideGuide() {
		return memory.read<bool>(m_addr + 560);
	}
	bool GetbUseHeightLimit() {
		return memory.read<bool>(m_addr + 561);
	}
	struct FVector2D GetHeightLimit() {
		return memory.read<struct FVector2D>(m_addr + 564);
	}
	struct USceneComponent GetSceneComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 576);
		return struct USceneComponent(ptr_addr);
	}
	struct FVector GetLeftPosition() {
		return memory.read<struct FVector>(m_addr + 584);
	}
	struct FVector GetRightPosition() {
		return memory.read<struct FVector>(m_addr + 596);
	}
	float GetWidth() {
		return memory.read<float>(m_addr + 612);
	}
	float GetLeftMin() {
		return memory.read<float>(m_addr + 616);
	}
	float GetLeftMax() {
		return memory.read<float>(m_addr + 620);
	}
	float GetRightMin() {
		return memory.read<float>(m_addr + 624);
	}
	float GetRightMax() {
		return memory.read<float>(m_addr + 628);
	}
	int32_t GetGateIndex() {
		return memory.read<int32_t>(m_addr + 632);
	}
	struct ADriftGuide GetTaregtDriftGuide() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct ADriftGuide(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicenseTimerWidget
{
public:
	ULicenseTimerWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UKdTextBlock GetV_LapTime() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UKdTextBlock GetV_LapTime_Warning() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UWidgetSwitcher GetWS_Time() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct ULicenseTimerComponent GetLicenseTimerComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct ULicenseTimerComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UFrontSwingCameraCalculator
{
public:
	UFrontSwingCameraCalculator(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAchievementLogicComponent
{
public:
	UAchievementLogicComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAccountPlatformAchievement
{
public:
	UAccountPlatformAchievement(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AItemThunderbolt
{
public:
	AItemThunderbolt(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftObjectPtr<UFMODEvent> GetFiringSound() {
		return memory.read<struct TSoftObjectPtr<UFMODEvent>>(m_addr + 856);
	}
	struct TSoftObjectPtr<UFMODEvent> GetPreAffectSound() {
		return memory.read<struct TSoftObjectPtr<UFMODEvent>>(m_addr + 896);
	}
	struct TSoftObjectPtr<UFMODEvent> GetAffectSound() {
		return memory.read<struct TSoftObjectPtr<UFMODEvent>>(m_addr + 936);
	}
	struct TSoftObjectPtr<UParticleSystem> GetThunderbolt_Affect() {
		return memory.read<struct TSoftObjectPtr<UParticleSystem>>(m_addr + 976);
	}
	struct TSoftClassPtr<UObject> GetThunderbolt_Bullet() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 1016);
	}
	struct TArray<struct UParticleSystemComponent> GetThunderboltEffects() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1056);
		return struct TArray<struct UParticleSystemComponent>(ptr_addr);
	}
	struct TArray<struct AActor> GetFrontEnemies() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1088);
		return struct TArray<struct AActor>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqAttendanceEventInfo
{
public:
	UPqAttendanceEventInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UScenarioWidgetComponent
{
public:
	UScenarioWidgetComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct UScenarioWidgetBase> GetWidgetContainer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 176);
		return struct TArray<struct UScenarioWidgetBase>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKdPostInitializer
{
public:
	UKdPostInitializer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrAttendanceEventInfo
{
public:
	UPrAttendanceEventInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FKtAttendanceEventInfo> GetData() {
		return memory.read<struct TArray<struct FKtAttendanceEventInfo>>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqConfirmAttendanceEvent
{
public:
	UPqConfirmAttendanceEvent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetEventID() {
		return memory.read<struct FString>(m_addr + 56);
	}
	int32_t GeteventNumber() {
		return memory.read<int32_t>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrAccountLinkSelect
{
public:
	UPrAccountLinkSelect(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbGuest() {
		return memory.read<bool>(m_addr + 72);
	}
	struct FString GetlinkUrl() {
		return memory.read<struct FString>(m_addr + 80);
	}
	struct TArray<struct FString> GetlinkUrlAllowedDomains() {
		return memory.read<struct TArray<struct FString>>(m_addr + 96);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAlertWidget
{
public:
	UAlertWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UImage GetImageAlert1() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UImage(ptr_addr);
	}
	struct UImage GetImageAlert2() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UImage(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTimeAttackTrackDefEntryObject
{
public:
	UTimeAttackTrackDefEntryObject(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKtClientTrackDef GetTrackDef() {
		return memory.read<struct FKtClientTrackDef>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULrGetMyStickerPenaltyState
{
public:
	ULrGetMyStickerPenaltyState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GettotalSlotCount() {
		return memory.read<int32_t>(m_addr + 72);
	}
	struct TArray<int32_t> GetblockedSlots() {
		return memory.read<struct TArray<int32_t>>(m_addr + 80);
	}
	struct FNullableDateTime GetuploadAfter() {
		return memory.read<struct FNullableDateTime>(m_addr + 96);
	}
	struct FNullableDateTime GetreportAfter() {
		return memory.read<struct FNullableDateTime>(m_addr + 112);
	}

private:
	std::uint64_t m_addr = 0;
};


class AShadowQuestGameState
{
public:
	AShadowQuestGameState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UKartUpgradeEffectAsset
{
public:
	UKartUpgradeEffectAsset(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FKartUpgradeFxParticleInfo> GetUpgradeParticleList() {
		return memory.read<struct TArray<struct FKartUpgradeFxParticleInfo>>(m_addr + 48);
	}
	struct TArray<struct FKartUpgradeFxMaterialInfo> GetUpgradeMatFxList() {
		return memory.read<struct TArray<struct FKartUpgradeFxMaterialInfo>>(m_addr + 64);
	}
	struct TSoftObjectPtr<UMaterialParameterCollection> GetParameterCollection() {
		return memory.read<struct TSoftObjectPtr<UMaterialParameterCollection>>(m_addr + 80);
	}
	struct TArray<struct FKartUpgradeFxGradeColorInfo> GetUpgradeColorParamList() {
		return memory.read<struct TArray<struct FKartUpgradeFxGradeColorInfo>>(m_addr + 120);
	}
	struct UFMODEvent GetUpgradeFxSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 136);
		return struct UFMODEvent(ptr_addr);
	}
	struct TArray<struct FKartUpgradeFxParticleInfo> GetGearApplyParticleList() {
		return memory.read<struct TArray<struct FKartUpgradeFxParticleInfo>>(m_addr + 144);
	}
	struct TArray<struct FKartUpgradeFxMaterialInfo> GetGearApplyMatFxList() {
		return memory.read<struct TArray<struct FKartUpgradeFxMaterialInfo>>(m_addr + 160);
	}
	struct UFMODEvent GetGearApplyFxSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 176);
		return struct UFMODEvent(ptr_addr);
	}
	float GetPlayDuration() {
		return memory.read<float>(m_addr + 184);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPcSetPremium
{
public:
	UPcSetPremium(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class EKtPremium Getpremium() {
		return memory.read<enum class EKtPremium>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrConfirmAttendanceEvent
{
public:
	UPrConfirmAttendanceEvent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKtAttendanceEventInfo GetData() {
		return memory.read<struct FKtAttendanceEventInfo>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPcAchievementNoti
{
public:
	UPcAchievementNoti(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetachievementId() {
		return memory.read<struct FString>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKartMovementReplication
{
public:
	UKartMovementReplication(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FReplicatedKartState GetReplicatedStates() {
		return memory.read<struct FReplicatedKartState>(m_addr + 200);
	}
	struct FPhysicSpec GetSpec() {
		return memory.read<struct FPhysicSpec>(m_addr + 252);
	}
	bool GetbStuck() {
		return memory.read<bool>(m_addr + 624);
	}
	bool GetbForcing() {
		return memory.read<bool>(m_addr + 625);
	}
	bool GetbKartCollisionEnable() {
		return memory.read<bool>(m_addr + 632);
	}
	bool GetbSlip() {
		return memory.read<bool>(m_addr + 644);
	}
	bool GetbHitThunderbolt() {
		return memory.read<bool>(m_addr + 645);
	}
	float GetItemDragFactor() {
		return memory.read<float>(m_addr + 652);
	}
	float GetWheelAxisOffset() {
		return memory.read<float>(m_addr + 660);
	}
	float GetSuspensionOffset() {
		return memory.read<float>(m_addr + 664);
	}
	struct ALowLatencyActor GetLowLatencyActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct ALowLatencyActor(ptr_addr);
	}
	struct FKartRepMovement GetKartRepMovement() {
		return memory.read<struct FKartRepMovement>(m_addr + 704);
	}
	struct UMovementRecordComponent GetRecorder() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 776);
		return struct UMovementRecordComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UThunderboltReaction
{
public:
	UThunderboltReaction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftObjectPtr<UParticleSystem> GetThunderbolt_Affect() {
		return memory.read<struct TSoftObjectPtr<UParticleSystem>>(m_addr + 536);
	}
	struct TSoftObjectPtr<UFMODEvent> GetThunderboltSound() {
		return memory.read<struct TSoftObjectPtr<UFMODEvent>>(m_addr + 576);
	}
	struct TSoftClassPtr<UObject> GetThunderboltHitShakeAsset() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 616);
	}
	struct UItemComponent GetVictim() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UItemComponent(ptr_addr);
	}
	struct UKdLevelSequencePlayer GetHitSequencePlayer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UKdLevelSequencePlayer(ptr_addr);
	}
	struct UParticleSystemComponent GetThunderboltEffectComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UParticleSystemComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqUpdatePlatformStore
{
public:
	UPqUpdatePlatformStore(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULiveryServerRequester
{
public:
	ULiveryServerRequester(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UHttpRequester GetHttpRequester() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct UHttpRequester(ptr_addr);
	}
	struct TMap<struct FString, struct FLiveryCache> GetLiveryCacheMap() {
		return memory.read<struct TMap<struct FString, struct FLiveryCache>>(m_addr + 48);
	}
	struct TMap<struct FString, struct FLiveryStickerCache> GetStickerCacheMap() {
		return memory.read<struct TMap<struct FString, struct FLiveryStickerCache>>(m_addr + 128);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPcChangeDynDataList
{
public:
	UPcChangeDynDataList(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FString> GetchangeList() {
		return memory.read<struct TArray<struct FString>>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqGetAllADTEventReward
{
public:
	UPqGetAllADTEventReward(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AScenarioIncBoostGauge
{
public:
	AScenarioIncBoostGauge(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetIncValue() {
		return memory.read<float>(m_addr + 624);
	}

private:
	std::uint64_t m_addr = 0;
};


class UBarricadeReaction
{
public:
	UBarricadeReaction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftClassPtr<UObject> GetBarricadeHitShakeAsset() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 536);
	}
	struct UKdLevelSequencePlayer GetHitSequencePlayer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 584);
		return struct UKdLevelSequencePlayer(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqGetVDTEventReward
{
public:
	UPqGetVDTEventReward(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetrewardIndex() {
		return memory.read<int32_t>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class USetDashboardText
{
public:
	USetDashboardText(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UChattingPageWidget
{
public:
	UChattingPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UDialogTemplate GetTTSChatDialog() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 744);
		return struct UDialogTemplate(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAnimEventUserWidget
{
public:
	UAnimEventUserWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPqGetADTEventData
{
public:
	UPqGetADTEventData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrAcquireMail
{
public:
	UPrAcquireMail(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FKtStockItem> GetItems() {
		return memory.read<struct TArray<struct FKtStockItem>>(m_addr + 72);
	}
	bool Getduplicated() {
		return memory.read<bool>(m_addr + 88);
	}

private:
	std::uint64_t m_addr = 0;
};


class UBelongingDataAssetSide
{
public:
	UBelongingDataAssetSide(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPcADTEventData
{
public:
	UPcADTEventData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetEventID() {
		return memory.read<struct FString>(m_addr + 48);
	}
	int32_t GetdurationTime() {
		return memory.read<int32_t>(m_addr + 64);
	}
	int32_t GetcurrentStep() {
		return memory.read<int32_t>(m_addr + 68);
	}
	struct TArray<char> GetRewardedSteps() {
		return memory.read<struct TArray<char>>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UBananaReaction
{
public:
	UBananaReaction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftObjectPtr<UParticleSystem> GetTrapParticle() {
		return memory.read<struct TSoftObjectPtr<UParticleSystem>>(m_addr + 536);
	}
	struct TSoftObjectPtr<UFMODEvent> GetTrappedSoundAsset() {
		return memory.read<struct TSoftObjectPtr<UFMODEvent>>(m_addr + 576);
	}
	struct TSoftObjectPtr<ULevelSequence> GetHitSequenceAsset() {
		return memory.read<struct TSoftObjectPtr<ULevelSequence>>(m_addr + 616);
	}
	struct UParticleSystemComponent GetTrapEffectComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UParticleSystemComponent(ptr_addr);
	}
	struct UKdLevelSequencePlayer GetHitSequencePlayer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UKdLevelSequencePlayer(ptr_addr);
	}
	struct UItemComponent GetVictim() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UItemComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqGetVDTEventData
{
public:
	UPqGetVDTEventData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPcVDTEventData
{
public:
	UPcVDTEventData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetEventID() {
		return memory.read<struct FString>(m_addr + 48);
	}
	struct TArray<int32_t> GetRewardedCount() {
		return memory.read<struct TArray<int32_t>>(m_addr + 64);
	}
	struct TArray<int32_t> GetRewardedIndex() {
		return memory.read<struct TArray<int32_t>>(m_addr + 80);
	}
	bool GethasSubEvent() {
		return memory.read<bool>(m_addr + 96);
	}
	enum class EKtADTEventType GetSubEventType() {
		return memory.read<enum class EKtADTEventType>(m_addr + 97);
	}
	int32_t GetsubEventDurationTime() {
		return memory.read<int32_t>(m_addr + 100);
	}

private:
	std::uint64_t m_addr = 0;
};


class USVGToolsMeshComponent
{
public:
	USVGToolsMeshComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USVGToolsMesh GetpMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1192);
		return struct USVGToolsMesh(ptr_addr);
	}
	struct TArray<struct UMaterialInterface> GetpMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1200);
		return struct TArray<struct UMaterialInterface>(ptr_addr);
	}
	struct FString GetMeshSVGFile() {
		return memory.read<struct FString>(m_addr + 1216);
	}

private:
	std::uint64_t m_addr = 0;
};


class USQAccountConfigStorage
{
public:
	USQAccountConfigStorage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULicenseDynamicItemCubeData
{
public:
	ULicenseDynamicItemCubeData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<float> GetDistanceList() {
		return memory.read<struct TArray<float>>(m_addr + 72);
	}
	struct TArray<enum class EItemType> GetItemTypeList() {
		return memory.read<struct TArray<enum class EItemType>>(m_addr + 88);
	}
	int32_t GetCubeCount() {
		return memory.read<int32_t>(m_addr + 104);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicenseMessageData
{
public:
	ULicenseMessageData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPqGetLootBoxInfo
{
public:
	UPqGetLootBoxInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UFuncLib_Game
{
public:
	UFuncLib_Game(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULapTimeWidget
{
public:
	ULapTimeWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTextBlock GetlapTime() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock GetTotalTime() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock GetbestTime() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UTextBlock(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqOpenLootBox
{
public:
	UPqOpenLootBox(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetCategory() {
		return memory.read<struct FString>(m_addr + 56);
	}
	struct FString GetlootBoxItemId() {
		return memory.read<struct FString>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAnimNotifyState_AnimState
{
public:
	UAnimNotifyState_AnimState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetMaterialIndex() {
		return memory.read<int32_t>(m_addr + 48);
	}
	struct TArray<struct FOverlayMaterialCurveData> GetCurveValue() {
		return memory.read<struct TArray<struct FOverlayMaterialCurveData>>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class URemoveAllLevelAutoDriveLoadingWidget
{
public:
	URemoveAllLevelAutoDriveLoadingWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftClassPtr<UObject> GetWidgetClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class AKdReplayPlayerController
{
public:
	AKdReplayPlayerController(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAddRetireToPersonalResult
{
public:
	UAddRetireToPersonalResult(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrOpenLootBox
{
public:
	UPrOpenLootBox(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FKtStockItem> GetlootItemVector() {
		return memory.read<struct TArray<struct FKtStockItem>>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKdItemFilter
{
public:
	UKdItemFilter(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UTransition_BeginRace_TimeAttack
{
public:
	UTransition_BeginRace_TimeAttack(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UTransition_BeginRace
{
public:
	UTransition_BeginRace(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ALicenseGameMode
{
public:
	ALicenseGameMode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULanguageEntryObject
{
public:
	ULanguageEntryObject(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetLanguageName() {
		return memory.read<struct FString>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrVivoxLoginToken
{
public:
	UPrVivoxLoginToken(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetloginToken() {
		return memory.read<struct FString>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UModeGameState
{
public:
	UModeGameState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPqVivoxTranscriptionToken
{
public:
	UPqVivoxTranscriptionToken(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetvivoxChannelName() {
		return memory.read<struct FString>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class AItemTeamPawn
{
public:
	AItemTeamPawn(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AItemWaterbomb
{
public:
	AItemWaterbomb(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USphereComponent GetOverlapComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 856);
		return struct USphereComponent(ptr_addr);
	}
	struct UParticleSystemComponent GetExplodeEffectComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 864);
		return struct UParticleSystemComponent(ptr_addr);
	}
	struct UParticleSystemComponent GetUseEffectComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 872);
		return struct UParticleSystemComponent(ptr_addr);
	}
	struct USkeletalMeshComponent GetWaterbombMeshComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 880);
		return struct USkeletalMeshComponent(ptr_addr);
	}
	struct TSoftObjectPtr<USkeletalMesh> GetWaterbombMesh() {
		return memory.read<struct TSoftObjectPtr<USkeletalMesh>>(m_addr + 888);
	}
	struct TSoftObjectPtr<UParticleSystem> GetWaterBombParticle() {
		return memory.read<struct TSoftObjectPtr<UParticleSystem>>(m_addr + 928);
	}
	struct TSoftObjectPtr<UParticleSystem> GetUseEffectAsset() {
		return memory.read<struct TSoftObjectPtr<UParticleSystem>>(m_addr + 968);
	}
	struct TSoftObjectPtr<UFMODEvent> GetShootSound() {
		return memory.read<struct TSoftObjectPtr<UFMODEvent>>(m_addr + 1008);
	}
	struct TSoftObjectPtr<UFMODEvent> GetExplodeSound() {
		return memory.read<struct TSoftObjectPtr<UFMODEvent>>(m_addr + 1048);
	}
	struct TSoftObjectPtr<UCurveFloat> GetCurveAxisZAsset() {
		return memory.read<struct TSoftObjectPtr<UCurveFloat>>(m_addr + 1088);
	}
	struct TSoftObjectPtr<UCurveFloat> GetScaleCurveAsset() {
		return memory.read<struct TSoftObjectPtr<UCurveFloat>>(m_addr + 1128);
	}
	struct TSoftClassPtr<UObject> GetDummy_Bullet() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 1168);
	}
	struct TSoftObjectPtr<ULevelSequence> GetItemFeedSequence() {
		return memory.read<struct TSoftObjectPtr<ULevelSequence>>(m_addr + 1208);
	}
	struct UCurveFloat GetAffectCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1256);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat GetScaleCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1264);
		return struct UCurveFloat(ptr_addr);
	}
	struct UItemComponent GetLocalUser() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1336);
		return struct UItemComponent(ptr_addr);
	}
	struct TArray<struct AActor> GetAffectActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1344);
		return struct TArray<struct AActor>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrVivoxTranscriptionToken
{
public:
	UPrVivoxTranscriptionToken(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetvivoxTranscriptionToken() {
		return memory.read<struct FString>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicenseTrackGuideData
{
public:
	ULicenseTrackGuideData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetStartCheckPointName() {
		return memory.read<struct FString>(m_addr + 72);
	}
	float GetGradationTime() {
		return memory.read<float>(m_addr + 88);
	}
	struct TArray<struct FLicenseSpeedColorInfo> GetLicenseSpeedColorList() {
		return memory.read<struct TArray<struct FLicenseSpeedColorInfo>>(m_addr + 96);
	}
	struct TArray<struct FLicenseTrackSpeedInfo> GetLicenseTrackSpeedDataList() {
		return memory.read<struct TArray<struct FLicenseTrackSpeedInfo>>(m_addr + 112);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPcUpdateChannelPlayerInfo
{
public:
	UPcUpdateChannelPlayerInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetChannel() {
		return memory.read<struct FString>(m_addr + 48);
	}
	struct TMap<struct FString, struct FString> GetUpdate() {
		return memory.read<struct TMap<struct FString, struct FString>>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqChangeBeginnerSetting
{
public:
	UPqChangeBeginnerSetting(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetFlag() {
		return memory.read<int32_t>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UDediServerSubsystem
{
public:
	UDediServerSubsystem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USmsProvider GetSmsProvider() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct USmsProvider(ptr_addr);
	}
	struct UKtSessionRequestBody GetLastSessionRequest() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct UKtSessionRequestBody(ptr_addr);
	}
	struct TArray<struct UObject> GetPendingRequests() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 64);
		return struct TArray<struct UObject>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqKartGearSet
{
public:
	UPqKartGearSet(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetkartItemId() {
		return memory.read<struct FString>(m_addr + 56);
	}
	struct TMap<struct FString, int32_t> GetgearSettings() {
		return memory.read<struct TMap<struct FString, int32_t>>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class AItemIcebomb
{
public:
	AItemIcebomb(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USphereComponent GetOverlapComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 856);
		return struct USphereComponent(ptr_addr);
	}
	struct UParticleSystemComponent GetExplodeEffectComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 864);
		return struct UParticleSystemComponent(ptr_addr);
	}
	struct UParticleSystemComponent GetUseEffectComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 872);
		return struct UParticleSystemComponent(ptr_addr);
	}
	struct USkeletalMeshComponent GetIcebombMeshComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 880);
		return struct USkeletalMeshComponent(ptr_addr);
	}
	struct TSoftObjectPtr<USkeletalMesh> GetIcebombMesh() {
		return memory.read<struct TSoftObjectPtr<USkeletalMesh>>(m_addr + 888);
	}
	struct TSoftObjectPtr<UParticleSystem> GetIcebombParticle() {
		return memory.read<struct TSoftObjectPtr<UParticleSystem>>(m_addr + 928);
	}
	struct TSoftObjectPtr<UParticleSystem> GetUseEffectAsset() {
		return memory.read<struct TSoftObjectPtr<UParticleSystem>>(m_addr + 968);
	}
	struct TSoftObjectPtr<UFMODEvent> GetShootSound() {
		return memory.read<struct TSoftObjectPtr<UFMODEvent>>(m_addr + 1008);
	}
	struct TSoftObjectPtr<UFMODEvent> GetExplodeSound() {
		return memory.read<struct TSoftObjectPtr<UFMODEvent>>(m_addr + 1048);
	}
	struct TSoftObjectPtr<UCurveFloat> GetCurveAxisZAsset() {
		return memory.read<struct TSoftObjectPtr<UCurveFloat>>(m_addr + 1088);
	}
	struct TSoftObjectPtr<UCurveFloat> GetScaleCurveAsset() {
		return memory.read<struct TSoftObjectPtr<UCurveFloat>>(m_addr + 1128);
	}
	struct TSoftClassPtr<UObject> GetIcebombDecal() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 1168);
	}
	struct TSoftClassPtr<UObject> GetDummy_Bullet() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 1208);
	}
	struct TSoftObjectPtr<ULevelSequence> GetItemFeedSequence() {
		return memory.read<struct TSoftObjectPtr<ULevelSequence>>(m_addr + 1248);
	}
	struct UCurveFloat GetAffectCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1296);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat GetScaleCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1304);
		return struct UCurveFloat(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UDelegateBarrier
{
public:
	UDelegateBarrier(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrKartGearSet
{
public:
	UPrKartGearSet(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetkartItemId() {
		return memory.read<struct FString>(m_addr + 72);
	}
	int32_t GetremainGears() {
		return memory.read<int32_t>(m_addr + 88);
	}
	struct TMap<struct FString, int32_t> GetgearSettings() {
		return memory.read<struct TMap<struct FString, int32_t>>(m_addr + 96);
	}

private:
	std::uint64_t m_addr = 0;
};


class AMajorPodiumSequencePoint
{
public:
	AMajorPodiumSequencePoint(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSet<struct UObject> GetPreCacheAssetContainer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct TSet<struct UObject>(ptr_addr);
	}
	struct TMap<enum class EMajorPodiumSequenceType, struct TSoftObjectPtr<ULevelSequence>> GetAssetContainer() {
		return memory.read<struct TMap<enum class EMajorPodiumSequenceType, struct TSoftObjectPtr<ULevelSequence>>>(m_addr + 704);
	}
	struct FString GetPodiumKartPrefix() {
		return memory.read<struct FString>(m_addr + 784);
	}
	struct FString GetPodiumCharacterPrefix() {
		return memory.read<struct FString>(m_addr + 800);
	}
	struct FString GetLoserCharacterPrefix() {
		return memory.read<struct FString>(m_addr + 816);
	}
	struct AMajorPodiumMediaWall GetMediaWall() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 832);
		return struct AMajorPodiumMediaWall(ptr_addr);
	}
	struct TArray<struct AKdSequenceKart> GetSequenceKartContainer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 840);
		return struct TArray<struct AKdSequenceKart>(ptr_addr);
	}
	struct TArray<struct AKdSequenceCharacter> GetPodiumSequenceCharacterContainer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 856);
		return struct TArray<struct AKdSequenceCharacter>(ptr_addr);
	}
	struct TArray<struct UPodiumRiderNameTagComponent> GetSequenceCharacterNameTagContainer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 872);
		return struct TArray<struct UPodiumRiderNameTagComponent>(ptr_addr);
	}
	struct TArray<struct AKdSequenceCharacter> GetLoseSequenceCharacterContainer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 888);
		return struct TArray<struct AKdSequenceCharacter>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqKartGearReset
{
public:
	UPqKartGearReset(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetkartItemId() {
		return memory.read<struct FString>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCouponLogicComponent
{
public:
	UCouponLogicComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UCreateLicenseMissionTitleWidget
{
public:
	UCreateLicenseMissionTitleWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftClassPtr<UObject> GetLicenseSpeedLimitClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 72);
	}
	struct UUserWidget GetSpeedLimit() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 112);
		return struct UUserWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULiveryReportViewerPageWidget
{
public:
	ULiveryReportViewerPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UScenarioMessageWidget
{
public:
	UScenarioMessageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UWidgetAnimationGraph GetAnimationGraph() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UWidgetAnimationGraph(ptr_addr);
	}
	struct UScrollBox GetMessage_ScrollBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UScrollBox(ptr_addr);
	}
	UScenarioMessageElementWidget GetScrollElementClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return UScenarioMessageElementWidget(ptr_addr);
	}
	struct UScenarioMessageElementWidget GetCurrentElementWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UScenarioMessageElementWidget(ptr_addr);
	}
	struct UScenarioParseInstance GetParseInstance() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UScenarioParseInstance(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UJobStatus
{
public:
	UJobStatus(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPqAuthLive
{
public:
	UPqAuthLive(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbUseAccountLink() {
		return memory.read<bool>(m_addr + 96);
	}
	struct FString GetgamerTag() {
		return memory.read<struct FString>(m_addr + 104);
	}
	struct FString GetToken() {
		return memory.read<struct FString>(m_addr + 120);
	}
	struct FString GetosVer() {
		return memory.read<struct FString>(m_addr + 136);
	}
	struct FString GetDeviceType() {
		return memory.read<struct FString>(m_addr + 152);
	}
	struct FString GetDeviceID() {
		return memory.read<struct FString>(m_addr + 168);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrKartGearReset
{
public:
	UPrKartGearReset(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetkartItemId() {
		return memory.read<struct FString>(m_addr + 72);
	}
	int32_t GetremainGears() {
		return memory.read<int32_t>(m_addr + 88);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKdAccountCheat
{
public:
	UKdAccountCheat(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UWebSocketServerConnection GetDevServerConnection() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 104);
		return struct UWebSocketServerConnection(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKdListEntryButton
{
public:
	UKdListEntryButton(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrEquipKartSkill
{
public:
	UPrEquipKartSkill(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetequippedSkillNodeId() {
		return memory.read<struct FString>(m_addr + 72);
	}
	int32_t GetremainPoint() {
		return memory.read<int32_t>(m_addr + 88);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqUnEquipKartSkill
{
public:
	UPqUnEquipKartSkill(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetskillNodeId() {
		return memory.read<struct FString>(m_addr + 56);
	}
	bool GetbUseKoin() {
		return memory.read<bool>(m_addr + 72);
	}
	bool GetbInit() {
		return memory.read<bool>(m_addr + 73);
	}

private:
	std::uint64_t m_addr = 0;
};


class UInitPawnList
{
public:
	UInitPawnList(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPqKartSkillInfo
{
public:
	UPqKartSkillInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UCameraFocusLineComponent
{
public:
	UCameraFocusLineComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UCreateLicenseFinishWidget
{
public:
	UCreateLicenseFinishWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UDialogTemplate GetLicenseFinishWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return struct UDialogTemplate(ptr_addr);
	}
	struct TSoftClassPtr<UObject> GetLicenseFinishWidgetClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 80);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicenseMissionResultWidgetInst
{
public:
	ULicenseMissionResultWidgetInst(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UWidgetSwitcher GetWS_AchievementIconCount() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UWidgetSwitcher GetWS_ClearSwitcher() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UKdTextBlock GetV_NotClearText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UKdTextBlock GetV_ClearText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UKdTextBlock(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAnimNotifyMultiParticleInterface
{
public:
	UAnimNotifyMultiParticleInterface(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrKartSkillInfo
{
public:
	UPrKartSkillInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FString> GetequipSkillNodeIds() {
		return memory.read<struct TArray<struct FString>>(m_addr + 72);
	}
	int32_t GetLevel() {
		return memory.read<int32_t>(m_addr + 88);
	}
	int32_t GetExp() {
		return memory.read<int32_t>(m_addr + 92);
	}
	int32_t GetPoint() {
		return memory.read<int32_t>(m_addr + 96);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKdServerLoginTaskBotNgm
{
public:
	UKdServerLoginTaskBotNgm(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPcChangeKartExp
{
public:
	UPcChangeKartExp(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetkartItemId() {
		return memory.read<struct FString>(m_addr + 48);
	}
	int32_t GetExp() {
		return memory.read<int32_t>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};


class ADragForceZone
{
public:
	ADragForceZone(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetDragForceMultiplier() {
		return memory.read<float>(m_addr + 576);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicenseItemCounter
{
public:
	ULicenseItemCounter(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UKdTextBlock GetV_ItemCase() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UKdTextBlock GetV_ItemCounterText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UKdTextBlock(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrGetGnmMeta
{
public:
	UPrGetGnmMeta(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetData() {
		return memory.read<struct FString>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPcChangeAccountProfile
{
public:
	UPcChangeAccountProfile(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKtAccountProfile GetProfile() {
		return memory.read<struct FKtAccountProfile>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};


class USmsDrift
{
public:
	USmsDrift(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<struct FString, struct UObject> GetSmsPlayers() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 88);
		return struct TMap<struct FString, struct UObject>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicenseItemCubeComponent
{
public:
	ULicenseItemCubeComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AKdPawn GetPawn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 176);
		return struct AKdPawn(ptr_addr);
	}
	struct ULicenseItemCubeData GetData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 184);
		return struct ULicenseItemCubeData(ptr_addr);
	}
	struct TArray<struct FLicenseItemCubeDesc> GetItemCubeList() {
		return memory.read<struct TArray<struct FLicenseItemCubeDesc>>(m_addr + 192);
	}
	struct TArray<struct FLicenseItemCubeDesc> GetHiddenCubeList() {
		return memory.read<struct TArray<struct FLicenseItemCubeDesc>>(m_addr + 208);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrShopInventoryPickupKrPc
{
public:
	UPrShopInventoryPickupKrPc(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<int32_t> GetpickupIndex() {
		return memory.read<struct TArray<int32_t>>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class URacingPassPageWidget
{
public:
	URacingPassPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct UObject> GetListAnimObjectsRacingPass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 888);
		return struct TArray<struct UObject>(ptr_addr);
	}
	struct TArray<struct UObject> GetListAnimObjectsLevel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 904);
		return struct TArray<struct UObject>(ptr_addr);
	}
	struct TWeakObjectPtr<UDialogTemplate> GetBuyPremiumPassNoticeDialog() {
		return memory.read<struct TWeakObjectPtr<UDialogTemplate>>(m_addr + 920);
	}

private:
	std::uint64_t m_addr = 0;
};


class UFixedCameraCalculator
{
public:
	UFixedCameraCalculator(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AItemSingleAiPawn
{
public:
	AItemSingleAiPawn(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPcSendEmoticon
{
public:
	UPcSendEmoticon(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetuserID() {
		return memory.read<struct FString>(m_addr + 48);
	}
	struct FString GetemoticonType() {
		return memory.read<struct FString>(m_addr + 64);
	}
	struct FString GetemoticonID() {
		return memory.read<struct FString>(m_addr + 80);
	}
	struct FString GetemotionItemId() {
		return memory.read<struct FString>(m_addr + 96);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCreateLicenseSequenceSkipWidget
{
public:
	UCreateLicenseSequenceSkipWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftClassPtr<UObject> GetLicenseSeqeunceSkipWidgetClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 72);
	}
	struct UDialogTemplate GetSkipWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 112);
		return struct UDialogTemplate(ptr_addr);
	}
	int32_t GetPlayCount() {
		return memory.read<int32_t>(m_addr + 120);
	}

private:
	std::uint64_t m_addr = 0;
};


class UC_RacingPassPageWidget
{
public:
	UC_RacingPassPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULicenseCoinInterface
{
public:
	ULicenseCoinInterface(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPqSetCustomProperty
{
public:
	UPqSetCustomProperty(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetName() {
		return memory.read<struct FString>(m_addr + 56);
	}
	struct FString GetvalueJsonString() {
		return memory.read<struct FString>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPcSetCustomProperties
{
public:
	UPcSetCustomProperties(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<struct FString, struct FString> GetProperties() {
		return memory.read<struct TMap<struct FString, struct FString>>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqGetReportCount
{
public:
	UPqGetReportCount(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrCheckString
{
public:
	UPrCheckString(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetText() {
		return memory.read<struct FString>(m_addr + 72);
	}
	bool GetcheckResult() {
		return memory.read<bool>(m_addr + 88);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrGetReportCount
{
public:
	UPrGetReportCount(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetreportCount() {
		return memory.read<int32_t>(m_addr + 72);
	}
	int32_t GetmaxReportCount() {
		return memory.read<int32_t>(m_addr + 76);
	}

private:
	std::uint64_t m_addr = 0;
};


class UDisableKartForcing
{
public:
	UDisableKartForcing(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPqGetRecentPlayers
{
public:
	UPqGetRecentPlayers(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UKeyPresetConfig
{
public:
	UKeyPresetConfig(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class EKeyPreset GetActivePreset() {
		return memory.read<enum class EKeyPreset>(m_addr + 40);
	}
	struct FKeyPresetOverrides GetTraditionalPresetOverrides() {
		return memory.read<struct FKeyPresetOverrides>(m_addr + 48);
	}
	struct FKeyPresetOverrides GetWASDPresetOverrides() {
		return memory.read<struct FKeyPresetOverrides>(m_addr + 80);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrGetRecentPlayers
{
public:
	UPrGetRecentPlayers(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FKtRecentGame> GetrecentGames() {
		return memory.read<struct TArray<struct FKtRecentGame>>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicenseDataAsset
{
public:
	ULicenseDataAsset(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetTargetName() {
		return memory.read<struct FText>(m_addr + 48);
	}
	struct FKartDesc GetKartDesc() {
		return memory.read<struct FKartDesc>(m_addr + 72);
	}
	struct FCharacterDesc GetCharacterDesc() {
		return memory.read<struct FCharacterDesc>(m_addr + 256);
	}
	struct TSoftObjectPtr<UWorld> GetTrackLevel() {
		return memory.read<struct TSoftObjectPtr<UWorld>>(m_addr + 352);
	}
	struct TSoftObjectPtr<UWorld> GetTrackSubLevel() {
		return memory.read<struct TSoftObjectPtr<UWorld>>(m_addr + 392);
	}
	struct FString GetTrackName() {
		return memory.read<struct FString>(m_addr + 432);
	}
	int32_t GetLapCount() {
		return memory.read<int32_t>(m_addr + 448);
	}
	struct FLicenseBaseUI GetLicenseBaseUI() {
		return memory.read<struct FLicenseBaseUI>(m_addr + 452);
	}
	struct FLicenseSequenceUI GetLicenseSequenceUI() {
		return memory.read<struct FLicenseSequenceUI>(m_addr + 459);
	}
	struct TArray<struct ULicenseContents> GetLicenseContents() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 464);
		return struct TArray<struct ULicenseContents>(ptr_addr);
	}
	struct TSoftObjectPtr<ULevelSequence> GetStartSequenceTrackOverride() {
		return memory.read<struct TSoftObjectPtr<ULevelSequence>>(m_addr + 480);
	}
	struct TSoftObjectPtr<ULevelSequence> GetFinishSequenceOverride() {
		return memory.read<struct TSoftObjectPtr<ULevelSequence>>(m_addr + 520);
	}
	struct ULicenseStarCondition GetCondition() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 560);
		return struct ULicenseStarCondition(ptr_addr);
	}
	struct TSoftClassPtr<UObject> GetWinningRule() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 568);
	}
	bool GetbOverrideWorldOrigin() {
		return memory.read<bool>(m_addr + 608);
	}
	bool GetbAllowAssist() {
		return memory.read<bool>(m_addr + 609);
	}
	bool GetbDisableAutoDrive() {
		return memory.read<bool>(m_addr + 610);
	}
	bool GetbDisableAutoDriftBoost() {
		return memory.read<bool>(m_addr + 611);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAngelReaction
{
public:
	UAngelReaction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USkeletalMeshComponent GetMeshSkeletalComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 536);
		return struct USkeletalMeshComponent(ptr_addr);
	}
	struct UParticleSystemComponent GetStartEffectComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 544);
		return struct UParticleSystemComponent(ptr_addr);
	}
	struct UParticleSystemComponent GetActivateEffectComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 552);
		return struct UParticleSystemComponent(ptr_addr);
	}
	struct TSoftObjectPtr<UFMODEvent> GetAffectSound() {
		return memory.read<struct TSoftObjectPtr<UFMODEvent>>(m_addr + 560);
	}
	struct TSoftObjectPtr<UParticleSystem> GetStartEffect() {
		return memory.read<struct TSoftObjectPtr<UParticleSystem>>(m_addr + 600);
	}
	struct TSoftObjectPtr<UParticleSystem> GetEndEffect() {
		return memory.read<struct TSoftObjectPtr<UParticleSystem>>(m_addr + 640);
	}
	struct TSoftObjectPtr<UParticleSystem> GetUseEffect() {
		return memory.read<struct TSoftObjectPtr<UParticleSystem>>(m_addr + 680);
	}
	struct TSoftObjectPtr<UParticleSystem> GetDefendedEffect() {
		return memory.read<struct TSoftObjectPtr<UParticleSystem>>(m_addr + 720);
	}
	struct TSoftObjectPtr<UAnimMontage> GetAngelMontage() {
		return memory.read<struct TSoftObjectPtr<UAnimMontage>>(m_addr + 760);
	}
	struct TSoftObjectPtr<USkeletalMesh> GetAngelMesh() {
		return memory.read<struct TSoftObjectPtr<USkeletalMesh>>(m_addr + 800);
	}
	struct UItemComponent GetLocalVictim() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 840);
		return struct UItemComponent(ptr_addr);
	}
	struct UAnimMontage GetMontage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 848);
		return struct UAnimMontage(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTouchKeyGuideInstWidget
{
public:
	UTouchKeyGuideInstWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UKdTextBlock Getv_TextBlock() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UWidgetAnimation GetAlertAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UWidgetAnimation(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrGetRecommandFriends
{
public:
	UPrGetRecommandFriends(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FKtRecommandFriend> Getfriends() {
		return memory.read<struct TArray<struct FKtRecommandFriend>>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAccountParty
{
public:
	UAccountParty(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<struct FString, struct FPartyMemberInfo> GetPartyMembers() {
		return memory.read<struct TMap<struct FString, struct FPartyMemberInfo>>(m_addr + 224);
	}
	struct FPartyInfo GetPartyInfo() {
		return memory.read<struct FPartyInfo>(m_addr + 304);
	}
	struct FString GetPartyId() {
		return memory.read<struct FString>(m_addr + 376);
	}
	bool GetpartyBoss() {
		return memory.read<bool>(m_addr + 392);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqGetGnmMeta
{
public:
	UPqGetGnmMeta(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetaccountId() {
		return memory.read<struct FString>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UDriftGaugeWidget
{
public:
	UDriftGaugeWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ASpeedTeamAiPawn
{
public:
	ASpeedTeamAiPawn(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPqCheckString
{
public:
	UPqCheckString(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetText() {
		return memory.read<struct FString>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqGetAchievementInfo
{
public:
	UPqGetAchievementInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULicenseSpawnTrafficConeData
{
public:
	ULicenseSpawnTrafficConeData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbHitLoseRule() {
		return memory.read<bool>(m_addr + 72);
	}
	int32_t GetHitScore() {
		return memory.read<int32_t>(m_addr + 76);
	}
	int32_t GetTrafficConeMess() {
		return memory.read<int32_t>(m_addr + 80);
	}
	struct TSoftObjectPtr<UStaticMesh> GetTrafficConeMeshClass() {
		return memory.read<struct TSoftObjectPtr<UStaticMesh>>(m_addr + 88);
	}
	struct FString GetCheckPointName() {
		return memory.read<struct FString>(m_addr + 128);
	}
	bool GetbUpdateObjectSpawnSplineData() {
		return memory.read<bool>(m_addr + 144);
	}
	bool GetbCreateLicenseObjectSpawnSplines() {
		return memory.read<bool>(m_addr + 145);
	}
	struct TArray<struct FTransform> GetLicenseSpawnTransformList() {
		return memory.read<struct TArray<struct FTransform>>(m_addr + 152);
	}
	struct TArray<struct FLicenseObjectSpawnSplineData> GetObjectSpawnSplineDataList() {
		return memory.read<struct TArray<struct FLicenseObjectSpawnSplineData>>(m_addr + 168);
	}
	struct TSoftObjectPtr<UFMODEvent> GetSoundEvent() {
		return memory.read<struct TSoftObjectPtr<UFMODEvent>>(m_addr + 184);
	}
	struct TArray<struct ALicenseTrafficCone> GetTrafficConeList() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 224);
		return struct TArray<struct ALicenseTrafficCone>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class AGameLiftKdGameSession
{
public:
	AGameLiftKdGameSession(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<struct FString, struct FString> GetSmsPlayerSessionId2PlayerId() {
		return memory.read<struct TMap<struct FString, struct FString>>(m_addr + 616);
	}
	struct UKtSessionRequestBody GetSessionRequest() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UKtSessionRequestBody(ptr_addr);
	}
	struct TMap<struct FString, struct UKtSessionPlayer> Getplayers() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return struct TMap<struct FString, struct UKtSessionPlayer>(ptr_addr);
	}
	struct TMap<struct FString, struct UKtSessionObserver> Getobservers() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 800);
		return struct TMap<struct FString, struct UKtSessionObserver>(ptr_addr);
	}
	struct USessionApiServer GetSessionApiServer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 968);
		return struct USessionApiServer(ptr_addr);
	}
	struct USmsProvider GetSms() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1000);
		return struct USmsProvider(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPcAchievementGlobalAnnounce
{
public:
	UPcAchievementGlobalAnnounce(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetachievementId() {
		return memory.read<struct FString>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKartEventComponent
{
public:
	UKartEventComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UMaterialParameterCollection GetCachedCollection() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 960);
		return struct UMaterialParameterCollection(ptr_addr);
	}
	struct AExponentialHeightFog GetFog() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 968);
		return struct AExponentialHeightFog(ptr_addr);
	}
	struct FCPFogData GetWorldFogData() {
		return memory.read<struct FCPFogData>(m_addr + 976);
	}
	struct FCPFogData GetFogData() {
		return memory.read<struct FCPFogData>(m_addr + 1080);
	}
	float GetDuration() {
		return memory.read<float>(m_addr + 1184);
	}
	float GetBlendProgress() {
		return memory.read<float>(m_addr + 1188);
	}
	float GetBlendPeriod() {
		return memory.read<float>(m_addr + 1192);
	}
	float GetBlendInTime() {
		return memory.read<float>(m_addr + 1196);
	}
	float GetBlendOutTime() {
		return memory.read<float>(m_addr + 1200);
	}

private:
	std::uint64_t m_addr = 0;
};


class UBelongingStatics
{
public:
	UBelongingStatics(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPqGetEventChallengeInfo
{
public:
	UPqGetEventChallengeInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULicenseAllyActorData
{
public:
	ULicenseAllyActorData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FLicenseAllyActorInfo> GetLicenseSpawnActorDataList() {
		return memory.read<struct TArray<struct FLicenseAllyActorInfo>>(m_addr + 64);
	}
	float GetOffset() {
		return memory.read<float>(m_addr + 80);
	}
	float GetScore() {
		return memory.read<float>(m_addr + 84);
	}
	float GetScale() {
		return memory.read<float>(m_addr + 88);
	}

private:
	std::uint64_t m_addr = 0;
};


class UWrongWayWidget
{
public:
	UWrongWayWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UFMODEvent GetWrongWaySound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UFMODEvent(ptr_addr);
	}
	struct UWidgetAnimation GetAnim_Wrongway() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UWidgetAnimation(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqRemoveNews
{
public:
	UPqRemoveNews(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetID() {
		return memory.read<struct FString>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqUserInfo
{
public:
	UPqUserInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetaccountId() {
		return memory.read<struct FString>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPcNews
{
public:
	UPcNews(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FString> Getinserted() {
		return memory.read<struct TArray<struct FString>>(m_addr + 48);
	}
	struct TArray<struct FString> Getremoved() {
		return memory.read<struct TArray<struct FString>>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};


class ALicenseManager
{
public:
	ALicenseManager(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UShadowQuestSetKartRaceOver
{
public:
	UShadowQuestSetKartRaceOver(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAllLevelAutoDrivePhaseComponent
{
public:
	UAllLevelAutoDrivePhaseComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AFMODSkeletalMeshActor
{
public:
	AFMODSkeletalMeshActor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UFMODNotifyComponent GetFMODNotifyComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UFMODNotifyComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKdHelper
{
public:
	UKdHelper(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPlatformSessionProperty
{
public:
	UPlatformSessionProperty(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class EPlatformSessionType GetType() {
		return memory.read<enum class EPlatformSessionType>(m_addr + 40);
	}
	struct FString GetaccountId() {
		return memory.read<struct FString>(m_addr + 48);
	}
	struct FString GetPartyId() {
		return memory.read<struct FString>(m_addr + 64);
	}
	struct FString GetcsId() {
		return memory.read<struct FString>(m_addr + 80);
	}

private:
	std::uint64_t m_addr = 0;
};


class UWqReply
{
public:
	UWqReply(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetID() {
		return memory.read<struct FString>(m_addr + 56);
	}
	struct UObject GetReply() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return struct UObject(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqSignedUrl
{
public:
	UPqSignedUrl(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString Getcontents() {
		return memory.read<struct FString>(m_addr + 56);
	}
	struct TArray<struct FString> GetUniqueId() {
		return memory.read<struct TArray<struct FString>>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqReportLiveryInfo
{
public:
	UPqReportLiveryInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString Getnpsn() {
		return memory.read<struct FString>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class USystemPopupLogicComponent
{
public:
	USystemPopupLogicComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UKdServicePopup GetServicePopup() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 248);
		return struct UKdServicePopup(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UNormalChallengePageWidget
{
public:
	UNormalChallengePageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UShopPageWidget
{
public:
	UShopPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<int32_t, struct FString> GetPriceCurrencyInfos() {
		return memory.read<struct TMap<int32_t, struct FString>>(m_addr + 976);
	}
	struct FString GetSelectedShopStockID() {
		return memory.read<struct FString>(m_addr + 1064);
	}
	struct FString GetShopStockIDForEnterDateOfBirth() {
		return memory.read<struct FString>(m_addr + 1080);
	}
	struct TWeakObjectPtr<URiderNameChangeDialog> GetRiderNameChangeWidget() {
		return memory.read<struct TWeakObjectPtr<URiderNameChangeDialog>>(m_addr + 1144);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqReportLivery
{
public:
	UPqReportLivery(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString Getnpsn() {
		return memory.read<struct FString>(m_addr + 56);
	}
	struct FString GetriderName() {
		return memory.read<struct FString>(m_addr + 72);
	}
	struct FString GetKartID() {
		return memory.read<struct FString>(m_addr + 88);
	}
	struct FString GetliveryId() {
		return memory.read<struct FString>(m_addr + 104);
	}
	struct FString GetliveryLabel() {
		return memory.read<struct FString>(m_addr + 120);
	}
	enum class EKtLiveryState GetState() {
		return memory.read<enum class EKtLiveryState>(m_addr + 136);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrReportLivery
{
public:
	UPrReportLivery(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString Getnpsn() {
		return memory.read<struct FString>(m_addr + 72);
	}
	struct FString GetliveryId() {
		return memory.read<struct FString>(m_addr + 88);
	}
	enum class EKtLiveryState GetState() {
		return memory.read<enum class EKtLiveryState>(m_addr + 104);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqReportLiveryDeleteConfirm
{
public:
	UPqReportLiveryDeleteConfirm(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UBalloonComponent
{
public:
	UBalloonComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetBalloonId() {
		return memory.read<struct FString>(m_addr + 3872);
	}
	struct UKartSkeletalMeshComponent GetKartSkeletalMeshComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3888);
		return struct UKartSkeletalMeshComponent(ptr_addr);
	}
	struct USkeletalMeshComponent GetBalloonMeshComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3896);
		return struct USkeletalMeshComponent(ptr_addr);
	}
	struct UBelongingDataAssetBalloonCable GetBalloonCableDataAsset() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3904);
		return struct UBelongingDataAssetBalloonCable(ptr_addr);
	}
	struct UBelongingDataAssetBalloon GetBalloonDataAsset() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3912);
		return struct UBelongingDataAssetBalloon(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class AItemMine
{
public:
	AItemMine(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftObjectPtr<UFMODEvent> GetFiringSound() {
		return memory.read<struct TSoftObjectPtr<UFMODEvent>>(m_addr + 856);
	}
	float GetActionDelay() {
		return memory.read<float>(m_addr + 896);
	}
	float GetLifeSpanTime() {
		return memory.read<float>(m_addr + 900);
	}
	struct TArray<struct USkeletalMeshComponent> GetMineSkeletalMeshComponents() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 912);
		return struct TArray<struct USkeletalMeshComponent>(ptr_addr);
	}
	struct TArray<struct USphereComponent> GetOverlapComponents() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 928);
		return struct TArray<struct USphereComponent>(ptr_addr);
	}
	struct TSoftObjectPtr<USkeletalMesh> GetMineMesh() {
		return memory.read<struct TSoftObjectPtr<USkeletalMesh>>(m_addr + 944);
	}
	struct TSoftObjectPtr<UFMODEvent> GetIdleBeepSoundAsset() {
		return memory.read<struct TSoftObjectPtr<UFMODEvent>>(m_addr + 984);
	}
	struct TSoftObjectPtr<UAnimSequenceBase> GetMineAnim() {
		return memory.read<struct TSoftObjectPtr<UAnimSequenceBase>>(m_addr + 1024);
	}
	struct TSoftObjectPtr<UCurveFloat> GetDropCurveAsset() {
		return memory.read<struct TSoftObjectPtr<UCurveFloat>>(m_addr + 1064);
	}
	struct TSoftObjectPtr<ULevelSequence> GetItemFeedSequence() {
		return memory.read<struct TSoftObjectPtr<ULevelSequence>>(m_addr + 1104);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqRegisterRecentActivity
{
public:
	UPqRegisterRecentActivity(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class EKtRecentActivityType GetType() {
		return memory.read<enum class EKtRecentActivityType>(m_addr + 56);
	}
	struct FString GetVal() {
		return memory.read<struct FString>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTransition_IfSetupComplete
{
public:
	UTransition_IfSetupComplete(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UBelongingDataAssetCharacter
{
public:
	UBelongingDataAssetCharacter(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetCharacterItemKey() {
		return memory.read<struct FString>(m_addr + 64);
	}
	struct TArray<struct FString> GetCostumeKeyContainer() {
		return memory.read<struct TArray<struct FString>>(m_addr + 80);
	}
	struct UFMODEvent GetSuccessVoice() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 96);
		return struct UFMODEvent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrRegisterTag
{
public:
	UPrRegisterTag(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPqCommandAddBalance
{
public:
	UPqCommandAddBalance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UGarageLogicComponent
{
public:
	UGarageLogicComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKtItemPreset GetCurrentPreset() {
		return memory.read<struct FKtItemPreset>(m_addr + 376);
	}
	struct TWeakObjectPtr<AOutGamePawn> GetItemModelPawn() {
		return memory.read<struct TWeakObjectPtr<AOutGamePawn>>(m_addr + 536);
	}
	struct TWeakObjectPtr<ULevelSequencePlayer> GetKartSelectionSequencePlayer() {
		return memory.read<struct TWeakObjectPtr<ULevelSequencePlayer>>(m_addr + 544);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKdSequenceDirector
{
public:
	UKdSequenceDirector(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct AActor> GetRegisteredActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct TArray<struct AActor>(ptr_addr);
	}
	struct TSoftObjectPtr<UStaticMesh> GetAIKartMesh() {
		return memory.read<struct TSoftObjectPtr<UStaticMesh>>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqShopPurchaseCancelSteam
{
public:
	UPqShopPurchaseCancelSteam(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetorderId() {
		return memory.read<struct FString>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class ADummyGameSession
{
public:
	ADummyGameSession(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPcFirstBuyPlatform
{
public:
	UPcFirstBuyPlatform(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class EKtAffiliatePlatform GetfirstBuyPlatform() {
		return memory.read<enum class EKtAffiliatePlatform>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKartPartAnimInstance
{
public:
	UKartPartAnimInstance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbTransforming() {
		return memory.read<bool>(m_addr + 696);
	}
	bool GetbTransformed() {
		return memory.read<bool>(m_addr + 697);
	}
	bool GetbUntransforming() {
		return memory.read<bool>(m_addr + 698);
	}
	bool GetbUntransformed() {
		return memory.read<bool>(m_addr + 699);
	}
	float GetTransformAnimRate() {
		return memory.read<float>(m_addr + 700);
	}
	struct UAnimSequenceBase GetAnimTransform() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct UAnimSequenceBase(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqCumulativePlayInfo
{
public:
	UPqCumulativePlayInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPqJoinCustomGame
{
public:
	UPqJoinCustomGame(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetSessionId() {
		return memory.read<struct FString>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class ASplineAniActor
{
public:
	ASplineAniActor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetActorHavingSplineComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 544);
		return struct AActor(ptr_addr);
	}
	float GetPlayRate() {
		return memory.read<float>(m_addr + 552);
	}
	bool GetbUseFmodAudio() {
		return memory.read<bool>(m_addr + 556);
	}
	bool GetbRewindStyle() {
		return memory.read<bool>(m_addr + 557);
	}
	float GetStartDelay() {
		return memory.read<float>(m_addr + 560);
	}
	float GetPreviewTime() {
		return memory.read<float>(m_addr + 564);
	}
	struct URaceTimeComponent GetRaceTimeComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 576);
		return struct URaceTimeComponent(ptr_addr);
	}
	struct USplineComponent GetTargetSplineComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 584);
		return struct USplineComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrCumulativePlayInfo
{
public:
	UPrCumulativePlayInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetplayTimeMin() {
		return memory.read<int32_t>(m_addr + 72);
	}
	struct TArray<int32_t> GetplatformLoginCounts() {
		return memory.read<struct TArray<int32_t>>(m_addr + 80);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicenseReportWidget
{
public:
	ULicenseReportWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UWidgetSwitcher GetSW_Splash() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 816);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UWidgetAnimation GetAnim_Result() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 824);
		return struct UWidgetAnimation(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKdProfilerWidget
{
public:
	UKdProfilerWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct URaceTimeComponent GetRaceTimeComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct URaceTimeComponent(ptr_addr);
	}
	struct FDateTime GetFPSChartStartTime() {
		return memory.read<struct FDateTime>(m_addr + 624);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqGetMail
{
public:
	UPqGetMail(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetmailId() {
		return memory.read<struct FString>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqMobileStoreReviewOpenInfo
{
public:
	UPqMobileStoreReviewOpenInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrMobileStoreReviewOpenInfo
{
public:
	UPrMobileStoreReviewOpenInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKtMobileStoreReviewOpenInfo GetData() {
		return memory.read<struct FKtMobileStoreReviewOpenInfo>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UItemAimWidget
{
public:
	UItemAimWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UWidgetAnimation GetAnim_OnButtonPress() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation GetAnim_ButtonPressing() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation GetAnim_OnButtonRelease() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation GetAnim_LockOn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation GetAnim_LockOn_Release() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UOverlay GetMasterOverlay() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UOverlay(ptr_addr);
	}
	float GetOnButtonPressSpeed() {
		return memory.read<float>(m_addr + 712);
	}
	float GetButtonPressingSpeed() {
		return memory.read<float>(m_addr + 716);
	}
	float GetOnButtonReleaseSpeed() {
		return memory.read<float>(m_addr + 720);
	}
	float GetLockOnSpeed() {
		return memory.read<float>(m_addr + 724);
	}
	float GetLockOnReleaseSpeed() {
		return memory.read<float>(m_addr + 728);
	}
	struct AActor GetLastTarget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 736);
		return struct AActor(ptr_addr);
	}
	struct TArray<struct UFMODEvent> GetAimSounds() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 760);
		return struct TArray<struct UFMODEvent>(ptr_addr);
	}
	struct UFMODEvent GetTargetOnMeSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 776);
		return struct UFMODEvent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCouponPageWidget
{
public:
	UCouponPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UDialogTemplate GetCouponDialogWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 744);
		return struct UDialogTemplate(ptr_addr);
	}
	struct UDialogTemplate GetRewardDialogWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 752);
		return struct UDialogTemplate(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTouchBrakeButton
{
public:
	UTouchBrakeButton(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPqUpdateMobileStoreReviewOpenCount
{
public:
	UPqUpdateMobileStoreReviewOpenCount(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UCheckIfTrackPlayListValid
{
public:
	UCheckIfTrackPlayListValid(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UShopConfirmItem
{
public:
	UShopConfirmItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FInventoryItemKrPc> GetShopConfirmStocks() {
		return memory.read<struct TArray<struct FInventoryItemKrPc>>(m_addr + 216);
	}
	struct TArray<struct FString> GetShopAutoConfirmedStockIDs() {
		return memory.read<struct TArray<struct FString>>(m_addr + 232);
	}
	struct TArray<struct FKtShopStock> GetShopAutoConfirmedStocks() {
		return memory.read<struct TArray<struct FKtShopStock>>(m_addr + 248);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCreatePlayMissionWidget
{
public:
	UCreatePlayMissionWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftClassPtr<UObject> GetPlayMissionWidgetClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrUpdateMobileStoreReviewOpenCount
{
public:
	UPrUpdateMobileStoreReviewOpenCount(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetCount() {
		return memory.read<int32_t>(m_addr + 72);
	}
	struct FDateTime GetopenTime() {
		return memory.read<struct FDateTime>(m_addr + 80);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqRiderNameChangeInfo
{
public:
	UPqRiderNameChangeInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULicenseDriftTutorialData
{
public:
	ULicenseDriftTutorialData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FLicenseDriftTutorialChapter> GetChapterList() {
		return memory.read<struct TArray<struct FLicenseDriftTutorialChapter>>(m_addr + 64);
	}
	struct TSoftClassPtr<UObject> GetTitleWidgetClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 80);
	}
	struct TSoftClassPtr<UObject> GetMissionWidgetClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 120);
	}
	struct TSoftObjectPtr<UParticleSystem> GetNextPointParticle() {
		return memory.read<struct TSoftObjectPtr<UParticleSystem>>(m_addr + 160);
	}
	struct FLinearColor GetNextPointOverlappedColor() {
		return memory.read<struct FLinearColor>(m_addr + 200);
	}
	float GetNextPointScale() {
		return memory.read<float>(m_addr + 216);
	}
	float GetNextPointCollisionRadius() {
		return memory.read<float>(m_addr + 220);
	}
	float GetDistanceFromNextChapterZone() {
		return memory.read<float>(m_addr + 224);
	}
	float GetNextPointSpawnDelayTime() {
		return memory.read<float>(m_addr + 228);
	}
	int32_t GetCurrentChapterIndex() {
		return memory.read<int32_t>(m_addr + 232);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrRiderNameChangeInfo
{
public:
	UPrRiderNameChangeInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKtRiderNameChange GetriderNameChange() {
		return memory.read<struct FKtRiderNameChange>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UDetailLevelProgressWidget
{
public:
	UDetailLevelProgressWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UImage GetV_SideColorBar() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UImage(ptr_addr);
	}
	struct UPlatformIconWidget GetV_PlatformIconWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UPlatformIconWidget(ptr_addr);
	}
	struct USizeBox GetV_GrandPrixTier() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct USizeBox(ptr_addr);
	}
	struct UGrandPrixTierIconWidget GetV_GrandPrixTierIcon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UGrandPrixTierIconWidget(ptr_addr);
	}
	struct UKdTextBlock GetV_Name() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UKdTextBlock GetV_Level() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UKdTextBlock GetV_LevelMax() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UKdTextBlock GetV_LevelUp() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UKdTextBlock GetV_CurrentExp() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UKdTextBlock GetV_ExpBound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UKdTextBlock GetV_AddedExp() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UMajorResultProgressWidget GetV_ProgressBar() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UMajorResultProgressWidget(ptr_addr);
	}
	enum class ELevelType GetLevelType() {
		return memory.read<enum class ELevelType>(m_addr + 704);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAccountReport
{
public:
	UAccountReport(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPqRiderNameChangeReserve
{
public:
	UPqRiderNameChangeReserve(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetriderName() {
		return memory.read<struct FString>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UM_TimeAttackPersonalResultWidget
{
public:
	UM_TimeAttackPersonalResultWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UButtonTemplate GetV_RetryButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1096);
		return struct UButtonTemplate(ptr_addr);
	}
	struct UButtonTemplate GetV_ExitButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1104);
		return struct UButtonTemplate(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UQuestListEntryObject
{
public:
	UQuestListEntryObject(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetMissionIdx() {
		return memory.read<int32_t>(m_addr + 40);
	}
	struct FString GetMissionName() {
		return memory.read<struct FString>(m_addr + 48);
	}
	struct FString GetMissionCategory() {
		return memory.read<struct FString>(m_addr + 64);
	}
	struct FString GetMissionTitle() {
		return memory.read<struct FString>(m_addr + 80);
	}
	struct FString GetMissionConditions() {
		return memory.read<struct FString>(m_addr + 96);
	}
	struct FKtClientMissionDef GetMissionDef() {
		return memory.read<struct FKtClientMissionDef>(m_addr + 112);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKdImageTextBlockDecorator
{
public:
	UKdImageTextBlockDecorator(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPqRiderNameDuplicateCheck
{
public:
	UPqRiderNameDuplicateCheck(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetriderName() {
		return memory.read<struct FString>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAnimatedNumberTextBlock
{
public:
	UAnimatedNumberTextBlock(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetDefaultNum() {
		return memory.read<int32_t>(m_addr + 680);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqCustomGameSetGameOption
{
public:
	UPqCustomGameSetGameOption(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FCsGameOption GetgameOption() {
		return memory.read<struct FCsGameOption>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKeyIconWidget
{
public:
	UKeyIconWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKey GetKey_PC() {
		return memory.read<struct FKey>(m_addr + 1000);
	}
	struct FKey GetKey_Gamepad() {
		return memory.read<struct FKey>(m_addr + 1024);
	}
	bool GetBindKeyEvent() {
		return memory.read<bool>(m_addr + 1048);
	}
	bool GetbFocusedWidgetClickCondition() {
		return memory.read<bool>(m_addr + 1049);
	}
	bool GetbIsFocusedWidgetClick() {
		return memory.read<bool>(m_addr + 1050);
	}
	bool GetbNeitherAcceptNorBackButtonCondition() {
		return memory.read<bool>(m_addr + 1051);
	}
	bool GetbIsNeitherAcceptNorBackButton() {
		return memory.read<bool>(m_addr + 1052);
	}
	bool GetbEnableRepeatEvent() {
		return memory.read<bool>(m_addr + 1053);
	}
	enum class EHorizontalAlignment GetSlot_HAlign() {
		return memory.read<enum class EHorizontalAlignment>(m_addr + 1054);
	}
	struct TSoftObjectPtr<UKeyTextureMap> GetKey_Common() {
		return memory.read<struct TSoftObjectPtr<UKeyTextureMap>>(m_addr + 1072);
	}
	struct TSoftObjectPtr<UKeyTextureMap> GetKey_XBOX() {
		return memory.read<struct TSoftObjectPtr<UKeyTextureMap>>(m_addr + 1112);
	}
	struct TSoftObjectPtr<UKeyTextureMap> GetKey_DualShock() {
		return memory.read<struct TSoftObjectPtr<UKeyTextureMap>>(m_addr + 1152);
	}
	struct UOverlay GetV_InnerOverlay() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1192);
		return struct UOverlay(ptr_addr);
	}
	struct UKdTextBlock GetV_KeyText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1200);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UWidgetSwitcher GetV_Switcher() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1208);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UHorizontalBox GetV_KeySlot() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1216);
		return struct UHorizontalBox(ptr_addr);
	}
	struct FMargin GetInnerOverlay_Margin() {
		return memory.read<struct FMargin>(m_addr + 1224);
	}
	enum class EHorizontalAlignment GetInnerOverlay_HAlign() {
		return memory.read<enum class EHorizontalAlignment>(m_addr + 1240);
	}
	enum class EVerticalAlignment GetInnerOverlay_VAlign() {
		return memory.read<enum class EVerticalAlignment>(m_addr + 1241);
	}
	enum class EInputDeviceType GetInputDevice() {
		return memory.read<enum class EInputDeviceType>(m_addr + 1242);
	}
	bool GetbIsPlatformFixed() {
		return memory.read<bool>(m_addr + 1243);
	}
	bool GetbForAllPlatform() {
		return memory.read<bool>(m_addr + 1244);
	}
	enum class EInputDeviceType GetLastestInputDevice() {
		return memory.read<enum class EInputDeviceType>(m_addr + 1245);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrRiderNameDuplicateCheck
{
public:
	UPrRiderNameDuplicateCheck(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetNotSupportedLetter() {
		return memory.read<struct FString>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAccountShop
{
public:
	UAccountShop(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<enum class EShopItemType, struct FShopStockItemProducts> GetShopStockItemProducts() {
		return memory.read<struct TMap<enum class EShopItemType, struct FShopStockItemProducts>>(m_addr + 48);
	}
	struct TMap<struct FString, struct FString> GetShopStockItemPlatformProductIds() {
		return memory.read<struct TMap<struct FString, struct FString>>(m_addr + 128);
	}
	struct FShopPurchasingInfo GetSelectedShopStockInfo() {
		return memory.read<struct FShopPurchasingInfo>(m_addr + 208);
	}
	struct UAccountShopPlatform GetAccountShopPlatform() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 344);
		return struct UAccountShopPlatform(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAssistLogWidget
{
public:
	UAssistLogWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UWidgetAnimation GetInAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UOverlay GetAssist1() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UOverlay(ptr_addr);
	}
	struct UOverlay GetAssist2() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UOverlay(ptr_addr);
	}
	struct UOverlay GetAssist3() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UOverlay(ptr_addr);
	}
	struct UOverlay GetAssist4() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UOverlay(ptr_addr);
	}
	struct UOverlay GetAssist5() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UOverlay(ptr_addr);
	}
	struct UOverlay GetAssist6() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UOverlay(ptr_addr);
	}
	struct UTextBlock GetDriftLimit() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock GetDriftLimitAdd() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UTextBlock(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAssistList
{
public:
	UAssistList(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetAnimDelayTime() {
		return memory.read<float>(m_addr + 608);
	}
	struct UVerticalBox GetV_ListBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UVerticalBox(ptr_addr);
	}
	struct TSoftClassPtr<UObject> GetAssistListInstClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 624);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAccountShopDev
{
public:
	UAccountShopDev(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class USendPacket_Clear_License
{
public:
	USendPacket_Clear_License(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAlarmManagerComponent
{
public:
	UAlarmManagerComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UTouchEventButton
{
public:
	UTouchEventButton(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class URewardEntryObject
{
public:
	URewardEntryObject(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetItemId() {
		return memory.read<struct FString>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};


class ASpeedTeamPawn
{
public:
	ASpeedTeamPawn(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAddDistanceTimeWidget
{
public:
	UAddDistanceTimeWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftClassPtr<UObject> GetDistTimeWidgetClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 72);
	}
	struct TSoftClassPtr<UObject> GetDistWidgetClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 112);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAccountShopSteam
{
public:
	UAccountShopSteam(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class URetireAnimation
{
public:
	URetireAnimation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UM_CommunityPageWidget
{
public:
	UM_CommunityPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UCommunityFriendObject GetUserInFriendMenu() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 816);
		return struct UCommunityFriendObject(ptr_addr);
	}
	struct UCommunityFriendObject GetUserInInviteUserMenu() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1184);
		return struct UCommunityFriendObject(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAccountShopNxa
{
public:
	UAccountShopNxa(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAccountShopPSN
{
public:
	UAccountShopPSN(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ADriftGuide
{
public:
	ADriftGuide(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetForceUpdate() {
		return memory.read<bool>(m_addr + 545);
	}
	int32_t GetDriftStartIndex() {
		return memory.read<int32_t>(m_addr + 548);
	}
	int32_t GetDriftEndIndex() {
		return memory.read<int32_t>(m_addr + 552);
	}
	int32_t GetDecalInterval() {
		return memory.read<int32_t>(m_addr + 556);
	}
	int32_t GetLineWidth() {
		return memory.read<int32_t>(m_addr + 560);
	}
	float GetStartDecalOffset() {
		return memory.read<float>(m_addr + 564);
	}
	float GetEndDecalOffset() {
		return memory.read<float>(m_addr + 568);
	}
	struct USplineComponent GetSplineGuideComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 576);
		return struct USplineComponent(ptr_addr);
	}
	struct USplineComponent GetSplineGuideComponent_Left() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 584);
		return struct USplineComponent(ptr_addr);
	}
	struct USplineComponent GetSplineGuideComponent_Right() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 592);
		return struct USplineComponent(ptr_addr);
	}
	struct TArray<struct USplineMeshComponent> GetSplineMeshComponentArray() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 600);
		return struct TArray<struct USplineMeshComponent>(ptr_addr);
	}
	struct TArray<struct UDecalComponent> GetDecalComponentArray() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct TArray<struct UDecalComponent>(ptr_addr);
	}
	struct TSoftObjectPtr<UMaterialInstance> GetDecalMaterial() {
		return memory.read<struct TSoftObjectPtr<UMaterialInstance>>(m_addr + 752);
	}
	struct TSoftObjectPtr<UMaterialInstance> GetStartDecalMaterial() {
		return memory.read<struct TSoftObjectPtr<UMaterialInstance>>(m_addr + 792);
	}
	struct TSoftObjectPtr<UMaterialInstance> GetEndDecalMaterial() {
		return memory.read<struct TSoftObjectPtr<UMaterialInstance>>(m_addr + 832);
	}
	struct TSoftObjectPtr<UStaticMesh> GetSideStaticMeshLeft() {
		return memory.read<struct TSoftObjectPtr<UStaticMesh>>(m_addr + 872);
	}
	struct TSoftObjectPtr<UStaticMesh> GetSideStaticMeshRight() {
		return memory.read<struct TSoftObjectPtr<UStaticMesh>>(m_addr + 912);
	}
	struct FDriftAngleInfo GetLeftDirectionArrowMaterial() {
		return memory.read<struct FDriftAngleInfo>(m_addr + 952);
	}
	struct FDriftAngleInfo GetRightDirectionArrowMaterial() {
		return memory.read<struct FDriftAngleInfo>(m_addr + 1072);
	}
	struct UMaterialBillboardComponent GetDriftDirectionArrowBillboard() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1192);
		return struct UMaterialBillboardComponent(ptr_addr);
	}
	struct TSoftObjectPtr<UCurveFloat> GetDistanceToOpacityCurve() {
		return memory.read<struct TSoftObjectPtr<UCurveFloat>>(m_addr + 1200);
	}
	struct FVector2D GetBillboardDriftDirectionArrowSize() {
		return memory.read<struct FVector2D>(m_addr + 1240);
	}
	struct TSoftObjectPtr<UCurveFloat> GetDistanceToSizeCurve() {
		return memory.read<struct TSoftObjectPtr<UCurveFloat>>(m_addr + 1248);
	}
	struct FVector GetBillboardDriftDirectionArrowOffset() {
		return memory.read<struct FVector>(m_addr + 1288);
	}
	int32_t GetAngleRangeMax45() {
		return memory.read<int32_t>(m_addr + 1300);
	}
	int32_t GetAngleRangeMax90() {
		return memory.read<int32_t>(m_addr + 1304);
	}
	struct UStaticMesh GetMergedMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1312);
		return struct UStaticMesh(ptr_addr);
	}
	struct UStaticMeshComponent GetMergedMeshComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1320);
		return struct UStaticMeshComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAllLevelAutoDriveMain
{
public:
	UAllLevelAutoDriveMain(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UButton GetV_MinusAIButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UButton(ptr_addr);
	}
	struct UButton GetV_PlusAIButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UButton(ptr_addr);
	}
	struct UTextBlock GetV_ErrorText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UTextBlock(ptr_addr);
	}
	struct UWidgetSwitcher GetV_FirstTrackSwitcher() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UTextBlock GetV_FirstTrackText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UTextBlock(ptr_addr);
	}
	struct UWidgetSwitcher GetV_TrackListSwitcher() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UPanelWidget GetV_TrackList() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UPanelWidget(ptr_addr);
	}
	struct UButtonTemplate GetV_StartButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UButtonTemplate(ptr_addr);
	}
	struct UButtonTemplate GetV_OneLapOnlyCheckBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UButtonTemplate(ptr_addr);
	}
	struct UButtonTemplate GetV_LoopCheckBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UButtonTemplate(ptr_addr);
	}
	struct UTextBlock GetV_AICount() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UTextBlock(ptr_addr);
	}
	struct UTrackPlayList GetPlayList() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UTrackPlayList(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAccountTimeAttack
{
public:
	UAccountTimeAttack(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTimeAttackOnlineMap GetTimeAttackOnlineMap() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UTimeAttackOnlineMap(ptr_addr);
	}
	struct UTimeAttackServerRequester GetTimeAttackServer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UTimeAttackServerRequester(ptr_addr);
	}
	struct TArray<struct FRaceSaveGameLatestPtr> GetSaveGamesToSend() {
		return memory.read<struct TArray<struct FRaceSaveGameLatestPtr>>(m_addr + 640);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAccountTimeAttackDataHelper
{
public:
	UAccountTimeAttackDataHelper(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRaceSaveGameLatestPtr GetRankerSaveGame() {
		return memory.read<struct FRaceSaveGameLatestPtr>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};


class AItemSiren
{
public:
	AItemSiren(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USkeletalMeshComponent GetSirenSkeletalMeshComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 856);
		return struct USkeletalMeshComponent(ptr_addr);
	}
	struct USphereComponent GetSirenSphereComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 864);
		return struct USphereComponent(ptr_addr);
	}
	struct UFMODAudioComponent GetSirenAudioComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 872);
		return struct UFMODAudioComponent(ptr_addr);
	}
	struct UParticleSystemComponent GetSirenEffectComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 880);
		return struct UParticleSystemComponent(ptr_addr);
	}
	struct TSoftObjectPtr<UParticleSystemComponent> GetSirenEffectAsset() {
		return memory.read<struct TSoftObjectPtr<UParticleSystemComponent>>(m_addr + 888);
	}
	struct TSoftObjectPtr<UFMODEvent> GetFiringSound() {
		return memory.read<struct TSoftObjectPtr<UFMODEvent>>(m_addr + 928);
	}
	struct TSoftObjectPtr<UCurveFloat> GetSirenCurve() {
		return memory.read<struct TSoftObjectPtr<UCurveFloat>>(m_addr + 968);
	}
	struct TSoftObjectPtr<USkeletalMesh> GetSirenMesh() {
		return memory.read<struct TSoftObjectPtr<USkeletalMesh>>(m_addr + 1008);
	}
	struct TSoftObjectPtr<UAnimSequence> GetSirenAnim() {
		return memory.read<struct TSoftObjectPtr<UAnimSequence>>(m_addr + 1048);
	}
	struct UItemComponent GetLocalUser() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1088);
		return struct UItemComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULqDownloadStickerStock
{
public:
	ULqDownloadStickerStock(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int64_t GetstickerStockId() {
		return memory.read<int64_t>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAccountTMI
{
public:
	UAccountTMI(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULrGetStockTag
{
public:
	ULrGetStockTag(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FString> GettagText() {
		return memory.read<struct TArray<struct FString>>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UOutGameChannelNameKeeper
{
public:
	UOutGameChannelNameKeeper(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULicenseSpeedTeamData
{
public:
	ULicenseSpeedTeamData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UDialogTemplate
{
public:
	UDialogTemplate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UFMODEvent GetDialogOpenSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UFMODEvent(ptr_addr);
	}
	struct TArray<struct UKeyIconWidget> GetKeyIconWidgetList() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 728);
		return struct TArray<struct UKeyIconWidget>(ptr_addr);
	}
	struct UWidgetAnimation GetAnim_Open() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 752);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation GetAnim_Close() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 760);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct TArray<struct FString> GetOpenPrevWidgetAnimList() {
		return memory.read<struct TArray<struct FString>>(m_addr + 768);
	}
	struct TArray<struct FString> GetClosePrevWidgetAnimList() {
		return memory.read<struct TArray<struct FString>>(m_addr + 784);
	}
	struct UUserWidget GetPrevWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 800);
		return struct UUserWidget(ptr_addr);
	}
	bool GetbWorldRenderingFlag() {
		return memory.read<bool>(m_addr + 808);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULoadingWidgetBase
{
public:
	ULoadingWidgetBase(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UKdTextBlock GetV_TitleText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UImage GetV_LoadingImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UImage(ptr_addr);
	}
	struct UFMODEvent GetLoadingBGM() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UFMODEvent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UC_InfoPageWidget
{
public:
	UC_InfoPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAICondition_Distance
{
public:
	UAICondition_Distance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FAIItemUse_DistProbability> GetProbability() {
		return memory.read<struct TArray<struct FAIItemUse_DistProbability>>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqCustomGameSetReady
{
public:
	UPqCustomGameSetReady(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetreadyState() {
		return memory.read<int32_t>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAICondition_Rank
{
public:
	UAICondition_Rank(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FAIItemUse_RankProbability> GetProbability() {
		return memory.read<struct TArray<struct FAIItemUse_RankProbability>>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicenseSuccessMessageInterface
{
public:
	ULicenseSuccessMessageInterface(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AOutGamePlayerController
{
public:
	AOutGamePlayerController(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAICondition_Progress
{
public:
	UAICondition_Progress(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FAIItemUse_Progress> GetProbability() {
		return memory.read<struct TArray<struct FAIItemUse_Progress>>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};


class ACheckPoint
{
public:
	ACheckPoint(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ACheckPoint GetNext() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 544);
		return struct ACheckPoint(ptr_addr);
	}
	struct TArray<struct ACheckPoint> GetNextAdditional() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 552);
		return struct TArray<struct ACheckPoint>(ptr_addr);
	}
	struct ACheckPoint Getprev() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 568);
		return struct ACheckPoint(ptr_addr);
	}
	float GetCPtoCP_Distance() {
		return memory.read<float>(m_addr + 576);
	}
	bool GetbInDoor() {
		return memory.read<bool>(m_addr + 580);
	}
	bool GetbResetPoint() {
		return memory.read<bool>(m_addr + 581);
	}
	bool GetbDoNotCheckWrongWay() {
		return memory.read<bool>(m_addr + 582);
	}
	struct UBoxComponent GetTriggerComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 584);
		return struct UBoxComponent(ptr_addr);
	}
	bool GetIsStartCheckPoint() {
		return memory.read<bool>(m_addr + 592);
	}
	bool GetIsEndCheckPoint() {
		return memory.read<bool>(m_addr + 593);
	}
	enum class ECheckPointFogState GetCheckPointFogState() {
		return memory.read<enum class ECheckPointFogState>(m_addr + 594);
	}
	struct FCPFogData GetFogData() {
		return memory.read<struct FCPFogData>(m_addr + 600);
	}
	float GetBlendInTime() {
		return memory.read<float>(m_addr + 704);
	}
	float GetBlendOutTime() {
		return memory.read<float>(m_addr + 708);
	}

private:
	std::uint64_t m_addr = 0;
};


class UBelongingDataAssetItemModel
{
public:
	UBelongingDataAssetItemModel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetItemId() {
		return memory.read<struct FString>(m_addr + 64);
	}
	enum class EItemModelType GetItemModelType() {
		return memory.read<enum class EItemModelType>(m_addr + 80);
	}
	bool GetbItemTypeDefaultModel() {
		return memory.read<bool>(m_addr + 81);
	}
	struct TSoftObjectPtr<USkeletalMesh> GetItemModelSkeletalMesh() {
		return memory.read<struct TSoftObjectPtr<USkeletalMesh>>(m_addr + 88);
	}
	struct TSoftClassPtr<UObject> GetItemModelAnimClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 128);
	}
	struct TSoftObjectPtr<UAnimSequence> GetItemModelIdleAnimSequence() {
		return memory.read<struct TSoftObjectPtr<UAnimSequence>>(m_addr + 168);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCommunityLogicComponent
{
public:
	UCommunityLogicComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAICondition_FirstRank
{
public:
	UAICondition_FirstRank(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetPlayer_Probability() {
		return memory.read<float>(m_addr + 64);
	}
	float GetEnemyAI_Probability() {
		return memory.read<float>(m_addr + 68);
	}
	float GetTeamAI_Probability() {
		return memory.read<float>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAIManageComponent
{
public:
	UAIManageComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct URaceRankComponent GetRaceRankComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 176);
		return struct URaceRankComponent(ptr_addr);
	}
	struct TArray<struct USplineComponent> GetSplineList() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 184);
		return struct TArray<struct USplineComponent>(ptr_addr);
	}
	struct TArray<struct USplineComponent> GetSub_SplineList() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 200);
		return struct TArray<struct USplineComponent>(ptr_addr);
	}
	bool GetbUseSpeedSplineOnly() {
		return memory.read<bool>(m_addr + 280);
	}
	bool GetbChangeSplineOnRank() {
		return memory.read<bool>(m_addr + 281);
	}
	bool GetbEnableSpeedFactor() {
		return memory.read<bool>(m_addr + 282);
	}
	bool GetbExecuteScenario() {
		return memory.read<bool>(m_addr + 283);
	}

private:
	std::uint64_t m_addr = 0;
};


class URaceRankRowWidget
{
public:
	URaceRankRowWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	URaceRankItemWidget GetItemIconWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return URaceRankItemWidget(ptr_addr);
	}
	struct UWidgetSwitcher GetV_AISwitcher() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UImage GetV_RankBackground() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UImage(ptr_addr);
	}
	struct UImage GetV_RowBackGround() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UImage(ptr_addr);
	}
	struct UKdTextBlock GetV_NameText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UHorizontalBox GetItemIconListBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UHorizontalBox(ptr_addr);
	}
	struct UTextBlock GetV_RankText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock GetV_PingText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock GetV_TimestampText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UTextBlock(ptr_addr);
	}
	struct UPlatformIconWidget GetV_PlatformIcon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UPlatformIconWidget(ptr_addr);
	}
	struct UHorizontalBox GetHB_LeftBlock() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UHorizontalBox(ptr_addr);
	}
	struct UImage GetImage_ShadowPlayer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UImage(ptr_addr);
	}
	struct UWidgetSwitcher GetV_Voice_State() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UImage GetV_Disconnected() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct UImage(ptr_addr);
	}
	struct UImage GetV_DisconnectedDim() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return struct UImage(ptr_addr);
	}
	struct UImage GetV_FinishedDim() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 728);
		return struct UImage(ptr_addr);
	}
	struct UOverlay GetV_MainBlock() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 736);
		return struct UOverlay(ptr_addr);
	}
	struct UImage GetV_PingImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 744);
		return struct UImage(ptr_addr);
	}
	struct UImage GetV_MicImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 752);
		return struct UImage(ptr_addr);
	}
	struct UImage GetV_BeginnerCareIcon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 760);
		return struct UImage(ptr_addr);
	}
	struct UWidgetAnimation GetEntireSlideInUp() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 768);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation GetEntireSlideInDown() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 776);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct FLinearColor GetDefaultMainColor() {
		return memory.read<struct FLinearColor>(m_addr + 820);
	}
	struct FLinearColor GetSoloPlayerOwnerMainColor() {
		return memory.read<struct FLinearColor>(m_addr + 836);
	}
	struct FSlateFontInfo GetDefaultFontInfo() {
		return memory.read<struct FSlateFontInfo>(m_addr + 856);
	}
	struct FSlateFontInfo GetSoloPlayerOwnerFontInfo() {
		return memory.read<struct FSlateFontInfo>(m_addr + 944);
	}
	struct TMap<enum class ERaceTeamType, struct FSlateBrush> GetRankBackGroundBrushContainer() {
		return memory.read<struct TMap<enum class ERaceTeamType, struct FSlateBrush>>(m_addr + 1032);
	}
	struct FSlateBrush GetRankBackGroundSoloOwnPlayerBrush() {
		return memory.read<struct FSlateBrush>(m_addr + 1112);
	}
	struct TMap<enum class ERaceTeamType, struct FSlateBrush> GetRowBackGroundSoloBrushContainer() {
		return memory.read<struct TMap<enum class ERaceTeamType, struct FSlateBrush>>(m_addr + 1248);
	}
	struct FSlateBrush GetRowBackGroundDefaultBrush() {
		return memory.read<struct FSlateBrush>(m_addr + 1328);
	}
	struct TMap<enum class ERaceTeamType, struct FLinearColor> GetFinishedColorContainer() {
		return memory.read<struct TMap<enum class ERaceTeamType, struct FLinearColor>>(m_addr + 1464);
	}

private:
	std::uint64_t m_addr = 0;
};


class AKdGameState
{
public:
	AKdGameState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetCustom_ServerWorldTimeSecondsDelta() {
		return memory.read<float>(m_addr + 632);
	}
	struct FString GetModeName() {
		return memory.read<struct FString>(m_addr + 832);
	}
	struct FString GetTrackName() {
		return memory.read<struct FString>(m_addr + 848);
	}
	struct FString GetOptionsString() {
		return memory.read<struct FString>(m_addr + 864);
	}
	float GetDiffServerTime() {
		return memory.read<float>(m_addr + 880);
	}
	struct TArray<struct FRegisterComponent> GetGameStateComponents() {
		return memory.read<struct TArray<struct FRegisterComponent>>(m_addr + 888);
	}
	struct TSet<struct UObject> GetPreCacheAssetContainer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 904);
		return struct TSet<struct UObject>(ptr_addr);
	}
	struct FMulticastInlineDelegate GetOnBeginGameDelegate() {
		return memory.read<struct FMulticastInlineDelegate>(m_addr + 1008);
	}
	struct FMulticastInlineDelegate GetOnEndGameDelegate() {
		return memory.read<struct FMulticastInlineDelegate>(m_addr + 1024);
	}
	float GetSnappingServerWorldTimeSecondsDelta() {
		return memory.read<float>(m_addr + 1052);
	}

private:
	std::uint64_t m_addr = 0;
};


class UStartSubGame
{
public:
	UStartSubGame(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAISpeedComponent
{
public:
	UAISpeedComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AItemSingleGameState
{
public:
	AItemSingleGameState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UFMODManageComponent
{
public:
	UFMODManageComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbEnableAnimSound() {
		return memory.read<bool>(m_addr + 176);
	}

private:
	std::uint64_t m_addr = 0;
};


class UIntroSequenceRule
{
public:
	UIntroSequenceRule(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UDriftGaugeTeamWidget
{
public:
	UDriftGaugeTeamWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UImage GetTeamGaugeImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UImage(ptr_addr);
	}
	struct UMaterialInstanceDynamic GetTeamGaugeMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UMaterialInstanceDynamic(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTransition_ToTimeAttackIntro
{
public:
	UTransition_ToTimeAttackIntro(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAlertInterface
{
public:
	UAlertInterface(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UM_LiveryStickerPageWidget
{
public:
	UM_LiveryStickerPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbSaveLayerMoveOrCamera() {
		return memory.read<bool>(m_addr + 856);
	}
	float GetScrollWaitTimeMax() {
		return memory.read<float>(m_addr + 860);
	}
	float GetScrollSpeedChanges() {
		return memory.read<float>(m_addr + 864);
	}
	float GetScrollSpeedMax() {
		return memory.read<float>(m_addr + 868);
	}

private:
	std::uint64_t m_addr = 0;
};


class ASpeedSingleGameState
{
public:
	ASpeedSingleGameState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPqAuthMobile
{
public:
	UPqAuthMobile(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetuserName() {
		return memory.read<struct FString>(m_addr + 96);
	}
	struct FString Getnpsn() {
		return memory.read<struct FString>(m_addr + 112);
	}
	struct FString Getnptoken() {
		return memory.read<struct FString>(m_addr + 128);
	}
	struct FString GetnpaCode() {
		return memory.read<struct FString>(m_addr + 144);
	}
	struct FString GetmemberType() {
		return memory.read<struct FString>(m_addr + 160);
	}
	struct FString Getadid() {
		return memory.read<struct FString>(m_addr + 176);
	}
	struct FString Getidfv() {
		return memory.read<struct FString>(m_addr + 192);
	}
	struct FString Getcountry() {
		return memory.read<struct FString>(m_addr + 208);
	}
	bool GetbUseAccountLink() {
		return memory.read<bool>(m_addr + 224);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAllLevelAutoDriveDataCarrier
{
public:
	UAllLevelAutoDriveDataCarrier(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTrackPlayList GetTrackPlayList() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct UTrackPlayList(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class AScenarioChangeDriftAssistState
{
public:
	AScenarioChangeDriftAssistState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbDriftAssist() {
		return memory.read<bool>(m_addr + 624);
	}

private:
	std::uint64_t m_addr = 0;
};


class AKdGameMode
{
public:
	AKdGameMode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct TSoftClassPtr<UObject>> GetGameModeComponents() {
		return memory.read<struct TArray<struct TSoftClassPtr<UObject>>>(m_addr + 704);
	}

private:
	std::uint64_t m_addr = 0;
};


class ASpeedSingleGameMode
{
public:
	ASpeedSingleGameMode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AAllLevelAutoDriveGameMode
{
public:
	AAllLevelAutoDriveGameMode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AAllLevelAutoDriveGameState
{
public:
	AAllLevelAutoDriveGameState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UOptionPageWidget
{
public:
	UOptionPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UDialogTemplate GetMainDialog() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 744);
		return struct UDialogTemplate(ptr_addr);
	}
	struct UUserWidget GetCurrentlyFocusedOptionBar() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 752);
		return struct UUserWidget(ptr_addr);
	}
	struct UUserWidget GetLastFocusedOptionBar() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 760);
		return struct UUserWidget(ptr_addr);
	}
	struct UUserWidget GetCultureWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 872);
		return struct UUserWidget(ptr_addr);
	}
	struct UCommonPopup GetOptionCommonPopup() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 944);
		return struct UCommonPopup(ptr_addr);
	}
	struct UUserWidget GetPopupInitiatorOptionWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 952);
		return struct UUserWidget(ptr_addr);
	}
	struct UDialogTemplate GetAccountResetDialog() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 960);
		return struct UDialogTemplate(ptr_addr);
	}
	struct UUserWidget GetFallBarrierOptionBar() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 968);
		return struct UUserWidget(ptr_addr);
	}
	struct UUserWidget GetCornerIsolationBarrierOptionBar() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 976);
		return struct UUserWidget(ptr_addr);
	}
	struct UUserWidget GetGameplayControlTypeBar() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 984);
		return struct UUserWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAddItemTactical
{
public:
	UAddItemTactical(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftClassPtr<UObject> GetItemTacticalWidget() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPhaseComponent
{
public:
	UPhaseComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPhase GetCurrentPhase() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 184);
		return struct UPhase(ptr_addr);
	}
	struct TMap<struct FName, struct UPhase> GetPhaseList() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 192);
		return struct TMap<struct FName, struct UPhase>(ptr_addr);
	}
	struct TArray<struct UObject> GetLoadedClassReference() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 416);
		return struct TArray<struct UObject>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAllLevelAutoDriveTrack
{
public:
	UAllLevelAutoDriveTrack(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimationPresetWidget GetV_OnFocusAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UAnimationPresetWidget(ptr_addr);
	}
	struct UWidgetSwitcher GetV_ValiditySwitcher() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UTextBlock GetV_TrackFText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock GetV_TrackAlias() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UTextBlock(ptr_addr);
	}
	struct UButton GetV_MoveUpButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UButton(ptr_addr);
	}
	struct UButton GetV_MoveDownButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct UButton(ptr_addr);
	}
	struct UButton GetV_DeleteButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return struct UButton(ptr_addr);
	}
	struct UButton GetV_StartFromHereButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 728);
		return struct UButton(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class URuleObject
{
public:
	URuleObject(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetNextPhase() {
		return memory.read<struct FName>(m_addr + 40);
	}
	struct UPhaseComponent GetPhaseComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct UPhaseComponent(ptr_addr);
	}
	struct TArray<struct URuleObject> GetInnerRule() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct TArray<struct URuleObject>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAddAllLevelAutoDriveLoadingWidget
{
public:
	UAddAllLevelAutoDriveLoadingWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftClassPtr<UObject> GetWidgetClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULoadNextLevel
{
public:
	ULoadNextLevel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UEventSaveGame
{
public:
	UEventSaveGame(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<struct FString, enum class EEventNewStatus> GetEventNewStatusMap() {
		return memory.read<struct TMap<struct FString, enum class EEventNewStatus>>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};


class UEnableAllLevelAutoDriveOptions
{
public:
	UEnableAllLevelAutoDriveOptions(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UBelongingDataAssetHandle
{
public:
	UBelongingDataAssetHandle(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class EKtAffiliatePlatform GetTargetAffiliatePlatform() {
		return memory.read<enum class EKtAffiliatePlatform>(m_addr + 144);
	}
	struct FString GetDefaultAssetItemId() {
		return memory.read<struct FString>(m_addr + 152);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAnimNotify_PlayMaterialFx
{
public:
	UAnimNotify_PlayMaterialFx(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetFxTypeString() {
		return memory.read<struct FString>(m_addr + 56);
	}
	float GetPlayTime() {
		return memory.read<float>(m_addr + 72);
	}
	float GetStartFadeTime() {
		return memory.read<float>(m_addr + 76);
	}
	float GetEndFadeTime() {
		return memory.read<float>(m_addr + 80);
	}
	float GetCycleTime() {
		return memory.read<float>(m_addr + 84);
	}
	bool GetbLoop() {
		return memory.read<bool>(m_addr + 88);
	}
	bool GetbReverse() {
		return memory.read<bool>(m_addr + 89);
	}
	struct UCurveFloat GetWeightCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 96);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat GetCycleCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 104);
		return struct UCurveFloat(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UVoiceChatWidget
{
public:
	UVoiceChatWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UKdListView GetListView_VoiceChat() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UKdListView(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UServiceLogicComponent
{
public:
	UServiceLogicComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftClassPtr<UObject> GetNoticeMessageWidgetClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 224);
	}
	struct UUserWidget GetCurrentNoticeMessageWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 272);
		return struct UUserWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAnimNotifyByCostumeInterface
{
public:
	UAnimNotifyByCostumeInterface(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAsyncLoadRaceCharacterMontage
{
public:
	UAsyncLoadRaceCharacterMontage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAnimNotifyState_Material
{
public:
	UAnimNotifyState_Material(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetMaterialIndex() {
		return memory.read<int32_t>(m_addr + 48);
	}
	float GetDefaultValue() {
		return memory.read<float>(m_addr + 52);
	}
	struct FName GetCurveName() {
		return memory.read<struct FName>(m_addr + 56);
	}
	struct FName GetParameterName() {
		return memory.read<struct FName>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};


class UChatItemDefEntryObject
{
public:
	UChatItemDefEntryObject(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ABuildCaptureLightActor
{
public:
	ABuildCaptureLightActor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USpotLightComponent GetSpotLightComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 544);
		return struct USpotLightComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAnimNotifyState_OverlayMaterial
{
public:
	UAnimNotifyState_OverlayMaterial(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetSlotName() {
		return memory.read<struct FName>(m_addr + 48);
	}
	int32_t GetElementIndex() {
		return memory.read<int32_t>(m_addr + 56);
	}
	int32_t GetOverlayIndex() {
		return memory.read<int32_t>(m_addr + 60);
	}
	struct UMaterialInterface GetOverlayMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 64);
		return struct UMaterialInterface(ptr_addr);
	}
	struct TArray<struct FOverlayMaterialCurveData> GetCurveValue() {
		return memory.read<struct TArray<struct FOverlayMaterialCurveData>>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class URaceCounterWidget
{
public:
	URaceCounterWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UFMODEvent GetCountDownSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UFMODEvent(ptr_addr);
	}
	struct UFMODEvent GetCountDownFinishSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UFMODEvent(ptr_addr);
	}
	int32_t GetCountDownBegin() {
		return memory.read<int32_t>(m_addr + 624);
	}
	int32_t GetSplitScreenDisabledBegin() {
		return memory.read<int32_t>(m_addr + 628);
	}
	int32_t GetSplitScreenEnabledBegin() {
		return memory.read<int32_t>(m_addr + 632);
	}
	struct UKdTextBlock GetV_GoCountText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UOverlay GetV_ov_ExactTimingStartBoost() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UOverlay(ptr_addr);
	}
	struct UWidgetAnimation GetGoCountAnim() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation GetGoAnim() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation GetExactTimingStartBoostAnim() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct TArray<struct FText> GetGoCountStrings() {
		return memory.read<struct TArray<struct FText>>(m_addr + 680);
	}
	struct TArray<struct UObject> GetPreloadedObjects() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct TArray<struct UObject>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UFMODNotifyComponent
{
public:
	UFMODNotifyComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetFMODPlay() {
		return memory.read<bool>(m_addr + 176);
	}
	float GetVolume() {
		return memory.read<float>(m_addr + 180);
	}
	float GetPitch() {
		return memory.read<float>(m_addr + 184);
	}
	bool GetbOverrideAttenuation() {
		return memory.read<bool>(m_addr + 188);
	}
	float GetMinimumDistance() {
		return memory.read<float>(m_addr + 192);
	}
	float GetMaximumDistance() {
		return memory.read<float>(m_addr + 196);
	}
	bool GetbOverrideParameter() {
		return memory.read<bool>(m_addr + 200);
	}
	struct FAnimNoti_FMODParam GetParam() {
		return memory.read<struct FAnimNoti_FMODParam>(m_addr + 204);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicenseMissionTitleWidget
{
public:
	ULicenseMissionTitleWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UOverlay GetOV_MissionTitle() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UOverlay(ptr_addr);
	}
	struct UKdTextBlock GetV_MissionTitle() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UKdTextBlock GetV_Add_Score_Text() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UWidgetAnimation GetAnim_Success() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation GetAnim_Fail() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation GetAnim_addscore() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UWidgetAnimation(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAnimNotifyState_TimedStaticMesh
{
public:
	UAnimNotifyState_TimedStaticMesh(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct UStaticMesh> GetAttachingItems() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct TArray<struct UStaticMesh>(ptr_addr);
	}
	int32_t GetDefaultAttachIndex() {
		return memory.read<int32_t>(m_addr + 64);
	}
	struct UStaticMesh GetAdditional_PrimitiveComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return struct UStaticMesh(ptr_addr);
	}
	struct FName GetSocketName() {
		return memory.read<struct FName>(m_addr + 80);
	}
	struct FVector GetLocationOffset() {
		return memory.read<struct FVector>(m_addr + 88);
	}
	struct FRotator GetRotationOffset() {
		return memory.read<struct FRotator>(m_addr + 100);
	}
	float GetAnimTime() {
		return memory.read<float>(m_addr + 112);
	}
	bool GetbUseCustomDepth() {
		return memory.read<bool>(m_addr + 116);
	}
	int32_t GetCustomDepthStencilValue() {
		return memory.read<int32_t>(m_addr + 120);
	}
	enum class ERendererStencilMask GetRendererStencilMask() {
		return memory.read<enum class ERendererStencilMask>(m_addr + 124);
	}
	bool GetbUseVisibleCurve() {
		return memory.read<bool>(m_addr + 125);
	}
	struct FName GetCurveName() {
		return memory.read<struct FName>(m_addr + 128);
	}
	struct FOverlayMaterialData GetOverlayMaterial() {
		return memory.read<struct FOverlayMaterialData>(m_addr + 136);
	}

private:
	std::uint64_t m_addr = 0;
};


class UScenarioBeginnerCareInitializeRule
{
public:
	UScenarioBeginnerCareInitializeRule(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAnimNotifyState_TogglePhysics
{
public:
	UAnimNotifyState_TogglePhysics(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbUseAllBone() {
		return memory.read<bool>(m_addr + 48);
	}
	int32_t GetLayerId() {
		return memory.read<int32_t>(m_addr + 52);
	}
	bool GetbTurnOff() {
		return memory.read<bool>(m_addr + 56);
	}
	bool GetbUseCurve() {
		return memory.read<bool>(m_addr + 57);
	}
	struct FName GetCurveName() {
		return memory.read<struct FName>(m_addr + 60);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKdPlayerPropObserver
{
public:
	UKdPlayerPropObserver(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULrDropMyStickerStock
{
public:
	ULrDropMyStickerStock(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool Getchanged() {
		return memory.read<bool>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAODecalComponent
{
public:
	UAODecalComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UApproachArrowWidget
{
public:
	UApproachArrowWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTextBlock GetNumberText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UTextBlock(ptr_addr);
	}
	struct UImage GetArrowImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UImage(ptr_addr);
	}
	struct TArray<struct TSoftObjectPtr<UTexture2D>> GetArrowTextures() {
		return memory.read<struct TArray<struct TSoftObjectPtr<UTexture2D>>>(m_addr + 624);
	}
	int32_t GetNumber() {
		return memory.read<int32_t>(m_addr + 640);
	}
	int32_t GetTeam() {
		return memory.read<int32_t>(m_addr + 644);
	}

private:
	std::uint64_t m_addr = 0;
};


class UApproachWidget
{
public:
	UApproachWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPanelWidget GetMainPanelWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UPanelWidget(ptr_addr);
	}
	struct TSoftClassPtr<UObject> GetArrowWidgetSubClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 616);
	}
	int32_t GetMaxShowCount() {
		return memory.read<int32_t>(m_addr + 656);
	}
	float GetMinShowDistance() {
		return memory.read<float>(m_addr + 660);
	}
	float GetMaxShowDistance() {
		return memory.read<float>(m_addr + 664);
	}
	float GetMinHideDistance() {
		return memory.read<float>(m_addr + 668);
	}
	float GetMaxHideDistance() {
		return memory.read<float>(m_addr + 672);
	}
	float GetShowAngle() {
		return memory.read<float>(m_addr + 676);
	}
	float GetHideAngle() {
		return memory.read<float>(m_addr + 680);
	}
	float GetPositionRadius() {
		return memory.read<float>(m_addr + 684);
	}
	struct TArray<struct UApproachArrowWidget> GetArrowWidgets() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct TArray<struct UApproachArrowWidget>(ptr_addr);
	}
	struct TArray<struct AKdPawn> GetLatestPawnList() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct TArray<struct AKdPawn>(ptr_addr);
	}
	struct APawn GetMyPawn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return struct APawn(ptr_addr);
	}
	int32_t GetMyPlayerID() {
		return memory.read<int32_t>(m_addr + 728);
	}
	int32_t GetOtherKartCount() {
		return memory.read<int32_t>(m_addr + 732);
	}
	struct FTimerHandle GetUpdateCountTimer() {
		return memory.read<struct FTimerHandle>(m_addr + 736);
	}
	struct URaceRankComponent GetRaceRank() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 760);
		return struct URaceRankComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCommunityPageWidget
{
public:
	UCommunityPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UDialogTemplate GetCommunityMainDialogWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 744);
		return struct UDialogTemplate(ptr_addr);
	}
	struct UDialogTemplate GetCommunityFriendMenuDialogWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 752);
		return struct UDialogTemplate(ptr_addr);
	}
	struct UDialogTemplate GetCommunityInviteMenuDialogWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 760);
		return struct UDialogTemplate(ptr_addr);
	}
	struct UDialogTemplate GetCommunityPartyInviteDialogWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 768);
		return struct UDialogTemplate(ptr_addr);
	}
	struct UDialogTemplate GetCommunityInviteUserMenuDialogWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 776);
		return struct UDialogTemplate(ptr_addr);
	}
	struct UDialogTemplate GetCommunityPartyMenuDialogWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 784);
		return struct UDialogTemplate(ptr_addr);
	}
	struct UDialogTemplate GetCommunityUserInfoDialogWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 808);
		return struct UDialogTemplate(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UC_CommonPopupReward
{
public:
	UC_CommonPopupReward(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UTimeAttackTrackChangeDialog
{
public:
	UTimeAttackTrackChangeDialog(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UMajorGameData
{
public:
	UMajorGameData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FMajorGamePlayerData> Getplayers() {
		return memory.read<struct TArray<struct FMajorGamePlayerData>>(m_addr + 40);
	}
	struct TArray<struct FMajorGameTeamData> Getteams() {
		return memory.read<struct TArray<struct FMajorGameTeamData>>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAssistListInst
{
public:
	UAssistListInst(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UKdTextBlock GetAssistText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UKdTextBlock(ptr_addr);
	}
	float GetAnimDelay() {
		return memory.read<float>(m_addr + 616);
	}
	struct UWidgetAnimation GetStartAnim_Inst() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UWidgetAnimation(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAsyncLoadObjectInterface
{
public:
	UAsyncLoadObjectInterface(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AKdSpectatorPawn
{
public:
	AKdSpectatorPawn(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UBalloonCableAnimInstance
{
public:
	UBalloonCableAnimInstance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetAddedRigidForce() {
		return memory.read<struct FVector>(m_addr + 696);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPcCustomGameMessage
{
public:
	UPcCustomGameMessage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetaccountId() {
		return memory.read<struct FString>(m_addr + 48);
	}
	struct FString GetMessage() {
		return memory.read<struct FString>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};


class UBelongingDataAssetCostume
{
public:
	UBelongingDataAssetCostume(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetCharMeshScale() {
		return memory.read<float>(m_addr + 64);
	}
	struct FVector GetOffsetFromSeat() {
		return memory.read<struct FVector>(m_addr + 68);
	}
	struct FVector GetOffsetLocStandFromKart() {
		return memory.read<struct FVector>(m_addr + 80);
	}
	struct FRotator GetOffsetRotStandFromKart() {
		return memory.read<struct FRotator>(m_addr + 92);
	}
	float GetHandleDirectionOffset() {
		return memory.read<float>(m_addr + 104);
	}
	struct UCharacterMontageAsset GetMontageAssets() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 112);
		return struct UCharacterMontageAsset(ptr_addr);
	}
	struct TSoftObjectPtr<USkeletalMesh> GetMesh() {
		return memory.read<struct TSoftObjectPtr<USkeletalMesh>>(m_addr + 120);
	}
	struct TSoftObjectPtr<UPhysicsAsset> GetPhysicAssetOverride() {
		return memory.read<struct TSoftObjectPtr<UPhysicsAsset>>(m_addr + 160);
	}
	struct TSoftClassPtr<UObject> GetAnimInstance() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 200);
	}
	enum class EKtAffiliatePlatform GetTargetAffiliatePlatform() {
		return memory.read<enum class EKtAffiliatePlatform>(m_addr + 240);
	}
	struct FString GetDefaultAssetItemId() {
		return memory.read<struct FString>(m_addr + 248);
	}
	int32_t GetCostumeGadgetIndex() {
		return memory.read<int32_t>(m_addr + 264);
	}
	int32_t GetCostumeParticleIndex() {
		return memory.read<int32_t>(m_addr + 268);
	}
	int32_t GetCostumeFMODIndex() {
		return memory.read<int32_t>(m_addr + 272);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKdAccountCheatHandler
{
public:
	UKdAccountCheatHandler(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UGameInstance GetGameInstance() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct UGameInstance(ptr_addr);
	}
	struct UKdAccount GetAccount() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct UKdAccount(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UScenarioKeyAccumItemWidget
{
public:
	UScenarioKeyAccumItemWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UScenarioKeyGuideWidget GetV_KeyGuide() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UScenarioKeyGuideWidget(ptr_addr);
	}
	struct UKdTextBlock GetV_TextBlock_Descript() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UWidgetAnimationGraph GetWidgetAnimationGraph() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UWidgetAnimationGraph(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UC_LoginPageWidget
{
public:
	UC_LoginPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UBelongingDataAssetMotionStand
{
public:
	UBelongingDataAssetMotionStand(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UBelongingDataAssetKartBody
{
public:
	UBelongingDataAssetKartBody(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbIsLineupKart() {
		return memory.read<bool>(m_addr + 64);
	}
	bool GetbUnuseDisplayFrontWheel() {
		return memory.read<bool>(m_addr + 65);
	}
	bool GetbTransform() {
		return memory.read<bool>(m_addr + 66);
	}
	struct TSoftObjectPtr<USkeletalMesh> GetItemSkeletalMesh() {
		return memory.read<struct TSoftObjectPtr<USkeletalMesh>>(m_addr + 72);
	}
	struct TSoftObjectPtr<UPhysicsAsset> GetPhysicsAsset() {
		return memory.read<struct TSoftObjectPtr<UPhysicsAsset>>(m_addr + 112);
	}
	enum class EKtAffiliatePlatform GetTargetAffiliatePlatform() {
		return memory.read<enum class EKtAffiliatePlatform>(m_addr + 152);
	}
	struct TSoftObjectPtr<UMaterialInterface> GetOverrideTargetMaterial() {
		return memory.read<struct TSoftObjectPtr<UMaterialInterface>>(m_addr + 160);
	}
	struct TSoftObjectPtr<UMaterialInterface> GetOverridingMaterial() {
		return memory.read<struct TSoftObjectPtr<UMaterialInterface>>(m_addr + 200);
	}
	struct TSoftClassPtr<UObject> GetItemAnimation() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 240);
	}
	struct TSoftClassPtr<UObject> GetSubLinkAnimation() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 280);
	}
	struct TSoftObjectPtr<UEffectPreset> GetEffectPreset() {
		return memory.read<struct TSoftObjectPtr<UEffectPreset>>(m_addr + 320);
	}
	struct TSoftObjectPtr<UKartBodySound> GetKartSoundData() {
		return memory.read<struct TSoftObjectPtr<UKartBodySound>>(m_addr + 360);
	}
	struct FVector GetOffsetFromSeat() {
		return memory.read<struct FVector>(m_addr + 400);
	}
	struct FVector GetOffsetStandFromKart() {
		return memory.read<struct FVector>(m_addr + 412);
	}
	struct FKartEffectEvent GetKartEffectEvent() {
		return memory.read<struct FKartEffectEvent>(m_addr + 424);
	}
	enum class EWheelType GetWheelType() {
		return memory.read<enum class EWheelType>(m_addr + 696);
	}
	int32_t GetChangeMaterialBySpeed() {
		return memory.read<int32_t>(m_addr + 700);
	}
	struct FKartAdditionalSkillData GetAdditionalSkillData() {
		return memory.read<struct FKartAdditionalSkillData>(m_addr + 704);
	}
	struct TSoftObjectPtr<UMaterialInterface> GetAODecalMaterial() {
		return memory.read<struct TSoftObjectPtr<UMaterialInterface>>(m_addr + 1112);
	}
	struct FBoxSphereBounds GetAODecalBounds() {
		return memory.read<struct FBoxSphereBounds>(m_addr + 1152);
	}
	float GetAODecalScale() {
		return memory.read<float>(m_addr + 1180);
	}
	struct TSoftObjectPtr<UHeadlightDataAsset> GetHeadlight() {
		return memory.read<struct TSoftObjectPtr<UHeadlightDataAsset>>(m_addr + 1184);
	}
	struct FLinearColor GetRear_Light_Color() {
		return memory.read<struct FLinearColor>(m_addr + 1224);
	}
	float GetLeftTrailWidth() {
		return memory.read<float>(m_addr + 1240);
	}
	float GetRightTrailWidth() {
		return memory.read<float>(m_addr + 1244);
	}
	struct FTransform GetBoosterWindTransform() {
		return memory.read<struct FTransform>(m_addr + 1248);
	}
	struct TSoftObjectPtr<UAnimSequenceBase> GetIdleAnimation() {
		return memory.read<struct TSoftObjectPtr<UAnimSequenceBase>>(m_addr + 1296);
	}
	struct TSoftObjectPtr<UAnimSequenceBase> GetAnimTransform() {
		return memory.read<struct TSoftObjectPtr<UAnimSequenceBase>>(m_addr + 1336);
	}
	struct TSoftObjectPtr<UAnimSequenceBase> GetAnimTransformed() {
		return memory.read<struct TSoftObjectPtr<UAnimSequenceBase>>(m_addr + 1376);
	}
	bool GetbIdleRateBySpeed() {
		return memory.read<bool>(m_addr + 1416);
	}
	bool GetbTransformLoopRateBySpeed() {
		return memory.read<bool>(m_addr + 1417);
	}
	float GetIdleAnimRate() {
		return memory.read<float>(m_addr + 1420);
	}
	float GetTransformAnimRate() {
		return memory.read<float>(m_addr + 1424);
	}
	float GetUntransLoopRate() {
		return memory.read<float>(m_addr + 1428);
	}
	float GetTransformLoopAnimRate() {
		return memory.read<float>(m_addr + 1432);
	}
	float GetWheelAxisOffset() {
		return memory.read<float>(m_addr + 1436);
	}
	float GetSuspensionOffset() {
		return memory.read<float>(m_addr + 1440);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPremiumChallengePageWidget
{
public:
	UPremiumChallengePageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UBelongingDataAssetWheel
{
public:
	UBelongingDataAssetWheel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class EKtAffiliatePlatform GetTargetAffiliatePlatform() {
		return memory.read<enum class EKtAffiliatePlatform>(m_addr + 144);
	}
	struct FString GetDefaultAssetItemId() {
		return memory.read<struct FString>(m_addr + 152);
	}

private:
	std::uint64_t m_addr = 0;
};


class UGamePhase
{
public:
	UGamePhase(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrShopInventoryListKrPc
{
public:
	UPrShopInventoryListKrPc(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FInventoryItemKrPc> GetItems() {
		return memory.read<struct TArray<struct FInventoryItemKrPc>>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UBelongingDataAssetPlate
{
public:
	UBelongingDataAssetPlate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftObjectPtr<USkeletalMesh> GetPartMesh() {
		return memory.read<struct TSoftObjectPtr<USkeletalMesh>>(m_addr + 64);
	}
	struct TSoftObjectPtr<UMaterialInterface> GetMaterialInterface() {
		return memory.read<struct TSoftObjectPtr<UMaterialInterface>>(m_addr + 104);
	}

private:
	std::uint64_t m_addr = 0;
};


class UBelongingDataAssetBooster
{
public:
	UBelongingDataAssetBooster(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftObjectPtr<UParticleSystem> GetSoonBooster() {
		return memory.read<struct TSoftObjectPtr<UParticleSystem>>(m_addr + 64);
	}
	struct TSoftObjectPtr<UParticleSystem> GetMainBooster_Start() {
		return memory.read<struct TSoftObjectPtr<UParticleSystem>>(m_addr + 104);
	}
	struct TSoftObjectPtr<UParticleSystem> GetMainBooster_Loop() {
		return memory.read<struct TSoftObjectPtr<UParticleSystem>>(m_addr + 144);
	}
	struct TSoftObjectPtr<UParticleSystem> GetMainBooster_End() {
		return memory.read<struct TSoftObjectPtr<UParticleSystem>>(m_addr + 184);
	}
	float GetMainBooster_LoopStartTick() {
		return memory.read<float>(m_addr + 224);
	}
	struct FLinearColor GetEmissiveColor() {
		return memory.read<struct FLinearColor>(m_addr + 228);
	}
	struct UFMODEvent GetKartBoostSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 248);
		return struct UFMODEvent(ptr_addr);
	}
	struct UFMODEvent GetKartStartBoostSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 256);
		return struct UFMODEvent(ptr_addr);
	}
	struct UFMODEvent GetKartBurstBoostSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 264);
		return struct UFMODEvent(ptr_addr);
	}
	struct UFMODEvent GetBoosterPlaySound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 272);
		return struct UFMODEvent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqCustomGameKickedList
{
public:
	UPqCustomGameKickedList(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULicenseCheckItemUseData
{
public:
	ULicenseCheckItemUseData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<enum class EItemType, int32_t> GetItemScore() {
		return memory.read<struct TMap<enum class EItemType, int32_t>>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};


class UBelongingDataAssetStat
{
public:
	UBelongingDataAssetStat(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UCharAnimInstance
{
public:
	UCharAnimInstance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class ECharacterAnimGraphState GetCharacterState() {
		return memory.read<enum class ECharacterAnimGraphState>(m_addr + 704);
	}
	struct UBlendSpaceBase GetRaceBlendSpace() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct UBlendSpaceBase(ptr_addr);
	}
	struct UAnimSequenceBase GetBoostAnimSequence() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAnimSequenceBase GetStandAnimSequence() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 728);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAnimSequenceBase GetSitAnimSequence() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 736);
		return struct UAnimSequenceBase(ptr_addr);
	}
	float GetSteer() {
		return memory.read<float>(m_addr + 752);
	}
	float GetThrottle() {
		return memory.read<float>(m_addr + 756);
	}
	bool GetbIsBoost() {
		return memory.read<bool>(m_addr + 760);
	}
	bool GetbStand() {
		return memory.read<bool>(m_addr + 761);
	}
	bool GetbLobby() {
		return memory.read<bool>(m_addr + 762);
	}
	float GetPhysicsWithBlend() {
		return memory.read<float>(m_addr + 764);
	}
	struct TArray<float> GetLayerBlend() {
		return memory.read<struct TArray<float>>(m_addr + 768);
	}
	bool GetbInitLookAt() {
		return memory.read<bool>(m_addr + 784);
	}
	bool GetbActivateLookat() {
		return memory.read<bool>(m_addr + 785);
	}
	float GetLookAtLerpDelta() {
		return memory.read<float>(m_addr + 788);
	}
	float GetFrontViewLerpAlpha() {
		return memory.read<float>(m_addr + 792);
	}
	struct FRotator GetReceivedRotation() {
		return memory.read<struct FRotator>(m_addr + 796);
	}
	struct FRotator GetHeadRotation() {
		return memory.read<struct FRotator>(m_addr + 808);
	}
	struct FRotator GetNeckRotation() {
		return memory.read<struct FRotator>(m_addr + 820);
	}
	struct FRotator GetSavedRotation() {
		return memory.read<struct FRotator>(m_addr + 832);
	}
	float GetHeadPitchFactor() {
		return memory.read<float>(m_addr + 844);
	}
	struct UCurveFloat GetLookAtSpeedCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 856);
		return struct UCurveFloat(ptr_addr);
	}
	float GetLookAtDelay() {
		return memory.read<float>(m_addr + 864);
	}
	float GetNeckHeadRotateRate() {
		return memory.read<float>(m_addr + 868);
	}
	float GetMaxYaw() {
		return memory.read<float>(m_addr + 872);
	}
	struct FString GetCharacterName() {
		return memory.read<struct FString>(m_addr + 880);
	}
	struct FString GetFolderPath() {
		return memory.read<struct FString>(m_addr + 896);
	}
	bool GetbAutoPropertySettings() {
		return memory.read<bool>(m_addr + 912);
	}
	float GetLastCrashTime() {
		return memory.read<float>(m_addr + 916);
	}
	bool GetbNoAnimUpdate() {
		return memory.read<bool>(m_addr + 920);
	}
	struct UCharacterMontageAsset GetMontageAsset() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 928);
		return struct UCharacterMontageAsset(ptr_addr);
	}
	struct TSet<struct UObject> GetPreCacheMontageAssetContainer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 936);
		return struct TSet<struct UObject>(ptr_addr);
	}
	struct UKdAnimationComponent GetKdAnimationComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1024);
		return struct UKdAnimationComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UBelongingDataAssetCash
{
public:
	UBelongingDataAssetCash(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UTransition_StandByGame_License
{
public:
	UTransition_StandByGame_License(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UBelongingDataAssetBalloon
{
public:
	UBelongingDataAssetBalloon(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftObjectPtr<USkeletalMesh> GetSkeletalMesh() {
		return memory.read<struct TSoftObjectPtr<USkeletalMesh>>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};


class UEffectPreset
{
public:
	UEffectPreset(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UParticleSystem GetSmoke() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct UParticleSystem(ptr_addr);
	}
	struct UParticleSystem GetRear_Light_Trail() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 64);
		return struct UParticleSystem(ptr_addr);
	}
	struct UParticleSystem GetWind_ItemBoost() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return struct UParticleSystem(ptr_addr);
	}
	struct UParticleSystem GetWind_InstanceBoost() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 80);
		return struct UParticleSystem(ptr_addr);
	}
	struct UParticleSystem GetEnhanced_Wind_ItemBoost() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 88);
		return struct UParticleSystem(ptr_addr);
	}
	struct UParticleSystem GetEnhanced_Wind_InstanceBoost() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 96);
		return struct UParticleSystem(ptr_addr);
	}
	struct UParticleSystem GetSparkL() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 104);
		return struct UParticleSystem(ptr_addr);
	}
	struct UParticleSystem GetSparkR() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 112);
		return struct UParticleSystem(ptr_addr);
	}
	struct UParticleSystem GetSkidTrailL() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 120);
		return struct UParticleSystem(ptr_addr);
	}
	struct UParticleSystem GetSkidTrailR() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 128);
		return struct UParticleSystem(ptr_addr);
	}
	struct UParticleSystem GetSlipStream() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 136);
		return struct UParticleSystem(ptr_addr);
	}
	struct UParticleSystem GetDrafting() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 144);
		return struct UParticleSystem(ptr_addr);
	}
	struct UParticleSystem GetItemCubeOverlap() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 152);
		return struct UParticleSystem(ptr_addr);
	}
	struct UParticleSystem GetCrash_Weak() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 160);
		return struct UParticleSystem(ptr_addr);
	}
	struct UParticleSystem GetCrash_Strong() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 168);
		return struct UParticleSystem(ptr_addr);
	}
	struct UParticleSystem GetLandRoad() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 176);
		return struct UParticleSystem(ptr_addr);
	}
	struct UNiagaraSystem GetRear_Light_NIATrail() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 184);
		return struct UNiagaraSystem(ptr_addr);
	}
	struct UCurveFloat GetBoostTrailSpeedModifier() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 192);
		return struct UCurveFloat(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UC_NormalChallengePageWidget
{
public:
	UC_NormalChallengePageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULiveryDefinesLibrary
{
public:
	ULiveryDefinesLibrary(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UBoostComponent
{
public:
	UBoostComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UKartMovementBuff
{
public:
	UKartMovementBuff(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ADedicatedLobbyPawn
{
public:
	ADedicatedLobbyPawn(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UM_LiveryEditPageWidget
{
public:
	UM_LiveryEditPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbSaveLayerMoveOrCamera() {
		return memory.read<bool>(m_addr + 888);
	}
	float GetScrollWaitTimeMax() {
		return memory.read<float>(m_addr + 892);
	}
	float GetScrollSpeedChanges() {
		return memory.read<float>(m_addr + 896);
	}
	float GetScrollSpeedMax() {
		return memory.read<float>(m_addr + 900);
	}

private:
	std::uint64_t m_addr = 0;
};


class UBoostBuff
{
public:
	UBoostBuff(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ABuildCaptureActor
{
public:
	ABuildCaptureActor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ABuildCaptureCameraActor
{
public:
	ABuildCaptureCameraActor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UCineCameraComponent GetCineCameraComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 544);
		return struct UCineCameraComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UBuildCaptureCameraListItemWidget
{
public:
	UBuildCaptureCameraListItemWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UButton GetButton_CamFocus() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UButton(ptr_addr);
	}
	struct UButton GetButton_CamModify() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UButton(ptr_addr);
	}
	struct UButton GetButton_CamDestroy() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UButton(ptr_addr);
	}
	struct UTextBlock GetTextBlock_CamName() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UTextBlock(ptr_addr);
	}
	struct UComboBoxString GetComboBoxString() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UComboBoxString(ptr_addr);
	}
	struct FBuildCaptureCameraInfo GetBuildCameraInfo() {
		return memory.read<struct FBuildCaptureCameraInfo>(m_addr + 656);
	}

private:
	std::uint64_t m_addr = 0;
};


class UBuildCaptureCameraListWidget
{
public:
	UBuildCaptureCameraListWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPanelWidget GetPanel_BuildCaptureCameraListItems() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UPanelWidget(ptr_addr);
	}
	struct TSoftClassPtr<UObject> GetBuildCaptureCameraListItemWidgetClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 616);
	}

private:
	std::uint64_t m_addr = 0;
};


class UGameplayKeyGuide
{
public:
	UGameplayKeyGuide(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class EGamplayKeyGuideType GetKeyGuideType() {
		return memory.read<enum class EGamplayKeyGuideType>(m_addr + 624);
	}
	struct UKdTextBlock Getv_TextBlock() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UKeyIconWidget Getv_KeyIcon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UKeyIconWidget(ptr_addr);
	}
	struct UWidgetAnimation GetAnim_FlickerKey() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation GetAnim_FlickerRelease() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UItemSlotComponent GetItemSlotComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 744);
		return struct UItemSlotComponent(ptr_addr);
	}
	struct UKartMovementComponent GetMovement() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 752);
		return struct UKartMovementComponent(ptr_addr);
	}
	struct UMovementAssistComponent GetAssist() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 760);
		return struct UMovementAssistComponent(ptr_addr);
	}
	struct TArray<enum class EItemType> GetItemTypes() {
		return memory.read<struct TArray<enum class EItemType>>(m_addr + 768);
	}
	bool GetbCounterSteerPositive() {
		return memory.read<bool>(m_addr + 784);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKdPatrolManager
{
public:
	UKdPatrolManager(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<struct AActor, struct FECS_SplinePatrolComponent> GetSplinePatrolComponents() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 176);
		return struct TMap<struct AActor, struct FECS_SplinePatrolComponent>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicenseReportData
{
public:
	ULicenseReportData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetItem() {
		return memory.read<struct FText>(m_addr + 40);
	}
	struct FText GetCalculate() {
		return memory.read<struct FText>(m_addr + 64);
	}
	struct FText GetTotal() {
		return memory.read<struct FText>(m_addr + 88);
	}

private:
	std::uint64_t m_addr = 0;
};


class UBuildCaptureLightListItemWidget
{
public:
	UBuildCaptureLightListItemWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UButton GetButton_LightModify() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UButton(ptr_addr);
	}
	struct UButton GetButton_LightDestroy() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UButton(ptr_addr);
	}
	struct UTextBlock GetTextBlock_LightName() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UTextBlock(ptr_addr);
	}
	struct UComboBoxString GetComboBoxString() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UComboBoxString(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class AFMODTriggerBox
{
public:
	AFMODTriggerBox(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetFMOD_Play() {
		return memory.read<bool>(m_addr + 552);
	}
	bool GetbOverlapped() {
		return memory.read<bool>(m_addr + 553);
	}
	struct TArray<struct FFMOD_TriggerData> GetFMODSet() {
		return memory.read<struct TArray<struct FFMOD_TriggerData>>(m_addr + 560);
	}
	struct TArray<struct AFMODAmbientSound> GetFMODSoundActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 576);
		return struct TArray<struct AFMODAmbientSound>(ptr_addr);
	}
	bool GetFMOD_BeingPlay_Event() {
		return memory.read<bool>(m_addr + 592);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTimeAttackLogicComponent
{
public:
	UTimeAttackLogicComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULrGetStickerStock
{
public:
	ULrGetStickerStock(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FStickerStock GetStickerStock() {
		return memory.read<struct FStickerStock>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UDqDediRequestGameSessionData
{
public:
	UDqDediRequestGameSessionData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetgameId() {
		return memory.read<struct FString>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UEnableAutoDrive
{
public:
	UEnableAutoDrive(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UTransition_LicenseTrafficConeHitLoseRule
{
public:
	UTransition_LicenseTrafficConeHitLoseRule(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULicenseDriftMissionComponent
{
public:
	ULicenseDriftMissionComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ULicenseDriftMissionData GetData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 200);
		return struct ULicenseDriftMissionData(ptr_addr);
	}
	struct UParticleSystem GetGateParticleSystem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 208);
		return struct UParticleSystem(ptr_addr);
	}
	struct TArray<struct AActor> GetSpeedGateList() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 216);
		return struct TArray<struct AActor>(ptr_addr);
	}
	int32_t GetCurrentIndex() {
		return memory.read<int32_t>(m_addr + 232);
	}
	struct APawn GetPawn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 240);
		return struct APawn(ptr_addr);
	}
	struct FVector GetLastPosition() {
		return memory.read<struct FVector>(m_addr + 248);
	}
	struct AActor GetOwner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 264);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UBuildCaptureWidget
{
public:
	UBuildCaptureWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UButton GetButton_NXBuildCaptureOn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UButton(ptr_addr);
	}
	struct UButton GetButton_NXBuildCaptureOff() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UButton(ptr_addr);
	}
	struct USpinBox GetSpinBox_LightIntensity() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct USpinBox(ptr_addr);
	}
	struct USpinBox GetSpinBox_LightRed() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct USpinBox(ptr_addr);
	}
	struct USpinBox GetSpinBox_LightGreen() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct USpinBox(ptr_addr);
	}
	struct USpinBox GetSpinBox_LightBlue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct USpinBox(ptr_addr);
	}
	struct USpinBox GetSpinBox_LightInnerConeAngle() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct USpinBox(ptr_addr);
	}
	struct USpinBox GetSpinBox_LightOuterConeAngle() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct USpinBox(ptr_addr);
	}
	struct USpinBox GetSpinBox_LightRadius() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct USpinBox(ptr_addr);
	}
	struct UButton GetButton_SpawnLight() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UButton(ptr_addr);
	}
	struct USpinBox GetSpinBox_CameraFocusDistance() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct USpinBox(ptr_addr);
	}
	struct USpinBox GetSpinBox_CameraFocalLength() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct USpinBox(ptr_addr);
	}
	struct USpinBox GetSpinBox_CameraFocusDistance_ChangeSpeed() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct USpinBox(ptr_addr);
	}
	struct UComboBoxString GetComboBoxString_CameraTrackTarget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return struct UComboBoxString(ptr_addr);
	}
	struct USpinBox GetSpinBox_CameraAperture() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 728);
		return struct USpinBox(ptr_addr);
	}
	struct USpinBox GetSpinBox_SlowMotion() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 736);
		return struct USpinBox(ptr_addr);
	}
	struct UButton GetButton_SaveLevelEnv() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 744);
		return struct UButton(ptr_addr);
	}
	struct UButton GetButton_LoadLevelEnv() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 752);
		return struct UButton(ptr_addr);
	}
	struct UButton GetButton_HideAllUiToggle() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 760);
		return struct UButton(ptr_addr);
	}
	struct UTextBlock GetTextBlock_BindTarget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 768);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock GetTextBlock_LookTarget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 776);
		return struct UTextBlock(ptr_addr);
	}
	struct USpinBox GetSpinBox_CameraMoveSpeed() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 784);
		return struct USpinBox(ptr_addr);
	}
	struct USpinBox GetSpinBox_CameraRotateSpeed() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 792);
		return struct USpinBox(ptr_addr);
	}
	struct UTextBlock GetTextBlock_DetectTarget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 800);
		return struct UTextBlock(ptr_addr);
	}
	struct UEditableTextBox GetEditableTextBox_CameraTrackFilter() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 808);
		return struct UEditableTextBox(ptr_addr);
	}
	struct UButton GetButton_ShowLightListToggle() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 816);
		return struct UButton(ptr_addr);
	}
	struct UButton GetButton_ShowCameraListToggle() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 824);
		return struct UButton(ptr_addr);
	}
	struct UButton GetButton_SpawnCamera() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 832);
		return struct UButton(ptr_addr);
	}
	struct USpinBox GetSpinBox_CameraMoveInterpSpeed() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 840);
		return struct USpinBox(ptr_addr);
	}
	struct USpinBox GetSpinBox_CameraDutchInterpSpeed() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 848);
		return struct USpinBox(ptr_addr);
	}
	struct USpinBox GetSpinBox_CameraRotateInterpSpeed() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 856);
		return struct USpinBox(ptr_addr);
	}
	struct USizeBox GetSizeBox_BuildCaptureCameraListWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 864);
		return struct USizeBox(ptr_addr);
	}
	struct UBuildCaptureCameraListWidget GetBuildCaptureCameraListWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 872);
		return struct UBuildCaptureCameraListWidget(ptr_addr);
	}
	struct USizeBox GetSizeBox_BuildCaptureLightListWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 880);
		return struct USizeBox(ptr_addr);
	}
	struct UBuildCaptureLightListWidget GetBuildCaptureLightListWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 888);
		return struct UBuildCaptureLightListWidget(ptr_addr);
	}
	struct USpinBox GetSpinBox_DeadZone() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 896);
		return struct USpinBox(ptr_addr);
	}
	int32_t GetSaveSlotIndex() {
		return memory.read<int32_t>(m_addr + 908);
	}
	int32_t GetLoadSlotIndex() {
		return memory.read<int32_t>(m_addr + 912);
	}
	struct UTextBlock GetMaxCameraIndex() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 920);
		return struct UTextBlock(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UDqDediGetMultiplayRequest
{
public:
	UDqDediGetMultiplayRequest(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetUUID() {
		return memory.read<struct FString>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UButtonInterface
{
public:
	UButtonInterface(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UKdListEntryWidget
{
public:
	UKdListEntryWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AItemFeedNonTargetActor
{
public:
	AItemFeedNonTargetActor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ALicenseTrackLine
{
public:
	ALicenseTrackLine(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USplineComponent GetSplineComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 544);
		return struct USplineComponent(ptr_addr);
	}
	bool GetbLicenseTrackGuide() {
		return memory.read<bool>(m_addr + 552);
	}
	bool GetbClosedLoop() {
		return memory.read<bool>(m_addr + 553);
	}
	bool GetbShowDebug() {
		return memory.read<bool>(m_addr + 554);
	}
	struct FString GetStartCheckPointName() {
		return memory.read<struct FString>(m_addr + 560);
	}
	struct FString GetCopyActorName() {
		return memory.read<struct FString>(m_addr + 576);
	}
	float GetArrowInterval() {
		return memory.read<float>(m_addr + 592);
	}
	float GetTrackLineWidthScale() {
		return memory.read<float>(m_addr + 596);
	}
	struct TSoftObjectPtr<UStaticMesh> GetSplineMesh() {
		return memory.read<struct TSoftObjectPtr<UStaticMesh>>(m_addr + 600);
	}
	struct TSoftObjectPtr<UMaterialInterface> GetSplineMeshMaterial() {
		return memory.read<struct TSoftObjectPtr<UMaterialInterface>>(m_addr + 640);
	}
	struct TSoftObjectPtr<UStaticMesh> GetMergedSplineMesh() {
		return memory.read<struct TSoftObjectPtr<UStaticMesh>>(m_addr + 680);
	}
	struct TArray<struct USplineMeshComponent> GetSplineMeshComponentArray() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return struct TArray<struct USplineMeshComponent>(ptr_addr);
	}
	struct UMaterialInstanceDynamic GetMergedSplineMeshMaterialDynamic() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 752);
		return struct UMaterialInstanceDynamic(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UButtonTemplate
{
public:
	UButtonTemplate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetBtn_Index() {
		return memory.read<int32_t>(m_addr + 608);
	}
	bool GetbCheckBox() {
		return memory.read<bool>(m_addr + 612);
	}
	enum class EButtonClickMethod GetClickMethod() {
		return memory.read<enum class EButtonClickMethod>(m_addr + 776);
	}
	enum class EButtonTouchMethod GetTouchMethod() {
		return memory.read<enum class EButtonTouchMethod>(m_addr + 777);
	}
	struct UFMODEvent GetClickSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 808);
		return struct UFMODEvent(ptr_addr);
	}
	struct UFMODEvent GetFocusSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 816);
		return struct UFMODEvent(ptr_addr);
	}
	float GetClickDelay() {
		return memory.read<float>(m_addr + 824);
	}
	struct TArray<struct FAnimationPresetDef> GetOnEnabledAnimation() {
		return memory.read<struct TArray<struct FAnimationPresetDef>>(m_addr + 832);
	}
	struct TArray<struct FAnimationPresetDef> GetOnDisabledAnimation() {
		return memory.read<struct TArray<struct FAnimationPresetDef>>(m_addr + 848);
	}
	struct TArray<struct FAnimationPresetDef> GetOnFocusAnimation() {
		return memory.read<struct TArray<struct FAnimationPresetDef>>(m_addr + 864);
	}
	struct TArray<struct FAnimationPresetDef> GetOnUnfocusAnimation() {
		return memory.read<struct TArray<struct FAnimationPresetDef>>(m_addr + 880);
	}
	struct TArray<struct FAnimationPresetDef> GetOnCheckedAnimation() {
		return memory.read<struct TArray<struct FAnimationPresetDef>>(m_addr + 896);
	}
	struct TArray<struct FAnimationPresetDef> GetOnUncheckedAnimation() {
		return memory.read<struct TArray<struct FAnimationPresetDef>>(m_addr + 912);
	}
	struct TArray<struct FAnimationPresetDef> GetOnHoveredAnimation() {
		return memory.read<struct TArray<struct FAnimationPresetDef>>(m_addr + 928);
	}
	struct TArray<struct FAnimationPresetDef> GetOnUnHoveredAnimation() {
		return memory.read<struct TArray<struct FAnimationPresetDef>>(m_addr + 944);
	}
	struct TArray<struct FAnimationPresetDef> GetOnPressedAnimation() {
		return memory.read<struct TArray<struct FAnimationPresetDef>>(m_addr + 960);
	}
	struct TArray<struct FAnimationPresetDef> GetOnUnPressedAnimation() {
		return memory.read<struct TArray<struct FAnimationPresetDef>>(m_addr + 976);
	}
	bool GetbMoveFocusOnMouseClick() {
		return memory.read<bool>(m_addr + 993);
	}

private:
	std::uint64_t m_addr = 0;
};


class UGrandPrixSelectLogicComponent
{
public:
	UGrandPrixSelectLogicComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UC_AchievementPageWidget
{
public:
	UC_AchievementPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULqRegisterStickerStock
{
public:
	ULqRegisterStickerStock(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	char GetSlot() {
		return memory.read<char>(m_addr + 56);
	}
	struct FString GetName() {
		return memory.read<struct FString>(m_addr + 64);
	}
	struct FString GetTag() {
		return memory.read<struct FString>(m_addr + 80);
	}

private:
	std::uint64_t m_addr = 0;
};


class UC_ChattingPageWidget
{
public:
	UC_ChattingPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULicenseShadowAIData
{
public:
	ULicenseShadowAIData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbRecord() {
		return memory.read<bool>(m_addr + 64);
	}
	bool GetbRecorded() {
		return memory.read<bool>(m_addr + 65);
	}
	float GetShadowLapTime() {
		return memory.read<float>(m_addr + 68);
	}
	struct FText GetshadowName() {
		return memory.read<struct FText>(m_addr + 72);
	}
	struct FKartDesc GetShadowKartDesc() {
		return memory.read<struct FKartDesc>(m_addr + 96);
	}
	struct FCharacterDesc GetShadowCharacterDesc() {
		return memory.read<struct FCharacterDesc>(m_addr + 280);
	}
	struct FPawnRecordData GetRecordedData() {
		return memory.read<struct FPawnRecordData>(m_addr + 376);
	}
	struct AKdPawn GetShadowPawn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 744);
		return struct AKdPawn(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCommonPopupReward
{
public:
	UCommonPopupReward(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UCreateScenarioPageWidget
{
public:
	UCreateScenarioPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftClassPtr<UObject> GetScenarioPageWidgetClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 72);
	}
	struct UScenarioPageWidget GetWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 112);
		return struct UScenarioPageWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UC_KartChangeDialog
{
public:
	UC_KartChangeDialog(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UC_CommunityPageWidget
{
public:
	UC_CommunityPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UCommunityFriendObject GetFriendForWhomDialogOpened() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 816);
		return struct UCommunityFriendObject(ptr_addr);
	}
	struct UPageListTemplate GetPartyInvite_CurrentActivePageList() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 824);
		return struct UPageListTemplate(ptr_addr);
	}
	struct UDialogTemplate GetCommunityFindFriendPopWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 856);
		return struct UDialogTemplate(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UC_CouponPageWidget
{
public:
	UC_CouponPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UC_CustomGamePageWidget
{
public:
	UC_CustomGamePageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UContextMenuTemplate GetContextMenu() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 944);
		return struct UContextMenuTemplate(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPatcherEvent_Warning
{
public:
	UPatcherEvent_Warning(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UDisableAutoDrive
{
public:
	UDisableAutoDrive(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UEventChallengePageWidget
{
public:
	UEventChallengePageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UKdService
{
public:
	UKdService(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetDevRiderName() {
		return memory.read<struct FString>(m_addr + 48);
	}
	struct UKdServerList GetKdServerList() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 64);
		return struct UKdServerList(ptr_addr);
	}
	struct UKdAccount GetMyKOAccount() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 80);
		return struct UKdAccount(ptr_addr);
	}
	struct UPcHostGame GetLastHostGameRequest() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 160);
		return struct UPcHostGame(ptr_addr);
	}
	struct FString GetLastMainMenuState() {
		return memory.read<struct FString>(m_addr + 264);
	}
	struct UPlatformSessionUpdater GetPlatformSessionUpdater() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 360);
		return struct UPlatformSessionUpdater(ptr_addr);
	}
	struct ULiveryServerRequester GetLiveryServerRequester() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 376);
		return struct ULiveryServerRequester(ptr_addr);
	}
	struct UAccountFuncLibImpl GetAccountFuncLibImpl() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 408);
		return struct UAccountFuncLibImpl(ptr_addr);
	}
	struct UHttpRequester GetHttpRequester() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 416);
		return struct UHttpRequester(ptr_addr);
	}
	struct UPatcherInterface GetPatcher() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 432);
		return struct UPatcherInterface(ptr_addr);
	}
	struct TSoftClassPtr<UObject> GetPatcherClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 440);
	}

private:
	std::uint64_t m_addr = 0;
};


class UC_EventChallengePageWidget
{
public:
	UC_EventChallengePageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UFinishAnimation_TimeAttack
{
public:
	UFinishAnimation_TimeAttack(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UGrandPrixPageWidget
{
public:
	UGrandPrixPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TWeakObjectPtr<UDialogTemplate> GetWarningDialog() {
		return memory.read<struct TWeakObjectPtr<UDialogTemplate>>(m_addr + 744);
	}
	struct TWeakObjectPtr<UDialogTemplate> GetRewardDialog() {
		return memory.read<struct TWeakObjectPtr<UDialogTemplate>>(m_addr + 752);
	}
	struct TWeakObjectPtr<UDialogTemplate> GetDetailRecordDialog() {
		return memory.read<struct TWeakObjectPtr<UDialogTemplate>>(m_addr + 760);
	}
	struct TWeakObjectPtr<UItemListPopup> GetRewardItemListDialog() {
		return memory.read<struct TWeakObjectPtr<UItemListPopup>>(m_addr + 768);
	}
	struct TSoftObjectPtr<UMediaPlaylist> GetBackgroundMovie() {
		return memory.read<struct TSoftObjectPtr<UMediaPlaylist>>(m_addr + 776);
	}
	struct TSoftObjectPtr<UTexture2D> GetBackgroundImage() {
		return memory.read<struct TSoftObjectPtr<UTexture2D>>(m_addr + 816);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqSetModeSelectDataList
{
public:
	UPqSetModeSelectDataList(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKtModeSelectDataList GetdataList() {
		return memory.read<struct FKtModeSelectDataList>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UInfoPageWidget
{
public:
	UInfoPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UUserWidget GetDailyListItemClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 752);
		return UUserWidget(ptr_addr);
	}
	UUserWidget GetPremiumListItemClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 760);
		return UUserWidget(ptr_addr);
	}
	UUserWidget GetEventListItemClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 768);
		return UUserWidget(ptr_addr);
	}
	UUserWidget GetPremiumAlertWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 776);
		return UUserWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKartChangeDialog
{
public:
	UKartChangeDialog(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TWeakObjectPtr<UItemDefEntryObject> GetCurrentFocusedItem() {
		return memory.read<struct TWeakObjectPtr<UItemDefEntryObject>>(m_addr + 864);
	}

private:
	std::uint64_t m_addr = 0;
};


class UC_KartUpgradePageWidget
{
public:
	UC_KartUpgradePageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UItemCubesComponent
{
public:
	UItemCubesComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbEnableItemCubes() {
		return memory.read<bool>(m_addr + 176);
	}
	struct TArray<struct AGoItem_Cube> GetItemCubeList() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 184);
		return struct TArray<struct AGoItem_Cube>(ptr_addr);
	}
	struct TArray<struct AGoItem_Cube> GetAnimCubes() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 208);
		return struct TArray<struct AGoItem_Cube>(ptr_addr);
	}
	struct UCurveFloat GetAnimCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 240);
		return struct UCurveFloat(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UC_LiveryStickerPageWidget
{
public:
	UC_LiveryStickerPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULiveryEditPageWidget
{
public:
	ULiveryEditPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct TWeakObjectPtr<AOutGamePawn>> GetIconPawns() {
		return memory.read<struct TArray<struct TWeakObjectPtr<AOutGamePawn>>>(m_addr + 744);
	}
	bool GetbFirstCreateLivery() {
		return memory.read<bool>(m_addr + 760);
	}
	struct TArray<struct TWeakObjectPtr<UUserWidget>> GetGamutTabSelColorWidgets() {
		return memory.read<struct TArray<struct TWeakObjectPtr<UUserWidget>>>(m_addr + 768);
	}
	struct TWeakObjectPtr<UUserWidget> GetSelectColorWidget() {
		return memory.read<struct TWeakObjectPtr<UUserWidget>>(m_addr + 784);
	}
	struct TWeakObjectPtr<UDialogTemplate> GetWarningPopup() {
		return memory.read<struct TWeakObjectPtr<UDialogTemplate>>(m_addr + 792);
	}
	struct TWeakObjectPtr<UDialogTemplate> GetSavePopup() {
		return memory.read<struct TWeakObjectPtr<UDialogTemplate>>(m_addr + 800);
	}
	struct TWeakObjectPtr<UDialogTemplate> GetMenuPopup() {
		return memory.read<struct TWeakObjectPtr<UDialogTemplate>>(m_addr + 808);
	}
	struct TWeakObjectPtr<UDialogTemplate> GetReportPopup() {
		return memory.read<struct TWeakObjectPtr<UDialogTemplate>>(m_addr + 816);
	}
	struct TWeakObjectPtr<UDialogTemplate> GetEditValuePopup() {
		return memory.read<struct TWeakObjectPtr<UDialogTemplate>>(m_addr + 824);
	}
	struct TArray<struct TWeakObjectPtr<UEditableText>> GetEditValueWidgets() {
		return memory.read<struct TArray<struct TWeakObjectPtr<UEditableText>>>(m_addr + 832);
	}
	enum class ELiveryPageType GetSaveExitPageType() {
		return memory.read<enum class ELiveryPageType>(m_addr + 848);
	}
	enum class ELiveryTextEditingState GetTextEditingState() {
		return memory.read<enum class ELiveryTextEditingState>(m_addr + 872);
	}
	struct FVector2D GetMaterialContextOffset() {
		return memory.read<struct FVector2D>(m_addr + 876);
	}

private:
	std::uint64_t m_addr = 0;
};


class UC_LiveryEditPageWidget
{
public:
	UC_LiveryEditPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UTouchBackPlate
{
public:
	UTouchBackPlate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULicenseDriftCheckComponent
{
public:
	ULicenseDriftCheckComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ULicenseDriftCheckData GetData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 184);
		return struct ULicenseDriftCheckData(ptr_addr);
	}
	struct UParticleSystem GetParticleSystem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 192);
		return struct UParticleSystem(ptr_addr);
	}
	struct TArray<struct AActor> GetDriftGateList() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 200);
		return struct TArray<struct AActor>(ptr_addr);
	}
	int32_t GetCurrentIndex() {
		return memory.read<int32_t>(m_addr + 216);
	}
	struct APawn GetPawn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 224);
		return struct APawn(ptr_addr);
	}
	struct FVector GetLastPosition() {
		return memory.read<struct FVector>(m_addr + 232);
	}
	struct TSoftObjectPtr<UParticleSystem> GetParticle() {
		return memory.read<struct TSoftObjectPtr<UParticleSystem>>(m_addr + 264);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULiveryStickerPageWidget
{
public:
	ULiveryStickerPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetEditStickerId() {
		return memory.read<int32_t>(m_addr + 744);
	}
	struct TArray<struct TWeakObjectPtr<UUserWidget>> GetGamutTabSelColorWidgets() {
		return memory.read<struct TArray<struct TWeakObjectPtr<UUserWidget>>>(m_addr + 752);
	}
	struct TWeakObjectPtr<UUserWidget> GetSelectColorWidget() {
		return memory.read<struct TWeakObjectPtr<UUserWidget>>(m_addr + 768);
	}
	struct TWeakObjectPtr<UDialogTemplate> GetWarningPopup() {
		return memory.read<struct TWeakObjectPtr<UDialogTemplate>>(m_addr + 776);
	}
	struct TWeakObjectPtr<UDialogTemplate> GetSavePopup() {
		return memory.read<struct TWeakObjectPtr<UDialogTemplate>>(m_addr + 784);
	}
	struct TWeakObjectPtr<UDialogTemplate> GetMenuPopup() {
		return memory.read<struct TWeakObjectPtr<UDialogTemplate>>(m_addr + 792);
	}
	struct TWeakObjectPtr<UDialogTemplate> GetEditValuePopup() {
		return memory.read<struct TWeakObjectPtr<UDialogTemplate>>(m_addr + 800);
	}
	struct TArray<struct TWeakObjectPtr<UEditableText>> GetEditValueWidgets() {
		return memory.read<struct TArray<struct TWeakObjectPtr<UEditableText>>>(m_addr + 808);
	}
	enum class ELiveryPageType GetSaveExitPageType() {
		return memory.read<enum class ELiveryPageType>(m_addr + 824);
	}
	enum class ELiveryTextEditingState GetTextEditingState() {
		return memory.read<enum class ELiveryTextEditingState>(m_addr + 848);
	}

private:
	std::uint64_t m_addr = 0;
};


class UC_LobbyPageWidget
{
public:
	UC_LobbyPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UC_LootBoxPageWidget
{
public:
	UC_LootBoxPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UMailPageWidget
{
public:
	UMailPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TWeakObjectPtr<UDialogTemplate> GetMailPopup() {
		return memory.read<struct TWeakObjectPtr<UDialogTemplate>>(m_addr + 760);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqLeaveCustomGame
{
public:
	UPqLeaveCustomGame(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class USimpleAODecalComponent
{
public:
	USimpleAODecalComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UMaterialInstanceDynamic GetMaterialDynamic() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UMaterialInstanceDynamic(ptr_addr);
	}
	struct AOutGamePawn GetOwnerPawn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct AOutGamePawn(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UReplayTimeControlComponent
{
public:
	UReplayTimeControlComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UC_ModeSelectPageWidget
{
public:
	UC_ModeSelectPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UC_OptionPageWidget
{
public:
	UC_OptionPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UOptionBarWidget GetKeyPresetSelectBar() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1016);
		return struct UOptionBarWidget(ptr_addr);
	}
	struct UContextMenuTemplate GetOptionDropDown() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1024);
		return struct UContextMenuTemplate(ptr_addr);
	}
	struct UUserWidget GetMonitorIndexOptionButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1040);
		return struct UUserWidget(ptr_addr);
	}
	struct UUserWidget GetDisplayModeOptionButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1048);
		return struct UUserWidget(ptr_addr);
	}
	struct UUserWidget GetResolutionOptionButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1056);
		return struct UUserWidget(ptr_addr);
	}
	struct UUserWidget GetRefreshRateOptionButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1064);
		return struct UUserWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ATimeAttackPawn
{
public:
	ATimeAttackPawn(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UComboBoxStringExpand
{
public:
	UComboBoxStringExpand(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ADepthDebugCameraActor
{
public:
	ADepthDebugCameraActor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetMarkerScale() {
		return memory.read<float>(m_addr + 2080);
	}
	bool GetbMarkerVisibility() {
		return memory.read<bool>(m_addr + 2084);
	}
	float GetCloseDepth() {
		return memory.read<float>(m_addr + 2088);
	}
	float GetFarDepth() {
		return memory.read<float>(m_addr + 2092);
	}
	bool GetbVisualizeFront() {
		return memory.read<bool>(m_addr + 2096);
	}
	bool GetbVisualizeMid() {
		return memory.read<bool>(m_addr + 2097);
	}
	bool GetbVisualizeBack() {
		return memory.read<bool>(m_addr + 2098);
	}
	bool GetbEnableVisualizer() {
		return memory.read<bool>(m_addr + 2099);
	}
	struct FLinearColor GetFrontColor() {
		return memory.read<struct FLinearColor>(m_addr + 2100);
	}
	struct FLinearColor GetMidColor() {
		return memory.read<struct FLinearColor>(m_addr + 2116);
	}
	struct FLinearColor GetBackColor() {
		return memory.read<struct FLinearColor>(m_addr + 2132);
	}
	bool GetbGrayscale() {
		return memory.read<bool>(m_addr + 2148);
	}
	bool GetbGrayscaleReverseOrder() {
		return memory.read<bool>(m_addr + 2149);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCancelTargetFinder
{
public:
	UCancelTargetFinder(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UC_PremiumChallengePageWidget
{
public:
	UC_PremiumChallengePageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AWpWorker
{
public:
	AWpWorker(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetQueueName() {
		return memory.read<struct FString>(m_addr + 544);
	}
	struct FString GetServerUrl() {
		return memory.read<struct FString>(m_addr + 560);
	}
	struct UWebSocketServerConnection GetWpServer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 576);
		return struct UWebSocketServerConnection(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPresetPageWidget
{
public:
	UPresetPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UProfileEditPageWidget
{
public:
	UProfileEditPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UC_ShopPageWidget
{
public:
	UC_ShopPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UReplayPlaybarWidget
{
public:
	UReplayPlaybarWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USlider GetV_PlaybarSlider() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct USlider(ptr_addr);
	}
	struct UKdTextBlock GetV_Txt_CurrentTime() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UKdTextBlock GetV_Txt_MaxTime() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UImage GetV_Img_TimeGauge() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UImage(ptr_addr);
	}
	struct UReplayTimeControlComponent GetTimeControlComp() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UReplayTimeControlComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class USideMenuPageWidget
{
public:
	USideMenuPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UDialogTemplate GetMainDialog() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 744);
		return struct UDialogTemplate(ptr_addr);
	}
	struct UDialogTemplate GetKeyGuideDialog() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 832);
		return struct UDialogTemplate(ptr_addr);
	}
	struct UDialogTemplate GetReportMainCategoryDialogWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 992);
		return struct UDialogTemplate(ptr_addr);
	}
	struct UDialogTemplate GetReportPlayerSelectDialogWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1000);
		return struct UDialogTemplate(ptr_addr);
	}
	struct UDialogTemplate GetPlayerReportSubCategoryDialogWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1008);
		return struct UDialogTemplate(ptr_addr);
	}
	struct UDialogTemplate GetPlayerReportInputDialogWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1016);
		return struct UDialogTemplate(ptr_addr);
	}
	struct UDialogTemplate GetPlayerReportConfirmDialogWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1024);
		return struct UDialogTemplate(ptr_addr);
	}
	struct UDialogTemplate GetBlockListMainDialogWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1096);
		return struct UDialogTemplate(ptr_addr);
	}
	struct UCommonPopup GetUnblockPopupWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1104);
		return struct UCommonPopup(ptr_addr);
	}
	struct UDialogTemplate GetTermsAndConditionsSelectDialogWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1184);
		return struct UDialogTemplate(ptr_addr);
	}
	struct UDataTable GetTermsAndConditionsURLDataTable() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1192);
		return struct UDataTable(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTouchInputButton
{
public:
	UTouchInputButton(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FAnimationPresetDef> GetOnTouchedAnimation() {
		return memory.read<struct TArray<struct FAnimationPresetDef>>(m_addr + 656);
	}
	struct TArray<struct FAnimationPresetDef> GetOnReleasedAnimation() {
		return memory.read<struct TArray<struct FAnimationPresetDef>>(m_addr + 672);
	}
	bool GetbEnableDragIn() {
		return memory.read<bool>(m_addr + 688);
	}
	bool GetbEnableDragOut() {
		return memory.read<bool>(m_addr + 689);
	}

private:
	std::uint64_t m_addr = 0;
};


class UC_SideMenuPageWidget
{
public:
	UC_SideMenuPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UDqDediNxLogInMatchEndRideEvent
{
public:
	UDqDediNxLogInMatchEndRideEvent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString Getprotohash() {
		return memory.read<struct FString>(m_addr + 248);
	}
	struct FString Getrideevent() {
		return memory.read<struct FString>(m_addr + 264);
	}

private:
	std::uint64_t m_addr = 0;
};


class UC_StickerMarketPageWidget
{
public:
	UC_StickerMarketPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UKdServerLoginTaskNgm
{
public:
	UKdServerLoginTaskNgm(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UKdVersionCheckerNgm GetVersionChecker() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 472);
		return struct UKdVersionCheckerNgm(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UInitializeLicensePauseMenu
{
public:
	UInitializeLicensePauseMenu(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftClassPtr<UObject> GetPauseMenuWidgetClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UStudioPageWidget
{
public:
	UStudioPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FInputLimitValue GetInputLimit() {
		return memory.read<struct FInputLimitValue>(m_addr + 744);
	}
	struct TWeakObjectPtr<UDialogTemplate> GetStudioSettingsPopup() {
		return memory.read<struct TWeakObjectPtr<UDialogTemplate>>(m_addr + 760);
	}

private:
	std::uint64_t m_addr = 0;
};


class USmsMultiplay
{
public:
	USmsMultiplay(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UHttpServerRequester GetSessionApiServer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 96);
		return struct UHttpServerRequester(ptr_addr);
	}
	struct TMap<struct FString, struct UObject> GetSmsPlayers() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 184);
		return struct TMap<struct FString, struct UObject>(ptr_addr);
	}
	struct UObject GetGameSessionRequest() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 280);
		return struct UObject(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class URaceLevelLoadComponent
{
public:
	URaceLevelLoadComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbSubLevelAllLoadComplete() {
		return memory.read<bool>(m_addr + 200);
	}

private:
	std::uint64_t m_addr = 0;
};


class UM_PresetPageWidget
{
public:
	UM_PresetPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UC_StudioPageWidget
{
public:
	UC_StudioPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UTransition_TimeAttackGoal
{
public:
	UTransition_TimeAttackGoal(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UScenarioLevelSequencePlayer
{
public:
	UScenarioLevelSequencePlayer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbOverrideCameraCutParams() {
		return memory.read<bool>(m_addr + 1536);
	}
	bool GetbNoJumpInSameCamera() {
		return memory.read<bool>(m_addr + 1537);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTimeAttackPersonalResultWidget
{
public:
	UTimeAttackPersonalResultWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTextBlock GetV_CurrentRaceTime() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 816);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock GetV_BestRaceTime() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 824);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock GetV_RaceResult() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 832);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock GetText_NewOrTime() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 840);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock GetText_SeasonBest() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 848);
		return struct UTextBlock(ptr_addr);
	}
	struct UHorizontalBox GetHB_RankerInfo() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 856);
		return struct UHorizontalBox(ptr_addr);
	}
	struct UPlatformIconWidget GetPlatformIconWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 864);
		return struct UPlatformIconWidget(ptr_addr);
	}
	struct UTextBlock GetText_PlayerID() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 872);
		return struct UTextBlock(ptr_addr);
	}
	struct UWidgetSwitcher GetWS_RankerTimeStyle() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 880);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UWidgetSwitcher GetWS_Lucci() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 888);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UTextBlock GetText_Lucci() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 896);
		return struct UTextBlock(ptr_addr);
	}
	struct UWidgetSwitcher GetWS_Season() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 904);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct FText GetRaceSuccessText() {
		return memory.read<struct FText>(m_addr + 912);
	}
	struct FText GetRaceFinishText() {
		return memory.read<struct FText>(m_addr + 936);
	}
	struct FText GetRaceFailText() {
		return memory.read<struct FText>(m_addr + 960);
	}
	struct FText GetRaceVictoryText() {
		return memory.read<struct FText>(m_addr + 984);
	}
	struct FSlateColor GetRaceSuccessColor() {
		return memory.read<struct FSlateColor>(m_addr + 1008);
	}
	struct FSlateColor GetRaceFailColor() {
		return memory.read<struct FSlateColor>(m_addr + 1048);
	}

private:
	std::uint64_t m_addr = 0;
};


class UHostGameFinishRace
{
public:
	UHostGameFinishRace(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULicenseCheckDriftBoostComponent
{
public:
	ULicenseCheckDriftBoostComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ULicenseCheckDriftBoostData GetData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 192);
		return struct ULicenseCheckDriftBoostData(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UM_CouponPageWidget
{
public:
	UM_CouponPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UC_TimeAttackPersonalResultWidget
{
public:
	UC_TimeAttackPersonalResultWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UKeyIconWidget GetV_RetryKeyIcon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1096);
		return struct UKeyIconWidget(ptr_addr);
	}
	struct UKeyIconWidget GetV_ExitKeyIcon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1104);
		return struct UKeyIconWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class AScenarioForceAutoForward
{
public:
	AScenarioForceAutoForward(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbForceAutoForward() {
		return memory.read<bool>(m_addr + 624);
	}

private:
	std::uint64_t m_addr = 0;
};


class UReplayModeSelectLogicComponent
{
public:
	UReplayModeSelectLogicComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrLoginQueueStatus
{
public:
	UPrLoginQueueStatus(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t Getwaiting() {
		return memory.read<int32_t>(m_addr + 72);
	}
	int32_t GetprocessingPerMinute() {
		return memory.read<int32_t>(m_addr + 76);
	}

private:
	std::uint64_t m_addr = 0;
};


class UC_TimeAttackTrackChangeDialog
{
public:
	UC_TimeAttackTrackChangeDialog(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UCameraCalculator
{
public:
	UCameraCalculator(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrCustomGameKickedList
{
public:
	UPrCustomGameKickedList(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FString> GetkickedList() {
		return memory.read<struct TArray<struct FString>>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTransition_LicenseSequence
{
public:
	UTransition_LicenseSequence(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UDriveCameraCalculator
{
public:
	UDriveCameraCalculator(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPawnManageComponent
{
public:
	UPawnManageComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct TWeakObjectPtr<AOutGamePawn>> GetMenuallySpawnedPawns() {
		return memory.read<struct TArray<struct TWeakObjectPtr<AOutGamePawn>>>(m_addr + 256);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTopFollowCameraCalculator
{
public:
	UTopFollowCameraCalculator(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UStopFinishAnimation
{
public:
	UStopFinishAnimation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UM_TimeAttackSelectRankerDialog
{
public:
	UM_TimeAttackSelectRankerDialog(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UFrontFollowCameraCalculator
{
public:
	UFrontFollowCameraCalculator(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AItemSingleGameMode
{
public:
	AItemSingleGameMode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class USideFollowCameraCalculator
{
public:
	USideFollowCameraCalculator(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UKdPlayerPropIdentity
{
public:
	UKdPlayerPropIdentity(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AFreeRaceGameMode
{
public:
	AFreeRaceGameMode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class URegisterGameStateComponents
{
public:
	URegisterGameStateComponents(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UGazeCameraCalculator
{
public:
	UGazeCameraCalculator(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULicenseBossWarningWidget
{
public:
	ULicenseBossWarningWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UWidgetAnimation GetAnim_Show() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation GetAnim_Hide() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UWidgetAnimation(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UDriveCameraParticleEffectComponent
{
public:
	UDriveCameraParticleEffectComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UParticleSystemComponent GetParticleComp() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 176);
		return struct UParticleSystemComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKartRiderTrackEffectStatics
{
public:
	UKartRiderTrackEffectStatics(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UCameraModeButtonWidget
{
public:
	UCameraModeButtonWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetCameraAngle() {
		return memory.read<float>(m_addr + 1000);
	}
	struct FText GetCameraCode() {
		return memory.read<struct FText>(m_addr + 1008);
	}
	struct FVector2D GetTextOffset() {
		return memory.read<struct FVector2D>(m_addr + 1032);
	}
	enum class ECameraMode GetCameraMode() {
		return memory.read<enum class ECameraMode>(m_addr + 1040);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKdTextImageDecoratorAsset
{
public:
	UKdTextImageDecoratorAsset(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<struct FName, struct FKdTextInlineImageDecoratorData> GetIdAndDecoratorDataMap() {
		return memory.read<struct TMap<struct FName, struct FKdTextInlineImageDecoratorData>>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicenseObstacleInterface
{
public:
	ULicenseObstacleInterface(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULicenseScoreWidget
{
public:
	ULicenseScoreWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UKdTextBlock GetV_Score_Text() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UKdTextBlock GetV_Add_Score_Text() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UKdTextBlock GetTotalScore_Text_2() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UKdTextBlock GetV_Add_Score_Text_2() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UProgressBar GetProgressBar_142() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UProgressBar(ptr_addr);
	}
	struct UWidgetAnimation GetAnim_addscore() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct ULicenseStarIcon GetStar_2() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct ULicenseStarIcon(ptr_addr);
	}
	struct ULicenseStarIcon GetStar_3() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct ULicenseStarIcon(ptr_addr);
	}
	struct ULicenseStarIcon GetStar_4() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct ULicenseStarIcon(ptr_addr);
	}
	struct UWidgetSwitcher GetV_ProgressSW() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UWidgetSwitcher(ptr_addr);
	}
	int32_t GetScore() {
		return memory.read<int32_t>(m_addr + 688);
	}
	int32_t GetAddedScore() {
		return memory.read<int32_t>(m_addr + 692);
	}
	int32_t GetInSoundCount() {
		return memory.read<int32_t>(m_addr + 696);
	}
	int32_t GetStar() {
		return memory.read<int32_t>(m_addr + 700);
	}
	float GetMax() {
		return memory.read<float>(m_addr + 704);
	}
	float GetProgress() {
		return memory.read<float>(m_addr + 708);
	}
	float GetLastProgress() {
		return memory.read<float>(m_addr + 712);
	}
	float GetAnimTime() {
		return memory.read<float>(m_addr + 716);
	}
	struct UWidgetSwitcher GetV_Score_Switcher() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct ULicenseStarCondition GetCondition() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 728);
		return struct ULicenseStarCondition(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKtSessionCloseRace
{
public:
	UKtSessionCloseRace(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FString> GetrematchParties() {
		return memory.read<struct TArray<struct FString>>(m_addr + 48);
	}
	enum class ERaceCloseReason GetcloseType() {
		return memory.read<enum class ERaceCloseReason>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCameraModeSelectWidget
{
public:
	UCameraModeSelectWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UChallengeLogicComponent
{
public:
	UChallengeLogicComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UCharacterMontageAsset
{
public:
	UCharacterMontageAsset(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<enum class ECharacterMontage, struct TSoftObjectPtr<UAnimMontage>> GetMontageContainer() {
		return memory.read<struct TMap<enum class ECharacterMontage, struct TSoftObjectPtr<UAnimMontage>>>(m_addr + 48);
	}
	struct FString GetCharacterName() {
		return memory.read<struct FString>(m_addr + 128);
	}
	struct FString GetFolderPath() {
		return memory.read<struct FString>(m_addr + 144);
	}

private:
	std::uint64_t m_addr = 0;
};


class UChatLogicComponent
{
public:
	UChatLogicComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class APassableBox
{
public:
	APassableBox(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AResetPoint
{
public:
	AResetPoint(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UClientVerifier
{
public:
	UClientVerifier(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UCommonPopup
{
public:
	UCommonPopup(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<enum class ECommonPopupButtonType, struct TSoftClassPtr<UObject>> GetButtonClassMap() {
		return memory.read<struct TMap<enum class ECommonPopupButtonType, struct TSoftClassPtr<UObject>>>(m_addr + 848);
	}

private:
	std::uint64_t m_addr = 0;
};


class UHideUICheatEmptyWidget
{
public:
	UHideUICheatEmptyWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UKtSeasonDataSet
{
public:
	UKtSeasonDataSet(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<struct FString, struct FKtSeasonStaticInfo> Getseason() {
		return memory.read<struct TMap<struct FString, struct FKtSeasonStaticInfo>>(m_addr + 48);
	}
	struct TMap<struct FString, struct UObject> GetracingPass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 128);
		return struct TMap<struct FString, struct UObject>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKtGameSettings
{
public:
	UKtGameSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UKtRaceSettings
{
public:
	UKtRaceSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetTrack() {
		return memory.read<struct FString>(m_addr + 48);
	}
	enum class ERaceType GetraceType() {
		return memory.read<enum class ERaceType>(m_addr + 64);
	}
	enum class ERaceMode GetraceMode() {
		return memory.read<enum class ERaceMode>(m_addr + 65);
	}
	int32_t GetteamMemberCount() {
		return memory.read<int32_t>(m_addr + 68);
	}
	int32_t GetteamCount() {
		return memory.read<int32_t>(m_addr + 72);
	}
	int32_t GetLap() {
		return memory.read<int32_t>(m_addr + 76);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKtGameDetails
{
public:
	UKtGameDetails(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UTransition_EndRetireCountdown_WaitForResult
{
public:
	UTransition_EndRetireCountdown_WaitForResult(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UKtRaceDetails
{
public:
	UKtRaceDetails(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FKtRacePlayerSummary> Getplayers() {
		return memory.read<struct TArray<struct FKtRacePlayerSummary>>(m_addr + 48);
	}
	struct TMap<struct FString, struct FKtItemPreview> GetPreviews() {
		return memory.read<struct TMap<struct FString, struct FKtItemPreview>>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKtRacingPassSet
{
public:
	UKtRacingPassSet(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString Getshop_stockID() {
		return memory.read<struct FString>(m_addr + 48);
	}
	struct FString Getshop_PackagestockID() {
		return memory.read<struct FString>(m_addr + 64);
	}
	struct FString Getshop_LevelstockID() {
		return memory.read<struct FString>(m_addr + 80);
	}
	struct TArray<struct FKtTrophySaleDef> GetsaleRateVector() {
		return memory.read<struct TArray<struct FKtTrophySaleDef>>(m_addr + 96);
	}
	struct TArray<struct FKtRacingPassDef> Gettiers() {
		return memory.read<struct TArray<struct FKtRacingPassDef>>(m_addr + 112);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULiveryLogicComponent
{
public:
	ULiveryLogicComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTexture2D GetLiveryEditTexture() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 264);
		return struct UTexture2D(ptr_addr);
	}
	struct FTickUpdateLiveryInfo GetTickUpdateLiveryInfo() {
		return memory.read<struct FTickUpdateLiveryInfo>(m_addr + 272);
	}
	struct FLiveryDesignDesc GetPreviewLiveryDesignDesc() {
		return memory.read<struct FLiveryDesignDesc>(m_addr + 352);
	}
	int32_t GetPreviewEditId() {
		return memory.read<int32_t>(m_addr + 416);
	}
	enum class ELiveryCategoryType GetLiveryCategory() {
		return memory.read<enum class ELiveryCategoryType>(m_addr + 442);
	}
	enum class ELiveryCategoryType GetLiveryEditStartCategory() {
		return memory.read<enum class ELiveryCategoryType>(m_addr + 443);
	}
	enum class ELiveryPaintType GetLiveryEditPaintType() {
		return memory.read<enum class ELiveryPaintType>(m_addr + 444);
	}
	enum class ELiveryWrappingCategory GetCurrentShapeCategory() {
		return memory.read<enum class ELiveryWrappingCategory>(m_addr + 445);
	}
	struct FKtItemPreset GetCurrentPreset() {
		return memory.read<struct FKtItemPreset>(m_addr + 448);
	}
	int32_t GetFocusEditLiveryId() {
		return memory.read<int32_t>(m_addr + 608);
	}
	int32_t GetCurrentEditLiveryId() {
		return memory.read<int32_t>(m_addr + 612);
	}
	int32_t GetCurrentSaveLiveryId() {
		return memory.read<int32_t>(m_addr + 616);
	}
	struct TArray<struct FStickerStock> GetDownloadStickerStockList() {
		return memory.read<struct TArray<struct FStickerStock>>(m_addr + 768);
	}
	struct TArray<struct FLiveryItemInfo> GetMyStickerItemList() {
		return memory.read<struct TArray<struct FLiveryItemInfo>>(m_addr + 784);
	}
	struct TArray<struct FLiveryItemInfo> GetDownloadStickerItemList() {
		return memory.read<struct TArray<struct FLiveryItemInfo>>(m_addr + 800);
	}
	struct TArray<struct FLiveryItemInfo> GetLiveryEditItemList() {
		return memory.read<struct TArray<struct FLiveryItemInfo>>(m_addr + 816);
	}
	struct TArray<struct FLiveryPaintDesc> GetEquippedLiveryPaint() {
		return memory.read<struct TArray<struct FLiveryPaintDesc>>(m_addr + 832);
	}
	struct TArray<struct FLiveryWrappingDesc> GetBackupWrappingDesc() {
		return memory.read<struct TArray<struct FLiveryWrappingDesc>>(m_addr + 848);
	}
	struct TArray<struct FLiveryItemInfo> GetWrappingItemInfoList() {
		return memory.read<struct TArray<struct FLiveryItemInfo>>(m_addr + 864);
	}
	int32_t GetLiveryEditItemSlotStart() {
		return memory.read<int32_t>(m_addr + 880);
	}
	int32_t GetLiveryEditItemSlot() {
		return memory.read<int32_t>(m_addr + 884);
	}
	int32_t GetLiveryEditIndex() {
		return memory.read<int32_t>(m_addr + 888);
	}
	int32_t GetColorFocusIndex() {
		return memory.read<int32_t>(m_addr + 892);
	}
	bool GetbIsGrouping() {
		return memory.read<bool>(m_addr + 896);
	}
	struct TArray<int32_t> GetTempGroupingIndexList() {
		return memory.read<struct TArray<int32_t>>(m_addr + 904);
	}
	struct FLiveryDesignDesc GetOriginalLiveryDesign() {
		return memory.read<struct FLiveryDesignDesc>(m_addr + 920);
	}
	struct FLiveryDesignDesc GetCurrentEditDesignDesc() {
		return memory.read<struct FLiveryDesignDesc>(m_addr + 984);
	}
	bool GetbNewCreateLiveryLayer() {
		return memory.read<bool>(m_addr + 1048);
	}
	struct TArray<struct FLiveryWrappingDesc> GetClipBoardWrappingDescArray() {
		return memory.read<struct TArray<struct FLiveryWrappingDesc>>(m_addr + 1056);
	}
	enum class ELiveryPaintType GetClipBoardPaintType() {
		return memory.read<enum class ELiveryPaintType>(m_addr + 1072);
	}
	bool GetbPauseLiveryEdit() {
		return memory.read<bool>(m_addr + 1074);
	}
	bool GetbUseFineTuning() {
		return memory.read<bool>(m_addr + 1075);
	}
	bool GetbUseLayerMoveX() {
		return memory.read<bool>(m_addr + 1076);
	}
	bool GetbUseLayerMoveY() {
		return memory.read<bool>(m_addr + 1077);
	}
	bool GetbUseLiveryScaleSingle() {
		return memory.read<bool>(m_addr + 1078);
	}
	bool GetbUseLayerScaleX() {
		return memory.read<bool>(m_addr + 1079);
	}
	bool GetbUseLayerScaleY() {
		return memory.read<bool>(m_addr + 1080);
	}
	bool GetbUseLayerRotate() {
		return memory.read<bool>(m_addr + 1081);
	}
	bool GetbFixedUnit() {
		return memory.read<bool>(m_addr + 1082);
	}
	enum class ELiveryEditAutoRotateMode GetEditAutoRotateMode() {
		return memory.read<enum class ELiveryEditAutoRotateMode>(m_addr + 1083);
	}
	struct FVector2D GetAccumulateMove() {
		return memory.read<struct FVector2D>(m_addr + 1096);
	}
	struct FVector2D GetAccumulateSingleScale() {
		return memory.read<struct FVector2D>(m_addr + 1104);
	}
	struct FVector2D GetAccumulateScale() {
		return memory.read<struct FVector2D>(m_addr + 1112);
	}
	float GetAccumulateRotate() {
		return memory.read<float>(m_addr + 1120);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKtStockDataSet
{
public:
	UKtStockDataSet(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<struct FString, struct FKtStockDef> GetstockDef() {
		return memory.read<struct TMap<struct FString, struct FKtStockDef>>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicenseMessageElementWidget
{
public:
	ULicenseMessageElementWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UKdImageTextBlock GetV_TextBlock_Message() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UKdImageTextBlock(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicenseItemComponent
{
public:
	ULicenseItemComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetPawn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1104);
		return struct AActor(ptr_addr);
	}
	struct ULicenseItemSpawnData GetData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1112);
		return struct ULicenseItemSpawnData(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCommunityFriendObject
{
public:
	UCommunityFriendObject(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UContentManagerComponent
{
public:
	UContentManagerComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UContextMenuTemplate
{
public:
	UContextMenuTemplate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UButtonTemplate GetContextMenuButtonClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 816);
		return UButtonTemplate(ptr_addr);
	}
	struct UPanelWidget GetParentsPanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 824);
		return struct UPanelWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicenseMissionListEntry
{
public:
	ULicenseMissionListEntry(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetListIndex() {
		return memory.read<int32_t>(m_addr + 40);
	}
	struct FString GetGroupID() {
		return memory.read<struct FString>(m_addr + 48);
	}
	struct FString GetmissionId() {
		return memory.read<struct FString>(m_addr + 64);
	}
	struct FText GetMissionTitle() {
		return memory.read<struct FText>(m_addr + 80);
	}
	struct TArray<struct FString> GetrewardStockIdList() {
		return memory.read<struct TArray<struct FString>>(m_addr + 104);
	}
	struct TArray<int32_t> GetstarScoreList() {
		return memory.read<struct TArray<int32_t>>(m_addr + 120);
	}
	char GetCompletedStarCount() {
		return memory.read<char>(m_addr + 136);
	}
	struct TArray<enum class EItemType> GetItemTypeList() {
		return memory.read<struct TArray<enum class EItemType>>(m_addr + 144);
	}
	enum class ELicenseMissionScoreType GetScoreType() {
		return memory.read<enum class ELicenseMissionScoreType>(m_addr + 160);
	}
	struct FText GetMissionTip() {
		return memory.read<struct FText>(m_addr + 168);
	}

private:
	std::uint64_t m_addr = 0;
};


class USmsProvider
{
public:
	USmsProvider(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULicenseTargetActorSpawnComponent
{
public:
	ULicenseTargetActorSpawnComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ULicenseTargetActorData GetData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 192);
		return struct ULicenseTargetActorData(ptr_addr);
	}
	struct TMap<struct AActor, enum class EItemType> GetSpawnedActors() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 200);
		return struct TMap<struct AActor, enum class EItemType>(ptr_addr);
	}
	bool GetbSuccess() {
		return memory.read<bool>(m_addr + 280);
	}
	float GetEventLastTime() {
		return memory.read<float>(m_addr + 284);
	}
	int32_t GetPatternIndex() {
		return memory.read<int32_t>(m_addr + 288);
	}
	float GetPatternChangeTime() {
		return memory.read<float>(m_addr + 292);
	}
	struct FString GetCurrentPattern() {
		return memory.read<struct FString>(m_addr + 296);
	}
	struct UCurveFloat GetSpawnCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 312);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat GetDestroyCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 320);
		return struct UCurveFloat(ptr_addr);
	}
	struct AActor GetPawn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 328);
		return struct AActor(ptr_addr);
	}
	struct TSoftObjectPtr<UCurveFloat> GetCurveFloat() {
		return memory.read<struct TSoftObjectPtr<UCurveFloat>>(m_addr + 368);
	}
	struct TSoftObjectPtr<UCurveFloat> GetCurveFloat2() {
		return memory.read<struct TSoftObjectPtr<UCurveFloat>>(m_addr + 408);
	}
	struct TSoftObjectPtr<UStaticMesh> GetAIKartMesh() {
		return memory.read<struct TSoftObjectPtr<UStaticMesh>>(m_addr + 448);
	}

private:
	std::uint64_t m_addr = 0;
};


class UControlDirectingWidget
{
public:
	UControlDirectingWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMulticastInlineDelegate GetOnReleased_MajorIntroSequenceDelegate() {
		return memory.read<struct FMulticastInlineDelegate>(m_addr + 608);
	}
	struct FMulticastInlineDelegate GetOnReleased_MajorFinishSequenceDelegate() {
		return memory.read<struct FMulticastInlineDelegate>(m_addr + 624);
	}
	struct FMulticastInlineDelegate GetOnReleased_MajorPodiumSequenceDelegate() {
		return memory.read<struct FMulticastInlineDelegate>(m_addr + 640);
	}
	struct FMulticastInlineDelegate GetOnSelectionChanged_MajorIntroSequenceDelegate() {
		return memory.read<struct FMulticastInlineDelegate>(m_addr + 656);
	}
	struct FMulticastInlineDelegate GetOnSelectionChanged_MajorFinishSequenceDelegate() {
		return memory.read<struct FMulticastInlineDelegate>(m_addr + 672);
	}
	struct FMulticastInlineDelegate GetOnSelectionChanged_MajorPodiumSequenceDelegate() {
		return memory.read<struct FMulticastInlineDelegate>(m_addr + 688);
	}
	struct UComboBoxStringExpand GetComboBoxString_MajorIntroSequence() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UComboBoxStringExpand(ptr_addr);
	}
	struct UComboBoxStringExpand GetComboBoxString_MajorFinishSequence() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct UComboBoxStringExpand(ptr_addr);
	}
	struct UComboBoxStringExpand GetComboBoxString_MajorPodiumSequence() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return struct UComboBoxStringExpand(ptr_addr);
	}
	struct UButton GetButton_MajorIntroAction() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 728);
		return struct UButton(ptr_addr);
	}
	struct UButton GetButton_MajorFinishAction() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 736);
		return struct UButton(ptr_addr);
	}
	struct UButton GetButton_MajorPodiumAction() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 744);
		return struct UButton(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UItemSpawnComponent
{
public:
	UItemSpawnComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULicenseBarricadeComponent
{
public:
	ULicenseBarricadeComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UBarricadeDistanceItemSpawnInAdvance GetData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 184);
		return struct UBarricadeDistanceItemSpawnInAdvance(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UControlPawnEquipWidget
{
public:
	UControlPawnEquipWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMulticastInlineDelegate GetOnSelectionChanged_CharacterDelegate() {
		return memory.read<struct FMulticastInlineDelegate>(m_addr + 608);
	}
	struct FMulticastInlineDelegate GetOnSelectionChanged_CostumeDelegate() {
		return memory.read<struct FMulticastInlineDelegate>(m_addr + 624);
	}
	struct FMulticastInlineDelegate GetOnSelectionChanged_KartDelegate() {
		return memory.read<struct FMulticastInlineDelegate>(m_addr + 640);
	}
	struct FMulticastInlineDelegate GetOnSelectionChanged_PartsDelegate() {
		return memory.read<struct FMulticastInlineDelegate>(m_addr + 656);
	}
	struct FMulticastInlineDelegate GetOnSelectionChanged_BoosterDelegate() {
		return memory.read<struct FMulticastInlineDelegate>(m_addr + 672);
	}
	struct FMulticastInlineDelegate GetOnSelectionChanged_WheelDelegate() {
		return memory.read<struct FMulticastInlineDelegate>(m_addr + 688);
	}
	struct FMulticastInlineDelegate GetOnSelectionChanged_PlateDelegate() {
		return memory.read<struct FMulticastInlineDelegate>(m_addr + 704);
	}
	struct FMulticastInlineDelegate GetOnSelectionChanged_BalloonDelegate() {
		return memory.read<struct FMulticastInlineDelegate>(m_addr + 720);
	}
	struct FMulticastInlineDelegate GetOnSelectionChanged_SkidMarkDelegate() {
		return memory.read<struct FMulticastInlineDelegate>(m_addr + 736);
	}
	struct UComboBoxStringExpandWithSearch GetComboBoxStringExpand_Character() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 752);
		return struct UComboBoxStringExpandWithSearch(ptr_addr);
	}
	struct UComboBoxStringExpandWithSearch GetComboBoxStringExpand_Costume() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 760);
		return struct UComboBoxStringExpandWithSearch(ptr_addr);
	}
	struct UComboBoxStringExpandWithSearch GetComboBoxStringExpand_Kart() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 768);
		return struct UComboBoxStringExpandWithSearch(ptr_addr);
	}
	struct UComboBoxStringExpandWithSearch GetComboBoxStringExpand_Parts() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 776);
		return struct UComboBoxStringExpandWithSearch(ptr_addr);
	}
	struct UComboBoxStringExpandWithSearch GetComboBoxStringExpand_Booster() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 784);
		return struct UComboBoxStringExpandWithSearch(ptr_addr);
	}
	struct UComboBoxStringExpandWithSearch GetComboBoxStringExpand_Plate() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 792);
		return struct UComboBoxStringExpandWithSearch(ptr_addr);
	}
	struct UComboBoxStringExpandWithSearch GetComboBoxStringExpand_Wheel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 800);
		return struct UComboBoxStringExpandWithSearch(ptr_addr);
	}
	struct UComboBoxStringExpandWithSearch GetComboBoxStringExpand_Balloon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 808);
		return struct UComboBoxStringExpandWithSearch(ptr_addr);
	}
	struct UComboBoxStringExpandWithSearch GetComboBoxStringExpand_SkidMark() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 816);
		return struct UComboBoxStringExpandWithSearch(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UControlPawnFXWidget
{
public:
	UControlPawnFXWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMulticastInlineDelegate GetOnReleased_SitActionDelegate() {
		return memory.read<struct FMulticastInlineDelegate>(m_addr + 608);
	}
	struct FMulticastInlineDelegate GetOnReleased_ThrowActionDelegate() {
		return memory.read<struct FMulticastInlineDelegate>(m_addr + 624);
	}
	struct FMulticastInlineDelegate GetOnReleased_SufferActionDelegate() {
		return memory.read<struct FMulticastInlineDelegate>(m_addr + 640);
	}
	struct FMulticastInlineDelegate GetOnReleased_ItemAffectByActionDelegate() {
		return memory.read<struct FMulticastInlineDelegate>(m_addr + 656);
	}
	struct FMulticastInlineDelegate GetOnSelectionChanged_SitMotionDelegate() {
		return memory.read<struct FMulticastInlineDelegate>(m_addr + 672);
	}
	struct FMulticastInlineDelegate GetOnSelectionChanged_ThrowMotionDelegate() {
		return memory.read<struct FMulticastInlineDelegate>(m_addr + 688);
	}
	struct FMulticastInlineDelegate GetOnSelectionChanged_SufferMotionDelegate() {
		return memory.read<struct FMulticastInlineDelegate>(m_addr + 704);
	}
	struct FMulticastInlineDelegate GetOnSelectionChanged_ItemAffectByDelegate() {
		return memory.read<struct FMulticastInlineDelegate>(m_addr + 720);
	}
	struct UComboBoxStringExpand GetComboBoxString_SitMotion() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 736);
		return struct UComboBoxStringExpand(ptr_addr);
	}
	struct UComboBoxStringExpand GetComboBoxString_ThrowMotion() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 744);
		return struct UComboBoxStringExpand(ptr_addr);
	}
	struct UComboBoxStringExpand GetComboBoxString_SufferMotion() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 752);
		return struct UComboBoxStringExpand(ptr_addr);
	}
	struct UComboBoxStringExpand GetComboBoxString_ItemAffectBy() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 760);
		return struct UComboBoxStringExpand(ptr_addr);
	}
	struct UButton GetButton_SitAction() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 768);
		return struct UButton(ptr_addr);
	}
	struct UButton GetButton_ThrowAction() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 776);
		return struct UButton(ptr_addr);
	}
	struct UButton GetButton_SufferAction() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 784);
		return struct UButton(ptr_addr);
	}
	struct UButton GetButton_ItemAffectByAction() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 792);
		return struct UButton(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class AWallAssistSpline
{
public:
	AWallAssistSpline(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class EBCWallType GetBeginnerCareWallType() {
		return memory.read<enum class EBCWallType>(m_addr + 544);
	}
	enum class EBCWallThemeType GetThemeType() {
		return memory.read<enum class EBCWallThemeType>(m_addr + 545);
	}
	struct UMaterialInterface GetWallMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 552);
		return struct UMaterialInterface(ptr_addr);
	}
	struct USplineComponent GetSplineComp() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 560);
		return struct USplineComponent(ptr_addr);
	}
	int32_t GetMeshCount() {
		return memory.read<int32_t>(m_addr + 568);
	}
	bool GetbDebugCollision() {
		return memory.read<bool>(m_addr + 572);
	}
	bool GetbActorMerge() {
		return memory.read<bool>(m_addr + 573);
	}
	struct FString GetBasePackageName() {
		return memory.read<struct FString>(m_addr + 576);
	}
	struct TSoftObjectPtr<UStaticMesh> GetSplineMesh() {
		return memory.read<struct TSoftObjectPtr<UStaticMesh>>(m_addr + 624);
	}
	struct TSoftObjectPtr<UStaticMesh> GetSplineMesh_Collision() {
		return memory.read<struct TSoftObjectPtr<UStaticMesh>>(m_addr + 664);
	}
	struct TSoftObjectPtr<UMaterialInterface> GetWallCollisionMaterial() {
		return memory.read<struct TSoftObjectPtr<UMaterialInterface>>(m_addr + 704);
	}
	struct TSoftObjectPtr<UMaterialInterface> GetMat_ShortCut() {
		return memory.read<struct TSoftObjectPtr<UMaterialInterface>>(m_addr + 744);
	}
	struct TSoftObjectPtr<UMaterialInterface> GetMat_Fall_Type_00() {
		return memory.read<struct TSoftObjectPtr<UMaterialInterface>>(m_addr + 784);
	}
	struct TSoftObjectPtr<UMaterialInterface> GetMat_Fall_Type_01() {
		return memory.read<struct TSoftObjectPtr<UMaterialInterface>>(m_addr + 824);
	}
	struct TSoftObjectPtr<UMaterialInterface> GetMat_Fall_Type_02() {
		return memory.read<struct TSoftObjectPtr<UMaterialInterface>>(m_addr + 864);
	}
	struct TSoftObjectPtr<UMaterialInterface> GetMat_Corner_Type_00() {
		return memory.read<struct TSoftObjectPtr<UMaterialInterface>>(m_addr + 904);
	}
	struct TSoftObjectPtr<UMaterialInterface> GetMat_Corner_Type_01() {
		return memory.read<struct TSoftObjectPtr<UMaterialInterface>>(m_addr + 944);
	}

private:
	std::uint64_t m_addr = 0;
};


class UControlTrackWidget
{
public:
	UControlTrackWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMulticastInlineDelegate GetOnSelectionChanged_LevelDelegate() {
		return memory.read<struct FMulticastInlineDelegate>(m_addr + 608);
	}
	struct FMulticastInlineDelegate GetOnSelectionChanged_RaceModeDelegate() {
		return memory.read<struct FMulticastInlineDelegate>(m_addr + 624);
	}
	struct UComboBoxStringExpand GetComboBoxString_Level() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UComboBoxStringExpand(ptr_addr);
	}
	struct UComboBoxStringExpand GetComboBoxString_RaceMode() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UComboBoxStringExpand(ptr_addr);
	}
	struct UEditableText GetEditableText_ModeParam() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UEditableText(ptr_addr);
	}
	struct UButton GetButton_PlayLevel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UButton(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrCouponUse
{
public:
	UPrCouponUse(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetcouponId() {
		return memory.read<struct FString>(m_addr + 72);
	}
	int32_t GetresultCode() {
		return memory.read<int32_t>(m_addr + 88);
	}
	struct TArray<struct FKtItem> GetItems() {
		return memory.read<struct TArray<struct FKtItem>>(m_addr + 96);
	}
	struct TArray<struct FString> GetduplicatedItems() {
		return memory.read<struct TArray<struct FString>>(m_addr + 112);
	}

private:
	std::uint64_t m_addr = 0;
};


class UNXPToy
{
public:
	UNXPToy(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPcVivoxJoinCustomRoom
{
public:
	UPcVivoxJoinCustomRoom(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetvivoxChannelName() {
		return memory.read<struct FString>(m_addr + 48);
	}
	struct FString GetvivoxJoinToken() {
		return memory.read<struct FString>(m_addr + 64);
	}
	struct FString GetvivoxTranscriptionToken() {
		return memory.read<struct FString>(m_addr + 80);
	}

private:
	std::uint64_t m_addr = 0;
};


class ACubeMapViewer
{
public:
	ACubeMapViewer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UMaterialInstanceDynamic GetMatInstanceDynamic() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 544);
		return struct UMaterialInstanceDynamic(ptr_addr);
	}
	struct FName GetCubeParam() {
		return memory.read<struct FName>(m_addr + 552);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULapCompletedWidget
{
public:
	ULapCompletedWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetTotalLapCount() {
		return memory.read<int32_t>(m_addr + 608);
	}
	struct UWidgetSwitcher GetV_WidgetSwitcher_Lab() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct FText GetGoCount2ndText() {
		return memory.read<struct FText>(m_addr + 624);
	}
	struct FText GetGoCountFinalText() {
		return memory.read<struct FText>(m_addr + 648);
	}
	struct UFMODEvent GetLapCountSoundAsset() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UFMODEvent(ptr_addr);
	}
	struct UFMODEvent GetLapFinalSoundAsset() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UFMODEvent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCustomGameLogicComponent
{
public:
	UCustomGameLogicComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UTrackDefEntryObject
{
public:
	UTrackDefEntryObject(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKtClientTrackDef GetTrackDef() {
		return memory.read<struct FKtClientTrackDef>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCustomHUDData
{
public:
	UCustomHUDData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FHUDWidgetCustomData> GetWidgetCustomDataList() {
		return memory.read<struct TArray<struct FHUDWidgetCustomData>>(m_addr + 40);
	}
	struct FVector2D GetDeviceResolution() {
		return memory.read<struct FVector2D>(m_addr + 56);
	}
	enum class EPresetType GetPresetType() {
		return memory.read<enum class EPresetType>(m_addr + 64);
	}
	enum class ECustomHUDDataSlotIndex GetSlotIndex() {
		return memory.read<enum class ECustomHUDDataSlotIndex>(m_addr + 68);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMajorResultDetailTabWidget
{
public:
	UMajorResultDetailTabWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UDetailLevelProgressWidget GetV_PlayerLevelProgress() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UDetailLevelProgressWidget(ptr_addr);
	}
	struct UDetailLevelProgressWidget GetV_KartLevelProgress() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UDetailLevelProgressWidget(ptr_addr);
	}
	struct UDetailLevelProgressWidget GetV_GrandPrixProgress() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UDetailLevelProgressWidget(ptr_addr);
	}
	struct UWidgetSwitcher GetV_ModeInfoSwitcher() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UKdTextBlock GetV_LapTime() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UKdTextBlock GetV_Rank() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UKdTextBlock GetV_Overtake() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UKdTextBlock GetV_Crash() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UKdTextBlock GetV_GetItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UKdTextBlock GetV_AttackSuccess() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UKdTextBlock GetV_DefenceSuccess() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UKdTextBlock GetV_AttackedBy() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UKdTextBlock GetV_Boost() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UKdTextBlock GetV_Drift() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UKdTextBlock GetV_SmallBoost() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UKdTextBlock GetV_Draft() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 728);
		return struct UKdTextBlock(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCustomizableWidget
{
public:
	UCustomizableWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UCanvasPanel GetParentPanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UCanvasPanel(ptr_addr);
	}
	struct UWidgetSwitcher GetV_WidgetSwitcher_Selected() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UWidgetSwitcher GetV_WidgetSwitcher_Drag() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UWidgetAnimation GetAnim_Selected() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UWidgetAnimation(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCustomGameSetting
{
public:
	UCustomGameSetting(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UCsRaceGame
{
public:
	UCsRaceGame(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetTrack() {
		return memory.read<struct FString>(m_addr + 48);
	}
	enum class ERaceType GetraceType() {
		return memory.read<enum class ERaceType>(m_addr + 64);
	}
	int32_t GetteamMemberCount() {
		return memory.read<int32_t>(m_addr + 68);
	}
	int32_t GetteamCount() {
		return memory.read<int32_t>(m_addr + 72);
	}
	int32_t GetLap() {
		return memory.read<int32_t>(m_addr + 76);
	}
	struct FString GetlevelOption() {
		return memory.read<struct FString>(m_addr + 80);
	}

private:
	std::uint64_t m_addr = 0;
};


class UItemSlotComponent
{
public:
	UItemSlotComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct AItem> GetAuthItems() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 272);
		return struct TArray<struct AItem>(ptr_addr);
	}
	struct TArray<struct FItemSlot> GetItems() {
		return memory.read<struct TArray<struct FItemSlot>>(m_addr + 288);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqCreateCustomGame
{
public:
	UPqCreateCustomGame(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject Getsetting() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct UObject(ptr_addr);
	}
	bool GetobserverMode() {
		return memory.read<bool>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqPromoteCustomGameMaster
{
public:
	UPqPromoteCustomGameMaster(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetaccountId() {
		return memory.read<struct FString>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTimeAttackRecorderStart
{
public:
	UTimeAttackRecorderStart(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPqSwapCustomGameMemberSlot
{
public:
	UPqSwapCustomGameMemberSlot(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t Getslot1() {
		return memory.read<int32_t>(m_addr + 56);
	}
	int32_t Getslot2() {
		return memory.read<int32_t>(m_addr + 60);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqKickCustomGameMember
{
public:
	UPqKickCustomGameMember(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetSlot() {
		return memory.read<int32_t>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMajorGameLoadingWidget
{
public:
	UMajorGameLoadingWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UWidgetSwitcher GetSwitcher_Top() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct ULoadingGameInformationWidget GetLoadingGameInformation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct ULoadingGameInformationWidget(ptr_addr);
	}
	struct ULoadingAdvertisingWidget GetLoadingAdvertising() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct ULoadingAdvertisingWidget(ptr_addr);
	}
	struct UOverlay GetOverlay_Bottom() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UOverlay(ptr_addr);
	}
	struct UHorizontalBox GetHB_Tips() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UHorizontalBox(ptr_addr);
	}
	struct UProgressBar GetLoadingProgressBar() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct UProgressBar(ptr_addr);
	}
	struct UProgressBar GetLoadingProgressBarRightDeco() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return struct UProgressBar(ptr_addr);
	}
	struct USpacer GetLeftIndentSpace() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 728);
		return struct USpacer(ptr_addr);
	}
	struct USpacer GetRightIndentSpace() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 736);
		return struct USpacer(ptr_addr);
	}
	struct UUserWidget GetCrossPlayToast() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 744);
		return struct UUserWidget(ptr_addr);
	}
	struct ULoadingPresetWidget GetPresetWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 752);
		return struct ULoadingPresetWidget(ptr_addr);
	}
	enum class ERaceMode GetGameType() {
		return memory.read<enum class ERaceMode>(m_addr + 760);
	}
	struct TMap<enum class ERaceMode, ULoadingPresetWidget> GetPlayersWidgetContainer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 768);
		return struct TMap<enum class ERaceMode, ULoadingPresetWidget>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULobbyLogicComponent
{
public:
	ULobbyLogicComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct UKeyIconWidget> GetKeyIconBlackList() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 248);
		return struct TArray<struct UKeyIconWidget>(ptr_addr);
	}
	struct UModeSelectSaveGame GetModeSelectSaveGame() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1256);
		return struct UModeSelectSaveGame(ptr_addr);
	}
	struct ULicenseNoticeSaveGame GetLicenseNoticeSaveGame() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1320);
		return struct ULicenseNoticeSaveGame(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqAddCustomGameAiMember
{
public:
	UPqAddCustomGameAiMember(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetSlot() {
		return memory.read<int32_t>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPcInviteCustomGame
{
public:
	UPcInviteCustomGame(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKtAccountProfile GetInviter() {
		return memory.read<struct FKtAccountProfile>(m_addr + 48);
	}
	struct FString GetInviterAccountId() {
		return memory.read<struct FString>(m_addr + 144);
	}
	struct FString GetSessionId() {
		return memory.read<struct FString>(m_addr + 160);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqCustomGameMessage
{
public:
	UPqCustomGameMessage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetMessage() {
		return memory.read<struct FString>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UModeSelectTravelData
{
public:
	UModeSelectTravelData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPqPlayCustomGame
{
public:
	UPqPlayCustomGame(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GethostMode() {
		return memory.read<bool>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class ASceneCaptureActor
{
public:
	ASceneCaptureActor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTextureRenderTarget2D GetRenderTarget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 544);
		return struct UTextureRenderTarget2D(ptr_addr);
	}
	struct USceneCaptureComponent2D GetSceneCaptureComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 552);
		return struct USceneCaptureComponent2D(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULODPerformanceTestWidget
{
public:
	ULODPerformanceTestWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<struct USkeletalMesh, struct UCharacterMontageAsset*> GetCharacterMontageMap() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct TMap<struct USkeletalMesh, struct UCharacterMontageAsset*>(ptr_addr);
	}
	struct UComboBoxStringExpand GetAnimComboBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UComboBoxStringExpand(ptr_addr);
	}
	struct TArray<struct ASkeletalMeshActor> GetSkeletalMeshActorList() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct TArray<struct ASkeletalMeshActor>(ptr_addr);
	}
	bool GetbPlayAnimation() {
		return memory.read<bool>(m_addr + 712);
	}
	enum class ECharacterMontage GetSelectedMontage() {
		return memory.read<enum class ECharacterMontage>(m_addr + 713);
	}
	struct TMap<struct FString, enum class ECharacterMontage> GetMontageListMap() {
		return memory.read<struct TMap<struct FString, enum class ECharacterMontage>>(m_addr + 720);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPcCustomGamePrepareSession
{
public:
	UPcCustomGamePrepareSession(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FCsSessionPreparationInfo GetInfo() {
		return memory.read<struct FCsSessionPreparationInfo>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqChangeCustomGameSetting
{
public:
	UPqChangeCustomGameSetting(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject Getsetting() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct UObject(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicenseDriftTutorialComponent
{
public:
	ULicenseDriftTutorialComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ULicenseDriftTutorialData GetData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 176);
		return struct ULicenseDriftTutorialData(ptr_addr);
	}
	struct APlayerController GetPlayerController() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 184);
		return struct APlayerController(ptr_addr);
	}
	struct AKdPawn GetPawn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 192);
		return struct AKdPawn(ptr_addr);
	}
	struct UKartMovementComponent GetMovement() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 200);
		return struct UKartMovementComponent(ptr_addr);
	}
	struct ULicenseDriftMissionWidget GetMissionWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 208);
		return struct ULicenseDriftMissionWidget(ptr_addr);
	}
	struct ULicenseStartTitleWidget GetTitleWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 216);
		return struct ULicenseStartTitleWidget(ptr_addr);
	}
	struct ALicenseNextChapterZone GetNextChapterZone() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 224);
		return struct ALicenseNextChapterZone(ptr_addr);
	}
	struct TSoftObjectPtr<UCurveFloat> GetTeleportStartWeightCurve() {
		return memory.read<struct TSoftObjectPtr<UCurveFloat>>(m_addr + 232);
	}
	struct TSoftObjectPtr<UCurveFloat> GetTeleportStartCycleCurve() {
		return memory.read<struct TSoftObjectPtr<UCurveFloat>>(m_addr + 272);
	}
	struct TSoftObjectPtr<UCurveFloat> GetTeleportEndWeightCurve() {
		return memory.read<struct TSoftObjectPtr<UCurveFloat>>(m_addr + 312);
	}
	struct TSoftObjectPtr<UCurveFloat> GetTeleportEndCycleCurve() {
		return memory.read<struct TSoftObjectPtr<UCurveFloat>>(m_addr + 352);
	}
	struct TSoftObjectPtr<UParticleSystem> GetTeleportParticleClass() {
		return memory.read<struct TSoftObjectPtr<UParticleSystem>>(m_addr + 392);
	}
	struct UParticleSystemComponent GetTeleportParticle() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 432);
		return struct UParticleSystemComponent(ptr_addr);
	}
	struct UFMODEvent GetTeleportInSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 440);
		return struct UFMODEvent(ptr_addr);
	}
	struct UFMODEvent GetTeleportOutSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 448);
		return struct UFMODEvent(ptr_addr);
	}
	struct UFMODEvent GetWarpZoneSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 456);
		return struct UFMODEvent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPcCustomGameCheckAlive
{
public:
	UPcCustomGameCheckAlive(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GettimeLimitSec() {
		return memory.read<int32_t>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMinimapWidget
{
public:
	UMinimapWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UImage GetMapImg() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UImage(ptr_addr);
	}
	struct UImage GetArrowImg() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UImage(ptr_addr);
	}
	struct UPanelWidget GetDotPanelWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UPanelWidget(ptr_addr);
	}
	struct UImage GetBirdViewMinimapImg() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UImage(ptr_addr);
	}
	struct UWidgetAnimation GetAnim_Intro() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct AMinimapActor GetMinimap() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct AMinimapActor(ptr_addr);
	}
	struct UCameraComponent GetKdPawnCameraComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UCameraComponent(ptr_addr);
	}
	struct TArray<struct TSoftObjectPtr<UTexture2D>> GetPlayerArrows() {
		return memory.read<struct TArray<struct TSoftObjectPtr<UTexture2D>>>(m_addr + 664);
	}
	struct TArray<struct AKdPawn> GetPawnList() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct TArray<struct AKdPawn>(ptr_addr);
	}
	int32_t GetInitialUserCount() {
		return memory.read<int32_t>(m_addr + 696);
	}
	struct APawn GetPossessedPawn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct APawn(ptr_addr);
	}
	int32_t GetPossessedPawnTeamIndex() {
		return memory.read<int32_t>(m_addr + 712);
	}
	struct TArray<struct FName> GetDotIdxMapNameList() {
		return memory.read<struct TArray<struct FName>>(m_addr + 848);
	}
	struct TArray<struct FName> GetDotPosMapNameList() {
		return memory.read<struct TArray<struct FName>>(m_addr + 864);
	}
	struct TMap<struct FName, float> GetDotIdxMap() {
		return memory.read<struct TMap<struct FName, float>>(m_addr + 880);
	}
	struct TMap<struct FName, struct FVector> GetDotPosMap() {
		return memory.read<struct TMap<struct FName, struct FVector>>(m_addr + 960);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicenseSelectMissionClearRewardInfo_ItemWidget
{
public:
	ULicenseSelectMissionClearRewardInfo_ItemWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetInst_StarCount() {
		return memory.read<int32_t>(m_addr + 608);
	}
	struct UWidgetSwitcher GetV_WS_StarCount() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UWidgetSwitcher(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UStrokeEscapeWidget
{
public:
	UStrokeEscapeWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UWidgetSwitcher GetV_PlatformSwitcher() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UKdButtonImage GetV_XboxKeyImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UKdButtonImage(ptr_addr);
	}
	struct UKdButtonImage GetV_PSKeyImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UKdButtonImage(ptr_addr);
	}
	struct UKeyTextureMap2 GetKey_Keyboard() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UKeyTextureMap2(ptr_addr);
	}
	struct UKeyTextureMap2 GetKey_XBOX() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UKeyTextureMap2(ptr_addr);
	}
	struct UKeyTextureMap2 GetKey_DualShock() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UKeyTextureMap2(ptr_addr);
	}
	struct UWidgetSwitcher GetV_LeftSwitcher() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UKdButtonImage GetV_LeftKeyBG() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UKdButtonImage(ptr_addr);
	}
	struct UKdTextBlock GetV_LeftKeyText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UKdButtonImage GetV_LeftKeyImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UKdButtonImage(ptr_addr);
	}
	struct UWidgetSwitcher GetV_RightSwitcher() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UKdButtonImage GetV_RightKeyBG() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UKdButtonImage(ptr_addr);
	}
	struct UKdTextBlock GetV_RightKeyText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UKdButtonImage GetV_RightKeyImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct UKdButtonImage(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UDqDediNxLogInMatchEnd
{
public:
	UDqDediNxLogInMatchEnd(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetMatchID() {
		return memory.read<struct FString>(m_addr + 152);
	}
	struct FString Getmatchtype() {
		return memory.read<struct FString>(m_addr + 168);
	}
	int32_t Getrecord() {
		return memory.read<int32_t>(m_addr + 184);
	}
	int32_t GetSequenceID() {
		return memory.read<int32_t>(m_addr + 188);
	}
	int32_t Getuserlevel() {
		return memory.read<int32_t>(m_addr + 192);
	}
	int32_t Getuserlevel2() {
		return memory.read<int32_t>(m_addr + 196);
	}
	bool GetusePremiumPass() {
		return memory.read<bool>(m_addr + 200);
	}
	struct FString Getusernickname() {
		return memory.read<struct FString>(m_addr + 208);
	}
	struct FString GetgrandPrixId() {
		return memory.read<struct FString>(m_addr + 224);
	}
	enum class EKtItemGrade GetKartGrade() {
		return memory.read<enum class EKtItemGrade>(m_addr + 240);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMajorResultProgressWidget
{
public:
	UMajorResultProgressWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UImage GetImage_PrevProgressGauge() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UImage(ptr_addr);
	}
	struct UImage GetImage_GainedProgressGauge() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UImage(ptr_addr);
	}
	struct UImage GetImage_CompleteProgressGauge() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UImage(ptr_addr);
	}
	struct UTextBlock GetText_CurrentValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock GetText_MaxValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UTextBlock(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqCustomGameAlive
{
public:
	UPqCustomGameAlive(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t Getcheck() {
		return memory.read<int32_t>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UHostGameCreated
{
public:
	UHostGameCreated(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GethostUrl() {
		return memory.read<struct FString>(m_addr + 48);
	}
	struct FString GethostPlayerId() {
		return memory.read<struct FString>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};


class AMajorResultWidgetComponentTestPC
{
public:
	AMajorResultWidgetComponentTestPC(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UHostGameCloseRace
{
public:
	UHostGameCloseRace(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrShopChargeUrlKrPc
{
public:
	UPrShopChargeUrlKrPc(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetURL() {
		return memory.read<struct FString>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULoadingGameInformationWidget
{
public:
	ULoadingGameInformationWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTextBlock GetTextBlock_GameType() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock GetTextBlock_ModeType() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock GetTextBlock_TeamType() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock GetTextBlock_TrackName() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UTextBlock(ptr_addr);
	}
	struct UImage GetImage_Track() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UImage(ptr_addr);
	}
	struct UTrackDifficultWidget GetTrackDifficult() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UTrackDifficultWidget(ptr_addr);
	}
	struct UModeVictoryGuideWidget GetBP_CommonPopupGuide() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UModeVictoryGuideWidget(ptr_addr);
	}
	enum class ERaceMode GetraceMode() {
		return memory.read<enum class ERaceMode>(m_addr + 664);
	}
	struct TMap<enum class ERaceMode, struct FText> GetRaceModeTextContainer() {
		return memory.read<struct TMap<enum class ERaceMode, struct FText>>(m_addr + 672);
	}
	struct TMap<enum class ERaceMode, struct FText> GetRaceTypeTextContainer() {
		return memory.read<struct TMap<enum class ERaceMode, struct FText>>(m_addr + 752);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqCustomGameSetGameData
{
public:
	UPqCustomGameSetGameData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FCsGameData GetgameData() {
		return memory.read<struct FCsGameData>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKdTextBlock
{
public:
	UKdTextBlock(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FButtonStyleTag GetTextStyleTag() {
		return memory.read<struct FButtonStyleTag>(m_addr + 1664);
	}
	struct UDataTable GetTextSetTable() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1720);
		return struct UDataTable(ptr_addr);
	}
	struct FTextScrollInfo GetTextScrollInfo() {
		return memory.read<struct FTextScrollInfo>(m_addr + 1728);
	}
	struct FAutoFillInsideInfo GetAutoFillInsideInfo() {
		return memory.read<struct FAutoFillInsideInfo>(m_addr + 1752);
	}
	struct TMap<struct FName, struct FTextBlockStyle> GetTextBlockStyleMap() {
		return memory.read<struct TMap<struct FName, struct FTextBlockStyle>>(m_addr + 1776);
	}
	struct FString GetStringTableAtlasKey() {
		return memory.read<struct FString>(m_addr + 1856);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicenseDriftMissionListEntryData
{
public:
	ULicenseDriftMissionListEntryData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLicenseDriftTutorialMission GetData() {
		return memory.read<struct FLicenseDriftTutorialMission>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};


class UDashboardWidget
{
public:
	UDashboardWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UKdTextBlock GetV_ModeText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UKdTextBlock GetV_ModeTextWithIcon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UWidgetSwitcher GetV_TitleWS() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UWidgetSwitcher GetV_TitleBackWS() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UWidgetSwitcher GetV_ModeIconWS() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UImage GetV_Thumbnail() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UImage(ptr_addr);
	}
	struct UImage GetV_TrackMapImg() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UImage(ptr_addr);
	}
	struct UKdTextBlock GetV_TrackText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UHorizontalBox GetV_DifficultStarPanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct UHorizontalBox(ptr_addr);
	}
	struct UKdTextBlock GetV_ModeGuideText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UWidgetAnimation GetV_IntrotAnim() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 728);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation GetV_IntrotAnim_Guide() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 736);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation GetV_ExitAnim() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 744);
		return struct UWidgetAnimation(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPersonalResultWidget
{
public:
	UPersonalResultWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UDataAssetManager
{
public:
	UDataAssetManager(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<enum class EDataAssetType, struct UDataAsset> GetDataAssetMap() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct TMap<enum class EDataAssetType, struct UDataAsset>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ADedicatedLobbyGameSession
{
public:
	ADedicatedLobbyGameSession(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UM_EventChallengePageWidget
{
public:
	UM_EventChallengePageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ADedicatedLobbyGameState
{
public:
	ADedicatedLobbyGameState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UKtRaceSettings GetRaceSettings() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct UKtRaceSettings(ptr_addr);
	}
	struct UKtRaceDetails GetRaceDetails() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return struct UKtRaceDetails(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ADedicatedLobbyPlayerState
{
public:
	ADedicatedLobbyPlayerState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDedicatedLobbyPlayerDesc GetPlayerDesc() {
		return memory.read<struct FDedicatedLobbyPlayerDesc>(m_addr + 816);
	}
	bool GetbReceivedRaceDesc() {
		return memory.read<bool>(m_addr + 1104);
	}
	bool GetbRoomLeader() {
		return memory.read<bool>(m_addr + 1105);
	}
	int32_t GetIndex() {
		return memory.read<int32_t>(m_addr + 1108);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKtSessionRequestBody
{
public:
	UKtSessionRequestBody(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetgameId() {
		return memory.read<struct FString>(m_addr + 48);
	}
	bool GetterminateServerAfterGame() {
		return memory.read<bool>(m_addr + 64);
	}
	struct FString GetlogUploadUrl() {
		return memory.read<struct FString>(m_addr + 72);
	}
	struct FString GetgameLogUploadUrl() {
		return memory.read<struct FString>(m_addr + 88);
	}
	struct FString GetdevConfigParam() {
		return memory.read<struct FString>(m_addr + 104);
	}
	struct FString GetadditionalOptions() {
		return memory.read<struct FString>(m_addr + 120);
	}

private:
	std::uint64_t m_addr = 0;
};


class UDedicatedLobbySubsystem
{
public:
	UDedicatedLobbySubsystem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UKtRaceSettings GetRaceSettings() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 144);
		return struct UKtRaceSettings(ptr_addr);
	}
	struct UKtRaceDetails GetRaceDetails() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 152);
		return struct UKtRaceDetails(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UFreeRaceConnectRuleComponent
{
public:
	UFreeRaceConnectRuleComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct APlayerStart> GetStartSpotContainer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 200);
		return struct TArray<struct APlayerStart>(ptr_addr);
	}
	struct TMap<struct FString, struct APawn> GetPawnContainer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 216);
		return struct TMap<struct FString, struct APawn>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UDedicatedLobbyWidget
{
public:
	UDedicatedLobbyWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UControlPawnEquipWidget GetControlPawnWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UControlPawnEquipWidget(ptr_addr);
	}
	struct UControlTrackWidget GetControlTrackWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UControlTrackWidget(ptr_addr);
	}
	struct UTextBlock GetText_PlayerNum() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UTextBlock(ptr_addr);
	}
	struct UScrollBox GetScrollBox_Log() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UScrollBox(ptr_addr);
	}
	struct UScrollBox GetScrollBox_Chat() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UScrollBox(ptr_addr);
	}
	struct UButton GetButton_Journey() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UButton(ptr_addr);
	}
	struct UButton GetButton_ChangeItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UButton(ptr_addr);
	}
	struct UEditableText GetEditableText_Chat() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct UEditableText(ptr_addr);
	}
	struct UOverlay GetOverlay_Journey() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return struct UOverlay(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UDelegateBarrierMany
{
public:
	UDelegateBarrierMany(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<int32_t, struct UDelegateBarrier> GetPendingBarriers() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct TMap<int32_t, struct UDelegateBarrier>(ptr_addr);
	}
	struct UDelegateBarrier GetBarrierUnderConstruction() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 120);
		return struct UDelegateBarrier(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UDetailViewPopup
{
public:
	UDetailViewPopup(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetPitchMin() {
		return memory.read<float>(m_addr + 904);
	}
	float GetPitchMax() {
		return memory.read<float>(m_addr + 908);
	}
	float GetYawMin() {
		return memory.read<float>(m_addr + 912);
	}
	float GetYawMax() {
		return memory.read<float>(m_addr + 916);
	}
	float GetRollMin() {
		return memory.read<float>(m_addr + 920);
	}
	float GetRollMax() {
		return memory.read<float>(m_addr + 924);
	}
	float GetBaseTurnRate() {
		return memory.read<float>(m_addr + 928);
	}
	float GetBaseLookUpRate() {
		return memory.read<float>(m_addr + 932);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAddLapWidget
{
public:
	UAddLapWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftClassPtr<UObject> GetLapWidgetClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UDevCheatWidget
{
public:
	UDevCheatWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UControlPawnEquipWidget GetControlPawnEquipWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UControlPawnEquipWidget(ptr_addr);
	}
	struct UControlPawnFXWidget GetControlPawnFXWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UControlPawnFXWidget(ptr_addr);
	}
	struct UControlDirectingWidget GetControlDirectingWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UControlDirectingWidget(ptr_addr);
	}
	struct UControlTrackWidget GetControlTrackWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UControlTrackWidget(ptr_addr);
	}
	struct UButton GetButton_Travel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UButton(ptr_addr);
	}
	struct UButton GetButton_Travel2() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UButton(ptr_addr);
	}
	struct UButton GetButton_SfxOn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UButton(ptr_addr);
	}
	struct UButton GetButton_SfxOff() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UButton(ptr_addr);
	}
	struct UButton GetButton_BgmOn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UButton(ptr_addr);
	}
	struct UButton GetButton_BgmOff() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UButton(ptr_addr);
	}
	struct UButton GetButton_KartOn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UButton(ptr_addr);
	}
	struct UButton GetButton_KartOff() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UButton(ptr_addr);
	}
	struct UButton GetButton_NXBuildCaptureOn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct UButton(ptr_addr);
	}
	struct UButton GetButton_NXBuildCaptureOff() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return struct UButton(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAttendanceEventObject
{
public:
	UAttendanceEventObject(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UDevResolutionWidget
{
public:
	UDevResolutionWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UComboBoxStringExpand GetV_LaptopComboBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UComboBoxStringExpand(ptr_addr);
	}
	struct UComboBoxStringExpand GetV_MonitorComboBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UComboBoxStringExpand(ptr_addr);
	}
	struct UComboBoxStringExpand GetV_PhoneComboBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UComboBoxStringExpand(ptr_addr);
	}
	struct UComboBoxStringExpand GetV_TabletComboBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UComboBoxStringExpand(ptr_addr);
	}
	struct UComboBoxStringExpand GetV_TelevisionComboBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UComboBoxStringExpand(ptr_addr);
	}
	struct UCheckBox GetV_InvertCheckBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UCheckBox(ptr_addr);
	}
	struct UEditableTextBox GetV_WidthText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UEditableTextBox(ptr_addr);
	}
	struct UEditableTextBox GetV_HeightText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UEditableTextBox(ptr_addr);
	}
	struct UButton GetV_ApplyButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UButton(ptr_addr);
	}
	struct UButton GetV_MinimizeButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UButton(ptr_addr);
	}
	struct UButton GetV_CloseButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UButton(ptr_addr);
	}
	struct UImage GetV_Background() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UImage(ptr_addr);
	}
	struct UVerticalBox GetV_MainVerticalBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UVerticalBox(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class USubDialogTemplate
{
public:
	USubDialogTemplate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UWidgetAnimation GetAnim_Open() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation GetAnim_Close() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UWidgetAnimation(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UDragForceBuff
{
public:
	UDragForceBuff(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetInvokingZone() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct AActor(ptr_addr);
	}
	struct AActor GetTargetPawn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UDriftGaugeInterface
{
public:
	UDriftGaugeInterface(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UWidgetAnimationGraph
{
public:
	UWidgetAnimationGraph(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UDriftGaugeSingleWidget
{
public:
	UDriftGaugeSingleWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UImage GetSingleGaugeImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UImage(ptr_addr);
	}
	struct UMaterialInstanceDynamic GetSingleGaugeMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UMaterialInstanceDynamic(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class AItemFeedSceneCaptureActor
{
public:
	AItemFeedSceneCaptureActor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UDriveCameraComponent
{
public:
	UDriveCameraComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UMaterialInstance GetBlurMaterialInstance() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2160);
		return struct UMaterialInstance(ptr_addr);
	}
	struct FPostProcessSettings GetOriginPostProcessSettings() {
		return memory.read<struct FPostProcessSettings>(m_addr + 2176);
	}
	float GetBlendTime() {
		return memory.read<float>(m_addr + 3664);
	}
	bool GetForceCalcViewTarget() {
		return memory.read<bool>(m_addr + 3668);
	}
	float GetNormalFov() {
		return memory.read<float>(m_addr + 4076);
	}
	float GetNormalFovChangeFactor() {
		return memory.read<float>(m_addr + 4080);
	}
	float GetBoostFov() {
		return memory.read<float>(m_addr + 4084);
	}
	float GetBoostFovChangeFactor() {
		return memory.read<float>(m_addr + 4088);
	}
	float GetMomentBoostFov() {
		return memory.read<float>(m_addr + 4092);
	}
	float GetMomentBoostFovChangeFactor() {
		return memory.read<float>(m_addr + 4096);
	}
	float GetZoneBoostFov() {
		return memory.read<float>(m_addr + 4100);
	}
	float GetZoneBoostFovChangeFactor() {
		return memory.read<float>(m_addr + 4104);
	}
	float GetRailAndBoostFov() {
		return memory.read<float>(m_addr + 4108);
	}
	float GetRailAndBoostFovChangeFactor() {
		return memory.read<float>(m_addr + 4112);
	}
	float GetMomentBoostFovSpeedMultiplier() {
		return memory.read<float>(m_addr + 4116);
	}
	float GetMinCameraPitchRadians() {
		return memory.read<float>(m_addr + 4120);
	}
	float GetCameraPitchSpeedCoefficient() {
		return memory.read<float>(m_addr + 4124);
	}
	float GetAdditionalZ() {
		return memory.read<float>(m_addr + 4128);
	}
	float GetUpDownFactor() {
		return memory.read<float>(m_addr + 4132);
	}
	float GetZLagSpeed() {
		return memory.read<float>(m_addr + 4136);
	}
	bool GetbDebug() {
		return memory.read<bool>(m_addr + 4140);
	}
	float GetArmSpeedForwardCoefficient() {
		return memory.read<float>(m_addr + 4144);
	}
	float GetArmSpeedBackwardCoefficient() {
		return memory.read<float>(m_addr + 4148);
	}
	float GetDistanceCoefficient() {
		return memory.read<float>(m_addr + 4152);
	}
	float GetMinLength() {
		return memory.read<float>(m_addr + 4156);
	}
	float GetMaxLength() {
		return memory.read<float>(m_addr + 4160);
	}
	float GetMinHeight() {
		return memory.read<float>(m_addr + 4164);
	}
	float GetMaxHeight() {
		return memory.read<float>(m_addr + 4168);
	}
	float GetHeightCoefficient() {
		return memory.read<float>(m_addr + 4172);
	}
	float GetCameraLagSpeed() {
		return memory.read<float>(m_addr + 4176);
	}
	float GetDropFactor() {
		return memory.read<float>(m_addr + 4180);
	}
	float GetRefreshRate() {
		return memory.read<float>(m_addr + 4184);
	}
	float GetCameraRotationLagSpeed() {
		return memory.read<float>(m_addr + 4188);
	}
	struct FRotator GetRotatorForEditorView() {
		return memory.read<struct FRotator>(m_addr + 4192);
	}
	struct AActor GetCameraTarget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 4336);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UDriveVisualizer
{
public:
	UDriveVisualizer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AKdGameSession
{
public:
	AKdGameSession(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UDynamicComponentInterface
{
public:
	UDynamicComponentInterface(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPcMailReadMarker
{
public:
	UPcMailReadMarker(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FString> GetmailIds() {
		return memory.read<struct TArray<struct FString>>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};


class UForceFeedbackCrashLevelDataAsset
{
public:
	UForceFeedbackCrashLevelDataAsset(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<float> GetHitImpulse() {
		return memory.read<struct TArray<float>>(m_addr + 48);
	}
	struct TArray<float> GetHitImpulse_Surface() {
		return memory.read<struct TArray<float>>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTMIRecordPawnEventComponent
{
public:
	UTMIRecordPawnEventComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetOwnerUniqueIdentifier() {
		return memory.read<struct FString>(m_addr + 176);
	}
	struct FReplicatedKartState GetKartState() {
		return memory.read<struct FReplicatedKartState>(m_addr + 192);
	}
	struct UTMIOvertakeEventProducer GetOvertakeEventProducer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 208);
		return struct UTMIOvertakeEventProducer(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UEmoticonLogicComponent
{
public:
	UEmoticonLogicComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AEnvironmentPoint
{
public:
	AEnvironmentPoint(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UEventChallengeLogicComponent
{
public:
	UEventChallengeLogicComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UShowTimeAttackResult
{
public:
	UShowTimeAttackResult(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftClassPtr<UObject> GetTimeAttackResultWidgetClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqDeleteMail
{
public:
	UPqDeleteMail(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetmailId() {
		return memory.read<struct FString>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UEventLogicComponent
{
public:
	UEventLogicComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UEventSaveGame GetSaveGame() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 240);
		return struct UEventSaveGame(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UItemFeedWidget
{
public:
	UItemFeedWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UImage GetV_SceneImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UImage(ptr_addr);
	}
	struct UOverlay GetV_ItemFeedOverlay() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UOverlay(ptr_addr);
	}
	struct UWidgetAnimation GetDefaultAppearingAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation GetDefaultDisappearingAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UWidgetAnimation(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicenseSpeedInterface
{
public:
	ULicenseSpeedInterface(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UNotifiedItemSpawn
{
public:
	UNotifiedItemSpawn(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<float> GetDistance() {
		return memory.read<struct TArray<float>>(m_addr + 112);
	}
	float GetDistanceFromCubeSpawnLine() {
		return memory.read<float>(m_addr + 128);
	}
	float GetDistanceFromItemCube() {
		return memory.read<float>(m_addr + 132);
	}
	float GetDistanceFromNotifier() {
		return memory.read<float>(m_addr + 136);
	}
	float GetDistanceFromAttack() {
		return memory.read<float>(m_addr + 140);
	}
	int32_t GetIndex() {
		return memory.read<int32_t>(m_addr + 144);
	}
	struct TArray<enum class EItemType> GetRandomType() {
		return memory.read<struct TArray<enum class EItemType>>(m_addr + 152);
	}
	struct TArray<enum class EItemType> GetTempRandomType() {
		return memory.read<struct TArray<enum class EItemType>>(m_addr + 168);
	}
	bool GetbNeedNotify() {
		return memory.read<bool>(m_addr + 184);
	}
	struct AActor GetNotifier() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 192);
		return struct AActor(ptr_addr);
	}
	struct TArray<enum class EItemType> GetItemTypeList() {
		return memory.read<struct TArray<enum class EItemType>>(m_addr + 200);
	}
	int32_t GetCubeCount() {
		return memory.read<int32_t>(m_addr + 216);
	}
	struct TSoftClassPtr<UObject> GetNotifierClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 224);
	}
	struct TSoftObjectPtr<UTexture2D> GetDiffuseTextureObject1() {
		return memory.read<struct TSoftObjectPtr<UTexture2D>>(m_addr + 264);
	}
	struct TSoftObjectPtr<UTexture2D> GetDiffuseTextureObject2() {
		return memory.read<struct TSoftObjectPtr<UTexture2D>>(m_addr + 304);
	}
	struct TSoftObjectPtr<UTexture2D> GetDiffuseTextureObject3() {
		return memory.read<struct TSoftObjectPtr<UTexture2D>>(m_addr + 344);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKeyTextureMap2
{
public:
	UKeyTextureMap2(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<struct FKey, struct FKeyTexture2> GetKeyTextureMap() {
		return memory.read<struct TMap<struct FKey, struct FKeyTexture2>>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};


class UEventInfoItemDefEntryObject
{
public:
	UEventInfoItemDefEntryObject(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FEventData GetEventData() {
		return memory.read<struct FEventData>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};


class UADTEventObject
{
public:
	UADTEventObject(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UFlatReaction
{
public:
	UFlatReaction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftObjectPtr<UFMODEvent> GetFlatSoundAsset() {
		return memory.read<struct TSoftObjectPtr<UFMODEvent>>(m_addr + 528);
	}
	struct TSoftObjectPtr<UCurveFloat> GetScaleCurveObj() {
		return memory.read<struct TSoftObjectPtr<UCurveFloat>>(m_addr + 568);
	}
	float GetReactionTime() {
		return memory.read<float>(m_addr + 612);
	}

private:
	std::uint64_t m_addr = 0;
};


class UFocusInterface
{
public:
	UFocusInterface(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UKdServerLoginTaskPSN
{
public:
	UKdServerLoginTaskPSN(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UFollowTGMoveComponent
{
public:
	UFollowTGMoveComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UKartMovementComponent GetMovement() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 184);
		return struct UKartMovementComponent(ptr_addr);
	}
	struct UItemComponent GetItemComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 192);
		return struct UItemComponent(ptr_addr);
	}
	struct UAIManageComponent GetManageComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 304);
		return struct UAIManageComponent(ptr_addr);
	}
	int32_t GetSplineIndex() {
		return memory.read<int32_t>(m_addr + 312);
	}
	bool GetbUseSubPath() {
		return memory.read<bool>(m_addr + 316);
	}
	float GetLastPathChangeTime() {
		return memory.read<float>(m_addr + 320);
	}
	float GetLastKartCrashTime() {
		return memory.read<float>(m_addr + 324);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPawnStateComponent
{
public:
	UPawnStateComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetUniqueIdentifier() {
		return memory.read<struct FString>(m_addr + 232);
	}
	int32_t GetSlotNumber() {
		return memory.read<int32_t>(m_addr + 248);
	}
	int32_t GetTeamIndex() {
		return memory.read<int32_t>(m_addr + 252);
	}
	struct FRacePlayerEquipDesc GetEquipDesc() {
		return memory.read<struct FRacePlayerEquipDesc>(m_addr + 256);
	}
	struct FKtAccountProfile GetProfile() {
		return memory.read<struct FKtAccountProfile>(m_addr + 560);
	}
	struct FKdLevelExpProp GetkartExp() {
		return memory.read<struct FKdLevelExpProp>(m_addr + 656);
	}
	struct FKdLevelExpProp GetPlayerExp() {
		return memory.read<struct FKdLevelExpProp>(m_addr + 664);
	}
	bool GetbUseBeginnerCare() {
		return memory.read<bool>(m_addr + 672);
	}
	bool GetbIsAiPlayer() {
		return memory.read<bool>(m_addr + 673);
	}
	enum class EKtRaceAiType GetaiType() {
		return memory.read<enum class EKtRaceAiType>(m_addr + 674);
	}
	enum class EConnectionStatus GetConnectionStatus() {
		return memory.read<enum class EConnectionStatus>(m_addr + 680);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCreateLicenseOverlay
{
public:
	UCreateLicenseOverlay(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftClassPtr<UObject> GetLicenseOverlayClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 72);
	}
	struct UUserWidget GetLicenseOverlay() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 112);
		return struct UUserWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKartForceFeedbackTable
{
public:
	UKartForceFeedbackTable(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<struct FName, struct FKartForceFeedbackTableRow> GetForceFeedbackData() {
		return memory.read<struct TMap<struct FName, struct FKartForceFeedbackTableRow>>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqShopKoinProductList
{
public:
	UPqShopKoinProductList(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AFreeRaceGameSession
{
public:
	AFreeRaceGameSession(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<struct FString, struct UKdGameSessionPlayer> Getplayers() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 576);
		return struct TMap<struct FString, struct UKdGameSessionPlayer>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKdGameSessionInfoStore
{
public:
	UKdGameSessionInfoStore(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AFreeRaceGameState
{
public:
	AFreeRaceGameState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UFreeRacePhaseComponent
{
public:
	UFreeRacePhaseComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UTMIMulticastHelperComponent
{
public:
	UTMIMulticastHelperComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULicenseDriftMissionInterface
{
public:
	ULicenseDriftMissionInterface(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UTeamColorDataAsset
{
public:
	UTeamColorDataAsset(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FTeamColor> GetTeamColorInfo() {
		return memory.read<struct TArray<struct FTeamColor>>(m_addr + 48);
	}
	struct FTeamColor GetIndividualMyColor() {
		return memory.read<struct FTeamColor>(m_addr + 64);
	}
	struct FTeamColor GetIndividualOthersColor() {
		return memory.read<struct FTeamColor>(m_addr + 112);
	}

private:
	std::uint64_t m_addr = 0;
};


class UFuncLib_Blueprint
{
public:
	UFuncLib_Blueprint(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UKartNavMoveComponent
{
public:
	UKartNavMoveComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UKartMovementComponent GetMovement() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 192);
		return struct UKartMovementComponent(ptr_addr);
	}
	struct UItemComponent GetItemComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 200);
		return struct UItemComponent(ptr_addr);
	}
	struct USplineComponent GetSplineGuide() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 208);
		return struct USplineComponent(ptr_addr);
	}
	struct TArray<struct USplineComponent> GetSplineList() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 216);
		return struct TArray<struct USplineComponent>(ptr_addr);
	}
	struct TArray<struct USplineComponent> GetSpline_SubPath() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 232);
		return struct TArray<struct USplineComponent>(ptr_addr);
	}
	struct TMap<struct FString, struct USplineComponent> GetShortCutSplineGuide() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 248);
		return struct TMap<struct FString, struct USplineComponent>(ptr_addr);
	}
	struct USplineComponent GetCurrentShortCut() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 328);
		return struct USplineComponent(ptr_addr);
	}
	struct USplineComponent GetDriftSpline() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 432);
		return struct USplineComponent(ptr_addr);
	}
	struct FVector GetRailEndDirection() {
		return memory.read<struct FVector>(m_addr + 448);
	}

private:
	std::uint64_t m_addr = 0;
};


class UScenarioSequenceComponent
{
public:
	UScenarioSequenceComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct ALevelSequenceActor> GetPlayingSequenceContainer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 200);
		return struct TArray<struct ALevelSequenceActor>(ptr_addr);
	}
	struct TSoftClassPtr<UObject> GetSkipWidgetClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 216);
	}
	struct UUserWidget GetSkipWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 256);
		return struct UUserWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UFuncLib_Widget
{
public:
	UFuncLib_Widget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UModeVictoryGuideWidget
{
public:
	UModeVictoryGuideWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UKdTextBlock GetV_GuideDescText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UWidgetAnimation GetAnim_Open() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation GetAnim_Close() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UWidgetAnimation(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UGameLiftRequest
{
public:
	UGameLiftRequest(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<struct FString, struct FString> GetplayerSessionId2PlayerId() {
		return memory.read<struct TMap<struct FString, struct FString>>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqShopBalanceNxA
{
public:
	UPqShopBalanceNxA(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UKtSessionPlayMission
{
public:
	UKtSessionPlayMission(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKtPlayMissionDef Getdef() {
		return memory.read<struct FKtPlayMissionDef>(m_addr + 48);
	}
	struct FKtPlayMissionRewardDef Getreward() {
		return memory.read<struct FKtPlayMissionRewardDef>(m_addr + 112);
	}

private:
	std::uint64_t m_addr = 0;
};


class AKdSequenceKart
{
public:
	AKdSequenceKart(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetIndex() {
		return memory.read<int32_t>(m_addr + 544);
	}
	bool GetisWin() {
		return memory.read<bool>(m_addr + 548);
	}
	struct UKartSkeletalMeshComponent GetKartSkeletalMeshComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 552);
		return struct UKartSkeletalMeshComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKtSessionCreateRace
{
public:
	UKtSessionCreateRace(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetTrack() {
		return memory.read<struct FString>(m_addr + 136);
	}
	enum class EGameType GetGameType() {
		return memory.read<enum class EGameType>(m_addr + 152);
	}
	enum class ERaceType GetraceType() {
		return memory.read<enum class ERaceType>(m_addr + 153);
	}
	enum class ERaceMode GetraceMode() {
		return memory.read<enum class ERaceMode>(m_addr + 154);
	}
	bool GetobserverMode() {
		return memory.read<bool>(m_addr + 155);
	}
	struct FKtKartChannelParam GetchannelParam() {
		return memory.read<struct FKtKartChannelParam>(m_addr + 156);
	}
	int32_t Getteams() {
		return memory.read<int32_t>(m_addr + 228);
	}
	int32_t Getteammembers() {
		return memory.read<int32_t>(m_addr + 232);
	}
	int32_t GetLap() {
		return memory.read<int32_t>(m_addr + 236);
	}
	bool GethideKart() {
		return memory.read<bool>(m_addr + 240);
	}
	bool GethideCharacter() {
		return memory.read<bool>(m_addr + 241);
	}
	struct TArray<struct FString> GetteamNames() {
		return memory.read<struct TArray<struct FString>>(m_addr + 248);
	}
	struct FString GetsessionAPIEndpoint() {
		return memory.read<struct FString>(m_addr + 264);
	}
	struct FString GetsessionAPIKey() {
		return memory.read<struct FString>(m_addr + 280);
	}
	struct FString GetsessionAPIAuthToken() {
		return memory.read<struct FString>(m_addr + 296);
	}
	struct FString GetredisChannelName() {
		return memory.read<struct FString>(m_addr + 312);
	}
	struct TArray<struct FKtSessionRacePlayerRequest> Getplayers() {
		return memory.read<struct TArray<struct FKtSessionRacePlayerRequest>>(m_addr + 328);
	}
	struct TArray<struct FKtSessionRaceObserverRequest> Getobservers() {
		return memory.read<struct TArray<struct FKtSessionRaceObserverRequest>>(m_addr + 344);
	}
	struct TMap<struct FString, struct FString> GetpackEncKeys() {
		return memory.read<struct TMap<struct FString, struct FString>>(m_addr + 360);
	}
	struct TMap<struct FString, int32_t> Getparty() {
		return memory.read<struct TMap<struct FString, int32_t>>(m_addr + 440);
	}
	bool GetraceLog() {
		return memory.read<bool>(m_addr + 520);
	}
	struct FString GetnxlogServiceId() {
		return memory.read<struct FString>(m_addr + 528);
	}
	int32_t GetnxlogCountPerPack() {
		return memory.read<int32_t>(m_addr + 544);
	}
	struct FString GetnxlogMatchType() {
		return memory.read<struct FString>(m_addr + 552);
	}
	struct FString GetgrandPrixId() {
		return memory.read<struct FString>(m_addr + 568);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqLoginQueueStatus
{
public:
	UPqLoginQueueStatus(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UGameSessionDataConnectInfo
{
public:
	UGameSessionDataConnectInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetgameId() {
		return memory.read<struct FString>(m_addr + 128);
	}
	struct FString GetsessionAPIEndpoint() {
		return memory.read<struct FString>(m_addr + 144);
	}
	struct FString GetsessionAPIKey() {
		return memory.read<struct FString>(m_addr + 160);
	}
	struct FString GetsessionAPIAuthToken() {
		return memory.read<struct FString>(m_addr + 176);
	}

private:
	std::uint64_t m_addr = 0;
};


class UGameTipPool
{
public:
	UGameTipPool(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UItemListPopupEntry
{
public:
	UItemListPopupEntry(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetItemId() {
		return memory.read<struct FString>(m_addr + 40);
	}
	struct FString GetstockId() {
		return memory.read<struct FString>(m_addr + 56);
	}
	bool GetbLicenseReward() {
		return memory.read<bool>(m_addr + 72);
	}
	int32_t GetNumStars() {
		return memory.read<int32_t>(m_addr + 76);
	}
	bool GetbShowBottomLine() {
		return memory.read<bool>(m_addr + 80);
	}

private:
	std::uint64_t m_addr = 0;
};


class UItemModelComponent
{
public:
	UItemModelComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USkeletalMeshComponent GetBalloonSkeletalMeshComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3872);
		return struct USkeletalMeshComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UOptionDropDownItem
{
public:
	UOptionDropDownItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UGameLiftPlayer
{
public:
	UGameLiftPlayer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetplayerId() {
		return memory.read<struct FString>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPersonalResultWidgetComponent
{
public:
	UPersonalResultWidgetComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UMajorPersonalResultWidget GetResultWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 176);
		return UMajorPersonalResultWidget(ptr_addr);
	}
	UVoiceChatWidget GetVoiceChatWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 184);
		return UVoiceChatWidget(ptr_addr);
	}
	struct UMajorPersonalResultWidget GetResultWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 192);
		return struct UMajorPersonalResultWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UM_TimeAttackTrackChangeDialog
{
public:
	UM_TimeAttackTrackChangeDialog(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TWeakObjectPtr<UListView> GetTrackTileView() {
		return memory.read<struct TWeakObjectPtr<UListView>>(m_addr + 896);
	}
	struct UTimeAttackTrackDefEntryObject GetPrevSelectionObject() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 904);
		return struct UTimeAttackTrackDefEntryObject(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKtSessionReady
{
public:
	UKtSessionReady(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetVersion() {
		return memory.read<struct FString>(m_addr + 48);
	}
	int32_t GetPort() {
		return memory.read<int32_t>(m_addr + 64);
	}
	int32_t GetqueryPort() {
		return memory.read<int32_t>(m_addr + 68);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKtSessionPing
{
public:
	UKtSessionPing(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UKartChannelParamList
{
public:
	UKartChannelParamList(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct UKartChannelParam> GetParamList() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct TArray<struct UKartChannelParam>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKtSessionPlayerConnect
{
public:
	UKtSessionPlayerConnect(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetplayerSessionId() {
		return memory.read<struct FString>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKtSessionPlayerDisconnect
{
public:
	UKtSessionPlayerDisconnect(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetplayerSessionId() {
		return memory.read<struct FString>(m_addr + 48);
	}
	bool Getunfinished() {
		return memory.read<bool>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};


class URequestTMIPlayerResultData
{
public:
	URequestTMIPlayerResultData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UMatchNotifyCancel
{
public:
	UMatchNotifyCancel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UKtSessionHackDetected
{
public:
	UKtSessionHackDetected(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetplayerId() {
		return memory.read<struct FString>(m_addr + 48);
	}
	struct FString GetriderName() {
		return memory.read<struct FString>(m_addr + 64);
	}
	enum class ERaceMode GetraceMode() {
		return memory.read<enum class ERaceMode>(m_addr + 80);
	}
	struct FString GettrackId() {
		return memory.read<struct FString>(m_addr + 88);
	}
	struct FString GetgameId() {
		return memory.read<struct FString>(m_addr + 104);
	}
	struct FString GetMsg() {
		return memory.read<struct FString>(m_addr + 120);
	}

private:
	std::uint64_t m_addr = 0;
};


class UGameModeAsset
{
public:
	UGameModeAsset(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<struct FString, struct FGameModeData> GetGameModeData() {
		return memory.read<struct TMap<struct FString, struct FGameModeData>>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};


class USQTimeDistanceWidget
{
public:
	USQTimeDistanceWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UKdTextBlock GetText_DistanceNormal() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UKdTextBlock GetText_DistanceWarning() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UWidgetSwitcher GetWS_Back() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UWidgetSwitcher GetWS_Distance() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UKdTextBlock GetText_TimeNormal() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UKdTextBlock GetText_TimeWarning() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UWidgetSwitcher GetWS_Time() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UWidgetAnimation GetAnim_Alert() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation GetAnim_Alert_Distance() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UWidgetAnimation(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UGameplayControlTypeSelectDialog
{
public:
	UGameplayControlTypeSelectDialog(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FName> GetMediaOpenedAnims() {
		return memory.read<struct TArray<struct FName>>(m_addr + 840);
	}
	struct TArray<struct FText> GetMediaOpenedSubTitleTexts() {
		return memory.read<struct TArray<struct FText>>(m_addr + 856);
	}
	struct TArray<struct FText> GetMediaOpenedAutoTipTexts() {
		return memory.read<struct TArray<struct FText>>(m_addr + 872);
	}
	struct TArray<struct FText> GetMediaOpenedManualTipTexts() {
		return memory.read<struct TArray<struct FText>>(m_addr + 888);
	}
	struct TArray<struct FName> GetMediaEndReachedAnims() {
		return memory.read<struct TArray<struct FName>>(m_addr + 904);
	}
	struct TArray<float> GetMediaEndReachedAnimOffsets() {
		return memory.read<struct TArray<float>>(m_addr + 920);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKartWheelComponent
{
public:
	UKartWheelComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UItemDefEntryObject
{
public:
	UItemDefEntryObject(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UGfsServer
{
public:
	UGfsServer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UGfsServerConnection GetConnection() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct UGfsServerConnection(ptr_addr);
	}
	struct UGameInstance GetGameInstance() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct UGameInstance(ptr_addr);
	}
	struct UKdAccount GetAccount() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct UKdAccount(ptr_addr);
	}
	struct FTimerHandle GetPingTimer() {
		return memory.read<struct FTimerHandle>(m_addr + 64);
	}
	struct FString GetMyGfsId() {
		return memory.read<struct FString>(m_addr + 72);
	}
	struct FString GetMyNexonTag() {
		return memory.read<struct FString>(m_addr + 88);
	}

private:
	std::uint64_t m_addr = 0;
};


class AGoItem_Cube
{
public:
	AGoItem_Cube(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UStaticMeshComponent GetCubeMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 568);
		return struct UStaticMeshComponent(ptr_addr);
	}
	struct USphereComponent GetCollisionComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 576);
		return struct USphereComponent(ptr_addr);
	}
	struct UDecalComponent GetDecal() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 584);
		return struct UDecalComponent(ptr_addr);
	}
	struct UParticleSystemComponent GetGetParticle() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 592);
		return struct UParticleSystemComponent(ptr_addr);
	}
	float GetCubeRotationSpeed() {
		return memory.read<float>(m_addr + 600);
	}
	float GetCubeLocationHeight() {
		return memory.read<float>(m_addr + 604);
	}
	struct FName GetItemFeedForceFeedbackName() {
		return memory.read<struct FName>(m_addr + 608);
	}
	enum class EStateDesc GetCubeState() {
		return memory.read<enum class EStateDesc>(m_addr + 616);
	}
	float GetEatenTime() {
		return memory.read<float>(m_addr + 620);
	}
	bool GetbMovableCube() {
		return memory.read<bool>(m_addr + 624);
	}
	enum class EItemType GetOverrideItemType() {
		return memory.read<enum class EItemType>(m_addr + 625);
	}
	struct UFMODEvent GetItemFx() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UFMODEvent(ptr_addr);
	}
	struct UItemCubesComponent GetCubeComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UItemCubesComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqGetGrandPrixSeasonData
{
public:
	UPqGetGrandPrixSeasonData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetgrandPrixId() {
		return memory.read<struct FString>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicenseItemCubeData
{
public:
	ULicenseItemCubeData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FLicenseItemCubeInfo> GetLicenseItemCubeData() {
		return memory.read<struct TArray<struct FLicenseItemCubeInfo>>(m_addr + 72);
	}
	struct TSoftClassPtr<UObject> GetItemCubeClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 88);
	}
	struct TSoftObjectPtr<UStaticMesh> GetItemCubeMeshClass() {
		return memory.read<struct TSoftObjectPtr<UStaticMesh>>(m_addr + 128);
	}
	struct TSoftObjectPtr<UTexture2D> GetDiffuseTextureObject1() {
		return memory.read<struct TSoftObjectPtr<UTexture2D>>(m_addr + 168);
	}
	struct TSoftObjectPtr<UTexture2D> GetDiffuseTextureObject2() {
		return memory.read<struct TSoftObjectPtr<UTexture2D>>(m_addr + 208);
	}
	struct TSoftObjectPtr<UTexture2D> GetDiffuseTextureObject3() {
		return memory.read<struct TSoftObjectPtr<UTexture2D>>(m_addr + 248);
	}

private:
	std::uint64_t m_addr = 0;
};


class ARaceLevelScriptActor
{
public:
	ARaceLevelScriptActor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrGetGrandPrixSeasonData
{
public:
	UPrGetGrandPrixSeasonData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetgrandPrixId() {
		return memory.read<struct FString>(m_addr + 72);
	}
	int32_t Getgpp() {
		return memory.read<int32_t>(m_addr + 88);
	}
	enum class EKtGrandPrixSubTier Gettier() {
		return memory.read<enum class EKtGrandPrixSubTier>(m_addr + 92);
	}
	int32_t GetstatRank1() {
		return memory.read<int32_t>(m_addr + 96);
	}
	int32_t GetstatRank2() {
		return memory.read<int32_t>(m_addr + 100);
	}
	int32_t GetstatRank3() {
		return memory.read<int32_t>(m_addr + 104);
	}
	int32_t GetstatTeamWin() {
		return memory.read<int32_t>(m_addr + 108);
	}
	int32_t GetstatTeamLose() {
		return memory.read<int32_t>(m_addr + 112);
	}
	int32_t GetstatTeamDraw() {
		return memory.read<int32_t>(m_addr + 116);
	}
	int32_t GetstatRetire() {
		return memory.read<int32_t>(m_addr + 120);
	}
	int32_t GetstatRaceCount() {
		return memory.read<int32_t>(m_addr + 124);
	}
	struct FKtRankerInfo GetmyRank() {
		return memory.read<struct FKtRankerInfo>(m_addr + 128);
	}
	float Getpercentage() {
		return memory.read<float>(m_addr + 184);
	}

private:
	std::uint64_t m_addr = 0;
};


class AMajorResultWidgetComponentTestPawn
{
public:
	AMajorResultWidgetComponentTestPawn(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPqGetGrandPrixData
{
public:
	UPqGetGrandPrixData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetgrandPrixId() {
		return memory.read<struct FString>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class URaceReplayComponent
{
public:
	URaceReplayComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrGetGrandPrixData
{
public:
	UPrGetGrandPrixData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetgrandPrixId() {
		return memory.read<struct FString>(m_addr + 72);
	}
	int32_t Getgpp() {
		return memory.read<int32_t>(m_addr + 88);
	}
	enum class EKtGrandPrixSubTier Gettier() {
		return memory.read<enum class EKtGrandPrixSubTier>(m_addr + 92);
	}
	int32_t GetstatRank1() {
		return memory.read<int32_t>(m_addr + 96);
	}
	int32_t GetstatRank2() {
		return memory.read<int32_t>(m_addr + 100);
	}
	int32_t GetstatRank3() {
		return memory.read<int32_t>(m_addr + 104);
	}
	int32_t GetstatTeamWin() {
		return memory.read<int32_t>(m_addr + 108);
	}
	int32_t GetstatTeamLose() {
		return memory.read<int32_t>(m_addr + 112);
	}
	int32_t GetstatTeamDraw() {
		return memory.read<int32_t>(m_addr + 116);
	}
	int32_t GetstatRetire() {
		return memory.read<int32_t>(m_addr + 120);
	}
	int32_t GetstatRaceCount() {
		return memory.read<int32_t>(m_addr + 124);
	}
	struct FKtRankerInfo GetmyRank() {
		return memory.read<struct FKtRankerInfo>(m_addr + 128);
	}
	float Getpercentage() {
		return memory.read<float>(m_addr + 184);
	}

private:
	std::uint64_t m_addr = 0;
};


class UWaterReaction
{
public:
	UWaterReaction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftObjectPtr<UParticleSystem> GetLockEffect() {
		return memory.read<struct TSoftObjectPtr<UParticleSystem>>(m_addr + 536);
	}
	struct TSoftObjectPtr<UFMODEvent> GetLockSound() {
		return memory.read<struct TSoftObjectPtr<UFMODEvent>>(m_addr + 576);
	}
	struct TSoftObjectPtr<UParticleSystem> GetSplashEffect() {
		return memory.read<struct TSoftObjectPtr<UParticleSystem>>(m_addr + 616);
	}
	struct TSoftObjectPtr<UFMODEvent> GetSplashSound() {
		return memory.read<struct TSoftObjectPtr<UFMODEvent>>(m_addr + 656);
	}
	struct TSoftClassPtr<UObject> GetStrokeWidget() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 696);
	}
	struct TSoftObjectPtr<ULevelSequence> GetHitLevelSequence() {
		return memory.read<struct TSoftObjectPtr<ULevelSequence>>(m_addr + 736);
	}
	struct UItemComponent GetLocalVictim() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 808);
		return struct UItemComponent(ptr_addr);
	}
	struct UItemComponent GetLocalUser() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 816);
		return struct UItemComponent(ptr_addr);
	}
	struct UKdLevelSequencePlayer GetSequencePlayer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 832);
		return struct UKdLevelSequencePlayer(ptr_addr);
	}
	struct UUserWidget GetWaterStroke() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 840);
		return struct UUserWidget(ptr_addr);
	}
	struct UParticleSystemComponent GetLockEffectComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 848);
		return struct UParticleSystemComponent(ptr_addr);
	}
	struct UParticleSystemComponent GetSplashEffectComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 856);
		return struct UParticleSystemComponent(ptr_addr);
	}
	struct UParticleSystemComponent GetFastEscapeEffectComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 864);
		return struct UParticleSystemComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicenseBossData
{
public:
	ULicenseBossData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKartDesc GetKartDesc() {
		return memory.read<struct FKartDesc>(m_addr + 64);
	}
	struct FCharacterDesc GetCharacterDesc() {
		return memory.read<struct FCharacterDesc>(m_addr + 248);
	}
	float GetInitDistance() {
		return memory.read<float>(m_addr + 344);
	}
	float GetMaxHP() {
		return memory.read<float>(m_addr + 348);
	}
	float GetSlipRadius() {
		return memory.read<float>(m_addr + 352);
	}
	float GetRageTime() {
		return memory.read<float>(m_addr + 356);
	}
	float GetRocketDamage() {
		return memory.read<float>(m_addr + 360);
	}
	float GetFirstRocketDamage() {
		return memory.read<float>(m_addr + 364);
	}
	int32_t GetLockItemCount() {
		return memory.read<int32_t>(m_addr + 368);
	}
	struct TArray<float> GetRageThreshold() {
		return memory.read<struct TArray<float>>(m_addr + 376);
	}
	float GetAttackDistanceInterval() {
		return memory.read<float>(m_addr + 392);
	}
	float GetLoseDistance() {
		return memory.read<float>(m_addr + 396);
	}
	float GetScale() {
		return memory.read<float>(m_addr + 400);
	}
	struct FLicenseBossBananaPatternSet GetBossBananaPatternSet() {
		return memory.read<struct FLicenseBossBananaPatternSet>(m_addr + 408);
	}
	struct TSoftObjectPtr<UAnimationAsset> GetBanana_Begin() {
		return memory.read<struct TSoftObjectPtr<UAnimationAsset>>(m_addr + 448);
	}
	struct TSoftObjectPtr<UAnimMontage> GetMontage_Base() {
		return memory.read<struct TSoftObjectPtr<UAnimMontage>>(m_addr + 488);
	}
	struct TSoftObjectPtr<UAnimMontage> GetMontage_Base2() {
		return memory.read<struct TSoftObjectPtr<UAnimMontage>>(m_addr + 528);
	}
	struct TSoftObjectPtr<UAnimMontage> GetMontage_Angry() {
		return memory.read<struct TSoftObjectPtr<UAnimMontage>>(m_addr + 568);
	}
	struct TSoftObjectPtr<UAnimMontage> GetMontage_Attack() {
		return memory.read<struct TSoftObjectPtr<UAnimMontage>>(m_addr + 608);
	}
	struct TSoftObjectPtr<UAnimMontage> GetMontage_Damage() {
		return memory.read<struct TSoftObjectPtr<UAnimMontage>>(m_addr + 648);
	}
	struct TSoftObjectPtr<UAnimMontage> GetMontage_Damage2() {
		return memory.read<struct TSoftObjectPtr<UAnimMontage>>(m_addr + 688);
	}
	struct TSoftObjectPtr<UAnimMontage> GetMontage_Fail() {
		return memory.read<struct TSoftObjectPtr<UAnimMontage>>(m_addr + 728);
	}
	struct TSoftObjectPtr<UAnimMontage> GetMontage_Start() {
		return memory.read<struct TSoftObjectPtr<UAnimMontage>>(m_addr + 768);
	}
	struct UFMODEvent GetRageBGM() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 808);
		return struct UFMODEvent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqShopPurchaseNxA
{
public:
	UPqShopPurchaseNxA(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetLanguage() {
		return memory.read<struct FString>(m_addr + 56);
	}
	bool GetbDirectOrder() {
		return memory.read<bool>(m_addr + 72);
	}
	struct FString GetCategory() {
		return memory.read<struct FString>(m_addr + 80);
	}
	struct FString GetstockId() {
		return memory.read<struct FString>(m_addr + 96);
	}
	struct FString GetlocalizedStockName() {
		return memory.read<struct FString>(m_addr + 112);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPcGrandPrixResult
{
public:
	UPcGrandPrixResult(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetgrandPrixId() {
		return memory.read<struct FString>(m_addr + 48);
	}
	int32_t Getgpp() {
		return memory.read<int32_t>(m_addr + 64);
	}
	enum class EKtGrandPrixSubTier Gettier() {
		return memory.read<enum class EKtGrandPrixSubTier>(m_addr + 68);
	}
	int32_t Getrank() {
		return memory.read<int32_t>(m_addr + 72);
	}
	float Getpercentage() {
		return memory.read<float>(m_addr + 76);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqGetRegularGrandPrixData
{
public:
	UPqGetRegularGrandPrixData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPatcherInterface
{
public:
	UPatcherInterface(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UGameInstance GetGameInstance() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct UGameInstance(ptr_addr);
	}
	struct UPatcherEvent GetPatcherEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct UPatcherEvent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrGetRegularGrandPrixData
{
public:
	UPrGetRegularGrandPrixData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FKtRegularGrandPrixData> GetdataList() {
		return memory.read<struct TArray<struct FKtRegularGrandPrixData>>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class AGravityZone
{
public:
	AGravityZone(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetGravityDivider() {
		return memory.read<float>(m_addr + 576);
	}
	float GetSpeedReduce() {
		return memory.read<float>(m_addr + 580);
	}
	float GetMinSpeedKph() {
		return memory.read<float>(m_addr + 584);
	}
	float GetPitchReduceSpeed() {
		return memory.read<float>(m_addr + 588);
	}
	float GetDuration() {
		return memory.read<float>(m_addr + 592);
	}

private:
	std::uint64_t m_addr = 0;
};


class UGravityBuff
{
public:
	UGravityBuff(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UHeadlightDataAsset
{
public:
	UHeadlightDataAsset(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FHeadlightData GetHeadlightData() {
		return memory.read<struct FHeadlightData>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicenseCoinCounterWidget
{
public:
	ULicenseCoinCounterWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UKdTextBlock GetV_KoinCount() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UWidgetAnimation GetGet_Anim() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UWidgetAnimation(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTimeAttackActivateWrongWay
{
public:
	UTimeAttackActivateWrongWay(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UHitSoundComponent
{
public:
	UHitSoundComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftObjectPtr<UFMODEvent> GetSoundEvent() {
		return memory.read<struct TSoftObjectPtr<UFMODEvent>>(m_addr + 240);
	}
	struct UFMODAudioComponent GetAudioComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 280);
		return struct UFMODAudioComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UWrappingCollectionList
{
public:
	UWrappingCollectionList(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FWrappingCollection> GetCollectionList() {
		return memory.read<struct TArray<struct FWrappingCollection>>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};


class UHttpPatcherInterface
{
public:
	UHttpPatcherInterface(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetListFileUrl() {
		return memory.read<struct FString>(m_addr + 64);
	}
	struct ULocalFileCache GetFileCache() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 200);
		return struct ULocalFileCache(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class AItemRocketFirstRank
{
public:
	AItemRocketFirstRank(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USceneComponent GetRootSceneComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 864);
		return struct USceneComponent(ptr_addr);
	}
	struct USkeletalMeshComponent GetBazookaMeshComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 872);
		return struct USkeletalMeshComponent(ptr_addr);
	}
	struct USkeletalMeshComponent GetRocketMeshComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 880);
		return struct USkeletalMeshComponent(ptr_addr);
	}
	struct UParticleSystemComponent GetTailParticleComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 888);
		return struct UParticleSystemComponent(ptr_addr);
	}
	struct TSoftObjectPtr<UCurveFloat> GetCurveDegree() {
		return memory.read<struct TSoftObjectPtr<UCurveFloat>>(m_addr + 896);
	}
	struct TSoftObjectPtr<UCurveFloat> GetCurveY() {
		return memory.read<struct TSoftObjectPtr<UCurveFloat>>(m_addr + 936);
	}
	struct TSoftObjectPtr<UFMODEvent> GetShootSound() {
		return memory.read<struct TSoftObjectPtr<UFMODEvent>>(m_addr + 976);
	}
	struct TSoftObjectPtr<UFMODEvent> GetFlySound() {
		return memory.read<struct TSoftObjectPtr<UFMODEvent>>(m_addr + 1016);
	}
	struct TSoftObjectPtr<USkeletalMesh> GetRocketMesh() {
		return memory.read<struct TSoftObjectPtr<USkeletalMesh>>(m_addr + 1056);
	}
	struct TSoftObjectPtr<UAnimationAsset> GetMissileBeginAttackAsset() {
		return memory.read<struct TSoftObjectPtr<UAnimationAsset>>(m_addr + 1096);
	}
	struct TSoftObjectPtr<UAnimationAsset> GetMissileShootingAsset() {
		return memory.read<struct TSoftObjectPtr<UAnimationAsset>>(m_addr + 1136);
	}
	struct TSoftObjectPtr<USkeletalMesh> GetBazookaBody() {
		return memory.read<struct TSoftObjectPtr<USkeletalMesh>>(m_addr + 1176);
	}
	struct TSoftObjectPtr<USkeletalMesh> GetRocketHead() {
		return memory.read<struct TSoftObjectPtr<USkeletalMesh>>(m_addr + 1216);
	}
	struct TSoftObjectPtr<UParticleSystem> GetBooster() {
		return memory.read<struct TSoftObjectPtr<UParticleSystem>>(m_addr + 1256);
	}
	struct TSoftObjectPtr<ULevelSequence> GetItemFeedSequence() {
		return memory.read<struct TSoftObjectPtr<ULevelSequence>>(m_addr + 1296);
	}
	struct TSoftClassPtr<UObject> GetRedAlertWidgetObj() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 1336);
	}
	float GetRocketTotalFlyTime() {
		return memory.read<float>(m_addr + 1380);
	}
	float GetActionDelay() {
		return memory.read<float>(m_addr + 1384);
	}
	float GetBazookaLifeTime() {
		return memory.read<float>(m_addr + 1388);
	}
	struct UItemComponent GetAuthVictim() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1400);
		return struct UItemComponent(ptr_addr);
	}
	struct AActor GetLocalTargetActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1408);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UHUDComponent
{
public:
	UHUDComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct URaceHudWidget GetHUDWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 184);
		return struct URaceHudWidget(ptr_addr);
	}
	struct TMap<struct FName, struct UContentWidget> GetCachedContentWidgets() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 192);
		return struct TMap<struct FName, struct UContentWidget>(ptr_addr);
	}
	struct UCustomHUDData GetCustomHUDData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 272);
		return struct UCustomHUDData(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UInitializePawnState
{
public:
	UInitializePawnState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULicenseMessageInterface
{
public:
	ULicenseMessageInterface(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULicenseRocketQuestWidgetInst
{
public:
	ULicenseRocketQuestWidgetInst(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UImage GetCircleBg() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UImage(ptr_addr);
	}
	struct UImage GetCircleSolid() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UImage(ptr_addr);
	}
	struct UImage GetCircleStroke() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UImage(ptr_addr);
	}
	struct UKdTextBlock GetTxtNumber() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UKdTextBlock GetTxtNumberClear() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UWidgetSwitcher GetWS_State() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UWidgetAnimation GetAnim_CurrentTarget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation GetAnim_ClearTarget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation GetAnim_ShowTarget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UWidgetAnimation(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UInfoLogicComponent
{
public:
	UInfoLogicComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UKdGameViewportClient
{
public:
	UKdGameViewportClient(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UUserWidget GetWatermarkWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 864);
		return struct UUserWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTouchEscapeWidget
{
public:
	UTouchEscapeWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UWaterReaction GetWaterReaction() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UWaterReaction(ptr_addr);
	}
	struct UWidgetAnimation GetAnim_Alert() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UButton GetV_InputButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UButton(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class AScenarioPlayerController
{
public:
	AScenarioPlayerController(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UGrandPrixListEntryObject
{
public:
	UGrandPrixListEntryObject(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UInGameVoiceChatComponent
{
public:
	UInGameVoiceChatComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UTrackDifficultUnitWidget
{
public:
	UTrackDifficultUnitWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UWidgetSwitcher GetUnitSwitcher() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UWidgetSwitcher(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UInstanceBoostAssistWidget
{
public:
	UInstanceBoostAssistWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UKartMovementComponent GetKartMovement() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UKartMovementComponent(ptr_addr);
	}
	struct UImage GetGauge() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UImage(ptr_addr);
	}
	struct UImage GetBoostImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UImage(ptr_addr);
	}
	struct UImage GetAutoImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UImage(ptr_addr);
	}
	struct UVerticalBox GetRootVerticalBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UVerticalBox(ptr_addr);
	}
	struct UFMODEvent GetDrift_Assist() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UFMODEvent(ptr_addr);
	}
	struct UMovementAssistComponent GetAssist() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UMovementAssistComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UItemAffect
{
public:
	UItemAffect(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AItemBanana
{
public:
	AItemBanana(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimationAsset GetBananaBeginAnimOverride() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 856);
		return struct UAnimationAsset(ptr_addr);
	}
	struct USphereComponent GetOverlapComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 864);
		return struct USphereComponent(ptr_addr);
	}
	struct USkeletalMeshComponent GetBananaSkeletalMeshComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 872);
		return struct USkeletalMeshComponent(ptr_addr);
	}
	struct TSoftObjectPtr<UAnimationAsset> GetBananaBeginAnimSequence() {
		return memory.read<struct TSoftObjectPtr<UAnimationAsset>>(m_addr + 880);
	}
	struct TSoftObjectPtr<UAnimationAsset> GetBananaIdleAnimSequence() {
		return memory.read<struct TSoftObjectPtr<UAnimationAsset>>(m_addr + 920);
	}
	struct TSoftObjectPtr<UFMODEvent> GetFiringSound() {
		return memory.read<struct TSoftObjectPtr<UFMODEvent>>(m_addr + 960);
	}
	struct TSoftObjectPtr<USkeletalMesh> GetBananaMesh() {
		return memory.read<struct TSoftObjectPtr<USkeletalMesh>>(m_addr + 1000);
	}
	struct TSoftClassPtr<UObject> GetBanana_Bullet() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 1040);
	}
	struct TSoftObjectPtr<ULevelSequence> GetItemFeedSequence() {
		return memory.read<struct TSoftObjectPtr<ULevelSequence>>(m_addr + 1080);
	}

private:
	std::uint64_t m_addr = 0;
};


class AKartSkidMark
{
public:
	AKartSkidMark(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UMaterialInstance GetSkidMarkMaterialInst() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 544);
		return struct UMaterialInstance(ptr_addr);
	}
	struct TArray<struct USkidMarkMeshComponent> GetSkidMarkMeshComponents() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 552);
		return struct TArray<struct USkidMarkMeshComponent>(ptr_addr);
	}
	struct TArray<struct UObject> GetLoadSkidMarkMaterialList() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 576);
		return struct TArray<struct UObject>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class AItemBarricade
{
public:
	AItemBarricade(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftObjectPtr<UFMODEvent> GetFiringSound() {
		return memory.read<struct TSoftObjectPtr<UFMODEvent>>(m_addr + 856);
	}
	struct TSoftObjectPtr<UFMODEvent> GetDropSound() {
		return memory.read<struct TSoftObjectPtr<UFMODEvent>>(m_addr + 896);
	}
	struct TSoftObjectPtr<UFMODEvent> GetStateEndSound() {
		return memory.read<struct TSoftObjectPtr<UFMODEvent>>(m_addr + 936);
	}
	struct TSoftObjectPtr<UFMODEvent> GetStateSetSound() {
		return memory.read<struct TSoftObjectPtr<UFMODEvent>>(m_addr + 976);
	}
	struct TSoftClassPtr<UObject> GetBarricade_Bullet() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 1016);
	}
	struct TSoftObjectPtr<ULevelSequence> GetItemFeedSequence() {
		return memory.read<struct TSoftObjectPtr<ULevelSequence>>(m_addr + 1056);
	}
	struct TArray<int32_t> GetAuthStates() {
		return memory.read<struct TArray<int32_t>>(m_addr + 1240);
	}
	struct TArray<struct USkeletalMeshComponent> GetBarricadeSkeletalMeshComponents() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1256);
		return struct TArray<struct USkeletalMeshComponent>(ptr_addr);
	}
	struct TArray<struct UBoxComponent> GetBarricadeOverlapComponents() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1272);
		return struct TArray<struct UBoxComponent>(ptr_addr);
	}
	struct TArray<struct UBoxComponent> GetBarricadeCollisionComponents() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1288);
		return struct TArray<struct UBoxComponent>(ptr_addr);
	}
	struct UAnimMontage GetAnimMontage_Start() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1304);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetAnimMontage_TimeOut() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1312);
		return struct UAnimMontage(ptr_addr);
	}
	struct UAnimMontage GetAnimMontage_Destruct_UsingPhys() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1320);
		return struct UAnimMontage(ptr_addr);
	}
	struct TSoftObjectPtr<UAnimMontage> GetBarricadeAnim_Start() {
		return memory.read<struct TSoftObjectPtr<UAnimMontage>>(m_addr + 1328);
	}
	struct TSoftObjectPtr<UAnimSequenceBase> GetBarricadeAnim_TimeOut() {
		return memory.read<struct TSoftObjectPtr<UAnimSequenceBase>>(m_addr + 1368);
	}
	struct TSoftObjectPtr<UAnimSequenceBase> GetBarricadeAnim_Destruct_UsingPhysics() {
		return memory.read<struct TSoftObjectPtr<UAnimSequenceBase>>(m_addr + 1408);
	}
	struct TSoftObjectPtr<USkeletalMesh> GetBarricadeMesh() {
		return memory.read<struct TSoftObjectPtr<USkeletalMesh>>(m_addr + 1448);
	}
	struct TSoftObjectPtr<USkeletalMesh> GetBarricadeMesh_Destruct() {
		return memory.read<struct TSoftObjectPtr<USkeletalMesh>>(m_addr + 1488);
	}
	struct TSoftObjectPtr<UPhysicsAsset> GetBarricadePhysicsAsset_Destruct() {
		return memory.read<struct TSoftObjectPtr<UPhysicsAsset>>(m_addr + 1528);
	}
	struct TArray<struct UItemComponent> GetOverlapItemComponents() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1576);
		return struct TArray<struct UItemComponent>(ptr_addr);
	}
	struct TArray<struct UItemComponent> GetAuthHitItemComponents() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1592);
		return struct TArray<struct UItemComponent>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTransition_InitGame
{
public:
	UTransition_InitGame(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AItemBooster
{
public:
	AItemBooster(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UWaitHelper
{
public:
	UWaitHelper(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UDelegateBarrier GetBarrier() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct UDelegateBarrier(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class AItemBush
{
public:
	AItemBush(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct UStaticMeshComponent> GetBushMeshComponents() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 856);
		return struct TArray<struct UStaticMeshComponent>(ptr_addr);
	}
	struct UBoxComponent GetOverlapComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 872);
		return struct UBoxComponent(ptr_addr);
	}
	struct TSoftObjectPtr<UFMODEvent> GetFiringSound() {
		return memory.read<struct TSoftObjectPtr<UFMODEvent>>(m_addr + 880);
	}
	struct TSoftObjectPtr<UFMODEvent> GetHitSound() {
		return memory.read<struct TSoftObjectPtr<UFMODEvent>>(m_addr + 920);
	}
	struct TSoftObjectPtr<UStaticMesh> GetBushMesh() {
		return memory.read<struct TSoftObjectPtr<UStaticMesh>>(m_addr + 960);
	}
	float GetActionDelay() {
		return memory.read<float>(m_addr + 1016);
	}
	float GetLifeSpanTime() {
		return memory.read<float>(m_addr + 1020);
	}
	float GetDragForceMultiplier() {
		return memory.read<float>(m_addr + 1024);
	}

private:
	std::uint64_t m_addr = 0;
};


class AItemCloud
{
public:
	AItemCloud(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UParticleSystemComponent GetCloudParticleComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 856);
		return struct UParticleSystemComponent(ptr_addr);
	}
	struct UBoxComponent GetOverlapComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 864);
		return struct UBoxComponent(ptr_addr);
	}
	struct TSoftObjectPtr<UFMODEvent> GetFiringSound() {
		return memory.read<struct TSoftObjectPtr<UFMODEvent>>(m_addr + 872);
	}
	struct TSoftObjectPtr<UFMODEvent> GetHitSound() {
		return memory.read<struct TSoftObjectPtr<UFMODEvent>>(m_addr + 912);
	}
	struct TSoftObjectPtr<UParticleSystem> GetCloudParticle() {
		return memory.read<struct TSoftObjectPtr<UParticleSystem>>(m_addr + 952);
	}
	struct TSoftClassPtr<UObject> GetCloud_Bullet() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 992);
	}
	float GetActionDelay() {
		return memory.read<float>(m_addr + 1032);
	}
	float GetLifeSpanTime() {
		return memory.read<float>(m_addr + 1036);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPreciseTouchButton
{
public:
	UPreciseTouchButton(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UItemCommonIconWidget
{
public:
	UItemCommonIconWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UWidgetSwitcher GetV_WidgetSwitcher_Slot() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UOverlay GetV_Overlay_Item() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UOverlay(ptr_addr);
	}
	struct UOverlay GetV_Overlay_EmptySlot() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UOverlay(ptr_addr);
	}
	struct UOverlay GetV_Overlay_many_Item() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UOverlay(ptr_addr);
	}
	struct UOverlay GetV_Overlay_EmptyLock() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UOverlay(ptr_addr);
	}
	struct UOverlay GetV_Overlay_Add() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UOverlay(ptr_addr);
	}
	struct UImage GetV_Thumbnail() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UImage(ptr_addr);
	}
	struct UOverlay GetV_Overlay_Equipped() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UOverlay(ptr_addr);
	}
	struct UWidgetSwitcher GetV_Switcher_equippedText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UWidgetSwitcher GetV_Switcher_GradeBG() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UPanelWidget GetV_HB_GradeDot() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UPanelWidget(ptr_addr);
	}
	struct UPanelWidget GetV_HB_Bundle_GradeDot() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct UPanelWidget(ptr_addr);
	}
	struct UImage GetV_Image_Character() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return struct UImage(ptr_addr);
	}
	struct UWidgetSwitcher GetV_Switcher_RestTimeOrCount() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 728);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UKdTextBlock GetV_KdTextBlock_RestTime() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 736);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UKdTextBlock GetV_KdTextBlock_Count() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 744);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UImage GetV_Image_Bundle_Character() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 752);
		return struct UImage(ptr_addr);
	}
	struct UWidgetSwitcher GetV_Switcher_Bundle_RestTimeOrCount() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 760);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UKdTextBlock GetV_KdTextBlock_Bundle_RestTime() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 768);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UKdTextBlock GetV_KdTextBlock_Bundle_Count() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 776);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UKdImage GetV_KdImage_Disable() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 784);
		return struct UKdImage(ptr_addr);
	}
	struct UKdImage GetV_KdImage_Bundle_Disable() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 792);
		return struct UKdImage(ptr_addr);
	}
	struct UKdImage GetV_KdImage_Lock() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 800);
		return struct UKdImage(ptr_addr);
	}
	struct UKdImage GetV_KdImage_Bundle_Lock() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 808);
		return struct UKdImage(ptr_addr);
	}
	struct UOverlay GetV_OV_Block() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 816);
		return struct UOverlay(ptr_addr);
	}
	struct UKdTextBlock GetV_KdTextBlock_BundleCount() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 824);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UKdImage GetV_Image_BundleThumbnail() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 832);
		return struct UKdImage(ptr_addr);
	}
	struct UWidgetSwitcher GetV_Switcher_BundleGrade() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 840);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct FString GetItemId() {
		return memory.read<struct FString>(m_addr + 848);
	}
	float GetRestTimeRefreshSecond() {
		return memory.read<float>(m_addr + 880);
	}
	bool GetbIsBundle() {
		return memory.read<bool>(m_addr + 884);
	}

private:
	std::uint64_t m_addr = 0;
};


class UItemComponent
{
public:
	UItemComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UItemActorTable GetItemActorTable() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 192);
		return struct UItemActorTable(ptr_addr);
	}
	struct UItemFilterCollection GetItemFilters() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 200);
		return struct UItemFilterCollection(ptr_addr);
	}
	struct UTargetFinderComponent GetTargetFinder() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UTargetFinderComponent(ptr_addr);
	}
	struct ASoundManager GetSoundManager() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return struct ASoundManager(ptr_addr);
	}
	struct UTargetFinderComponent GetTargetFinderComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 728);
		return struct UTargetFinderComponent(ptr_addr);
	}
	struct UItemContextComponent GetItemContext() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 736);
		return struct UItemContextComponent(ptr_addr);
	}
	struct UItemCubesComponent GetItemCubesComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 744);
		return struct UItemCubesComponent(ptr_addr);
	}
	struct TSoftClassPtr<UObject> GetRedAlertWidgetObj() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 896);
	}
	struct UUserWidget GetRedAlertWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 936);
		return struct UUserWidget(ptr_addr);
	}
	struct TSoftClassPtr<UObject> GetBlueAlertWidgetObj() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 952);
	}
	struct UUserWidget GetBlueAlertWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 992);
		return struct UUserWidget(ptr_addr);
	}
	struct FMulticastInlineDelegate GetOnSendHitInfo() {
		return memory.read<struct FMulticastInlineDelegate>(m_addr + 1008);
	}
	struct UItemSlotComponent GetItemSlotComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1024);
		return struct UItemSlotComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class AItemEmp
{
public:
	AItemEmp(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UReplayDetailPageWidget
{
public:
	UReplayDetailPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAddItemSlotChanger
{
public:
	UAddItemSlotChanger(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftClassPtr<UObject> GetItemSlotChangerWidget() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UScenarioKeyWidget
{
public:
	UScenarioKeyWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKey GetKey_PC() {
		return memory.read<struct FKey>(m_addr + 1000);
	}
	struct FKey GetKey_Gamepad() {
		return memory.read<struct FKey>(m_addr + 1024);
	}
	struct FText GetKey_Descript() {
		return memory.read<struct FText>(m_addr + 1048);
	}
	struct UKdTextBlock GetV_KeyText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1072);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UKdTextBlock GetV_KeyDescriptText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1080);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UWidgetSwitcher GetV_Switcher() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1088);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UWidgetSwitcher GetV_WidgetSwitcher_Stroke() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1096);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UWidgetSwitcher GetV_WidgetSwitcher_CountDown() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1104);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UKeyTextureMap2 GetKey_Common() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1112);
		return struct UKeyTextureMap2(ptr_addr);
	}
	struct UKeyTextureMap2 GetKey_XBOX() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1120);
		return struct UKeyTextureMap2(ptr_addr);
	}
	struct UKeyTextureMap2 GetKey_DualShock() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1128);
		return struct UKeyTextureMap2(ptr_addr);
	}
	enum class EInputDeviceType GetInputDevice() {
		return memory.read<enum class EInputDeviceType>(m_addr + 1136);
	}
	bool GetbIsPlatformFixed() {
		return memory.read<bool>(m_addr + 1137);
	}

private:
	std::uint64_t m_addr = 0;
};


class USpawnReservedItem
{
public:
	USpawnReservedItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULicenseDraftCheckWidget
{
public:
	ULicenseDraftCheckWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UWidgetAnimation GetAnim_Show() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation GetAnim_Hide() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UKdTextBlock GetDraftTime() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UKdTextBlock(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAddItemFeed
{
public:
	UAddItemFeed(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftClassPtr<UObject> GetItemFeedWidget() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UDisableAimOnMeWidget
{
public:
	UDisableAimOnMeWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UEnableItemCube
{
public:
	UEnableItemCube(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AItemLock
{
public:
	AItemLock(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftObjectPtr<UFMODEvent> GetFiringSound() {
		return memory.read<struct TSoftObjectPtr<UFMODEvent>>(m_addr + 856);
	}
	struct TSoftObjectPtr<UParticleSystem> GetLock_Affect() {
		return memory.read<struct TSoftObjectPtr<UParticleSystem>>(m_addr + 896);
	}
	struct UParticleSystemComponent GetLockEffectComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 936);
		return struct UParticleSystemComponent(ptr_addr);
	}
	struct TSoftClassPtr<UObject> GetLock_Bullet() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 944);
	}

private:
	std::uint64_t m_addr = 0;
};


class AKdPawn
{
public:
	AKdPawn(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FName> GetLocalPlayerLODBiasActiveClassList() {
		return memory.read<struct TArray<struct FName>>(m_addr + 904);
	}
	struct TArray<struct FName> GetLocalPlayerParticleActiveClassList() {
		return memory.read<struct TArray<struct FName>>(m_addr + 920);
	}

private:
	std::uint64_t m_addr = 0;
};


class AItemSinglePawn
{
public:
	AItemSinglePawn(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UItemSinglePhaseComponent
{
public:
	UItemSinglePhaseComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UFriendListEntryObject
{
public:
	UFriendListEntryObject(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FAccountPlatformData GetPlatformInfo() {
		return memory.read<struct FAccountPlatformData>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};


class UItemSlotBunch
{
public:
	UItemSlotBunch(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UItemSlotWidget GetItemSlot0() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UItemSlotWidget(ptr_addr);
	}
	struct UItemSlotWidget GetItemSlot1() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UItemSlotWidget(ptr_addr);
	}
	struct UItemSlotWidget GetItemSlot2() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UItemSlotWidget(ptr_addr);
	}
	struct UWidgetAnimation GetSlotChange_01() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation GetSlotChange_012() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UWidgetAnimation(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicenseSpawnObstacleData
{
public:
	ULicenseSpawnObstacleData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FLicenseMovableActorInfo> GetLicenseSpawnActorDataList() {
		return memory.read<struct TArray<struct FLicenseMovableActorInfo>>(m_addr + 72);
	}
	struct TSoftObjectPtr<UStaticMesh> GetItemCubeMesh() {
		return memory.read<struct TSoftObjectPtr<UStaticMesh>>(m_addr + 88);
	}

private:
	std::uint64_t m_addr = 0;
};


class UEnableSounds
{
public:
	UEnableSounds(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UItemActorTable
{
public:
	UItemActorTable(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULoadingPresetWidget
{
public:
	ULoadingPresetWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ULoadingProfileWidget GetLoadingProfile_1() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct ULoadingProfileWidget(ptr_addr);
	}
	struct ULoadingProfileWidget GetLoadingProfile_2() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct ULoadingProfileWidget(ptr_addr);
	}
	struct ULoadingProfileWidget GetLoadingProfile_3() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct ULoadingProfileWidget(ptr_addr);
	}
	struct ULoadingProfileWidget GetLoadingProfile_4() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct ULoadingProfileWidget(ptr_addr);
	}
	struct ULoadingProfileWidget GetLoadingProfile_5() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct ULoadingProfileWidget(ptr_addr);
	}
	struct ULoadingProfileWidget GetLoadingProfile_6() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct ULoadingProfileWidget(ptr_addr);
	}
	struct ULoadingProfileWidget GetLoadingProfile_7() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct ULoadingProfileWidget(ptr_addr);
	}
	struct ULoadingProfileWidget GetLoadingProfile_8() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct ULoadingProfileWidget(ptr_addr);
	}
	struct TArray<struct ULoadingProfileWidget> GetPlayerContainer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct TArray<struct ULoadingProfileWidget>(ptr_addr);
	}
	struct TArray<struct ULoadingProfileWidget> GetSoloTeamContainer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct TArray<struct ULoadingProfileWidget>(ptr_addr);
	}
	struct TArray<struct ULoadingProfileWidget> GetRedTeamContainer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct TArray<struct ULoadingProfileWidget>(ptr_addr);
	}
	struct TArray<struct ULoadingProfileWidget> GetBlueTeamContainer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return struct TArray<struct ULoadingProfileWidget>(ptr_addr);
	}
	struct TArray<struct ULoadingProfileWidget> GetGreenTeamContainer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 736);
		return struct TArray<struct ULoadingProfileWidget>(ptr_addr);
	}
	struct TArray<struct ULoadingProfileWidget> GetYellowTeamContainer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 752);
		return struct TArray<struct ULoadingProfileWidget>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UItemSlotWidget
{
public:
	UItemSlotWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetSlotId() {
		return memory.read<int32_t>(m_addr + 608);
	}
	struct UImage GetItemSlot() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UImage(ptr_addr);
	}
	struct UImage GetItemSlotBG() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UImage(ptr_addr);
	}
	struct UImage GetItemOutgoing() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UImage(ptr_addr);
	}
	struct UImage GetItemTransitOut() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UImage(ptr_addr);
	}
	struct UWidgetAnimation GetActiveItemAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation GetSpawnItemAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation GetDeactiveItemAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation GetSlideInAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation GetSlideOutAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation GetBoostIconTransition() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation GetAssistGuideAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation GetAimAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidget GetBackgroundEmpty() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct UWidget(ptr_addr);
	}
	struct UWidget GetBackgroundOccupied() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return struct UWidget(ptr_addr);
	}
	struct UTexture2D GetLastItemSlotImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 728);
		return struct UTexture2D(ptr_addr);
	}
	struct UImage GetFocus() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 736);
		return struct UImage(ptr_addr);
	}
	struct UImage GetSlotLockImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 744);
		return struct UImage(ptr_addr);
	}
	struct UOverlay GetSlotOverlay() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 752);
		return struct UOverlay(ptr_addr);
	}
	enum class EItemType GetSlotItem() {
		return memory.read<enum class EItemType>(m_addr + 760);
	}

private:
	std::uint64_t m_addr = 0;
};


class AItemSnowstorm
{
public:
	AItemSnowstorm(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UParticleSystemComponent GetSnowstormParticleComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 856);
		return struct UParticleSystemComponent(ptr_addr);
	}
	struct UBoxComponent GetOverlapComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 864);
		return struct UBoxComponent(ptr_addr);
	}
	struct TSoftObjectPtr<UFMODEvent> GetFiringSound() {
		return memory.read<struct TSoftObjectPtr<UFMODEvent>>(m_addr + 872);
	}
	struct TSoftObjectPtr<UFMODEvent> GetHitSound() {
		return memory.read<struct TSoftObjectPtr<UFMODEvent>>(m_addr + 912);
	}
	struct TSoftObjectPtr<UParticleSystem> GetSnowstormParticle() {
		return memory.read<struct TSoftObjectPtr<UParticleSystem>>(m_addr + 952);
	}
	float GetActionDelay() {
		return memory.read<float>(m_addr + 992);
	}
	float GetLifeSpanTime() {
		return memory.read<float>(m_addr + 996);
	}

private:
	std::uint64_t m_addr = 0;
};


class UServerTimerComponent
{
public:
	UServerTimerComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULicenseSlowdownWidget
{
public:
	ULicenseSlowdownWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UWidgetAnimation GetSlowdown_Anim() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UWidgetAnimation(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UItemTacticalRowWidget
{
public:
	UItemTacticalRowWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetUniqueId() {
		return memory.read<int32_t>(m_addr + 608);
	}
	struct UImage GetV_ItemImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UImage(ptr_addr);
	}
	struct UImage GetV_ItemImageSmall() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UImage(ptr_addr);
	}
	struct UKdTextBlock GetV_NameText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UImage GetV_ItemImageRight() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UImage(ptr_addr);
	}
	struct USizeBox GetV_RightSizeBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct USizeBox(ptr_addr);
	}
	struct USizeBox GetV_LeftSizeBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct USizeBox(ptr_addr);
	}
	struct UKdTextBlock GetV_TacticalStateText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UWidgetAnimation GetAnim_In() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation GetAnim_Out() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation GetAnim_SlideUp() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct TMap<enum class EHitState, struct FText> GetTacticalStateTextContainer() {
		return memory.read<struct TMap<enum class EHitState, struct FText>>(m_addr + 696);
	}
	struct TMap<enum class EHitState, struct FLinearColor> GetTacticalStateTextColorContainer() {
		return memory.read<struct TMap<enum class EHitState, struct FLinearColor>>(m_addr + 776);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKdAccount
{
public:
	UKdAccount(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UKdService GetKartInst() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 368);
		return struct UKdService(ptr_addr);
	}
	struct UGameInstance GetGameInstance() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 376);
		return struct UGameInstance(ptr_addr);
	}
	struct FServerSettingToClient GetserverSetting() {
		return memory.read<struct FServerSettingToClient>(m_addr + 600);
	}
	struct UKdAccountCheatHandler GetCheatHandler() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 752);
		return struct UKdAccountCheatHandler(ptr_addr);
	}
	struct UAccountFuncLibImpl GetFuncLib() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 760);
		return struct UAccountFuncLibImpl(ptr_addr);
	}
	struct UKtRacingPassSet GetSeasonRacingPassSet() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1032);
		return struct UKtRacingPassSet(ptr_addr);
	}
	struct UServerConnection GetServerConnection() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3000);
		return struct UServerConnection(ptr_addr);
	}
	struct UKdServerLoginTask GetLoginTask() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3056);
		return struct UKdServerLoginTask(ptr_addr);
	}
	struct UGfsServerConnection GetGfsServerConnection() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 5080);
		return struct UGfsServerConnection(ptr_addr);
	}
	struct UGfsServer GetGfsServer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 5088);
		return struct UGfsServer(ptr_addr);
	}
	enum class EClientState GetPrevClientState() {
		return memory.read<enum class EClientState>(m_addr + 5448);
	}
	enum class EClientState GetNowClientState() {
		return memory.read<enum class EClientState>(m_addr + 5449);
	}
	struct TMap<struct FString, struct FRaceGameResult> GetRaceGameResults() {
		return memory.read<struct TMap<struct FString, struct FRaceGameResult>>(m_addr + 5544);
	}

private:
	std::uint64_t m_addr = 0;
};


class AItemTeamAiPawn
{
public:
	AItemTeamAiPawn(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrShopInventoryPickupNxA
{
public:
	UPrShopInventoryPickupNxA(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetrequestedTransactionId() {
		return memory.read<struct FString>(m_addr + 72);
	}
	struct TArray<struct FInventoryItemNxA> GetpickedupItems() {
		return memory.read<struct TArray<struct FInventoryItemNxA>>(m_addr + 88);
	}

private:
	std::uint64_t m_addr = 0;
};


class AItemTeamGameMode
{
public:
	AItemTeamGameMode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AItemTeamGameState
{
public:
	AItemTeamGameState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULicenseDriftCheckData
{
public:
	ULicenseDriftCheckData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<float> GetDistance() {
		return memory.read<struct TArray<float>>(m_addr + 72);
	}
	struct TArray<struct FVector> GetLeftPosition() {
		return memory.read<struct TArray<struct FVector>>(m_addr + 88);
	}
	struct TArray<struct FVector> GetRightPosition() {
		return memory.read<struct TArray<struct FVector>>(m_addr + 104);
	}
	float GetGateSize() {
		return memory.read<float>(m_addr + 120);
	}
	int32_t GetIndex() {
		return memory.read<int32_t>(m_addr + 124);
	}
	AActor GetGateActorClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 128);
		return AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UBarricadeDistanceItemSpawn
{
public:
	UBarricadeDistanceItemSpawn(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<float> GetDistance() {
		return memory.read<struct TArray<float>>(m_addr + 112);
	}
	int32_t GetIndex() {
		return memory.read<int32_t>(m_addr + 128);
	}

private:
	std::uint64_t m_addr = 0;
};


class UItemTeamPhaseComponent
{
public:
	UItemTeamPhaseComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AItemUfo
{
public:
	AItemUfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USkeletalMeshComponent GetUfoMeshComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 856);
		return struct USkeletalMeshComponent(ptr_addr);
	}
	struct TSoftObjectPtr<UFMODEvent> GetUsingSound() {
		return memory.read<struct TSoftObjectPtr<UFMODEvent>>(m_addr + 864);
	}
	struct TSoftObjectPtr<UFMODEvent> GetAffectSound() {
		return memory.read<struct TSoftObjectPtr<UFMODEvent>>(m_addr + 904);
	}
	struct TSoftObjectPtr<USkeletalMesh> GetUfoMesh() {
		return memory.read<struct TSoftObjectPtr<USkeletalMesh>>(m_addr + 944);
	}
	struct TSoftObjectPtr<UAnimSequence> GetAttackBeginAnim() {
		return memory.read<struct TSoftObjectPtr<UAnimSequence>>(m_addr + 984);
	}
	struct TSoftObjectPtr<UAnimSequence> GetAttackLoopAnim() {
		return memory.read<struct TSoftObjectPtr<UAnimSequence>>(m_addr + 1024);
	}
	struct TSoftObjectPtr<UAnimSequence> GetAttackEndAnim() {
		return memory.read<struct TSoftObjectPtr<UAnimSequence>>(m_addr + 1064);
	}
	struct TSoftObjectPtr<UAnimSequence> GetDefenseAnim() {
		return memory.read<struct TSoftObjectPtr<UAnimSequence>>(m_addr + 1104);
	}
	struct TSoftObjectPtr<UAnimSequence> GetUfoUseAnim() {
		return memory.read<struct TSoftObjectPtr<UAnimSequence>>(m_addr + 1144);
	}
	struct TSoftObjectPtr<UCurveFloat> GetHeightCurveAsset_Water() {
		return memory.read<struct TSoftObjectPtr<UCurveFloat>>(m_addr + 1184);
	}
	struct TSoftObjectPtr<UCurveFloat> GetHeightCurveAsset_Rocket() {
		return memory.read<struct TSoftObjectPtr<UCurveFloat>>(m_addr + 1224);
	}
	struct TSoftClassPtr<UObject> GetUFO_Bullet() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 1264);
	}
	struct TSoftObjectPtr<ULevelSequence> GetItemFeedSequence() {
		return memory.read<struct TSoftObjectPtr<ULevelSequence>>(m_addr + 1304);
	}
	struct UCurveFloat GetHeightCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1344);
		return struct UCurveFloat(ptr_addr);
	}
	struct UItemComponent GetAuthTarget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1384);
		return struct UItemComponent(ptr_addr);
	}
	struct UItemComponent GetLocalUser() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1392);
		return struct UItemComponent(ptr_addr);
	}
	struct UUfoReaction GetAuthReaction() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1400);
		return struct UUfoReaction(ptr_addr);
	}
	struct UUfoReaction GetLocalReaction() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1408);
		return struct UUfoReaction(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class AItemWaterfly
{
public:
	AItemWaterfly(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USkeletalMeshComponent GetWaterflyMeshComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 864);
		return struct USkeletalMeshComponent(ptr_addr);
	}
	struct UItemComponent GetAuthVictim() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 872);
		return struct UItemComponent(ptr_addr);
	}
	struct TSoftObjectPtr<USkeletalMesh> GetWaterflyMeshAsset() {
		return memory.read<struct TSoftObjectPtr<USkeletalMesh>>(m_addr + 880);
	}
	struct TSoftObjectPtr<UCurveFloat> GetWaterflyCurveAsset() {
		return memory.read<struct TSoftObjectPtr<UCurveFloat>>(m_addr + 920);
	}
	struct TSoftObjectPtr<UAnimSequence> GetWingAnimAsset() {
		return memory.read<struct TSoftObjectPtr<UAnimSequence>>(m_addr + 960);
	}
	struct TSoftObjectPtr<UFMODEvent> GetFireSoundAsset() {
		return memory.read<struct TSoftObjectPtr<UFMODEvent>>(m_addr + 1000);
	}
	struct TSoftObjectPtr<UFMODEvent> GetHitSoundAsset() {
		return memory.read<struct TSoftObjectPtr<UFMODEvent>>(m_addr + 1040);
	}
	struct TSoftClassPtr<UObject> GetWaterfly_Bullet() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 1080);
	}
	struct TSoftObjectPtr<ULevelSequence> GetItemFeedSequence() {
		return memory.read<struct TSoftObjectPtr<ULevelSequence>>(m_addr + 1120);
	}
	struct TSoftClassPtr<UObject> GetBlueAlertWidgetObj() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 1160);
	}
	struct UItemComponent GetLocalVictim() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1288);
		return struct UItemComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UJumpBuff
{
public:
	UJumpBuff(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UKartBodyParam
{
public:
	UKartBodyParam(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetMass() {
		return memory.read<float>(m_addr + 48);
	}
	float GetforwardAccelForce() {
		return memory.read<float>(m_addr + 52);
	}
	float GetdriftEscapeForce() {
		return memory.read<float>(m_addr + 56);
	}
	float GetbackwardAccelForce() {
		return memory.read<float>(m_addr + 60);
	}
	float GetgripBrake() {
		return memory.read<float>(m_addr + 64);
	}
	float GetslipBrake() {
		return memory.read<float>(m_addr + 68);
	}
	bool GetuseTransformBooster() {
		return memory.read<bool>(m_addr + 72);
	}
	float GettransAccelFactor() {
		return memory.read<float>(m_addr + 76);
	}
	float GetboostAccelFactor() {
		return memory.read<float>(m_addr + 80);
	}
	float GetnormalBoosterTime() {
		return memory.read<float>(m_addr + 84);
	}
	float GetteamBoosterTime() {
		return memory.read<float>(m_addr + 88);
	}
	float GetanimalBoosterTime() {
		return memory.read<float>(m_addr + 92);
	}
	float GetstartBoosterTime() {
		return memory.read<float>(m_addr + 96);
	}
	float GetstartBoosterTimeItem() {
		return memory.read<float>(m_addr + 100);
	}
	float GetstartBoosterTimeSpeed() {
		return memory.read<float>(m_addr + 104);
	}
	float GetstartForwardAccelFactor() {
		return memory.read<float>(m_addr + 108);
	}
	float GetstartForwardAccelFactorItem() {
		return memory.read<float>(m_addr + 112);
	}
	float GetstartForwardAccelFactorSpeed() {
		return memory.read<float>(m_addr + 116);
	}
	float GetmaxSteerDeg() {
		return memory.read<float>(m_addr + 120);
	}
	float GetsteerConstraint() {
		return memory.read<float>(m_addr + 124);
	}
	float GetfrontGripFactor() {
		return memory.read<float>(m_addr + 128);
	}
	float GetrearGripFactor() {
		return memory.read<float>(m_addr + 132);
	}
	float GetdriftTrigFactor() {
		return memory.read<float>(m_addr + 136);
	}
	float GetdriftTrigTime() {
		return memory.read<float>(m_addr + 140);
	}
	float GetdriftSlipFactor() {
		return memory.read<float>(m_addr + 144);
	}
	float GetcornerDrawFactor() {
		return memory.read<float>(m_addr + 148);
	}
	float GetdriftLeanFactor() {
		return memory.read<float>(m_addr + 152);
	}
	float GetsteerLeanFactor() {
		return memory.read<float>(m_addr + 156);
	}
	float GetdriftMaxGauge() {
		return memory.read<float>(m_addr + 160);
	}
	float GetdriftGaugePreservePercent() {
		return memory.read<float>(m_addr + 164);
	}
	float GetairFriction() {
		return memory.read<float>(m_addr + 168);
	}
	float GetdragFactor() {
		return memory.read<float>(m_addr + 172);
	}
	float GetantiCollideBalance() {
		return memory.read<float>(m_addr + 176);
	}
	float GetdraftMulAccelFactor() {
		return memory.read<float>(m_addr + 180);
	}
	uint32_t GetdraftTick() {
		return memory.read<uint32_t>(m_addr + 184);
	}
	float GetdriftBoostMulAccelFactor() {
		return memory.read<float>(m_addr + 188);
	}
	uint32_t GetdriftBoostTick() {
		return memory.read<uint32_t>(m_addr + 192);
	}
	float GetchargeBoostBySpeed() {
		return memory.read<float>(m_addr + 196);
	}
	bool GetbUseExtendedAfterBooster() {
		return memory.read<bool>(m_addr + 200);
	}
	float GetboostAccelFactorOnlyItem() {
		return memory.read<float>(m_addr + 204);
	}
	float GetevadeForce() {
		return memory.read<float>(m_addr + 208);
	}
	bool GetbMotorCycleType() {
		return memory.read<bool>(m_addr + 212);
	}
	uint32_t GetspeedSlotCapacity() {
		return memory.read<uint32_t>(m_addr + 216);
	}
	uint32_t GetitemSlotCapacity() {
		return memory.read<uint32_t>(m_addr + 220);
	}
	uint32_t GetspecialSlotCapacity() {
		return memory.read<uint32_t>(m_addr + 224);
	}
	float GetautoChargeLowSpeed() {
		return memory.read<float>(m_addr + 228);
	}
	bool GetbTransformAutoCharge() {
		return memory.read<bool>(m_addr + 232);
	}
	float GetdescEngineGrade() {
		return memory.read<float>(m_addr + 236);
	}
	float GetdescBalance() {
		return memory.read<float>(m_addr + 240);
	}
	float GetdescStability() {
		return memory.read<float>(m_addr + 244);
	}
	float GetdescEnchantCap() {
		return memory.read<float>(m_addr + 248);
	}
	float GetdescCornering() {
		return memory.read<float>(m_addr + 252);
	}
	float GetTransformTime() {
		return memory.read<float>(m_addr + 256);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKartChannelParam
{
public:
	UKartChannelParam(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetMass() {
		return memory.read<float>(m_addr + 48);
	}
	float GetairFriction() {
		return memory.read<float>(m_addr + 52);
	}
	float GetdragFactor() {
		return memory.read<float>(m_addr + 56);
	}
	float GetforwardAccelForce() {
		return memory.read<float>(m_addr + 60);
	}
	float GetbackwardAccelForce() {
		return memory.read<float>(m_addr + 64);
	}
	float GetgripBrake() {
		return memory.read<float>(m_addr + 68);
	}
	float GetslipBrake() {
		return memory.read<float>(m_addr + 72);
	}
	float GetmaxSteerDeg() {
		return memory.read<float>(m_addr + 76);
	}
	float GetsteerConstraint() {
		return memory.read<float>(m_addr + 80);
	}
	float GetfrontGripFactor() {
		return memory.read<float>(m_addr + 84);
	}
	float GetrearGripFactor() {
		return memory.read<float>(m_addr + 88);
	}
	float GetdriftTrigFactor() {
		return memory.read<float>(m_addr + 92);
	}
	float GetdriftTrigTime() {
		return memory.read<float>(m_addr + 96);
	}
	float GetdriftSlipFactor() {
		return memory.read<float>(m_addr + 100);
	}
	float GetdriftEscapeForce() {
		return memory.read<float>(m_addr + 104);
	}
	float GetcornerDrawFactor() {
		return memory.read<float>(m_addr + 108);
	}
	float GetdriftMaxGauge() {
		return memory.read<float>(m_addr + 112);
	}
	float GettransAccelFactor() {
		return memory.read<float>(m_addr + 116);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKartEffectComponent
{
public:
	UKartEffectComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UKartMovementReplication GetReplication() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 184);
		return struct UKartMovementReplication(ptr_addr);
	}
	struct TArray<struct UMaterialInstanceDynamic> GetBoostMaterials() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 256);
		return struct TArray<struct UMaterialInstanceDynamic>(ptr_addr);
	}
	struct FLinearColor GetRear_Light_Color() {
		return memory.read<struct FLinearColor>(m_addr + 416);
	}
	struct TArray<struct UMaterialInstanceDynamic> GetAccelMaterials() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 448);
		return struct TArray<struct UMaterialInstanceDynamic>(ptr_addr);
	}
	struct TArray<struct UMaterialInstanceDynamic> GetRearMaterials() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 496);
		return struct TArray<struct UMaterialInstanceDynamic>(ptr_addr);
	}
	struct AKartSkidMark GetSkidMarkActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 536);
		return struct AKartSkidMark(ptr_addr);
	}
	struct UMaterialInstance GetSkidMarkMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 544);
		return struct UMaterialInstance(ptr_addr);
	}
	struct UParticleSystem GetSkidSmokeParticle() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 552);
		return struct UParticleSystem(ptr_addr);
	}
	struct UKartSkeletalMeshComponent GetKartSkeletalMeshComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UKartSkeletalMeshComponent(ptr_addr);
	}
	struct TArray<struct UParticleSystemComponent> GetArrayAlways() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct TArray<struct UParticleSystemComponent>(ptr_addr);
	}
	struct TArray<struct UParticleSystemComponent> GetArrayIdle() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct TArray<struct UParticleSystemComponent>(ptr_addr);
	}
	struct TArray<struct UParticleSystemComponent> GetArrayIdleWithoutSmoke() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct TArray<struct UParticleSystemComponent>(ptr_addr);
	}
	struct TArray<struct UParticleSystemComponent> GetArrayAccel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct TArray<struct UParticleSystemComponent>(ptr_addr);
	}
	struct TArray<struct UParticleSystemComponent> GetArrayWind() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 728);
		return struct TArray<struct UParticleSystemComponent>(ptr_addr);
	}
	struct TArray<struct UParticleSystemComponent> GetArrayInstanceWind() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 744);
		return struct TArray<struct UParticleSystemComponent>(ptr_addr);
	}
	struct TArray<struct UParticleSystemComponent> GetArrayTransformAccel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 760);
		return struct TArray<struct UParticleSystemComponent>(ptr_addr);
	}
	struct TArray<struct UParticleSystemComponent> GetArrayBoostByItem_Start() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 776);
		return struct TArray<struct UParticleSystemComponent>(ptr_addr);
	}
	struct TArray<struct UParticleSystemComponent> GetArrayBoostByItem_Loop() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 792);
		return struct TArray<struct UParticleSystemComponent>(ptr_addr);
	}
	struct TArray<struct UParticleSystemComponent> GetArrayBoostByItem_End() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 808);
		return struct TArray<struct UParticleSystemComponent>(ptr_addr);
	}
	struct TArray<struct UParticleSystemComponent> GetArrayTransformBoostByItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 824);
		return struct TArray<struct UParticleSystemComponent>(ptr_addr);
	}
	struct TArray<struct UParticleSystemComponent> GetArrayBoostByDrift() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 840);
		return struct TArray<struct UParticleSystemComponent>(ptr_addr);
	}
	struct TArray<struct UParticleSystemComponent> GetArrayTransformBoostByDrift() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 856);
		return struct TArray<struct UParticleSystemComponent>(ptr_addr);
	}
	struct TArray<struct UParticleSystemComponent> GetArrayTrailLeft() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 872);
		return struct TArray<struct UParticleSystemComponent>(ptr_addr);
	}
	struct TArray<struct UParticleSystemComponent> GetArrayTrailRight() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 888);
		return struct TArray<struct UParticleSystemComponent>(ptr_addr);
	}
	struct TArray<struct UNiagaraComponent> GetArrayNIATrailLeft() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 904);
		return struct TArray<struct UNiagaraComponent>(ptr_addr);
	}
	struct TArray<struct UNiagaraComponent> GetArrayNIATrailRight() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 920);
		return struct TArray<struct UNiagaraComponent>(ptr_addr);
	}
	struct TArray<struct UParticleSystemComponent> GetArrayDrift() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 936);
		return struct TArray<struct UParticleSystemComponent>(ptr_addr);
	}
	struct TArray<struct UParticleSystemComponent> GetArrayBoostWheel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 952);
		return struct TArray<struct UParticleSystemComponent>(ptr_addr);
	}
	struct TArray<struct UParticleSystemComponent> GetArraySkidMark() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 968);
		return struct TArray<struct UParticleSystemComponent>(ptr_addr);
	}
	struct TArray<struct UParticleSystemComponent> GetArrayBrake() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 984);
		return struct TArray<struct UParticleSystemComponent>(ptr_addr);
	}
	struct TArray<struct UParticleSystemComponent> GetArraySlipStream() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1000);
		return struct TArray<struct UParticleSystemComponent>(ptr_addr);
	}
	struct TArray<struct UParticleSystemComponent> GetArrayDrafting() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1016);
		return struct TArray<struct UParticleSystemComponent>(ptr_addr);
	}
	struct TArray<struct UParticleSystemComponent> GetArrayItemCubeOverlapping() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1032);
		return struct TArray<struct UParticleSystemComponent>(ptr_addr);
	}
	struct TArray<struct UParticleSystemComponent> GetArrayBoostZone() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1048);
		return struct TArray<struct UParticleSystemComponent>(ptr_addr);
	}
	struct TArray<struct UParticleSystemComponent> GetArrayBoostDelivery() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1064);
		return struct TArray<struct UParticleSystemComponent>(ptr_addr);
	}
	struct TArray<struct UParticleSystemComponent> GetArrayTransformed() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1080);
		return struct TArray<struct UParticleSystemComponent>(ptr_addr);
	}
	struct TArray<struct UParticleSystemComponent> GetArraySurfaceParticle() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1096);
		return struct TArray<struct UParticleSystemComponent>(ptr_addr);
	}
	struct TArray<struct UParticleSystemComponent> GetArrayCrashWeakParticle() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1112);
		return struct TArray<struct UParticleSystemComponent>(ptr_addr);
	}
	struct TArray<struct UParticleSystemComponent> GetArrayCrashStrongParticle() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1128);
		return struct TArray<struct UParticleSystemComponent>(ptr_addr);
	}
	struct TArray<struct UParticleSystemComponent> GetArrayLandRoadParticle() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1144);
		return struct TArray<struct UParticleSystemComponent>(ptr_addr);
	}
	struct UEffectPreset GetEffectPreset() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1160);
		return struct UEffectPreset(ptr_addr);
	}
	struct FKartEffectEvent GetCurrentKartEffectEvent() {
		return memory.read<struct FKartEffectEvent>(m_addr + 1168);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMainmenuComponent
{
public:
	UMainmenuComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UKartGameUserSettings
{
public:
	UKartGameUserSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FPlayerGraphicSettings GetGraphicSetting() {
		return memory.read<struct FPlayerGraphicSettings>(m_addr + 400);
	}
	struct FPlayerGraphicSettings GetLastGraphicSetting() {
		return memory.read<struct FPlayerGraphicSettings>(m_addr + 528);
	}
	struct FPlayerGameSystemSettings GetGameSystemSetting() {
		return memory.read<struct FPlayerGameSystemSettings>(m_addr + 656);
	}
	struct FPlayerGameSystemSettings GetLastGameSystemSetting() {
		return memory.read<struct FPlayerGameSystemSettings>(m_addr + 668);
	}
	struct FPlayerConvenienceSettings GetGameConvenienceSetting() {
		return memory.read<struct FPlayerConvenienceSettings>(m_addr + 680);
	}
	struct FPlayerConvenienceSettings GetLastGameConvenienceSetting() {
		return memory.read<struct FPlayerConvenienceSettings>(m_addr + 704);
	}
	struct FPlayerMobileHUDTypeSettings GetMobileHUDTypeSetting() {
		return memory.read<struct FPlayerMobileHUDTypeSettings>(m_addr + 728);
	}
	struct FPlayerMobileHUDTypeSettings GetLastMobileHUDTypeSetting() {
		return memory.read<struct FPlayerMobileHUDTypeSettings>(m_addr + 740);
	}
	enum class ECustomHUDDataSlotIndex GetLastlySavedCustomHUDDataSlotIndex() {
		return memory.read<enum class ECustomHUDDataSlotIndex>(m_addr + 752);
	}
	uint32_t GetKartVersion() {
		return memory.read<uint32_t>(m_addr + 756);
	}
	float GetLastConfirmedFrameRateLimit() {
		return memory.read<float>(m_addr + 760);
	}
	struct FPlayerAudioVolumeSettings GetAudioVolume() {
		return memory.read<struct FPlayerAudioVolumeSettings>(m_addr + 764);
	}
	struct FPlayerAudioVolumeSettings GetLastAudioVolume() {
		return memory.read<struct FPlayerAudioVolumeSettings>(m_addr + 848);
	}
	uint32_t GetInitBanchMark() {
		return memory.read<uint32_t>(m_addr + 932);
	}
	int32_t GetCultureIndex() {
		return memory.read<int32_t>(m_addr + 936);
	}
	bool GetAutoPartyInviteReject() {
		return memory.read<bool>(m_addr + 940);
	}
	bool GetAutoPartyJoinReject() {
		return memory.read<bool>(m_addr + 941);
	}
	bool GetAutoFriendReject() {
		return memory.read<bool>(m_addr + 942);
	}
	int32_t GetPlatformCultureIndex() {
		return memory.read<int32_t>(m_addr + 944);
	}
	int32_t GetLastCultureIndex() {
		return memory.read<int32_t>(m_addr + 948);
	}
	bool GetbForceFeedbackEffect() {
		return memory.read<bool>(m_addr + 952);
	}
	int32_t GetLatencyType() {
		return memory.read<int32_t>(m_addr + 956);
	}
	struct FString GetSoundInputDeviceName() {
		return memory.read<struct FString>(m_addr + 960);
	}
	struct FString GetSoundOutputDeviceName() {
		return memory.read<struct FString>(m_addr + 976);
	}
	bool GetbSaveRecentReplay() {
		return memory.read<bool>(m_addr + 992);
	}
	int64_t GetAIToRacerCheckTick() {
		return memory.read<int64_t>(m_addr + 1000);
	}
	int64_t GetRacerToAICheckTick() {
		return memory.read<int64_t>(m_addr + 1008);
	}
	bool GetbMustShowItemGuidePopup() {
		return memory.read<bool>(m_addr + 1016);
	}
	bool GetbMustShowSpeedGuidePopup() {
		return memory.read<bool>(m_addr + 1017);
	}
	char GetIsAlreadyShowLicenseGuidePopup() {
		return memory.read<char>(m_addr + 1018);
	}
	struct FString GetIndividualSettingID() {
		return memory.read<struct FString>(m_addr + 1200);
	}

private:
	std::uint64_t m_addr = 0;
};


class USQDistanceWidget
{
public:
	USQDistanceWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UKdTextBlock GetText_DistanceNormal() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UKdTextBlock GetText_DistanceWarning() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UWidgetSwitcher GetWS_Back() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UWidgetSwitcher GetWS_Distance() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UWidgetAnimation GetAnim_Alert() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation GetAnim_Alert_Distance() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UWidgetAnimation(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULiverySubsystem
{
public:
	ULiverySubsystem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ASVGToolsMeshActor GetSVGMeshActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct ASVGToolsMeshActor(ptr_addr);
	}
	struct TArray<struct FLiveryCaptureInfo> GetReservedCaptureList() {
		return memory.read<struct TArray<struct FLiveryCaptureInfo>>(m_addr + 56);
	}
	bool GetbIsCapturing() {
		return memory.read<bool>(m_addr + 72);
	}
	struct ULiveryPaintCollection GetPaintCollection() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 80);
		return struct ULiveryPaintCollection(ptr_addr);
	}
	struct TMap<struct FString, struct USVGToolsMesh> GetSVGMeshPool() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 104);
		return struct TMap<struct FString, struct USVGToolsMesh>(ptr_addr);
	}
	struct TArray<struct FLiveryTextureInfo> GetLiveryTexturePool() {
		return memory.read<struct TArray<struct FLiveryTextureInfo>>(m_addr + 184);
	}
	struct TMap<enum class ELiveryPaintType, struct FLiveryPaintTransform> GetLiveryPaintTransformMap() {
		return memory.read<struct TMap<enum class ELiveryPaintType, struct FLiveryPaintTransform>>(m_addr + 280);
	}
	int32_t GetDrawLiveryFrameSkipIndex() {
		return memory.read<int32_t>(m_addr + 360);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKartInputSettings
{
public:
	UKartInputSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FInputActionKeyMapping> GetDefaultActionMappings() {
		return memory.read<struct TArray<struct FInputActionKeyMapping>>(m_addr + 40);
	}
	struct TArray<struct FInputAxisKeyMapping> GetDefaultAxisMappings() {
		return memory.read<struct TArray<struct FInputAxisKeyMapping>>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKartMovementComponent
{
public:
	UKartMovementComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USpecModifier GetSpecModifier() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 600);
		return struct USpecModifier(ptr_addr);
	}
	struct FVector GetKart_InertiaTensor() {
		return memory.read<struct FVector>(m_addr + 608);
	}
	float GetKart_Mass() {
		return memory.read<float>(m_addr + 620);
	}
	int32_t GetAccumForceCount() {
		return memory.read<int32_t>(m_addr + 856);
	}
	float GetHitAccumStartTime() {
		return memory.read<float>(m_addr + 860);
	}
	bool GetbLastCollision() {
		return memory.read<bool>(m_addr + 864);
	}
	float GetLastUpdateCollisionTime() {
		return memory.read<float>(m_addr + 868);
	}
	struct FKartSteeringExperimental GetKartSteeringExperimental() {
		return memory.read<struct FKartSteeringExperimental>(m_addr + 1776);
	}
	struct FKartMovementBuffArray GetBuffs() {
		return memory.read<struct FKartMovementBuffArray>(m_addr + 2872);
	}
	struct UPhysicalMaterial GetSurfaceInContact() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3216);
		return struct UPhysicalMaterial(ptr_addr);
	}
	struct UPhysicalMaterial GetAssistPhysMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3232);
		return struct UPhysicalMaterial(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKartSkeletalMeshComponent
{
public:
	UKartSkeletalMeshComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UKartBodyParam GetbodyParam() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 3912);
		return struct UKartBodyParam(ptr_addr);
	}
	struct FKartDesc GetKartDesc() {
		return memory.read<struct FKartDesc>(m_addr + 3928);
	}
	struct UBelongingDataAssetKartBody GetKartBodyAsset() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 4488);
		return struct UBelongingDataAssetKartBody(ptr_addr);
	}
	struct USkeletalMeshComponent GetFrontMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 4496);
		return struct USkeletalMeshComponent(ptr_addr);
	}
	struct USkeletalMeshComponent GetBackMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 4504);
		return struct USkeletalMeshComponent(ptr_addr);
	}
	struct USkeletalMeshComponent GetSideMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 4512);
		return struct USkeletalMeshComponent(ptr_addr);
	}
	struct TArray<struct UKartWheelComponent> GetWheelMeshes() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 4520);
		return struct TArray<struct UKartWheelComponent>(ptr_addr);
	}
	struct USkeletalMeshComponent GetHandleMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 4536);
		return struct USkeletalMeshComponent(ptr_addr);
	}
	struct USkeletalMeshComponent GetPlateMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 4544);
		return struct USkeletalMeshComponent(ptr_addr);
	}
	struct UAODecalComponent GetAODecalComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 4552);
		return struct UAODecalComponent(ptr_addr);
	}
	struct UMaterialInstanceDynamic GetKartBodyMaterial_ChangeBySpeed() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 4560);
		return struct UMaterialInstanceDynamic(ptr_addr);
	}
	struct UBalloonComponent GetBalloonComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 4568);
		return struct UBalloonComponent(ptr_addr);
	}
	struct TArray<int32_t> GetLODToFrameSkip() {
		return memory.read<struct TArray<int32_t>>(m_addr + 4600);
	}

private:
	std::uint64_t m_addr = 0;
};


class UScenarioConditionItemWidget
{
public:
	UScenarioConditionItemWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UKdTextBlock GetV_Text_Title() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UKdTextBlock GetV_Text_TargetValue() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UKdTextBlock GetV_Text_Value() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UKdTextBlock(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class USkidMarkMeshComponent
{
public:
	USkidMarkMeshComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UKdCheatHandlerBase
{
public:
	UKdCheatHandlerBase(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULicenseDriftMissionListEntry
{
public:
	ULicenseDriftMissionListEntry(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ULicenseKeyGuideWidget GetV_KeyGuide() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct ULicenseKeyGuideWidget(ptr_addr);
	}
	struct UKdTextBlock GetV_CommandText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UWidgetAnimation GetAnim_Success_On() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation GetAnim_Success_Off() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UWidgetAnimation(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicenseJumpDistanceWidget
{
public:
	ULicenseJumpDistanceWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UKdTextBlock GetV_MeterText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UKdTextBlock(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrShopBalanceNxA
{
public:
	UPrShopBalanceNxA(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString Getcurrency() {
		return memory.read<struct FString>(m_addr + 72);
	}
	struct FString GettotalBalance() {
		return memory.read<struct FString>(m_addr + 88);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKdAssetManager
{
public:
	UKdAssetManager(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class USVGToolsMesh
{
public:
	USVGToolsMesh(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class SVGToolsMeshType GetType() {
		return memory.read<enum class SVGToolsMeshType>(m_addr + 48);
	}
	float GetantialiasingWidth() {
		return memory.read<float>(m_addr + 52);
	}
	float GetScale() {
		return memory.read<float>(m_addr + 56);
	}
	float GetcurveQuality() {
		return memory.read<float>(m_addr + 60);
	}
	float GetQuality() {
		return memory.read<float>(m_addr + 64);
	}
	float GetDepthOffset() {
		return memory.read<float>(m_addr + 68);
	}
	char GetuseLight() {
		return memory.read<char>(m_addr + 72);
	}
	enum class SVGToolsPivotIndex GetpivotIndex() {
		return memory.read<enum class SVGToolsPivotIndex>(m_addr + 76);
	}
	struct FVector2D GetPivot() {
		return memory.read<struct FVector2D>(m_addr + 80);
	}
	float GetcolliderMargin() {
		return memory.read<float>(m_addr + 88);
	}
	float GetcolliderQuality() {
		return memory.read<float>(m_addr + 92);
	}
	float GetcolliderThickness() {
		return memory.read<float>(m_addr + 96);
	}
	char GetgenerateCollider() {
		return memory.read<char>(m_addr + 100);
	}
	uint32_t GetmaterialFlags() {
		return memory.read<uint32_t>(m_addr + 104);
	}
	struct FString GetsvgData() {
		return memory.read<struct FString>(m_addr + 112);
	}
	struct UMaterialInterface GetpMaterial[2]() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 128);
		return struct UMaterialInterface(ptr_addr);
	}
	struct UTexture2D GetpTexture() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 144);
		return struct UTexture2D(ptr_addr);
	}
	struct UBodySetup GetpBodySetup() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 152);
		return struct UBodySetup(ptr_addr);
	}
	struct FBoxSphereBounds GetBounds() {
		return memory.read<struct FBoxSphereBounds>(m_addr + 160);
	}
	uint32_t GetfirstIndex[2]() {
		return memory.read<uint32_t>(m_addr + 188);
	}
	uint32_t GetnumPrimitives[2]() {
		return memory.read<uint32_t>(m_addr + 196);
	}
	int32_t GetnumMaterials() {
		return memory.read<int32_t>(m_addr + 204);
	}
	int32_t GetNumVertices() {
		return memory.read<int32_t>(m_addr + 208);
	}
	char Getuse32Bit() {
		return memory.read<char>(m_addr + 212);
	}
	struct UMaterial GetSVG_MATERIAL_PATHObj() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 520);
		return struct UMaterial(ptr_addr);
	}
	struct UMaterial GetSVG_TEX_MATERIAL_PATHObj() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 528);
		return struct UMaterial(ptr_addr);
	}
	struct UMaterial GetSVG_TEX_RAD_MATERIAL_PATHObj() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 536);
		return struct UMaterial(ptr_addr);
	}
	struct UMaterial GetSVG_TEX_FOCAL_MATERIAL_PATHObj() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 544);
		return struct UMaterial(ptr_addr);
	}
	struct UMaterial GetSVG_TEX_RAD_PAD_MATERIAL_PATHObj() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 552);
		return struct UMaterial(ptr_addr);
	}
	struct UMaterial GetSVG_TEX_RAD_REFLECT_MATERIAL_PATHObj() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 560);
		return struct UMaterial(ptr_addr);
	}
	struct UMaterial GetSVG_TEX_RAD_SELECT_MATERIAL_PATHObj() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 568);
		return struct UMaterial(ptr_addr);
	}
	struct UMaterial GetSVG_TEX_FOCAL_PAD_MATERIAL_PATHObj() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 576);
		return struct UMaterial(ptr_addr);
	}
	struct UMaterial GetSVG_TEX_FOCAL_REFLECT_MATERIAL_PATHObj() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 584);
		return struct UMaterial(ptr_addr);
	}
	struct UMaterial GetSVG_TEX_FOCAL_SELECT_MATERIAL_PATHObj() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 592);
		return struct UMaterial(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ALicenseCoin
{
public:
	ALicenseCoin(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USphereComponent GetCollisionComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 552);
		return struct USphereComponent(ptr_addr);
	}
	struct UStaticMeshComponent GetCoinMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 560);
		return struct UStaticMeshComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTrackPrimaryData
{
public:
	UTrackPrimaryData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftObjectPtr<UWorld> GetMainLevel() {
		return memory.read<struct TSoftObjectPtr<UWorld>>(m_addr + 48);
	}
	struct TSoftObjectPtr<UTexture2D> GetLoadingTexture() {
		return memory.read<struct TSoftObjectPtr<UTexture2D>>(m_addr + 88);
	}
	struct TSoftObjectPtr<UTexture2D> GetMinimapTexture() {
		return memory.read<struct TSoftObjectPtr<UTexture2D>>(m_addr + 128);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicenseAIMissionActorData
{
public:
	ULicenseAIMissionActorData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FText> GetLicenseSpawnActorDataList() {
		return memory.read<struct TArray<struct FText>>(m_addr + 64);
	}
	struct TArray<struct FVector> GetAIPawnOffset() {
		return memory.read<struct TArray<struct FVector>>(m_addr + 80);
	}
	float GetAIPawnSpacing_KnockoutMode() {
		return memory.read<float>(m_addr + 96);
	}
	float GetSpeed() {
		return memory.read<float>(m_addr + 100);
	}
	float GetDelay() {
		return memory.read<float>(m_addr + 104);
	}
	enum class EAIMissionType GetmissionType() {
		return memory.read<enum class EAIMissionType>(m_addr + 108);
	}
	float GetSuccessDistance() {
		return memory.read<float>(m_addr + 112);
	}
	float GetWarningDistance() {
		return memory.read<float>(m_addr + 116);
	}
	float GetKnockOutTime() {
		return memory.read<float>(m_addr + 120);
	}
	bool GetbUseShadowIfAvailable() {
		return memory.read<bool>(m_addr + 124);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTouchSteeringButton
{
public:
	UTouchSteeringButton(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbLeft() {
		return memory.read<bool>(m_addr + 696);
	}
	struct UNamedSlot GetV_KeyGuideSlot() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UNamedSlot(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMiniGameDialog
{
public:
	UMiniGameDialog(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetGameTime() {
		return memory.read<float>(m_addr + 916);
	}
	float GetAllCardOpenWaitTime() {
		return memory.read<float>(m_addr + 920);
	}
	float GetAllCardRewindWaitTime() {
		return memory.read<float>(m_addr + 924);
	}
	int32_t GetMatchedScore() {
		return memory.read<int32_t>(m_addr + 928);
	}
	struct TSoftObjectPtr<UDataTable> GetGameTimeDataTable() {
		return memory.read<struct TSoftObjectPtr<UDataTable>>(m_addr + 968);
	}
	struct TSoftObjectPtr<UDataTable> GetCardImageDataTable() {
		return memory.read<struct TSoftObjectPtr<UDataTable>>(m_addr + 1024);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKdImage
{
public:
	UKdImage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMulticastInlineDelegate GetOnStreamingStarted() {
		return memory.read<struct FMulticastInlineDelegate>(m_addr + 528);
	}
	struct FMulticastInlineDelegate GetOnStreamingComplete() {
		return memory.read<struct FMulticastInlineDelegate>(m_addr + 544);
	}
	struct FDataTableRowHandle GetColorTableSet() {
		return memory.read<struct FDataTableRowHandle>(m_addr + 576);
	}
	enum class ESlateVisibility GetStartStreamingVisibility() {
		return memory.read<enum class ESlateVisibility>(m_addr + 600);
	}
	enum class ESlateVisibility GetCompleteStreamingVisibility() {
		return memory.read<enum class ESlateVisibility>(m_addr + 601);
	}
	struct TWeakObjectPtr<UWidget> GetThrobber() {
		return memory.read<struct TWeakObjectPtr<UWidget>>(m_addr + 604);
	}

private:
	std::uint64_t m_addr = 0;
};


class UOptionLogicComponent
{
public:
	UOptionLogicComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UMuteableVolume GetMasterVolume() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 288);
		return struct UMuteableVolume(ptr_addr);
	}
	struct UMuteableVolume GetBGMVolume() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 296);
		return struct UMuteableVolume(ptr_addr);
	}
	struct UMuteableVolume GetEffectAllVolume() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 304);
		return struct UMuteableVolume(ptr_addr);
	}
	struct UMuteableVolume GetEffectKartVolume() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 312);
		return struct UMuteableVolume(ptr_addr);
	}
	struct UMuteableVolume GetEffectCharacterVolume() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 320);
		return struct UMuteableVolume(ptr_addr);
	}
	struct UMuteableVolume GetEffectAmbientVolume() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 328);
		return struct UMuteableVolume(ptr_addr);
	}
	struct UMuteableVolume GetEffectInGameVolume() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 336);
		return struct UMuteableVolume(ptr_addr);
	}
	struct UMuteableVolume GetEffectUIVolume() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 344);
		return struct UMuteableVolume(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKdCheatManager
{
public:
	UKdCheatManager(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ACheckPoint GetLast() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 152);
		return struct ACheckPoint(ptr_addr);
	}
	struct UUserWidget GetCheatWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 160);
		return struct UUserWidget(ptr_addr);
	}
	struct TSoftClassPtr<UObject> GetCheatWidgetClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 168);
	}
	struct UBuildCaptureWidget GetBuildCaptureWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 248);
		return struct UBuildCaptureWidget(ptr_addr);
	}
	struct UUserWidget GetStartBoostGaugeWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 304);
		return struct UUserWidget(ptr_addr);
	}
	struct USQWidgetCheat GetSQWidgetCheat() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 408);
		return struct USQWidgetCheat(ptr_addr);
	}
	struct UUserWidget GetResolutionWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 456);
		return struct UUserWidget(ptr_addr);
	}
	struct UOptionPageWidget GetOptionPageWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 464);
		return struct UOptionPageWidget(ptr_addr);
	}
	struct UUserWidget GetProfilerWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 520);
		return struct UUserWidget(ptr_addr);
	}
	struct TSoftClassPtr<UObject> GetProfilerWidgetClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 528);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKdCheatHandler
{
public:
	UKdCheatHandler(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UKdCheatService
{
public:
	UKdCheatService(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct UKdCheatHandlerBase> GetHandlers() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct TArray<struct UKdCheatHandlerBase>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class AKdCineCameraActor
{
public:
	AKdCineCameraActor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class ECineCameraActorType GetLookAtActorType() {
		return memory.read<enum class ECineCameraActorType>(m_addr + 2176);
	}
	bool GetLookAtCharacter() {
		return memory.read<bool>(m_addr + 2177);
	}
	float GetFOV() {
		return memory.read<float>(m_addr + 2180);
	}
	bool GetUseUserFOV() {
		return memory.read<bool>(m_addr + 2184);
	}
	bool GetbAttachToDriveCamera() {
		return memory.read<bool>(m_addr + 2185);
	}
	enum class ECineCameraActorType GetPrevLookAtActorType() {
		return memory.read<enum class ECineCameraActorType>(m_addr + 2186);
	}
	struct AActor GetLookAtActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2192);
		return struct AActor(ptr_addr);
	}
	struct AActor GetDriveCameraActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2200);
		return struct AActor(ptr_addr);
	}
	struct FVector GetPrevLookAtActorLocation() {
		return memory.read<struct FVector>(m_addr + 2208);
	}
	bool GetbUseLookAtActorByTransfromOriginActor() {
		return memory.read<bool>(m_addr + 2220);
	}
	struct FTransform GetTransformOrigin() {
		return memory.read<struct FTransform>(m_addr + 2224);
	}
	bool GetbPrevUseLookAtActorByTransformOriginActor() {
		return memory.read<bool>(m_addr + 2272);
	}
	struct FTransform GetPrevTransformOrigin() {
		return memory.read<struct FTransform>(m_addr + 2288);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMovementInterface
{
public:
	UMovementInterface(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UKdControllerConnection
{
public:
	UKdControllerConnection(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AMultiplayTestPlayerController
{
public:
	AMultiplayTestPlayerController(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetSessionApiAddr() {
		return memory.read<struct FString>(m_addr + 1408);
	}
	struct UHttpServerRequester GetSessionApiServer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1424);
		return struct UHttpServerRequester(ptr_addr);
	}
	bool GetbRequestSent() {
		return memory.read<bool>(m_addr + 1432);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKdDPICustomScalingRule
{
public:
	UKdDPICustomScalingRule(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UKdForceFeedbackComponent
{
public:
	UKdForceFeedbackComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbActiveForceFeedback() {
		return memory.read<bool>(m_addr + 176);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKdGameInstance
{
public:
	UKdGameInstance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetInitCheatConfig() {
		return memory.read<struct FString>(m_addr + 424);
	}
	struct UKdService GetKdService() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 440);
		return struct UKdService(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class URequestResultData
{
public:
	URequestResultData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UKdImageTextBlock
{
public:
	UKdImageTextBlock(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetState() {
		return memory.read<struct FName>(m_addr + 1928);
	}
	float GetImageScale() {
		return memory.read<float>(m_addr + 1936);
	}
	struct UKdTextImageDecoratorAsset GetDecoratorAsset() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1944);
		return struct UKdTextImageDecoratorAsset(ptr_addr);
	}
	struct UKeyTextureMap2 GetKeyTextureMap() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1952);
		return struct UKeyTextureMap2(ptr_addr);
	}
	struct UKeyTextureMap2 GetKeyTextureMap_XBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1960);
		return struct UKeyTextureMap2(ptr_addr);
	}
	struct UKeyTextureMap2 GetKeyTextureMap_DualShock() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1968);
		return struct UKeyTextureMap2(ptr_addr);
	}
	UUserWidget GetInlineWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1976);
		return UUserWidget(ptr_addr);
	}
	bool GetbIsButtonText() {
		return memory.read<bool>(m_addr + 1984);
	}

private:
	std::uint64_t m_addr = 0;
};


class ATrackGuide
{
public:
	ATrackGuide(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USplineComponent GetSplineGuideComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 544);
		return struct USplineComponent(ptr_addr);
	}
	float GetArrowInterval() {
		return memory.read<float>(m_addr + 552);
	}
	bool GetIsClosedLoop() {
		return memory.read<bool>(m_addr + 556);
	}
	bool GetbShowAll() {
		return memory.read<bool>(m_addr + 557);
	}
	bool GetbUseClosestPoint() {
		return memory.read<bool>(m_addr + 558);
	}
	float GetTrackGuideWidthScale() {
		return memory.read<float>(m_addr + 560);
	}
	int32_t GetSplitStartIndex() {
		return memory.read<int32_t>(m_addr + 564);
	}
	int32_t GetSplitIndex() {
		return memory.read<int32_t>(m_addr + 568);
	}
	struct TArray<struct FVector2D> GetSubPathSpline() {
		return memory.read<struct TArray<struct FVector2D>>(m_addr + 576);
	}
	struct FVector GetSubPathSplineOffset() {
		return memory.read<struct FVector>(m_addr + 592);
	}
	struct TSoftObjectPtr<UStaticMesh> GetSplineMesh() {
		return memory.read<struct TSoftObjectPtr<UStaticMesh>>(m_addr + 608);
	}
	struct TSoftObjectPtr<UMaterial> GetSplineMeshMaterial() {
		return memory.read<struct TSoftObjectPtr<UMaterial>>(m_addr + 648);
	}
	struct TSoftObjectPtr<UStaticMesh> GetMergedSplineMesh() {
		return memory.read<struct TSoftObjectPtr<UStaticMesh>>(m_addr + 688);
	}
	struct TArray<struct USplineMeshComponent> GetSplineMeshComponentArray() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 752);
		return struct TArray<struct USplineMeshComponent>(ptr_addr);
	}
	struct TArray<struct USplineComponent> GetSplitSplines() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 768);
		return struct TArray<struct USplineComponent>(ptr_addr);
	}
	struct TArray<struct USplineComponent> GetSpline_SubPath() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 784);
		return struct TArray<struct USplineComponent>(ptr_addr);
	}
	struct TMap<struct FString, struct USplineComponent> GetShortCutSplines() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 800);
		return struct TMap<struct FString, struct USplineComponent>(ptr_addr);
	}
	struct USplineComponent GetSpline_RecordPath() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 880);
		return struct USplineComponent(ptr_addr);
	}
	int32_t GetLastSaveTrackGuideVersion() {
		return memory.read<int32_t>(m_addr + 888);
	}
	struct FVector GetLastPosition() {
		return memory.read<struct FVector>(m_addr + 896);
	}
	struct UMaterialInstanceDynamic GetMergedSplineMeshMaterialDynamic() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 920);
		return struct UMaterialInstanceDynamic(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKdLevelLoader
{
public:
	UKdLevelLoader(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMulticastInlineDelegate GetOnAllCompleteLoading() {
		return memory.read<struct FMulticastInlineDelegate>(m_addr + 48);
	}
	struct FMulticastInlineDelegate GetOnSingleCompleteLoading() {
		return memory.read<struct FMulticastInlineDelegate>(m_addr + 64);
	}
	struct FMulticastInlineDelegate GetOnStandbyLoading() {
		return memory.read<struct FMulticastInlineDelegate>(m_addr + 80);
	}
	struct TArray<struct ULevelStreaming> GetLoadedStreamingLevels() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 112);
		return struct TArray<struct ULevelStreaming>(ptr_addr);
	}
	struct TMap<int32_t, struct ULevelStreaming> GetLoadingAllStreamingLevels() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 128);
		return struct TMap<int32_t, struct ULevelStreaming>(ptr_addr);
	}
	struct TMap<int32_t, struct ULevelStreaming> GetLoadingSingleStreamingLevels() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 208);
		return struct TMap<int32_t, struct ULevelStreaming>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULiveryMarketTagIdCache
{
public:
	ULiveryMarketTagIdCache(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAccountLiveryMarket GetAccountLiveryMarket() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 400);
		return struct UAccountLiveryMarket(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class AKdLevelScriptActor
{
public:
	AKdLevelScriptActor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UShadowQuestPlayFinishBGM
{
public:
	UShadowQuestPlayFinishBGM(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AScenarioSkeletalMesh
{
public:
	AScenarioSkeletalMesh(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftObjectPtr<USkeletalMesh> GetMesh() {
		return memory.read<struct TSoftObjectPtr<USkeletalMesh>>(m_addr + 672);
	}
	struct USkeletalMeshComponent GetMeshComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct USkeletalMeshComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKdListView
{
public:
	UKdListView(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetFirstPadding() {
		return memory.read<float>(m_addr + 872);
	}
	float GetLastPadding() {
		return memory.read<float>(m_addr + 876);
	}
	float GetEntryPadding() {
		return memory.read<float>(m_addr + 880);
	}
	bool GetbIsScrollBarVisible() {
		return memory.read<bool>(m_addr + 884);
	}
	struct FScrollBarStyle GetWidgetBarStyle() {
		return memory.read<struct FScrollBarStyle>(m_addr + 888);
	}
	struct FVector2D GetScrollBarThickness() {
		return memory.read<struct FVector2D>(m_addr + 2120);
	}
	struct FMargin GetScrollBarPadding() {
		return memory.read<struct FMargin>(m_addr + 2128);
	}

private:
	std::uint64_t m_addr = 0;
};


class AScenarioGameState
{
public:
	AScenarioGameState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULicenseLogicComponent
{
public:
	ULicenseLogicComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UShadowQuestRemoveResultWidget
{
public:
	UShadowQuestRemoveResultWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UKdPatrolInterface
{
public:
	UKdPatrolInterface(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UKdServicePopup
{
public:
	UKdServicePopup(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UKdPlayerPropTeam
{
public:
	UKdPlayerPropTeam(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UKdPlayerPropPlayMission
{
public:
	UKdPlayerPropPlayMission(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKtPlayMissionDef GetMissionDef() {
		return memory.read<struct FKtPlayMissionDef>(m_addr + 40);
	}
	struct FKtPlayMissionRewardDef GetMissionRewardDef() {
		return memory.read<struct FKtPlayMissionRewardDef>(m_addr + 104);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTimeAttackReplayerStart
{
public:
	UTimeAttackReplayerStart(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULicenseRemovableObstacleData
{
public:
	ULicenseRemovableObstacleData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftObjectPtr<UParticleSystem> GetParticle() {
		return memory.read<struct TSoftObjectPtr<UParticleSystem>>(m_addr + 72);
	}
	struct TArray<struct FLicenseRemovableObstacleInfo> GetRemovableObstacleInfoList() {
		return memory.read<struct TArray<struct FLicenseRemovableObstacleInfo>>(m_addr + 112);
	}

private:
	std::uint64_t m_addr = 0;
};


class AKdSequenceCharacter
{
public:
	AKdSequenceCharacter(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetIndex() {
		return memory.read<int32_t>(m_addr + 544);
	}
	bool GetisWin() {
		return memory.read<bool>(m_addr + 548);
	}
	struct UPodiumRiderNameTagComponent GetRiderNameTag() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 552);
		return struct UPodiumRiderNameTagComponent(ptr_addr);
	}
	struct UCharacterSkeletalMeshComponent GetCharacterSkeletalMeshComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 560);
		return struct UCharacterSkeletalMeshComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class USequenceForceContextComponent
{
public:
	USequenceForceContextComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FString> GetForceTargetName() {
		return memory.read<struct TArray<struct FString>>(m_addr + 176);
	}
	struct FTransform GetTargetTransform() {
		return memory.read<struct FTransform>(m_addr + 192);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicensePatrolActorData
{
public:
	ULicensePatrolActorData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FPatrolLineData> GetLicensePatrolActorDataList() {
		return memory.read<struct TArray<struct FPatrolLineData>>(m_addr + 64);
	}
	struct FLinearColor GetSpecialColor() {
		return memory.read<struct FLinearColor>(m_addr + 80);
	}
	float GetScale() {
		return memory.read<float>(m_addr + 96);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKdServerLoginTask
{
public:
	UKdServerLoginTask(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UServerConnection GetAccountServerConn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 64);
		return struct UServerConnection(ptr_addr);
	}
	struct FKdServerAddrConfig GetServerConfig() {
		return memory.read<struct FKdServerAddrConfig>(m_addr + 160);
	}
	struct UServerRequester GetLoginServerConn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 272);
		return struct UServerRequester(ptr_addr);
	}
	struct UPrAuth GetReceivedPrAuth() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 288);
		return struct UPrAuth(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class AWpLiveryWorker
{
public:
	AWpLiveryWorker(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UCreateTitleWidget
{
public:
	UCreateTitleWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftClassPtr<UObject> GetCreateTitleWidgetClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 72);
	}
	struct ULicenseStartTitleWidget GetTitleWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 112);
		return struct ULicenseStartTitleWidget(ptr_addr);
	}
	struct FText GetChapterTitleText() {
		return memory.read<struct FText>(m_addr + 120);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKdServerLoginTaskDev
{
public:
	UKdServerLoginTaskDev(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UKdServerLoginTaskOSS
{
public:
	UKdServerLoginTaskOSS(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UUserWidget GetLoginConfirmPopup() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 528);
		return struct UUserWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMaterialFxDataAsset
{
public:
	UMaterialFxDataAsset(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<struct FString, struct FCustomMaterialFx> GetCustomMap() {
		return memory.read<struct TMap<struct FString, struct FCustomMaterialFx>>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKdServerLoginTaskLive
{
public:
	UKdServerLoginTaskLive(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UKdServerLoginTaskNxA
{
public:
	UKdServerLoginTaskNxA(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UKdServerLoginTaskSteam
{
public:
	UKdServerLoginTaskSteam(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UCreateLicenseItemCountWidget
{
public:
	UCreateLicenseItemCountWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftClassPtr<UObject> GetLicenseItemCountWidgetClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 72);
	}
	float GetTotalTime() {
		return memory.read<float>(m_addr + 112);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKdSessionComponent
{
public:
	UKdSessionComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetgameId() {
		return memory.read<struct FString>(m_addr + 176);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrGetMail
{
public:
	UPrGetMail(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKtMail GetMail() {
		return memory.read<struct FKtMail>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class AKdWorldSettings
{
public:
	AKdWorldSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UKdSignificanceManager
{
public:
	UKdSignificanceManager(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UKdSoundComponent
{
public:
	UKdSoundComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FFMODPlayHelper GetEngineSoundComp() {
		return memory.read<struct FFMODPlayHelper>(m_addr + 184);
	}
	struct FFMODPlayHelper GetDriftSoundComp() {
		return memory.read<struct FFMODPlayHelper>(m_addr + 216);
	}
	struct FFMODPlayHelper GetBoostSoundComp() {
		return memory.read<struct FFMODPlayHelper>(m_addr + 248);
	}
	struct FFMODPlayHelper GetBurstBoostSoundComp() {
		return memory.read<struct FFMODPlayHelper>(m_addr + 280);
	}
	struct FFMODPlayHelper GetStartBoostSoundComp() {
		return memory.read<struct FFMODPlayHelper>(m_addr + 312);
	}
	struct FFMODPlayHelper GetSlipStreamSoundComp() {
		return memory.read<struct FFMODPlayHelper>(m_addr + 344);
	}
	struct FFMODPlayHelper GetDraftingSoundComp() {
		return memory.read<struct FFMODPlayHelper>(m_addr + 376);
	}
	struct FFMODPlayHelper GetShockSoundComp() {
		return memory.read<struct FFMODPlayHelper>(m_addr + 408);
	}
	struct FFMODPlayHelper GetBoosterPlaySoundComp() {
		return memory.read<struct FFMODPlayHelper>(m_addr + 440);
	}
	struct FFMODPlayHelper GetCrashSoundComp() {
		return memory.read<struct FFMODPlayHelper>(m_addr + 472);
	}
	struct FFMODPlayHelper GetTransformSoundComp() {
		return memory.read<struct FFMODPlayHelper>(m_addr + 504);
	}
	struct FFMODPlayHelper GetUnTransformSoundComp() {
		return memory.read<struct FFMODPlayHelper>(m_addr + 536);
	}
	struct FFMODPlayHelper GetBoostZoneSoundComp() {
		return memory.read<struct FFMODPlayHelper>(m_addr + 568);
	}
	struct FFMODPlayHelper GetJumpZoneSoundComp() {
		return memory.read<struct FFMODPlayHelper>(m_addr + 600);
	}
	struct FFMODPlayHelper GetDeliveryZoneSoundComp() {
		return memory.read<struct FFMODPlayHelper>(m_addr + 632);
	}
	struct FFMODPlayHelper GetJustStartBoostSoundComp() {
		return memory.read<struct FFMODPlayHelper>(m_addr + 664);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKdSoundWidget
{
public:
	UKdSoundWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UFMODEvent GetSoundEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UFMODEvent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKdTileView
{
public:
	UKdTileView(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbIsScrollBarVisible() {
		return memory.read<bool>(m_addr + 904);
	}
	struct FScrollBarStyle GetWidgetBarStyle() {
		return memory.read<struct FScrollBarStyle>(m_addr + 912);
	}
	struct FVector2D GetScrollBarThickness() {
		return memory.read<struct FVector2D>(m_addr + 2144);
	}
	struct FMargin GetScrollBarPadding() {
		return memory.read<struct FMargin>(m_addr + 2152);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKdTraveler
{
public:
	UKdTraveler(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UKtRaceSettings GetMatchGameSettings() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 256);
		return struct UKtRaceSettings(ptr_addr);
	}
	struct UKtRaceDetails GetMatchRaceDetails() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 264);
		return struct UKtRaceDetails(ptr_addr);
	}
	struct FKtClientTrackDef GetMatchTrackDef() {
		return memory.read<struct FKtClientTrackDef>(m_addr + 328);
	}
	struct ULoadingWidgetBase GetLoadingWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct ULoadingWidgetBase(ptr_addr);
	}
	struct ULoadingWidgetBase GetLoadingMovieWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct ULoadingWidgetBase(ptr_addr);
	}
	UUserWidget GetLoadingWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return UUserWidget(ptr_addr);
	}
	UUserWidget GetTransitionWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return UUserWidget(ptr_addr);
	}
	struct UMaterialInstanceConstant GetLoadingImageMaterialInstance() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct UMaterialInstanceConstant(ptr_addr);
	}
	struct TArray<struct UUserWidget> GetLoadingWidgetContainer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return struct TArray<struct UUserWidget>(ptr_addr);
	}
	struct TArray<struct UUserWidget> GetLoadingMovieWidgetContainer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 736);
		return struct TArray<struct UUserWidget>(ptr_addr);
	}
	struct TArray<struct UUserWidget> GetLoadingTransitionWidgetContainer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 752);
		return struct TArray<struct UUserWidget>(ptr_addr);
	}
	struct USingleModeLoadingImagePool GetSingleModeLoadingImagePool() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 768);
		return struct USingleModeLoadingImagePool(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKdUserObjectListEntry
{
public:
	UKdUserObjectListEntry(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULicenseBossHPWidget
{
public:
	ULicenseBossHPWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UProgressBar GetV_BossHPGauge() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UProgressBar(ptr_addr);
	}
	struct UTextBlock GetV_DamageText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UTextBlock(ptr_addr);
	}
	struct UWidgetAnimation GetAnim_BossDamage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct FVector GetCharactorPivot() {
		return memory.read<struct FVector>(m_addr + 632);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKdVersionChecker
{
public:
	UKdVersionChecker(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UParseScenarioOptions
{
public:
	UParseScenarioOptions(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UKdVersionCheckerNgmConfig
{
public:
	UKdVersionCheckerNgmConfig(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FKdVersionCheckerNgmServerInfo> GetServerInfos() {
		return memory.read<struct TArray<struct FKdVersionCheckerNgmServerInfo>>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKdVersionCheckerNgm
{
public:
	UKdVersionCheckerNgm(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UKeyViewerWidget
{
public:
	UKeyViewerWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UImage GetUp() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UImage(ptr_addr);
	}
	struct UImage GetDown() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UImage(ptr_addr);
	}
	struct UImage GetLeft() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UImage(ptr_addr);
	}
	struct UImage GetRight() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UImage(ptr_addr);
	}
	struct UImage Getshift() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UImage(ptr_addr);
	}
	struct UImage Getctrl() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UImage(ptr_addr);
	}
	struct AActor GetOwningActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKtSessionObserver
{
public:
	UKtSessionObserver(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKtSessionRaceObserverRequest GetFromRequest() {
		return memory.read<struct FKtSessionRaceObserverRequest>(m_addr + 128);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKtSessionPlayer
{
public:
	UKtSessionPlayer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKtSessionRacePlayerRequest GetFromRequest() {
		return memory.read<struct FKtSessionRacePlayerRequest>(m_addr + 136);
	}

private:
	std::uint64_t m_addr = 0;
};


class ALandingPointDecal
{
public:
	ALandingPointDecal(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USceneComponent GetDefaultSceneRoot() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 544);
		return struct USceneComponent(ptr_addr);
	}
	struct UDecalComponent GetDecalComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 552);
		return struct UDecalComponent(ptr_addr);
	}
	struct UParticleSystemComponent GetParticleSystemComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 560);
		return struct UParticleSystemComponent(ptr_addr);
	}
	struct UParticleSystemComponent GetParticleSystemComponent_End() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 568);
		return struct UParticleSystemComponent(ptr_addr);
	}
	struct UCurveFloat GetDestroyCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 576);
		return struct UCurveFloat(ptr_addr);
	}
	int32_t GetMaterialIndex() {
		return memory.read<int32_t>(m_addr + 584);
	}
	struct UMaterialInstanceDynamic GetMID_Decal() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 592);
		return struct UMaterialInstanceDynamic(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULapCountWidget
{
public:
	ULapCountWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTextBlock GetMaxLapCountText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock GetLapCountText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock GetLapCountTextBefore() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock GetFinalLapText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UTextBlock(ptr_addr);
	}
	struct UWidgetAnimation GetLapIncreasing() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation GetFinalAppears() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UWidgetAnimation(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULapWidget
{
public:
	ULapWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ULapTimeWidget GetLapTimeWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct ULapTimeWidget(ptr_addr);
	}
	struct ULapCountWidget GetLapCountWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct ULapCountWidget(ptr_addr);
	}
	int32_t GetTotalLapCount() {
		return memory.read<int32_t>(m_addr + 624);
	}
	struct URaceTimeComponent GetRaceTimeComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct URaceTimeComponent(ptr_addr);
	}
	struct URaceProgressComponent GetRaceProgressComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct URaceProgressComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class USideMirrorWidget
{
public:
	USideMirrorWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UImage GetSceneImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UImage(ptr_addr);
	}
	struct ASceneCaptureActor GetSceneCaptureActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct ASceneCaptureActor(ptr_addr);
	}
	struct USideMirrorCameraComponent GetCameraComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct USideMirrorCameraComponent(ptr_addr);
	}
	struct TArray<struct APawn> GetPawnList() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct TArray<struct APawn>(ptr_addr);
	}
	struct UWidgetAnimation GetStressInAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation GetStressOnAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation GetStressOutAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UWidgetAnimation(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class URacingPassLogicComponent
{
public:
	URacingPassLogicComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULevelActorResetComponent
{
public:
	ULevelActorResetComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UM_KartUpgradePageWidget
{
public:
	UM_KartUpgradePageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UCreateLicenseFailureWidget
{
public:
	UCreateLicenseFailureWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftClassPtr<UObject> GetLicenseFailureWidgetClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 72);
	}
	struct UDialogTemplate GetLicenseFailureWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 112);
		return struct UDialogTemplate(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULevelBGMControlComponent
{
public:
	ULevelBGMControlComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UFMODAudioComponent GetBGMAudioComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 176);
		return struct UFMODAudioComponent(ptr_addr);
	}
	struct UFMODEvent GetLastEvent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 184);
		return struct UFMODEvent(ptr_addr);
	}
	struct TArray<struct UFMODEvent> GetLoadingBGMList() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 192);
		return struct TArray<struct UFMODEvent>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class USideMenuLogicComponent
{
public:
	USideMenuLogicComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ALevelSequenceTrack
{
public:
	ALevelSequenceTrack(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULicenseAIDistanceWidget
{
public:
	ULicenseAIDistanceWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UOverlay GetV_Overlay() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UOverlay(ptr_addr);
	}
	struct UKdTextBlock GetText_DistanceNormal() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UKdTextBlock GetText_DistanceWarning() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UWidgetSwitcher GetWS_Back() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UWidgetSwitcher GetWS_Distance() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UWidgetAnimation GetAnim_Alert() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation GetAnim_Alert_Distance() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UWidgetAnimation(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicenseCalcDistanceRule
{
public:
	ULicenseCalcDistanceRule(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetCheckPointOrTrackLineName() {
		return memory.read<struct FString>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};


class UBarricadeDistanceItemSpawnInAdvance
{
public:
	UBarricadeDistanceItemSpawnInAdvance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbHitLoseRule() {
		return memory.read<bool>(m_addr + 88);
	}
	int32_t GetHitScore() {
		return memory.read<int32_t>(m_addr + 92);
	}
	struct TArray<struct FBarricadeItemSpawnStruct> GetSpawnList() {
		return memory.read<struct TArray<struct FBarricadeItemSpawnStruct>>(m_addr + 96);
	}

private:
	std::uint64_t m_addr = 0;
};


class UScenarioHudWidget
{
public:
	UScenarioHudWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULicenseCheckDriftBoostData
{
public:
	ULicenseCheckDriftBoostData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetDriftBoostScore() {
		return memory.read<int32_t>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMajorPodiumWidget
{
public:
	UMajorPodiumWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UMediaWallGameInfoWidget GetMediaWallGameInfoWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UMediaWallGameInfoWidget(ptr_addr);
	}
	struct TSoftObjectPtr<UMediaPlaylist> GetTrackMediaPlayList() {
		return memory.read<struct TSoftObjectPtr<UMediaPlaylist>>(m_addr + 616);
	}
	struct TSoftObjectPtr<UTexture2D> GetTrackMediaLoadingImage() {
		return memory.read<struct TSoftObjectPtr<UTexture2D>>(m_addr + 656);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicenseCheckItemUseComponent
{
public:
	ULicenseCheckItemUseComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ULicenseCheckItemUseData GetData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 192);
		return struct ULicenseCheckItemUseData(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicenseContentDebugger
{
public:
	ULicenseContentDebugger(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULicenseItemSpawnData
{
public:
	ULicenseItemSpawnData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class EItemType GetItemType() {
		return memory.read<enum class EItemType>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};


class ASequencerAniActor
{
public:
	ASequencerAniActor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class ENotifyMajorGamePhase GetPhase() {
		return memory.read<enum class ENotifyMajorGamePhase>(m_addr + 552);
	}
	struct TSoftObjectPtr<ULevelSequence> GetLevelSequence() {
		return memory.read<struct TSoftObjectPtr<ULevelSequence>>(m_addr + 560);
	}
	struct FMovieSceneSequencePlaybackSettings GetSequencePlaybackSettings() {
		return memory.read<struct FMovieSceneSequencePlaybackSettings>(m_addr + 600);
	}
	struct ULevelSequencePlayer GetLevelSequencePlayer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct ULevelSequencePlayer(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UItemSpawningRule
{
public:
	UItemSpawningRule(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct USceneComponent> GetGuideComponents() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return struct TArray<struct USceneComponent>(ptr_addr);
	}
	struct TArray<struct UTextRenderComponent> GetCountDownGuide() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 88);
		return struct TArray<struct UTextRenderComponent>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UScenarioCollectDataComponent
{
public:
	UScenarioCollectDataComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<struct FScenarioIdentifier, struct FScenarioCollectData> GetCollectDataContainer() {
		return memory.read<struct TMap<struct FScenarioIdentifier, struct FScenarioCollectData>>(m_addr + 176);
	}
	struct UScenarioComponent GetCahcedScenarioComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 256);
		return struct UScenarioComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class URaceGameTransition
{
public:
	URaceGameTransition(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct URaceTimeComponent GetRaceTimeComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return struct URaceTimeComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicenseAIDistanceInterface
{
public:
	ULicenseAIDistanceInterface(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ALicenseTrafficCone
{
public:
	ALicenseTrafficCone(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULicenseSpawnActorData
{
public:
	ULicenseSpawnActorData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FLicenseStaticActorInfo> GetLicenseSpawnActorDataList() {
		return memory.read<struct TArray<struct FLicenseStaticActorInfo>>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class AAttachingModelFactory
{
public:
	AAttachingModelFactory(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USkeletalMeshComponent GetSkeletalMeshComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 544);
		return struct USkeletalMeshComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicenseSpeedData
{
public:
	ULicenseSpeedData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class URandomDistanceItemSpawn
{
public:
	URandomDistanceItemSpawn(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<float> GetDistance() {
		return memory.read<struct TArray<float>>(m_addr + 112);
	}
	int32_t GetIndex() {
		return memory.read<int32_t>(m_addr + 128);
	}
	struct TArray<enum class EItemType> GetRandomType() {
		return memory.read<struct TArray<enum class EItemType>>(m_addr + 136);
	}
	struct TArray<enum class EItemType> GetTempRandomType() {
		return memory.read<struct TArray<enum class EItemType>>(m_addr + 152);
	}

private:
	std::uint64_t m_addr = 0;
};


class USimulationMovementComponent
{
public:
	USimulationMovementComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULicenseDraftTargetActorData
{
public:
	ULicenseDraftTargetActorData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FText> GetLicenseSpawnActorDataList() {
		return memory.read<struct TArray<struct FText>>(m_addr + 64);
	}
	float GetOffset() {
		return memory.read<float>(m_addr + 80);
	}
	float GetSpeed() {
		return memory.read<float>(m_addr + 84);
	}
	float GetSpawnDistance() {
		return memory.read<float>(m_addr + 88);
	}
	float GetOvertakingTime() {
		return memory.read<float>(m_addr + 92);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicenseDraftTargetSpawnComponent
{
public:
	ULicenseDraftTargetSpawnComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ULicenseDraftTargetActorData GetData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 192);
		return struct ULicenseDraftTargetActorData(ptr_addr);
	}
	float GetSpawnLastTime() {
		return memory.read<float>(m_addr + 200);
	}
	float GetDraftLastTime() {
		return memory.read<float>(m_addr + 204);
	}
	bool GetScoreGate() {
		return memory.read<bool>(m_addr + 208);
	}
	struct TArray<struct AActor> GetSpawnedActors() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 216);
		return struct TArray<struct AActor>(ptr_addr);
	}
	struct UCurveFloat GetSpawnCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 232);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat GetDestroyCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 240);
		return struct UCurveFloat(ptr_addr);
	}
	struct AActor GetPawn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 248);
		return struct AActor(ptr_addr);
	}
	struct TSoftObjectPtr<UCurveFloat> GetCurveFloat() {
		return memory.read<struct TSoftObjectPtr<UCurveFloat>>(m_addr + 296);
	}
	struct TSoftObjectPtr<UCurveFloat> GetCurveFloat2() {
		return memory.read<struct TSoftObjectPtr<UCurveFloat>>(m_addr + 336);
	}
	struct TSoftObjectPtr<UStaticMesh> GetAIKartMesh() {
		return memory.read<struct TSoftObjectPtr<UStaticMesh>>(m_addr + 376);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicenseDriftGaugeData
{
public:
	ULicenseDriftGaugeData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class ELicenseGaugeMissionType GetmissionType() {
		return memory.read<enum class ELicenseGaugeMissionType>(m_addr + 88);
	}
	int32_t GetScore() {
		return memory.read<int32_t>(m_addr + 92);
	}
	struct TSoftObjectPtr<UStaticMesh> GetGateMeshClass() {
		return memory.read<struct TSoftObjectPtr<UStaticMesh>>(m_addr + 96);
	}
	float GetGateSize() {
		return memory.read<float>(m_addr + 136);
	}
	struct TSoftClassPtr<UObject> GetMissionWidgetClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 144);
	}
	struct TArray<struct FLicenseDriftGaugeDef> GetLicenseDriftGaugeDefVector() {
		return memory.read<struct TArray<struct FLicenseDriftGaugeDef>>(m_addr + 184);
	}
	float GetParticleScaleMultiplier() {
		return memory.read<float>(m_addr + 200);
	}
	struct FVector GetParticleLocationOffset() {
		return memory.read<struct FVector>(m_addr + 204);
	}
	struct TSoftObjectPtr<UParticleSystem> GetGateParticle() {
		return memory.read<struct TSoftObjectPtr<UParticleSystem>>(m_addr + 216);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicenseDriftGaugeComponent
{
public:
	ULicenseDriftGaugeComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ULicenseDriftGaugeData GetData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 200);
		return struct ULicenseDriftGaugeData(ptr_addr);
	}
	struct UParticleSystem GetGateParticleSystem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 208);
		return struct UParticleSystem(ptr_addr);
	}
	struct TArray<struct AActor> GetGateList() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 216);
		return struct TArray<struct AActor>(ptr_addr);
	}
	struct AKdPawn GetPawn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 256);
		return struct AKdPawn(ptr_addr);
	}
	struct ULicenseMissionTitleWidget GetMissionWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 264);
		return struct ULicenseMissionTitleWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicenseDriftMissionData
{
public:
	ULicenseDriftMissionData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FLicenseDriftMissionGateDef> GetLicenseDriftMissionGateDefVector() {
		return memory.read<struct TArray<struct FLicenseDriftMissionGateDef>>(m_addr + 88);
	}
	struct TArray<struct FDriftMissionStruct> GetDriftCountDuration() {
		return memory.read<struct TArray<struct FDriftMissionStruct>>(m_addr + 104);
	}
	int32_t GetMissionPoints() {
		return memory.read<int32_t>(m_addr + 120);
	}
	int32_t GetDriftBonusPoints() {
		return memory.read<int32_t>(m_addr + 124);
	}
	bool GetbIgnoreHitWall() {
		return memory.read<bool>(m_addr + 128);
	}
	bool GetbConstantMission() {
		return memory.read<bool>(m_addr + 129);
	}
	int32_t GetIndex() {
		return memory.read<int32_t>(m_addr + 132);
	}
	struct TSoftObjectPtr<UStaticMesh> GetGateMeshClass() {
		return memory.read<struct TSoftObjectPtr<UStaticMesh>>(m_addr + 136);
	}
	float GetGateSize() {
		return memory.read<float>(m_addr + 176);
	}
	float GetParticleScaleMultiplier() {
		return memory.read<float>(m_addr + 180);
	}
	struct FVector GetParticleLocationOffset() {
		return memory.read<struct FVector>(m_addr + 184);
	}
	struct TSoftObjectPtr<UParticleSystem> GetGateParticle() {
		return memory.read<struct TSoftObjectPtr<UParticleSystem>>(m_addr + 200);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicenseDriftMissionWidget
{
public:
	ULicenseDriftMissionWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UKdTextBlock GetV_ChapterTitle() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UKdTextBlock GetV_Count_Text() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UKdTextBlock GetV_TotalCount_Text() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UKdListView GetV_MissionList() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UKdListView(ptr_addr);
	}
	struct UWidgetAnimation GetAnim_CountText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UWidgetAnimation(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicenseDynamicItemCubeComponent
{
public:
	ULicenseDynamicItemCubeComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetIndex() {
		return memory.read<int32_t>(m_addr + 176);
	}
	struct AActor GetPawn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 184);
		return struct AActor(ptr_addr);
	}
	struct ULicenseDynamicItemCubeData GetData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 192);
		return struct ULicenseDynamicItemCubeData(ptr_addr);
	}
	struct TArray<struct AGoItem_Cube> GetItemCubeList() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 200);
		return struct TArray<struct AGoItem_Cube>(ptr_addr);
	}
	enum class EItemType GetLastUseItem() {
		return memory.read<enum class EItemType>(m_addr + 216);
	}
	struct TSoftClassPtr<UObject> GetItemCubeClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 224);
	}
	struct TSoftObjectPtr<UStaticMesh> GetItemCubeMeshClass() {
		return memory.read<struct TSoftObjectPtr<UStaticMesh>>(m_addr + 264);
	}

private:
	std::uint64_t m_addr = 0;
};


class USendTMIRaceEventData
{
public:
	USendTMIRaceEventData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UGameTipLoadingWidget
{
public:
	UGameTipLoadingWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UKdImageTextBlock GetV_GameTipText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UKdImageTextBlock(ptr_addr);
	}
	struct UButtonTemplate GetV_NextTipButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UButtonTemplate(ptr_addr);
	}
	struct UGameTipPool GetGameTipPool() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UGameTipPool(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicenseGameLoadingWidget
{
public:
	ULicenseGameLoadingWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UProgressBar GetV_LoadingProgressBar() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UProgressBar(ptr_addr);
	}
	struct UProgressBar GetV_LoadingProgressBarRightDeco() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UProgressBar(ptr_addr);
	}
	struct USpacer GetV_LeftIndentSpace() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct USpacer(ptr_addr);
	}
	struct USpacer GetV_RightIndentSpace() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct USpacer(ptr_addr);
	}
	struct UKdTextBlock GetV_MissionInfoTitle() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UKdTextBlock(ptr_addr);
	}
	struct ULicensePauseDescWidget GetV_LicenseInfoListEntry1() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct ULicensePauseDescWidget(ptr_addr);
	}
	struct ULicensePauseDescWidget GetV_LicenseInfoListEntry2() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return struct ULicensePauseDescWidget(ptr_addr);
	}
	struct ULicensePauseDescWidget GetV_LicenseInfoListEntry3() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 728);
		return struct ULicensePauseDescWidget(ptr_addr);
	}
	struct ULicensePauseDescWidget GetV_LicenseInfoListEntry4() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 736);
		return struct ULicensePauseDescWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicenseJumpDistanceSplashWidget
{
public:
	ULicenseJumpDistanceSplashWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UKdTextBlock GetV_MeterText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UWidgetAnimation GetAnim_In() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UWidgetAnimation(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPlatformPatcherInterface
{
public:
	UPlatformPatcherInterface(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ALoginPlayerController
{
public:
	ALoginPlayerController(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULicenseJumpPhysics
{
public:
	ULicenseJumpPhysics(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FLicenseJumpPhysicsData GetLicenseJumpPhysicsData() {
		return memory.read<struct FLicenseJumpPhysicsData>(m_addr + 64);
	}
	struct TSoftClassPtr<UObject> GetJumpDistanceWidgetClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 160);
	}
	struct TSoftClassPtr<UObject> GetJumpDistanceSplashWidgetClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 200);
	}

private:
	std::uint64_t m_addr = 0;
};


class UInitDraftSpawnComponent
{
public:
	UInitDraftSpawnComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ALicenseJumpPhysicsZone
{
public:
	ALicenseJumpPhysicsZone(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ULicenseJumpPhysics GetData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 576);
		return struct ULicenseJumpPhysics(ptr_addr);
	}
	struct AActor GetOtherActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 584);
		return struct AActor(ptr_addr);
	}
	struct ULicenseJumpDistanceWidget GetJumpDistanceWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 592);
		return struct ULicenseJumpDistanceWidget(ptr_addr);
	}
	struct ULicenseJumpDistanceSplashWidget GetJumpDistanceSplashWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 600);
		return struct ULicenseJumpDistanceSplashWidget(ptr_addr);
	}
	struct FVector GetStartPos() {
		return memory.read<struct FVector>(m_addr + 608);
	}
	struct FVector GetEndPos() {
		return memory.read<struct FVector>(m_addr + 620);
	}
	float GetDistance() {
		return memory.read<float>(m_addr + 632);
	}
	struct UKdLevelSequencePlayer GetSequencePlayer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UKdLevelSequencePlayer(ptr_addr);
	}
	struct ALevelSequenceActor GetNewActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct ALevelSequenceActor(ptr_addr);
	}
	struct APawn GetPawn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct APawn(ptr_addr);
	}
	bool GetbAddScoreGate() {
		return memory.read<bool>(m_addr + 664);
	}
	struct UFMODEvent GetSound_A() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UFMODEvent(ptr_addr);
	}
	bool GetbLand() {
		return memory.read<bool>(m_addr + 680);
	}
	float GetLastCrashTime() {
		return memory.read<float>(m_addr + 684);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicenseKeyGuideWidget
{
public:
	ULicenseKeyGuideWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPanelWidget GetV_Panel_KeyContainer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UPanelWidget(ptr_addr);
	}
	UKeyIconWidget GetKeyIconWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return UKeyIconWidget(ptr_addr);
	}
	UUserWidget GetKeyLinkWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return UUserWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class AScenarioKeyTrigger
{
public:
	AScenarioKeyTrigger(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FScenarioKey> GetTriggeringKeys() {
		return memory.read<struct TArray<struct FScenarioKey>>(m_addr + 624);
	}
	enum class EScenarioKeyState GetState() {
		return memory.read<enum class EScenarioKeyState>(m_addr + 640);
	}
	struct TArray<struct FScenarioTriggerTarget> GetTriggerContainer() {
		return memory.read<struct TArray<struct FScenarioTriggerTarget>>(m_addr + 648);
	}
	bool GetbInputHandle() {
		return memory.read<bool>(m_addr + 664);
	}
	bool GetbLockEtcInput() {
		return memory.read<bool>(m_addr + 665);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicenseCardEmblemWidget
{
public:
	ULicenseCardEmblemWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FSlateBrush GetInst_LicenseTextImg() {
		return memory.read<struct FSlateBrush>(m_addr + 608);
	}
	struct FSlateBrush GetInst_LicenseTextImg_NotGain() {
		return memory.read<struct FSlateBrush>(m_addr + 744);
	}
	struct UWidgetSwitcher GetV_WS_BG() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 880);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UWidgetSwitcher GetV_WS_MoveLight() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 888);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UImage GetV_Color1() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 896);
		return struct UImage(ptr_addr);
	}
	struct UImage GetV_Color2() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 904);
		return struct UImage(ptr_addr);
	}
	struct UImage GetV_ImgLicenseText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 912);
		return struct UImage(ptr_addr);
	}
	struct UImage GetV_ImgLicenseTextBg() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 920);
		return struct UImage(ptr_addr);
	}
	struct UImage GetV_GradeLogo() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 928);
		return struct UImage(ptr_addr);
	}
	struct UImage GetV_EmblemMoveLight() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 936);
		return struct UImage(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULiveryComponent
{
public:
	ULiveryComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetReplicatedLiveryUniqueId() {
		return memory.read<struct FString>(m_addr + 192);
	}
	bool GetbEnableReplicatedLivery() {
		return memory.read<bool>(m_addr + 208);
	}
	struct UKartSkeletalMeshComponent GetKartSkeletalMeshComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 224);
		return struct UKartSkeletalMeshComponent(ptr_addr);
	}
	struct TArray<struct UMaterialInstanceDynamic> GetDecalMaterials() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 232);
		return struct TArray<struct UMaterialInstanceDynamic>(ptr_addr);
	}
	bool GetbHasApplyLivery() {
		return memory.read<bool>(m_addr + 384);
	}
	bool GetbVisibleLiveryBoundary() {
		return memory.read<bool>(m_addr + 385);
	}
	enum class ELiveryPaintType GetLayerSection() {
		return memory.read<enum class ELiveryPaintType>(m_addr + 386);
	}
	int32_t GetLayerIndex() {
		return memory.read<int32_t>(m_addr + 388);
	}
	bool GetbVisibleLiveryLayer() {
		return memory.read<bool>(m_addr + 392);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicenseMainCardWidget
{
public:
	ULicenseMainCardWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetInst_TextGradeName() {
		return memory.read<struct FText>(m_addr + 1000);
	}
	struct FSlateBrush GetInst_LineMainBrush() {
		return memory.read<struct FSlateBrush>(m_addr + 1024);
	}
	struct FSlateBrush GetInst_EmblemLogo() {
		return memory.read<struct FSlateBrush>(m_addr + 1160);
	}
	struct FSlateBrush GetInst_EmblemLogo_NotGain() {
		return memory.read<struct FSlateBrush>(m_addr + 1296);
	}
	struct FLinearColor GetInst_LineThickColor() {
		return memory.read<struct FLinearColor>(m_addr + 1432);
	}
	struct FLinearColor GetInst_LineThinColor() {
		return memory.read<struct FLinearColor>(m_addr + 1448);
	}
	struct FLinearColor GetInst_DriftLogoColor() {
		return memory.read<struct FLinearColor>(m_addr + 1464);
	}
	struct FLinearColor GetInst_DrivingLicenseColor() {
		return memory.read<struct FLinearColor>(m_addr + 1480);
	}
	struct FLinearColor GetInst_EmblemLineColor1() {
		return memory.read<struct FLinearColor>(m_addr + 1496);
	}
	struct FLinearColor GetInst_EmblemLineColor2() {
		return memory.read<struct FLinearColor>(m_addr + 1512);
	}
	struct FLinearColor GetInst_BottomEdgeColor() {
		return memory.read<struct FLinearColor>(m_addr + 1528);
	}
	bool GetInst_IsPro() {
		return memory.read<bool>(m_addr + 1544);
	}
	int32_t GetInst_StateTest() {
		return memory.read<int32_t>(m_addr + 1548);
	}
	bool GetbShowRewardButton() {
		return memory.read<bool>(m_addr + 1552);
	}
	bool GetbShowGainDate() {
		return memory.read<bool>(m_addr + 1553);
	}
	struct UImage GetV_ImgLineMain() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1560);
		return struct UImage(ptr_addr);
	}
	struct UImage GetV_ImgLineMain_MoveLight() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1568);
		return struct UImage(ptr_addr);
	}
	struct UImage GetV_ImgLineThick() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1576);
		return struct UImage(ptr_addr);
	}
	struct UImage GetV_ImgLineThick_MoveLight() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1584);
		return struct UImage(ptr_addr);
	}
	struct UImage GetV_ImgLineThin() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1592);
		return struct UImage(ptr_addr);
	}
	struct UImage GetV_ImgLineThin_MoveLight() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1600);
		return struct UImage(ptr_addr);
	}
	struct UImage GetV_ImgDriftLogo() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1608);
		return struct UImage(ptr_addr);
	}
	struct UImage GetV_ImgDrivingLicense() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1616);
		return struct UImage(ptr_addr);
	}
	struct UKdImage GetV_ImgBtnHover() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1624);
		return struct UKdImage(ptr_addr);
	}
	struct UImage GetV_ImgEdgeBottom() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1632);
		return struct UImage(ptr_addr);
	}
	struct UImage GetV_ImgEdge_MoveLight() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1640);
		return struct UImage(ptr_addr);
	}
	struct UKdTextBlock GetV_TxtGradeName() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1648);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UWidgetSwitcher GetV_WS_BG() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1656);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UWidgetSwitcher GetV_WS_LineMain() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1664);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UWidgetSwitcher GetV_WS_LineThin() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1672);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UWidgetSwitcher GetV_Emblem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1680);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UWidgetSwitcher GetV_GetLicense() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1688);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UWidgetSwitcher GetV_GainDate() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1696);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct ULicenseCardEmblemWidget GetV_Emblem_NotGain() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1704);
		return struct ULicenseCardEmblemWidget(ptr_addr);
	}
	struct ULicenseCardEmblemWidget GetV_Emblem_Bronze() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1712);
		return struct ULicenseCardEmblemWidget(ptr_addr);
	}
	struct ULicenseCardEmblemWidget GetV_Emblem_Silver() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1720);
		return struct ULicenseCardEmblemWidget(ptr_addr);
	}
	struct ULicenseCardEmblemWidget GetV_Emblem_Gold() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1728);
		return struct ULicenseCardEmblemWidget(ptr_addr);
	}
	struct UOverlay GetV_OV_All() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1736);
		return struct UOverlay(ptr_addr);
	}
	struct UOverlay GetV_OV_Card() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1744);
		return struct UOverlay(ptr_addr);
	}
	struct UOverlay GetV_Lock() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1752);
		return struct UOverlay(ptr_addr);
	}
	struct UButtonTemplate GetV_RewardButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1760);
		return struct UButtonTemplate(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicenseClearPopup_LicenseCardWidget
{
public:
	ULicenseClearPopup_LicenseCardWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetInst_TextGradeName() {
		return memory.read<struct FText>(m_addr + 608);
	}
	struct FSlateBrush GetInst_LineMainBrush() {
		return memory.read<struct FSlateBrush>(m_addr + 632);
	}
	struct FSlateBrush GetInst_EmblemLogo() {
		return memory.read<struct FSlateBrush>(m_addr + 768);
	}
	struct FSlateBrush GetInst_EmblemLogo_NotGain() {
		return memory.read<struct FSlateBrush>(m_addr + 904);
	}
	struct FLinearColor GetInst_LineThickColor() {
		return memory.read<struct FLinearColor>(m_addr + 1040);
	}
	struct FLinearColor GetInst_LineThinColor() {
		return memory.read<struct FLinearColor>(m_addr + 1056);
	}
	struct FLinearColor GetInst_DriftLogoColor() {
		return memory.read<struct FLinearColor>(m_addr + 1072);
	}
	struct FLinearColor GetInst_DrivingLicenseColor() {
		return memory.read<struct FLinearColor>(m_addr + 1088);
	}
	struct FLinearColor GetInst_EmblemLineColor1() {
		return memory.read<struct FLinearColor>(m_addr + 1104);
	}
	struct FLinearColor GetInst_EmblemLineColor2() {
		return memory.read<struct FLinearColor>(m_addr + 1120);
	}
	struct FLinearColor GetInst_BottomEdgeColor() {
		return memory.read<struct FLinearColor>(m_addr + 1136);
	}
	bool GetInst_IsPro() {
		return memory.read<bool>(m_addr + 1152);
	}
	int32_t GetInst_StateTest() {
		return memory.read<int32_t>(m_addr + 1156);
	}
	struct UImage GetV_ImgLineMain() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1160);
		return struct UImage(ptr_addr);
	}
	struct UImage GetV_ImgLineMain_MoveLight() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1168);
		return struct UImage(ptr_addr);
	}
	struct UImage GetV_ImgLineThick() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1176);
		return struct UImage(ptr_addr);
	}
	struct UImage GetV_ImgLineThick_MoveLight() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1184);
		return struct UImage(ptr_addr);
	}
	struct UImage GetV_ImgLineThin() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1192);
		return struct UImage(ptr_addr);
	}
	struct UImage GetV_ImgLineThin_MoveLight() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1200);
		return struct UImage(ptr_addr);
	}
	struct UImage GetV_ImgDriftLogo() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1208);
		return struct UImage(ptr_addr);
	}
	struct UImage GetV_ImgDrivingLicense() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1216);
		return struct UImage(ptr_addr);
	}
	struct UImage GetV_ImgEdgeBottom() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1224);
		return struct UImage(ptr_addr);
	}
	struct UImage GetV_ImgEdge_MoveLight() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1232);
		return struct UImage(ptr_addr);
	}
	struct UKdTextBlock GetV_TxtGradeName() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1240);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UWidgetSwitcher GetV_WS_BG() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1248);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UWidgetSwitcher GetV_WS_LineMain() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1256);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UWidgetSwitcher GetV_WS_LineThin() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1264);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UWidgetSwitcher GetV_Emblem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1272);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UWidgetSwitcher GetV_GetLicense() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1280);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct ULicenseCardEmblemWidget GetV_Emblem_Bronze() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1288);
		return struct ULicenseCardEmblemWidget(ptr_addr);
	}
	struct ULicenseCardEmblemWidget GetV_Emblem_Silver() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1296);
		return struct ULicenseCardEmblemWidget(ptr_addr);
	}
	struct ULicenseCardEmblemWidget GetV_Emblem_Gold() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1304);
		return struct ULicenseCardEmblemWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicenseClearPopupWidget
{
public:
	ULicenseClearPopupWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UKdListView GetV_RewardListView() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 816);
		return struct UKdListView(ptr_addr);
	}
	struct UKdListView GetV_OpenContentListView() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 824);
		return struct UKdListView(ptr_addr);
	}
	struct UOverlay GetV_OV_Back_Ani() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 832);
		return struct UOverlay(ptr_addr);
	}
	struct UOverlay GetV_OV_Front_Ani() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 840);
		return struct UOverlay(ptr_addr);
	}
	struct UWidgetSwitcher GetV_LicenseCardWidgetSwitcher() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 848);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct ULicenseClearPopup_LicenseCardWidget GetV_LicenseCard_B1() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 856);
		return struct ULicenseClearPopup_LicenseCardWidget(ptr_addr);
	}
	struct ULicenseClearPopup_LicenseCardWidget GetV_LicenseCard_B2() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 864);
		return struct ULicenseClearPopup_LicenseCardWidget(ptr_addr);
	}
	struct ULicenseClearPopup_LicenseCardWidget GetV_LicenseCard_L1() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 872);
		return struct ULicenseClearPopup_LicenseCardWidget(ptr_addr);
	}
	struct ULicenseClearPopup_LicenseCardWidget GetV_LicenseCard_L2() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 880);
		return struct ULicenseClearPopup_LicenseCardWidget(ptr_addr);
	}
	struct ULicenseClearPopup_LicenseCardWidget GetV_LicenseCard_L3() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 888);
		return struct ULicenseClearPopup_LicenseCardWidget(ptr_addr);
	}
	struct ULicenseClearPopup_LicenseCardWidget GetV_LicenseCard_Pro() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 896);
		return struct ULicenseClearPopup_LicenseCardWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class URaceSaveGame
{
public:
	URaceSaveGame(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetLevelName() {
		return memory.read<struct FString>(m_addr + 40);
	}
	struct FString GetModeName() {
		return memory.read<struct FString>(m_addr + 56);
	}
	struct FString GetRecorderName() {
		return memory.read<struct FString>(m_addr + 72);
	}
	float GetTotalPlayTime() {
		return memory.read<float>(m_addr + 88);
	}
	struct FDateTime GetDateTime() {
		return memory.read<struct FDateTime>(m_addr + 96);
	}
	struct TMap<int32_t, struct FPawnRecordData> GetPawnRecordContainer() {
		return memory.read<struct TMap<int32_t, struct FPawnRecordData>>(m_addr + 104);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicenseResetFlagComponent
{
public:
	ULicenseResetFlagComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULicenseNotifiedItemCubeComponent
{
public:
	ULicenseNotifiedItemCubeComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetIndex() {
		return memory.read<int32_t>(m_addr + 176);
	}
	struct AActor GetPawn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 184);
		return struct AActor(ptr_addr);
	}
	struct UNotifiedItemSpawn GetData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 192);
		return struct UNotifiedItemSpawn(ptr_addr);
	}
	struct TArray<struct AGoItem_Cube> GetItemCubeList() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 200);
		return struct TArray<struct AGoItem_Cube>(ptr_addr);
	}
	struct TSoftClassPtr<UObject> GetItemCubeClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 216);
	}
	struct TSoftObjectPtr<UStaticMesh> GetItemCubeMeshClass() {
		return memory.read<struct TSoftObjectPtr<UStaticMesh>>(m_addr + 256);
	}
	struct TSoftObjectPtr<UTexture2D> GetDiffuseTextureObject1() {
		return memory.read<struct TSoftObjectPtr<UTexture2D>>(m_addr + 296);
	}
	struct TSoftObjectPtr<UTexture2D> GetDiffuseTextureObject2() {
		return memory.read<struct TSoftObjectPtr<UTexture2D>>(m_addr + 336);
	}
	struct TSoftObjectPtr<UTexture2D> GetDiffuseTextureObject3() {
		return memory.read<struct TSoftObjectPtr<UTexture2D>>(m_addr + 376);
	}

private:
	std::uint64_t m_addr = 0;
};


class UNotifyRetireCountdown
{
public:
	UNotifyRetireCountdown(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULicenseObjectSpawnComponent
{
public:
	ULicenseObjectSpawnComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ULicenseRocketActorData GetData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 224);
		return struct ULicenseRocketActorData(ptr_addr);
	}
	struct AActor GetPawn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 232);
		return struct AActor(ptr_addr);
	}
	struct TMap<struct AActor, int32_t> GetSpawnedActors() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 240);
		return struct TMap<struct AActor, int32_t>(ptr_addr);
	}
	struct TArray<int32_t> GetQuestList() {
		return memory.read<struct TArray<int32_t>>(m_addr + 320);
	}
	int32_t GetQuestIndex() {
		return memory.read<int32_t>(m_addr + 336);
	}
	bool GetbSuccess() {
		return memory.read<bool>(m_addr + 340);
	}
	bool GetbFail() {
		return memory.read<bool>(m_addr + 341);
	}
	float GetEventLastTime() {
		return memory.read<float>(m_addr + 344);
	}
	struct UCurveFloat GetSpawnCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 352);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat GetDestroyCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 360);
		return struct UCurveFloat(ptr_addr);
	}
	struct TSoftObjectPtr<UCurveFloat> GetCurveFloat() {
		return memory.read<struct TSoftObjectPtr<UCurveFloat>>(m_addr + 400);
	}
	struct TSoftObjectPtr<UCurveFloat> GetCurveFloat2() {
		return memory.read<struct TSoftObjectPtr<UCurveFloat>>(m_addr + 440);
	}
	struct TSoftObjectPtr<UStaticMesh> GetAIKartMesh() {
		return memory.read<struct TSoftObjectPtr<UStaticMesh>>(m_addr + 480);
	}

private:
	std::uint64_t m_addr = 0;
};


class UM_TrackChangeDialogItem
{
public:
	UM_TrackChangeDialogItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPreLoadTrackImages
{
public:
	UPreLoadTrackImages(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ALicenseObjectSpawnSpline
{
public:
	ALicenseObjectSpawnSpline(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetOptimizeSplineInterval() {
		return memory.read<float>(m_addr + 544);
	}
	struct USplineComponent GetSplineComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 552);
		return struct USplineComponent(ptr_addr);
	}
	bool GetbShowDebug() {
		return memory.read<bool>(m_addr + 560);
	}
	struct FString GetCopyActorName() {
		return memory.read<struct FString>(m_addr + 568);
	}
	float GetInterval() {
		return memory.read<float>(m_addr + 584);
	}
	struct TSoftObjectPtr<UStaticMesh> GetObjectMeshClass() {
		return memory.read<struct TSoftObjectPtr<UStaticMesh>>(m_addr + 592);
	}
	float GetObjectScale() {
		return memory.read<float>(m_addr + 632);
	}
	struct FVector GetObjectAddLocation() {
		return memory.read<struct FVector>(m_addr + 636);
	}
	struct FRotator GetObjectAddRotation() {
		return memory.read<struct FRotator>(m_addr + 648);
	}
	struct TArray<struct FTransform> GetObjectTransformArray() {
		return memory.read<struct TArray<struct FTransform>>(m_addr + 664);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicenseDestroyTargetFinder
{
public:
	ULicenseDestroyTargetFinder(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULicenseObstacleComponent
{
public:
	ULicenseObstacleComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct AActor> GetMovableActorList() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 184);
		return struct TArray<struct AActor>(ptr_addr);
	}
	struct TArray<struct FLicenseMovableActorInfo> GetLicenseSpawnActorDataList() {
		return memory.read<struct TArray<struct FLicenseMovableActorInfo>>(m_addr + 200);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicenseRewardListEntry
{
public:
	ULicenseRewardListEntry(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetStockIndex() {
		return memory.read<int32_t>(m_addr + 40);
	}
	struct FString GetstockId() {
		return memory.read<struct FString>(m_addr + 48);
	}
	struct FString GetStockItemId() {
		return memory.read<struct FString>(m_addr + 64);
	}
	struct FText GetOpenContentName() {
		return memory.read<struct FText>(m_addr + 80);
	}
	struct TSoftObjectPtr<UTexture2D> GetOpenContentImage() {
		return memory.read<struct TSoftObjectPtr<UTexture2D>>(m_addr + 104);
	}
	bool GetbReceive() {
		return memory.read<bool>(m_addr + 144);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicensePauseButton
{
public:
	ULicensePauseButton(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class USceneCaptureTexureComponent
{
public:
	USceneCaptureTexureComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UMaterial GetRenderMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 192);
		return struct UMaterial(ptr_addr);
	}
	struct TMap<struct TWeakObjectPtr<ASceneCapture2D>, struct FMaterialInfoArray> GetMaterialInstanceList() {
		return memory.read<struct TMap<struct TWeakObjectPtr<ASceneCapture2D>, struct FMaterialInfoArray>>(m_addr + 200);
	}
	struct TMap<struct TWeakObjectPtr<USceneCaptureComponent2D>, struct FMaterialInfo> GetAttachedSceneCaptureMaterials() {
		return memory.read<struct TMap<struct TWeakObjectPtr<USceneCaptureComponent2D>, struct FMaterialInfo>>(m_addr + 280);
	}

private:
	std::uint64_t m_addr = 0;
};


class UEnableOptimizeSettings
{
public:
	UEnableOptimizeSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULicensePauseButtonComponent
{
public:
	ULicensePauseButtonComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULicensePauseDescWidget
{
public:
	ULicensePauseDescWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UKdTextBlock GetV_IndexText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UKdTextBlock GetV_InfoText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UImage GetV_InfoImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UImage(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ALicensePawn
{
public:
	ALicensePawn(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULicensePortraitMessageWidget
{
public:
	ULicensePortraitMessageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UScrollBox GetMessage_ScrollBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UScrollBox(ptr_addr);
	}
	ULicenseMessageElementWidget GetScrollElementClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return ULicenseMessageElementWidget(ptr_addr);
	}
	struct TSoftObjectPtr<UFMODEvent> GetTextSound() {
		return memory.read<struct TSoftObjectPtr<UFMODEvent>>(m_addr + 624);
	}
	struct UImage GetV_Image_Portrait() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UImage(ptr_addr);
	}
	struct UWidgetAnimation GetAnim_MsgShow() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation GetAnim_MsgHide() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct ULicenseMessageElementWidget GetCurrentElementWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct ULicenseMessageElementWidget(ptr_addr);
	}
	struct UScenarioParseInstance GetParseInstance() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UScenarioParseInstance(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicenseRemovableObstacleComp
{
public:
	ULicenseRemovableObstacleComp(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ULicenseRemovableObstacleData GetData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 176);
		return struct ULicenseRemovableObstacleData(ptr_addr);
	}
	struct TMap<int32_t, struct AActor> GetRemovableObstacleList() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 184);
		return struct TMap<int32_t, struct AActor>(ptr_addr);
	}
	struct TMap<int32_t, struct USceneComponent> GetRemovableObstacleList_Mesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 264);
		return struct TMap<int32_t, struct USceneComponent>(ptr_addr);
	}
	int32_t GetTotalObstacleCount() {
		return memory.read<int32_t>(m_addr + 344);
	}
	bool GetbOnceGate() {
		return memory.read<bool>(m_addr + 348);
	}
	struct TSoftObjectPtr<UParticleSystem> GetParticle() {
		return memory.read<struct TSoftObjectPtr<UParticleSystem>>(m_addr + 352);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicenseMissionResultWidget
{
public:
	ULicenseMissionResultWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UKdTextBlock GetV_CurrentScore() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 816);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UKdTextBlock GetV_CurrentScore_2() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 824);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UTextBlock GetText_NewOrTime_2() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 832);
		return struct UTextBlock(ptr_addr);
	}
	struct UWidgetSwitcher GetSW_ScoreTime() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 840);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UWidgetAnimation GetAnim_Show() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 848);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct ULicenseStarIcon GetStar_2() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 856);
		return struct ULicenseStarIcon(ptr_addr);
	}
	struct ULicenseStarIcon GetStar_3() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 864);
		return struct ULicenseStarIcon(ptr_addr);
	}
	struct ULicenseStarIcon GetStar_4() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 872);
		return struct ULicenseStarIcon(ptr_addr);
	}
	struct ULicenseMissionResultWidgetInst GetCondtionItem_2() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 880);
		return struct ULicenseMissionResultWidgetInst(ptr_addr);
	}
	struct ULicenseMissionResultWidgetInst GetCondtionItem_3() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 888);
		return struct ULicenseMissionResultWidgetInst(ptr_addr);
	}
	struct ULicenseMissionResultWidgetInst GetCondtionItem_4() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 896);
		return struct ULicenseMissionResultWidgetInst(ptr_addr);
	}
	struct UKdListView GetKdListView_DetailScore() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 904);
		return struct UKdListView(ptr_addr);
	}
	float GetStarMasterDelay() {
		return memory.read<float>(m_addr + 912);
	}
	float GetStarInstDelay() {
		return memory.read<float>(m_addr + 916);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicenseReportListEntry
{
public:
	ULicenseReportListEntry(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UKdTextBlock GetKd_item() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UKdTextBlock GetKd_calculate() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UKdTextBlock GetKd_Total() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UKdTextBlock(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicenseReserveItem
{
public:
	ULicenseReserveItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class EItemType GetItemType() {
		return memory.read<enum class EItemType>(m_addr + 64);
	}
	int32_t GetCount() {
		return memory.read<int32_t>(m_addr + 68);
	}
	float GetDelaySpawnTime() {
		return memory.read<float>(m_addr + 72);
	}
	bool GetbEndGameOnEmpty() {
		return memory.read<bool>(m_addr + 76);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicenseReservedItemComponent
{
public:
	ULicenseReservedItemComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetPawn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 176);
		return struct AActor(ptr_addr);
	}
	struct ULicenseReserveItem GetData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 184);
		return struct ULicenseReserveItem(ptr_addr);
	}
	bool GetbReserveSpawn() {
		return memory.read<bool>(m_addr + 208);
	}
	float GetReserveSpawnTime() {
		return memory.read<float>(m_addr + 212);
	}
	float GetSpawnTimer() {
		return memory.read<float>(m_addr + 216);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicenseNoticeSaveGame
{
public:
	ULicenseNoticeSaveGame(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<uint32_t, struct FLicenseNoticeSaveGameData> GetSaveData() {
		return memory.read<struct TMap<uint32_t, struct FLicenseNoticeSaveGameData>>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicenseRules
{
public:
	ULicenseRules(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UCreateLicensePauseButtonWidget
{
public:
	UCreateLicensePauseButtonWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftClassPtr<UObject> GetLicensePauseButtonWidgetClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicensePlayBGMRule
{
public:
	ULicensePlayBGMRule(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UTransition_LicenseEndRaceRule
{
public:
	UTransition_LicenseEndRaceRule(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UVisibleItemCubeRule
{
public:
	UVisibleItemCubeRule(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UActivateCustomItemCubeRule
{
public:
	UActivateCustomItemCubeRule(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct AGoItem_Cube> GetItemCubeList() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return struct TArray<struct AGoItem_Cube>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCustomItemCubeRule
{
public:
	UCustomItemCubeRule(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct AGoItem_Cube> GetItemCubeList() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return struct TArray<struct AGoItem_Cube>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMatchNotifyMatched
{
public:
	UMatchNotifyMatched(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetgameSettings() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct UObject(ptr_addr);
	}
	struct UObject GetgameDetails() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct UObject(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class USpawnMagnetPawnList
{
public:
	USpawnMagnetPawnList(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct AKdPawn> GetPawnList() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return struct TArray<struct AKdPawn>(ptr_addr);
	}
	struct TArray<struct FLicenseStaticActorInfo> GetLicenseSpawnActorDataList() {
		return memory.read<struct TArray<struct FLicenseStaticActorInfo>>(m_addr + 88);
	}
	struct UFMODEvent GetSound_A() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 104);
		return struct UFMODEvent(ptr_addr);
	}
	struct TSoftObjectPtr<UStaticMesh> GetWeightMesh() {
		return memory.read<struct TSoftObjectPtr<UStaticMesh>>(m_addr + 112);
	}
	struct TSoftObjectPtr<UParticleSystem> GetParticle() {
		return memory.read<struct TSoftObjectPtr<UParticleSystem>>(m_addr + 152);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMovableObstacleListRule
{
public:
	UMovableObstacleListRule(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FLicenseStaticActorInfo> GetLicenseSpawnActorDataList() {
		return memory.read<struct TArray<struct FLicenseStaticActorInfo>>(m_addr + 72);
	}
	struct TArray<struct AActor> GetActorList() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 88);
		return struct TArray<struct AActor>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCreateLicenseScoreWidget
{
public:
	UCreateLicenseScoreWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftClassPtr<UObject> GetLicenseScoreWidgetClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 72);
	}
	struct TSoftClassPtr<UObject> GetScoreInstWidgetClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 112);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCreateLicenseIceBallWidget
{
public:
	UCreateLicenseIceBallWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftClassPtr<UObject> GetLicenseIceBallWidgetClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 72);
	}
	struct UUserWidget GetIceBall() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 112);
		return struct UUserWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCreateLicenseSpeedLimitWidget
{
public:
	UCreateLicenseSpeedLimitWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftClassPtr<UObject> GetLicenseSpeedLimitClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 72);
	}
	struct UUserWidget GetSpeedLimit() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 112);
		return struct UUserWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCreateLicenseAIDistanceWidget
{
public:
	UCreateLicenseAIDistanceWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftClassPtr<UObject> GetLicenseAIDistanceClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 72);
	}
	struct UUserWidget GetAIDistance() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 112);
		return struct UUserWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTransition_LicenseBossWinRule
{
public:
	UTransition_LicenseBossWinRule(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UTransition_LicenseAIKnockOutRule
{
public:
	UTransition_LicenseAIKnockOutRule(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UActivateAssistWidgets
{
public:
	UActivateAssistWidgets(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftClassPtr<UObject> GetAssistDriftWidgetClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 72);
	}
	struct TSoftClassPtr<UObject> GetAssistListWidgetClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 112);
	}

private:
	std::uint64_t m_addr = 0;
};


class UResetForceFeedbackRule
{
public:
	UResetForceFeedbackRule(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULicenseTMIRecordComponent
{
public:
	ULicenseTMIRecordComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UTransition_Result_License
{
public:
	UTransition_Result_License(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UInitializeLicenseScoreComponentRule
{
public:
	UInitializeLicenseScoreComponentRule(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UCreateLicenseMessageWidget
{
public:
	UCreateLicenseMessageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftClassPtr<UObject> GetLicenseMessageWidgetClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicenseDisableKartMovementRule
{
public:
	ULicenseDisableKartMovementRule(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UTransition_ReserveItemRule
{
public:
	UTransition_ReserveItemRule(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UCreateLicenseDraftWidget
{
public:
	UCreateLicenseDraftWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftClassPtr<UObject> GetLicenseDraftWidgetClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCreateLicenseGaugeChargingWidget
{
public:
	UCreateLicenseGaugeChargingWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftClassPtr<UObject> GetLicenseGaugeChargingWidgetClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicenseCalcResultRule
{
public:
	ULicenseCalcResultRule(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrRegisterMatch
{
public:
	UPrRegisterMatch(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetmmTicket() {
		return memory.read<struct FString>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UOnSuccessLicenseRule
{
public:
	UOnSuccessLicenseRule(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UTransition_Success_License
{
public:
	UTransition_Success_License(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UTransition_Failure_License
{
public:
	UTransition_Failure_License(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UCreateLicenseDescWidget
{
public:
	UCreateLicenseDescWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftClassPtr<UObject> GetLicenseDescWidgetClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 72);
	}
	float GetPlayTime() {
		return memory.read<float>(m_addr + 112);
	}
	struct TArray<struct FString> GetDescList() {
		return memory.read<struct TArray<struct FString>>(m_addr + 120);
	}

private:
	std::uint64_t m_addr = 0;
};


class AScenarioCountdownActive
{
public:
	AScenarioCountdownActive(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetCountdownTime() {
		return memory.read<float>(m_addr + 688);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTransition_PrepareLicenseRestart
{
public:
	UTransition_PrepareLicenseRestart(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UTransition_Restart_License
{
public:
	UTransition_Restart_License(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ATimeAttackAiPawn
{
public:
	ATimeAttackAiPawn(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UActivateSkipSequenceRule
{
public:
	UActivateSkipSequenceRule(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrShopAllProductList
{
public:
	UPrShopAllProductList(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FKtShopStock> GetitemShopProducts() {
		return memory.read<struct TArray<struct FKtShopStock>>(m_addr + 72);
	}
	struct TArray<struct FKtShopStock> GetkoinShopProducts() {
		return memory.read<struct TArray<struct FKtShopStock>>(m_addr + 88);
	}
	struct TArray<struct FKtShopStock> GetcashShopProducts() {
		return memory.read<struct TArray<struct FKtShopStock>>(m_addr + 104);
	}
	struct TMap<struct FString, struct FString> GetplatformShopProductIds() {
		return memory.read<struct TMap<struct FString, struct FString>>(m_addr + 120);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTransition_SkipSeqeunce_License
{
public:
	UTransition_SkipSeqeunce_License(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULicenseSetViewTarget
{
public:
	ULicenseSetViewTarget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPlayLicenseFinishSequence
{
public:
	UPlayLicenseFinishSequence(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ULevelSequence GetSequenceOverride() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return struct ULevelSequence(ptr_addr);
	}
	struct ALevelSequenceActor GetSequenceActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 80);
		return struct ALevelSequenceActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCreateLicenseCoinWidget
{
public:
	UCreateLicenseCoinWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftClassPtr<UObject> GetLicenseCoinWidgetClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTransition_LicenseBarricadeHitLoseRule
{
public:
	UTransition_LicenseBarricadeHitLoseRule(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UActivateAssistObjects
{
public:
	UActivateAssistObjects(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UTransition_LicenseCoinLoseRule
{
public:
	UTransition_LicenseCoinLoseRule(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UTransition_LicenseTutorialChapterCompletedRule
{
public:
	UTransition_LicenseTutorialChapterCompletedRule(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULicenseStartReplay
{
public:
	ULicenseStartReplay(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULicenseEndReplay
{
public:
	ULicenseEndReplay(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULicenseStarCondition
{
public:
	ULicenseStarCondition(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class ELicenseStarConditionType GetType() {
		return memory.read<enum class ELicenseStarConditionType>(m_addr + 48);
	}
	int32_t GetThreshold_2() {
		return memory.read<int32_t>(m_addr + 52);
	}
	int32_t GetThreshold_3() {
		return memory.read<int32_t>(m_addr + 56);
	}
	int32_t GetThreshold_4() {
		return memory.read<int32_t>(m_addr + 60);
	}

private:
	std::uint64_t m_addr = 0;
};


class UInitReplayTimeControl
{
public:
	UInitReplayTimeControl(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULicenseScoreComponent
{
public:
	ULicenseScoreComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ULicenseStarCondition GetCondition() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 176);
		return struct ULicenseStarCondition(ptr_addr);
	}
	struct TMap<enum class ELicenseScoreReason, struct FLicenseResultData> GetReasonMap() {
		return memory.read<struct TMap<enum class ELicenseScoreReason, struct FLicenseResultData>>(m_addr + 184);
	}
	enum class ELicenseScoreReason GetTimeScoreReason() {
		return memory.read<enum class ELicenseScoreReason>(m_addr + 264);
	}
	enum class ELicenseScoreReason GetFinishScoreReason() {
		return memory.read<enum class ELicenseScoreReason>(m_addr + 265);
	}
	int32_t GetStarLevel() {
		return memory.read<int32_t>(m_addr + 268);
	}
	int32_t GetScore() {
		return memory.read<int32_t>(m_addr + 272);
	}
	float GetResultTime() {
		return memory.read<float>(m_addr + 276);
	}
	float GetTotalTime() {
		return memory.read<float>(m_addr + 280);
	}
	float GetTimeScoreWeight() {
		return memory.read<float>(m_addr + 284);
	}
	int32_t GetFinishScore() {
		return memory.read<int32_t>(m_addr + 288);
	}
	bool GetbFailOnTimeOver() {
		return memory.read<bool>(m_addr + 292);
	}
	bool GetbFail() {
		return memory.read<bool>(m_addr + 293);
	}
	bool GetbCalcResult() {
		return memory.read<bool>(m_addr + 294);
	}

private:
	std::uint64_t m_addr = 0;
};


class UActivateAssistKarts
{
public:
	UActivateAssistKarts(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULicenseScoreDataComponent
{
public:
	ULicenseScoreDataComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULiveryColorColumnEntryObject
{
public:
	ULiveryColorColumnEntryObject(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class ELiveryCategoryType GetColorCategory() {
		return memory.read<enum class ELiveryCategoryType>(m_addr + 40);
	}
	int32_t GetColumnIndex() {
		return memory.read<int32_t>(m_addr + 44);
	}
	struct TArray<struct FLinearColor> GetColorRows() {
		return memory.read<struct TArray<struct FLinearColor>>(m_addr + 48);
	}
	struct TArray<struct FText> GetColorLabels() {
		return memory.read<struct TArray<struct FText>>(m_addr + 64);
	}
	struct TArray<struct FString> GetIntensityLabels() {
		return memory.read<struct TArray<struct FString>>(m_addr + 80);
	}
	struct TArray<struct TSoftObjectPtr<UTexture2D>> GetImageRows() {
		return memory.read<struct TArray<struct TSoftObjectPtr<UTexture2D>>>(m_addr + 96);
	}
	enum class ELiveryMaterialType GetRowMaterialType() {
		return memory.read<enum class ELiveryMaterialType>(m_addr + 112);
	}
	struct TWeakObjectPtr<UListView> GetOwnerListView() {
		return memory.read<struct TWeakObjectPtr<UListView>>(m_addr + 116);
	}
	bool GetbFakeSelect() {
		return memory.read<bool>(m_addr + 124);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicenseScoreData
{
public:
	ULicenseScoreData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULicenseStarIcon
{
public:
	ULicenseStarIcon(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UWidgetAnimation GetGetStar() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation GetLostStar() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UWidgetAnimation(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicenseScoreInstanceWidget
{
public:
	ULicenseScoreInstanceWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UKdTextBlock GetV_Score_Text() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UKdTextBlock GetV_Score_Text_2() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UWidgetAnimation GetAnim_addscore() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetSwitcher GetV_Score_Switcher() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UWidgetSwitcher(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class AMinimapActor
{
public:
	AMinimapActor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UStaticMeshComponent GetMinimap_Mesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 544);
		return struct UStaticMeshComponent(ptr_addr);
	}
	struct USceneCaptureComponent2D GetMinimapSceneCapture() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 552);
		return struct USceneCaptureComponent2D(ptr_addr);
	}
	float GetMinimapCaptureScale() {
		return memory.read<float>(m_addr + 564);
	}
	float GetCamDistance() {
		return memory.read<float>(m_addr + 568);
	}
	float GetCamOffset() {
		return memory.read<float>(m_addr + 572);
	}
	float GetMinimapRot() {
		return memory.read<float>(m_addr + 576);
	}
	float GetMinimapScale() {
		return memory.read<float>(m_addr + 580);
	}
	float GetArrowScale() {
		return memory.read<float>(m_addr + 584);
	}
	float GetDotScale() {
		return memory.read<float>(m_addr + 588);
	}
	struct UTexture2D GetSDFMiniMapTexture() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 600);
		return struct UTexture2D(ptr_addr);
	}
	float GetZoomOrthoWidth() {
		return memory.read<float>(m_addr + 656);
	}
	float GetCamHeight() {
		return memory.read<float>(m_addr + 660);
	}
	float GetCamFov() {
		return memory.read<float>(m_addr + 664);
	}
	struct UMaterial GetMaterialForBirdView() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UMaterial(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicenseScoreInterface
{
public:
	ULicenseScoreInterface(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UTouchInputHUD
{
public:
	UTouchInputHUD(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTouchSteeringButton GetV_LeftBtn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UTouchSteeringButton(ptr_addr);
	}
	struct UTouchSteeringButton GetV_RightBtn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UTouchSteeringButton(ptr_addr);
	}
	struct UTouchDriftButton GetV_DriftBtn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UTouchDriftButton(ptr_addr);
	}
	struct UTouchDriftButton GetV_LeftDriftBtn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UTouchDriftButton(ptr_addr);
	}
	struct UTouchDriftButton GetV_RightDriftBtn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UTouchDriftButton(ptr_addr);
	}
	struct UTouchResetButton GetV_ResetBtn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UTouchResetButton(ptr_addr);
	}
	struct UTouchBrakeButton GetV_BrakeBtn01() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UTouchBrakeButton(ptr_addr);
	}
	struct UTouchBrakeButton GetV_BrakeBtn02() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UTouchBrakeButton(ptr_addr);
	}
	struct UTouchInstanceBoosterButton GetV_InstanceBoostBtn01() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UTouchInstanceBoosterButton(ptr_addr);
	}
	struct UTouchInstanceBoosterButton GetV_InstanceBoostBtn02() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UTouchInstanceBoosterButton(ptr_addr);
	}
	struct UTouchStartBoosterButton GetV_StartBoosterButton01() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UTouchStartBoosterButton(ptr_addr);
	}
	struct UTouchStartBoosterButton GetV_StartBoosterButton02() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UTouchStartBoosterButton(ptr_addr);
	}
	struct UTouchItemButton GetV_ItemInput0() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UTouchItemButton(ptr_addr);
	}
	struct UTouchItemButton GetV_ItemInput1() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct UTouchItemButton(ptr_addr);
	}
	struct UTouchItemButton GetV_ItemInput2() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return struct UTouchItemButton(ptr_addr);
	}
	struct UTouchKeyGuideWidget GetV_TouchKeyGuideWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 728);
		return struct UTouchKeyGuideWidget(ptr_addr);
	}
	struct UUserWidget GetV_TouchEmoticonButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 736);
		return struct UUserWidget(ptr_addr);
	}
	struct UNamedSlot GetV_LapWidget_Slot() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 744);
		return struct UNamedSlot(ptr_addr);
	}
	struct UNamedSlot GetV_RaceRanking_Slot() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 752);
		return struct UNamedSlot(ptr_addr);
	}
	struct UNamedSlot GetV_MicChatButton_Slot() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 760);
		return struct UNamedSlot(ptr_addr);
	}
	struct UNamedSlot GetV_Minimap_Slot() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 768);
		return struct UNamedSlot(ptr_addr);
	}
	struct UNamedSlot GetV_Tachometer_Slot() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 776);
		return struct UNamedSlot(ptr_addr);
	}
	struct UNamedSlot GetV_DriftGauge_Slot() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 784);
		return struct UNamedSlot(ptr_addr);
	}
	struct UNamedSlot GetV_TTS_Slot() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 792);
		return struct UNamedSlot(ptr_addr);
	}
	struct UNamedSlot GetV_EmoticonBtn_Slot() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 800);
		return struct UNamedSlot(ptr_addr);
	}
	struct UNamedSlot GetV_ItemFeed_Slot() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 808);
		return struct UNamedSlot(ptr_addr);
	}
	struct UNamedSlot GetV_ItemSlotBunch_Slot() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 816);
		return struct UNamedSlot(ptr_addr);
	}
	struct UNamedSlot GetV_LeftBtn_Slot() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 824);
		return struct UNamedSlot(ptr_addr);
	}
	struct UNamedSlot GetV_RightBtn_Slot() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 832);
		return struct UNamedSlot(ptr_addr);
	}
	struct UNamedSlot GetV_DriftBtn_Slot() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 840);
		return struct UNamedSlot(ptr_addr);
	}
	struct UNamedSlot GetV_LeftDriftBtn_Slot() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 848);
		return struct UNamedSlot(ptr_addr);
	}
	struct UNamedSlot GetV_RightDriftBtn_Slot() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 856);
		return struct UNamedSlot(ptr_addr);
	}
	struct UNamedSlot GetV_ResetBtn_Slot() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 864);
		return struct UNamedSlot(ptr_addr);
	}
	struct UNamedSlot GetV_BrakeBtn01_Slot() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 872);
		return struct UNamedSlot(ptr_addr);
	}
	struct UNamedSlot GetV_BrakeBtn02_Slot() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 880);
		return struct UNamedSlot(ptr_addr);
	}
	struct UNamedSlot GetV_InstanceBoostBtn01_Slot() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 888);
		return struct UNamedSlot(ptr_addr);
	}
	struct UNamedSlot GetV_InstanceBoostBtn02_Slot() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 896);
		return struct UNamedSlot(ptr_addr);
	}
	struct UNamedSlot GetV_StartBoosterButton01_Slot() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 904);
		return struct UNamedSlot(ptr_addr);
	}
	struct UNamedSlot GetV_StartBoosterButton02_Slot() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 912);
		return struct UNamedSlot(ptr_addr);
	}
	struct UNamedSlot GetV_WifiWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 920);
		return struct UNamedSlot(ptr_addr);
	}
	struct UNamedSlot GetV_BatteryWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 928);
		return struct UNamedSlot(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicenseSeqeuncerComponent
{
public:
	ULicenseSeqeuncerComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULicenseSequenceDirector
{
public:
	ULicenseSequenceDirector(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ULicenseSequenceDecodingComponent GetLicenseSequenceComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct ULicenseSequenceDecodingComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UM_TimeAttackRankerInfo
{
public:
	UM_TimeAttackRankerInfo(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbAlignLeft() {
		return memory.read<bool>(m_addr + 608);
	}
	bool GetbShowSelectRankerButton() {
		return memory.read<bool>(m_addr + 609);
	}
	bool GetbUseHighlightBar() {
		return memory.read<bool>(m_addr + 610);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPlayLicenseStartSequence
{
public:
	UPlayLicenseStartSequence(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ULevelSequencePlayer GetSequencePlayer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return struct ULevelSequencePlayer(ptr_addr);
	}
	struct TArray<struct FSequenceKartMovementKeys> GetKartMovementArray() {
		return memory.read<struct TArray<struct FSequenceKartMovementKeys>>(m_addr + 80);
	}
	struct TSoftClassPtr<UObject> GetHudWidgetClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 96);
	}
	struct TSoftClassPtr<UObject> GetBoostGaugeWidgetClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 136);
	}
	struct TSoftClassPtr<UObject> GetScoreWidgetClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 176);
	}
	struct APawn GetSequencePawn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 216);
		return struct APawn(ptr_addr);
	}
	struct ULevelSequence GetSequenceOverride() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 224);
		return struct ULevelSequence(ptr_addr);
	}
	struct ULicenseDataAsset GetLicenseDataAsset() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 232);
		return struct ULicenseDataAsset(ptr_addr);
	}
	struct ALevelSequenceActor GetSequenceActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 240);
		return struct ALevelSequenceActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicenseSpeedCheckData
{
public:
	ULicenseSpeedCheckData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FLicenseSpeedGateDef> GetLicenseSpeedGateDefVector() {
		return memory.read<struct TArray<struct FLicenseSpeedGateDef>>(m_addr + 88);
	}
	struct TArray<float> GetMinSpeed() {
		return memory.read<struct TArray<float>>(m_addr + 104);
	}
	struct TArray<float> GetMaxSpeed() {
		return memory.read<struct TArray<float>>(m_addr + 120);
	}
	int32_t GetMissionPoints() {
		return memory.read<int32_t>(m_addr + 136);
	}
	int32_t GetIndex() {
		return memory.read<int32_t>(m_addr + 140);
	}
	struct TSoftObjectPtr<UStaticMesh> GetGateMeshClass() {
		return memory.read<struct TSoftObjectPtr<UStaticMesh>>(m_addr + 144);
	}
	float GetGateSize() {
		return memory.read<float>(m_addr + 184);
	}
	float GetParticleScaleMultiplier() {
		return memory.read<float>(m_addr + 188);
	}
	struct FVector GetParticleLocationOffset() {
		return memory.read<struct FVector>(m_addr + 192);
	}
	struct TSoftObjectPtr<UParticleSystem> GetGateParticle() {
		return memory.read<struct TSoftObjectPtr<UParticleSystem>>(m_addr + 208);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicenseSpeedCheckComponent
{
public:
	ULicenseSpeedCheckComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ULicenseSpeedCheckData GetData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 200);
		return struct ULicenseSpeedCheckData(ptr_addr);
	}
	struct UParticleSystem GetGateParticleSystem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 208);
		return struct UParticleSystem(ptr_addr);
	}
	struct TArray<struct AActor> GetSpeedGateList() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 216);
		return struct TArray<struct AActor>(ptr_addr);
	}
	int32_t GetCurrentIndex() {
		return memory.read<int32_t>(m_addr + 232);
	}
	struct APawn GetPawn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 240);
		return struct APawn(ptr_addr);
	}
	struct FVector GetLastPosition() {
		return memory.read<struct FVector>(m_addr + 248);
	}
	struct AActor GetOwner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 264);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqShopGift
{
public:
	UPqShopGift(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetCategory() {
		return memory.read<struct FString>(m_addr + 56);
	}
	struct FString GetstockId() {
		return memory.read<struct FString>(m_addr + 72);
	}
	struct FString Getcurrency() {
		return memory.read<struct FString>(m_addr + 88);
	}
	struct FString Getreceiver() {
		return memory.read<struct FString>(m_addr + 104);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicenseStartTitleWidget
{
public:
	ULicenseStartTitleWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UKdTextBlock GetV_Text_Title() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UKdTextBlock(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicenseTargetActorData
{
public:
	ULicenseTargetActorData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FLicenseItemTargetActorInfo> GetLicenseSpawnActorDataList() {
		return memory.read<struct TArray<struct FLicenseItemTargetActorInfo>>(m_addr + 64);
	}
	float GetOffset() {
		return memory.read<float>(m_addr + 80);
	}
	float GetScale() {
		return memory.read<float>(m_addr + 84);
	}
	int32_t GetScore() {
		return memory.read<int32_t>(m_addr + 88);
	}
	struct TArray<struct FLicenseTargetRankPattern> GetRankPatterns() {
		return memory.read<struct TArray<struct FLicenseTargetRankPattern>>(m_addr + 96);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicenseTimer
{
public:
	ULicenseTimer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetTotalTime() {
		return memory.read<float>(m_addr + 64);
	}
	float Getweight() {
		return memory.read<float>(m_addr + 68);
	}
	int32_t GetScoreWhenFinished() {
		return memory.read<int32_t>(m_addr + 72);
	}
	bool GetbFailOnTimeOver() {
		return memory.read<bool>(m_addr + 76);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicenseTimerComponent
{
public:
	ULicenseTimerComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct URaceTimeComponent GetRaceTimeComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 176);
		return struct URaceTimeComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrAccountLinkConfirm
{
public:
	UPrAccountLinkConfirm(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbSucceed() {
		return memory.read<bool>(m_addr + 72);
	}
	int64_t GetuserNo() {
		return memory.read<int64_t>(m_addr + 80);
	}
	bool GetbBanned() {
		return memory.read<bool>(m_addr + 88);
	}
	int32_t GetErrorCode() {
		return memory.read<int32_t>(m_addr + 92);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicenseTrackGuideComponent
{
public:
	ULicenseTrackGuideComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ULicenseTrackGuideData GetData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 176);
		return struct ULicenseTrackGuideData(ptr_addr);
	}
	struct ALicenseTrackLine GetTrackLine() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 184);
		return struct ALicenseTrackLine(ptr_addr);
	}
	struct APawn GetPawn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 192);
		return struct APawn(ptr_addr);
	}
	struct URaceProgressComponent GetRaceProgressComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 200);
		return struct URaceProgressComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicenseTrackLineData
{
public:
	ULicenseTrackLineData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetDragForceMultiplier() {
		return memory.read<float>(m_addr + 64);
	}
	struct TSoftClassPtr<UObject> GetWarningWidgetClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULicenseTrafficConeComponent
{
public:
	ULicenseTrafficConeComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ULicenseSpawnTrafficConeData GetData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 184);
		return struct ULicenseSpawnTrafficConeData(ptr_addr);
	}
	struct AKdPawn GetPawn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 200);
		return struct AKdPawn(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UThumbnailTemplate
{
public:
	UThumbnailTemplate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AScenarioNotify
{
public:
	AScenarioNotify(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FScenarioNotifyParameter> GetNotifyContainer() {
		return memory.read<struct TArray<struct FScenarioNotifyParameter>>(m_addr + 624);
	}

private:
	std::uint64_t m_addr = 0;
};


class UNotifyPodium
{
public:
	UNotifyPodium(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UMajorPersonalResultWidget
{
public:
	UMajorPersonalResultWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTextBlock GetText_RaceMode() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 816);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock GetText_TeamMode() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 824);
		return struct UTextBlock(ptr_addr);
	}
	struct UImage GetImage_RankBackground() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 832);
		return struct UImage(ptr_addr);
	}
	struct UTextBlock GetText_OrdinalNumberRank() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 840);
		return struct UTextBlock(ptr_addr);
	}
	struct UImage GetV_LapTimeBackGround() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 848);
		return struct UImage(ptr_addr);
	}
	struct UTextBlock GetText_LapTime() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 856);
		return struct UTextBlock(ptr_addr);
	}
	struct UWrapBox GetWrapBox_Players() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 864);
		return struct UWrapBox(ptr_addr);
	}
	struct UWidgetSwitcher GetWS_ClearOrFail() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 872);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UVerticalBox GetVB_PlayMission() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 880);
		return struct UVerticalBox(ptr_addr);
	}
	struct TSoftClassPtr<UObject> GetPlayerWidgetClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 888);
	}
	struct TMap<enum class ERaceMode, struct FText> GetTextLocalizeRaceModeContainer() {
		return memory.read<struct TMap<enum class ERaceMode, struct FText>>(m_addr + 928);
	}
	struct TMap<enum class ERaceMode, struct FText> GetTextLocalizeTeamModeContainer() {
		return memory.read<struct TMap<enum class ERaceMode, struct FText>>(m_addr + 1008);
	}
	struct TArray<struct UMajorPersonalResultPlayerWidget> GetPlayerWidgets() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1088);
		return struct TArray<struct UMajorPersonalResultPlayerWidget>(ptr_addr);
	}
	struct TMap<enum class ERaceTeamType, struct FLinearColor> GetLapTimeTextColorContainer() {
		return memory.read<struct TMap<enum class ERaceTeamType, struct FLinearColor>>(m_addr + 1272);
	}
	struct TMap<enum class ERaceTeamType, struct FLinearColor> GetLapTimeBackGroundColorContainer() {
		return memory.read<struct TMap<enum class ERaceTeamType, struct FLinearColor>>(m_addr + 1352);
	}
	struct TMap<enum class ERaceTeamType, struct FLinearColor> GetRankBackGroundColorContainer() {
		return memory.read<struct TMap<enum class ERaceTeamType, struct FLinearColor>>(m_addr + 1432);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULiveryShapeEntryObject
{
public:
	ULiveryShapeEntryObject(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDateTime GetRestrictionExpireTime() {
		return memory.read<struct FDateTime>(m_addr + 48);
	}
	bool GetbEmptyItem() {
		return memory.read<bool>(m_addr + 56);
	}
	enum class ELiveryWrappingCategory GetCategory() {
		return memory.read<enum class ELiveryWrappingCategory>(m_addr + 57);
	}
	int32_t GetFileIndex() {
		return memory.read<int32_t>(m_addr + 60);
	}
	int32_t GetListIndex() {
		return memory.read<int32_t>(m_addr + 64);
	}
	bool GetbMySticker() {
		return memory.read<bool>(m_addr + 68);
	}
	bool GetbColorOverride() {
		return memory.read<bool>(m_addr + 69);
	}
	struct FText GetStickerName() {
		return memory.read<struct FText>(m_addr + 72);
	}
	enum class EKtItemGrade GetStickerGrade() {
		return memory.read<enum class EKtItemGrade>(m_addr + 96);
	}
	int32_t GetItemNum() {
		return memory.read<int32_t>(m_addr + 100);
	}
	struct FString GetItemId() {
		return memory.read<struct FString>(m_addr + 104);
	}
	struct FString GetShapePath() {
		return memory.read<struct FString>(m_addr + 120);
	}
	int32_t GetCanvasResolution() {
		return memory.read<int32_t>(m_addr + 144);
	}
	bool GetbLoaded() {
		return memory.read<bool>(m_addr + 148);
	}
	int32_t GetPageNum() {
		return memory.read<int32_t>(m_addr + 152);
	}
	struct FLiveryItemInfo GetLiveryItemInfo() {
		return memory.read<struct FLiveryItemInfo>(m_addr + 160);
	}

private:
	std::uint64_t m_addr = 0;
};


class AOutGameLevelScriptActor
{
public:
	AOutGameLevelScriptActor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULiveryMaterialGamutParams
{
public:
	ULiveryMaterialGamutParams(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FLiveryMaterialGamut> GetMaterialGamut() {
		return memory.read<struct TArray<struct FLiveryMaterialGamut>>(m_addr + 48);
	}
	struct TArray<struct FName> GetResetScalarParams() {
		return memory.read<struct TArray<struct FName>>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKartDecalChartDataAsset
{
public:
	UKartDecalChartDataAsset(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FKartDecalChart> GetCharts() {
		return memory.read<struct TArray<struct FKartDecalChart>>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULoadPhaseComponentRule
{
public:
	ULoadPhaseComponentRule(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULiveryPaintCollection
{
public:
	ULiveryPaintCollection(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct TSoftObjectPtr<UTexture2D>> GetPaintTextures() {
		return memory.read<struct TArray<struct TSoftObjectPtr<UTexture2D>>>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULiveryItemEntryObject
{
public:
	ULiveryItemEntryObject(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDateTime GetRestrictionExpireTime() {
		return memory.read<struct FDateTime>(m_addr + 48);
	}
	int32_t GetItemIndex() {
		return memory.read<int32_t>(m_addr + 56);
	}
	int32_t GetliveryId() {
		return memory.read<int32_t>(m_addr + 60);
	}
	struct FString GetKartID() {
		return memory.read<struct FString>(m_addr + 64);
	}
	bool GetbEquipped() {
		return memory.read<bool>(m_addr + 80);
	}
	enum class ELiveryManagingBtnType GetBtnType() {
		return memory.read<enum class ELiveryManagingBtnType>(m_addr + 81);
	}
	struct UTexture2D GetGroupItemTexture() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 88);
		return struct UTexture2D(ptr_addr);
	}
	struct TWeakObjectPtr<UMaterialInstance> GetMaterialIcon() {
		return memory.read<struct TWeakObjectPtr<UMaterialInstance>>(m_addr + 96);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULiveryColorRowEntryObject
{
public:
	ULiveryColorRowEntryObject(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class ELiveryCategoryType GetColorCategory() {
		return memory.read<enum class ELiveryCategoryType>(m_addr + 40);
	}
	int32_t GetColumnIndex() {
		return memory.read<int32_t>(m_addr + 44);
	}
	int32_t GetRowIndex() {
		return memory.read<int32_t>(m_addr + 48);
	}
	struct FLinearColor GetRowColor() {
		return memory.read<struct FLinearColor>(m_addr + 52);
	}
	struct FText GetColorLabel() {
		return memory.read<struct FText>(m_addr + 72);
	}
	struct FString GetIntensityLabel() {
		return memory.read<struct FString>(m_addr + 96);
	}
	struct TSoftObjectPtr<UTexture2D> GetRowImage() {
		return memory.read<struct TSoftObjectPtr<UTexture2D>>(m_addr + 112);
	}
	enum class ELiveryMaterialType GetRowMaterialType() {
		return memory.read<enum class ELiveryMaterialType>(m_addr + 152);
	}
	struct FVector2D GetRowBoxSize() {
		return memory.read<struct FVector2D>(m_addr + 156);
	}
	struct TWeakObjectPtr<UListView> GetParentListView() {
		return memory.read<struct TWeakObjectPtr<UListView>>(m_addr + 164);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULiveryColorSubEntryObject
{
public:
	ULiveryColorSubEntryObject(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class ELiveryCategoryType GetColorCategory() {
		return memory.read<enum class ELiveryCategoryType>(m_addr + 40);
	}
	int32_t GetColumnIndex() {
		return memory.read<int32_t>(m_addr + 44);
	}
	int32_t GetSubIndex() {
		return memory.read<int32_t>(m_addr + 48);
	}
	struct FLinearColor GetSubColor() {
		return memory.read<struct FLinearColor>(m_addr + 52);
	}
	struct FText GetSubColorLabel() {
		return memory.read<struct FText>(m_addr + 72);
	}
	struct FString GetSubIntensityLabel() {
		return memory.read<struct FString>(m_addr + 96);
	}
	enum class ELiveryMaterialType GetSubMaterialType() {
		return memory.read<enum class ELiveryMaterialType>(m_addr + 112);
	}
	struct TWeakObjectPtr<UListView> GetOwnerListView() {
		return memory.read<struct TWeakObjectPtr<UListView>>(m_addr + 116);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULqGetMyStickerBookmarkList
{
public:
	ULqGetMyStickerBookmarkList(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULiveryReportViewerEntryObject
{
public:
	ULiveryReportViewerEntryObject(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class ELiveryReportList GetReportListType() {
		return memory.read<enum class ELiveryReportList>(m_addr + 40);
	}
	int32_t GetItemIndex() {
		return memory.read<int32_t>(m_addr + 44);
	}
	struct FString GetliveryId() {
		return memory.read<struct FString>(m_addr + 48);
	}
	struct FString GetLiveryUnique() {
		return memory.read<struct FString>(m_addr + 64);
	}
	struct FLiveryDesignDesc GetLiveryDesign() {
		return memory.read<struct FLiveryDesignDesc>(m_addr + 80);
	}
	struct TArray<struct FString> GetSVGFilePathList() {
		return memory.read<struct TArray<struct FString>>(m_addr + 144);
	}
	struct TArray<struct FLiveryWrappingTransform> GetTransformList() {
		return memory.read<struct TArray<struct FLiveryWrappingTransform>>(m_addr + 160);
	}

private:
	std::uint64_t m_addr = 0;
};


class UOutGameFirstPlayerCheckRule
{
public:
	UOutGameFirstPlayerCheckRule(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AMainMenuKartPawnCamera
{
public:
	AMainMenuKartPawnCamera(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class EPawnCameraType GetCameraType() {
		return memory.read<enum class EPawnCameraType>(m_addr + 2176);
	}
	struct FCameraBlendInfo GetCameraBlendInfo() {
		return memory.read<struct FCameraBlendInfo>(m_addr + 2180);
	}
	struct FSquenceInfo GetSequenceInfo() {
		return memory.read<struct FSquenceInfo>(m_addr + 2200);
	}
	struct TMap<enum class EOutGamePawnType, struct FTargetRotatorAnimInfo> GetTargetRotationAnimInfo() {
		return memory.read<struct TMap<enum class EOutGamePawnType, struct FTargetRotatorAnimInfo>>(m_addr + 2280);
	}
	struct TMap<enum class EOutGamePawnType, struct FTargetVectorAnimInfo> GetTargetLocationAnimInfo() {
		return memory.read<struct TMap<enum class EOutGamePawnType, struct FTargetVectorAnimInfo>>(m_addr + 2360);
	}
	struct TMap<enum class EOutGamePawnType, struct FTargetVectorAnimInfo> GetTargetScaleAnimInfo() {
		return memory.read<struct TMap<enum class EOutGamePawnType, struct FTargetVectorAnimInfo>>(m_addr + 2440);
	}
	struct TWeakObjectPtr<ULevelSequencePlayer> GetLevelSequencePlayer() {
		return memory.read<struct TWeakObjectPtr<ULevelSequencePlayer>>(m_addr + 2520);
	}
	struct TSet<struct UObject> GetPreCacheAssetContainer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2544);
		return struct TSet<struct UObject>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ARotatableCameraActor
{
public:
	ARotatableCameraActor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRoatableCameraViewTransition GetCameraBoomViewTransition() {
		return memory.read<struct FRoatableCameraViewTransition>(m_addr + 2672);
	}
	float GetPitchMin() {
		return memory.read<float>(m_addr + 2740);
	}
	float GetPitchMax() {
		return memory.read<float>(m_addr + 2744);
	}
	float GetPitchScale() {
		return memory.read<float>(m_addr + 2748);
	}
	float GetYawMin() {
		return memory.read<float>(m_addr + 2752);
	}
	float GetYawMax() {
		return memory.read<float>(m_addr + 2756);
	}
	float GetYawScale() {
		return memory.read<float>(m_addr + 2760);
	}
	float GetRollMin() {
		return memory.read<float>(m_addr + 2764);
	}
	float GetRollMax() {
		return memory.read<float>(m_addr + 2768);
	}
	float GetRollScale() {
		return memory.read<float>(m_addr + 2772);
	}
	float GetBaseTurnRate() {
		return memory.read<float>(m_addr + 2776);
	}
	float GetBaseLookUpRate() {
		return memory.read<float>(m_addr + 2780);
	}
	float GetZoomMin() {
		return memory.read<float>(m_addr + 2784);
	}
	float GetZoomMax() {
		return memory.read<float>(m_addr + 2788);
	}
	float GetZoomScale() {
		return memory.read<float>(m_addr + 2792);
	}
	float GetZoomRate() {
		return memory.read<float>(m_addr + 2796);
	}
	float GetMobilePinchScale() {
		return memory.read<float>(m_addr + 2800);
	}
	bool GetbUsePinchInverse() {
		return memory.read<bool>(m_addr + 2804);
	}
	float GetTargetArmOriginalLength() {
		return memory.read<float>(m_addr + 2808);
	}
	struct FVector GetOriginalCameraBoomLocation() {
		return memory.read<struct FVector>(m_addr + 2812);
	}
	struct FRotator GetCameraOriginalRotation() {
		return memory.read<struct FRotator>(m_addr + 2824);
	}
	struct USpringArmComponent GetCameraBoom() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2840);
		return struct USpringArmComponent(ptr_addr);
	}
	struct FVector GetBeforeTouchLocation() {
		return memory.read<struct FVector>(m_addr + 2848);
	}
	float GetTouchSensitivityX() {
		return memory.read<float>(m_addr + 2860);
	}
	float GetTouchSensitivityY() {
		return memory.read<float>(m_addr + 2864);
	}
	float GetBeforePinchValue() {
		return memory.read<float>(m_addr + 2868);
	}
	bool GetbTouchMove() {
		return memory.read<bool>(m_addr + 2872);
	}
	bool GetbPauseCameraInput() {
		return memory.read<bool>(m_addr + 2873);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULiveryEditLogicComponent
{
public:
	ULiveryEditLogicComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULiveryStickerLogicComponent
{
public:
	ULiveryStickerLogicComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UTimeAttackOnlineMap
{
public:
	UTimeAttackOnlineMap(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<struct FString, struct FKtTimeAttack> GetMap() {
		return memory.read<struct TMap<struct FString, struct FKtTimeAttack>>(m_addr + 48);
	}
	struct FDateTime GetStartTime() {
		return memory.read<struct FDateTime>(m_addr + 128);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULiveryReportViewerLogicComponent
{
public:
	ULiveryReportViewerLogicComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKtItemPreset GetCurrentPreset() {
		return memory.read<struct FKtItemPreset>(m_addr + 240);
	}
	struct FRotator GetPawnOriginalRotator() {
		return memory.read<struct FRotator>(m_addr + 400);
	}
	struct FVector GetPawnOriginalLoc() {
		return memory.read<struct FVector>(m_addr + 412);
	}
	struct FVector GetPawnOrginalScale() {
		return memory.read<struct FVector>(m_addr + 424);
	}
	struct FInputLimitValue GetInputLimit() {
		return memory.read<struct FInputLimitValue>(m_addr + 436);
	}

private:
	std::uint64_t m_addr = 0;
};


class UM_LootBoxPageWidget
{
public:
	UM_LootBoxPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UWqRegister
{
public:
	UWqRegister(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetQueue() {
		return memory.read<struct FString>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UWcWork
{
public:
	UWcWork(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetID() {
		return memory.read<struct FString>(m_addr + 48);
	}
	struct FString GetrequestString() {
		return memory.read<struct FString>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};


class UWqHttpTextReply
{
public:
	UWqHttpTextReply(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetstatusCode() {
		return memory.read<int32_t>(m_addr + 48);
	}
	struct FString GetContentType() {
		return memory.read<struct FString>(m_addr + 56);
	}
	struct FString GetBody() {
		return memory.read<struct FString>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAddBoostGauge
{
public:
	UAddBoostGauge(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftClassPtr<UObject> GetBoostGaugeWidget() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UStickerStockCache
{
public:
	UStickerStockCache(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<int64_t, struct FStickerStockCacheItem> GetItems() {
		return memory.read<struct TMap<int64_t, struct FStickerStockCacheItem>>(m_addr + 40);
	}
	struct UAccountLiveryMarket GetAccountLiveryMarket() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 400);
		return struct UAccountLiveryMarket(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UReplayReadyLogicComponent
{
public:
	UReplayReadyLogicComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UMajorResultTeamPointWidget
{
public:
	UMajorResultTeamPointWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UWidgetSwitcher GetV_GameModeSwitcher() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UWidgetSwitcher GetV_PointWinnerSwitcher() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UWidgetSwitcher GetV_TeamWinnerSwitcher() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UKdTextBlock GetV_PointWinnerRank() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UKdTextBlock GetV_PointWinnerName() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UKdTextBlock GetV_PointWinnerScore() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UImage GetV_PointWinnerUnderbar() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UImage(ptr_addr);
	}
	struct UKdTextBlock GetV_PointNormalRank() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UKdTextBlock GetV_PointNormalName() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UKdTextBlock GetV_PointNormalScore() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UKdTextBlock GetV_TeamWinnerRank() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UKdTextBlock GetV_TeamWinnerName() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UImage GetV_TeamWinnerUnderbar() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UImage(ptr_addr);
	}
	struct UKdTextBlock GetV_TeamNormalRank() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UKdTextBlock GetV_TeamNormalName() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UKdTextBlock GetV_SoloMatch() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 728);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UKdTextBlock GetV_SoloRank() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 736);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UImage GetV_SoloUnderbar() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 744);
		return struct UImage(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULiveryMarketTagCache
{
public:
	ULiveryMarketTagCache(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAccountLiveryMarket GetAccountLiveryMarket() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 400);
		return struct UAccountLiveryMarket(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULoadingTimeComponent
{
public:
	ULoadingTimeComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UNextTipButton
{
public:
	UNextTipButton(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULoginEventItemDefEntryObject
{
public:
	ULoginEventItemDefEntryObject(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetrewardStockId() {
		return memory.read<struct FString>(m_addr + 40);
	}
	struct FKtStockItem GetRewardStockItem() {
		return memory.read<struct FKtStockItem>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UInitalRewardEntryObject
{
public:
	UInitalRewardEntryObject(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKtClientItemDef GetItemDef() {
		return memory.read<struct FKtClientItemDef>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};


class URewardNoticeDataObject
{
public:
	URewardNoticeDataObject(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPauseReplayWhileVerifying
{
public:
	UPauseReplayWhileVerifying(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULocalDevParam
{
public:
	ULocalDevParam(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULockReaction
{
public:
	ULockReaction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftObjectPtr<UAnimMontage> GetLockMontage() {
		return memory.read<struct TSoftObjectPtr<UAnimMontage>>(m_addr + 536);
	}
	struct TSoftObjectPtr<USkeletalMesh> GetLockMesh() {
		return memory.read<struct TSoftObjectPtr<USkeletalMesh>>(m_addr + 576);
	}
	struct TSoftObjectPtr<UFMODEvent> GetAffectSound() {
		return memory.read<struct TSoftObjectPtr<UFMODEvent>>(m_addr + 616);
	}
	struct UItemComponent GetVictim() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UItemComponent(ptr_addr);
	}
	struct USkeletalMeshComponent GetMeshSkeletalComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct USkeletalMeshComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ALoginLevelScriptActor
{
public:
	ALoginLevelScriptActor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPlayMissionComponent
{
public:
	UPlayMissionComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKtPlayMissionDef GetMission() {
		return memory.read<struct FKtPlayMissionDef>(m_addr + 224);
	}
	struct FKtPlayMissionRewardDef Getreward() {
		return memory.read<struct FKtPlayMissionRewardDef>(m_addr + 288);
	}
	bool GetbHasReceivedMissionData() {
		return memory.read<bool>(m_addr + 320);
	}

private:
	std::uint64_t m_addr = 0;
};


class ALoginModeBase
{
public:
	ALoginModeBase(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPqAuthDev
{
public:
	UPqAuthDev(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetuserName() {
		return memory.read<struct FString>(m_addr + 96);
	}
	struct FString GetToken() {
		return memory.read<struct FString>(m_addr + 112);
	}
	bool GetbUseAccountLink() {
		return memory.read<bool>(m_addr + 128);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPauseComponent
{
public:
	UPauseComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UDialogTemplate GetPauseMenuWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 216);
		return struct UDialogTemplate(ptr_addr);
	}
	UObject GetPauseWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 224);
		return UObject(ptr_addr);
	}
	struct TSoftObjectPtr<UPauseDataAsset> GetPauseDataAsset() {
		return memory.read<struct TSoftObjectPtr<UPauseDataAsset>>(m_addr + 232);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqAuthNxA
{
public:
	UPqAuthNxA(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetTicket() {
		return memory.read<struct FString>(m_addr + 96);
	}
	bool GetbUseAccountLink() {
		return memory.read<bool>(m_addr + 112);
	}

private:
	std::uint64_t m_addr = 0;
};


class UCreateScenarioPageWidgetForOutGame
{
public:
	UCreateScenarioPageWidgetForOutGame(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPqAuthPSN
{
public:
	UPqAuthPSN(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetauthCode() {
		return memory.read<struct FString>(m_addr + 96);
	}
	enum class EPlatformOnlineEnv Getenv() {
		return memory.read<enum class EPlatformOnlineEnv>(m_addr + 112);
	}
	bool GetbUseAccountLink() {
		return memory.read<bool>(m_addr + 113);
	}
	struct FString GettitleId() {
		return memory.read<struct FString>(m_addr + 120);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqAuthSteam
{
public:
	UPqAuthSteam(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetsessionTicket() {
		return memory.read<struct FString>(m_addr + 96);
	}
	bool GetbUseAccountLink() {
		return memory.read<bool>(m_addr + 112);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqAccountLinkCheck
{
public:
	UPqAccountLinkCheck(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrAccountLinkCheck
{
public:
	UPrAccountLinkCheck(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbExistGlobalNpsn() {
		return memory.read<bool>(m_addr + 72);
	}
	bool GetbMustAccountLink() {
		return memory.read<bool>(m_addr + 73);
	}
	bool GetbAccountLinkGuest() {
		return memory.read<bool>(m_addr + 74);
	}
	int32_t GetwithdrawExpiresSec() {
		return memory.read<int32_t>(m_addr + 76);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqAccountLinkSelect
{
public:
	UPqAccountLinkSelect(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbGuest() {
		return memory.read<bool>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqAccountLinkRecover
{
public:
	UPqAccountLinkRecover(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbRecover() {
		return memory.read<bool>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrAccountLinkRecover
{
public:
	UPrAccountLinkRecover(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbSucceed() {
		return memory.read<bool>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTachometerWidget
{
public:
	UTachometerWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTextBlock GetSpeedText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UTextBlock(ptr_addr);
	}
	struct UImage GetBackground() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UImage(ptr_addr);
	}
	struct UTextBlock Getdraft() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock GetDraftScale() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UTextBlock(ptr_addr);
	}
	struct UImage GetDraftUnderbar() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UImage(ptr_addr);
	}
	struct UWidgetAnimation GetWholeVibration() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation GetDraftCharge() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation GetDraftOn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UWidgetAnimation(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqAccountLinkConfirm
{
public:
	UPqAccountLinkConfirm(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrAuthComplete
{
public:
	UPrAuthComplete(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetaccountId() {
		return memory.read<struct FString>(m_addr + 72);
	}
	bool GetbNew() {
		return memory.read<bool>(m_addr + 88);
	}
	bool GetbNeedSet2ndPwd() {
		return memory.read<bool>(m_addr + 89);
	}
	bool GetbNeed2ndPwd() {
		return memory.read<bool>(m_addr + 90);
	}
	int32_t GetpwdTryCountLeft() {
		return memory.read<int32_t>(m_addr + 92);
	}
	bool GetbChangeName() {
		return memory.read<bool>(m_addr + 96);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTransition_ShadowQuestByPawn
{
public:
	UTransition_ShadowQuestByPawn(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULootBoxAnimInstance
{
public:
	ULootBoxAnimInstance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class EKtItemGrade GetitemGrade() {
		return memory.read<enum class EKtItemGrade>(m_addr + 696);
	}
	struct TArray<struct UParticleSystemComponent> GetParticleSystemComponentArray() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct TArray<struct UParticleSystemComponent>(ptr_addr);
	}
	struct TMap<enum class ELootBoxMontage, struct TSoftObjectPtr<UAnimMontage>> GetMontageAssetMap() {
		return memory.read<struct TMap<enum class ELootBoxMontage, struct TSoftObjectPtr<UAnimMontage>>>(m_addr + 720);
	}

private:
	std::uint64_t m_addr = 0;
};


class ALootBoxLevelSequenceActor
{
public:
	ALootBoxLevelSequenceActor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class ELootBoxSequenceType GetLootBoxSequenceType() {
		return memory.read<enum class ELootBoxSequenceType>(m_addr + 680);
	}

private:
	std::uint64_t m_addr = 0;
};


class URaceRankItemWidget
{
public:
	URaceRankItemWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UImage GeticonImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UImage(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULootBoxLogicComponent
{
public:
	ULootBoxLogicComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AOutGamePawn
{
public:
	AOutGamePawn(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class EOutGamePawnType GetPawnType() {
		return memory.read<enum class EOutGamePawnType>(m_addr + 936);
	}
	struct FString GetAppliedStockItemId() {
		return memory.read<struct FString>(m_addr + 944);
	}
	struct UDecalComponent GetRotationEffectDecal() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 960);
		return struct UDecalComponent(ptr_addr);
	}
	struct UDecalComponent GetRotationEffectDecalChar() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 968);
		return struct UDecalComponent(ptr_addr);
	}
	struct TArray<struct TWeakObjectPtr<USceneCaptureComponent2D>> GetSceneCaptureComponents() {
		return memory.read<struct TArray<struct TWeakObjectPtr<USceneCaptureComponent2D>>>(m_addr + 984);
	}
	struct FVector GetNameTagPosition() {
		return memory.read<struct FVector>(m_addr + 1000);
	}
	bool GetbVisibleKart() {
		return memory.read<bool>(m_addr + 1104);
	}
	bool GetbVisibleCharacter() {
		return memory.read<bool>(m_addr + 1105);
	}
	bool GetbVisibleItemModel() {
		return memory.read<bool>(m_addr + 1106);
	}
	bool GetbVisibleWidgetComponent() {
		return memory.read<bool>(m_addr + 1107);
	}
	bool GetbStandBesideOwnKart() {
		return memory.read<bool>(m_addr + 1108);
	}
	bool GetbActiveLookat() {
		return memory.read<bool>(m_addr + 1109);
	}
	struct TArray<struct FKartSequenceDelegateInfo> GetKartSequenceDelegateInfos() {
		return memory.read<struct TArray<struct FKartSequenceDelegateInfo>>(m_addr + 1112);
	}
	struct UMaterialInstanceDynamic GetRotationMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1144);
		return struct UMaterialInstanceDynamic(ptr_addr);
	}
	struct UMaterialInstanceDynamic GetRotationMaterialChar() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1152);
		return struct UMaterialInstanceDynamic(ptr_addr);
	}
	float GetFadeInTime() {
		return memory.read<float>(m_addr + 1232);
	}
	float GetFadeOutTimeNormal() {
		return memory.read<float>(m_addr + 1236);
	}
	float GetFadeOutWaitTimeNormal() {
		return memory.read<float>(m_addr + 1240);
	}
	float GetFadeOutTimeReset() {
		return memory.read<float>(m_addr + 1244);
	}
	float GetFadeOutWaitTimeReset() {
		return memory.read<float>(m_addr + 1248);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULootBoxProviderAnimInstance
{
public:
	ULootBoxProviderAnimInstance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class EKtItemGrade GetitemGrade() {
		return memory.read<enum class EKtItemGrade>(m_addr + 696);
	}
	struct TArray<struct UParticleSystemComponent> GetParticleSystemComponentArray() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct TArray<struct UParticleSystemComponent>(ptr_addr);
	}
	struct TMap<enum class ELootBoxMontage, struct TSoftObjectPtr<UAnimMontage>> GetMontageAssetMap() {
		return memory.read<struct TMap<enum class ELootBoxMontage, struct TSoftObjectPtr<UAnimMontage>>>(m_addr + 720);
	}

private:
	std::uint64_t m_addr = 0;
};


class ALootBoxSequencePlayPoint
{
public:
	ALootBoxSequencePlayPoint(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UReplayControlLogicComponent
{
public:
	UReplayControlLogicComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct UCameraModeButtonWidget> GetCameraButtonWidgetList() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 224);
		return struct TArray<struct UCameraModeButtonWidget>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULootPlateAnimInstance
{
public:
	ULootPlateAnimInstance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class EKtItemGrade GetitemGrade() {
		return memory.read<enum class EKtItemGrade>(m_addr + 696);
	}
	struct TArray<struct UParticleSystemComponent> GetParticleSystemComponentArray() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct TArray<struct UParticleSystemComponent>(ptr_addr);
	}
	struct TMap<enum class ELootPlateMontage, struct TSoftObjectPtr<UAnimMontage>> GetMontageAssetMap() {
		return memory.read<struct TMap<enum class ELootPlateMontage, struct TSoftObjectPtr<UAnimMontage>>>(m_addr + 720);
	}
	struct UMaterialParameterCollection GetMaterialParameterCollection() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 800);
		return struct UMaterialParameterCollection(ptr_addr);
	}
	struct UMaterialInstanceDynamic GetRingMaterialInstanceDynamic() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 808);
		return struct UMaterialInstanceDynamic(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ALowLatencyActor
{
public:
	ALowLatencyActor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKartRepMovement GetKartRepMovement() {
		return memory.read<struct FKartRepMovement>(m_addr + 544);
	}
	float GetNetCullDistanceSquared_Forward() {
		return memory.read<float>(m_addr + 608);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAchievementEntryObject
{
public:
	UAchievementEntryObject(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UMatchNotifyRegistered
{
public:
	UMatchNotifyRegistered(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetestTimeSec() {
		return memory.read<int32_t>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};


class UM_AchievementPageWidget
{
public:
	UM_AchievementPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TWeakObjectPtr<UAchievementEntryObject> GetCurrentFocusedItemDefObject() {
		return memory.read<struct TWeakObjectPtr<UAchievementEntryObject>>(m_addr + 792);
	}

private:
	std::uint64_t m_addr = 0;
};


class USQRaceOverWidget
{
public:
	USQRaceOverWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UWidgetSwitcher GetWS_ResultText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UTextBlock GetText_RaceMode() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UTextBlock(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UM_ChattingPageWidget
{
public:
	UM_ChattingPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UM_CustomGamePageWidget
{
public:
	UM_CustomGamePageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UM_EventPageWidget
{
public:
	UM_EventPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UButtonTemplate GetCurrentReceiveAllButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1184);
		return struct UButtonTemplate(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UM_GaragePageWidget
{
public:
	UM_GaragePageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UM_GrandPrixPageWidget
{
public:
	UM_GrandPrixPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UM_KartChangeDialog
{
public:
	UM_KartChangeDialog(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UM_LiveryReportViewerPageWidget
{
public:
	UM_LiveryReportViewerPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UDeactivatePauseMenu
{
public:
	UDeactivatePauseMenu(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UM_LoginPageWidget
{
public:
	UM_LoginPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TWeakObjectPtr<UDialogTemplate> GetRepairDialog() {
		return memory.read<struct TWeakObjectPtr<UDialogTemplate>>(m_addr + 1040);
	}
	struct TWeakObjectPtr<UDialogTemplate> GetNoticeDialog() {
		return memory.read<struct TWeakObjectPtr<UDialogTemplate>>(m_addr + 1048);
	}
	struct TWeakObjectPtr<UDialogTemplate> GetLoginCommonDialog() {
		return memory.read<struct TWeakObjectPtr<UDialogTemplate>>(m_addr + 1056);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMailListEntryObject
{
public:
	UMailListEntryObject(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UM_MainmenuPageWidget
{
public:
	UM_MainmenuPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftObjectPtr<UPageWidgetAsset> GetPageWidgetAssetMobile() {
		return memory.read<struct TSoftObjectPtr<UPageWidgetAsset>>(m_addr + 1064);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMovieSceneKartMovementTrack
{
public:
	UMovieSceneKartMovementTrack(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct UMovieSceneSection> GetSections() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 144);
		return struct TArray<struct UMovieSceneSection>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UM_ModeSelectPageWidget
{
public:
	UM_ModeSelectPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UM_NormalChallengePageWidget
{
public:
	UM_NormalChallengePageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UM_OptionPageWidget
{
public:
	UM_OptionPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UDialogTemplate GetDropDownPopup() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 992);
		return struct UDialogTemplate(ptr_addr);
	}
	struct UUserWidget GetDropDownWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1000);
		return struct UUserWidget(ptr_addr);
	}
	struct UUserWidget GetOptionHUDTypeGroupButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1016);
		return struct UUserWidget(ptr_addr);
	}
	struct UDialogTemplate GetHUDCustomDialogWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1024);
		return struct UDialogTemplate(ptr_addr);
	}
	struct UUserWidget GetCustomizeMenu() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1032);
		return struct UUserWidget(ptr_addr);
	}
	struct UWidgetSwitcher GetHideOpenWidgetSwitcher() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1040);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UCustomizableWidget GetSelectedWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1048);
		return struct UCustomizableWidget(ptr_addr);
	}
	struct UTouchInputHUD GetSelectedPreset() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1056);
		return struct UTouchInputHUD(ptr_addr);
	}
	struct TArray<struct UTouchInputHUD> GetPresets() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1064);
		return struct TArray<struct UTouchInputHUD>(ptr_addr);
	}
	struct UCustomHUDData GetSelectedCustomHUDData() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1080);
		return struct UCustomHUDData(ptr_addr);
	}
	struct UCustomHUDData GetCustomHUDData0() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1088);
		return struct UCustomHUDData(ptr_addr);
	}
	struct UCustomHUDData GetCustomHUDData1() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1096);
		return struct UCustomHUDData(ptr_addr);
	}
	struct UCustomHUDData GetCustomHUDData2() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1104);
		return struct UCustomHUDData(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UM_ShopPageWidget
{
public:
	UM_ShopPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UM_PremiumChallengePageWidget
{
public:
	UM_PremiumChallengePageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UM_ProfileEditPageWidget
{
public:
	UM_ProfileEditPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TWeakObjectPtr<UEmblemEntryObject> GetCurrentFocusedEmblemObject() {
		return memory.read<struct TWeakObjectPtr<UEmblemEntryObject>>(m_addr + 832);
	}

private:
	std::uint64_t m_addr = 0;
};


class UM_RacingPassRewardListItem
{
public:
	UM_RacingPassRewardListItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UM_ScenarioPageWidget
{
public:
	UM_ScenarioPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UM_SideMenuPageWidget
{
public:
	UM_SideMenuPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UM_StickerMarketPageWidget
{
public:
	UM_StickerMarketPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UM_StudioPageWidget
{
public:
	UM_StudioPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UM_TimeAttackPageWidget
{
public:
	UM_TimeAttackPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UMagnetReaction
{
public:
	UMagnetReaction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftObjectPtr<UParticleSystem> GetAttackerParticle() {
		return memory.read<struct TSoftObjectPtr<UParticleSystem>>(m_addr + 536);
	}
	struct TSoftObjectPtr<UParticleSystem> GetVictimParticle() {
		return memory.read<struct TSoftObjectPtr<UParticleSystem>>(m_addr + 576);
	}
	struct TSoftObjectPtr<UFMODEvent> GetHitSound() {
		return memory.read<struct TSoftObjectPtr<UFMODEvent>>(m_addr + 616);
	}
	struct UParticleSystemComponent GetUserParticle() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UParticleSystemComponent(ptr_addr);
	}
	struct UParticleSystemComponent GetTargetParticle() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UParticleSystemComponent(ptr_addr);
	}
	struct UItemComponent GetMagnetUser() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UItemComponent(ptr_addr);
	}
	struct UItemComponent GetMagnetTarget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UItemComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULqGetMyStickerPenaltyState
{
public:
	ULqGetMyStickerPenaltyState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UMailLogicComponent
{
public:
	UMailLogicComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UDelegateBarrier GetBarrier() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 400);
		return struct UDelegateBarrier(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class AScenarioSwitchBase
{
public:
	AScenarioSwitchBase(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FScenarioTriggerTarget GetTrueContainer() {
		return memory.read<struct FScenarioTriggerTarget>(m_addr + 624);
	}
	struct FScenarioTriggerTarget GetFalseContainer() {
		return memory.read<struct FScenarioTriggerTarget>(m_addr + 656);
	}
	struct FScenarioTriggerTarget GetExitContainer() {
		return memory.read<struct FScenarioTriggerTarget>(m_addr + 688);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPcReceivedMailList
{
public:
	UPcReceivedMailList(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FKtMailHeader> Getmails() {
		return memory.read<struct TArray<struct FKtMailHeader>>(m_addr + 48);
	}
	bool Getcontinued() {
		return memory.read<bool>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMainMenuCameraManageComponent
{
public:
	UMainMenuCameraManageComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<enum class EPawnCameraType, struct TWeakObjectPtr<AMainMenuKartPawnCamera>> GetCameraList() {
		return memory.read<struct TMap<enum class EPawnCameraType, struct TWeakObjectPtr<AMainMenuKartPawnCamera>>>(m_addr + 216);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPageWidgetAsset
{
public:
	UPageWidgetAsset(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<enum class EPageCase, struct TSoftClassPtr<UObject>> GetWidgetClass() {
		return memory.read<struct TMap<enum class EPageCase, struct TSoftClassPtr<UObject>>>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};


class AMajorPlayerState
{
public:
	AMajorPlayerState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AMajorPodiumMediaWall
{
public:
	AMajorPodiumMediaWall(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<enum class EMajorPodiumSequenceType, struct TSoftClassPtr<UObject>> GetAssetContainer() {
		return memory.read<struct TMap<enum class EMajorPodiumSequenceType, struct TSoftClassPtr<UObject>>>(m_addr + 544);
	}
	enum class EMajorPodiumSequenceType GetSequenceType() {
		return memory.read<enum class EMajorPodiumSequenceType>(m_addr + 624);
	}
	struct UMajorPodiumWidget GetMajorPodiumWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UMajorPodiumWidget(ptr_addr);
	}
	struct UWidgetComponent GetWidgetComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UWidgetComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqShopPurchaseSteam
{
public:
	UPqShopPurchaseSteam(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetCategory() {
		return memory.read<struct FString>(m_addr + 56);
	}
	struct FString GetstockId() {
		return memory.read<struct FString>(m_addr + 72);
	}
	struct FString GetLanguage() {
		return memory.read<struct FString>(m_addr + 88);
	}
	struct FString GetlocalizedStockName() {
		return memory.read<struct FString>(m_addr + 104);
	}

private:
	std::uint64_t m_addr = 0;
};


class UShadowQuestRemoveHUD
{
public:
	UShadowQuestRemoveHUD(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UMajorResultBaseTabWidget
{
public:
	UMajorResultBaseTabWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTextBlock GetText_TeamPoint() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UTextBlock(ptr_addr);
	}
	struct UVerticalBox GetVerticalBox_Players() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UVerticalBox(ptr_addr);
	}
	UMajorResultPlayerWidget GetResultPlayerWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return UMajorResultPlayerWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMajorResultWidget
{
public:
	UMajorResultWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UKdTextBlock GetV_GameMode() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 816);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UKdTextBlock GetV_TeamMode() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 824);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UKdTextBlock GetV_TrackName() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 832);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UTrackDifficultWidget GetV_TrackDifficultWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 840);
		return struct UTrackDifficultWidget(ptr_addr);
	}
	struct UKdTextBlock GetV_Perfect() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 848);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UKdTextBlock GetV_WinnerTeam() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 856);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UKdTextBlock GetV_WinnerPostFix() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 864);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UPanelWidget GetV_TeamPointContainer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 872);
		return struct UPanelWidget(ptr_addr);
	}
	struct UImage GetV_Image_Buff_2() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 880);
		return struct UImage(ptr_addr);
	}
	struct UImage GetV_Image_Buff_3() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 888);
		return struct UImage(ptr_addr);
	}
	struct UImage GetV_Image_Buff_4() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 896);
		return struct UImage(ptr_addr);
	}
	struct UWidgetSwitcher GetV_InfoSwitcher() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 904);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UWidgetSwitcher GetV_WinnerBGSwitcher() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 912);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UImage GetV_BGDefault() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 920);
		return struct UImage(ptr_addr);
	}
	struct UMajorResultBaseTabWidget GetV_MajorResultBaseTabWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 928);
		return struct UMajorResultBaseTabWidget(ptr_addr);
	}
	struct UMajorResultDetailTabWidget GetV_MajorResultDetailTabWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 936);
		return struct UMajorResultDetailTabWidget(ptr_addr);
	}
	struct UButtonTemplate GetV_ExitButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 944);
		return struct UButtonTemplate(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UGrandPrixResultWidgetComponent
{
public:
	UGrandPrixResultWidgetComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UTierResultWidget GetWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 176);
		return UTierResultWidget(ptr_addr);
	}
	struct UTierResultWidget GetResultWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 184);
		return struct UTierResultWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class AMajorResultWidgetComponentTestGameMode
{
public:
	AMajorResultWidgetComponentTestGameMode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UMajorSequenceComponent
{
public:
	UMajorSequenceComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<enum class EMajorSequenceType, struct ALevelSequenceTrack> GetSequenceTrackActorContainer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 176);
		return struct TMap<enum class EMajorSequenceType, struct ALevelSequenceTrack>(ptr_addr);
	}
	int32_t GetOrgViewDistanceQuality() {
		return memory.read<int32_t>(m_addr + 256);
	}
	struct ALevelSequenceActor GetPlayingLevelSequenceActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 264);
		return struct ALevelSequenceActor(ptr_addr);
	}
	enum class EMajorSequenceType GetPlayingSequenceType() {
		return memory.read<enum class EMajorSequenceType>(m_addr + 272);
	}

private:
	std::uint64_t m_addr = 0;
};


class AMajorStartSequencePoint
{
public:
	AMajorStartSequencePoint(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPqCommandMatchNow
{
public:
	UPqCommandMatchNow(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPqCommandNextTrack
{
public:
	UPqCommandNextTrack(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPqRegisterMatch
{
public:
	UPqRegisterMatch(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMatchQueueList GetQueue() {
		return memory.read<struct FMatchQueueList>(m_addr + 56);
	}
	bool GetisExclusive() {
		return memory.read<bool>(m_addr + 72);
	}
	struct FString GetgrandPrixId() {
		return memory.read<struct FString>(m_addr + 80);
	}
	int32_t GetaiOption() {
		return memory.read<int32_t>(m_addr + 96);
	}
	struct TArray<int32_t> GettrackGroups() {
		return memory.read<struct TArray<int32_t>>(m_addr + 104);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPcRegisterMatch
{
public:
	UPcRegisterMatch(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetmmTicket() {
		return memory.read<struct FString>(m_addr + 48);
	}
	struct FMatchQueueList GetQueue() {
		return memory.read<struct FMatchQueueList>(m_addr + 64);
	}
	int32_t GetestTimeSec() {
		return memory.read<int32_t>(m_addr + 80);
	}
	int32_t GetaiOption() {
		return memory.read<int32_t>(m_addr + 84);
	}
	struct TArray<int32_t> GettrackGroups() {
		return memory.read<struct TArray<int32_t>>(m_addr + 88);
	}
	struct FString GetgrandPrixId() {
		return memory.read<struct FString>(m_addr + 104);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPcConnectToServer
{
public:
	UPcConnectToServer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetgameId() {
		return memory.read<struct FString>(m_addr + 48);
	}
	struct FString GetAddr() {
		return memory.read<struct FString>(m_addr + 64);
	}
	struct FString GetTrack() {
		return memory.read<struct FString>(m_addr + 80);
	}
	struct UObject GetgameSettings() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 96);
		return struct UObject(ptr_addr);
	}
	struct FString GetopenLevelOption() {
		return memory.read<struct FString>(m_addr + 104);
	}
	struct FString GetpackEncKey() {
		return memory.read<struct FString>(m_addr + 120);
	}
	bool GetbMatchGame() {
		return memory.read<bool>(m_addr + 136);
	}
	struct FString GetgrandPrixId() {
		return memory.read<struct FString>(m_addr + 144);
	}
	struct FString GetvivoxChannelName() {
		return memory.read<struct FString>(m_addr + 160);
	}
	struct FString GetvivoxJoinToken() {
		return memory.read<struct FString>(m_addr + 176);
	}
	struct FString GetvivoxTranscriptionToken() {
		return memory.read<struct FString>(m_addr + 192);
	}
	struct FString GetstatusNotificationId() {
		return memory.read<struct FString>(m_addr + 208);
	}
	struct FString GetuserGameLogUrl() {
		return memory.read<struct FString>(m_addr + 224);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPcDisconnectFromServer
{
public:
	UPcDisconnectFromServer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPqMatchPlayerStatus
{
public:
	UPqMatchPlayerStatus(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetID() {
		return memory.read<struct FString>(m_addr + 56);
	}
	struct FString Getstatus() {
		return memory.read<struct FString>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPcMatchPlayerStatus
{
public:
	UPcMatchPlayerStatus(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetplayerId() {
		return memory.read<struct FString>(m_addr + 48);
	}
	struct FString Getstatus() {
		return memory.read<struct FString>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMatchNotifyCreate
{
public:
	UMatchNotifyCreate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FKtItemPreview> GetPreviews() {
		return memory.read<struct TArray<struct FKtItemPreview>>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMatchNotifyComplete
{
public:
	UMatchNotifyComplete(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPcMatchRematchStatus
{
public:
	UPcMatchRematchStatus(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<struct FString, bool> Getstatus() {
		return memory.read<struct TMap<struct FString, bool>>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqSetQuickMatchData
{
public:
	UPqSetQuickMatchData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKtMatchRequestData GetData() {
		return memory.read<struct FKtMatchRequestData>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UDisableMovement
{
public:
	UDisableMovement(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UMaterialFxComponent
{
public:
	UMaterialFxComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMulticastInlineDelegate GetMaterialFxStopped() {
		return memory.read<struct FMulticastInlineDelegate>(m_addr + 232);
	}
	struct TMap<struct UMeshComponent, struct FMaterialFxArray> GetMaterialMap() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 248);
		return struct TMap<struct UMeshComponent, struct FMaterialFxArray>(ptr_addr);
	}
	struct TArray<struct UMaterialInterface> GetCachedMaterials() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 328);
		return struct TArray<struct UMaterialInterface>(ptr_addr);
	}
	struct TArray<struct FMaterialFxSeqIndex> GetMaterialsForUpdate() {
		return memory.read<struct TArray<struct FMaterialFxSeqIndex>>(m_addr + 344);
	}
	bool GetbUseFastSetMaterial() {
		return memory.read<bool>(m_addr + 360);
	}
	struct UCurveFloat GetWeightCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 408);
		return struct UCurveFloat(ptr_addr);
	}
	struct UCurveFloat GetCycleCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 424);
		return struct UCurveFloat(ptr_addr);
	}
	struct UMaterialFxDataAsset GetDataAsset() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 432);
		return struct UMaterialFxDataAsset(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMediaPlayerTemplate
{
public:
	UMediaPlayerTemplate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetPlaySoundVolume() {
		return memory.read<float>(m_addr + 704);
	}
	struct UMediaPlayer GetMediaPlayer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct UMediaPlayer(ptr_addr);
	}
	struct UMediaTexture GetMediaTexture() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return struct UMediaTexture(ptr_addr);
	}
	struct UMaterialInstanceDynamic GetMediaMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 728);
		return struct UMaterialInstanceDynamic(ptr_addr);
	}
	struct TArray<struct TSoftObjectPtr<UMediaPlaylist>> GetMediaPlaylistPtrs() {
		return memory.read<struct TArray<struct TSoftObjectPtr<UMediaPlaylist>>>(m_addr + 736);
	}
	struct TArray<struct UMediaPlaylist> GetMediaPlaylists() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 752);
		return struct TArray<struct UMediaPlaylist>(ptr_addr);
	}
	struct TSoftObjectPtr<UTexture2D> GetPreviewTexture2D() {
		return memory.read<struct TSoftObjectPtr<UTexture2D>>(m_addr + 768);
	}
	struct TSoftObjectPtr<UPaperSprite> GetPreivewSprite() {
		return memory.read<struct TSoftObjectPtr<UPaperSprite>>(m_addr + 808);
	}
	bool GetbShowLoadingImg() {
		return memory.read<bool>(m_addr + 848);
	}
	bool GetbLoop() {
		return memory.read<bool>(m_addr + 849);
	}
	struct UMediaSoundComponent GetMediaSoundComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 856);
		return struct UMediaSoundComponent(ptr_addr);
	}
	struct TArray<struct UMediaPlaylist> GetOpenedMediaPlaylists() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 864);
		return struct TArray<struct UMediaPlaylist>(ptr_addr);
	}
	struct TArray<struct TSoftObjectPtr<UFMODEvent>> GetMediaBGDataPtrConatiner() {
		return memory.read<struct TArray<struct TSoftObjectPtr<UFMODEvent>>>(m_addr + 936);
	}
	struct TArray<struct UFMODEvent> GetMediaBGDataContainer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 952);
		return struct TArray<struct UFMODEvent>(ptr_addr);
	}
	struct TArray<struct UMediaPlaylist> GetRequestMediaPlaylists() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 968);
		return struct TArray<struct UMediaPlaylist>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class USetItemCubeStatus
{
public:
	USetItemCubeStatus(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UMediaWallTeamProfileWidget
{
public:
	UMediaWallTeamProfileWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTextBlock GetTextTeam() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UTextBlock(ptr_addr);
	}
	struct TMap<enum class ERaceTeamType, struct FText> GetTextLocalizeTeamContainer() {
		return memory.read<struct TMap<enum class ERaceTeamType, struct FText>>(m_addr + 616);
	}

private:
	std::uint64_t m_addr = 0;
};


class URaceSaveGameBase
{
public:
	URaceSaveGameBase(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class URocketReaction
{
public:
	URocketReaction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftObjectPtr<UParticleSystem> GetRocketParticle() {
		return memory.read<struct TSoftObjectPtr<UParticleSystem>>(m_addr + 536);
	}
	struct TSoftObjectPtr<UFMODEvent> GetRocketExplodeSound() {
		return memory.read<struct TSoftObjectPtr<UFMODEvent>>(m_addr + 576);
	}
	struct TSoftClassPtr<UObject> GetDecal_Rocket() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 616);
	}
	struct TSoftObjectPtr<ULevelSequence> GetHitLevelSequence() {
		return memory.read<struct TSoftObjectPtr<ULevelSequence>>(m_addr + 656);
	}
	struct UItemComponent GetVictim() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UItemComponent(ptr_addr);
	}
	struct UKdLevelSequencePlayer GetSequencePlayer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UKdLevelSequencePlayer(ptr_addr);
	}
	struct UParticleSystemComponent GetExplodeParticleComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct UParticleSystemComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMissionDescLogicComponent
{
public:
	UMissionDescLogicComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AModelAttachZone
{
public:
	AModelAttachZone(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	AAttachingModelFactory GetAttachingModelFactoryClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 576);
		return AAttachingModelFactory(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UModeSelectButton
{
public:
	UModeSelectButton(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetModeNameText() {
		return memory.read<struct FText>(m_addr + 1000);
	}
	struct FSlateBrush GetBackgroundBrush() {
		return memory.read<struct FSlateBrush>(m_addr + 1024);
	}
	struct FSlateBrush GetHighlightBackgroundBrush() {
		return memory.read<struct FSlateBrush>(m_addr + 1160);
	}
	struct FSlateBrush GetModeBrush() {
		return memory.read<struct FSlateBrush>(m_addr + 1296);
	}
	struct FSlateBrush GetHighlightModeBrush() {
		return memory.read<struct FSlateBrush>(m_addr + 1432);
	}
	struct FVector2D GetModeImageOffset() {
		return memory.read<struct FVector2D>(m_addr + 1568);
	}
	struct UKdTextBlock GetV_ModeName() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1576);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UKdTextBlock GetV_HighlightModeName() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1584);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UImage GetV_BackgroundImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1592);
		return struct UImage(ptr_addr);
	}
	struct UImage GetV_HighlightBackgroundImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1600);
		return struct UImage(ptr_addr);
	}
	struct UImage GetV_ModeImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1608);
		return struct UImage(ptr_addr);
	}
	struct UImage GetV_HighlightModeImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1616);
		return struct UImage(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UModeSelectLogicComponent
{
public:
	UModeSelectLogicComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UItemGuideDetailObject
{
public:
	UItemGuideDetailObject(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UModeSelectSaveGame
{
public:
	UModeSelectSaveGame(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<uint32_t, struct FModeSelectSaveData> GetSaveDataMap() {
		return memory.read<struct TMap<uint32_t, struct FModeSelectSaveData>>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMovementAssistComponent
{
public:
	UMovementAssistComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetDecalActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 424);
		return struct AActor(ptr_addr);
	}
	struct ATrackGuide GetCachedTrackGuide() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 440);
		return struct ATrackGuide(ptr_addr);
	}
	struct TSoftClassPtr<UObject> GetLandingPointActor() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 472);
	}
	struct TArray<struct USplineMeshComponent> GetSplineMeshComponentList() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 512);
		return struct TArray<struct USplineMeshComponent>(ptr_addr);
	}
	struct TArray<struct UObject> GetPreloadedObjects() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 544);
		return struct TArray<struct UObject>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMovementRecordComponent
{
public:
	UMovementRecordComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct URaceTimeComponent GetRaceTimeComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 184);
		return struct URaceTimeComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMovementReplayComponent
{
public:
	UMovementReplayComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct URaceTimeComponent GetRaceTimeComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 184);
		return struct URaceTimeComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UEnableMovement
{
public:
	UEnableMovement(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UActivateStartBoost
{
public:
	UActivateStartBoost(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPreLoadIntroSequenceRule
{
public:
	UPreLoadIntroSequenceRule(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class USetKartStuck
{
public:
	USetKartStuck(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UShowAssistListWidget
{
public:
	UShowAssistListWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class URemoveAssistListWidget
{
public:
	URemoveAssistListWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UActivateAIKart
{
public:
	UActivateAIKart(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UDeactivateAIKart
{
public:
	UDeactivateAIKart(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UStudioLogicComponent
{
public:
	UStudioLogicComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class EStudioTransformState GetTransformState() {
		return memory.read<enum class EStudioTransformState>(m_addr + 384);
	}
	float GetTransformLength() {
		return memory.read<float>(m_addr + 388);
	}
	struct UTexture GetOrgCubeTexture() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 392);
		return struct UTexture(ptr_addr);
	}
	struct FInputLimitValue GetInputLimit() {
		return memory.read<struct FInputLimitValue>(m_addr + 400);
	}
	enum class EStudioMode GetCurrentStudioMode() {
		return memory.read<enum class EStudioMode>(m_addr + 416);
	}
	struct FRotator GetPawnOriginalRotator() {
		return memory.read<struct FRotator>(m_addr + 420);
	}
	struct FVector GetPawnOriginalLoc() {
		return memory.read<struct FVector>(m_addr + 432);
	}
	struct FVector GetPawnOrginalScale() {
		return memory.read<struct FVector>(m_addr + 444);
	}
	struct TArray<struct TSoftObjectPtr<UStaticMesh>> GetFloorMeshs() {
		return memory.read<struct TArray<struct TSoftObjectPtr<UStaticMesh>>>(m_addr + 456);
	}
	struct TArray<struct TSoftObjectPtr<UTextureCube>> GetBgCubes() {
		return memory.read<struct TArray<struct TSoftObjectPtr<UTextureCube>>>(m_addr + 472);
	}

private:
	std::uint64_t m_addr = 0;
};


class UFinishAnimation
{
public:
	UFinishAnimation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UEnableSimulationMovementPreTick
{
public:
	UEnableSimulationMovementPreTick(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UMovieSceneFMODAudioSection
{
public:
	UMovieSceneFMODAudioSection(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMovieSceneByteChannel GetControlKeys() {
		return memory.read<struct FMovieSceneByteChannel>(m_addr + 232);
	}
	struct UFMODEvent GetSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 384);
		return struct UFMODEvent(ptr_addr);
	}
	struct FFrameNumber GetStartFrameOffset() {
		return memory.read<struct FFrameNumber>(m_addr + 392);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMovieSceneFMODAudioTrack
{
public:
	UMovieSceneFMODAudioTrack(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct UMovieSceneSection> GetAudioSections() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 152);
		return struct TArray<struct UMovieSceneSection>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMovieSceneKartMovementSection
{
public:
	UMovieSceneKartMovementSection(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FMovieSceneFloatChannel GetTranslation[3]() {
		return memory.read<struct FMovieSceneFloatChannel>(m_addr + 240);
	}
	struct FMovieSceneFloatChannel GetRotation[3]() {
		return memory.read<struct FMovieSceneFloatChannel>(m_addr + 720);
	}
	struct FMovieSceneBoolChannel GetAccel() {
		return memory.read<struct FMovieSceneBoolChannel>(m_addr + 1200);
	}
	struct FMovieSceneBoolChannel GetBrake() {
		return memory.read<struct FMovieSceneBoolChannel>(m_addr + 1344);
	}
	struct FMovieSceneBoolChannel GetSteerLeft() {
		return memory.read<struct FMovieSceneBoolChannel>(m_addr + 1488);
	}
	struct FMovieSceneBoolChannel GetSteerRight() {
		return memory.read<struct FMovieSceneBoolChannel>(m_addr + 1632);
	}
	struct FMovieSceneBoolChannel GetDriftKeyPressing() {
		return memory.read<struct FMovieSceneBoolChannel>(m_addr + 1776);
	}
	struct FMovieSceneIntegerChannel GetBoostKind() {
		return memory.read<struct FMovieSceneIntegerChannel>(m_addr + 1920);
	}
	struct FMovieSceneFloatChannel GetBoostLeft() {
		return memory.read<struct FMovieSceneFloatChannel>(m_addr + 2064);
	}
	struct FMovieSceneIntegerChannel GetDriveState() {
		return memory.read<struct FMovieSceneIntegerChannel>(m_addr + 2224);
	}
	struct FMovieSceneBoolChannel GetSlipStream() {
		return memory.read<struct FMovieSceneBoolChannel>(m_addr + 2368);
	}
	struct FMovieSceneBoolChannel Getdraft() {
		return memory.read<struct FMovieSceneBoolChannel>(m_addr + 2512);
	}
	struct FMovieSceneFloatChannel GetSpeed() {
		return memory.read<struct FMovieSceneFloatChannel>(m_addr + 2656);
	}
	struct FMovieSceneFloatChannel GetDriftGauge() {
		return memory.read<struct FMovieSceneFloatChannel>(m_addr + 2816);
	}
	struct FMovieSceneFloatChannel GetDriftProgress() {
		return memory.read<struct FMovieSceneFloatChannel>(m_addr + 2976);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMulticastHelperComponent
{
public:
	UMulticastHelperComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UNoAccountTimeAttackDataHelper
{
public:
	UNoAccountTimeAttackDataHelper(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRaceSaveGameLatestPtr GetRankerSaveGame() {
		return memory.read<struct FRaceSaveGameLatestPtr>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};


class UStartBoostGaugeWidget
{
public:
	UStartBoostGaugeWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UProgressBar GetStartBoostGaugeBar() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UProgressBar(ptr_addr);
	}
	struct USizeBox GetStartBoostGaugeSizeBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct USizeBox(ptr_addr);
	}
	struct USizeBox GetTimingImageSizeBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct USizeBox(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UNormalChallengeLogicComponent
{
public:
	UNormalChallengeLogicComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UNxPatcherInterface
{
public:
	UNxPatcherInterface(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UOptionBarWidget
{
public:
	UOptionBarWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UKdButtonImage GetV_BtnImage_Bar() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1000);
		return struct UKdButtonImage(ptr_addr);
	}
	struct UPanelWidget GetV_Base_Container() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1008);
		return struct UPanelWidget(ptr_addr);
	}
	struct UPanelWidget GetV_Btn_Container() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1016);
		return struct UPanelWidget(ptr_addr);
	}
	struct TArray<struct UButtonTemplate> GetContainerChildren() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1120);
		return struct TArray<struct UButtonTemplate>(ptr_addr);
	}
	int32_t GetMaxIndex() {
		return memory.read<int32_t>(m_addr + 1136);
	}
	int32_t GetCurrentIndex() {
		return memory.read<int32_t>(m_addr + 1140);
	}
	int32_t GetConfirmIndex() {
		return memory.read<int32_t>(m_addr + 1144);
	}
	int32_t GetHoveredIndex() {
		return memory.read<int32_t>(m_addr + 1148);
	}
	bool GetbOptionEnable() {
		return memory.read<bool>(m_addr + 1152);
	}
	struct UUserWidget GetOptionSlider() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1160);
		return struct UUserWidget(ptr_addr);
	}
	struct USlider GetSlider_Item() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1168);
		return struct USlider(ptr_addr);
	}
	struct UKdButtonImage GetSliderGauge() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1176);
		return struct UKdButtonImage(ptr_addr);
	}
	struct UAnimationPresetWidget GetFocusAnimSetSlider() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1184);
		return struct UAnimationPresetWidget(ptr_addr);
	}
	float GetMinValue() {
		return memory.read<float>(m_addr + 1192);
	}
	float GetMaxValue() {
		return memory.read<float>(m_addr + 1196);
	}
	float GetValueStep() {
		return memory.read<float>(m_addr + 1200);
	}
	float GetStartValue() {
		return memory.read<float>(m_addr + 1204);
	}
	float GetEndValue() {
		return memory.read<float>(m_addr + 1208);
	}
	bool GetbEnableNavigation() {
		return memory.read<bool>(m_addr + 1212);
	}

private:
	std::uint64_t m_addr = 0;
};


class UMuteableVolume
{
public:
	UMuteableVolume(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct UMuteableVolume> GetChildren() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 112);
		return struct TArray<struct UMuteableVolume>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class AOutGameMode
{
public:
	AOutGameMode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UOutGamePhaseComponent
{
public:
	UOutGamePhaseComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class URaceRestart
{
public:
	URaceRestart(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UOutGamePawnLoadCheckRule
{
public:
	UOutGamePawnLoadCheckRule(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UEmblemEntryObject
{
public:
	UEmblemEntryObject(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKtClientItemDef GetEmblemItemDef() {
		return memory.read<struct FKtClientItemDef>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};


class UScenarioSequenceDirector
{
public:
	UScenarioSequenceDirector(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UScenarioLogicComponent GetScenarioLogicComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct UScenarioLogicComponent(ptr_addr);
	}
	struct UScenarioPageWidget GetScenarioPageWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 64);
		return struct UScenarioPageWidget(ptr_addr);
	}
	struct TArray<struct UScenarioWidgetBase> GetScenarioExpressionWidgetContainer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return struct TArray<struct UScenarioWidgetBase>(ptr_addr);
	}
	struct TArray<struct AActor> GetCachePawnContainer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 88);
		return struct TArray<struct AActor>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UOutGameScenarioSequenceDirector
{
public:
	UOutGameScenarioSequenceDirector(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPqClientTMI
{
public:
	UPqClientTMI(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetType() {
		return memory.read<struct FString>(m_addr + 56);
	}
	struct FString Getprotohash() {
		return memory.read<struct FString>(m_addr + 72);
	}
	struct FString GetData() {
		return memory.read<struct FString>(m_addr + 88);
	}

private:
	std::uint64_t m_addr = 0;
};


class AOutGameState
{
public:
	AOutGameState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPacketCaptureComponent
{
public:
	UPacketCaptureComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetStartPathIndex() {
		return memory.read<int32_t>(m_addr + 176);
	}
	int32_t GetStartDataIndex() {
		return memory.read<int32_t>(m_addr + 180);
	}
	struct UPacketSaveGame GetPacketSaveGame() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 192);
		return struct UPacketSaveGame(ptr_addr);
	}
	struct UPacketSaveGame GetSimPacketSaveGame() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 296);
		return struct UPacketSaveGame(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPageButtonTemplate
{
public:
	UPageButtonTemplate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	UButtonTemplate GetPageButtonWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return UButtonTemplate(ptr_addr);
	}
	enum class ESlateSizeRule GetSlateSizeRule() {
		return memory.read<enum class ESlateSizeRule>(m_addr + 616);
	}
	bool GetbUseNumberPanel() {
		return memory.read<bool>(m_addr + 617);
	}
	struct UWidgetSwitcher GetPanelSwitcher() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UPanelWidget GetButtonPanel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UPanelWidget(ptr_addr);
	}
	struct UKdTextBlock GetTextCurrentPageNum() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UKdTextBlock GetTextMaxPageNum() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UKdTextBlock(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPageTitleWidget
{
public:
	UPageTitleWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UKdTextBlock GetV_TitleText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UKdTextBlock(ptr_addr);
	}
	struct FText GetInst_PageTitleText() {
		return memory.read<struct FText>(m_addr + 616);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPartsMeshComponent
{
public:
	UPartsMeshComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPatcherEvent
{
public:
	UPatcherEvent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPatcherInterface GetPatcherInterface() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 104);
		return struct UPatcherInterface(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPatcherEvent_SimpleDialog
{
public:
	UPatcherEvent_SimpleDialog(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPauseDataAsset
{
public:
	UPauseDataAsset(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct UFMODBus> GetPauseBusList() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct TArray<struct UFMODBus>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UOutGamePawnDB
{
public:
	UOutGamePawnDB(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<enum class EOutGamePawnType, struct FName> GetOutGamePawnData() {
		return memory.read<struct TMap<enum class EOutGamePawnType, struct FName>>(m_addr + 48);
	}
	float GetResetRotateInterval() {
		return memory.read<float>(m_addr + 128);
	}
	float GetRotateSpeedMouse() {
		return memory.read<float>(m_addr + 132);
	}
	float GetRotateSpeedGamepad() {
		return memory.read<float>(m_addr + 136);
	}
	float GetRestoreRotateSpeed() {
		return memory.read<float>(m_addr + 140);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPawnSequenceComponent
{
public:
	UPawnSequenceComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct ALevelSequenceActor GetSequenceActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 176);
		return struct ALevelSequenceActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPawnStateMulticastHelperComponent
{
public:
	UPawnStateMulticastHelperComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPersonalResultComponent
{
public:
	UPersonalResultComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UWaitHelper GetWaitHelper() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 272);
		return struct UWaitHelper(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPhaseDelegate
{
public:
	UPhaseDelegate(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPhysicsAnimInterface
{
public:
	UPhysicsAnimInterface(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPlatformIconWidget
{
public:
	UPlatformIconWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UKdImage GetV_PlatformImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UKdImage(ptr_addr);
	}
	enum class EKtAccountPlatform Getplatform() {
		return memory.read<enum class EKtAccountPlatform>(m_addr + 616);
	}
	struct FLinearColor GetTintColor() {
		return memory.read<struct FLinearColor>(m_addr + 620);
	}
	struct FVector2D GetImageScale() {
		return memory.read<struct FVector2D>(m_addr + 636);
	}
	bool GetbHighlightImage() {
		return memory.read<bool>(m_addr + 644);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPlatformSessionUpdater
{
public:
	UPlatformSessionUpdater(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UKdService GetKOInst() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 104);
		return struct UKdService(ptr_addr);
	}
	struct UKdAccount GetAccount() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 112);
		return struct UKdAccount(ptr_addr);
	}
	struct FPendingSessionInvitation GetPendingSessionInvitation() {
		return memory.read<struct FPendingSessionInvitation>(m_addr + 120);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqShopWalletPageUrlNxA
{
public:
	UPqShopWalletPageUrlNxA(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPlatformSubsystem
{
public:
	UPlatformSubsystem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UScenarioParseInstance
{
public:
	UScenarioParseInstance(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPlayerWaitComponent
{
public:
	UPlayerWaitComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPlayerWaitListener
{
public:
	UPlayerWaitListener(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPlayMissionWidget
{
public:
	UPlayMissionWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UImage GetV_Image_ItemIcon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UImage(ptr_addr);
	}
	struct UTextBlock GetV_Text_ItemCount() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock GetV_Text_MissionDec() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock GetV_Text_CountAcheive() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UTextBlock(ptr_addr);
	}
	struct UTextBlock GetV_Text_CountTotal() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UTextBlock(ptr_addr);
	}
	struct UWidgetAnimation GetAnim_Show() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation GetAnim_Hide() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UWidgetAnimation(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPodiumRiderNameTagComponent
{
public:
	UPodiumRiderNameTagComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPodiumRiderNameTagWidget
{
public:
	UPodiumRiderNameTagWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTextBlock GetTextRank() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UTextBlock(ptr_addr);
	}
	struct UKdTextBlock GetTextPlayerID_KD() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UKdTextBlock(ptr_addr);
	}
	bool GetbIsRank() {
		return memory.read<bool>(m_addr + 624);
	}
	int32_t GetRankIndex() {
		return memory.read<int32_t>(m_addr + 628);
	}

private:
	std::uint64_t m_addr = 0;
};


class UWeeklyQuestListEntryObject
{
public:
	UWeeklyQuestListEntryObject(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetWeekIdx() {
		return memory.read<int32_t>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPremiumChallengeLogicComponent
{
public:
	UPremiumChallengeLogicComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPresetEntryObject
{
public:
	UPresetEntryObject(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKtItemPreset GetitemPreset() {
		return memory.read<struct FKtItemPreset>(m_addr + 40);
	}
	struct TWeakObjectPtr<UMaterialInstance> GetMaterial() {
		return memory.read<struct TWeakObjectPtr<UMaterialInstance>>(m_addr + 200);
	}

private:
	std::uint64_t m_addr = 0;
};


class UDrDediQueryAccountStatus
{
public:
	UDrDediQueryAccountStatus(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FString> GetplayerIds() {
		return memory.read<struct TArray<struct FString>>(m_addr + 72);
	}
	struct TArray<struct FString> Getstatus() {
		return memory.read<struct TArray<struct FString>>(m_addr + 88);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPriceWithIconWidget
{
public:
	UPriceWithIconWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UKdImage GetImage_Icon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UKdImage(ptr_addr);
	}
	struct UKdTextBlock GetTextBlock_Price() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UKdTextBlock(ptr_addr);
	}
	enum class EPRICE_TYPE GetPriceType() {
		return memory.read<enum class EPRICE_TYPE>(m_addr + 624);
	}
	struct FVector2D GetImageSize() {
		return memory.read<struct FVector2D>(m_addr + 628);
	}
	struct FSlateFontInfo GetFont() {
		return memory.read<struct FSlateFontInfo>(m_addr + 640);
	}
	enum class EHorizontalAlignment GetTextHorizontalAlignment() {
		return memory.read<enum class EHorizontalAlignment>(m_addr + 728);
	}
	struct TMap<enum class EPRICE_TYPE, struct FPriceInfo> GetPriceInfo() {
		return memory.read<struct TMap<enum class EPRICE_TYPE, struct FPriceInfo>>(m_addr + 736);
	}

private:
	std::uint64_t m_addr = 0;
};


class UShadowQuestPlayPodiumSequence
{
public:
	UShadowQuestPlayPodiumSequence(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UProfileEditLogicComponent
{
public:
	UProfileEditLogicComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AScenarioTriggerByTouchInput
{
public:
	AScenarioTriggerByTouchInput(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FScenarioTriggerTarget GetDisableTouchTriggerContainer() {
		return memory.read<struct FScenarioTriggerTarget>(m_addr + 624);
	}
	int32_t GetDisableWidget() {
		return memory.read<int32_t>(m_addr + 656);
	}
	struct UTouchInputHUD GetTouchInputHUD() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UTouchInputHUD(ptr_addr);
	}
	struct UScenarioLogicComponent GetScenarioLogicComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UScenarioLogicComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTagTitleListEntry
{
public:
	UTagTitleListEntry(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetListIndex() {
		return memory.read<int32_t>(m_addr + 40);
	}
	struct FTagData GetData() {
		return memory.read<struct FTagData>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPSOCollectWidget
{
public:
	UPSOCollectWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftObjectPtr<UDataTable> GetSequenceLevelDataTable() {
		return memory.read<struct TSoftObjectPtr<UDataTable>>(m_addr + 616);
	}
	struct UControlPawnEquipWidget GetControlPawnEquipWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UControlPawnEquipWidget(ptr_addr);
	}
	struct UControlPawnFXWidget GetControlPawnFXWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UControlPawnFXWidget(ptr_addr);
	}
	struct UControlDirectingWidget GetControlDirectingWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UControlDirectingWidget(ptr_addr);
	}
	struct UControlTrackWidget GetControlTrackWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return struct UControlTrackWidget(ptr_addr);
	}
	struct UButton GetButton_Travel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UButton(ptr_addr);
	}
	struct UButton GetButton_StartCollect() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UButton(ptr_addr);
	}
	struct UButton GetButton_StartSequence_Tutorial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UButton(ptr_addr);
	}
	struct UButton GetButton_StartSequence_License() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct UButton(ptr_addr);
	}
	struct UButton GetButton_StartOneStep() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return struct UButton(ptr_addr);
	}
	struct UButton GetButton_GotoLoginStage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 728);
		return struct UButton(ptr_addr);
	}
	struct UTextBlock GetV_FocusedButtonText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 736);
		return struct UTextBlock(ptr_addr);
	}
	struct TArray<struct TSoftObjectPtr<ULevelSequence>> GetSequenceList() {
		return memory.read<struct TArray<struct TSoftObjectPtr<ULevelSequence>>>(m_addr + 744);
	}
	struct USpringArmComponent GetSpringArm() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 784);
		return struct USpringArmComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UKdServerList
{
public:
	UKdServerList(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UGameInstance GetGameInstance() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct UGameInstance(ptr_addr);
	}
	struct UKdServerConfig GetServerConfig() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 176);
		return struct UKdServerConfig(ptr_addr);
	}
	struct TArray<struct FKdServerAddrConfig> GetServerAddrs() {
		return memory.read<struct TArray<struct FKdServerAddrConfig>>(m_addr + 184);
	}
	struct TArray<struct FString> GetRules() {
		return memory.read<struct TArray<struct FString>>(m_addr + 200);
	}

private:
	std::uint64_t m_addr = 0;
};


class UQuickMatchSubsystem
{
public:
	UQuickMatchSubsystem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AScenarioSpeedControl
{
public:
	AScenarioSpeedControl(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetSpeed() {
		return memory.read<float>(m_addr + 624);
	}

private:
	std::uint64_t m_addr = 0;
};


class UParseRaceOptions
{
public:
	UParseRaceOptions(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UCheckOverlapItemCube
{
public:
	UCheckOverlapItemCube(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UInitAIManager
{
public:
	UInitAIManager(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAIDisableSpeedFactor
{
public:
	UAIDisableSpeedFactor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAIEnableItemScenario
{
public:
	UAIEnableItemScenario(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAIEnableDriftRule
{
public:
	UAIEnableDriftRule(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UShowHUD
{
public:
	UShowHUD(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UStopBGM
{
public:
	UStopBGM(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UTransition_StandByGame
{
public:
	UTransition_StandByGame(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULqGetStickerStockList
{
public:
	ULqGetStickerStockList(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetsortCategory() {
		return memory.read<struct FString>(m_addr + 56);
	}
	struct FString GetFilter() {
		return memory.read<struct FString>(m_addr + 72);
	}
	int32_t GetCount() {
		return memory.read<int32_t>(m_addr + 88);
	}
	struct FString GetCursor() {
		return memory.read<struct FString>(m_addr + 96);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTransition_IntroSequence
{
public:
	UTransition_IntroSequence(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UTransition_LoadedStreamingLevel
{
public:
	UTransition_LoadedStreamingLevel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UClientVerifier GetCachedClientVerifier() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return struct UClientVerifier(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UBeginGameRule
{
public:
	UBeginGameRule(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UInitPawnName
{
public:
	UInitPawnName(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAsyncLoadItemCharacterMontage
{
public:
	UAsyncLoadItemCharacterMontage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UCreateHUDWidget
{
public:
	UCreateHUDWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftClassPtr<UObject> GetHudWidgetClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 72);
	}
	struct TSoftClassPtr<UObject> GetMobileInputWidgetClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 112);
	}

private:
	std::uint64_t m_addr = 0;
};


class UShowVoiceChatMicOnOffButtonWidget
{
public:
	UShowVoiceChatMicOnOffButtonWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UAddSideMirrorWidget
{
public:
	UAddSideMirrorWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftClassPtr<UObject> GetSideMirrorWidgetClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTimeAttackRecorderEnd
{
public:
	UTimeAttackRecorderEnd(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UInactivateVivox
{
public:
	UInactivateVivox(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UTransition_StartCountDown
{
public:
	UTransition_StartCountDown(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ASpeedTeamGameState
{
public:
	ASpeedTeamGameState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UBeginCalcRank
{
public:
	UBeginCalcRank(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UDisableSounds
{
public:
	UDisableSounds(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UUnloadUnusedLevel
{
public:
	UUnloadUnusedLevel(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UCreateWrongWayWidget
{
public:
	UCreateWrongWayWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftClassPtr<UObject> GetWrongWayWidgetClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UDeactiveCheckWrongWay
{
public:
	UDeactiveCheckWrongWay(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrShopItemProductList
{
public:
	UPrShopItemProductList(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FKtShopStock> GetProducts() {
		return memory.read<struct TArray<struct FKtShopStock>>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class URegisterFinishRules
{
public:
	URegisterFinishRules(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class URegisterRetireRules
{
public:
	URegisterRetireRules(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UScenarioKeyLayoutWidget
{
public:
	UScenarioKeyLayoutWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UKdTextBlock GetV_KeyDescriptText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UKdTextBlock(ptr_addr);
	}
	struct FScenarioKeyLayoutAnimData GetAnimData() {
		return memory.read<struct FScenarioKeyLayoutAnimData>(m_addr + 616);
	}
	struct TArray<struct UScenarioKeyLayoutKeyWidget> GetKeyWidgetContainer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct TArray<struct UScenarioKeyLayoutKeyWidget>(ptr_addr);
	}
	struct UScenarioLogicComponent GetScenarioLogicComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UScenarioLogicComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTransition_RetireCountdown
{
public:
	UTransition_RetireCountdown(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UTransition_Always
{
public:
	UTransition_Always(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class USendRaceResult
{
public:
	USendRaceResult(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UNotifyEndRetireCountdown
{
public:
	UNotifyEndRetireCountdown(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UNotifyFinish
{
public:
	UNotifyFinish(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPqShopChargeUrlKrPc
{
public:
	UPqShopChargeUrlKrPc(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UHideMainHud
{
public:
	UHideMainHud(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UBlockUseItem
{
public:
	UBlockUseItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPlayFinishBGM
{
public:
	UPlayFinishBGM(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPlayFinishSequence
{
public:
	UPlayFinishSequence(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPlayTeamPodiumSequence
{
public:
	UPlayTeamPodiumSequence(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPlayPodiumBGM
{
public:
	UPlayPodiumBGM(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UShowIdWidget
{
public:
	UShowIdWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UHideIdWidget
{
public:
	UHideIdWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UCreateResultWidget
{
public:
	UCreateResultWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftClassPtr<UObject> GetResultWidgetClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 72);
	}
	struct TSoftClassPtr<UObject> GetPlayerWidgetClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 112);
	}
	struct TSoftClassPtr<UObject> GetCornerWidgetClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 152);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAddGrandPrixResult
{
public:
	UAddGrandPrixResult(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftClassPtr<UObject> GetResultWidgetClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTransition_RaceResult
{
public:
	UTransition_RaceResult(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UDqDediLog
{
public:
	UDqDediLog(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetLog() {
		return memory.read<struct FString>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UEndGameRule
{
public:
	UEndGameRule(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UStartPollingRaceGameResult
{
public:
	UStartPollingRaceGameResult(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UCreateLapCompletedWidget
{
public:
	UCreateLapCompletedWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftClassPtr<UObject> GetLapCompletedWidgetClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULqGetStockTagId
{
public:
	ULqGetStockTagId(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FString> GettagText() {
		return memory.read<struct TArray<struct FString>>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAddFinishToPersonalResult
{
public:
	UAddFinishToPersonalResult(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftClassPtr<UObject> GetResultWidgetClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 72);
	}
	struct TSoftClassPtr<UObject> GetPlayerWidgetClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 112);
	}
	struct TSoftClassPtr<UObject> GetVoiceChatWidgetClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 152);
	}

private:
	std::uint64_t m_addr = 0;
};


class USetStraightWinCountRule
{
public:
	USetStraightWinCountRule(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UResetLevelActorRule
{
public:
	UResetLevelActorRule(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class URaceProfilerComponent
{
public:
	URaceProfilerComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UPacketSaveGame GetRecordGame() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 184);
		return struct UPacketSaveGame(ptr_addr);
	}
	struct TArray<struct FSkillScoreData> GetSkillScoreArray() {
		return memory.read<struct TArray<struct FSkillScoreData>>(m_addr + 192);
	}
	struct TMap<enum class EBoostKind, float> GetBoostAccumTime() {
		return memory.read<struct TMap<enum class EBoostKind, float>>(m_addr + 240);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqShopPurchaseConfirmSteam
{
public:
	UPqShopPurchaseConfirmSteam(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetorderId() {
		return memory.read<struct FString>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class URaceRankMulticastHelperComponent
{
public:
	URaceRankMulticastHelperComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class URaceResultPollerComponent
{
public:
	URaceResultPollerComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UShadowComponent
{
public:
	UShadowComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UDelegateBarrier GetChangeMaterialWaitBarrier() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 176);
		return struct UDelegateBarrier(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class URaceRetireCounterWidget
{
public:
	URaceRetireCounterWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UKdTextBlock GetV_RetireCountText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UWidgetAnimation GetRetireCountAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UWidgetAnimation(ptr_addr);
	}
	int32_t GetCountDownBegin() {
		return memory.read<int32_t>(m_addr + 624);
	}
	struct TArray<struct FText> GetRetireCountTexts() {
		return memory.read<struct TArray<struct FText>>(m_addr + 632);
	}
	struct UFMODEvent GetCountDownSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UFMODEvent(ptr_addr);
	}
	struct UFMODEvent GetCountDownBGM() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UFMODEvent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class URaceSaveGame2
{
public:
	URaceSaveGame2(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetLevelName() {
		return memory.read<struct FString>(m_addr + 40);
	}
	struct FString GetModeName() {
		return memory.read<struct FString>(m_addr + 56);
	}
	struct FDateTime GetDateTime() {
		return memory.read<struct FDateTime>(m_addr + 72);
	}
	struct FPawnRecordData GetPawnData() {
		return memory.read<struct FPawnRecordData>(m_addr + 80);
	}

private:
	std::uint64_t m_addr = 0;
};


class URaceSaveGame4
{
public:
	URaceSaveGame4(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class URaceSaveGame5
{
public:
	URaceSaveGame5(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UTableManager
{
public:
	UTableManager(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<enum class ETableType, struct UDataTable> GetDataTableMap() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct TMap<enum class ETableType, struct UDataTable>(ptr_addr);
	}
	struct TMap<enum class ETableType, bool> GetDataTableKtStyleFlagMap() {
		return memory.read<struct TMap<enum class ETableType, bool>>(m_addr + 128);
	}
	struct TMap<enum class EUiTableType, struct UDataTable> GetUiDataTableMap() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 208);
		return struct TMap<enum class EUiTableType, struct UDataTable>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class URaceTimeMulticastHelperComponent
{
public:
	URaceTimeMulticastHelperComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UShadowQuestSetupComponent
{
public:
	UShadowQuestSetupComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UShadowPlaySetupComponent GetShadowPlayComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 176);
		return struct UShadowPlaySetupComponent(ptr_addr);
	}
	struct UShadowQuestConfigStorage GetConfigStorage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 184);
		return struct UShadowQuestConfigStorage(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class URacingPassRewardObject
{
public:
	URacingPassRewardObject(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPurchaseLevelObject
{
public:
	UPurchaseLevelObject(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ARailBox
{
public:
	ARailBox(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct USplineComponent GetSplineComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 552);
		return struct USplineComponent(ptr_addr);
	}
	struct TArray<struct UStaticMeshComponent> GetStaticMeshComponentArray() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 560);
		return struct TArray<struct UStaticMeshComponent>(ptr_addr);
	}
	bool GetBeginNode() {
		return memory.read<bool>(m_addr + 576);
	}
	bool GetGenerateSpline() {
		return memory.read<bool>(m_addr + 577);
	}
	float GetMinVelocity() {
		return memory.read<float>(m_addr + 580);
	}
	float GetMaxVelocity() {
		return memory.read<float>(m_addr + 584);
	}
	float GetAccelFactor() {
		return memory.read<float>(m_addr + 588);
	}
	float GetResistFactor() {
		return memory.read<float>(m_addr + 592);
	}
	float GetGravityFactor() {
		return memory.read<float>(m_addr + 596);
	}
	float GetTargetFov() {
		return memory.read<float>(m_addr + 600);
	}
	float GetTargetFallbackDistance() {
		return memory.read<float>(m_addr + 604);
	}

private:
	std::uint64_t m_addr = 0;
};


class UReactionInterface
{
public:
	UReactionInterface(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UReplayCameraComponent
{
public:
	UReplayCameraComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APawn GetCameraTarget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 2200);
		return struct APawn(ptr_addr);
	}
	struct FCameraCalculators GetCameraCalculators() {
		return memory.read<struct FCameraCalculators>(m_addr + 2216);
	}

private:
	std::uint64_t m_addr = 0;
};


class UReplayControlPageWidget
{
public:
	UReplayControlPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UReplayObject
{
public:
	UReplayObject(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UReplayDetailLogicComponent
{
public:
	UReplayDetailLogicComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct UReplayObject> GetReplayList() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 232);
		return struct TArray<struct UReplayObject>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UReplayRuleRegister
{
public:
	UReplayRuleRegister(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AWarpZone
{
public:
	AWarpZone(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetIntermissionTime() {
		return memory.read<float>(m_addr + 576);
	}
	struct AActor GetDestinationActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 584);
		return struct AActor(ptr_addr);
	}
	struct ULevelSequence GetSequence() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 592);
		return struct ULevelSequence(ptr_addr);
	}
	bool GetbFaceForwardAfterWarp() {
		return memory.read<bool>(m_addr + 600);
	}

private:
	std::uint64_t m_addr = 0;
};


class UStartRecordUnrealReplay
{
public:
	UStartRecordUnrealReplay(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UStopRecordUnrealReplay
{
public:
	UStopRecordUnrealReplay(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UEndReplayAndBackToMenu
{
public:
	UEndReplayAndBackToMenu(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UInitReplayPlayerController
{
public:
	UInitReplayPlayerController(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UCreateReplayControlPageWidget
{
public:
	UCreateReplayControlPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftClassPtr<UObject> GetReplayControlPageWidgetClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPlayReplayBGM
{
public:
	UPlayReplayBGM(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UResetComponent
{
public:
	UResetComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UFMODEvent GetResetSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 272);
		return struct UFMODEvent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqShopItemProductList
{
public:
	UPqShopItemProductList(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class URiderNameTagComponent
{
public:
	URiderNameTagComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbDirtyCheck() {
		return memory.read<bool>(m_addr + 1488);
	}
	struct URiderNameTagWidget GetTagWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 1520);
		return struct URiderNameTagWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class URuleDelegateInterface
{
public:
	URuleDelegateInterface(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPhase
{
public:
	UPhase(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FName GetPhaseName() {
		return memory.read<struct FName>(m_addr + 40);
	}
	struct TArray<struct URuleObject> GetRuleList() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct TArray<struct URuleObject>(ptr_addr);
	}
	struct TArray<struct URuleObject> GetUpdateRuleList() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 64);
		return struct TArray<struct URuleObject>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UScenarioComponent
{
public:
	UScenarioComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<struct FString, struct APlayerStart> GetPlayerStartContainer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 200);
		return struct TMap<struct FString, struct APlayerStart>(ptr_addr);
	}
	struct TMap<struct FString, struct FScenarioGroup> GetScenarioActionContainer() {
		return memory.read<struct TMap<struct FString, struct FScenarioGroup>>(m_addr + 280);
	}
	struct FActiveScenario GetRegisterActiveGroup() {
		return memory.read<struct FActiveScenario>(m_addr + 360);
	}
	struct TArray<struct AActor> GetScenarioSequenceActorList() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 520);
		return struct TArray<struct AActor>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UScenarioConditionWidget
{
public:
	UScenarioConditionWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftClassPtr<UObject> GetConditionItemWidgetClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 624);
	}
	struct UVerticalBox GetV_VerticalBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UVerticalBox(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UScenarioConnectRuleComponent
{
public:
	UScenarioConnectRuleComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct APlayerStart> GetStartSpotContainer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 200);
		return struct TArray<struct APlayerStart>(ptr_addr);
	}
	struct APawn GetPlayerPawn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 216);
		return struct APawn(ptr_addr);
	}
	struct FString GetPlayerStartName() {
		return memory.read<struct FString>(m_addr + 224);
	}
	struct FString GetPlayerUniqueID() {
		return memory.read<struct FString>(m_addr + 240);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTrackDifficultWidget
{
public:
	UTrackDifficultWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTrackDifficultUnitWidget GetDifficultUnit_1() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UTrackDifficultUnitWidget(ptr_addr);
	}
	struct UTrackDifficultUnitWidget GetDifficultUnit_2() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UTrackDifficultUnitWidget(ptr_addr);
	}
	struct UTrackDifficultUnitWidget GetDifficultUnit_3() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UTrackDifficultUnitWidget(ptr_addr);
	}
	struct UTrackDifficultUnitWidget GetDifficultUnit_4() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UTrackDifficultUnitWidget(ptr_addr);
	}
	struct UTrackDifficultUnitWidget GetDifficultUnit_5() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UTrackDifficultUnitWidget(ptr_addr);
	}
	enum class ERaceMode GetModeType() {
		return memory.read<enum class ERaceMode>(m_addr + 648);
	}
	int32_t GetLevelGrade() {
		return memory.read<int32_t>(m_addr + 652);
	}

private:
	std::uint64_t m_addr = 0;
};


class AScenarioBase
{
public:
	AScenarioBase(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FScenarioIdentifier GetIdentifier() {
		return memory.read<struct FScenarioIdentifier>(m_addr + 560);
	}
	enum class EScenarioActorType GetType() {
		return memory.read<enum class EScenarioActorType>(m_addr + 608);
	}
	bool GetbDefaultActivate() {
		return memory.read<bool>(m_addr + 612);
	}
	int8_t GetInitializeOrder() {
		return memory.read<int8_t>(m_addr + 613);
	}
	enum class EScenarioActorState GetScenarioActorState() {
		return memory.read<enum class EScenarioActorState>(m_addr + 614);
	}
	struct APlayerController GetController() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct APlayerController(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class AScenarioWidget
{
public:
	AScenarioWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class EWidgetOrder GetOrderType() {
		return memory.read<enum class EWidgetOrder>(m_addr + 624);
	}
	struct TSoftClassPtr<UObject> GetWidgetClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 632);
	}
	struct UUserWidget GetWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return struct UUserWidget(ptr_addr);
	}
	int32_t GetSwitchIndex() {
		return memory.read<int32_t>(m_addr + 680);
	}
	bool GetbNaturallyLoopToOut() {
		return memory.read<bool>(m_addr + 684);
	}

private:
	std::uint64_t m_addr = 0;
};


class AScenarioSceneBase
{
public:
	AScenarioSceneBase(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AScenarioStaticMesh
{
public:
	AScenarioStaticMesh(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftObjectPtr<UStaticMesh> GetMesh() {
		return memory.read<struct TSoftObjectPtr<UStaticMesh>>(m_addr + 672);
	}
	struct UStaticMeshComponent GetMeshComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct UStaticMeshComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class AScenarioTeleport
{
public:
	AScenarioTeleport(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbNewDriveInfo() {
		return memory.read<bool>(m_addr + 624);
	}
	struct FVector GetKartWLVel() {
		return memory.read<struct FVector>(m_addr + 628);
	}
	struct FVector GetKartWAVel() {
		return memory.read<struct FVector>(m_addr + 640);
	}
	struct FVector GetNetWForce() {
		return memory.read<struct FVector>(m_addr + 652);
	}
	struct FVector GetNetWTorque() {
		return memory.read<struct FVector>(m_addr + 664);
	}
	float GetSpeed() {
		return memory.read<float>(m_addr + 676);
	}

private:
	std::uint64_t m_addr = 0;
};


class ATrackGimmick_Road
{
public:
	ATrackGimmick_Road(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UCurveFloat GetTimeCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 568);
		return struct UCurveFloat(ptr_addr);
	}
	float GetTimeCurveOffset() {
		return memory.read<float>(m_addr + 576);
	}
	enum class EPatrolRotationType GetRotationType() {
		return memory.read<enum class EPatrolRotationType>(m_addr + 580);
	}
	struct UCurveVector GetRotationCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 584);
		return struct UCurveVector(ptr_addr);
	}
	bool GetbCanFlat() {
		return memory.read<bool>(m_addr + 592);
	}
	struct UFMODEvent GetBeginForwardMovementSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 600);
		return struct UFMODEvent(ptr_addr);
	}
	struct UFMODEvent GetEndForwardMovementSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UFMODEvent(ptr_addr);
	}
	struct UFMODEvent GetBeginBackwardMovementSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UFMODEvent(ptr_addr);
	}
	struct UFMODEvent GetEndBackwardMovementSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UFMODEvent(ptr_addr);
	}
	struct USplineComponent GetSplineComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 792);
		return struct USplineComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class AScenarioVisibilityWidget
{
public:
	AScenarioVisibilityWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetVisibleWidget() {
		return memory.read<int32_t>(m_addr + 624);
	}
	struct URaceHudWidget GetWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct URaceHudWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UScenarioInitializeRule
{
public:
	UScenarioInitializeRule(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AScenarioVisibilityMobileWidget
{
public:
	AScenarioVisibilityMobileWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetVisibleWidget() {
		return memory.read<int32_t>(m_addr + 624);
	}
	int32_t GetHitTestInvisibleWidget() {
		return memory.read<int32_t>(m_addr + 628);
	}
	struct UTouchInputHUD GetTouchInputHUD() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UTouchInputHUD(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class AScenarioVisibilityEtcWidget
{
public:
	AScenarioVisibilityEtcWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbKeyAccumVisible() {
		return memory.read<bool>(m_addr + 624);
	}

private:
	std::uint64_t m_addr = 0;
};


class AScenarioStartBoostActive
{
public:
	AScenarioStartBoostActive(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AScenarioForceUseDriftBoost
{
public:
	AScenarioForceUseDriftBoost(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AScenarioBeginnerCare
{
public:
	AScenarioBeginnerCare(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetBeginnerCareFlags() {
		return memory.read<int32_t>(m_addr + 624);
	}

private:
	std::uint64_t m_addr = 0;
};


class UScenarioPlatformEventsComponent
{
public:
	UScenarioPlatformEventsComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AScenarioBGM
{
public:
	AScenarioBGM(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftObjectPtr<UFMODEvent> GetPlayingBGM() {
		return memory.read<struct TSoftObjectPtr<UFMODEvent>>(m_addr + 624);
	}

private:
	std::uint64_t m_addr = 0;
};


class AScenarioTouchButtonAnimationQuery
{
public:
	AScenarioTouchButtonAnimationQuery(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetButtonSlotName() {
		return memory.read<struct FString>(m_addr + 624);
	}
	struct FString GetAnimName() {
		return memory.read<struct FString>(m_addr + 640);
	}
	int32_t GetNumLoopsToPlay() {
		return memory.read<int32_t>(m_addr + 656);
	}
	struct UTouchInputHUD GetTouchInputHUD() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UTouchInputHUD(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class AScenarioStaticTimeWriter
{
public:
	AScenarioStaticTimeWriter(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetSlot() {
		return memory.read<int32_t>(m_addr + 624);
	}

private:
	std::uint64_t m_addr = 0;
};


class AScenarioSwitchByKartSpeed
{
public:
	AScenarioSwitchByKartSpeed(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class EScenarioConditionalType GetCondition() {
		return memory.read<enum class EScenarioConditionalType>(m_addr + 720);
	}
	float GetSpeed() {
		return memory.read<float>(m_addr + 724);
	}
	struct UKartMovementComponent GetCachedKartMovementComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 728);
		return struct UKartMovementComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTransition_WaitForUserInput
{
public:
	UTransition_WaitForUserInput(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AScenarioSwitchByWrongDrive
{
public:
	AScenarioSwitchByWrongDrive(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AScenarioTrigger
{
public:
	AScenarioTrigger(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UBoxComponent GetBoxComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UBoxComponent(ptr_addr);
	}
	bool GetbOnce() {
		return memory.read<bool>(m_addr + 632);
	}
	struct TMap<enum class EScenarioTriggerTargetType, struct FScenarioTriggerTarget> GetContainer() {
		return memory.read<struct TMap<enum class EScenarioTriggerTargetType, struct FScenarioTriggerTarget>>(m_addr + 640);
	}

private:
	std::uint64_t m_addr = 0;
};


class UWaterFlyReaction
{
public:
	UWaterFlyReaction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UTimeAttackSetupComponent
{
public:
	UTimeAttackSetupComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UShadowPlaySetupComponent GetShadowPlayComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 272);
		return struct UShadowPlaySetupComponent(ptr_addr);
	}
	struct UTimeAttackDataHelper GetDataHelper() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 280);
		return struct UTimeAttackDataHelper(ptr_addr);
	}
	struct UTimeAttackConfigStorage GetConfigStorage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 288);
		return struct UTimeAttackConfigStorage(ptr_addr);
	}
	struct FRaceSaveGameLatestPtr GetSaveGameBeingPlayed() {
		return memory.read<struct FRaceSaveGameLatestPtr>(m_addr + 296);
	}
	struct FRaceSaveGameLatestPtr GetSaveGameFromLastRace() {
		return memory.read<struct FRaceSaveGameLatestPtr>(m_addr + 304);
	}

private:
	std::uint64_t m_addr = 0;
};


class AScenarioTriggerByWidget
{
public:
	AScenarioTriggerByWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetTime() {
		return memory.read<float>(m_addr + 688);
	}
	float GetGameDeltaTime() {
		return memory.read<float>(m_addr + 692);
	}
	struct FScenarioTriggerTarget GetTriggerContainer() {
		return memory.read<struct FScenarioTriggerTarget>(m_addr + 696);
	}

private:
	std::uint64_t m_addr = 0;
};


class AScenarioTriggerBySequence
{
public:
	AScenarioTriggerBySequence(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FScenarioSequenceData GetSequenceData() {
		return memory.read<struct FScenarioSequenceData>(m_addr + 624);
	}
	struct FScenarioKartBodyPause GetKartBodyPause() {
		return memory.read<struct FScenarioKartBodyPause>(m_addr + 768);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTransition_WaitForKartToStop
{
public:
	UTransition_WaitForKartToStop(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UKartMovementComponent GetKartMovementComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 80);
		return struct UKartMovementComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class AScenarioKeyStateTrigger
{
public:
	AScenarioKeyStateTrigger(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FScenarioKey> GetTriggeringKeys() {
		return memory.read<struct TArray<struct FScenarioKey>>(m_addr + 624);
	}
	enum class EScenarioKeyState GetState() {
		return memory.read<enum class EScenarioKeyState>(m_addr + 640);
	}
	struct FScenarioTriggerTarget GetTriggerContainer() {
		return memory.read<struct FScenarioTriggerTarget>(m_addr + 648);
	}

private:
	std::uint64_t m_addr = 0;
};


class AScenarioTriggerByCharacterAnimation
{
public:
	AScenarioTriggerByCharacterAnimation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftObjectPtr<UAnimMontage> GetMontage() {
		return memory.read<struct TSoftObjectPtr<UAnimMontage>>(m_addr + 624);
	}
	enum class ECharacterAnimGraphState GetAnimState() {
		return memory.read<enum class ECharacterAnimGraphState>(m_addr + 664);
	}
	enum class ECharacterMontage GetMontageType() {
		return memory.read<enum class ECharacterMontage>(m_addr + 665);
	}
	bool GetbCallTriggerWhenAnimationEnded() {
		return memory.read<bool>(m_addr + 666);
	}
	struct FScenarioTriggerTarget GetTriggerContainer() {
		return memory.read<struct FScenarioTriggerTarget>(m_addr + 672);
	}

private:
	std::uint64_t m_addr = 0;
};


class AScenarioTriggerByResetKart
{
public:
	AScenarioTriggerByResetKart(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FScenarioTriggerTarget GetTriggerContainer() {
		return memory.read<struct FScenarioTriggerTarget>(m_addr + 624);
	}

private:
	std::uint64_t m_addr = 0;
};


class AScenarioTriggerByTimer
{
public:
	AScenarioTriggerByTimer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetCriterionTime() {
		return memory.read<float>(m_addr + 624);
	}
	struct FScenarioTriggerTarget GetLessThanTriggerContainer() {
		return memory.read<struct FScenarioTriggerTarget>(m_addr + 632);
	}
	struct FScenarioTriggerTarget GetMoreThanTriggerContainer() {
		return memory.read<struct FScenarioTriggerTarget>(m_addr + 664);
	}

private:
	std::uint64_t m_addr = 0;
};


class AScenarioTriggerByStaticTime
{
public:
	AScenarioTriggerByStaticTime(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetCriterionTime() {
		return memory.read<float>(m_addr + 624);
	}
	struct FScenarioTriggerTarget GetLessThanTriggerContainer() {
		return memory.read<struct FScenarioTriggerTarget>(m_addr + 632);
	}
	struct FScenarioTriggerTarget GetMoreThanTriggerContainer() {
		return memory.read<struct FScenarioTriggerTarget>(m_addr + 664);
	}
	int32_t GetSlot() {
		return memory.read<int32_t>(m_addr + 696);
	}

private:
	std::uint64_t m_addr = 0;
};


class AScenarioTriggerByDriftAssistState
{
public:
	AScenarioTriggerByDriftAssistState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FScenarioTriggerTarget GetEnableTriggerContainer() {
		return memory.read<struct FScenarioTriggerTarget>(m_addr + 624);
	}
	struct FScenarioTriggerTarget GetDisableTriggerContainer() {
		return memory.read<struct FScenarioTriggerTarget>(m_addr + 656);
	}

private:
	std::uint64_t m_addr = 0;
};


class AScenarioGlobalSettings
{
public:
	AScenarioGlobalSettings(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AScenarioVisibilityWidget GetScenarioVisibilityWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct AScenarioVisibilityWidget(ptr_addr);
	}
	struct AScenarioVisibilityEtcWidget GetScenarioVisibilityEtcWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct AScenarioVisibilityEtcWidget(ptr_addr);
	}
	struct AScenarioBeginnerCare GetScenarioBeginnerCare() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct AScenarioBeginnerCare(ptr_addr);
	}
	struct AScenarioSpeedControl GetScenarioSpeedControl() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct AScenarioSpeedControl(ptr_addr);
	}
	struct AScenarioBGM GetScenarioBGM() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct AScenarioBGM(ptr_addr);
	}
	struct FScenarioTriggerTarget GetTriggerTarget() {
		return memory.read<struct FScenarioTriggerTarget>(m_addr + 664);
	}

private:
	std::uint64_t m_addr = 0;
};


class UScenarioExpressionSwitcherWidget
{
public:
	UScenarioExpressionSwitcherWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UWidgetSwitcher GetV_WidgetSwitcher() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UWidgetSwitcher(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UScenarioExpressionWidget
{
public:
	UScenarioExpressionWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UWidgetAnimation GetAnimation_In() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation GetAnimation_Out() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation GetAnimation_Loop() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation GetAnimation_Finished_In() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UUMGSequencePlayer GetLoopSeuqnecePlayer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UUMGSequencePlayer(ptr_addr);
	}
	struct FDelegate GetOnFinishedInAnimationDelegate() {
		return memory.read<struct FDelegate>(m_addr + 664);
	}
	struct FDelegate GetOnFinishedLoopAnimationDelegate() {
		return memory.read<struct FDelegate>(m_addr + 680);
	}
	struct FDelegate GetOnFinishedOutAnimationDelegate() {
		return memory.read<struct FDelegate>(m_addr + 696);
	}

private:
	std::uint64_t m_addr = 0;
};


class AScenarioGameMode
{
public:
	AScenarioGameMode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetExtraOptions() {
		return memory.read<struct FString>(m_addr + 824);
	}

private:
	std::uint64_t m_addr = 0;
};


class AScenarioGameSession
{
public:
	AScenarioGameSession(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<struct FString, struct UKdGameSessionPlayer> Getplayers() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 576);
		return struct TMap<struct FString, struct UKdGameSessionPlayer>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UScenarioGuideSetWidget
{
public:
	UScenarioGuideSetWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FText GetText() {
		return memory.read<struct FText>(m_addr + 720);
	}
	float GetAngle() {
		return memory.read<float>(m_addr + 744);
	}
	float GetHeight() {
		return memory.read<float>(m_addr + 748);
	}
	float GetWidth() {
		return memory.read<float>(m_addr + 752);
	}
	struct UKdTextBlock GetV_Text() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 760);
		return struct UKdTextBlock(ptr_addr);
	}
	struct USizeBox GetV_GuideSizeBox() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 768);
		return struct USizeBox(ptr_addr);
	}
	struct UOverlay GetV_TextOverlay() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 776);
		return struct UOverlay(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ATrackGimmick_Door
{
public:
	ATrackGimmick_Door(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UCurveFloat GetTimeCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 576);
		return struct UCurveFloat(ptr_addr);
	}
	float GetTimeCurveOffset() {
		return memory.read<float>(m_addr + 584);
	}
	struct UFMODEvent GetBeginForwardMovementSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 592);
		return struct UFMODEvent(ptr_addr);
	}
	struct UFMODEvent GetEndForwardMovementSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 600);
		return struct UFMODEvent(ptr_addr);
	}
	struct UFMODEvent GetBeginBackwardMovementSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UFMODEvent(ptr_addr);
	}
	struct UFMODEvent GetEndBackwardMovementSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UFMODEvent(ptr_addr);
	}
	struct USplineComponent GetSplineComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 784);
		return struct USplineComponent(ptr_addr);
	}
	struct UStaticMeshComponent GetRightStaticMeshComp() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 792);
		return struct UStaticMeshComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class AScenarioItemCube
{
public:
	AScenarioItemCube(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetbOnce() {
		return memory.read<bool>(m_addr + 760);
	}
	float GetOverrideRespawnTime() {
		return memory.read<float>(m_addr + 764);
	}
	bool GetbContainsSpecificItem() {
		return memory.read<bool>(m_addr + 768);
	}
	enum class EItemType GetSpecificItem() {
		return memory.read<enum class EItemType>(m_addr + 769);
	}
	struct FScenarioIdentifier GetIdentifier() {
		return memory.read<struct FScenarioIdentifier>(m_addr + 776);
	}
	enum class EScenarioActorType GetType() {
		return memory.read<enum class EScenarioActorType>(m_addr + 824);
	}
	bool GetbDefaultActivate() {
		return memory.read<bool>(m_addr + 828);
	}
	int8_t GetInitializeOrder() {
		return memory.read<int8_t>(m_addr + 829);
	}
	enum class EScenarioActorState GetScenarioActorState() {
		return memory.read<enum class EScenarioActorState>(m_addr + 830);
	}
	struct UScenarioItemCubesComponent GetItemCubesComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 832);
		return struct UScenarioItemCubesComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTMIRaceDataList
{
public:
	UTMIRaceDataList(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetUniqueIdentifier() {
		return memory.read<struct FString>(m_addr + 40);
	}
	struct TArray<struct FTMIRaceData> GetTMIRaceData() {
		return memory.read<struct TArray<struct FTMIRaceData>>(m_addr + 56);
	}
	struct TMap<char, struct FTMIItemModeData> GetTMIItemModeData() {
		return memory.read<struct TMap<char, struct FTMIItemModeData>>(m_addr + 72);
	}
	struct TArray<struct FTMIItemEventData> GetTMIItemEventData() {
		return memory.read<struct TArray<struct FTMIItemEventData>>(m_addr + 152);
	}
	struct FTMIRaceEventData GetTMIRaceEventData() {
		return memory.read<struct FTMIRaceEventData>(m_addr + 168);
	}
	struct TArray<struct FRecordUserCollisionInfo> GetUserCollision() {
		return memory.read<struct TArray<struct FRecordUserCollisionInfo>>(m_addr + 200);
	}
	struct FTMIBoosterStats Getboosterstats() {
		return memory.read<struct FTMIBoosterStats>(m_addr + 216);
	}

private:
	std::uint64_t m_addr = 0;
};


class UScenarioItemCubesComponent
{
public:
	UScenarioItemCubesComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UScenarioKeyAccumWidget
{
public:
	UScenarioKeyAccumWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UWidgetAnimationGraph GetAnimationGraph() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UWidgetAnimationGraph(ptr_addr);
	}
	int32_t GetMaxAccumItemCount() {
		return memory.read<int32_t>(m_addr + 616);
	}
	struct UPanelWidget GetV_Panel_KeyAccumItemContainer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UPanelWidget(ptr_addr);
	}
	UScenarioKeyAccumItemWidget GetKeyAccumItemWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return UScenarioKeyAccumItemWidget(ptr_addr);
	}
	UScenarioKeyAccumLayoutItemWidget GetKeyAccumLayoutItemWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return UScenarioKeyAccumLayoutItemWidget(ptr_addr);
	}
	struct UScenarioKeyAccumLayoutItemWidget GetKeyAccumLayoutItemWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UScenarioKeyAccumLayoutItemWidget(ptr_addr);
	}
	struct UScenarioLogicComponent GetScenarioLogicComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UScenarioLogicComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UScenarioKeyGuideWidget
{
public:
	UScenarioKeyGuideWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UWidgetAnimationGraph GetAnimationGraph() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UWidgetAnimationGraph(ptr_addr);
	}
	struct UScenarioLogicComponent GetScenarioLogicComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UScenarioLogicComponent(ptr_addr);
	}
	enum class EInputDeviceType GetLatestInputDeviceType() {
		return memory.read<enum class EInputDeviceType>(m_addr + 624);
	}
	struct FScenarioKeyGuideAnimData GetScenarioKeyGuideAnimData() {
		return memory.read<struct FScenarioKeyGuideAnimData>(m_addr + 628);
	}
	struct UPanelWidget GetV_Panel_KeyContainer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 664);
		return struct UPanelWidget(ptr_addr);
	}
	UScenarioKeyWidget GetScenarioKeyWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 672);
		return UScenarioKeyWidget(ptr_addr);
	}
	UKeyIconWidget GetKeyIconWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 680);
		return UKeyIconWidget(ptr_addr);
	}
	UUserWidget GetKeyLinkWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return UUserWidget(ptr_addr);
	}
	bool GetbEnableFocusVisualWhenKeyInputCome() {
		return memory.read<bool>(m_addr + 696);
	}
	UScenarioKeyLayoutWidget GetKeyLayoutWidgetClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return UScenarioKeyLayoutWidget(ptr_addr);
	}
	struct UScenarioKeyLayoutWidget GetKeyLayoutWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct UScenarioKeyLayoutWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTAAccountConfigStorage
{
public:
	UTAAccountConfigStorage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UServerQueryProtocol
{
public:
	UServerQueryProtocol(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UScenarioKeyLayoutKeyWidget
{
public:
	UScenarioKeyLayoutKeyWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FScenarioKey GetGameTimeKey() {
		return memory.read<struct FScenarioKey>(m_addr + 608);
	}
	struct UKeyTextureMap2 GetScenarioKeyTextureMap() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UKeyTextureMap2(ptr_addr);
	}
	struct UKeyTextureMap GetKeyTextureMap() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UKeyTextureMap(ptr_addr);
	}
	struct UKdButtonImage GetV_ButtonImage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UKdButtonImage(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UScenarioLogicComponent
{
public:
	UScenarioLogicComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UScenarioMessageElementWidget
{
public:
	UScenarioMessageElementWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UKdImageTextBlock GetV_TextBlock_Message() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UKdImageTextBlock(ptr_addr);
	}
	struct UUserWidget GetV_ScenarioConfirmButton() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UUserWidget(ptr_addr);
	}
	struct UScenarioLogicComponent GetScenarioLogicComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UScenarioLogicComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UScenarioPauseComponent
{
public:
	UScenarioPauseComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AScenarioPawn
{
public:
	AScenarioPawn(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UScenarioPhaseComponent
{
public:
	UScenarioPhaseComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UScenarioPlayerStatComponent
{
public:
	UScenarioPlayerStatComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<struct AScenarioSwitchBase, bool> GetSwitchActorContainer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 336);
		return struct TMap<struct AScenarioSwitchBase, bool>(ptr_addr);
	}
	struct APawn GetCachedPawn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 416);
		return struct APawn(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UScenarioPortraitMessageWidget
{
public:
	UScenarioPortraitMessageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UImage GetV_Image_Portrait() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UImage(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UScenarioRaceCounterWidget
{
public:
	UScenarioRaceCounterWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UScenarioTitleWidget
{
public:
	UScenarioTitleWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UKdTextBlock GetV_Text_Title() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UKdTextBlock GetV_Text_Desc() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UKdTextBlock(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UScreenTransitionWidget
{
public:
	UScreenTransitionWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UWidgetAnimation GetAnim_Show_Inst() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 656);
		return struct UWidgetAnimation(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class USequenceSkipComponent
{
public:
	USequenceSkipComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UKdServer
{
public:
	UKdServer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetServerPSNClientId() {
		return memory.read<struct FString>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};


class UDqDediServerMessage
{
public:
	UDqDediServerMessage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetChannel() {
		return memory.read<struct FString>(m_addr + 56);
	}
	struct UObject GetMsg() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return struct UObject(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrUpdatePlatformStore
{
public:
	UPrUpdatePlatformStore(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UTransition_ShadowQuestByWorld
{
public:
	UTransition_ShadowQuestByWorld(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UDqDediQueryAccountStatus
{
public:
	UDqDediQueryAccountStatus(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FString> GetplayerIds() {
		return memory.read<struct TArray<struct FString>>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UDqDediGameLog
{
public:
	UDqDediGameLog(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetlogName() {
		return memory.read<struct FString>(m_addr + 56);
	}
	struct FString GetLog() {
		return memory.read<struct FString>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UDrDediGetMultiplayRequest
{
public:
	UDrDediGetMultiplayRequest(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UObject GetRequest() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 72);
		return struct UObject(ptr_addr);
	}
	struct FString GetgameId() {
		return memory.read<struct FString>(m_addr + 80);
	}
	struct UObject GetSessionRequest() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 96);
		return struct UObject(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULqGetStickerStocks
{
public:
	ULqGetStickerStocks(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<int64_t> GetstickerStockIds() {
		return memory.read<struct TArray<int64_t>>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UDrDediFinishRace
{
public:
	UDrDediFinishRace(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<struct FString, struct FRaceGameResult> GetaiRaceResult() {
		return memory.read<struct TMap<struct FString, struct FRaceGameResult>>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UDqDediNxLogUser
{
public:
	UDqDediNxLogUser(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetaccountId() {
		return memory.read<struct FString>(m_addr + 56);
	}
	struct FString Getaccountname() {
		return memory.read<struct FString>(m_addr + 72);
	}
	struct FString Getosplatform() {
		return memory.read<struct FString>(m_addr + 88);
	}
	struct FString Getcountryname() {
		return memory.read<struct FString>(m_addr + 104);
	}
	struct FString Getsid() {
		return memory.read<struct FString>(m_addr + 120);
	}
	struct FString GetosType() {
		return memory.read<struct FString>(m_addr + 136);
	}

private:
	std::uint64_t m_addr = 0;
};


class UDqDediNxLogInMatchEndRidePath
{
public:
	UDqDediNxLogInMatchEndRidePath(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString Getprotohash() {
		return memory.read<struct FString>(m_addr + 248);
	}
	struct FString Getridepath() {
		return memory.read<struct FString>(m_addr + 264);
	}

private:
	std::uint64_t m_addr = 0;
};


class UDqCreateMultiplaySession
{
public:
	UDqCreateMultiplaySession(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString Getregion() {
		return memory.read<struct FString>(m_addr + 56);
	}
	struct FString GetfleetId() {
		return memory.read<struct FString>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UDrCreateMultiplaySession
{
public:
	UDrCreateMultiplaySession(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetgameId() {
		return memory.read<struct FString>(m_addr + 72);
	}
	struct FString GetAddr() {
		return memory.read<struct FString>(m_addr + 88);
	}
	struct FString GetTrack() {
		return memory.read<struct FString>(m_addr + 104);
	}
	struct UObject GetgameSettings() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 120);
		return struct UObject(ptr_addr);
	}
	struct UObject Getdetails() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 128);
		return struct UObject(ptr_addr);
	}
	struct FString GetopenLevelOption() {
		return memory.read<struct FString>(m_addr + 136);
	}
	struct FString GetpackEncKey() {
		return memory.read<struct FString>(m_addr + 152);
	}

private:
	std::uint64_t m_addr = 0;
};


class UDrQueryDebugSession
{
public:
	UDrQueryDebugSession(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetUUID() {
		return memory.read<struct FString>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class USessionApiServer
{
public:
	USessionApiServer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UHttpServerRequester GetSessionApiServer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct UHttpServerRequester(ptr_addr);
	}
	struct UServerRequest GetWaitingSessionAPIRequests() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 48);
		return struct UServerRequest(ptr_addr);
	}
	struct TArray<struct FSessionApiPendingRequest> GetPendingSessionAPIRequests() {
		return memory.read<struct TArray<struct FSessionApiPendingRequest>>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class USetupPlayerInputInterface
{
public:
	USetupPlayerInputInterface(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UShadowPlaySetupComponent
{
public:
	UShadowPlaySetupComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AKdPawn GetPlayerPawn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 176);
		return struct AKdPawn(ptr_addr);
	}
	struct AKdPawn GetShadowPawn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 184);
		return struct AKdPawn(ptr_addr);
	}
	struct UKdPawnSpawner GetPawnSpawner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 192);
		return struct UKdPawnSpawner(ptr_addr);
	}
	struct UDelegateBarrierMany GetBarrier() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 200);
		return struct UDelegateBarrierMany(ptr_addr);
	}
	struct FRaceSaveGameLatestPtr GetShadowSaveGame() {
		return memory.read<struct FRaceSaveGameLatestPtr>(m_addr + 208);
	}

private:
	std::uint64_t m_addr = 0;
};


class UShadowQuestConfigStorage
{
public:
	UShadowQuestConfigStorage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ATimeAttackGameState
{
public:
	ATimeAttackGameState(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UShadowQuestLogicComponent
{
public:
	UShadowQuestLogicComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AShadowQuestPawn
{
public:
	AShadowQuestPawn(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UShadowQuestPhaseComponent
{
public:
	UShadowQuestPhaseComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UShadowQuestResultDialog
{
public:
	UShadowQuestResultDialog(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UShadowQuestAddHUD
{
public:
	UShadowQuestAddHUD(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UShadowQuestActivateStartBoost
{
public:
	UShadowQuestActivateStartBoost(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class URemoveDistanceTimeWidget
{
public:
	URemoveDistanceTimeWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class USpeedTeamPhaseComponent
{
public:
	USpeedTeamPhaseComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UShadowQuestAddRaceOverWidget
{
public:
	UShadowQuestAddRaceOverWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftClassPtr<UObject> GetRaceOverWidgetClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UShadowQuestRemoveRaceOverWidget
{
public:
	UShadowQuestRemoveRaceOverWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UShadowQuestPlayFinishSequence
{
public:
	UShadowQuestPlayFinishSequence(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UShadowQuestAddResultWidget
{
public:
	UShadowQuestAddResultWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftClassPtr<UObject> GetResultWidgetClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAddShadowEmotion
{
public:
	UAddShadowEmotion(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPqShopInventoryListKrPc
{
public:
	UPqShopInventoryListKrPc(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UEnableDistanceWarning
{
public:
	UEnableDistanceWarning(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UShadowQuestStartSetup
{
public:
	UShadowQuestStartSetup(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ATimeAttackShadowPawn
{
public:
	ATimeAttackShadowPawn(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class AShadowQuestShadowPawn
{
public:
	AShadowQuestShadowPawn(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UShadowQuestStateComponent
{
public:
	UShadowQuestStateComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct APawn GetOpponentPawn() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 224);
		return struct APawn(ptr_addr);
	}
	struct UServerTimerComponent GetServerTimer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 232);
		return struct UServerTimerComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UShadowQuestUIComponent
{
public:
	UShadowQuestUIComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UWidgetPtrLifetimeOwner GetWidgetOwner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 192);
		return struct UWidgetPtrLifetimeOwner(ptr_addr);
	}
	struct UShadowQuestConfigStorage GetConfigStorage() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 200);
		return struct UShadowQuestConfigStorage(ptr_addr);
	}
	struct UShadowQuestStateComponent GetStateComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 208);
		return struct UShadowQuestStateComponent(ptr_addr);
	}
	struct URaceProgressComponent GetMyRaceProgress() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 216);
		return struct URaceProgressComponent(ptr_addr);
	}
	struct URaceProgressComponent GetOpponentRaceProgress() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 224);
		return struct URaceProgressComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UInvenItemEntryObject
{
public:
	UInvenItemEntryObject(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKtStockItem GetStockItem() {
		return memory.read<struct FKtStockItem>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};


class UConfirmItemEntryObject
{
public:
	UConfirmItemEntryObject(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UShopFuncClass
{
public:
	UShopFuncClass(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FShopPurchasingInfo GetCachedStockInfo() {
		return memory.read<struct FShopPurchasingInfo>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};


class UShopToy
{
public:
	UShopToy(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrShopKoinProductList
{
public:
	UPrShopKoinProductList(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FKtShopStock> GetProducts() {
		return memory.read<struct TArray<struct FKtShopStock>>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqShopBalanceKrPc
{
public:
	UPqShopBalanceKrPc(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UPrShopBalanceKrPc
{
public:
	UPrShopBalanceKrPc(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GettotalBalance() {
		return memory.read<int32_t>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqShopPurchaseKrPc
{
public:
	UPqShopPurchaseKrPc(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetCategory() {
		return memory.read<struct FString>(m_addr + 56);
	}
	struct FString GetstockId() {
		return memory.read<struct FString>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqShopInventoryRefundKrPc
{
public:
	UPqShopInventoryRefundKrPc(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetIndex() {
		return memory.read<int32_t>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrShopPurchaseNxA
{
public:
	UPrShopPurchaseNxA(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetauthorizedUrl() {
		return memory.read<struct FString>(m_addr + 72);
	}
	struct FString GettransactionId() {
		return memory.read<struct FString>(m_addr + 88);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqShopInventoryPickupNxA
{
public:
	UPqShopInventoryPickupNxA(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GettransactionId() {
		return memory.read<struct FString>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqVerifyToyPayment
{
public:
	UPqVerifyToyPayment(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FKtToyPaymentInfo GetpaymentInfo() {
		return memory.read<struct FKtToyPaymentInfo>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPrVerifyToyPayment
{
public:
	UPrVerifyToyPayment(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FString GetproductId() {
		return memory.read<struct FString>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULqDeleteMyStickerDownload
{
public:
	ULqDeleteMyStickerDownload(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int64_t GetstickerStockId() {
		return memory.read<int64_t>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPqIsAdult
{
public:
	UPqIsAdult(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool GetisAdult() {
		return memory.read<bool>(m_addr + 56);
	}
	struct FString Getbirthday() {
		return memory.read<struct FString>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};


class UPcAutoConfirmedKRPCProducts
{
public:
	UPcAutoConfirmedKRPCProducts(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FKtShopStock> GetProducts() {
		return memory.read<struct TArray<struct FKtShopStock>>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};


class USideMirrorCameraComponent
{
public:
	USideMirrorCameraComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct AActor GetMyActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 176);
		return struct AActor(ptr_addr);
	}
	struct AActor GetTargetActor() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 184);
		return struct AActor(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ASimpleDedicatedRaceGameSession
{
public:
	ASimpleDedicatedRaceGameSession(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<struct FString, struct UKdGameSessionPlayer> Getplayers() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 584);
		return struct TMap<struct FString, struct UKdGameSessionPlayer>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class USimpleMovementComponent
{
public:
	USimpleMovementComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FVector> GetCheckPoint() {
		return memory.read<struct TArray<struct FVector>>(m_addr + 176);
	}
	int32_t GetTargetIndex() {
		return memory.read<int32_t>(m_addr + 192);
	}
	float GetSpeed() {
		return memory.read<float>(m_addr + 196);
	}

private:
	std::uint64_t m_addr = 0;
};


class USkipFinishConditions
{
public:
	USkipFinishConditions(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class USirenReaction
{
public:
	USirenReaction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class USlotChangerWidget
{
public:
	USlotChangerWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UKeyIconWidget GetKeyIcon() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UKeyIconWidget(ptr_addr);
	}
	struct UImage GetSlotChangerImg() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UImage(ptr_addr);
	}
	struct UTextBlock GetSlotChangerCountText() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UTextBlock(ptr_addr);
	}
	struct UWidgetAnimation GetChangeAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UFMODEvent GetSlotChangeSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UFMODEvent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UWidgetManagerComponent
{
public:
	UWidgetManagerComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UUserWidget GetCommonThrobberWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 264);
		return struct UUserWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class USmsGameLift
{
public:
	USmsGameLift(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UGameInstance GetGameInstance() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 112);
		return struct UGameInstance(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UStickerMarketTextChecker
{
public:
	UStickerMarketTextChecker(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class USnowstormReaction
{
public:
	USnowstormReaction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftObjectPtr<UMaterialInstance> GetSnowstormMatInst() {
		return memory.read<struct TSoftObjectPtr<UMaterialInstance>>(m_addr + 536);
	}
	struct UMaterialInstanceDynamic GetSnowstormMaterial() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 576);
		return struct UMaterialInstanceDynamic(ptr_addr);
	}
	struct UCameraComponent GetCameraComp() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 584);
		return struct UCameraComponent(ptr_addr);
	}
	struct UItemComponent GetLocalVictim() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 592);
		return struct UItemComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ASoundManager
{
public:
	ASoundManager(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FLoadSoundInfo> GetActiveLoadSounds() {
		return memory.read<struct TArray<struct FLoadSoundInfo>>(m_addr + 576);
	}
	struct TArray<struct FLoadSoundInfo> GetInActiveLoadSounds() {
		return memory.read<struct TArray<struct FLoadSoundInfo>>(m_addr + 592);
	}
	struct TArray<struct FSoundInfo> GetInActivateSounds() {
		return memory.read<struct TArray<struct FSoundInfo>>(m_addr + 608);
	}
	struct TArray<struct FSoundInfo> GetActiveSounds() {
		return memory.read<struct TArray<struct FSoundInfo>>(m_addr + 624);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAddTeamBoostGauge
{
public:
	UAddTeamBoostGauge(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftClassPtr<UObject> GetBoostGaugeWidget() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class UEnableLeadCompensation
{
public:
	UEnableLeadCompensation(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ASpeedSingleAiPawn
{
public:
	ASpeedSingleAiPawn(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class USQWidgetCheat
{
public:
	USQWidgetCheat(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UWidgetPtrLifetimeOwner GetWidgetOwner() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 56);
		return struct UWidgetPtrLifetimeOwner(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UStaffCreditsDialog
{
public:
	UStaffCreditsDialog(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UStickerImageCache
{
public:
	UStickerImageCache(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTexture2D GetTexture() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 40);
		return struct UTexture2D(ptr_addr);
	}
	struct FLiveryStickerDesc Getdesc() {
		return memory.read<struct FLiveryStickerDesc>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};


class UStickerStockEntryObject
{
public:
	UStickerStockEntryObject(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FStickerStock GetStickerStock() {
		return memory.read<struct FStickerStock>(m_addr + 64);
	}
	struct UStickerImageCache GetImageCache() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 192);
		return struct UStickerImageCache(ptr_addr);
	}
	struct UAccountLiveryMarket GetMarket() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 224);
		return struct UAccountLiveryMarket(ptr_addr);
	}
	struct UWorld GetWorld() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 232);
		return struct UWorld(ptr_addr);
	}
	struct FLiveryStickerDesc GetStickerDesc() {
		return memory.read<struct FLiveryStickerDesc>(m_addr + 248);
	}

private:
	std::uint64_t m_addr = 0;
};


class UStickerSearchMarkerEntryObject
{
public:
	UStickerSearchMarkerEntryObject(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UStickerSearchTagEntryObject
{
public:
	UStickerSearchTagEntryObject(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULqStickerMarketLocked
{
public:
	ULqStickerMarketLocked(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULrRestrictedUntil
{
public:
	ULrRestrictedUntil(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FDateTime Getuntil() {
		return memory.read<struct FDateTime>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULqGetStickerStock
{
public:
	ULqGetStickerStock(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int64_t GetstickerStockId() {
		return memory.read<int64_t>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULrGetStickerStocks
{
public:
	ULrGetStickerStocks(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FStickerStock> GetstickerStocks() {
		return memory.read<struct TArray<struct FStickerStock>>(m_addr + 72);
	}
	struct TArray<int64_t> GetnotFounds() {
		return memory.read<struct TArray<int64_t>>(m_addr + 88);
	}
	struct TArray<int64_t> Geterrors() {
		return memory.read<struct TArray<int64_t>>(m_addr + 104);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULrRegisterStickerStock
{
public:
	ULrRegisterStickerStock(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int64_t GetstickerStockId() {
		return memory.read<int64_t>(m_addr + 72);
	}
	struct FString GetstickerUniqueId() {
		return memory.read<struct FString>(m_addr + 80);
	}
	struct FKtDataStorePayload GetdataStoreLink() {
		return memory.read<struct FKtDataStorePayload>(m_addr + 96);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULqGetMyStickerDownloadList
{
public:
	ULqGetMyStickerDownloadList(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULqGetMyStickerStockList
{
public:
	ULqGetMyStickerStockList(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class ULrGetMyStickerStockList
{
public:
	ULrGetMyStickerStockList(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FStockIdAndSlot> GetStocks() {
		return memory.read<struct TArray<struct FStockIdAndSlot>>(m_addr + 72);
	}
	int32_t GetslotCount() {
		return memory.read<int32_t>(m_addr + 88);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULqDropMyStickerStock
{
public:
	ULqDropMyStickerStock(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int64_t GetstickerStockId() {
		return memory.read<int64_t>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULqDeleteMyStickerStock
{
public:
	ULqDeleteMyStickerStock(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int64_t GetstickerStockId() {
		return memory.read<int64_t>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULrDeleteMyStickerStock
{
public:
	ULrDeleteMyStickerStock(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	bool Getchanged() {
		return memory.read<bool>(m_addr + 72);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULqReportStickerStock
{
public:
	ULqReportStickerStock(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int64_t GetstickerStockId() {
		return memory.read<int64_t>(m_addr + 56);
	}
	struct FString GetreportCategory() {
		return memory.read<struct FString>(m_addr + 64);
	}

private:
	std::uint64_t m_addr = 0;
};


class ULqAddStickerStockBookmark
{
public:
	ULqAddStickerStockBookmark(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int64_t GetstickerStockId() {
		return memory.read<int64_t>(m_addr + 56);
	}

private:
	std::uint64_t m_addr = 0;
};


class USurfaceEffectComponent
{
public:
	USurfaceEffectComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UFMODAudioComponent GetSurfaceSoundComp() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 176);
		return struct UFMODAudioComponent(ptr_addr);
	}
	struct UKartMovementComponent GetKartMovement() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 184);
		return struct UKartMovementComponent(ptr_addr);
	}
	struct UKartEffectComponent GetKartEffect() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 192);
		return struct UKartEffectComponent(ptr_addr);
	}
	struct UPhysicalMaterial GetLastSurface() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 200);
		return struct UPhysicalMaterial(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ASVGToolsMeshActor
{
public:
	ASVGToolsMeshActor(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTextureRenderTarget2D GetTextureRenderTarget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 544);
		return struct UTextureRenderTarget2D(ptr_addr);
	}
	struct USceneCaptureComponent2D GetSceneCapture() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 552);
		return struct USceneCaptureComponent2D(ptr_addr);
	}
	struct TArray<struct UStaticMeshComponent> GetBoundaryMeshComponents() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct TArray<struct UStaticMeshComponent>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTargetFinderComponent
{
public:
	UTargetFinderComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FVector GetAimWidget3DLocalOffset() {
		return memory.read<struct FVector>(m_addr + 192);
	}
	float GetAimWidget3DScale() {
		return memory.read<float>(m_addr + 204);
	}
	struct TSoftClassPtr<UObject> GetAimWidgetClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 208);
	}
	struct TSoftClassPtr<UObject> GetAimWidget3DClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 248);
	}
	struct UFMODAudioComponent GetAudioComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 288);
		return struct UFMODAudioComponent(ptr_addr);
	}
	struct AActor GetFlySource() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 296);
		return struct AActor(ptr_addr);
	}
	struct AActor GetTargetCandidate() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 304);
		return struct AActor(ptr_addr);
	}
	struct AActor GetTargetReplicated() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 312);
		return struct AActor(ptr_addr);
	}
	struct UWidgetComponent GetWidgetComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 336);
		return struct UWidgetComponent(ptr_addr);
	}
	struct UItemAimWidget GetAimWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 344);
		return struct UItemAimWidget(ptr_addr);
	}
	struct UItemAimWidget GetAimWidget3D() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 352);
		return struct UItemAimWidget(ptr_addr);
	}
	struct UItemAimWidget GetAimWidgetOnMe() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 360);
		return struct UItemAimWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTeamBoostComponent
{
public:
	UTeamBoostComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	int32_t GetTeamIndex() {
		return memory.read<int32_t>(m_addr + 264);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTeamBoostGameStateComponent
{
public:
	UTeamBoostGameStateComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TArray<struct FTeamBoostGauge> GetTeamBoostGauge() {
		return memory.read<struct TArray<struct FTeamBoostGauge>>(m_addr + 184);
	}

private:
	std::uint64_t m_addr = 0;
};


class UM_TrackChangeDialog
{
public:
	UM_TrackChangeDialog(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UListView GetTrackListView() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 864);
		return struct UListView(ptr_addr);
	}
	struct TMap<struct FString, struct UM_TrackChangeDialogItem> GetAliasToItemMap() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 872);
		return struct TMap<struct FString, struct UM_TrackChangeDialogItem>(ptr_addr);
	}
	struct UM_TrackChangeDialogItem GetPreviousSelection() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 952);
		return struct UM_TrackChangeDialogItem(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTimeAttackConfigStorage
{
public:
	UTimeAttackConfigStorage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UTANoAccountConfigStorage
{
public:
	UTANoAccountConfigStorage(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRaceSaveGameLatestPtr GetLocalSaveGameCache() {
		return memory.read<struct FRaceSaveGameLatestPtr>(m_addr + 40);
	}

private:
	std::uint64_t m_addr = 0;
};


class ATimeAttackGameMode
{
public:
	ATimeAttackGameMode(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UTimeAttackKtServerComponent
{
public:
	UTimeAttackKtServerComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UTimeAttackPhaseComponent
{
public:
	UTimeAttackPhaseComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UTimeAttackReplayerEnd
{
public:
	UTimeAttackReplayerEnd(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UDisableSideMirror
{
public:
	UDisableSideMirror(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UTransition_WaitForSaveTimeAttack
{
public:
	UTransition_WaitForSaveTimeAttack(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UEnableResultWidgetButtons
{
public:
	UEnableResultWidgetButtons(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UTransition_ToTimeAttackCountdown
{
public:
	UTransition_ToTimeAttackCountdown(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UForceStopShadow
{
public:
	UForceStopShadow(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UWebPageWidget
{
public:
	UWebPageWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class USetupTimeAttack
{
public:
	USetupTimeAttack(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UStartTimeAttack
{
public:
	UStartTimeAttack(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UForceRaceRankInitialization
{
public:
	UForceRaceRankInitialization(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UTransition_ShowTransitionWidget
{
public:
	UTransition_ShowTransitionWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UScreenTransitionWidget GetTransitionWidget() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 80);
		return struct UScreenTransitionWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UAddAlwaysCanFinishRaceRule
{
public:
	UAddAlwaysCanFinishRaceRule(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UTimeAttackTravelData
{
public:
	UTimeAttackTravelData(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct FRaceSaveGameLatestPtr GetReplayFile() {
		return memory.read<struct FRaceSaveGameLatestPtr>(m_addr + 48);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTMI_NXLogBaseComponent
{
public:
	UTMI_NXLogBaseComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TMap<struct APawn, struct UObject*> GetTMIDataContainer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 176);
		return struct TMap<struct APawn, struct UObject*>(ptr_addr);
	}
	struct TSet<struct UObject> GetExpandDataContainer() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 256);
		return struct TSet<struct UObject>(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTMI_NXLogMajorGameComponent
{
public:
	UTMI_NXLogMajorGameComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	float GetLastSaveTime() {
		return memory.read<float>(m_addr + 364);
	}
	bool GetbRaceStart() {
		return memory.read<bool>(m_addr + 368);
	}
	bool GetbRaceEnd() {
		return memory.read<bool>(m_addr + 369);
	}
	struct TArray<struct APawn> GetUserList() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 376);
		return struct TArray<struct APawn>(ptr_addr);
	}
	float GetTotalLapTime() {
		return memory.read<float>(m_addr + 392);
	}
	struct UMajorGameData GetRaceResult() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 400);
		return struct UMajorGameData(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTMIOvertakeEventProducer
{
public:
	UTMIOvertakeEventProducer(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UToastManagerComponent
{
public:
	UToastManagerComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftClassPtr<UObject> GetToastPopupClass() {
		return memory.read<struct TSoftClassPtr<UObject>>(m_addr + 208);
	}
	struct UUserWidget GetCurrentToastPopup() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 248);
		return struct UUserWidget(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTouchInstanceBoosterButton
{
public:
	UTouchInstanceBoosterButton(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UNamedSlot GetV_KeyGuideSlot() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UNamedSlot(ptr_addr);
	}
	struct UWidgetSwitcher GetV_WidgetSwitcher() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UWidgetSwitcher(ptr_addr);
	}
	struct UWidgetAnimation GetNormalAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation GetEnableAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation GetHoverEnableAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 728);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UMovementAssistComponent GetAssist() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 736);
		return struct UMovementAssistComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTouchKeyGuideWidget
{
public:
	UTouchKeyGuideWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UTouchKeyGuideInstWidget GetV_ItemUseGuide() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 608);
		return struct UTouchKeyGuideInstWidget(ptr_addr);
	}
	struct UTouchKeyGuideInstWidget GetV_InstanceBoostGuide01() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 616);
		return struct UTouchKeyGuideInstWidget(ptr_addr);
	}
	struct UTouchKeyGuideInstWidget GetV_InstanceBoostGuide02() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 624);
		return struct UTouchKeyGuideInstWidget(ptr_addr);
	}
	struct UTouchKeyGuideInstWidget GetV_DriftGuide() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 632);
		return struct UTouchKeyGuideInstWidget(ptr_addr);
	}
	struct UTouchKeyGuideInstWidget GetV_CounterSteerGuide() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 640);
		return struct UTouchKeyGuideInstWidget(ptr_addr);
	}
	struct UTouchKeyGuideInstWidget GetV_ResetGuide() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 648);
		return struct UTouchKeyGuideInstWidget(ptr_addr);
	}
	struct FTouchKeyGuideNameSlots GetKeyGuideNameSlots() {
		return memory.read<struct FTouchKeyGuideNameSlots>(m_addr + 656);
	}
	struct UMovementAssistComponent GetAssistComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 728);
		return struct UMovementAssistComponent(ptr_addr);
	}
	struct UItemSlotComponent GetSlotComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 736);
		return struct UItemSlotComponent(ptr_addr);
	}
	struct URaceProgressComponent GetRaceProgressComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 744);
		return struct URaceProgressComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTouchResetButton
{
public:
	UTouchResetButton(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UNamedSlot GetV_KeyGuideSlot() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UNamedSlot(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTouchStartBoosterButton
{
public:
	UTouchStartBoosterButton(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UWidgetAnimation GetShowAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation GetEnableAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation GetHideAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 728);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UWidgetAnimation GetGuideAnimation() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 736);
		return struct UWidgetAnimation(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class ATrackGimmick_Patrol
{
public:
	ATrackGimmick_Patrol(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UAnimSequenceBase GetIdleAnim() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UAnimSequenceBase GetActivateAnim() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct UCurveFloat GetTimeCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct UCurveFloat(ptr_addr);
	}
	float GetTimeCurveOffset() {
		return memory.read<float>(m_addr + 720);
	}
	float GetLocationLerpAlpha() {
		return memory.read<float>(m_addr + 724);
	}
	enum class EPatrolRotationType GetRotationType() {
		return memory.read<enum class EPatrolRotationType>(m_addr + 728);
	}
	float GetRotationOffset() {
		return memory.read<float>(m_addr + 732);
	}
	float GetRotationLerpAlpha() {
		return memory.read<float>(m_addr + 736);
	}
	struct UCurveVector GetRotationCurve() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 744);
		return struct UCurveVector(ptr_addr);
	}
	struct USkeletalMesh GetChildMesh() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 752);
		return struct USkeletalMesh(ptr_addr);
	}
	struct UAnimSequenceBase GetChildMeshAnim() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 760);
		return struct UAnimSequenceBase(ptr_addr);
	}
	struct FTransform GetChildMeshTransform() {
		return memory.read<struct FTransform>(m_addr + 768);
	}
	float GetRadius() {
		return memory.read<float>(m_addr + 816);
	}
	USceneComponent GetReactionClass() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 824);
		return USceneComponent(ptr_addr);
	}
	enum class EItemType GetSpawnItemType() {
		return memory.read<enum class EItemType>(m_addr + 832);
	}
	float GetDisableTime() {
		return memory.read<float>(m_addr + 836);
	}
	struct USplineComponent GetSplineComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 920);
		return struct USplineComponent(ptr_addr);
	}
	struct USkeletalMeshComponent GetChildMeshComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 928);
		return struct USkeletalMeshComponent(ptr_addr);
	}
	struct UItemComponent GetGimmickItemComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 936);
		return struct UItemComponent(ptr_addr);
	}
	float GetLastAffectTime() {
		return memory.read<float>(m_addr + 944);
	}

private:
	std::uint64_t m_addr = 0;
};


class UTrackPlayList
{
public:
	UTrackPlayList(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UTransformAnimationComponent
{
public:
	UTransformAnimationComponent(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UUfoReaction
{
public:
	UUfoReaction(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct TSoftObjectPtr<UFMODEvent> GetNormalAffectSound() {
		return memory.read<struct TSoftObjectPtr<UFMODEvent>>(m_addr + 544);
	}
	struct TSoftObjectPtr<UFMODEvent> GetEndSound() {
		return memory.read<struct TSoftObjectPtr<UFMODEvent>>(m_addr + 584);
	}
	struct TSoftObjectPtr<UFMODEvent> GetEMPSound() {
		return memory.read<struct TSoftObjectPtr<UFMODEvent>>(m_addr + 624);
	}
	struct TSoftObjectPtr<UParticleSystem> GetUfo_Affect() {
		return memory.read<struct TSoftObjectPtr<UParticleSystem>>(m_addr + 664);
	}
	struct UParticleSystemComponent GetBeamEffectComponent() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct UParticleSystemComponent(ptr_addr);
	}
	struct UItemComponent GetLocalVictim() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 720);
		return struct UItemComponent(ptr_addr);
	}
	struct UItemComponent GetLocalUser() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 728);
		return struct UItemComponent(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class UVoiceChatListItem
{
public:
	UVoiceChatListItem(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }


private:
	std::uint64_t m_addr = 0;
};


class UVoiceChatRowWidget
{
public:
	UVoiceChatRowWidget(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UWidgetAnimation GetAnim_Enter() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 688);
		return struct UWidgetAnimation(ptr_addr);
	}
	struct UKdTextBlock GetV_RiderNameTextBlock() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 696);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UKdButtonImage GetV_PlatformImg() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 704);
		return struct UKdButtonImage(ptr_addr);
	}
	struct UVoiceChatListItem GetListItem() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 712);
		return struct UVoiceChatListItem(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


class AWallGuide
{
public:
	AWallGuide(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	enum class EBCWallType GetBeginnerCareWallType() {
		return memory.read<enum class EBCWallType>(m_addr + 560);
	}
	enum class EBCWallThemeType GetThemeType() {
		return memory.read<enum class EBCWallThemeType>(m_addr + 561);
	}
	bool GetbActorUnMerge() {
		return memory.read<bool>(m_addr + 562);
	}
	struct UFMODEvent GetWall_ContactSound() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 568);
		return struct UFMODEvent(ptr_addr);
	}
	struct FSplineCurves GetSplineCurves() {
		return memory.read<struct FSplineCurves>(m_addr + 576);
	}
	int32_t GetMeshCount() {
		return memory.read<int32_t>(m_addr + 688);
	}
	struct TSoftObjectPtr<UMaterialInterface> GetMat_ShortCut() {
		return memory.read<struct TSoftObjectPtr<UMaterialInterface>>(m_addr + 696);
	}
	struct TSoftObjectPtr<UMaterialInterface> GetMat_Fall_Type_00() {
		return memory.read<struct TSoftObjectPtr<UMaterialInterface>>(m_addr + 736);
	}
	struct TSoftObjectPtr<UMaterialInterface> GetMat_Fall_Type_01() {
		return memory.read<struct TSoftObjectPtr<UMaterialInterface>>(m_addr + 776);
	}
	struct TSoftObjectPtr<UMaterialInterface> GetMat_Fall_Type_02() {
		return memory.read<struct TSoftObjectPtr<UMaterialInterface>>(m_addr + 816);
	}
	struct TSoftObjectPtr<UMaterialInterface> GetMat_Corner_Type_00() {
		return memory.read<struct TSoftObjectPtr<UMaterialInterface>>(m_addr + 856);
	}
	struct TSoftObjectPtr<UMaterialInterface> GetMat_Corner_Type_01() {
		return memory.read<struct TSoftObjectPtr<UMaterialInterface>>(m_addr + 896);
	}

private:
	std::uint64_t m_addr = 0;
};


class UWarningPopup
{
public:
	UWarningPopup(std::uint64_t p_addr = 0) : m_addr(p_addr) {}

	std::uint64_t GetAddress() { return m_addr; }

	bool IsValidClass() { return m_addr > 0; }

	struct UKdTextBlock GetTitleTextBlock() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 888);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UKdTextBlock GetSubTextBlock() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 896);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UKdTextBlock GetSubTextBlock2() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 904);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UKdTextBlock GetTagTextBlock() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 912);
		return struct UKdTextBlock(ptr_addr);
	}
	struct UButtonTemplate GetButtonConfirm() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 920);
		return struct UButtonTemplate(ptr_addr);
	}
	struct UButtonTemplate GetButtonCancel() {
		auto ptr_addr = memory.read<std::uint64_t>(m_addr + 928);
		return struct UButtonTemplate(ptr_addr);
	}

private:
	std::uint64_t m_addr = 0;
};


